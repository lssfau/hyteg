###############################################################################
##                                                                           ##
##    Genral settings                                                        ##
##                                                                           ##
###############################################################################

stages:
   - pretest
   - test

variables:
   GIT_SUBMODULE_STRATEGY: normal

###############################################################################
##                                                                           ##
##    Build templates                                                        ##
##                                                                           ##
###############################################################################

.build_template:
   script:
      - export
      - export NUM_CORES=$(nproc --all)
      - export MAX_BUILD_CORES=$(( $(awk '( $1 == "MemTotal:" ) { print $2 }' /proc/meminfo) / ( 4 * 1024 * 1024  ) ))
      - "[[ $MAX_BUILD_CORES -lt $NUM_CORES ]] && export MAX_BUILD_CORES=$MAX_BUILD_CORES || export MAX_BUILD_CORES=$NUM_CORES"
      - echo "NUM_CORES = $NUM_CORES - MAX_BUILD_CORES =  $MAX_BUILD_CORES"
      - $CXX --version
      - cmake --version
      - ccache --version
      - mpirun --version
      - export CCACHE_BASEDIR=$CI_PROJECT_DIR
      - mkdir $CI_PROJECT_DIR/build
      - cd $CI_PROJECT_DIR/build
      - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
      - cmake ..
        -DWARNING_ERROR=ON
        -DWALBERLA_BUILD_WITH_MPI=$WALBERLA_BUILD_WITH_MPI
        -DWALBERLA_BUILD_WITH_OPENMP=$WALBERLA_BUILD_WITH_OPENMP
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
        -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS
        -DHYTEG_BUILD_WITH_PETSC=$HYTEG_BUILD_WITH_PETSC
        -DPETSC_DIR=$PETSC_DIR
        -DHYTEG_BUILD_WITH_EIGEN=$HYTEG_BUILD_WITH_EIGEN
        -DWALBERLA_SANITIZE_ADDRESS=$WALBERLA_SANITIZE_ADDRESS
        -DWALBERLA_SANITIZE_UNDEFINED=$WALBERLA_SANITIZE_UNDEFINED
      - cmake . -LA
      - cd $CI_PROJECT_DIR/build/apps
      - make -j $MAX_BUILD_CORES -l $NUM_CORES
      - ctest -C $CMAKE_BUILD_TYPE --output-on-failure -j $NUM_CORES
      - cd $CI_PROJECT_DIR/build/tests
      - make -j $MAX_BUILD_CORES -l $NUM_CORES
      - ctest -LE $CTEST_EXCLUDE_LABELS -C $CMAKE_BUILD_TYPE --output-on-failure -j NUM_CORES
      - cd $CI_PROJECT_DIR/build/tutorials
      - make -j $MAX_BUILD_CORES -l $NUM_CORES
   tags:
      - docker
# these are the defaults which will be overwritten with the extends keyword
   variables:
     CTEST_EXCLUDE_LABELS: "longrun"
     WALBERLA_BUILD_WITH_MPI: "ON"
     WALBERLA_BUILD_WITH_OPENMP: "OFF"
     OMP_NUM_THREADS: "4"
     OMP_WAIT_POLICY: "PASSIVE"
     CMAKE_BUILD_TYPE: "Release"
     WALBERLA_BUFFER_DEBUG: "OFF"
     WALBERLA_DOUBLE_ACCURACY: "ON"
     WALBERLA_BUILD_WITH_METIS: "ON"
     WALBERLA_BUILD_WITH_PARMETIS: "ON"


###############################################################################
##                                                                           ##
##    Linux builds                                                           ##
##                                                                           ##
###############################################################################



intel_19_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker
      - intel

intel_19_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker
      - intel

intel_19_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   tags:
      - docker
      - intel

intel_19_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   tags:
      - docker
      - intel

intel_19_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   tags:
      - docker
      - intel

intel_19_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   tags:
      - docker
      - intel

gcc_7_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_7_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_7_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_ENABLE_GUI: "ON"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_7_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_7_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_7_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_8_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:8
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_9_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_10_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_10_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

gcc_10_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   tags:
      - docker

gcc_10_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   tags:
      - docker

gcc_10_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   stage: pretest
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   tags:
      - docker

gcc_10_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:10
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   tags:
      - docker

clang_6.0_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_6.0_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_6.0_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_6.0_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   tags:
      - docker

clang_6.0_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_6.0_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:6.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_7.0_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:7.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_8.0_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_9.0_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_10.0_serial:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_10.0_mpionly:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
   only:
      variables:
         - $ENABLE_NIGHTLY_BUILDS
   tags:
      - docker

clang_10.0_serial_dbg:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
   tags:
      - docker

clang_10.0_mpionly_dbg_eigen_petsc-complex_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc-complex"
   tags:
      - docker

clang_10.0_mpionly_dbg_sp:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"
      WALBERLA_BUILD_WITH_PARMETIS: "OFF"
      WALBERLA_BUILD_WITH_METIS: "OFF"
   tags:
      - docker

clang_10.0_mpionly_eigen_petsc_trilinos:
   extends: .build_template
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:10.0
   stage: pretest
   before_script:
      - apt-get remove -y cmake
      - pip3 install cmake==3.13.3
   variables:
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      HYTEG_BUILD_WITH_PETSC: "ON"
      HYTEG_BUILD_WITH_EIGEN: "ON"
      HYTEG_BUILD_WITH_TRILINOS: "ON"
      PETSC_DIR: "/opt/petsc"
   tags:
      - docker



###############################################################################
##                                                                           ##
##    Documentation                                                         ##
##                                                                           ##
###############################################################################

pages:
  image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
  script:
   - export CCACHE_BASEDIR=$CI_PROJECT_DIR
   - cd $CI_PROJECT_DIR/doc
   - python3 checkImages.py
   - mkdir $CI_PROJECT_DIR/build
   - cd $CI_PROJECT_DIR/build
   - cmake ..
   - make doc_hyteg
   - mkdir $CI_PROJECT_DIR/public
   - mv doc/html/* $CI_PROJECT_DIR/public/
  artifacts:
    paths:
    - public
  only:
    - master
  tags:
   - docker


###############################################################################
##                                                                           ##
##    Code analysis                                                          ##
##                                                                           ##
###############################################################################

# cppcheck:
#    image: walberla/cppcheck
#    script:
#       - cppcheck --version
#       - cppcheck . --max-configs=10 --enable=warning --enable=style --enable=performance --enable=portability -i src/gui/extern -i src/geometry/structured/extern -i sqlite3.c -i StackWalker.cpp -I src/ -I tests/ -I apps/ -D WALBERLA_BUILD_WITH_MPI -D WALBERLA_BUILD_WITH_METIS -D WALBERLA_BUILD_WITH_BOOST_THREAD -D WALBERLA_BUILD_WITH_PYTHON --xml 2> report.xml
#       - cppcheck-htmlreport --file=report.xml --report-dir=html_report --source-dir=.
#    artifacts:
#       untracked: true
#    only:
#       - triggers
#    tags:
#       - docker
#
#
coverage:
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:7
   script:
      - pip3 install gcovr
      - export NUM_CORES=$(nproc --all)
      - export MAX_BUILD_CORES=$(( $(awk '( $1 == "MemTotal:" ) { print $2 }' /proc/meminfo) / ( 4 * 1024 * 1024  ) ))
      - echo "NUM_CORES = $NUM_CORES - MAX_BUILD_CORES =  $MAX_BUILD_CORES"
      - $CXX --version
      - cmake --version
      - ccache --version
      - mpirun --version
      - gcov --version
      - echo $CI_PROJECT_DIR
      - mkdir build
      - cd build
      - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
      - cmake .. -DWARNING_ERROR=ON -DWALBERLA_BUILD_WITH_MPI=ON -DWALBERLA_BUILD_WITH_OPENMP=OFF -DCMAKE_BUILD_TYPE=DebugOptimized -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -DHYTEG_BUILD_WITH_PETSC=ON -DHYTEG_BUILD_WITH_TRILINOS=ON  -DCMAKE_CXX_FLAGS=--coverage
      - cmake . -LA
      - cd tests
      - make -j $MAX_BUILD_CORES -l $NUM_CORES
      - ctest -LE $CTEST_EXCLUDE_LABELS --output-on-failure -j $NUM_CORES
      - cd ../..
      - mkdir coverage
      - pwd
      - gcovr -r $CI_PROJECT_DIR -k build -f "src" -e ".*generatedKernels.*" --print-summary --html coverage/coverage.html --html-details --xml coverage/coverage.xml
   artifacts:
      paths:
         - coverage/
      reports:
        cobertura: coverage/coverage.xml
   tags:
      - docker
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"

###############################################################################
##                                                                           ##
##    Windows Builds                                                         ##
##                                                                           ##
###############################################################################


.win_build_template: &win_build_definition
   tags:
      - win
   script:
      - export PreferredToolArchitecture=x64
      - export OMP_NUM_THREADS=4
      - export OMP_WAIT_POLICY="PASSIVE"
      - export MSMPI_DISABLE_SHM=1
      - export
      - cmake --version
      - mkdir build
      - cd build
      - cmake -LA -DWALBERLA_BUILD_BENCHMARKS=OFF -DWALBERLA_BUILD_TUTORIALS=OFF -DWALBERLA_BUILD_WITH_MPI=$WALBERLA_BUILD_WITH_MPI -DWALBERLA_BUILD_WITH_OPENMP=$WALBERLA_BUILD_WITH_OPENMP -DWALBERLA_DOUBLE_ACCURACY=$WALBERLA_DOUBLE_ACCURACY -DWARNING_ERROR=OFF -G "$CMAKE_GENERATOR" ..
      - cmake --build . --config $BUILD_CONFIGURATION --target hyteg -- /maxcpucount:4
      #- cd tests
      #- ctest -LE $CTEST_EXCLUDE_LABELS -C $BUILD_CONFIGURATION --output-on-failure -j 4


msvc-14.2_MpiOnly:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      BUILD_CONFIGURATION: "Release"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"

msvc-14.2_Serial_Dbg:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      BUILD_CONFIGURATION: "DebugOptimized"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"

msvc-14.2_MpiOnly_Dbg:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      BUILD_CONFIGURATION: "DebugOptimized"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"

###############################################################################
##                                                                           ##
##    Benchmarks                                                             ##
##                                                                           ##
###############################################################################

benchmark_build_time:
  script:
    - apt-get update --fix-missing
    - apt-get install -y python3-influxdb time
    - cmake --version
    - ccache --version
    - mpirun --version
    - export CC=/usr/bin/gcc
    - export CXX=/usr/bin/g++
    - $CXX --version
    - mkdir $CI_PROJECT_DIR/build
    - cd $CI_PROJECT_DIR/build
    - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
    - cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS
    - cmake . -LA
    - time make core -j20
    - /usr/bin/time -o $CI_PROJECT_DIR/BuildTiming.txt -f "hyteg buildtime %e" make hyteg -j20
    - cd $CI_PROJECT_DIR/build/tests && \
    - /usr/bin/time -o $CI_PROJECT_DIR/BuildTiming.txt -a -f "tests buildtime %e" make -j20
    - cd $CI_PROJECT_DIR/build/apps && \
    - /usr/bin/time -o $CI_PROJECT_DIR/BuildTiming.txt -a -f "apps buildtime %e" make -j20
    - cd $CI_PROJECT_DIR/
    - cat BuildTiming.txt
    - python3 $CI_PROJECT_DIR/data/scripts/upload.py
  image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9
  tags:
    - docker-benchmark
  variables:
    CTEST_EXCLUDE_LABELS: "longrun"

benchmark_ClangBuildAnalyzer:
  script:
    - apt-get update --fix-missing
    - apt-get -y install apt-transport-https ca-certificates gnupg software-properties-common wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
    - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
    - apt-get -y install cmake ninja-build
    - cmake --version
    - ccache --version
    - mpirun --version
    - export CC=clang
    - export CXX=clang++
    - $CXX --version
    - cd /tmp
    - git clone https://github.com/aras-p/ClangBuildAnalyzer.git
    - cd ClangBuildAnalyzer
    - cmake .
    - make
    - export PATH+=:$(pwd)
    - mkdir $CI_PROJECT_DIR/build
    - cd $CI_PROJECT_DIR/build
    - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
    - cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -G Ninja -DCMAKE_CXX_FLAGS=-ftime-trace -G Ninja
    - cmake . -LA
    - ClangBuildAnalyzer --start src
    - ninja hyteg
    - ClangBuildAnalyzer --stop src CBA
    - ClangBuildAnalyzer --analyze CBA
  image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:9.0
  tags:
    - docker-benchmark
  variables:
    CTEST_EXCLUDE_LABELS: "longrun"

.benchmark_template: &benchmark_definition
   script:
      - apt-get update --fix-missing
      - apt-get install -y python3-influxdb python3-git
      - $CXX --version
      - cmake --version
      - ccache --version
      - mpirun --version
      - export CCACHE_BASEDIR=$CI_PROJECT_DIR
      - mkdir $CI_PROJECT_DIR/build
      - cd $CI_PROJECT_DIR/build
      - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
      - cmake .. -DWALBERLA_BUFFER_DEBUG=OFF -DWALBERLA_BUILD_TESTS=OFF -DWALBERLA_BUILD_BENCHMARKS=OFF -DWALBERLA_BUILD_TUTORIALS=OFF -DWALBERLA_BUILD_TOOLS=OFF -DWALBERLA_BUILD_WITH_MPI=ON -DWALBERLA_BUILD_WITH_CUDA=OFF -DWALBERLA_BUILD_WITH_PYTHON=OFF -DWALBERLA_BUILD_WITH_OPENMP=OFF -DCMAKE_BUILD_TYPE=RELEASE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -DWALBERLA_DOUBLE_ACCURACY=ON -DWARNING_ERROR=ON -DWALBERLA_BUILD_WITH_METIS=OFF -DWALBERLA_BUILD_WITH_PARMETIS=OFF -DWALBERLA_OPTIMIZE_FOR_LOCALHOST=ON -DWALBERLA_BUILD_WITH_FASTMATH=OFF -DWALBERLA_BUILD_WITH_LTO=OFF -DWALBERLA_BUILD_WITH_LIKWID_MARKERS=ON
      - cmake . -LA
      - time make core -j20
      - time make hyteg -j20
      - cd $CI_PROJECT_DIR/build/tests
      - time make -j20
      - time ctest -LE $CTEST_EXCLUDE_LABELS -C $CMAKE_BUILD_TYPE --output-on-failure -j 1
      - cd $CI_PROJECT_DIR/build/apps
      - time make -j20
      - cd $CI_PROJECT_DIR/build/apps/benchmarks/P1Benchmark
      - make -j 20
      - export PATH=$PATH:/usr/local/likwid/bin
      - likwid-setFrequencies -t 0
      - likwid-setFrequencies -g performance
      - likwid-setFrequencies -f 3.3 # set frequency to 3.3
      - mpirun --allow-run-as-root -np 1 --map-by core --bind-to core --report-bindings ./P1Benchmark P1Benchmark.prm -Parameters.level=10 | tee P1BenchmarkOutput.txt
      - python3 upload.py
      - mpirun --allow-run-as-root -np 1 --map-by core --bind-to core --report-bindings ./P1Benchmark P1Benchmark.prm -Parameters.level=12 | tee P1BenchmarkOutput.txt
      - python3 upload.py
      - mpirun --allow-run-as-root -np 1 --map-by core --bind-to core --report-bindings ./P1Benchmark P1Benchmark.prm -Parameters.level=14 | tee P1BenchmarkOutput.txt
      - python3 upload.py
      - cd $CI_PROJECT_DIR/build/apps/benchmarks/P2Benchmark
      - make -j 20
      - export PATH=$PATH:/usr/local/likwid/bin
      - likwid-setFrequencies -t 0
      - likwid-setFrequencies -g performance
      - likwid-setFrequencies -f 3.3 # set frequency to 3.3
      - mpirun --allow-run-as-root -np 1 --map-by core --bind-to core --report-bindings ./P2Benchmark P2Benchmark.prm -Parameters.level=10 | tee P2BenchmarkOutput.txt
      - python3 upload.py
      - cd $CI_PROJECT_DIR/build/apps/benchmarks/P2SolverBenchmark
      - make -j 20
      - export PATH=$PATH:/usr/local/likwid/bin
      - likwid-setFrequencies -t 0
      - likwid-setFrequencies -g performance
      - likwid-setFrequencies -f 3.3 # set frequency to 3.3
      - mpirun --allow-run-as-root -np 1 --map-by core --bind-to core --report-bindings ./P2SolverBenchmark P2SolverBenchmark.prm -Parameters.level=8 | tee P2SolverBenchmarkOutput.txt
      - python3 upload.py
      - cd $CI_PROJECT_DIR/build/apps/benchmarks/ApplyPerformanceAnalysis-2D-P2/
      - make -j 20
      - python3 createLevelScalingDataOnSwarm.py
      - mkdir -p ~/.config/matplotlib
      - echo backend:Agg > ~/.config/matplotlib/matplotlibrc
      - cat $DOCKER_IMAGE_NAME.txt
      - python3 createLevelScalingPlot.py $DOCKER_IMAGE_NAME.txt 2 15 --perfgroup "DP [MFLOP/s] STAT"
   tags:
      - docker-benchmark
   variables:
     CTEST_EXCLUDE_LABELS: "longrun"
   artifacts:
     paths:
       - $CI_PROJECT_DIR/build/apps/benchmarks/ApplyPerformanceAnalysis-2D-P2/*.pdf
       - $CI_PROJECT_DIR/build/apps/benchmarks/ApplyPerformanceAnalysis-2D-P2/*.txt
     expire_in: 1 weeks

benchmark_intel19:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:19
   before_script:
     - apt-get remove -y cmake
     - pip3 install cmake==3.13.3

benchmark_gcc9:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:9

benchmark_clang8:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:8.0