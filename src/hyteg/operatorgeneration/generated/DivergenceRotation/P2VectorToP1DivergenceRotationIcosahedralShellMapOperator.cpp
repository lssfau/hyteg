/*
* Copyright (c) 2017-2024 Nils Kohl, Daniel Bauer, Fabian BÃ¶hm.
*
* This file is part of HyTeG
* (see https://i10git.cs.fau.de/hyteg/hyteg).
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/*
* The entire file was generated with the HyTeG Operator Generator.
*
* Avoid modifying this file. If buggy, consider fixing the generator itself.
*/

// Unfortunately, the inverse diagonal kernel wrapper triggers a GCC bug (maybe
// (related to) https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107087) causing a
// warning in an internal standard library header (bits/stl_algobase.h). As a
// workaround, we disable the warning and include this header indirectly through
// a public header.
#include <waLBerlaDefinitions.h>
#ifdef WALBERLA_CXX_COMPILER_IS_GNU
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wnonnull"
#endif
#include <cmath>
#ifdef WALBERLA_CXX_COMPILER_IS_GNU
#pragma GCC diagnostic pop
#endif

#include "P2VectorToP1DivergenceRotationIcosahedralShellMapOperator.hpp"

#define FUNC_PREFIX

namespace hyteg {

namespace operatorgeneration {

P2VectorToP1DivergenceRotationIcosahedralShellMapOperator::P2VectorToP1DivergenceRotationIcosahedralShellMapOperator(
    const std::shared_ptr< PrimitiveStorage >& storage,
    size_t                                     minLevel,
    size_t                                     maxLevel,
    const P2Function< walberla::float64 >&     _nx_rotation,
    const P2Function< walberla::float64 >&     _ny_rotation,
    const P2Function< walberla::float64 >&     _nz_rotation )
: Operator( storage, minLevel, maxLevel )
, nx_rotation( _nx_rotation )
, ny_rotation( _ny_rotation )
, nz_rotation( _nz_rotation )
{}

void P2VectorToP1DivergenceRotationIcosahedralShellMapOperator::apply( const P2VectorFunction< walberla::float64 >& src,
                                                                       const P1Function< walberla::float64 >&       dst,
                                                                       uint_t                                       level,
                                                                       DoFType                                      flag,
                                                                       UpdateType updateType ) const
{
   this->startTiming( "apply" );

   // Make sure that halos are up-to-date
   this->timingTree_->start( "pre-communication" );
   if ( this->storage_->hasGlobalCells() )
   {
      // Note that the order of communication is important, since the face -> cell communication may overwrite
      // parts of the halos that carry the macro-vertex and macro-edge unknowns.
      src[0].communicate< Face, Cell >( level );
      src[0].communicate< Edge, Cell >( level );
      src[0].communicate< Vertex, Cell >( level );
      src[1].communicate< Face, Cell >( level );
      src[1].communicate< Edge, Cell >( level );
      src[1].communicate< Vertex, Cell >( level );
      src[2].communicate< Face, Cell >( level );
      src[2].communicate< Edge, Cell >( level );
      src[2].communicate< Vertex, Cell >( level );
      nx_rotation.communicate< Face, Cell >( level );
      nx_rotation.communicate< Edge, Cell >( level );
      nx_rotation.communicate< Vertex, Cell >( level );
      ny_rotation.communicate< Face, Cell >( level );
      ny_rotation.communicate< Edge, Cell >( level );
      ny_rotation.communicate< Vertex, Cell >( level );
      nz_rotation.communicate< Face, Cell >( level );
      nz_rotation.communicate< Edge, Cell >( level );
      nz_rotation.communicate< Vertex, Cell >( level );
   }
   else
   {
      WALBERLA_ABORT( "Not implemented." );
   }
   this->timingTree_->stop( "pre-communication" );

   if ( updateType == Replace )
   {
      // We need to zero the destination array (including halos).
      // However, we must not zero out anything that is not flagged with the specified BCs.
      // Therefore, we first zero out everything that flagged, and then, later,
      // the halos of the highest dim primitives.
      dst.interpolate( walberla::numeric_cast< walberla::float64 >( 0 ), level, flag );
   }

   if ( storage_->hasGlobalCells() )
   {
      for ( auto& it : storage_->getCells() )
      {
         Cell& cell = *it.second;

         // get hold of the actual numerical data in the functions
         walberla::float64* _data_src_vertex_0 =
             cell.getData( src[0].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_src_edge_0 = cell.getData( src[0].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_src_vertex_1 =
             cell.getData( src[1].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_src_edge_1 = cell.getData( src[1].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_src_vertex_2 =
             cell.getData( src[2].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_src_edge_2 = cell.getData( src[2].getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         walberla::float64* _data_dst = cell.getData( dst.getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationVertex =
             cell.getData( nx_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationEdge =
             cell.getData( nx_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationVertex =
             cell.getData( ny_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationEdge =
             cell.getData( ny_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationVertex =
             cell.getData( nz_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationEdge =
             cell.getData( nz_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         // Zero out dst halos only
         //
         // This is also necessary when using update type == Add.
         // During additive comm we then skip zeroing the data on the lower-dim primitives.
         for ( const auto& idx : vertexdof::macrocell::Iterator( level ) )
         {
            if ( !vertexdof::macrocell::isOnCellFace( idx, level ).empty() )
            {
               auto arrayIdx       = vertexdof::macrocell::index( level, idx.x(), idx.y(), idx.z() );
               _data_dst[arrayIdx] = walberla::float64( 0 );
            }
         }

         const auto micro_edges_per_macro_edge                = (int64_t) levelinfo::num_microedges_per_edge( level );
         const auto micro_edges_per_macro_edge_float          = (walberla::float64) levelinfo::num_microedges_per_edge( level );
         const walberla::float64 macro_vertex_coord_id_0comp0 = (walberla::float64) cell.getCoordinates()[0][0];
         const walberla::float64 macro_vertex_coord_id_0comp1 = (walberla::float64) cell.getCoordinates()[0][1];
         const walberla::float64 macro_vertex_coord_id_0comp2 = (walberla::float64) cell.getCoordinates()[0][2];
         const walberla::float64 macro_vertex_coord_id_1comp0 = (walberla::float64) cell.getCoordinates()[1][0];
         const walberla::float64 macro_vertex_coord_id_1comp1 = (walberla::float64) cell.getCoordinates()[1][1];
         const walberla::float64 macro_vertex_coord_id_1comp2 = (walberla::float64) cell.getCoordinates()[1][2];
         const walberla::float64 macro_vertex_coord_id_2comp0 = (walberla::float64) cell.getCoordinates()[2][0];
         const walberla::float64 macro_vertex_coord_id_2comp1 = (walberla::float64) cell.getCoordinates()[2][1];
         const walberla::float64 macro_vertex_coord_id_2comp2 = (walberla::float64) cell.getCoordinates()[2][2];
         const walberla::float64 macro_vertex_coord_id_3comp0 = (walberla::float64) cell.getCoordinates()[3][0];
         const walberla::float64 macro_vertex_coord_id_3comp1 = (walberla::float64) cell.getCoordinates()[3][1];
         const walberla::float64 macro_vertex_coord_id_3comp2 = (walberla::float64) cell.getCoordinates()[3][2];
         WALBERLA_CHECK_NOT_NULLPTR(
             std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() ),
             "This operator requires the IcosahedralShellMap to be registered as GeometryMap on every macro-cell." )
         real_t radRefVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRefVertex();
         real_t radRayVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRayVertex();
         real_t refVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[0];
         real_t rayVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[0];
         real_t thrVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[0];
         real_t forVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[0];
         real_t refVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[1];
         real_t rayVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[1];
         real_t thrVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[1];
         real_t forVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[1];
         real_t refVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[2];
         real_t rayVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[2];
         real_t thrVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[2];
         real_t forVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[2];

         this->timingTree_->start( "kernel" );

         apply_P2VectorToP1DivergenceRotationIcosahedralShellMapOperator_macro_3D(

             _data_dst,
             _data_nx_rotationEdge,
             _data_nx_rotationVertex,
             _data_ny_rotationEdge,
             _data_ny_rotationVertex,
             _data_nz_rotationEdge,
             _data_nz_rotationVertex,
             _data_src_edge_0,
             _data_src_edge_1,
             _data_src_edge_2,
             _data_src_vertex_0,
             _data_src_vertex_1,
             _data_src_vertex_2,
             forVertex_0,
             forVertex_1,
             forVertex_2,
             macro_vertex_coord_id_0comp0,
             macro_vertex_coord_id_0comp1,
             macro_vertex_coord_id_0comp2,
             macro_vertex_coord_id_1comp0,
             macro_vertex_coord_id_1comp1,
             macro_vertex_coord_id_1comp2,
             macro_vertex_coord_id_2comp0,
             macro_vertex_coord_id_2comp1,
             macro_vertex_coord_id_2comp2,
             macro_vertex_coord_id_3comp0,
             macro_vertex_coord_id_3comp1,
             macro_vertex_coord_id_3comp2,
             micro_edges_per_macro_edge,
             micro_edges_per_macro_edge_float,
             radRayVertex,
             radRefVertex,
             rayVertex_0,
             rayVertex_1,
             rayVertex_2,
             refVertex_0,
             refVertex_1,
             refVertex_2,
             thrVertex_0,
             thrVertex_1,
             thrVertex_2 );

         this->timingTree_->stop( "kernel" );
      }

      // Push result to lower-dimensional primitives
      //
      this->timingTree_->start( "post-communication" );
      // Note: We could avoid communication here by implementing the apply() also for the respective
      //       lower dimensional primitives!
      dst.communicateAdditively< Cell, Face >( level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst.communicateAdditively< Cell, Edge >( level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst.communicateAdditively< Cell, Vertex >( level, DoFType::All ^ flag, *storage_, updateType == Replace );
      this->timingTree_->stop( "post-communication" );
   }
   else
   {
      WALBERLA_ABORT( "Not implemented." );
   }

   this->stopTiming( "apply" );
}
void P2VectorToP1DivergenceRotationIcosahedralShellMapOperator::toMatrix( const std::shared_ptr< SparseMatrixProxy >& mat,
                                                                          const P2VectorFunction< idx_t >&            src,
                                                                          const P1Function< idx_t >&                  dst,
                                                                          uint_t                                      level,
                                                                          DoFType                                     flag ) const
{
   this->startTiming( "toMatrix" );

   // We currently ignore the flag provided!
   if ( flag != All )
   {
      WALBERLA_LOG_WARNING_ON_ROOT( "Input flag ignored in toMatrix; using flag = All" );
   }

   if ( storage_->hasGlobalCells() )
   {
      this->timingTree_->start( "pre-communication" );
      nx_rotation.communicate< Face, Cell >( level );
      nx_rotation.communicate< Edge, Cell >( level );
      nx_rotation.communicate< Vertex, Cell >( level );
      ny_rotation.communicate< Face, Cell >( level );
      ny_rotation.communicate< Edge, Cell >( level );
      ny_rotation.communicate< Vertex, Cell >( level );
      nz_rotation.communicate< Face, Cell >( level );
      nz_rotation.communicate< Edge, Cell >( level );
      nz_rotation.communicate< Vertex, Cell >( level );
      this->timingTree_->stop( "pre-communication" );

      for ( auto& it : storage_->getCells() )
      {
         Cell& cell = *it.second;

         // get hold of the actual numerical data
         idx_t* _data_src_vertex_0 = cell.getData( src[0].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_src_edge_0   = cell.getData( src[0].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_src_vertex_1 = cell.getData( src[1].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_src_edge_1   = cell.getData( src[1].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_src_vertex_2 = cell.getData( src[2].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_src_edge_2   = cell.getData( src[2].getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         idx_t*             _data_dst = cell.getData( dst.getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationVertex =
             cell.getData( nx_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationEdge =
             cell.getData( nx_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationVertex =
             cell.getData( ny_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationEdge =
             cell.getData( ny_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationVertex =
             cell.getData( nz_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationEdge =
             cell.getData( nz_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         const auto micro_edges_per_macro_edge                = (int64_t) levelinfo::num_microedges_per_edge( level );
         const auto micro_edges_per_macro_edge_float          = (walberla::float64) levelinfo::num_microedges_per_edge( level );
         const walberla::float64 macro_vertex_coord_id_0comp0 = (walberla::float64) cell.getCoordinates()[0][0];
         const walberla::float64 macro_vertex_coord_id_0comp1 = (walberla::float64) cell.getCoordinates()[0][1];
         const walberla::float64 macro_vertex_coord_id_0comp2 = (walberla::float64) cell.getCoordinates()[0][2];
         const walberla::float64 macro_vertex_coord_id_1comp0 = (walberla::float64) cell.getCoordinates()[1][0];
         const walberla::float64 macro_vertex_coord_id_1comp1 = (walberla::float64) cell.getCoordinates()[1][1];
         const walberla::float64 macro_vertex_coord_id_1comp2 = (walberla::float64) cell.getCoordinates()[1][2];
         const walberla::float64 macro_vertex_coord_id_2comp0 = (walberla::float64) cell.getCoordinates()[2][0];
         const walberla::float64 macro_vertex_coord_id_2comp1 = (walberla::float64) cell.getCoordinates()[2][1];
         const walberla::float64 macro_vertex_coord_id_2comp2 = (walberla::float64) cell.getCoordinates()[2][2];
         const walberla::float64 macro_vertex_coord_id_3comp0 = (walberla::float64) cell.getCoordinates()[3][0];
         const walberla::float64 macro_vertex_coord_id_3comp1 = (walberla::float64) cell.getCoordinates()[3][1];
         const walberla::float64 macro_vertex_coord_id_3comp2 = (walberla::float64) cell.getCoordinates()[3][2];
         WALBERLA_CHECK_NOT_NULLPTR(
             std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() ),
             "This operator requires the IcosahedralShellMap to be registered as GeometryMap on every macro-cell." )
         real_t radRefVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRefVertex();
         real_t radRayVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRayVertex();
         real_t refVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[0];
         real_t rayVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[0];
         real_t thrVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[0];
         real_t forVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[0];
         real_t refVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[1];
         real_t rayVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[1];
         real_t thrVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[1];
         real_t forVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[1];
         real_t refVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[2];
         real_t rayVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[2];
         real_t thrVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[2];
         real_t forVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[2];

         this->timingTree_->start( "kernel" );

         toMatrix_P2VectorToP1DivergenceRotationIcosahedralShellMapOperator_macro_3D(

             _data_dst,
             _data_nx_rotationEdge,
             _data_nx_rotationVertex,
             _data_ny_rotationEdge,
             _data_ny_rotationVertex,
             _data_nz_rotationEdge,
             _data_nz_rotationVertex,
             _data_src_edge_0,
             _data_src_edge_1,
             _data_src_edge_2,
             _data_src_vertex_0,
             _data_src_vertex_1,
             _data_src_vertex_2,
             forVertex_0,
             forVertex_1,
             forVertex_2,
             macro_vertex_coord_id_0comp0,
             macro_vertex_coord_id_0comp1,
             macro_vertex_coord_id_0comp2,
             macro_vertex_coord_id_1comp0,
             macro_vertex_coord_id_1comp1,
             macro_vertex_coord_id_1comp2,
             macro_vertex_coord_id_2comp0,
             macro_vertex_coord_id_2comp1,
             macro_vertex_coord_id_2comp2,
             macro_vertex_coord_id_3comp0,
             macro_vertex_coord_id_3comp1,
             macro_vertex_coord_id_3comp2,
             mat,
             micro_edges_per_macro_edge,
             micro_edges_per_macro_edge_float,
             radRayVertex,
             radRefVertex,
             rayVertex_0,
             rayVertex_1,
             rayVertex_2,
             refVertex_0,
             refVertex_1,
             refVertex_2,
             thrVertex_0,
             thrVertex_1,
             thrVertex_2 );

         this->timingTree_->stop( "kernel" );
      }
   }
   else
   {
      this->timingTree_->start( "pre-communication" );
      communication::syncFunctionBetweenPrimitives( nx_rotation, level, communication::syncDirection_t::LOW2HIGH );
      communication::syncFunctionBetweenPrimitives( ny_rotation, level, communication::syncDirection_t::LOW2HIGH );
      communication::syncFunctionBetweenPrimitives( nz_rotation, level, communication::syncDirection_t::LOW2HIGH );
      this->timingTree_->stop( "pre-communication" );

      WALBERLA_ABORT( "Not implemented." );
   }
   this->stopTiming( "toMatrix" );
}
void P2VectorToP1DivergenceRotationIcosahedralShellMapOperator::
    apply_P2VectorToP1DivergenceRotationIcosahedralShellMapOperator_macro_3D( walberla::float64* RESTRICT _data_dst,
                                                                              walberla::float64* RESTRICT _data_nx_rotationEdge,
                                                                              walberla::float64* RESTRICT _data_nx_rotationVertex,
                                                                              walberla::float64* RESTRICT _data_ny_rotationEdge,
                                                                              walberla::float64* RESTRICT _data_ny_rotationVertex,
                                                                              walberla::float64* RESTRICT _data_nz_rotationEdge,
                                                                              walberla::float64* RESTRICT _data_nz_rotationVertex,
                                                                              walberla::float64* RESTRICT _data_src_edge_0,
                                                                              walberla::float64* RESTRICT _data_src_edge_1,
                                                                              walberla::float64* RESTRICT _data_src_edge_2,
                                                                              walberla::float64* RESTRICT _data_src_vertex_0,
                                                                              walberla::float64* RESTRICT _data_src_vertex_1,
                                                                              walberla::float64* RESTRICT _data_src_vertex_2,
                                                                              walberla::float64           forVertex_0,
                                                                              walberla::float64           forVertex_1,
                                                                              walberla::float64           forVertex_2,
                                                                              walberla::float64 macro_vertex_coord_id_0comp0,
                                                                              walberla::float64 macro_vertex_coord_id_0comp1,
                                                                              walberla::float64 macro_vertex_coord_id_0comp2,
                                                                              walberla::float64 macro_vertex_coord_id_1comp0,
                                                                              walberla::float64 macro_vertex_coord_id_1comp1,
                                                                              walberla::float64 macro_vertex_coord_id_1comp2,
                                                                              walberla::float64 macro_vertex_coord_id_2comp0,
                                                                              walberla::float64 macro_vertex_coord_id_2comp1,
                                                                              walberla::float64 macro_vertex_coord_id_2comp2,
                                                                              walberla::float64 macro_vertex_coord_id_3comp0,
                                                                              walberla::float64 macro_vertex_coord_id_3comp1,
                                                                              walberla::float64 macro_vertex_coord_id_3comp2,
                                                                              int64_t           micro_edges_per_macro_edge,
                                                                              walberla::float64 micro_edges_per_macro_edge_float,
                                                                              walberla::float64 radRayVertex,
                                                                              walberla::float64 radRefVertex,
                                                                              walberla::float64 rayVertex_0,
                                                                              walberla::float64 rayVertex_1,
                                                                              walberla::float64 rayVertex_2,
                                                                              walberla::float64 refVertex_0,
                                                                              walberla::float64 refVertex_1,
                                                                              walberla::float64 refVertex_2,
                                                                              walberla::float64 thrVertex_0,
                                                                              walberla::float64 thrVertex_1,
                                                                              walberla::float64 thrVertex_2 ) const
{
   {
      const walberla::float64 _data_q_w[] = {
          -0.1333333333333333, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983 };

      const walberla::float64 _data_q_p_0[] = { 0.25, 0.16666666666666666, 0.16666666666666666, 0.5, 0.16666666666666666 };

      const walberla::float64 _data_q_p_1[] = { 0.25, 0.16666666666666666, 0.5, 0.16666666666666666, 0.16666666666666666 };

      const walberla::float64 _data_q_p_2[] = { 0.25, 0.5, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666 };

      {
         /* CellType.WHITE_UP */
         const walberla::float64 tmp_coords_jac_0_WHITE_UP   = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 p_affine_const_0_0_WHITE_UP = macro_vertex_coord_id_0comp0;
         const walberla::float64 p_affine_const_0_1_WHITE_UP = macro_vertex_coord_id_0comp1;
         const walberla::float64 p_affine_const_0_2_WHITE_UP = macro_vertex_coord_id_0comp2;
         const walberla::float64 p_affine_const_1_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 p_affine_const_1_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 p_affine_const_1_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 p_affine_const_2_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_2_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_2_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_3_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 p_affine_const_3_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 p_affine_const_3_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 jac_affine_0_0_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_1_0_WHITE_UP;
         const walberla::float64 jac_affine_0_1_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_2_0_WHITE_UP;
         const walberla::float64 jac_affine_0_2_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_3_0_WHITE_UP;
         const walberla::float64 jac_affine_1_0_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_1_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_2_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_5_WHITE_UP = jac_affine_0_2_WHITE_UP * jac_affine_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_2_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_3_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_3_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_0_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_1_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_2_WHITE_UP = jac_affine_1_2_WHITE_UP * jac_affine_2_1_WHITE_UP;
         const walberla::float64 jac_affine_2_2_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_3_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_1_WHITE_UP = jac_affine_1_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_4_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_6_WHITE_UP =
             jac_affine_0_0_WHITE_UP * tmp_coords_jac_1_WHITE_UP - jac_affine_0_0_WHITE_UP * tmp_coords_jac_2_WHITE_UP +
             jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP -
             jac_affine_1_0_WHITE_UP * tmp_coords_jac_4_WHITE_UP + jac_affine_2_0_WHITE_UP * tmp_coords_jac_3_WHITE_UP -
             jac_affine_2_0_WHITE_UP * tmp_coords_jac_5_WHITE_UP;
         const walberla::float64 tmp_coords_jac_7_WHITE_UP = 1.0 / ( tmp_coords_jac_6_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_1_WHITE_UP - tmp_coords_jac_2_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( jac_affine_0_2_WHITE_UP * jac_affine_2_1_WHITE_UP - tmp_coords_jac_4_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_3_WHITE_UP - tmp_coords_jac_5_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_1_0_WHITE_UP * jac_affine_2_2_WHITE_UP + jac_affine_1_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_2_2_WHITE_UP - jac_affine_0_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_1_2_WHITE_UP + jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP - jac_affine_1_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_2_1_WHITE_UP + jac_affine_0_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_1_1_WHITE_UP - jac_affine_0_1_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 abs_det_jac_affine_WHITE_UP = abs( tmp_coords_jac_6_WHITE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_1 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_2 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_3 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_10 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_11 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_12 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_13 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_20 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_21 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_22 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_23 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_WHITE_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_WHITE_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_WHITE_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_WHITE_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_WHITE_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_WHITE_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_WHITE_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_WHITE_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_WHITE_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_WHITE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
               }
      }
      {
         /* CellType.WHITE_DOWN */
         const walberla::float64 tmp_coords_jac_0_WHITE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_3_WHITE_DOWN = tmp_coords_jac_1_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_4_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_5_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_WHITE_DOWN = tmp_coords_jac_4_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_7_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_8_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_9_WHITE_DOWN = tmp_coords_jac_7_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_10_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_11_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_12_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_WHITE_DOWN = tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_1_WHITE_DOWN = tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_2_WHITE_DOWN = tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_0_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_1_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_1_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_4_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_7_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 jac_affine_0_0_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_1_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_1_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_2_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_2_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_3_0_WHITE_DOWN;
         const walberla::float64 jac_affine_1_0_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_1_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_2_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_17_WHITE_DOWN  = jac_affine_0_2_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_2_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_3_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_15_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_0_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_1_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_14_WHITE_DOWN  = jac_affine_1_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN;
         const walberla::float64 jac_affine_2_2_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_3_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_13_WHITE_DOWN  = jac_affine_1_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_16_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_18_WHITE_DOWN =
             jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_13_WHITE_DOWN - jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_14_WHITE_DOWN +
             jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN -
             jac_affine_1_0_WHITE_DOWN * tmp_coords_jac_16_WHITE_DOWN + jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_15_WHITE_DOWN -
             jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_17_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_19_WHITE_DOWN = 1.0 / ( tmp_coords_jac_18_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_13_WHITE_DOWN - tmp_coords_jac_14_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - tmp_coords_jac_16_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_15_WHITE_DOWN - tmp_coords_jac_17_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_1_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN + jac_affine_1_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN - jac_affine_0_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN + jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - jac_affine_1_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN + jac_affine_0_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN - jac_affine_0_1_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 abs_det_jac_affine_WHITE_DOWN = abs( tmp_coords_jac_18_WHITE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 2; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_1 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_2 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_3 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_10 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_11 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_12 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_13 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_20 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_21 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_22 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_23 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_4 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nx_rotation_dof_8 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_4 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 ny_rotation_dof_8 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_4 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nz_rotation_dof_8 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_WHITE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
               }
      }
      {
         /* CellType.BLUE_UP */
         const walberla::float64 tmp_coords_jac_0_BLUE_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_6_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_0_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_0_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_0_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 p_affine_const_1_0_BLUE_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_1_1_BLUE_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_1_2_BLUE_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_2_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_2_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_2_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_3_0_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) +
             tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_3_1_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) +
             tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_3_2_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) +
             tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 jac_affine_0_0_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_1_0_BLUE_UP;
         const walberla::float64 jac_affine_0_1_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_2_0_BLUE_UP;
         const walberla::float64 jac_affine_0_2_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_3_0_BLUE_UP;
         const walberla::float64 jac_affine_1_0_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_1_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_2_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_11_BLUE_UP = jac_affine_0_2_BLUE_UP * jac_affine_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_2_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_3_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_9_BLUE_UP  = jac_affine_0_1_BLUE_UP * jac_affine_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_0_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_1_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_8_BLUE_UP  = jac_affine_1_2_BLUE_UP * jac_affine_2_1_BLUE_UP;
         const walberla::float64 jac_affine_2_2_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_3_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_7_BLUE_UP  = jac_affine_1_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_10_BLUE_UP = jac_affine_0_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_12_BLUE_UP =
             jac_affine_0_0_BLUE_UP * tmp_coords_jac_7_BLUE_UP - jac_affine_0_0_BLUE_UP * tmp_coords_jac_8_BLUE_UP +
             jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP -
             jac_affine_1_0_BLUE_UP * tmp_coords_jac_10_BLUE_UP - jac_affine_2_0_BLUE_UP * tmp_coords_jac_11_BLUE_UP +
             jac_affine_2_0_BLUE_UP * tmp_coords_jac_9_BLUE_UP;
         const walberla::float64 tmp_coords_jac_13_BLUE_UP = 1.0 / ( tmp_coords_jac_12_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( tmp_coords_jac_7_BLUE_UP - tmp_coords_jac_8_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( jac_affine_0_2_BLUE_UP * jac_affine_2_1_BLUE_UP - tmp_coords_jac_10_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( -tmp_coords_jac_11_BLUE_UP + tmp_coords_jac_9_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_1_0_BLUE_UP * jac_affine_2_2_BLUE_UP + jac_affine_1_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_2_2_BLUE_UP - jac_affine_0_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_1_2_BLUE_UP + jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP - jac_affine_1_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_2_1_BLUE_UP + jac_affine_0_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_1_1_BLUE_UP - jac_affine_0_1_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 abs_det_jac_affine_BLUE_UP = abs( tmp_coords_jac_12_BLUE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_1 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_2 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_3 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_10 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_11 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_12 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_13 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_20 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_21 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_22 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_23 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_BLUE_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_BLUE_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_BLUE_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_BLUE_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_BLUE_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_BLUE_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_BLUE_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_BLUE_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_BLUE_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_BLUE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
               }
      }
      {
         /* CellType.BLUE_DOWN */
         const walberla::float64 tmp_coords_jac_0_BLUE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_DOWN = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_6_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_7_BLUE_DOWN = macro_vertex_coord_id_0comp1 + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_8_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 tmp_coords_jac_9_BLUE_DOWN   = macro_vertex_coord_id_0comp2 + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_0_BLUE_DOWN = tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_1_BLUE_DOWN = tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_2_BLUE_DOWN = tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_0_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) +
             tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_1_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) +
             tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_2_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) +
             tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 jac_affine_0_0_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_1_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_1_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_2_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_2_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_3_0_BLUE_DOWN;
         const walberla::float64 jac_affine_1_0_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_1_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_2_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_14_BLUE_DOWN  = jac_affine_0_2_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_2_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_3_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_12_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_0_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_1_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_11_BLUE_DOWN  = jac_affine_1_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN;
         const walberla::float64 jac_affine_2_2_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_3_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_10_BLUE_DOWN  = jac_affine_1_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_13_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_15_BLUE_DOWN =
             jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_10_BLUE_DOWN - jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_11_BLUE_DOWN +
             jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN -
             jac_affine_1_0_BLUE_DOWN * tmp_coords_jac_13_BLUE_DOWN + jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_12_BLUE_DOWN -
             jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_14_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_16_BLUE_DOWN = 1.0 / ( tmp_coords_jac_15_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_10_BLUE_DOWN - tmp_coords_jac_11_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( jac_affine_0_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - tmp_coords_jac_13_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_12_BLUE_DOWN - tmp_coords_jac_14_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_1_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN + jac_affine_1_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN - jac_affine_0_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN + jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - jac_affine_1_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN + jac_affine_0_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN - jac_affine_0_1_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 abs_det_jac_affine_BLUE_DOWN = abs( tmp_coords_jac_15_BLUE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_1 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_2 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_3 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_10 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_11 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_12 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_13 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_20 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_21 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_22 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_23 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_BLUE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
               }
      }
      {
         /* CellType.GREEN_UP */
         const walberla::float64 tmp_coords_jac_0_GREEN_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP;
         const walberla::float64 p_affine_const_0_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP;
         const walberla::float64 p_affine_const_0_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP;
         const walberla::float64 p_affine_const_1_0_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_1_1_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_1_2_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_2_0_GREEN_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_2_1_GREEN_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_2_2_GREEN_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 p_affine_const_3_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_3_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_3_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 jac_affine_0_0_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_1_0_GREEN_UP;
         const walberla::float64 jac_affine_0_1_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_2_0_GREEN_UP;
         const walberla::float64 jac_affine_0_2_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_3_0_GREEN_UP;
         const walberla::float64 jac_affine_1_0_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_1_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_2_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_11_GREEN_UP  = jac_affine_0_2_GREEN_UP * jac_affine_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_2_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_3_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_9_GREEN_UP   = jac_affine_0_1_GREEN_UP * jac_affine_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_0_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_1_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_8_GREEN_UP   = jac_affine_1_2_GREEN_UP * jac_affine_2_1_GREEN_UP;
         const walberla::float64 jac_affine_2_2_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_3_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_7_GREEN_UP   = jac_affine_1_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_10_GREEN_UP  = jac_affine_0_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_12_GREEN_UP =
             jac_affine_0_0_GREEN_UP * tmp_coords_jac_7_GREEN_UP - jac_affine_0_0_GREEN_UP * tmp_coords_jac_8_GREEN_UP +
             jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP -
             jac_affine_1_0_GREEN_UP * tmp_coords_jac_10_GREEN_UP - jac_affine_2_0_GREEN_UP * tmp_coords_jac_11_GREEN_UP +
             jac_affine_2_0_GREEN_UP * tmp_coords_jac_9_GREEN_UP;
         const walberla::float64 tmp_coords_jac_13_GREEN_UP = 1.0 / ( tmp_coords_jac_12_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( tmp_coords_jac_7_GREEN_UP - tmp_coords_jac_8_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( jac_affine_0_2_GREEN_UP * jac_affine_2_1_GREEN_UP - tmp_coords_jac_10_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( -tmp_coords_jac_11_GREEN_UP + tmp_coords_jac_9_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_1_0_GREEN_UP * jac_affine_2_2_GREEN_UP + jac_affine_1_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_2_2_GREEN_UP - jac_affine_0_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_1_2_GREEN_UP + jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP - jac_affine_1_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_2_1_GREEN_UP + jac_affine_0_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_1_1_GREEN_UP - jac_affine_0_1_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 abs_det_jac_affine_GREEN_UP = abs( tmp_coords_jac_12_GREEN_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_1 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_2 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_3 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_10 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_11 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_12 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_13 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_20 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_21 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_22 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 src_dof_23 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_GREEN_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_GREEN_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_GREEN_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_GREEN_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_GREEN_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_GREEN_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_GREEN_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_GREEN_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_GREEN_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_GREEN_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
               }
      }
      {
         /* CellType.GREEN_DOWN */
         const walberla::float64 tmp_coords_jac_0_GREEN_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_7_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_8_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_9_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_4_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_5_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_6_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_0_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 jac_affine_0_0_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_1_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_1_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_2_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_2_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_3_0_GREEN_DOWN;
         const walberla::float64 jac_affine_1_0_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_1_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_2_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_14_GREEN_DOWN  = jac_affine_0_2_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_2_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_3_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_12_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_0_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_1_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_11_GREEN_DOWN  = jac_affine_1_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN;
         const walberla::float64 jac_affine_2_2_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_3_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_10_GREEN_DOWN  = jac_affine_1_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_13_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_15_GREEN_DOWN =
             jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_10_GREEN_DOWN - jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_11_GREEN_DOWN +
             jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN -
             jac_affine_1_0_GREEN_DOWN * tmp_coords_jac_13_GREEN_DOWN + jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_12_GREEN_DOWN -
             jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_14_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_16_GREEN_DOWN = 1.0 / ( tmp_coords_jac_15_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_10_GREEN_DOWN - tmp_coords_jac_11_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - tmp_coords_jac_13_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_12_GREEN_DOWN - tmp_coords_jac_14_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_1_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN + jac_affine_1_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN - jac_affine_0_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN + jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - jac_affine_1_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN + jac_affine_0_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN - jac_affine_0_1_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 abs_det_jac_affine_GREEN_DOWN = abs( tmp_coords_jac_15_GREEN_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_1 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_2 = _data_src_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_3 =
                      _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_4 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_5 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_6 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_7 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_8 =
                      _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_9 =
                      _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_10 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_11 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_12 = _data_src_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_13 =
                      _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_14 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_15 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_16 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_17 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_18 =
                      _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_19 =
                      _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_20 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_21 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  const walberla::float64 src_dof_22 = _data_src_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 src_dof_23 =
                      _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  const walberla::float64 src_dof_24 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_25 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_26 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  const walberla::float64 src_dof_27 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_28 =
                      _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 src_dof_29 =
                      _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_GREEN_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_10 * src_dof_10 + q_acc_0_11 * src_dof_11 +
                      q_acc_0_12 * src_dof_12 + q_acc_0_13 * src_dof_13 + q_acc_0_14 * src_dof_14 + q_acc_0_15 * src_dof_15 +
                      q_acc_0_16 * src_dof_16 + q_acc_0_17 * src_dof_17 + q_acc_0_18 * src_dof_18 + q_acc_0_19 * src_dof_19 +
                      q_acc_0_2 * src_dof_2 + q_acc_0_20 * src_dof_20 + q_acc_0_21 * src_dof_21 + q_acc_0_22 * src_dof_22 +
                      q_acc_0_23 * src_dof_23 + q_acc_0_24 * src_dof_24 + q_acc_0_25 * src_dof_25 + q_acc_0_26 * src_dof_26 +
                      q_acc_0_27 * src_dof_27 + q_acc_0_28 * src_dof_28 + q_acc_0_29 * src_dof_29 + q_acc_0_3 * src_dof_3 +
                      q_acc_0_4 * src_dof_4 + q_acc_0_5 * src_dof_5 + q_acc_0_6 * src_dof_6 + q_acc_0_7 * src_dof_7 +
                      q_acc_0_8 * src_dof_8 + q_acc_0_9 * src_dof_9;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_10 * src_dof_10 + q_acc_1_11 * src_dof_11 +
                      q_acc_1_12 * src_dof_12 + q_acc_1_13 * src_dof_13 + q_acc_1_14 * src_dof_14 + q_acc_1_15 * src_dof_15 +
                      q_acc_1_16 * src_dof_16 + q_acc_1_17 * src_dof_17 + q_acc_1_18 * src_dof_18 + q_acc_1_19 * src_dof_19 +
                      q_acc_1_2 * src_dof_2 + q_acc_1_20 * src_dof_20 + q_acc_1_21 * src_dof_21 + q_acc_1_22 * src_dof_22 +
                      q_acc_1_23 * src_dof_23 + q_acc_1_24 * src_dof_24 + q_acc_1_25 * src_dof_25 + q_acc_1_26 * src_dof_26 +
                      q_acc_1_27 * src_dof_27 + q_acc_1_28 * src_dof_28 + q_acc_1_29 * src_dof_29 + q_acc_1_3 * src_dof_3 +
                      q_acc_1_4 * src_dof_4 + q_acc_1_5 * src_dof_5 + q_acc_1_6 * src_dof_6 + q_acc_1_7 * src_dof_7 +
                      q_acc_1_8 * src_dof_8 + q_acc_1_9 * src_dof_9;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_10 * src_dof_10 + q_acc_2_11 * src_dof_11 +
                      q_acc_2_12 * src_dof_12 + q_acc_2_13 * src_dof_13 + q_acc_2_14 * src_dof_14 + q_acc_2_15 * src_dof_15 +
                      q_acc_2_16 * src_dof_16 + q_acc_2_17 * src_dof_17 + q_acc_2_18 * src_dof_18 + q_acc_2_19 * src_dof_19 +
                      q_acc_2_2 * src_dof_2 + q_acc_2_20 * src_dof_20 + q_acc_2_21 * src_dof_21 + q_acc_2_22 * src_dof_22 +
                      q_acc_2_23 * src_dof_23 + q_acc_2_24 * src_dof_24 + q_acc_2_25 * src_dof_25 + q_acc_2_26 * src_dof_26 +
                      q_acc_2_27 * src_dof_27 + q_acc_2_28 * src_dof_28 + q_acc_2_29 * src_dof_29 + q_acc_2_3 * src_dof_3 +
                      q_acc_2_4 * src_dof_4 + q_acc_2_5 * src_dof_5 + q_acc_2_6 * src_dof_6 + q_acc_2_7 * src_dof_7 +
                      q_acc_2_8 * src_dof_8 + q_acc_2_9 * src_dof_9;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_10 * src_dof_10 + q_acc_3_11 * src_dof_11 +
                      q_acc_3_12 * src_dof_12 + q_acc_3_13 * src_dof_13 + q_acc_3_14 * src_dof_14 + q_acc_3_15 * src_dof_15 +
                      q_acc_3_16 * src_dof_16 + q_acc_3_17 * src_dof_17 + q_acc_3_18 * src_dof_18 + q_acc_3_19 * src_dof_19 +
                      q_acc_3_2 * src_dof_2 + q_acc_3_20 * src_dof_20 + q_acc_3_21 * src_dof_21 + q_acc_3_22 * src_dof_22 +
                      q_acc_3_23 * src_dof_23 + q_acc_3_24 * src_dof_24 + q_acc_3_25 * src_dof_25 + q_acc_3_26 * src_dof_26 +
                      q_acc_3_27 * src_dof_27 + q_acc_3_28 * src_dof_28 + q_acc_3_29 * src_dof_29 + q_acc_3_3 * src_dof_3 +
                      q_acc_3_4 * src_dof_4 + q_acc_3_5 * src_dof_5 + q_acc_3_6 * src_dof_6 + q_acc_3_7 * src_dof_7 +
                      q_acc_3_8 * src_dof_8 + q_acc_3_9 * src_dof_9;
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_1 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) ) +
                            1] =
                      elMatVec_2 +
                      _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                              ( 6 ) ) +
                            ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                ( micro_edges_per_macro_edge + 3 ) ) /
                              ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
               }
      }
   }
}
void P2VectorToP1DivergenceRotationIcosahedralShellMapOperator::
    toMatrix_P2VectorToP1DivergenceRotationIcosahedralShellMapOperator_macro_3D(
        idx_t* RESTRICT                      _data_dst,
        walberla::float64* RESTRICT          _data_nx_rotationEdge,
        walberla::float64* RESTRICT          _data_nx_rotationVertex,
        walberla::float64* RESTRICT          _data_ny_rotationEdge,
        walberla::float64* RESTRICT          _data_ny_rotationVertex,
        walberla::float64* RESTRICT          _data_nz_rotationEdge,
        walberla::float64* RESTRICT          _data_nz_rotationVertex,
        idx_t* RESTRICT                      _data_src_edge_0,
        idx_t* RESTRICT                      _data_src_edge_1,
        idx_t* RESTRICT                      _data_src_edge_2,
        idx_t* RESTRICT                      _data_src_vertex_0,
        idx_t* RESTRICT                      _data_src_vertex_1,
        idx_t* RESTRICT                      _data_src_vertex_2,
        walberla::float64                    forVertex_0,
        walberla::float64                    forVertex_1,
        walberla::float64                    forVertex_2,
        walberla::float64                    macro_vertex_coord_id_0comp0,
        walberla::float64                    macro_vertex_coord_id_0comp1,
        walberla::float64                    macro_vertex_coord_id_0comp2,
        walberla::float64                    macro_vertex_coord_id_1comp0,
        walberla::float64                    macro_vertex_coord_id_1comp1,
        walberla::float64                    macro_vertex_coord_id_1comp2,
        walberla::float64                    macro_vertex_coord_id_2comp0,
        walberla::float64                    macro_vertex_coord_id_2comp1,
        walberla::float64                    macro_vertex_coord_id_2comp2,
        walberla::float64                    macro_vertex_coord_id_3comp0,
        walberla::float64                    macro_vertex_coord_id_3comp1,
        walberla::float64                    macro_vertex_coord_id_3comp2,
        std::shared_ptr< SparseMatrixProxy > mat,
        int64_t                              micro_edges_per_macro_edge,
        walberla::float64                    micro_edges_per_macro_edge_float,
        walberla::float64                    radRayVertex,
        walberla::float64                    radRefVertex,
        walberla::float64                    rayVertex_0,
        walberla::float64                    rayVertex_1,
        walberla::float64                    rayVertex_2,
        walberla::float64                    refVertex_0,
        walberla::float64                    refVertex_1,
        walberla::float64                    refVertex_2,
        walberla::float64                    thrVertex_0,
        walberla::float64                    thrVertex_1,
        walberla::float64                    thrVertex_2 ) const
{
   {
      const walberla::float64 _data_q_w[] = {
          -0.1333333333333333, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983 };

      const walberla::float64 _data_q_p_0[] = { 0.25, 0.16666666666666666, 0.16666666666666666, 0.5, 0.16666666666666666 };

      const walberla::float64 _data_q_p_1[] = { 0.25, 0.16666666666666666, 0.5, 0.16666666666666666, 0.16666666666666666 };

      const walberla::float64 _data_q_p_2[] = { 0.25, 0.5, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666 };

      {
         /* CellType.WHITE_UP */
         const walberla::float64 tmp_coords_jac_0_WHITE_UP   = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 p_affine_const_0_0_WHITE_UP = macro_vertex_coord_id_0comp0;
         const walberla::float64 p_affine_const_0_1_WHITE_UP = macro_vertex_coord_id_0comp1;
         const walberla::float64 p_affine_const_0_2_WHITE_UP = macro_vertex_coord_id_0comp2;
         const walberla::float64 p_affine_const_1_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 p_affine_const_1_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 p_affine_const_1_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 p_affine_const_2_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_2_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_2_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_3_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 p_affine_const_3_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 p_affine_const_3_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 jac_affine_0_0_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_1_0_WHITE_UP;
         const walberla::float64 jac_affine_0_1_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_2_0_WHITE_UP;
         const walberla::float64 jac_affine_0_2_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_3_0_WHITE_UP;
         const walberla::float64 jac_affine_1_0_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_1_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_2_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_5_WHITE_UP = jac_affine_0_2_WHITE_UP * jac_affine_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_2_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_3_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_3_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_0_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_1_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_2_WHITE_UP = jac_affine_1_2_WHITE_UP * jac_affine_2_1_WHITE_UP;
         const walberla::float64 jac_affine_2_2_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_3_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_1_WHITE_UP = jac_affine_1_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_4_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_6_WHITE_UP =
             jac_affine_0_0_WHITE_UP * tmp_coords_jac_1_WHITE_UP - jac_affine_0_0_WHITE_UP * tmp_coords_jac_2_WHITE_UP +
             jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP -
             jac_affine_1_0_WHITE_UP * tmp_coords_jac_4_WHITE_UP + jac_affine_2_0_WHITE_UP * tmp_coords_jac_3_WHITE_UP -
             jac_affine_2_0_WHITE_UP * tmp_coords_jac_5_WHITE_UP;
         const walberla::float64 tmp_coords_jac_7_WHITE_UP = 1.0 / ( tmp_coords_jac_6_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_1_WHITE_UP - tmp_coords_jac_2_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( jac_affine_0_2_WHITE_UP * jac_affine_2_1_WHITE_UP - tmp_coords_jac_4_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_3_WHITE_UP - tmp_coords_jac_5_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_1_0_WHITE_UP * jac_affine_2_2_WHITE_UP + jac_affine_1_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_2_2_WHITE_UP - jac_affine_0_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_1_2_WHITE_UP + jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP - jac_affine_1_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_2_1_WHITE_UP + jac_affine_0_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_1_1_WHITE_UP - jac_affine_0_1_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 abs_det_jac_affine_WHITE_UP = abs( tmp_coords_jac_6_WHITE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_WHITE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_WHITE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_WHITE_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_WHITE_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_WHITE_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_WHITE_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_WHITE_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_WHITE_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_WHITE_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_WHITE_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_WHITE_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_WHITE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.WHITE_DOWN */
         const walberla::float64 tmp_coords_jac_0_WHITE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_3_WHITE_DOWN = tmp_coords_jac_1_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_4_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_5_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_WHITE_DOWN = tmp_coords_jac_4_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_7_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_8_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_9_WHITE_DOWN = tmp_coords_jac_7_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_10_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_11_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_12_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_WHITE_DOWN = tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_1_WHITE_DOWN = tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_2_WHITE_DOWN = tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_0_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_1_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_1_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_4_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_7_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 jac_affine_0_0_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_1_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_1_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_2_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_2_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_3_0_WHITE_DOWN;
         const walberla::float64 jac_affine_1_0_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_1_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_2_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_17_WHITE_DOWN  = jac_affine_0_2_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_2_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_3_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_15_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_0_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_1_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_14_WHITE_DOWN  = jac_affine_1_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN;
         const walberla::float64 jac_affine_2_2_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_3_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_13_WHITE_DOWN  = jac_affine_1_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_16_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_18_WHITE_DOWN =
             jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_13_WHITE_DOWN - jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_14_WHITE_DOWN +
             jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN -
             jac_affine_1_0_WHITE_DOWN * tmp_coords_jac_16_WHITE_DOWN + jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_15_WHITE_DOWN -
             jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_17_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_19_WHITE_DOWN = 1.0 / ( tmp_coords_jac_18_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_13_WHITE_DOWN - tmp_coords_jac_14_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - tmp_coords_jac_16_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_15_WHITE_DOWN - tmp_coords_jac_17_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_1_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN + jac_affine_1_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN - jac_affine_0_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN + jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - jac_affine_1_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN + jac_affine_0_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN - jac_affine_0_1_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 abs_det_jac_affine_WHITE_DOWN = abs( tmp_coords_jac_18_WHITE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 2; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_4 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nx_rotation_dof_8 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_4 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 ny_rotation_dof_8 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_4 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nz_rotation_dof_8 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_WHITE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.BLUE_UP */
         const walberla::float64 tmp_coords_jac_0_BLUE_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_6_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_0_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_0_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_0_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 p_affine_const_1_0_BLUE_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_1_1_BLUE_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_1_2_BLUE_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_2_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_2_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_2_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_3_0_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) +
             tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_3_1_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) +
             tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_3_2_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) +
             tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 jac_affine_0_0_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_1_0_BLUE_UP;
         const walberla::float64 jac_affine_0_1_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_2_0_BLUE_UP;
         const walberla::float64 jac_affine_0_2_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_3_0_BLUE_UP;
         const walberla::float64 jac_affine_1_0_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_1_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_2_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_11_BLUE_UP = jac_affine_0_2_BLUE_UP * jac_affine_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_2_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_3_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_9_BLUE_UP  = jac_affine_0_1_BLUE_UP * jac_affine_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_0_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_1_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_8_BLUE_UP  = jac_affine_1_2_BLUE_UP * jac_affine_2_1_BLUE_UP;
         const walberla::float64 jac_affine_2_2_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_3_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_7_BLUE_UP  = jac_affine_1_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_10_BLUE_UP = jac_affine_0_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_12_BLUE_UP =
             jac_affine_0_0_BLUE_UP * tmp_coords_jac_7_BLUE_UP - jac_affine_0_0_BLUE_UP * tmp_coords_jac_8_BLUE_UP +
             jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP -
             jac_affine_1_0_BLUE_UP * tmp_coords_jac_10_BLUE_UP - jac_affine_2_0_BLUE_UP * tmp_coords_jac_11_BLUE_UP +
             jac_affine_2_0_BLUE_UP * tmp_coords_jac_9_BLUE_UP;
         const walberla::float64 tmp_coords_jac_13_BLUE_UP = 1.0 / ( tmp_coords_jac_12_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( tmp_coords_jac_7_BLUE_UP - tmp_coords_jac_8_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( jac_affine_0_2_BLUE_UP * jac_affine_2_1_BLUE_UP - tmp_coords_jac_10_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( -tmp_coords_jac_11_BLUE_UP + tmp_coords_jac_9_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_1_0_BLUE_UP * jac_affine_2_2_BLUE_UP + jac_affine_1_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_2_2_BLUE_UP - jac_affine_0_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_1_2_BLUE_UP + jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP - jac_affine_1_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_2_1_BLUE_UP + jac_affine_0_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_1_1_BLUE_UP - jac_affine_0_1_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 abs_det_jac_affine_BLUE_UP = abs( tmp_coords_jac_12_BLUE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_BLUE_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_BLUE_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_BLUE_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_BLUE_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_BLUE_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_BLUE_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_BLUE_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_BLUE_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_BLUE_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_BLUE_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_BLUE_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_BLUE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.BLUE_DOWN */
         const walberla::float64 tmp_coords_jac_0_BLUE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_DOWN = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_6_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_7_BLUE_DOWN = macro_vertex_coord_id_0comp1 + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_8_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 tmp_coords_jac_9_BLUE_DOWN   = macro_vertex_coord_id_0comp2 + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_0_BLUE_DOWN = tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_1_BLUE_DOWN = tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_2_BLUE_DOWN = tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_0_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) +
             tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_1_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) +
             tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_2_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) +
             tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 jac_affine_0_0_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_1_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_1_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_2_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_2_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_3_0_BLUE_DOWN;
         const walberla::float64 jac_affine_1_0_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_1_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_2_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_14_BLUE_DOWN  = jac_affine_0_2_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_2_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_3_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_12_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_0_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_1_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_11_BLUE_DOWN  = jac_affine_1_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN;
         const walberla::float64 jac_affine_2_2_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_3_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_10_BLUE_DOWN  = jac_affine_1_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_13_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_15_BLUE_DOWN =
             jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_10_BLUE_DOWN - jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_11_BLUE_DOWN +
             jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN -
             jac_affine_1_0_BLUE_DOWN * tmp_coords_jac_13_BLUE_DOWN + jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_12_BLUE_DOWN -
             jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_14_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_16_BLUE_DOWN = 1.0 / ( tmp_coords_jac_15_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_10_BLUE_DOWN - tmp_coords_jac_11_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( jac_affine_0_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - tmp_coords_jac_13_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_12_BLUE_DOWN - tmp_coords_jac_14_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_1_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN + jac_affine_1_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN - jac_affine_0_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN + jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - jac_affine_1_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN + jac_affine_0_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN - jac_affine_0_1_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 abs_det_jac_affine_BLUE_DOWN = abs( tmp_coords_jac_15_BLUE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_BLUE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.GREEN_UP */
         const walberla::float64 tmp_coords_jac_0_GREEN_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP;
         const walberla::float64 p_affine_const_0_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP;
         const walberla::float64 p_affine_const_0_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP;
         const walberla::float64 p_affine_const_1_0_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_1_1_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_1_2_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_2_0_GREEN_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_2_1_GREEN_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_2_2_GREEN_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 p_affine_const_3_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_3_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_3_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 jac_affine_0_0_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_1_0_GREEN_UP;
         const walberla::float64 jac_affine_0_1_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_2_0_GREEN_UP;
         const walberla::float64 jac_affine_0_2_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_3_0_GREEN_UP;
         const walberla::float64 jac_affine_1_0_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_1_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_2_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_11_GREEN_UP  = jac_affine_0_2_GREEN_UP * jac_affine_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_2_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_3_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_9_GREEN_UP   = jac_affine_0_1_GREEN_UP * jac_affine_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_0_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_1_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_8_GREEN_UP   = jac_affine_1_2_GREEN_UP * jac_affine_2_1_GREEN_UP;
         const walberla::float64 jac_affine_2_2_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_3_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_7_GREEN_UP   = jac_affine_1_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_10_GREEN_UP  = jac_affine_0_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_12_GREEN_UP =
             jac_affine_0_0_GREEN_UP * tmp_coords_jac_7_GREEN_UP - jac_affine_0_0_GREEN_UP * tmp_coords_jac_8_GREEN_UP +
             jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP -
             jac_affine_1_0_GREEN_UP * tmp_coords_jac_10_GREEN_UP - jac_affine_2_0_GREEN_UP * tmp_coords_jac_11_GREEN_UP +
             jac_affine_2_0_GREEN_UP * tmp_coords_jac_9_GREEN_UP;
         const walberla::float64 tmp_coords_jac_13_GREEN_UP = 1.0 / ( tmp_coords_jac_12_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( tmp_coords_jac_7_GREEN_UP - tmp_coords_jac_8_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( jac_affine_0_2_GREEN_UP * jac_affine_2_1_GREEN_UP - tmp_coords_jac_10_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( -tmp_coords_jac_11_GREEN_UP + tmp_coords_jac_9_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_1_0_GREEN_UP * jac_affine_2_2_GREEN_UP + jac_affine_1_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_2_2_GREEN_UP - jac_affine_0_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_1_2_GREEN_UP + jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP - jac_affine_1_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_2_1_GREEN_UP + jac_affine_0_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_1_1_GREEN_UP - jac_affine_0_1_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 abs_det_jac_affine_GREEN_UP = abs( tmp_coords_jac_12_GREEN_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_GREEN_UP * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_GREEN_UP * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_GREEN_UP * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_GREEN_UP * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_GREEN_UP * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_GREEN_UP * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_GREEN_UP * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_GREEN_UP * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_GREEN_UP * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_GREEN_UP * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_GREEN_UP * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_GREEN_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.GREEN_DOWN */
         const walberla::float64 tmp_coords_jac_0_GREEN_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_7_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_8_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_9_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_4_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_5_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_6_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_0_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 jac_affine_0_0_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_1_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_1_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_2_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_2_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_3_0_GREEN_DOWN;
         const walberla::float64 jac_affine_1_0_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_1_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_2_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_14_GREEN_DOWN  = jac_affine_0_2_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_2_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_3_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_12_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_0_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_1_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_11_GREEN_DOWN  = jac_affine_1_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN;
         const walberla::float64 jac_affine_2_2_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_3_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_10_GREEN_DOWN  = jac_affine_1_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_13_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_15_GREEN_DOWN =
             jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_10_GREEN_DOWN - jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_11_GREEN_DOWN +
             jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN -
             jac_affine_1_0_GREEN_DOWN * tmp_coords_jac_13_GREEN_DOWN + jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_12_GREEN_DOWN -
             jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_14_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_16_GREEN_DOWN = 1.0 / ( tmp_coords_jac_15_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_10_GREEN_DOWN - tmp_coords_jac_11_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - tmp_coords_jac_13_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_12_GREEN_DOWN - tmp_coords_jac_14_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_1_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN + jac_affine_1_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN - jac_affine_0_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN + jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - jac_affine_1_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN + jac_affine_0_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN - jac_affine_0_1_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 abs_det_jac_affine_GREEN_DOWN = abs( tmp_coords_jac_15_GREEN_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_0_4  = 0.0;
                  walberla::float64 q_acc_0_5  = 0.0;
                  walberla::float64 q_acc_0_6  = 0.0;
                  walberla::float64 q_acc_0_7  = 0.0;
                  walberla::float64 q_acc_0_8  = 0.0;
                  walberla::float64 q_acc_0_9  = 0.0;
                  walberla::float64 q_acc_0_10 = 0.0;
                  walberla::float64 q_acc_0_11 = 0.0;
                  walberla::float64 q_acc_0_12 = 0.0;
                  walberla::float64 q_acc_0_13 = 0.0;
                  walberla::float64 q_acc_0_14 = 0.0;
                  walberla::float64 q_acc_0_15 = 0.0;
                  walberla::float64 q_acc_0_16 = 0.0;
                  walberla::float64 q_acc_0_17 = 0.0;
                  walberla::float64 q_acc_0_18 = 0.0;
                  walberla::float64 q_acc_0_19 = 0.0;
                  walberla::float64 q_acc_0_20 = 0.0;
                  walberla::float64 q_acc_0_21 = 0.0;
                  walberla::float64 q_acc_0_22 = 0.0;
                  walberla::float64 q_acc_0_23 = 0.0;
                  walberla::float64 q_acc_0_24 = 0.0;
                  walberla::float64 q_acc_0_25 = 0.0;
                  walberla::float64 q_acc_0_26 = 0.0;
                  walberla::float64 q_acc_0_27 = 0.0;
                  walberla::float64 q_acc_0_28 = 0.0;
                  walberla::float64 q_acc_0_29 = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_1_4  = 0.0;
                  walberla::float64 q_acc_1_5  = 0.0;
                  walberla::float64 q_acc_1_6  = 0.0;
                  walberla::float64 q_acc_1_7  = 0.0;
                  walberla::float64 q_acc_1_8  = 0.0;
                  walberla::float64 q_acc_1_9  = 0.0;
                  walberla::float64 q_acc_1_10 = 0.0;
                  walberla::float64 q_acc_1_11 = 0.0;
                  walberla::float64 q_acc_1_12 = 0.0;
                  walberla::float64 q_acc_1_13 = 0.0;
                  walberla::float64 q_acc_1_14 = 0.0;
                  walberla::float64 q_acc_1_15 = 0.0;
                  walberla::float64 q_acc_1_16 = 0.0;
                  walberla::float64 q_acc_1_17 = 0.0;
                  walberla::float64 q_acc_1_18 = 0.0;
                  walberla::float64 q_acc_1_19 = 0.0;
                  walberla::float64 q_acc_1_20 = 0.0;
                  walberla::float64 q_acc_1_21 = 0.0;
                  walberla::float64 q_acc_1_22 = 0.0;
                  walberla::float64 q_acc_1_23 = 0.0;
                  walberla::float64 q_acc_1_24 = 0.0;
                  walberla::float64 q_acc_1_25 = 0.0;
                  walberla::float64 q_acc_1_26 = 0.0;
                  walberla::float64 q_acc_1_27 = 0.0;
                  walberla::float64 q_acc_1_28 = 0.0;
                  walberla::float64 q_acc_1_29 = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_2_4  = 0.0;
                  walberla::float64 q_acc_2_5  = 0.0;
                  walberla::float64 q_acc_2_6  = 0.0;
                  walberla::float64 q_acc_2_7  = 0.0;
                  walberla::float64 q_acc_2_8  = 0.0;
                  walberla::float64 q_acc_2_9  = 0.0;
                  walberla::float64 q_acc_2_10 = 0.0;
                  walberla::float64 q_acc_2_11 = 0.0;
                  walberla::float64 q_acc_2_12 = 0.0;
                  walberla::float64 q_acc_2_13 = 0.0;
                  walberla::float64 q_acc_2_14 = 0.0;
                  walberla::float64 q_acc_2_15 = 0.0;
                  walberla::float64 q_acc_2_16 = 0.0;
                  walberla::float64 q_acc_2_17 = 0.0;
                  walberla::float64 q_acc_2_18 = 0.0;
                  walberla::float64 q_acc_2_19 = 0.0;
                  walberla::float64 q_acc_2_20 = 0.0;
                  walberla::float64 q_acc_2_21 = 0.0;
                  walberla::float64 q_acc_2_22 = 0.0;
                  walberla::float64 q_acc_2_23 = 0.0;
                  walberla::float64 q_acc_2_24 = 0.0;
                  walberla::float64 q_acc_2_25 = 0.0;
                  walberla::float64 q_acc_2_26 = 0.0;
                  walberla::float64 q_acc_2_27 = 0.0;
                  walberla::float64 q_acc_2_28 = 0.0;
                  walberla::float64 q_acc_2_29 = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_3_4  = 0.0;
                  walberla::float64 q_acc_3_5  = 0.0;
                  walberla::float64 q_acc_3_6  = 0.0;
                  walberla::float64 q_acc_3_7  = 0.0;
                  walberla::float64 q_acc_3_8  = 0.0;
                  walberla::float64 q_acc_3_9  = 0.0;
                  walberla::float64 q_acc_3_10 = 0.0;
                  walberla::float64 q_acc_3_11 = 0.0;
                  walberla::float64 q_acc_3_12 = 0.0;
                  walberla::float64 q_acc_3_13 = 0.0;
                  walberla::float64 q_acc_3_14 = 0.0;
                  walberla::float64 q_acc_3_15 = 0.0;
                  walberla::float64 q_acc_3_16 = 0.0;
                  walberla::float64 q_acc_3_17 = 0.0;
                  walberla::float64 q_acc_3_18 = 0.0;
                  walberla::float64 q_acc_3_19 = 0.0;
                  walberla::float64 q_acc_3_20 = 0.0;
                  walberla::float64 q_acc_3_21 = 0.0;
                  walberla::float64 q_acc_3_22 = 0.0;
                  walberla::float64 q_acc_3_23 = 0.0;
                  walberla::float64 q_acc_3_24 = 0.0;
                  walberla::float64 q_acc_3_25 = 0.0;
                  walberla::float64 q_acc_3_26 = 0.0;
                  walberla::float64 q_acc_3_27 = 0.0;
                  walberla::float64 q_acc_3_28 = 0.0;
                  walberla::float64 q_acc_3_29 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_103 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_104 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_105 = pow( tmp_qloop_103 + tmp_qloop_104, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_106 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_107 = pow( tmp_qloop_104 + tmp_qloop_106, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_107 + 1.0e-10;
                     const walberla::float64 tmp_qloop_109 = pow( tmp_qloop_103 + tmp_qloop_106, 0.50000000000000000 );
                     const bool              tmp_qloop_110 = tmp_qloop_105 < tmp_qloop_108 && tmp_qloop_109 < tmp_qloop_108;
                     const walberla::float64 tmp_qloop_111 = 1.0 / ( tmp_qloop_109 );
                     const walberla::float64 tmp_qloop_112 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_113 = tmp_qloop_111 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_114 = tmp_qloop_109 + 1.0e-10;
                     const bool              tmp_qloop_115 = tmp_qloop_105 < tmp_qloop_114 && tmp_qloop_107 < tmp_qloop_114;
                     const walberla::float64 tmp_qloop_116 = 1.0 / ( tmp_qloop_105 );
                     const walberla::float64 tmp_qloop_117 = tmp_qloop_116 * 1.0;
                     const walberla::float64 tmp_qloop_118 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_119 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_120 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_121 = pow( tmp_qloop_118 + tmp_qloop_119 + tmp_qloop_120, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_122 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_113 ) : ( ny_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_123 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_124 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_125 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_126 = tmp_qloop_124 + tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = tmp_qloop_123 + tmp_qloop_126 - 3.0;
                     const walberla::float64 tmp_qloop_128 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_129 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_130 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_127 +
                                                             jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_107 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_112 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_137 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_115 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_117 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_140 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_141 = ny_rotation_dof_0 * tmp_qloop_140;
                     const walberla::float64 tmp_qloop_142 = tmp_qloop_111 * 1.0;
                     const walberla::float64 tmp_qloop_143 = nx_rotation_dof_0 * tmp_qloop_142;
                     const walberla::float64 tmp_qloop_144 =
                         ( ( tmp_qloop_121 ) ? ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_141 ) :
                                                                       ( ( tmp_qloop_115 ) ? ( tmp_qloop_143 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_147 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_148 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_149 = pow( tmp_qloop_147 + tmp_qloop_148, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_150 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_151 = pow( tmp_qloop_148 + tmp_qloop_150, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_152 = tmp_qloop_151 + 1.0e-10;
                     const walberla::float64 tmp_qloop_153 = pow( tmp_qloop_147 + tmp_qloop_150, 0.50000000000000000 );
                     const bool              tmp_qloop_154 = tmp_qloop_149 < tmp_qloop_152 && tmp_qloop_153 < tmp_qloop_152;
                     const walberla::float64 tmp_qloop_155 = 1.0 / ( tmp_qloop_153 );
                     const walberla::float64 tmp_qloop_156 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_155 * tmp_qloop_156;
                     const walberla::float64 tmp_qloop_158 = tmp_qloop_153 + 1.0e-10;
                     const bool              tmp_qloop_159 = tmp_qloop_149 < tmp_qloop_158 && tmp_qloop_151 < tmp_qloop_158;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_149 );
                     const walberla::float64 tmp_qloop_161 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_162 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_163 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_164 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_165 = pow( tmp_qloop_162 + tmp_qloop_163 + tmp_qloop_164, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_166 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_157 ) : ( ny_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_167 = tmp_qloop_124 - 1.0;
                     const walberla::float64 tmp_qloop_168 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_169 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_170 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_167;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_151 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_156 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_175 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_159 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_161 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_178 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_179 = ny_rotation_dof_1 * tmp_qloop_178;
                     const walberla::float64 tmp_qloop_180 = tmp_qloop_155 * 1.0;
                     const walberla::float64 tmp_qloop_181 = nx_rotation_dof_1 * tmp_qloop_180;
                     const walberla::float64 tmp_qloop_182 =
                         ( ( tmp_qloop_165 ) ? ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_179 ) :
                                                                       ( ( tmp_qloop_159 ) ? ( tmp_qloop_181 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_185 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_186 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_187 = pow( tmp_qloop_185 + tmp_qloop_186, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_186 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = tmp_qloop_189 + 1.0e-10;
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_185 + tmp_qloop_188, 0.50000000000000000 );
                     const bool              tmp_qloop_192 = tmp_qloop_187 < tmp_qloop_190 && tmp_qloop_191 < tmp_qloop_190;
                     const walberla::float64 tmp_qloop_193 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_194 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_195 = tmp_qloop_193 * tmp_qloop_194;
                     const walberla::float64 tmp_qloop_196 = tmp_qloop_191 + 1.0e-10;
                     const bool              tmp_qloop_197 = tmp_qloop_187 < tmp_qloop_196 && tmp_qloop_189 < tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = 1.0 / ( tmp_qloop_187 );
                     const walberla::float64 tmp_qloop_199 = tmp_qloop_198 * 1.0;
                     const walberla::float64 tmp_qloop_200 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_201 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_202 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_203 = pow( tmp_qloop_200 + tmp_qloop_201 + tmp_qloop_202, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_204 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_195 ) : ( ny_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_205 = tmp_qloop_125 - 1.0;
                     const walberla::float64 tmp_qloop_206 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_207 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_208 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_205;
                     const walberla::float64 tmp_qloop_211 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_194 * tmp_qloop_211;
                     const walberla::float64 tmp_qloop_213 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( tmp_qloop_212 ) :
                                       ( ( tmp_qloop_197 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_199 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_216 = tmp_qloop_211 * 1.0;
                     const walberla::float64 tmp_qloop_217 = ny_rotation_dof_2 * tmp_qloop_216;
                     const walberla::float64 tmp_qloop_218 = tmp_qloop_193 * 1.0;
                     const walberla::float64 tmp_qloop_219 = nx_rotation_dof_2 * tmp_qloop_218;
                     const walberla::float64 tmp_qloop_220 =
                         ( ( tmp_qloop_203 ) ? ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_217 ) :
                                                                       ( ( tmp_qloop_197 ) ? ( tmp_qloop_219 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_225 = pow( tmp_qloop_223 + tmp_qloop_224, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_226 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_227 = pow( tmp_qloop_224 + tmp_qloop_226, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_228 = tmp_qloop_227 + 1.0e-10;
                     const walberla::float64 tmp_qloop_229 = pow( tmp_qloop_223 + tmp_qloop_226, 0.50000000000000000 );
                     const bool              tmp_qloop_230 = tmp_qloop_225 < tmp_qloop_228 && tmp_qloop_229 < tmp_qloop_228;
                     const walberla::float64 tmp_qloop_231 = 1.0 / ( tmp_qloop_229 );
                     const walberla::float64 tmp_qloop_232 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_231 * tmp_qloop_232;
                     const walberla::float64 tmp_qloop_234 = tmp_qloop_229 + 1.0e-10;
                     const bool              tmp_qloop_235 = tmp_qloop_225 < tmp_qloop_234 && tmp_qloop_227 < tmp_qloop_234;
                     const walberla::float64 tmp_qloop_236 = 1.0 / ( tmp_qloop_225 );
                     const walberla::float64 tmp_qloop_237 = tmp_qloop_236 * 1.0;
                     const walberla::float64 tmp_qloop_238 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_240 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_241 = pow( tmp_qloop_238 + tmp_qloop_239 + tmp_qloop_240, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_242 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_233 ) : ( ny_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_243 = tmp_qloop_123 - 1.0;
                     const walberla::float64 tmp_qloop_244 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_245 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_246 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_249 = 1.0 / ( tmp_qloop_227 );
                     const walberla::float64 tmp_qloop_250 = tmp_qloop_232 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_251 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( tmp_qloop_250 ) :
                                       ( ( tmp_qloop_235 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_237 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_249 * 1.0;
                     const walberla::float64 tmp_qloop_255 = ny_rotation_dof_3 * tmp_qloop_254;
                     const walberla::float64 tmp_qloop_256 = tmp_qloop_231 * 1.0;
                     const walberla::float64 tmp_qloop_257 = nx_rotation_dof_3 * tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 =
                         ( ( tmp_qloop_241 ) ? ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_255 ) :
                                                                       ( ( tmp_qloop_235 ) ? ( tmp_qloop_257 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_261 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = pow( tmp_qloop_261 + tmp_qloop_262, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_264 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_265 = pow( tmp_qloop_262 + tmp_qloop_264, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_266 = tmp_qloop_265 + 1.0e-10;
                     const walberla::float64 tmp_qloop_267 = pow( tmp_qloop_261 + tmp_qloop_264, 0.50000000000000000 );
                     const bool              tmp_qloop_268 = tmp_qloop_263 < tmp_qloop_266 && tmp_qloop_267 < tmp_qloop_266;
                     const walberla::float64 tmp_qloop_269 = 1.0 / ( tmp_qloop_267 );
                     const walberla::float64 tmp_qloop_270 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_271 = tmp_qloop_269 * tmp_qloop_270;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_267 + 1.0e-10;
                     const bool              tmp_qloop_273 = tmp_qloop_263 < tmp_qloop_272 && tmp_qloop_265 < tmp_qloop_272;
                     const walberla::float64 tmp_qloop_274 = 1.0 / ( tmp_qloop_263 );
                     const walberla::float64 tmp_qloop_275 = tmp_qloop_274 * 1.0;
                     const walberla::float64 tmp_qloop_276 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_277 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_279 = pow( tmp_qloop_276 + tmp_qloop_277 + tmp_qloop_278, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_280 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_271 ) : ( ny_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_281 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_282 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_283 = tmp_qloop_281 + tmp_qloop_282;
                     const walberla::float64 tmp_qloop_284 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_285 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_286 = tmp_qloop_284 + tmp_qloop_285;
                     const walberla::float64 tmp_qloop_287 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_288 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_287 + tmp_qloop_288;
                     const walberla::float64 tmp_qloop_292 = 1.0 / ( tmp_qloop_265 );
                     const walberla::float64 tmp_qloop_293 = tmp_qloop_270 * tmp_qloop_292;
                     const walberla::float64 tmp_qloop_294 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( tmp_qloop_293 ) :
                                       ( ( tmp_qloop_273 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_275 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_292 * 1.0;
                     const walberla::float64 tmp_qloop_298 = ny_rotation_dof_4 * tmp_qloop_297;
                     const walberla::float64 tmp_qloop_299 = tmp_qloop_269 * 1.0;
                     const walberla::float64 tmp_qloop_300 = nx_rotation_dof_4 * tmp_qloop_299;
                     const walberla::float64 tmp_qloop_301 =
                         ( ( tmp_qloop_279 ) ? ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_298 ) :
                                                                       ( ( tmp_qloop_273 ) ? ( tmp_qloop_300 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_304 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_304 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_305 + tmp_qloop_307, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_309 = tmp_qloop_308 + 1.0e-10;
                     const walberla::float64 tmp_qloop_310 = pow( tmp_qloop_304 + tmp_qloop_307, 0.50000000000000000 );
                     const bool              tmp_qloop_311 = tmp_qloop_306 < tmp_qloop_309 && tmp_qloop_310 < tmp_qloop_309;
                     const walberla::float64 tmp_qloop_312 = 1.0 / ( tmp_qloop_310 );
                     const walberla::float64 tmp_qloop_313 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_314 = tmp_qloop_312 * tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = tmp_qloop_310 + 1.0e-10;
                     const bool              tmp_qloop_316 = tmp_qloop_306 < tmp_qloop_315 && tmp_qloop_308 < tmp_qloop_315;
                     const walberla::float64 tmp_qloop_317 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_318 = tmp_qloop_317 * 1.0;
                     const walberla::float64 tmp_qloop_319 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_320 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_321 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_322 = pow( tmp_qloop_319 + tmp_qloop_320 + tmp_qloop_321, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_314 ) : ( ny_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_324 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_325 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_326 = tmp_qloop_324 + tmp_qloop_325;
                     const walberla::float64 tmp_qloop_327 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_328 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_327 + tmp_qloop_328;
                     const walberla::float64 tmp_qloop_330 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_331 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_332 = tmp_qloop_330 + tmp_qloop_331;
                     const walberla::float64 tmp_qloop_335 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_336 = tmp_qloop_313 * tmp_qloop_335;
                     const walberla::float64 tmp_qloop_337 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( tmp_qloop_336 ) :
                                       ( ( tmp_qloop_316 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_335 * 1.0;
                     const walberla::float64 tmp_qloop_341 = ny_rotation_dof_5 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_342 = tmp_qloop_312 * 1.0;
                     const walberla::float64 tmp_qloop_343 = nx_rotation_dof_5 * tmp_qloop_342;
                     const walberla::float64 tmp_qloop_344 =
                         ( ( tmp_qloop_322 ) ? ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_341 ) :
                                                                       ( ( tmp_qloop_316 ) ? ( tmp_qloop_343 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_347 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_348 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_349 = pow( tmp_qloop_347 + tmp_qloop_348, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_350 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_351 = pow( tmp_qloop_348 + tmp_qloop_350, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_351 + 1.0e-10;
                     const walberla::float64 tmp_qloop_353 = pow( tmp_qloop_347 + tmp_qloop_350, 0.50000000000000000 );
                     const bool              tmp_qloop_354 = tmp_qloop_349 < tmp_qloop_352 && tmp_qloop_353 < tmp_qloop_352;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_353 );
                     const walberla::float64 tmp_qloop_356 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_357 = tmp_qloop_355 * tmp_qloop_356;
                     const walberla::float64 tmp_qloop_358 = tmp_qloop_353 + 1.0e-10;
                     const bool              tmp_qloop_359 = tmp_qloop_349 < tmp_qloop_358 && tmp_qloop_351 < tmp_qloop_358;
                     const walberla::float64 tmp_qloop_360 = 1.0 / ( tmp_qloop_349 );
                     const walberla::float64 tmp_qloop_361 = tmp_qloop_360 * 1.0;
                     const walberla::float64 tmp_qloop_362 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_363 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_364 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_365 = pow( tmp_qloop_362 + tmp_qloop_363 + tmp_qloop_364, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_366 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_357 ) : ( ny_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_367 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_368 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_367 + tmp_qloop_368;
                     const walberla::float64 tmp_qloop_370 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_371 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_372 = tmp_qloop_370 + tmp_qloop_371;
                     const walberla::float64 tmp_qloop_373 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_124;
                     const walberla::float64 tmp_qloop_374 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_125;
                     const walberla::float64 tmp_qloop_375 = tmp_qloop_373 + tmp_qloop_374;
                     const walberla::float64 tmp_qloop_378 = 1.0 / ( tmp_qloop_351 );
                     const walberla::float64 tmp_qloop_379 = tmp_qloop_356 * tmp_qloop_378;
                     const walberla::float64 tmp_qloop_380 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( tmp_qloop_379 ) :
                                       ( ( tmp_qloop_359 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_361 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_383 = tmp_qloop_378 * 1.0;
                     const walberla::float64 tmp_qloop_384 = ny_rotation_dof_6 * tmp_qloop_383;
                     const walberla::float64 tmp_qloop_385 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_386 = nx_rotation_dof_6 * tmp_qloop_385;
                     const walberla::float64 tmp_qloop_387 =
                         ( ( tmp_qloop_365 ) ? ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_384 ) :
                                                                       ( ( tmp_qloop_359 ) ? ( tmp_qloop_386 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_390 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_391 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_392 = pow( tmp_qloop_390 + tmp_qloop_391, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_393 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_394 = pow( tmp_qloop_391 + tmp_qloop_393, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_395 = tmp_qloop_394 + 1.0e-10;
                     const walberla::float64 tmp_qloop_396 = pow( tmp_qloop_390 + tmp_qloop_393, 0.50000000000000000 );
                     const bool              tmp_qloop_397 = tmp_qloop_392 < tmp_qloop_395 && tmp_qloop_396 < tmp_qloop_395;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_396 );
                     const walberla::float64 tmp_qloop_399 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_400 = tmp_qloop_398 * tmp_qloop_399;
                     const walberla::float64 tmp_qloop_401 = tmp_qloop_396 + 1.0e-10;
                     const bool              tmp_qloop_402 = tmp_qloop_392 < tmp_qloop_401 && tmp_qloop_394 < tmp_qloop_401;
                     const walberla::float64 tmp_qloop_403 = 1.0 / ( tmp_qloop_392 );
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_403 * 1.0;
                     const walberla::float64 tmp_qloop_405 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_406 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_407 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_408 = pow( tmp_qloop_405 + tmp_qloop_406 + tmp_qloop_407, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_409 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_400 ) : ( ny_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_410 = -tmp_qloop_126 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_282 - tmp_qloop_325;
                     const walberla::float64 tmp_qloop_412 =
                         jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_285 - tmp_qloop_328;
                     const walberla::float64 tmp_qloop_413 =
                         jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_410 - tmp_qloop_288 - tmp_qloop_331;
                     const walberla::float64 tmp_qloop_416 = 1.0 / ( tmp_qloop_394 );
                     const walberla::float64 tmp_qloop_417 = tmp_qloop_399 * tmp_qloop_416;
                     const walberla::float64 tmp_qloop_418 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( tmp_qloop_417 ) :
                                       ( ( tmp_qloop_402 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_404 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_421 = tmp_qloop_416 * 1.0;
                     const walberla::float64 tmp_qloop_422 = ny_rotation_dof_7 * tmp_qloop_421;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_424 = nx_rotation_dof_7 * tmp_qloop_423;
                     const walberla::float64 tmp_qloop_425 =
                         ( ( tmp_qloop_408 ) ? ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_422 ) :
                                                                       ( ( tmp_qloop_402 ) ? ( tmp_qloop_424 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_428 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_429 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_430 = pow( tmp_qloop_428 + tmp_qloop_429, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_431 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_432 = pow( tmp_qloop_429 + tmp_qloop_431, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_433 = tmp_qloop_432 + 1.0e-10;
                     const walberla::float64 tmp_qloop_434 = pow( tmp_qloop_428 + tmp_qloop_431, 0.50000000000000000 );
                     const bool              tmp_qloop_435 = tmp_qloop_430 < tmp_qloop_433 && tmp_qloop_434 < tmp_qloop_433;
                     const walberla::float64 tmp_qloop_436 = 1.0 / ( tmp_qloop_434 );
                     const walberla::float64 tmp_qloop_437 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_436 * tmp_qloop_437;
                     const walberla::float64 tmp_qloop_439 = tmp_qloop_434 + 1.0e-10;
                     const bool              tmp_qloop_440 = tmp_qloop_430 < tmp_qloop_439 && tmp_qloop_432 < tmp_qloop_439;
                     const walberla::float64 tmp_qloop_441 = 1.0 / ( tmp_qloop_430 );
                     const walberla::float64 tmp_qloop_442 = tmp_qloop_441 * 1.0;
                     const walberla::float64 tmp_qloop_443 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_444 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_445 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_446 = pow( tmp_qloop_443 + tmp_qloop_444 + tmp_qloop_445, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_447 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_438 ) : ( ny_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_448 = tmp_qloop_123 - 4.0;
                     const walberla::float64 tmp_qloop_449 = -tmp_qloop_124 - tmp_qloop_448 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_450 =
                         jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_281 - tmp_qloop_368;
                     const walberla::float64 tmp_qloop_451 =
                         jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_284 - tmp_qloop_371;
                     const walberla::float64 tmp_qloop_452 =
                         jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_449 - tmp_qloop_287 - tmp_qloop_374;
                     const walberla::float64 tmp_qloop_455 = 1.0 / ( tmp_qloop_432 );
                     const walberla::float64 tmp_qloop_456 = tmp_qloop_437 * tmp_qloop_455;
                     const walberla::float64 tmp_qloop_457 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( tmp_qloop_456 ) :
                                       ( ( tmp_qloop_440 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_442 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_460 = tmp_qloop_455 * 1.0;
                     const walberla::float64 tmp_qloop_461 = ny_rotation_dof_8 * tmp_qloop_460;
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_436 * 1.0;
                     const walberla::float64 tmp_qloop_463 = nx_rotation_dof_8 * tmp_qloop_462;
                     const walberla::float64 tmp_qloop_464 =
                         ( ( tmp_qloop_446 ) ? ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_461 ) :
                                                                       ( ( tmp_qloop_440 ) ? ( tmp_qloop_463 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_467 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_468 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_469 = pow( tmp_qloop_467 + tmp_qloop_468, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_470 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_471 = pow( tmp_qloop_468 + tmp_qloop_470, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_472 = tmp_qloop_471 + 1.0e-10;
                     const walberla::float64 tmp_qloop_473 = pow( tmp_qloop_467 + tmp_qloop_470, 0.50000000000000000 );
                     const bool              tmp_qloop_474 = tmp_qloop_469 < tmp_qloop_472 && tmp_qloop_473 < tmp_qloop_472;
                     const walberla::float64 tmp_qloop_475 = 1.0 / ( tmp_qloop_473 );
                     const walberla::float64 tmp_qloop_476 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_477 = tmp_qloop_475 * tmp_qloop_476;
                     const walberla::float64 tmp_qloop_478 = tmp_qloop_473 + 1.0e-10;
                     const bool              tmp_qloop_479 = tmp_qloop_469 < tmp_qloop_478 && tmp_qloop_471 < tmp_qloop_478;
                     const walberla::float64 tmp_qloop_480 = 1.0 / ( tmp_qloop_469 );
                     const walberla::float64 tmp_qloop_481 = tmp_qloop_480 * 1.0;
                     const walberla::float64 tmp_qloop_482 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_483 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_484 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_485 = pow( tmp_qloop_482 + tmp_qloop_483 + tmp_qloop_484, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_486 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_477 ) : ( ny_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_487 = -tmp_qloop_125 - tmp_qloop_448 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_488 =
                         jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_324 - tmp_qloop_367;
                     const walberla::float64 tmp_qloop_489 =
                         jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_327 - tmp_qloop_370;
                     const walberla::float64 tmp_qloop_490 =
                         jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_487 - tmp_qloop_330 - tmp_qloop_373;
                     const walberla::float64 tmp_qloop_493 = 1.0 / ( tmp_qloop_471 );
                     const walberla::float64 tmp_qloop_494 = tmp_qloop_476 * tmp_qloop_493;
                     const walberla::float64 tmp_qloop_495 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( tmp_qloop_494 ) :
                                       ( ( tmp_qloop_479 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_481 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_498 = tmp_qloop_493 * 1.0;
                     const walberla::float64 tmp_qloop_499 = ny_rotation_dof_9 * tmp_qloop_498;
                     const walberla::float64 tmp_qloop_500 = tmp_qloop_475 * 1.0;
                     const walberla::float64 tmp_qloop_501 = nx_rotation_dof_9 * tmp_qloop_500;
                     const walberla::float64 tmp_qloop_502 =
                         ( ( tmp_qloop_485 ) ? ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_499 ) :
                                                                       ( ( tmp_qloop_479 ) ? ( tmp_qloop_501 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 = tmp_qloop_112 * tmp_qloop_116;
                     const walberla::float64 tmp_qloop_506 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( -tmp_qloop_119 * tmp_qloop_140 - tmp_qloop_120 * tmp_qloop_140 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_143 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_141 ) :
                                       ( ( tmp_qloop_115 ) ? ( -tmp_qloop_118 * tmp_qloop_142 - tmp_qloop_120 * tmp_qloop_142 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_505 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         ( ( tmp_qloop_121 ) ?
                               ( ( ( tmp_qloop_110 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_115 ) ? ( ny_rotation_dof_0 * tmp_qloop_113 ) :
                                                                             ( -tmp_qloop_117 * tmp_qloop_118 -
                                                                               tmp_qloop_117 * tmp_qloop_119 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 = tmp_qloop_156 * tmp_qloop_160;
                     const walberla::float64 tmp_qloop_510 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( -tmp_qloop_163 * tmp_qloop_178 - tmp_qloop_164 * tmp_qloop_178 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_181 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_179 ) :
                                       ( ( tmp_qloop_159 ) ? ( -tmp_qloop_162 * tmp_qloop_180 - tmp_qloop_164 * tmp_qloop_180 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_509 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         ( ( tmp_qloop_165 ) ?
                               ( ( ( tmp_qloop_154 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_159 ) ? ( ny_rotation_dof_1 * tmp_qloop_157 ) :
                                                                             ( -tmp_qloop_161 * tmp_qloop_162 -
                                                                               tmp_qloop_161 * tmp_qloop_163 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 = tmp_qloop_194 * tmp_qloop_198;
                     const walberla::float64 tmp_qloop_514 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( -tmp_qloop_201 * tmp_qloop_216 - tmp_qloop_202 * tmp_qloop_216 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_219 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_217 ) :
                                       ( ( tmp_qloop_197 ) ? ( -tmp_qloop_200 * tmp_qloop_218 - tmp_qloop_202 * tmp_qloop_218 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_513 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         ( ( tmp_qloop_203 ) ?
                               ( ( ( tmp_qloop_192 ) ? ( nx_rotation_dof_2 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_197 ) ? ( ny_rotation_dof_2 * tmp_qloop_195 ) :
                                                                             ( -tmp_qloop_199 * tmp_qloop_200 -
                                                                               tmp_qloop_199 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 = tmp_qloop_232 * tmp_qloop_236;
                     const walberla::float64 tmp_qloop_518 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( -tmp_qloop_239 * tmp_qloop_254 - tmp_qloop_240 * tmp_qloop_254 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_257 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_255 ) :
                                       ( ( tmp_qloop_235 ) ? ( -tmp_qloop_238 * tmp_qloop_256 - tmp_qloop_240 * tmp_qloop_256 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_517 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         ( ( tmp_qloop_241 ) ?
                               ( ( ( tmp_qloop_230 ) ? ( nx_rotation_dof_3 * tmp_qloop_250 ) :
                                                       ( ( tmp_qloop_235 ) ? ( ny_rotation_dof_3 * tmp_qloop_233 ) :
                                                                             ( -tmp_qloop_237 * tmp_qloop_238 -
                                                                               tmp_qloop_237 * tmp_qloop_239 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 = tmp_qloop_270 * tmp_qloop_274;
                     const walberla::float64 tmp_qloop_522 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( -tmp_qloop_277 * tmp_qloop_297 - tmp_qloop_278 * tmp_qloop_297 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_300 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_298 ) :
                                       ( ( tmp_qloop_273 ) ? ( -tmp_qloop_276 * tmp_qloop_299 - tmp_qloop_278 * tmp_qloop_299 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_521 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         ( ( tmp_qloop_279 ) ?
                               ( ( ( tmp_qloop_268 ) ? ( nx_rotation_dof_4 * tmp_qloop_293 ) :
                                                       ( ( tmp_qloop_273 ) ? ( ny_rotation_dof_4 * tmp_qloop_271 ) :
                                                                             ( -tmp_qloop_275 * tmp_qloop_276 -
                                                                               tmp_qloop_275 * tmp_qloop_277 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 = tmp_qloop_313 * tmp_qloop_317;
                     const walberla::float64 tmp_qloop_526 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( -tmp_qloop_320 * tmp_qloop_340 - tmp_qloop_321 * tmp_qloop_340 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_343 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_341 ) :
                                       ( ( tmp_qloop_316 ) ? ( -tmp_qloop_319 * tmp_qloop_342 - tmp_qloop_321 * tmp_qloop_342 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_525 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         ( ( tmp_qloop_322 ) ?
                               ( ( ( tmp_qloop_311 ) ? ( nx_rotation_dof_5 * tmp_qloop_336 ) :
                                                       ( ( tmp_qloop_316 ) ? ( ny_rotation_dof_5 * tmp_qloop_314 ) :
                                                                             ( -tmp_qloop_318 * tmp_qloop_319 -
                                                                               tmp_qloop_318 * tmp_qloop_320 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_529 = tmp_qloop_356 * tmp_qloop_360;
                     const walberla::float64 tmp_qloop_530 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( -tmp_qloop_363 * tmp_qloop_383 - tmp_qloop_364 * tmp_qloop_383 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_386 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_384 ) :
                                       ( ( tmp_qloop_359 ) ? ( -tmp_qloop_362 * tmp_qloop_385 - tmp_qloop_364 * tmp_qloop_385 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_529 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         ( ( tmp_qloop_365 ) ?
                               ( ( ( tmp_qloop_354 ) ? ( nx_rotation_dof_6 * tmp_qloop_379 ) :
                                                       ( ( tmp_qloop_359 ) ? ( ny_rotation_dof_6 * tmp_qloop_357 ) :
                                                                             ( -tmp_qloop_361 * tmp_qloop_362 -
                                                                               tmp_qloop_361 * tmp_qloop_363 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 = tmp_qloop_399 * tmp_qloop_403;
                     const walberla::float64 tmp_qloop_534 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( -tmp_qloop_406 * tmp_qloop_421 - tmp_qloop_407 * tmp_qloop_421 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_424 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_422 ) :
                                       ( ( tmp_qloop_402 ) ? ( -tmp_qloop_405 * tmp_qloop_423 - tmp_qloop_407 * tmp_qloop_423 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_533 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         ( ( tmp_qloop_408 ) ?
                               ( ( ( tmp_qloop_397 ) ? ( nx_rotation_dof_7 * tmp_qloop_417 ) :
                                                       ( ( tmp_qloop_402 ) ? ( ny_rotation_dof_7 * tmp_qloop_400 ) :
                                                                             ( -tmp_qloop_404 * tmp_qloop_405 -
                                                                               tmp_qloop_404 * tmp_qloop_406 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 = tmp_qloop_437 * tmp_qloop_441;
                     const walberla::float64 tmp_qloop_538 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( -tmp_qloop_444 * tmp_qloop_460 - tmp_qloop_445 * tmp_qloop_460 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_463 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_461 ) :
                                       ( ( tmp_qloop_440 ) ? ( -tmp_qloop_443 * tmp_qloop_462 - tmp_qloop_445 * tmp_qloop_462 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_537 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         ( ( tmp_qloop_446 ) ?
                               ( ( ( tmp_qloop_435 ) ? ( nx_rotation_dof_8 * tmp_qloop_456 ) :
                                                       ( ( tmp_qloop_440 ) ? ( ny_rotation_dof_8 * tmp_qloop_438 ) :
                                                                             ( -tmp_qloop_442 * tmp_qloop_443 -
                                                                               tmp_qloop_442 * tmp_qloop_444 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_541 = tmp_qloop_476 * tmp_qloop_480;
                     const walberla::float64 tmp_qloop_542 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( -tmp_qloop_483 * tmp_qloop_498 - tmp_qloop_484 * tmp_qloop_498 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_501 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_499 ) :
                                       ( ( tmp_qloop_479 ) ? ( -tmp_qloop_482 * tmp_qloop_500 - tmp_qloop_484 * tmp_qloop_500 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_541 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         ( ( tmp_qloop_485 ) ?
                               ( ( ( tmp_qloop_474 ) ? ( nx_rotation_dof_9 * tmp_qloop_494 ) :
                                                       ( ( tmp_qloop_479 ) ? ( ny_rotation_dof_9 * tmp_qloop_477 ) :
                                                                             ( -tmp_qloop_481 * tmp_qloop_482 -
                                                                               tmp_qloop_481 * tmp_qloop_483 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545    = ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546    = ( ( tmp_qloop_121 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_547    = ( ( tmp_qloop_121 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_548    = ( ( tmp_qloop_165 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_549    = ( ( tmp_qloop_165 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_550    = ( ( tmp_qloop_165 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_551    = ( ( tmp_qloop_203 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_552    = ( ( tmp_qloop_203 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_553    = ( ( tmp_qloop_203 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_554    = ( ( tmp_qloop_241 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_555    = ( ( tmp_qloop_241 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_556    = ( ( tmp_qloop_241 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_557    = ( ( tmp_qloop_279 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_558    = ( ( tmp_qloop_279 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_559    = ( ( tmp_qloop_279 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_560    = ( ( tmp_qloop_322 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_561    = ( ( tmp_qloop_322 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_562    = ( ( tmp_qloop_322 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_563    = ( ( tmp_qloop_365 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_564    = ( ( tmp_qloop_365 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_565    = ( ( tmp_qloop_365 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_566    = ( ( tmp_qloop_408 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_567    = ( ( tmp_qloop_408 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_568    = ( ( tmp_qloop_408 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_569    = ( ( tmp_qloop_446 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_570    = ( ( tmp_qloop_446 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_571    = ( ( tmp_qloop_446 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_572    = ( ( tmp_qloop_485 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_573    = ( ( tmp_qloop_485 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_574    = ( ( tmp_qloop_485 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_132        = abs_det_jac_affine_GREEN_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_132 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_575        = tmp_qloop_132 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_606        = tmp_qloop_132 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_637        = tmp_qloop_132 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_131 = -jac_blending_inv_0_0 * tmp_qloop_128 -
                                                             jac_blending_inv_1_0 * tmp_qloop_129 -
                                                             jac_blending_inv_2_0 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_134 = tmp_qloop_131 * tmp_qloop_133;
                     const walberla::float64 tmp_qloop_171 = -jac_blending_inv_0_0 * tmp_qloop_168 -
                                                             jac_blending_inv_1_0 * tmp_qloop_169 -
                                                             jac_blending_inv_2_0 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_172 = tmp_qloop_133 * tmp_qloop_171;
                     const walberla::float64 tmp_qloop_209 = -jac_blending_inv_0_0 * tmp_qloop_206 -
                                                             jac_blending_inv_1_0 * tmp_qloop_207 -
                                                             jac_blending_inv_2_0 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_210 = tmp_qloop_133 * tmp_qloop_209;
                     const walberla::float64 tmp_qloop_247 = -jac_blending_inv_0_0 * tmp_qloop_244 -
                                                             jac_blending_inv_1_0 * tmp_qloop_245 -
                                                             jac_blending_inv_2_0 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_248 = tmp_qloop_133 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_290 = -jac_blending_inv_0_0 * tmp_qloop_283 -
                                                             jac_blending_inv_1_0 * tmp_qloop_286 -
                                                             jac_blending_inv_2_0 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_291 = tmp_qloop_133 * tmp_qloop_290;
                     const walberla::float64 tmp_qloop_333 = -jac_blending_inv_0_0 * tmp_qloop_326 -
                                                             jac_blending_inv_1_0 * tmp_qloop_329 -
                                                             jac_blending_inv_2_0 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_133 * tmp_qloop_333;
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_369 -
                                                             jac_blending_inv_1_0 * tmp_qloop_372 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_377 = tmp_qloop_133 * tmp_qloop_376;
                     const walberla::float64 tmp_qloop_414 = -jac_blending_inv_0_0 * tmp_qloop_411 -
                                                             jac_blending_inv_1_0 * tmp_qloop_412 -
                                                             jac_blending_inv_2_0 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_415 = tmp_qloop_133 * tmp_qloop_414;
                     const walberla::float64 tmp_qloop_453 = -jac_blending_inv_0_0 * tmp_qloop_450 -
                                                             jac_blending_inv_1_0 * tmp_qloop_451 -
                                                             jac_blending_inv_2_0 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_454 = tmp_qloop_133 * tmp_qloop_453;
                     const walberla::float64 tmp_qloop_491 = -jac_blending_inv_0_0 * tmp_qloop_488 -
                                                             jac_blending_inv_1_0 * tmp_qloop_489 -
                                                             jac_blending_inv_2_0 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_492 = tmp_qloop_133 * tmp_qloop_491;
                     const walberla::float64 tmp_qloop_576 = tmp_qloop_131 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_579 = tmp_qloop_171 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_582 = tmp_qloop_209 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_585 = tmp_qloop_247 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_588 = tmp_qloop_290 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_591 = tmp_qloop_333 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_594 = tmp_qloop_376 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_597 = tmp_qloop_414 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_600 = tmp_qloop_453 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_603 = tmp_qloop_491 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_607 = tmp_qloop_131 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_610 = tmp_qloop_171 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_613 = tmp_qloop_209 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_616 = tmp_qloop_247 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_619 = tmp_qloop_290 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_622 = tmp_qloop_333 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_625 = tmp_qloop_376 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_628 = tmp_qloop_414 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_631 = tmp_qloop_453 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_634 = tmp_qloop_491 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_638 = tmp_qloop_131 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_641 = tmp_qloop_171 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_644 = tmp_qloop_209 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_647 = tmp_qloop_247 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_650 = tmp_qloop_290 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_653 = tmp_qloop_333 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_656 = tmp_qloop_376 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_659 = tmp_qloop_414 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_662 = tmp_qloop_453 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_665 = tmp_qloop_491 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_1 * tmp_qloop_128 -
                                                             jac_blending_inv_1_1 * tmp_qloop_129 -
                                                             jac_blending_inv_2_1 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_133 * tmp_qloop_138;
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_1 * tmp_qloop_168 -
                                                             jac_blending_inv_1_1 * tmp_qloop_169 -
                                                             jac_blending_inv_2_1 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_133 * tmp_qloop_176;
                     const walberla::float64 tmp_qloop_214 = -jac_blending_inv_0_1 * tmp_qloop_206 -
                                                             jac_blending_inv_1_1 * tmp_qloop_207 -
                                                             jac_blending_inv_2_1 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_215 = tmp_qloop_133 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_252 = -jac_blending_inv_0_1 * tmp_qloop_244 -
                                                             jac_blending_inv_1_1 * tmp_qloop_245 -
                                                             jac_blending_inv_2_1 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_253 = tmp_qloop_133 * tmp_qloop_252;
                     const walberla::float64 tmp_qloop_295 = -jac_blending_inv_0_1 * tmp_qloop_283 -
                                                             jac_blending_inv_1_1 * tmp_qloop_286 -
                                                             jac_blending_inv_2_1 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_296 = tmp_qloop_133 * tmp_qloop_295;
                     const walberla::float64 tmp_qloop_338 = -jac_blending_inv_0_1 * tmp_qloop_326 -
                                                             jac_blending_inv_1_1 * tmp_qloop_329 -
                                                             jac_blending_inv_2_1 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_339 = tmp_qloop_133 * tmp_qloop_338;
                     const walberla::float64 tmp_qloop_381 = -jac_blending_inv_0_1 * tmp_qloop_369 -
                                                             jac_blending_inv_1_1 * tmp_qloop_372 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_133 * tmp_qloop_381;
                     const walberla::float64 tmp_qloop_419 = -jac_blending_inv_0_1 * tmp_qloop_411 -
                                                             jac_blending_inv_1_1 * tmp_qloop_412 -
                                                             jac_blending_inv_2_1 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_420 = tmp_qloop_133 * tmp_qloop_419;
                     const walberla::float64 tmp_qloop_458 = -jac_blending_inv_0_1 * tmp_qloop_450 -
                                                             jac_blending_inv_1_1 * tmp_qloop_451 -
                                                             jac_blending_inv_2_1 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_133 * tmp_qloop_458;
                     const walberla::float64 tmp_qloop_496 = -jac_blending_inv_0_1 * tmp_qloop_488 -
                                                             jac_blending_inv_1_1 * tmp_qloop_489 -
                                                             jac_blending_inv_2_1 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_497 = tmp_qloop_133 * tmp_qloop_496;
                     const walberla::float64 tmp_qloop_577 = tmp_qloop_138 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_580 = tmp_qloop_176 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_583 = tmp_qloop_214 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_586 = tmp_qloop_252 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_589 = tmp_qloop_295 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_592 = tmp_qloop_338 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_595 = tmp_qloop_381 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_598 = tmp_qloop_419 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_601 = tmp_qloop_458 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_604 = tmp_qloop_496 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_608 = tmp_qloop_138 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_611 = tmp_qloop_176 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_614 = tmp_qloop_214 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_617 = tmp_qloop_252 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_620 = tmp_qloop_295 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_623 = tmp_qloop_338 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_626 = tmp_qloop_381 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_629 = tmp_qloop_419 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_632 = tmp_qloop_458 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_635 = tmp_qloop_496 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_639 = tmp_qloop_138 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_642 = tmp_qloop_176 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_645 = tmp_qloop_214 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_648 = tmp_qloop_252 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_651 = tmp_qloop_295 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_654 = tmp_qloop_338 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_657 = tmp_qloop_381 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_660 = tmp_qloop_419 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_663 = tmp_qloop_458 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_666 = tmp_qloop_496 * tmp_qloop_637;
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_145 = -jac_blending_inv_0_2 * tmp_qloop_128 -
                                                             jac_blending_inv_1_2 * tmp_qloop_129 -
                                                             jac_blending_inv_2_2 * tmp_qloop_130;
                     const walberla::float64 tmp_qloop_146 = tmp_qloop_133 * tmp_qloop_145;
                     const walberla::float64 tmp_qloop_183 = -jac_blending_inv_0_2 * tmp_qloop_168 -
                                                             jac_blending_inv_1_2 * tmp_qloop_169 -
                                                             jac_blending_inv_2_2 * tmp_qloop_170;
                     const walberla::float64 tmp_qloop_184 = tmp_qloop_133 * tmp_qloop_183;
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_2 * tmp_qloop_206 -
                                                             jac_blending_inv_1_2 * tmp_qloop_207 -
                                                             jac_blending_inv_2_2 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_222 = tmp_qloop_133 * tmp_qloop_221;
                     const walberla::float64 tmp_qloop_259 = -jac_blending_inv_0_2 * tmp_qloop_244 -
                                                             jac_blending_inv_1_2 * tmp_qloop_245 -
                                                             jac_blending_inv_2_2 * tmp_qloop_246;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_133 * tmp_qloop_259;
                     const walberla::float64 tmp_qloop_302 = -jac_blending_inv_0_2 * tmp_qloop_283 -
                                                             jac_blending_inv_1_2 * tmp_qloop_286 -
                                                             jac_blending_inv_2_2 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_303 = tmp_qloop_133 * tmp_qloop_302;
                     const walberla::float64 tmp_qloop_345 = -jac_blending_inv_0_2 * tmp_qloop_326 -
                                                             jac_blending_inv_1_2 * tmp_qloop_329 -
                                                             jac_blending_inv_2_2 * tmp_qloop_332;
                     const walberla::float64 tmp_qloop_346 = tmp_qloop_133 * tmp_qloop_345;
                     const walberla::float64 tmp_qloop_388 = -jac_blending_inv_0_2 * tmp_qloop_369 -
                                                             jac_blending_inv_1_2 * tmp_qloop_372 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_389 = tmp_qloop_133 * tmp_qloop_388;
                     const walberla::float64 tmp_qloop_426 = -jac_blending_inv_0_2 * tmp_qloop_411 -
                                                             jac_blending_inv_1_2 * tmp_qloop_412 -
                                                             jac_blending_inv_2_2 * tmp_qloop_413;
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_133 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_465 = -jac_blending_inv_0_2 * tmp_qloop_450 -
                                                             jac_blending_inv_1_2 * tmp_qloop_451 -
                                                             jac_blending_inv_2_2 * tmp_qloop_452;
                     const walberla::float64 tmp_qloop_466 = tmp_qloop_133 * tmp_qloop_465;
                     const walberla::float64 tmp_qloop_503 = -jac_blending_inv_0_2 * tmp_qloop_488 -
                                                             jac_blending_inv_1_2 * tmp_qloop_489 -
                                                             jac_blending_inv_2_2 * tmp_qloop_490;
                     const walberla::float64 tmp_qloop_504 = tmp_qloop_133 * tmp_qloop_503;
                     const walberla::float64 tmp_qloop_578 = tmp_qloop_145 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_581 = tmp_qloop_183 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_584 = tmp_qloop_221 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_587 = tmp_qloop_259 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_590 = tmp_qloop_302 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_593 = tmp_qloop_345 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_596 = tmp_qloop_388 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_599 = tmp_qloop_426 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_602 = tmp_qloop_465 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_605 = tmp_qloop_503 * tmp_qloop_575;
                     const walberla::float64 tmp_qloop_609 = tmp_qloop_145 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_612 = tmp_qloop_183 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_615 = tmp_qloop_221 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_618 = tmp_qloop_259 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_621 = tmp_qloop_302 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_624 = tmp_qloop_345 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_627 = tmp_qloop_388 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_630 = tmp_qloop_426 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_633 = tmp_qloop_465 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_636 = tmp_qloop_503 * tmp_qloop_606;
                     const walberla::float64 tmp_qloop_640 = tmp_qloop_145 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_643 = tmp_qloop_183 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_646 = tmp_qloop_221 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_649 = tmp_qloop_259 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_652 = tmp_qloop_302 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_655 = tmp_qloop_345 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_658 = tmp_qloop_388 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_661 = tmp_qloop_426 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_664 = tmp_qloop_465 * tmp_qloop_637;
                     const walberla::float64 tmp_qloop_667 = tmp_qloop_503 * tmp_qloop_637;
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_122 * tmp_qloop_134 + tmp_qloop_137 * tmp_qloop_139 + tmp_qloop_144 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_166 * tmp_qloop_172 + tmp_qloop_175 * tmp_qloop_177 + tmp_qloop_182 * tmp_qloop_184 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_204 * tmp_qloop_210 + tmp_qloop_213 * tmp_qloop_215 + tmp_qloop_220 * tmp_qloop_222 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_242 * tmp_qloop_248 + tmp_qloop_251 * tmp_qloop_253 + tmp_qloop_258 * tmp_qloop_260 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_4 =
                         ( tmp_qloop_280 * tmp_qloop_291 + tmp_qloop_294 * tmp_qloop_296 + tmp_qloop_301 * tmp_qloop_303 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_5 =
                         ( tmp_qloop_323 * tmp_qloop_334 + tmp_qloop_337 * tmp_qloop_339 + tmp_qloop_344 * tmp_qloop_346 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_6 =
                         ( tmp_qloop_366 * tmp_qloop_377 + tmp_qloop_380 * tmp_qloop_382 + tmp_qloop_387 * tmp_qloop_389 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_7 =
                         ( tmp_qloop_409 * tmp_qloop_415 + tmp_qloop_418 * tmp_qloop_420 + tmp_qloop_425 * tmp_qloop_427 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_8 =
                         ( tmp_qloop_447 * tmp_qloop_454 + tmp_qloop_457 * tmp_qloop_459 + tmp_qloop_464 * tmp_qloop_466 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_9 =
                         ( tmp_qloop_486 * tmp_qloop_492 + tmp_qloop_495 * tmp_qloop_497 + tmp_qloop_502 * tmp_qloop_504 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_10 =
                         ( tmp_qloop_134 * tmp_qloop_506 + tmp_qloop_139 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_11 =
                         ( tmp_qloop_172 * tmp_qloop_510 + tmp_qloop_177 * tmp_qloop_511 + tmp_qloop_184 * tmp_qloop_512 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_12 =
                         ( tmp_qloop_210 * tmp_qloop_514 + tmp_qloop_215 * tmp_qloop_515 + tmp_qloop_222 * tmp_qloop_516 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_13 =
                         ( tmp_qloop_248 * tmp_qloop_518 + tmp_qloop_253 * tmp_qloop_519 + tmp_qloop_260 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_14 =
                         ( tmp_qloop_291 * tmp_qloop_522 + tmp_qloop_296 * tmp_qloop_523 + tmp_qloop_303 * tmp_qloop_524 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_15 =
                         ( tmp_qloop_334 * tmp_qloop_526 + tmp_qloop_339 * tmp_qloop_527 + tmp_qloop_346 * tmp_qloop_528 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_16 =
                         ( tmp_qloop_377 * tmp_qloop_530 + tmp_qloop_382 * tmp_qloop_531 + tmp_qloop_389 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_17 =
                         ( tmp_qloop_415 * tmp_qloop_534 + tmp_qloop_420 * tmp_qloop_535 + tmp_qloop_427 * tmp_qloop_536 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_18 =
                         ( tmp_qloop_454 * tmp_qloop_538 + tmp_qloop_459 * tmp_qloop_539 + tmp_qloop_466 * tmp_qloop_540 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_19 =
                         ( tmp_qloop_492 * tmp_qloop_542 + tmp_qloop_497 * tmp_qloop_543 + tmp_qloop_504 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_20 =
                         ( tmp_qloop_134 * tmp_qloop_545 + tmp_qloop_139 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_21 =
                         ( tmp_qloop_172 * tmp_qloop_548 + tmp_qloop_177 * tmp_qloop_549 + tmp_qloop_184 * tmp_qloop_550 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_22 =
                         ( tmp_qloop_210 * tmp_qloop_551 + tmp_qloop_215 * tmp_qloop_552 + tmp_qloop_222 * tmp_qloop_553 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_23 =
                         ( tmp_qloop_248 * tmp_qloop_554 + tmp_qloop_253 * tmp_qloop_555 + tmp_qloop_260 * tmp_qloop_556 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_24 =
                         ( tmp_qloop_291 * tmp_qloop_557 + tmp_qloop_296 * tmp_qloop_558 + tmp_qloop_303 * tmp_qloop_559 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_25 =
                         ( tmp_qloop_334 * tmp_qloop_560 + tmp_qloop_339 * tmp_qloop_561 + tmp_qloop_346 * tmp_qloop_562 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_26 =
                         ( tmp_qloop_377 * tmp_qloop_563 + tmp_qloop_382 * tmp_qloop_564 + tmp_qloop_389 * tmp_qloop_565 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_27 =
                         ( tmp_qloop_415 * tmp_qloop_566 + tmp_qloop_420 * tmp_qloop_567 + tmp_qloop_427 * tmp_qloop_568 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_28 =
                         ( tmp_qloop_454 * tmp_qloop_569 + tmp_qloop_459 * tmp_qloop_570 + tmp_qloop_466 * tmp_qloop_571 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_29 =
                         ( tmp_qloop_492 * tmp_qloop_572 + tmp_qloop_497 * tmp_qloop_573 + tmp_qloop_504 * tmp_qloop_574 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_122 * tmp_qloop_576 + tmp_qloop_137 * tmp_qloop_577 + tmp_qloop_144 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_166 * tmp_qloop_579 + tmp_qloop_175 * tmp_qloop_580 + tmp_qloop_182 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_204 * tmp_qloop_582 + tmp_qloop_213 * tmp_qloop_583 + tmp_qloop_220 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_242 * tmp_qloop_585 + tmp_qloop_251 * tmp_qloop_586 + tmp_qloop_258 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_4 =
                         ( tmp_qloop_280 * tmp_qloop_588 + tmp_qloop_294 * tmp_qloop_589 + tmp_qloop_301 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_5 =
                         ( tmp_qloop_323 * tmp_qloop_591 + tmp_qloop_337 * tmp_qloop_592 + tmp_qloop_344 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_6 =
                         ( tmp_qloop_366 * tmp_qloop_594 + tmp_qloop_380 * tmp_qloop_595 + tmp_qloop_387 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_7 =
                         ( tmp_qloop_409 * tmp_qloop_597 + tmp_qloop_418 * tmp_qloop_598 + tmp_qloop_425 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_8 =
                         ( tmp_qloop_447 * tmp_qloop_600 + tmp_qloop_457 * tmp_qloop_601 + tmp_qloop_464 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_9 =
                         ( tmp_qloop_486 * tmp_qloop_603 + tmp_qloop_495 * tmp_qloop_604 + tmp_qloop_502 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_10 =
                         ( tmp_qloop_506 * tmp_qloop_576 + tmp_qloop_507 * tmp_qloop_577 + tmp_qloop_508 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_11 =
                         ( tmp_qloop_510 * tmp_qloop_579 + tmp_qloop_511 * tmp_qloop_580 + tmp_qloop_512 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_12 =
                         ( tmp_qloop_514 * tmp_qloop_582 + tmp_qloop_515 * tmp_qloop_583 + tmp_qloop_516 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_13 =
                         ( tmp_qloop_518 * tmp_qloop_585 + tmp_qloop_519 * tmp_qloop_586 + tmp_qloop_520 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_14 =
                         ( tmp_qloop_522 * tmp_qloop_588 + tmp_qloop_523 * tmp_qloop_589 + tmp_qloop_524 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_15 =
                         ( tmp_qloop_526 * tmp_qloop_591 + tmp_qloop_527 * tmp_qloop_592 + tmp_qloop_528 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_16 =
                         ( tmp_qloop_530 * tmp_qloop_594 + tmp_qloop_531 * tmp_qloop_595 + tmp_qloop_532 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_17 =
                         ( tmp_qloop_534 * tmp_qloop_597 + tmp_qloop_535 * tmp_qloop_598 + tmp_qloop_536 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_18 =
                         ( tmp_qloop_538 * tmp_qloop_600 + tmp_qloop_539 * tmp_qloop_601 + tmp_qloop_540 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_19 =
                         ( tmp_qloop_542 * tmp_qloop_603 + tmp_qloop_543 * tmp_qloop_604 + tmp_qloop_544 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_20 =
                         ( tmp_qloop_545 * tmp_qloop_576 + tmp_qloop_546 * tmp_qloop_577 + tmp_qloop_547 * tmp_qloop_578 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_21 =
                         ( tmp_qloop_548 * tmp_qloop_579 + tmp_qloop_549 * tmp_qloop_580 + tmp_qloop_550 * tmp_qloop_581 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_22 =
                         ( tmp_qloop_551 * tmp_qloop_582 + tmp_qloop_552 * tmp_qloop_583 + tmp_qloop_553 * tmp_qloop_584 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_23 =
                         ( tmp_qloop_554 * tmp_qloop_585 + tmp_qloop_555 * tmp_qloop_586 + tmp_qloop_556 * tmp_qloop_587 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_24 =
                         ( tmp_qloop_557 * tmp_qloop_588 + tmp_qloop_558 * tmp_qloop_589 + tmp_qloop_559 * tmp_qloop_590 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_25 =
                         ( tmp_qloop_560 * tmp_qloop_591 + tmp_qloop_561 * tmp_qloop_592 + tmp_qloop_562 * tmp_qloop_593 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_26 =
                         ( tmp_qloop_563 * tmp_qloop_594 + tmp_qloop_564 * tmp_qloop_595 + tmp_qloop_565 * tmp_qloop_596 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_27 =
                         ( tmp_qloop_566 * tmp_qloop_597 + tmp_qloop_567 * tmp_qloop_598 + tmp_qloop_568 * tmp_qloop_599 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_28 =
                         ( tmp_qloop_569 * tmp_qloop_600 + tmp_qloop_570 * tmp_qloop_601 + tmp_qloop_571 * tmp_qloop_602 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_29 =
                         ( tmp_qloop_572 * tmp_qloop_603 + tmp_qloop_573 * tmp_qloop_604 + tmp_qloop_574 * tmp_qloop_605 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_122 * tmp_qloop_607 + tmp_qloop_137 * tmp_qloop_608 + tmp_qloop_144 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_166 * tmp_qloop_610 + tmp_qloop_175 * tmp_qloop_611 + tmp_qloop_182 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_204 * tmp_qloop_613 + tmp_qloop_213 * tmp_qloop_614 + tmp_qloop_220 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_242 * tmp_qloop_616 + tmp_qloop_251 * tmp_qloop_617 + tmp_qloop_258 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_4 =
                         ( tmp_qloop_280 * tmp_qloop_619 + tmp_qloop_294 * tmp_qloop_620 + tmp_qloop_301 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_5 =
                         ( tmp_qloop_323 * tmp_qloop_622 + tmp_qloop_337 * tmp_qloop_623 + tmp_qloop_344 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_6 =
                         ( tmp_qloop_366 * tmp_qloop_625 + tmp_qloop_380 * tmp_qloop_626 + tmp_qloop_387 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_7 =
                         ( tmp_qloop_409 * tmp_qloop_628 + tmp_qloop_418 * tmp_qloop_629 + tmp_qloop_425 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_8 =
                         ( tmp_qloop_447 * tmp_qloop_631 + tmp_qloop_457 * tmp_qloop_632 + tmp_qloop_464 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_9 =
                         ( tmp_qloop_486 * tmp_qloop_634 + tmp_qloop_495 * tmp_qloop_635 + tmp_qloop_502 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_10 =
                         ( tmp_qloop_506 * tmp_qloop_607 + tmp_qloop_507 * tmp_qloop_608 + tmp_qloop_508 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_11 =
                         ( tmp_qloop_510 * tmp_qloop_610 + tmp_qloop_511 * tmp_qloop_611 + tmp_qloop_512 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_12 =
                         ( tmp_qloop_514 * tmp_qloop_613 + tmp_qloop_515 * tmp_qloop_614 + tmp_qloop_516 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_13 =
                         ( tmp_qloop_518 * tmp_qloop_616 + tmp_qloop_519 * tmp_qloop_617 + tmp_qloop_520 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_14 =
                         ( tmp_qloop_522 * tmp_qloop_619 + tmp_qloop_523 * tmp_qloop_620 + tmp_qloop_524 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_15 =
                         ( tmp_qloop_526 * tmp_qloop_622 + tmp_qloop_527 * tmp_qloop_623 + tmp_qloop_528 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_16 =
                         ( tmp_qloop_530 * tmp_qloop_625 + tmp_qloop_531 * tmp_qloop_626 + tmp_qloop_532 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_17 =
                         ( tmp_qloop_534 * tmp_qloop_628 + tmp_qloop_535 * tmp_qloop_629 + tmp_qloop_536 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_18 =
                         ( tmp_qloop_538 * tmp_qloop_631 + tmp_qloop_539 * tmp_qloop_632 + tmp_qloop_540 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_19 =
                         ( tmp_qloop_542 * tmp_qloop_634 + tmp_qloop_543 * tmp_qloop_635 + tmp_qloop_544 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_20 =
                         ( tmp_qloop_545 * tmp_qloop_607 + tmp_qloop_546 * tmp_qloop_608 + tmp_qloop_547 * tmp_qloop_609 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_21 =
                         ( tmp_qloop_548 * tmp_qloop_610 + tmp_qloop_549 * tmp_qloop_611 + tmp_qloop_550 * tmp_qloop_612 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_22 =
                         ( tmp_qloop_551 * tmp_qloop_613 + tmp_qloop_552 * tmp_qloop_614 + tmp_qloop_553 * tmp_qloop_615 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_23 =
                         ( tmp_qloop_554 * tmp_qloop_616 + tmp_qloop_555 * tmp_qloop_617 + tmp_qloop_556 * tmp_qloop_618 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_24 =
                         ( tmp_qloop_557 * tmp_qloop_619 + tmp_qloop_558 * tmp_qloop_620 + tmp_qloop_559 * tmp_qloop_621 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_25 =
                         ( tmp_qloop_560 * tmp_qloop_622 + tmp_qloop_561 * tmp_qloop_623 + tmp_qloop_562 * tmp_qloop_624 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_26 =
                         ( tmp_qloop_563 * tmp_qloop_625 + tmp_qloop_564 * tmp_qloop_626 + tmp_qloop_565 * tmp_qloop_627 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_27 =
                         ( tmp_qloop_566 * tmp_qloop_628 + tmp_qloop_567 * tmp_qloop_629 + tmp_qloop_568 * tmp_qloop_630 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_28 =
                         ( tmp_qloop_569 * tmp_qloop_631 + tmp_qloop_570 * tmp_qloop_632 + tmp_qloop_571 * tmp_qloop_633 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_29 =
                         ( tmp_qloop_572 * tmp_qloop_634 + tmp_qloop_573 * tmp_qloop_635 + tmp_qloop_574 * tmp_qloop_636 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_122 * tmp_qloop_638 + tmp_qloop_137 * tmp_qloop_639 + tmp_qloop_144 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_166 * tmp_qloop_641 + tmp_qloop_175 * tmp_qloop_642 + tmp_qloop_182 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_204 * tmp_qloop_644 + tmp_qloop_213 * tmp_qloop_645 + tmp_qloop_220 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_242 * tmp_qloop_647 + tmp_qloop_251 * tmp_qloop_648 + tmp_qloop_258 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_4 =
                         ( tmp_qloop_280 * tmp_qloop_650 + tmp_qloop_294 * tmp_qloop_651 + tmp_qloop_301 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_5 =
                         ( tmp_qloop_323 * tmp_qloop_653 + tmp_qloop_337 * tmp_qloop_654 + tmp_qloop_344 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_6 =
                         ( tmp_qloop_366 * tmp_qloop_656 + tmp_qloop_380 * tmp_qloop_657 + tmp_qloop_387 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_7 =
                         ( tmp_qloop_409 * tmp_qloop_659 + tmp_qloop_418 * tmp_qloop_660 + tmp_qloop_425 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_8 =
                         ( tmp_qloop_447 * tmp_qloop_662 + tmp_qloop_457 * tmp_qloop_663 + tmp_qloop_464 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_9 =
                         ( tmp_qloop_486 * tmp_qloop_665 + tmp_qloop_495 * tmp_qloop_666 + tmp_qloop_502 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_10 =
                         ( tmp_qloop_506 * tmp_qloop_638 + tmp_qloop_507 * tmp_qloop_639 + tmp_qloop_508 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_11 =
                         ( tmp_qloop_510 * tmp_qloop_641 + tmp_qloop_511 * tmp_qloop_642 + tmp_qloop_512 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_12 =
                         ( tmp_qloop_514 * tmp_qloop_644 + tmp_qloop_515 * tmp_qloop_645 + tmp_qloop_516 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_13 =
                         ( tmp_qloop_518 * tmp_qloop_647 + tmp_qloop_519 * tmp_qloop_648 + tmp_qloop_520 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_14 =
                         ( tmp_qloop_522 * tmp_qloop_650 + tmp_qloop_523 * tmp_qloop_651 + tmp_qloop_524 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_15 =
                         ( tmp_qloop_526 * tmp_qloop_653 + tmp_qloop_527 * tmp_qloop_654 + tmp_qloop_528 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_16 =
                         ( tmp_qloop_530 * tmp_qloop_656 + tmp_qloop_531 * tmp_qloop_657 + tmp_qloop_532 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_17 =
                         ( tmp_qloop_534 * tmp_qloop_659 + tmp_qloop_535 * tmp_qloop_660 + tmp_qloop_536 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_18 =
                         ( tmp_qloop_538 * tmp_qloop_662 + tmp_qloop_539 * tmp_qloop_663 + tmp_qloop_540 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_19 =
                         ( tmp_qloop_542 * tmp_qloop_665 + tmp_qloop_543 * tmp_qloop_666 + tmp_qloop_544 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_20 =
                         ( tmp_qloop_545 * tmp_qloop_638 + tmp_qloop_546 * tmp_qloop_639 + tmp_qloop_547 * tmp_qloop_640 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_21 =
                         ( tmp_qloop_548 * tmp_qloop_641 + tmp_qloop_549 * tmp_qloop_642 + tmp_qloop_550 * tmp_qloop_643 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_22 =
                         ( tmp_qloop_551 * tmp_qloop_644 + tmp_qloop_552 * tmp_qloop_645 + tmp_qloop_553 * tmp_qloop_646 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_23 =
                         ( tmp_qloop_554 * tmp_qloop_647 + tmp_qloop_555 * tmp_qloop_648 + tmp_qloop_556 * tmp_qloop_649 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_24 =
                         ( tmp_qloop_557 * tmp_qloop_650 + tmp_qloop_558 * tmp_qloop_651 + tmp_qloop_559 * tmp_qloop_652 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_25 =
                         ( tmp_qloop_560 * tmp_qloop_653 + tmp_qloop_561 * tmp_qloop_654 + tmp_qloop_562 * tmp_qloop_655 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_26 =
                         ( tmp_qloop_563 * tmp_qloop_656 + tmp_qloop_564 * tmp_qloop_657 + tmp_qloop_565 * tmp_qloop_658 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_27 =
                         ( tmp_qloop_566 * tmp_qloop_659 + tmp_qloop_567 * tmp_qloop_660 + tmp_qloop_568 * tmp_qloop_661 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_28 =
                         ( tmp_qloop_569 * tmp_qloop_662 + tmp_qloop_570 * tmp_qloop_663 + tmp_qloop_571 * tmp_qloop_664 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_29 =
                         ( tmp_qloop_572 * tmp_qloop_665 + tmp_qloop_573 * tmp_qloop_666 + tmp_qloop_574 * tmp_qloop_667 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_0_4  = q_acc_0_4 + q_tmp_0_4;
                     q_acc_0_5  = q_acc_0_5 + q_tmp_0_5;
                     q_acc_0_6  = q_acc_0_6 + q_tmp_0_6;
                     q_acc_0_7  = q_acc_0_7 + q_tmp_0_7;
                     q_acc_0_8  = q_acc_0_8 + q_tmp_0_8;
                     q_acc_0_9  = q_acc_0_9 + q_tmp_0_9;
                     q_acc_0_10 = q_acc_0_10 + q_tmp_0_10;
                     q_acc_0_11 = q_acc_0_11 + q_tmp_0_11;
                     q_acc_0_12 = q_acc_0_12 + q_tmp_0_12;
                     q_acc_0_13 = q_acc_0_13 + q_tmp_0_13;
                     q_acc_0_14 = q_acc_0_14 + q_tmp_0_14;
                     q_acc_0_15 = q_acc_0_15 + q_tmp_0_15;
                     q_acc_0_16 = q_acc_0_16 + q_tmp_0_16;
                     q_acc_0_17 = q_acc_0_17 + q_tmp_0_17;
                     q_acc_0_18 = q_acc_0_18 + q_tmp_0_18;
                     q_acc_0_19 = q_acc_0_19 + q_tmp_0_19;
                     q_acc_0_20 = q_acc_0_20 + q_tmp_0_20;
                     q_acc_0_21 = q_acc_0_21 + q_tmp_0_21;
                     q_acc_0_22 = q_acc_0_22 + q_tmp_0_22;
                     q_acc_0_23 = q_acc_0_23 + q_tmp_0_23;
                     q_acc_0_24 = q_acc_0_24 + q_tmp_0_24;
                     q_acc_0_25 = q_acc_0_25 + q_tmp_0_25;
                     q_acc_0_26 = q_acc_0_26 + q_tmp_0_26;
                     q_acc_0_27 = q_acc_0_27 + q_tmp_0_27;
                     q_acc_0_28 = q_acc_0_28 + q_tmp_0_28;
                     q_acc_0_29 = q_acc_0_29 + q_tmp_0_29;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_1_4  = q_acc_1_4 + q_tmp_1_4;
                     q_acc_1_5  = q_acc_1_5 + q_tmp_1_5;
                     q_acc_1_6  = q_acc_1_6 + q_tmp_1_6;
                     q_acc_1_7  = q_acc_1_7 + q_tmp_1_7;
                     q_acc_1_8  = q_acc_1_8 + q_tmp_1_8;
                     q_acc_1_9  = q_acc_1_9 + q_tmp_1_9;
                     q_acc_1_10 = q_acc_1_10 + q_tmp_1_10;
                     q_acc_1_11 = q_acc_1_11 + q_tmp_1_11;
                     q_acc_1_12 = q_acc_1_12 + q_tmp_1_12;
                     q_acc_1_13 = q_acc_1_13 + q_tmp_1_13;
                     q_acc_1_14 = q_acc_1_14 + q_tmp_1_14;
                     q_acc_1_15 = q_acc_1_15 + q_tmp_1_15;
                     q_acc_1_16 = q_acc_1_16 + q_tmp_1_16;
                     q_acc_1_17 = q_acc_1_17 + q_tmp_1_17;
                     q_acc_1_18 = q_acc_1_18 + q_tmp_1_18;
                     q_acc_1_19 = q_acc_1_19 + q_tmp_1_19;
                     q_acc_1_20 = q_acc_1_20 + q_tmp_1_20;
                     q_acc_1_21 = q_acc_1_21 + q_tmp_1_21;
                     q_acc_1_22 = q_acc_1_22 + q_tmp_1_22;
                     q_acc_1_23 = q_acc_1_23 + q_tmp_1_23;
                     q_acc_1_24 = q_acc_1_24 + q_tmp_1_24;
                     q_acc_1_25 = q_acc_1_25 + q_tmp_1_25;
                     q_acc_1_26 = q_acc_1_26 + q_tmp_1_26;
                     q_acc_1_27 = q_acc_1_27 + q_tmp_1_27;
                     q_acc_1_28 = q_acc_1_28 + q_tmp_1_28;
                     q_acc_1_29 = q_acc_1_29 + q_tmp_1_29;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_2_4  = q_acc_2_4 + q_tmp_2_4;
                     q_acc_2_5  = q_acc_2_5 + q_tmp_2_5;
                     q_acc_2_6  = q_acc_2_6 + q_tmp_2_6;
                     q_acc_2_7  = q_acc_2_7 + q_tmp_2_7;
                     q_acc_2_8  = q_acc_2_8 + q_tmp_2_8;
                     q_acc_2_9  = q_acc_2_9 + q_tmp_2_9;
                     q_acc_2_10 = q_acc_2_10 + q_tmp_2_10;
                     q_acc_2_11 = q_acc_2_11 + q_tmp_2_11;
                     q_acc_2_12 = q_acc_2_12 + q_tmp_2_12;
                     q_acc_2_13 = q_acc_2_13 + q_tmp_2_13;
                     q_acc_2_14 = q_acc_2_14 + q_tmp_2_14;
                     q_acc_2_15 = q_acc_2_15 + q_tmp_2_15;
                     q_acc_2_16 = q_acc_2_16 + q_tmp_2_16;
                     q_acc_2_17 = q_acc_2_17 + q_tmp_2_17;
                     q_acc_2_18 = q_acc_2_18 + q_tmp_2_18;
                     q_acc_2_19 = q_acc_2_19 + q_tmp_2_19;
                     q_acc_2_20 = q_acc_2_20 + q_tmp_2_20;
                     q_acc_2_21 = q_acc_2_21 + q_tmp_2_21;
                     q_acc_2_22 = q_acc_2_22 + q_tmp_2_22;
                     q_acc_2_23 = q_acc_2_23 + q_tmp_2_23;
                     q_acc_2_24 = q_acc_2_24 + q_tmp_2_24;
                     q_acc_2_25 = q_acc_2_25 + q_tmp_2_25;
                     q_acc_2_26 = q_acc_2_26 + q_tmp_2_26;
                     q_acc_2_27 = q_acc_2_27 + q_tmp_2_27;
                     q_acc_2_28 = q_acc_2_28 + q_tmp_2_28;
                     q_acc_2_29 = q_acc_2_29 + q_tmp_2_29;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_3_4  = q_acc_3_4 + q_tmp_3_4;
                     q_acc_3_5  = q_acc_3_5 + q_tmp_3_5;
                     q_acc_3_6  = q_acc_3_6 + q_tmp_3_6;
                     q_acc_3_7  = q_acc_3_7 + q_tmp_3_7;
                     q_acc_3_8  = q_acc_3_8 + q_tmp_3_8;
                     q_acc_3_9  = q_acc_3_9 + q_tmp_3_9;
                     q_acc_3_10 = q_acc_3_10 + q_tmp_3_10;
                     q_acc_3_11 = q_acc_3_11 + q_tmp_3_11;
                     q_acc_3_12 = q_acc_3_12 + q_tmp_3_12;
                     q_acc_3_13 = q_acc_3_13 + q_tmp_3_13;
                     q_acc_3_14 = q_acc_3_14 + q_tmp_3_14;
                     q_acc_3_15 = q_acc_3_15 + q_tmp_3_15;
                     q_acc_3_16 = q_acc_3_16 + q_tmp_3_16;
                     q_acc_3_17 = q_acc_3_17 + q_tmp_3_17;
                     q_acc_3_18 = q_acc_3_18 + q_tmp_3_18;
                     q_acc_3_19 = q_acc_3_19 + q_tmp_3_19;
                     q_acc_3_20 = q_acc_3_20 + q_tmp_3_20;
                     q_acc_3_21 = q_acc_3_21 + q_tmp_3_21;
                     q_acc_3_22 = q_acc_3_22 + q_tmp_3_22;
                     q_acc_3_23 = q_acc_3_23 + q_tmp_3_23;
                     q_acc_3_24 = q_acc_3_24 + q_tmp_3_24;
                     q_acc_3_25 = q_acc_3_25 + q_tmp_3_25;
                     q_acc_3_26 = q_acc_3_26 + q_tmp_3_26;
                     q_acc_3_27 = q_acc_3_27 + q_tmp_3_27;
                     q_acc_3_28 = q_acc_3_28 + q_tmp_3_28;
                     q_acc_3_29 = q_acc_3_29 + q_tmp_3_29;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_0_4  = q_acc_0_4;
                  const walberla::float64 elMat_0_5  = q_acc_0_5;
                  const walberla::float64 elMat_0_6  = q_acc_0_6;
                  const walberla::float64 elMat_0_7  = q_acc_0_7;
                  const walberla::float64 elMat_0_8  = q_acc_0_8;
                  const walberla::float64 elMat_0_9  = q_acc_0_9;
                  const walberla::float64 elMat_0_10 = q_acc_0_10;
                  const walberla::float64 elMat_0_11 = q_acc_0_11;
                  const walberla::float64 elMat_0_12 = q_acc_0_12;
                  const walberla::float64 elMat_0_13 = q_acc_0_13;
                  const walberla::float64 elMat_0_14 = q_acc_0_14;
                  const walberla::float64 elMat_0_15 = q_acc_0_15;
                  const walberla::float64 elMat_0_16 = q_acc_0_16;
                  const walberla::float64 elMat_0_17 = q_acc_0_17;
                  const walberla::float64 elMat_0_18 = q_acc_0_18;
                  const walberla::float64 elMat_0_19 = q_acc_0_19;
                  const walberla::float64 elMat_0_20 = q_acc_0_20;
                  const walberla::float64 elMat_0_21 = q_acc_0_21;
                  const walberla::float64 elMat_0_22 = q_acc_0_22;
                  const walberla::float64 elMat_0_23 = q_acc_0_23;
                  const walberla::float64 elMat_0_24 = q_acc_0_24;
                  const walberla::float64 elMat_0_25 = q_acc_0_25;
                  const walberla::float64 elMat_0_26 = q_acc_0_26;
                  const walberla::float64 elMat_0_27 = q_acc_0_27;
                  const walberla::float64 elMat_0_28 = q_acc_0_28;
                  const walberla::float64 elMat_0_29 = q_acc_0_29;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_1_4  = q_acc_1_4;
                  const walberla::float64 elMat_1_5  = q_acc_1_5;
                  const walberla::float64 elMat_1_6  = q_acc_1_6;
                  const walberla::float64 elMat_1_7  = q_acc_1_7;
                  const walberla::float64 elMat_1_8  = q_acc_1_8;
                  const walberla::float64 elMat_1_9  = q_acc_1_9;
                  const walberla::float64 elMat_1_10 = q_acc_1_10;
                  const walberla::float64 elMat_1_11 = q_acc_1_11;
                  const walberla::float64 elMat_1_12 = q_acc_1_12;
                  const walberla::float64 elMat_1_13 = q_acc_1_13;
                  const walberla::float64 elMat_1_14 = q_acc_1_14;
                  const walberla::float64 elMat_1_15 = q_acc_1_15;
                  const walberla::float64 elMat_1_16 = q_acc_1_16;
                  const walberla::float64 elMat_1_17 = q_acc_1_17;
                  const walberla::float64 elMat_1_18 = q_acc_1_18;
                  const walberla::float64 elMat_1_19 = q_acc_1_19;
                  const walberla::float64 elMat_1_20 = q_acc_1_20;
                  const walberla::float64 elMat_1_21 = q_acc_1_21;
                  const walberla::float64 elMat_1_22 = q_acc_1_22;
                  const walberla::float64 elMat_1_23 = q_acc_1_23;
                  const walberla::float64 elMat_1_24 = q_acc_1_24;
                  const walberla::float64 elMat_1_25 = q_acc_1_25;
                  const walberla::float64 elMat_1_26 = q_acc_1_26;
                  const walberla::float64 elMat_1_27 = q_acc_1_27;
                  const walberla::float64 elMat_1_28 = q_acc_1_28;
                  const walberla::float64 elMat_1_29 = q_acc_1_29;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_2_4  = q_acc_2_4;
                  const walberla::float64 elMat_2_5  = q_acc_2_5;
                  const walberla::float64 elMat_2_6  = q_acc_2_6;
                  const walberla::float64 elMat_2_7  = q_acc_2_7;
                  const walberla::float64 elMat_2_8  = q_acc_2_8;
                  const walberla::float64 elMat_2_9  = q_acc_2_9;
                  const walberla::float64 elMat_2_10 = q_acc_2_10;
                  const walberla::float64 elMat_2_11 = q_acc_2_11;
                  const walberla::float64 elMat_2_12 = q_acc_2_12;
                  const walberla::float64 elMat_2_13 = q_acc_2_13;
                  const walberla::float64 elMat_2_14 = q_acc_2_14;
                  const walberla::float64 elMat_2_15 = q_acc_2_15;
                  const walberla::float64 elMat_2_16 = q_acc_2_16;
                  const walberla::float64 elMat_2_17 = q_acc_2_17;
                  const walberla::float64 elMat_2_18 = q_acc_2_18;
                  const walberla::float64 elMat_2_19 = q_acc_2_19;
                  const walberla::float64 elMat_2_20 = q_acc_2_20;
                  const walberla::float64 elMat_2_21 = q_acc_2_21;
                  const walberla::float64 elMat_2_22 = q_acc_2_22;
                  const walberla::float64 elMat_2_23 = q_acc_2_23;
                  const walberla::float64 elMat_2_24 = q_acc_2_24;
                  const walberla::float64 elMat_2_25 = q_acc_2_25;
                  const walberla::float64 elMat_2_26 = q_acc_2_26;
                  const walberla::float64 elMat_2_27 = q_acc_2_27;
                  const walberla::float64 elMat_2_28 = q_acc_2_28;
                  const walberla::float64 elMat_2_29 = q_acc_2_29;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_3_4  = q_acc_3_4;
                  const walberla::float64 elMat_3_5  = q_acc_3_5;
                  const walberla::float64 elMat_3_6  = q_acc_3_6;
                  const walberla::float64 elMat_3_7  = q_acc_3_7;
                  const walberla::float64 elMat_3_8  = q_acc_3_8;
                  const walberla::float64 elMat_3_9  = q_acc_3_9;
                  const walberla::float64 elMat_3_10 = q_acc_3_10;
                  const walberla::float64 elMat_3_11 = q_acc_3_11;
                  const walberla::float64 elMat_3_12 = q_acc_3_12;
                  const walberla::float64 elMat_3_13 = q_acc_3_13;
                  const walberla::float64 elMat_3_14 = q_acc_3_14;
                  const walberla::float64 elMat_3_15 = q_acc_3_15;
                  const walberla::float64 elMat_3_16 = q_acc_3_16;
                  const walberla::float64 elMat_3_17 = q_acc_3_17;
                  const walberla::float64 elMat_3_18 = q_acc_3_18;
                  const walberla::float64 elMat_3_19 = q_acc_3_19;
                  const walberla::float64 elMat_3_20 = q_acc_3_20;
                  const walberla::float64 elMat_3_21 = q_acc_3_21;
                  const walberla::float64 elMat_3_22 = q_acc_3_22;
                  const walberla::float64 elMat_3_23 = q_acc_3_23;
                  const walberla::float64 elMat_3_24 = q_acc_3_24;
                  const walberla::float64 elMat_3_25 = q_acc_3_25;
                  const walberla::float64 elMat_3_26 = q_acc_3_26;
                  const walberla::float64 elMat_3_27 = q_acc_3_27;
                  const walberla::float64 elMat_3_28 = q_acc_3_28;
                  const walberla::float64 elMat_3_29 = q_acc_3_29;

                  std::vector< uint_t > _data_rowIdx( 4 );
                  std::vector< uint_t > _data_colIdx( 30 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_rowIdx[1] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[2] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_rowIdx[3] =
                      ( (uint64_t) ( _data_dst[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[0] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[1] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[2] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[3] = ( (
                      uint64_t) ( _data_src_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[4] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[5] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[6] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[7] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[8] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[9] =
                      ( (uint64_t) ( _data_src_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[10] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[11] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[12] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[13] = ( (
                      uint64_t) ( _data_src_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[14] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[15] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[16] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[17] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[18] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[19] =
                      ( (uint64_t) ( _data_src_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[20] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[21] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[22] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_colIdx[23] = ( (
                      uint64_t) ( _data_src_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_colIdx[24] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[25] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[26] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[27] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[28] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[29] =
                      ( (uint64_t) ( _data_src_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_0_4 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_0_5 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_0_6 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_0_7 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_0_8 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_0_9 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_0_10 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_0_11 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_0_12 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_0_13 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_0_14 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_0_15 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_0_16 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_0_17 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_0_18 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_0_19 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_0_20 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_0_21 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_0_22 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_0_23 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_0_24 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_0_25 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_0_26 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_0_27 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_0_28 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_0_29 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_1_4 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_1_5 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_1_6 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_1_7 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_1_8 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_1_9 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_1_10 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_1_11 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_1_12 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_1_13 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_1_14 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_1_15 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_1_16 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_1_17 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_1_18 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_1_19 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_1_20 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_1_21 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_1_22 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_1_23 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_1_24 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_1_25 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_1_26 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_1_27 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_1_28 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_1_29 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_2_4 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_2_5 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_2_6 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_2_7 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_2_8 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_2_9 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_2_10 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_2_11 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_2_12 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_2_13 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_2_14 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_2_15 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_2_16 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_2_17 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_2_18 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_2_19 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_2_20 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_2_21 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_2_22 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_2_23 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_2_24 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_2_25 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_2_26 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_2_27 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_2_28 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_2_29 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_3_4 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_3_5 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_3_6 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_3_7 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_3_8 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_3_9 ) );
                  _data_mat[100] = ( (real_t) ( elMat_3_10 ) );
                  _data_mat[101] = ( (real_t) ( elMat_3_11 ) );
                  _data_mat[102] = ( (real_t) ( elMat_3_12 ) );
                  _data_mat[103] = ( (real_t) ( elMat_3_13 ) );
                  _data_mat[104] = ( (real_t) ( elMat_3_14 ) );
                  _data_mat[105] = ( (real_t) ( elMat_3_15 ) );
                  _data_mat[106] = ( (real_t) ( elMat_3_16 ) );
                  _data_mat[107] = ( (real_t) ( elMat_3_17 ) );
                  _data_mat[108] = ( (real_t) ( elMat_3_18 ) );
                  _data_mat[109] = ( (real_t) ( elMat_3_19 ) );
                  _data_mat[110] = ( (real_t) ( elMat_3_20 ) );
                  _data_mat[111] = ( (real_t) ( elMat_3_21 ) );
                  _data_mat[112] = ( (real_t) ( elMat_3_22 ) );
                  _data_mat[113] = ( (real_t) ( elMat_3_23 ) );
                  _data_mat[114] = ( (real_t) ( elMat_3_24 ) );
                  _data_mat[115] = ( (real_t) ( elMat_3_25 ) );
                  _data_mat[116] = ( (real_t) ( elMat_3_26 ) );
                  _data_mat[117] = ( (real_t) ( elMat_3_27 ) );
                  _data_mat[118] = ( (real_t) ( elMat_3_28 ) );
                  _data_mat[119] = ( (real_t) ( elMat_3_29 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
   }
}

} // namespace operatorgeneration

} // namespace hyteg
