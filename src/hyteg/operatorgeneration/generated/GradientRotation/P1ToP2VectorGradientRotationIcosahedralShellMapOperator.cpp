/*
* Copyright (c) 2017-2024 Nils Kohl, Daniel Bauer, Fabian BÃ¶hm.
*
* This file is part of HyTeG
* (see https://i10git.cs.fau.de/hyteg/hyteg).
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/*
* The entire file was generated with the HyTeG Operator Generator.
*
* Avoid modifying this file. If buggy, consider fixing the generator itself.
*/

// Unfortunately, the inverse diagonal kernel wrapper triggers a GCC bug (maybe
// (related to) https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107087) causing a
// warning in an internal standard library header (bits/stl_algobase.h). As a
// workaround, we disable the warning and include this header indirectly through
// a public header.
#include <waLBerlaDefinitions.h>
#ifdef WALBERLA_CXX_COMPILER_IS_GNU
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wnonnull"
#endif
#include <cmath>
#ifdef WALBERLA_CXX_COMPILER_IS_GNU
#pragma GCC diagnostic pop
#endif

#include "P1ToP2VectorGradientRotationIcosahedralShellMapOperator.hpp"

#define FUNC_PREFIX

namespace hyteg {

namespace operatorgeneration {

P1ToP2VectorGradientRotationIcosahedralShellMapOperator::P1ToP2VectorGradientRotationIcosahedralShellMapOperator(
    const std::shared_ptr< PrimitiveStorage >& storage,
    size_t                                     minLevel,
    size_t                                     maxLevel,
    const P2Function< walberla::float64 >&     _nx_rotation,
    const P2Function< walberla::float64 >&     _ny_rotation,
    const P2Function< walberla::float64 >&     _nz_rotation )
: Operator( storage, minLevel, maxLevel )
, nx_rotation( _nx_rotation )
, ny_rotation( _ny_rotation )
, nz_rotation( _nz_rotation )
{}

void P1ToP2VectorGradientRotationIcosahedralShellMapOperator::apply( const P1Function< walberla::float64 >&       src,
                                                                     const P2VectorFunction< walberla::float64 >& dst,
                                                                     uint_t                                       level,
                                                                     DoFType                                      flag,
                                                                     UpdateType updateType ) const
{
   this->startTiming( "apply" );

   // Make sure that halos are up-to-date
   this->timingTree_->start( "pre-communication" );
   if ( this->storage_->hasGlobalCells() )
   {
      // Note that the order of communication is important, since the face -> cell communication may overwrite
      // parts of the halos that carry the macro-vertex and macro-edge unknowns.
      src.communicate< Face, Cell >( level );
      src.communicate< Edge, Cell >( level );
      src.communicate< Vertex, Cell >( level );
      nx_rotation.communicate< Face, Cell >( level );
      nx_rotation.communicate< Edge, Cell >( level );
      nx_rotation.communicate< Vertex, Cell >( level );
      ny_rotation.communicate< Face, Cell >( level );
      ny_rotation.communicate< Edge, Cell >( level );
      ny_rotation.communicate< Vertex, Cell >( level );
      nz_rotation.communicate< Face, Cell >( level );
      nz_rotation.communicate< Edge, Cell >( level );
      nz_rotation.communicate< Vertex, Cell >( level );
   }
   else
   {
      WALBERLA_ABORT( "Not implemented." );
   }
   this->timingTree_->stop( "pre-communication" );

   if ( updateType == Replace )
   {
      // We need to zero the destination array (including halos).
      // However, we must not zero out anything that is not flagged with the specified BCs.
      // Therefore, we first zero out everything that flagged, and then, later,
      // the halos of the highest dim primitives.
      dst.interpolate( walberla::numeric_cast< walberla::float64 >( 0 ), level, flag );
   }

   if ( storage_->hasGlobalCells() )
   {
      for ( auto& it : storage_->getCells() )
      {
         Cell& cell = *it.second;

         // get hold of the actual numerical data in the functions
         walberla::float64* _data_src = cell.getData( src.getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_vertex_0 =
             cell.getData( dst[0].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_edge_0 = cell.getData( dst[0].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_vertex_1 =
             cell.getData( dst[1].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_edge_1 = cell.getData( dst[1].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_vertex_2 =
             cell.getData( dst[2].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_dst_edge_2 = cell.getData( dst[2].getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         walberla::float64* _data_nx_rotationVertex =
             cell.getData( nx_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationEdge =
             cell.getData( nx_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationVertex =
             cell.getData( ny_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationEdge =
             cell.getData( ny_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationVertex =
             cell.getData( nz_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationEdge =
             cell.getData( nz_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         // Zero out dst halos only
         //
         // This is also necessary when using update type == Add.
         // During additive comm we then skip zeroing the data on the lower-dim primitives.
         for ( const auto& idx : vertexdof::macrocell::Iterator( level ) )
         {
            if ( !vertexdof::macrocell::isOnCellFace( idx, level ).empty() )
            {
               auto arrayIdx                = vertexdof::macrocell::index( level, idx.x(), idx.y(), idx.z() );
               _data_dst_vertex_0[arrayIdx] = walberla::float64( 0 );
               _data_dst_vertex_1[arrayIdx] = walberla::float64( 0 );
               _data_dst_vertex_2[arrayIdx] = walberla::float64( 0 );
            }
         }
         edgedof::macrocell::setBoundaryToZero( level, cell, dst[0].getEdgeDoFFunction().getCellDataID() );
         edgedof::macrocell::setBoundaryToZero( level, cell, dst[1].getEdgeDoFFunction().getCellDataID() );
         edgedof::macrocell::setBoundaryToZero( level, cell, dst[2].getEdgeDoFFunction().getCellDataID() );

         const auto micro_edges_per_macro_edge                = (int64_t) levelinfo::num_microedges_per_edge( level );
         const auto micro_edges_per_macro_edge_float          = (walberla::float64) levelinfo::num_microedges_per_edge( level );
         const walberla::float64 macro_vertex_coord_id_0comp0 = (walberla::float64) cell.getCoordinates()[0][0];
         const walberla::float64 macro_vertex_coord_id_0comp1 = (walberla::float64) cell.getCoordinates()[0][1];
         const walberla::float64 macro_vertex_coord_id_0comp2 = (walberla::float64) cell.getCoordinates()[0][2];
         const walberla::float64 macro_vertex_coord_id_1comp0 = (walberla::float64) cell.getCoordinates()[1][0];
         const walberla::float64 macro_vertex_coord_id_1comp1 = (walberla::float64) cell.getCoordinates()[1][1];
         const walberla::float64 macro_vertex_coord_id_1comp2 = (walberla::float64) cell.getCoordinates()[1][2];
         const walberla::float64 macro_vertex_coord_id_2comp0 = (walberla::float64) cell.getCoordinates()[2][0];
         const walberla::float64 macro_vertex_coord_id_2comp1 = (walberla::float64) cell.getCoordinates()[2][1];
         const walberla::float64 macro_vertex_coord_id_2comp2 = (walberla::float64) cell.getCoordinates()[2][2];
         const walberla::float64 macro_vertex_coord_id_3comp0 = (walberla::float64) cell.getCoordinates()[3][0];
         const walberla::float64 macro_vertex_coord_id_3comp1 = (walberla::float64) cell.getCoordinates()[3][1];
         const walberla::float64 macro_vertex_coord_id_3comp2 = (walberla::float64) cell.getCoordinates()[3][2];
         WALBERLA_CHECK_NOT_NULLPTR(
             std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() ),
             "This operator requires the IcosahedralShellMap to be registered as GeometryMap on every macro-cell." )
         real_t radRefVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRefVertex();
         real_t radRayVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRayVertex();
         real_t refVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[0];
         real_t rayVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[0];
         real_t thrVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[0];
         real_t forVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[0];
         real_t refVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[1];
         real_t rayVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[1];
         real_t thrVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[1];
         real_t forVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[1];
         real_t refVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[2];
         real_t rayVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[2];
         real_t thrVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[2];
         real_t forVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[2];

         this->timingTree_->start( "kernel" );

         apply_P1ToP2VectorGradientRotationIcosahedralShellMapOperator_macro_3D(

             _data_dst_edge_0,
             _data_dst_edge_1,
             _data_dst_edge_2,
             _data_dst_vertex_0,
             _data_dst_vertex_1,
             _data_dst_vertex_2,
             _data_nx_rotationEdge,
             _data_nx_rotationVertex,
             _data_ny_rotationEdge,
             _data_ny_rotationVertex,
             _data_nz_rotationEdge,
             _data_nz_rotationVertex,
             _data_src,
             forVertex_0,
             forVertex_1,
             forVertex_2,
             macro_vertex_coord_id_0comp0,
             macro_vertex_coord_id_0comp1,
             macro_vertex_coord_id_0comp2,
             macro_vertex_coord_id_1comp0,
             macro_vertex_coord_id_1comp1,
             macro_vertex_coord_id_1comp2,
             macro_vertex_coord_id_2comp0,
             macro_vertex_coord_id_2comp1,
             macro_vertex_coord_id_2comp2,
             macro_vertex_coord_id_3comp0,
             macro_vertex_coord_id_3comp1,
             macro_vertex_coord_id_3comp2,
             micro_edges_per_macro_edge,
             micro_edges_per_macro_edge_float,
             radRayVertex,
             radRefVertex,
             rayVertex_0,
             rayVertex_1,
             rayVertex_2,
             refVertex_0,
             refVertex_1,
             refVertex_2,
             thrVertex_0,
             thrVertex_1,
             thrVertex_2 );

         this->timingTree_->stop( "kernel" );
      }

      // Push result to lower-dimensional primitives
      //
      this->timingTree_->start( "post-communication" );
      // Note: We could avoid communication here by implementing the apply() also for the respective
      //       lower dimensional primitives!
      dst[0].getVertexDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[0].getVertexDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[0].getVertexDoFFunction().communicateAdditively< Cell, Vertex >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[0].getEdgeDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[0].getEdgeDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[1].getVertexDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[1].getVertexDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[1].getVertexDoFFunction().communicateAdditively< Cell, Vertex >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[1].getEdgeDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[1].getEdgeDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[2].getVertexDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[2].getVertexDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[2].getVertexDoFFunction().communicateAdditively< Cell, Vertex >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[2].getEdgeDoFFunction().communicateAdditively< Cell, Face >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      dst[2].getEdgeDoFFunction().communicateAdditively< Cell, Edge >(
          level, DoFType::All ^ flag, *storage_, updateType == Replace );
      this->timingTree_->stop( "post-communication" );
   }
   else
   {
      WALBERLA_ABORT( "Not implemented." );
   }

   this->stopTiming( "apply" );
}
void P1ToP2VectorGradientRotationIcosahedralShellMapOperator::toMatrix( const std::shared_ptr< SparseMatrixProxy >& mat,
                                                                        const P1Function< idx_t >&                  src,
                                                                        const P2VectorFunction< idx_t >&            dst,
                                                                        uint_t                                      level,
                                                                        DoFType                                     flag ) const
{
   this->startTiming( "toMatrix" );

   // We currently ignore the flag provided!
   if ( flag != All )
   {
      WALBERLA_LOG_WARNING_ON_ROOT( "Input flag ignored in toMatrix; using flag = All" );
   }

   if ( storage_->hasGlobalCells() )
   {
      this->timingTree_->start( "pre-communication" );
      nx_rotation.communicate< Face, Cell >( level );
      nx_rotation.communicate< Edge, Cell >( level );
      nx_rotation.communicate< Vertex, Cell >( level );
      ny_rotation.communicate< Face, Cell >( level );
      ny_rotation.communicate< Edge, Cell >( level );
      ny_rotation.communicate< Vertex, Cell >( level );
      nz_rotation.communicate< Face, Cell >( level );
      nz_rotation.communicate< Edge, Cell >( level );
      nz_rotation.communicate< Vertex, Cell >( level );
      this->timingTree_->stop( "pre-communication" );

      for ( auto& it : storage_->getCells() )
      {
         Cell& cell = *it.second;

         // get hold of the actual numerical data
         idx_t* _data_src          = cell.getData( src.getCellDataID() )->getPointer( level );
         idx_t* _data_dst_vertex_0 = cell.getData( dst[0].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_dst_edge_0   = cell.getData( dst[0].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_dst_vertex_1 = cell.getData( dst[1].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_dst_edge_1   = cell.getData( dst[1].getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_dst_vertex_2 = cell.getData( dst[2].getVertexDoFFunction().getCellDataID() )->getPointer( level );
         idx_t* _data_dst_edge_2   = cell.getData( dst[2].getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         walberla::float64* _data_nx_rotationVertex =
             cell.getData( nx_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nx_rotationEdge =
             cell.getData( nx_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationVertex =
             cell.getData( ny_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_ny_rotationEdge =
             cell.getData( ny_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationVertex =
             cell.getData( nz_rotation.getVertexDoFFunction().getCellDataID() )->getPointer( level );
         walberla::float64* _data_nz_rotationEdge =
             cell.getData( nz_rotation.getEdgeDoFFunction().getCellDataID() )->getPointer( level );

         const auto micro_edges_per_macro_edge                = (int64_t) levelinfo::num_microedges_per_edge( level );
         const auto micro_edges_per_macro_edge_float          = (walberla::float64) levelinfo::num_microedges_per_edge( level );
         const walberla::float64 macro_vertex_coord_id_0comp0 = (walberla::float64) cell.getCoordinates()[0][0];
         const walberla::float64 macro_vertex_coord_id_0comp1 = (walberla::float64) cell.getCoordinates()[0][1];
         const walberla::float64 macro_vertex_coord_id_0comp2 = (walberla::float64) cell.getCoordinates()[0][2];
         const walberla::float64 macro_vertex_coord_id_1comp0 = (walberla::float64) cell.getCoordinates()[1][0];
         const walberla::float64 macro_vertex_coord_id_1comp1 = (walberla::float64) cell.getCoordinates()[1][1];
         const walberla::float64 macro_vertex_coord_id_1comp2 = (walberla::float64) cell.getCoordinates()[1][2];
         const walberla::float64 macro_vertex_coord_id_2comp0 = (walberla::float64) cell.getCoordinates()[2][0];
         const walberla::float64 macro_vertex_coord_id_2comp1 = (walberla::float64) cell.getCoordinates()[2][1];
         const walberla::float64 macro_vertex_coord_id_2comp2 = (walberla::float64) cell.getCoordinates()[2][2];
         const walberla::float64 macro_vertex_coord_id_3comp0 = (walberla::float64) cell.getCoordinates()[3][0];
         const walberla::float64 macro_vertex_coord_id_3comp1 = (walberla::float64) cell.getCoordinates()[3][1];
         const walberla::float64 macro_vertex_coord_id_3comp2 = (walberla::float64) cell.getCoordinates()[3][2];
         WALBERLA_CHECK_NOT_NULLPTR(
             std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() ),
             "This operator requires the IcosahedralShellMap to be registered as GeometryMap on every macro-cell." )
         real_t radRefVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRefVertex();
         real_t radRayVertex = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->radRayVertex();
         real_t refVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[0];
         real_t rayVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[0];
         real_t thrVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[0];
         real_t forVertex_0  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[0];
         real_t refVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[1];
         real_t rayVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[1];
         real_t thrVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[1];
         real_t forVertex_1  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[1];
         real_t refVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->refVertex()[2];
         real_t rayVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->rayVertex()[2];
         real_t thrVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->thrVertex()[2];
         real_t forVertex_2  = std::dynamic_pointer_cast< IcosahedralShellMap >( cell.getGeometryMap() )->forVertex()[2];

         this->timingTree_->start( "kernel" );

         toMatrix_P1ToP2VectorGradientRotationIcosahedralShellMapOperator_macro_3D(

             _data_dst_edge_0,
             _data_dst_edge_1,
             _data_dst_edge_2,
             _data_dst_vertex_0,
             _data_dst_vertex_1,
             _data_dst_vertex_2,
             _data_nx_rotationEdge,
             _data_nx_rotationVertex,
             _data_ny_rotationEdge,
             _data_ny_rotationVertex,
             _data_nz_rotationEdge,
             _data_nz_rotationVertex,
             _data_src,
             forVertex_0,
             forVertex_1,
             forVertex_2,
             macro_vertex_coord_id_0comp0,
             macro_vertex_coord_id_0comp1,
             macro_vertex_coord_id_0comp2,
             macro_vertex_coord_id_1comp0,
             macro_vertex_coord_id_1comp1,
             macro_vertex_coord_id_1comp2,
             macro_vertex_coord_id_2comp0,
             macro_vertex_coord_id_2comp1,
             macro_vertex_coord_id_2comp2,
             macro_vertex_coord_id_3comp0,
             macro_vertex_coord_id_3comp1,
             macro_vertex_coord_id_3comp2,
             mat,
             micro_edges_per_macro_edge,
             micro_edges_per_macro_edge_float,
             radRayVertex,
             radRefVertex,
             rayVertex_0,
             rayVertex_1,
             rayVertex_2,
             refVertex_0,
             refVertex_1,
             refVertex_2,
             thrVertex_0,
             thrVertex_1,
             thrVertex_2 );

         this->timingTree_->stop( "kernel" );
      }
   }
   else
   {
      this->timingTree_->start( "pre-communication" );
      communication::syncFunctionBetweenPrimitives( nx_rotation, level, communication::syncDirection_t::LOW2HIGH );
      communication::syncFunctionBetweenPrimitives( ny_rotation, level, communication::syncDirection_t::LOW2HIGH );
      communication::syncFunctionBetweenPrimitives( nz_rotation, level, communication::syncDirection_t::LOW2HIGH );
      this->timingTree_->stop( "pre-communication" );

      WALBERLA_ABORT( "Not implemented." );
   }
   this->stopTiming( "toMatrix" );
}
void P1ToP2VectorGradientRotationIcosahedralShellMapOperator::
    apply_P1ToP2VectorGradientRotationIcosahedralShellMapOperator_macro_3D( walberla::float64* RESTRICT _data_dst_edge_0,
                                                                            walberla::float64* RESTRICT _data_dst_edge_1,
                                                                            walberla::float64* RESTRICT _data_dst_edge_2,
                                                                            walberla::float64* RESTRICT _data_dst_vertex_0,
                                                                            walberla::float64* RESTRICT _data_dst_vertex_1,
                                                                            walberla::float64* RESTRICT _data_dst_vertex_2,
                                                                            walberla::float64* RESTRICT _data_nx_rotationEdge,
                                                                            walberla::float64* RESTRICT _data_nx_rotationVertex,
                                                                            walberla::float64* RESTRICT _data_ny_rotationEdge,
                                                                            walberla::float64* RESTRICT _data_ny_rotationVertex,
                                                                            walberla::float64* RESTRICT _data_nz_rotationEdge,
                                                                            walberla::float64* RESTRICT _data_nz_rotationVertex,
                                                                            walberla::float64* RESTRICT _data_src,
                                                                            walberla::float64           forVertex_0,
                                                                            walberla::float64           forVertex_1,
                                                                            walberla::float64           forVertex_2,
                                                                            walberla::float64 macro_vertex_coord_id_0comp0,
                                                                            walberla::float64 macro_vertex_coord_id_0comp1,
                                                                            walberla::float64 macro_vertex_coord_id_0comp2,
                                                                            walberla::float64 macro_vertex_coord_id_1comp0,
                                                                            walberla::float64 macro_vertex_coord_id_1comp1,
                                                                            walberla::float64 macro_vertex_coord_id_1comp2,
                                                                            walberla::float64 macro_vertex_coord_id_2comp0,
                                                                            walberla::float64 macro_vertex_coord_id_2comp1,
                                                                            walberla::float64 macro_vertex_coord_id_2comp2,
                                                                            walberla::float64 macro_vertex_coord_id_3comp0,
                                                                            walberla::float64 macro_vertex_coord_id_3comp1,
                                                                            walberla::float64 macro_vertex_coord_id_3comp2,
                                                                            int64_t           micro_edges_per_macro_edge,
                                                                            walberla::float64 micro_edges_per_macro_edge_float,
                                                                            walberla::float64 radRayVertex,
                                                                            walberla::float64 radRefVertex,
                                                                            walberla::float64 rayVertex_0,
                                                                            walberla::float64 rayVertex_1,
                                                                            walberla::float64 rayVertex_2,
                                                                            walberla::float64 refVertex_0,
                                                                            walberla::float64 refVertex_1,
                                                                            walberla::float64 refVertex_2,
                                                                            walberla::float64 thrVertex_0,
                                                                            walberla::float64 thrVertex_1,
                                                                            walberla::float64 thrVertex_2 ) const
{
   {
      const walberla::float64 _data_q_w[] = {
          -0.1333333333333333, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983 };

      const walberla::float64 _data_q_p_0[] = { 0.25, 0.16666666666666666, 0.16666666666666666, 0.5, 0.16666666666666666 };

      const walberla::float64 _data_q_p_1[] = { 0.25, 0.16666666666666666, 0.5, 0.16666666666666666, 0.16666666666666666 };

      const walberla::float64 _data_q_p_2[] = { 0.25, 0.5, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666 };

      {
         /* CellType.WHITE_UP */
         const walberla::float64 tmp_coords_jac_0_WHITE_UP   = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 p_affine_const_0_0_WHITE_UP = macro_vertex_coord_id_0comp0;
         const walberla::float64 p_affine_const_0_1_WHITE_UP = macro_vertex_coord_id_0comp1;
         const walberla::float64 p_affine_const_0_2_WHITE_UP = macro_vertex_coord_id_0comp2;
         const walberla::float64 p_affine_const_1_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 p_affine_const_1_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 p_affine_const_1_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 p_affine_const_2_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_2_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_2_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_3_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 p_affine_const_3_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 p_affine_const_3_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 jac_affine_0_0_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_1_0_WHITE_UP;
         const walberla::float64 jac_affine_0_1_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_2_0_WHITE_UP;
         const walberla::float64 jac_affine_0_2_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_3_0_WHITE_UP;
         const walberla::float64 jac_affine_1_0_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_1_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_2_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_5_WHITE_UP = jac_affine_0_2_WHITE_UP * jac_affine_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_2_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_3_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_3_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_0_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_1_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_2_WHITE_UP = jac_affine_1_2_WHITE_UP * jac_affine_2_1_WHITE_UP;
         const walberla::float64 jac_affine_2_2_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_3_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_1_WHITE_UP = jac_affine_1_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_4_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_6_WHITE_UP =
             jac_affine_0_0_WHITE_UP * tmp_coords_jac_1_WHITE_UP - jac_affine_0_0_WHITE_UP * tmp_coords_jac_2_WHITE_UP +
             jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP -
             jac_affine_1_0_WHITE_UP * tmp_coords_jac_4_WHITE_UP + jac_affine_2_0_WHITE_UP * tmp_coords_jac_3_WHITE_UP -
             jac_affine_2_0_WHITE_UP * tmp_coords_jac_5_WHITE_UP;
         const walberla::float64 tmp_coords_jac_7_WHITE_UP = 1.0 / ( tmp_coords_jac_6_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_1_WHITE_UP - tmp_coords_jac_2_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( jac_affine_0_2_WHITE_UP * jac_affine_2_1_WHITE_UP - tmp_coords_jac_4_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_3_WHITE_UP - tmp_coords_jac_5_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_1_0_WHITE_UP * jac_affine_2_2_WHITE_UP + jac_affine_1_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_2_2_WHITE_UP - jac_affine_0_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_1_2_WHITE_UP + jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP - jac_affine_1_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_2_1_WHITE_UP + jac_affine_0_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_1_1_WHITE_UP - jac_affine_0_1_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 abs_det_jac_affine_WHITE_UP = abs( tmp_coords_jac_6_WHITE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_WHITE_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_WHITE_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_WHITE_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_WHITE_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_WHITE_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_WHITE_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_WHITE_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_WHITE_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_WHITE_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_WHITE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_1 +
                            _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_10 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_11 +
                            _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_20 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_21 +
                            _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
               }
      }
      {
         /* CellType.WHITE_DOWN */
         const walberla::float64 tmp_coords_jac_0_WHITE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_3_WHITE_DOWN = tmp_coords_jac_1_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_4_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_5_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_WHITE_DOWN = tmp_coords_jac_4_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_7_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_8_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_9_WHITE_DOWN = tmp_coords_jac_7_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_10_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_11_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_12_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_WHITE_DOWN = tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_1_WHITE_DOWN = tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_2_WHITE_DOWN = tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_0_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_1_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_1_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_4_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_7_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 jac_affine_0_0_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_1_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_1_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_2_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_2_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_3_0_WHITE_DOWN;
         const walberla::float64 jac_affine_1_0_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_1_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_2_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_17_WHITE_DOWN  = jac_affine_0_2_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_2_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_3_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_15_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_0_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_1_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_14_WHITE_DOWN  = jac_affine_1_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN;
         const walberla::float64 jac_affine_2_2_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_3_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_13_WHITE_DOWN  = jac_affine_1_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_16_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_18_WHITE_DOWN =
             jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_13_WHITE_DOWN - jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_14_WHITE_DOWN +
             jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN -
             jac_affine_1_0_WHITE_DOWN * tmp_coords_jac_16_WHITE_DOWN + jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_15_WHITE_DOWN -
             jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_17_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_19_WHITE_DOWN = 1.0 / ( tmp_coords_jac_18_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_13_WHITE_DOWN - tmp_coords_jac_14_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - tmp_coords_jac_16_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_15_WHITE_DOWN - tmp_coords_jac_17_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_1_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN + jac_affine_1_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN - jac_affine_0_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN + jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - jac_affine_1_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN + jac_affine_0_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN - jac_affine_0_1_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 abs_det_jac_affine_WHITE_DOWN = abs( tmp_coords_jac_18_WHITE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 2; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_4 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nx_rotation_dof_8 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_4 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 ny_rotation_dof_8 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_4 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nz_rotation_dof_8 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_WHITE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_0 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_1 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_10 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_11 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_20 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_21 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
               }
      }
      {
         /* CellType.BLUE_UP */
         const walberla::float64 tmp_coords_jac_0_BLUE_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_6_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_0_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_0_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_0_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 p_affine_const_1_0_BLUE_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_1_1_BLUE_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_1_2_BLUE_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_2_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_2_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_2_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_3_0_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) +
             tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_3_1_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) +
             tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_3_2_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) +
             tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 jac_affine_0_0_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_1_0_BLUE_UP;
         const walberla::float64 jac_affine_0_1_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_2_0_BLUE_UP;
         const walberla::float64 jac_affine_0_2_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_3_0_BLUE_UP;
         const walberla::float64 jac_affine_1_0_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_1_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_2_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_11_BLUE_UP = jac_affine_0_2_BLUE_UP * jac_affine_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_2_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_3_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_9_BLUE_UP  = jac_affine_0_1_BLUE_UP * jac_affine_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_0_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_1_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_8_BLUE_UP  = jac_affine_1_2_BLUE_UP * jac_affine_2_1_BLUE_UP;
         const walberla::float64 jac_affine_2_2_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_3_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_7_BLUE_UP  = jac_affine_1_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_10_BLUE_UP = jac_affine_0_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_12_BLUE_UP =
             jac_affine_0_0_BLUE_UP * tmp_coords_jac_7_BLUE_UP - jac_affine_0_0_BLUE_UP * tmp_coords_jac_8_BLUE_UP +
             jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP -
             jac_affine_1_0_BLUE_UP * tmp_coords_jac_10_BLUE_UP - jac_affine_2_0_BLUE_UP * tmp_coords_jac_11_BLUE_UP +
             jac_affine_2_0_BLUE_UP * tmp_coords_jac_9_BLUE_UP;
         const walberla::float64 tmp_coords_jac_13_BLUE_UP = 1.0 / ( tmp_coords_jac_12_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( tmp_coords_jac_7_BLUE_UP - tmp_coords_jac_8_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( jac_affine_0_2_BLUE_UP * jac_affine_2_1_BLUE_UP - tmp_coords_jac_10_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( -tmp_coords_jac_11_BLUE_UP + tmp_coords_jac_9_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_1_0_BLUE_UP * jac_affine_2_2_BLUE_UP + jac_affine_1_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_2_2_BLUE_UP - jac_affine_0_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_1_2_BLUE_UP + jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP - jac_affine_1_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_2_1_BLUE_UP + jac_affine_0_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_1_1_BLUE_UP - jac_affine_0_1_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 abs_det_jac_affine_BLUE_UP = abs( tmp_coords_jac_12_BLUE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_BLUE_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_BLUE_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_BLUE_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_BLUE_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_BLUE_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_BLUE_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_BLUE_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_BLUE_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_BLUE_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_BLUE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_0 +
                            _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_10 +
                            _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_11 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_20 +
                            _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_21 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
               }
      }
      {
         /* CellType.BLUE_DOWN */
         const walberla::float64 tmp_coords_jac_0_BLUE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_DOWN = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_6_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_7_BLUE_DOWN = macro_vertex_coord_id_0comp1 + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_8_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 tmp_coords_jac_9_BLUE_DOWN   = macro_vertex_coord_id_0comp2 + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_0_BLUE_DOWN = tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_1_BLUE_DOWN = tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_2_BLUE_DOWN = tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_0_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) +
             tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_1_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) +
             tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_2_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) +
             tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 jac_affine_0_0_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_1_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_1_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_2_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_2_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_3_0_BLUE_DOWN;
         const walberla::float64 jac_affine_1_0_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_1_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_2_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_14_BLUE_DOWN  = jac_affine_0_2_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_2_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_3_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_12_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_0_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_1_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_11_BLUE_DOWN  = jac_affine_1_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN;
         const walberla::float64 jac_affine_2_2_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_3_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_10_BLUE_DOWN  = jac_affine_1_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_13_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_15_BLUE_DOWN =
             jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_10_BLUE_DOWN - jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_11_BLUE_DOWN +
             jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN -
             jac_affine_1_0_BLUE_DOWN * tmp_coords_jac_13_BLUE_DOWN + jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_12_BLUE_DOWN -
             jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_14_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_16_BLUE_DOWN = 1.0 / ( tmp_coords_jac_15_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_10_BLUE_DOWN - tmp_coords_jac_11_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( jac_affine_0_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - tmp_coords_jac_13_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_12_BLUE_DOWN - tmp_coords_jac_14_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_1_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN + jac_affine_1_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN - jac_affine_0_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN + jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - jac_affine_1_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN + jac_affine_0_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN - jac_affine_0_1_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 abs_det_jac_affine_BLUE_DOWN = abs( tmp_coords_jac_15_BLUE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_BLUE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_10 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_11 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_20 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_21 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
               }
      }
      {
         /* CellType.GREEN_UP */
         const walberla::float64 tmp_coords_jac_0_GREEN_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP;
         const walberla::float64 p_affine_const_0_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP;
         const walberla::float64 p_affine_const_0_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP;
         const walberla::float64 p_affine_const_1_0_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_1_1_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_1_2_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_2_0_GREEN_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_2_1_GREEN_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_2_2_GREEN_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 p_affine_const_3_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_3_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_3_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 jac_affine_0_0_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_1_0_GREEN_UP;
         const walberla::float64 jac_affine_0_1_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_2_0_GREEN_UP;
         const walberla::float64 jac_affine_0_2_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_3_0_GREEN_UP;
         const walberla::float64 jac_affine_1_0_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_1_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_2_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_11_GREEN_UP  = jac_affine_0_2_GREEN_UP * jac_affine_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_2_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_3_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_9_GREEN_UP   = jac_affine_0_1_GREEN_UP * jac_affine_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_0_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_1_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_8_GREEN_UP   = jac_affine_1_2_GREEN_UP * jac_affine_2_1_GREEN_UP;
         const walberla::float64 jac_affine_2_2_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_3_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_7_GREEN_UP   = jac_affine_1_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_10_GREEN_UP  = jac_affine_0_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_12_GREEN_UP =
             jac_affine_0_0_GREEN_UP * tmp_coords_jac_7_GREEN_UP - jac_affine_0_0_GREEN_UP * tmp_coords_jac_8_GREEN_UP +
             jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP -
             jac_affine_1_0_GREEN_UP * tmp_coords_jac_10_GREEN_UP - jac_affine_2_0_GREEN_UP * tmp_coords_jac_11_GREEN_UP +
             jac_affine_2_0_GREEN_UP * tmp_coords_jac_9_GREEN_UP;
         const walberla::float64 tmp_coords_jac_13_GREEN_UP = 1.0 / ( tmp_coords_jac_12_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( tmp_coords_jac_7_GREEN_UP - tmp_coords_jac_8_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( jac_affine_0_2_GREEN_UP * jac_affine_2_1_GREEN_UP - tmp_coords_jac_10_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( -tmp_coords_jac_11_GREEN_UP + tmp_coords_jac_9_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_1_0_GREEN_UP * jac_affine_2_2_GREEN_UP + jac_affine_1_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_2_2_GREEN_UP - jac_affine_0_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_1_2_GREEN_UP + jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP - jac_affine_1_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_2_1_GREEN_UP + jac_affine_0_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_1_1_GREEN_UP - jac_affine_0_1_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 abs_det_jac_affine_GREEN_UP = abs( tmp_coords_jac_12_GREEN_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_GREEN_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_GREEN_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_GREEN_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_GREEN_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_GREEN_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_GREEN_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_GREEN_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_GREEN_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_GREEN_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_GREEN_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_0 +
                            _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_1 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_1
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_10 +
                            _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_11 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_2
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1] = elMatVec_20 +
                            _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_21 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
               }
      }
      {
         /* CellType.GREEN_DOWN */
         const walberla::float64 tmp_coords_jac_0_GREEN_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_7_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_8_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_9_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_4_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_5_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_6_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_0_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 jac_affine_0_0_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_1_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_1_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_2_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_2_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_3_0_GREEN_DOWN;
         const walberla::float64 jac_affine_1_0_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_1_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_2_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_14_GREEN_DOWN  = jac_affine_0_2_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_2_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_3_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_12_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_0_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_1_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_11_GREEN_DOWN  = jac_affine_1_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN;
         const walberla::float64 jac_affine_2_2_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_3_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_10_GREEN_DOWN  = jac_affine_1_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_13_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_15_GREEN_DOWN =
             jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_10_GREEN_DOWN - jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_11_GREEN_DOWN +
             jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN -
             jac_affine_1_0_GREEN_DOWN * tmp_coords_jac_13_GREEN_DOWN + jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_12_GREEN_DOWN -
             jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_14_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_16_GREEN_DOWN = 1.0 / ( tmp_coords_jac_15_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_10_GREEN_DOWN - tmp_coords_jac_11_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - tmp_coords_jac_13_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_12_GREEN_DOWN - tmp_coords_jac_14_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_1_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN + jac_affine_1_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN - jac_affine_0_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN + jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - jac_affine_1_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN + jac_affine_0_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN - jac_affine_0_1_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 abs_det_jac_affine_GREEN_DOWN = abs( tmp_coords_jac_15_GREEN_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 src_dof_0 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 src_dof_1 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_2 =
                      _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) ) +
                                1];
                  const walberla::float64 src_dof_3 =
                      _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                    ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                  ( 6 ) ) +
                                ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                    ( micro_edges_per_macro_edge + 3 ) ) /
                                  ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_GREEN_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMatVec_0 =
                      q_acc_0_0 * src_dof_0 + q_acc_0_1 * src_dof_1 + q_acc_0_2 * src_dof_2 + q_acc_0_3 * src_dof_3;
                  const walberla::float64 elMatVec_1 =
                      q_acc_1_0 * src_dof_0 + q_acc_1_1 * src_dof_1 + q_acc_1_2 * src_dof_2 + q_acc_1_3 * src_dof_3;
                  const walberla::float64 elMatVec_2 =
                      q_acc_2_0 * src_dof_0 + q_acc_2_1 * src_dof_1 + q_acc_2_2 * src_dof_2 + q_acc_2_3 * src_dof_3;
                  const walberla::float64 elMatVec_3 =
                      q_acc_3_0 * src_dof_0 + q_acc_3_1 * src_dof_1 + q_acc_3_2 * src_dof_2 + q_acc_3_3 * src_dof_3;
                  const walberla::float64 elMatVec_4 =
                      q_acc_4_0 * src_dof_0 + q_acc_4_1 * src_dof_1 + q_acc_4_2 * src_dof_2 + q_acc_4_3 * src_dof_3;
                  const walberla::float64 elMatVec_5 =
                      q_acc_5_0 * src_dof_0 + q_acc_5_1 * src_dof_1 + q_acc_5_2 * src_dof_2 + q_acc_5_3 * src_dof_3;
                  const walberla::float64 elMatVec_6 =
                      q_acc_6_0 * src_dof_0 + q_acc_6_1 * src_dof_1 + q_acc_6_2 * src_dof_2 + q_acc_6_3 * src_dof_3;
                  const walberla::float64 elMatVec_7 =
                      q_acc_7_0 * src_dof_0 + q_acc_7_1 * src_dof_1 + q_acc_7_2 * src_dof_2 + q_acc_7_3 * src_dof_3;
                  const walberla::float64 elMatVec_8 =
                      q_acc_8_0 * src_dof_0 + q_acc_8_1 * src_dof_1 + q_acc_8_2 * src_dof_2 + q_acc_8_3 * src_dof_3;
                  const walberla::float64 elMatVec_9 =
                      q_acc_9_0 * src_dof_0 + q_acc_9_1 * src_dof_1 + q_acc_9_2 * src_dof_2 + q_acc_9_3 * src_dof_3;
                  const walberla::float64 elMatVec_10 =
                      q_acc_10_0 * src_dof_0 + q_acc_10_1 * src_dof_1 + q_acc_10_2 * src_dof_2 + q_acc_10_3 * src_dof_3;
                  const walberla::float64 elMatVec_11 =
                      q_acc_11_0 * src_dof_0 + q_acc_11_1 * src_dof_1 + q_acc_11_2 * src_dof_2 + q_acc_11_3 * src_dof_3;
                  const walberla::float64 elMatVec_12 =
                      q_acc_12_0 * src_dof_0 + q_acc_12_1 * src_dof_1 + q_acc_12_2 * src_dof_2 + q_acc_12_3 * src_dof_3;
                  const walberla::float64 elMatVec_13 =
                      q_acc_13_0 * src_dof_0 + q_acc_13_1 * src_dof_1 + q_acc_13_2 * src_dof_2 + q_acc_13_3 * src_dof_3;
                  const walberla::float64 elMatVec_14 =
                      q_acc_14_0 * src_dof_0 + q_acc_14_1 * src_dof_1 + q_acc_14_2 * src_dof_2 + q_acc_14_3 * src_dof_3;
                  const walberla::float64 elMatVec_15 =
                      q_acc_15_0 * src_dof_0 + q_acc_15_1 * src_dof_1 + q_acc_15_2 * src_dof_2 + q_acc_15_3 * src_dof_3;
                  const walberla::float64 elMatVec_16 =
                      q_acc_16_0 * src_dof_0 + q_acc_16_1 * src_dof_1 + q_acc_16_2 * src_dof_2 + q_acc_16_3 * src_dof_3;
                  const walberla::float64 elMatVec_17 =
                      q_acc_17_0 * src_dof_0 + q_acc_17_1 * src_dof_1 + q_acc_17_2 * src_dof_2 + q_acc_17_3 * src_dof_3;
                  const walberla::float64 elMatVec_18 =
                      q_acc_18_0 * src_dof_0 + q_acc_18_1 * src_dof_1 + q_acc_18_2 * src_dof_2 + q_acc_18_3 * src_dof_3;
                  const walberla::float64 elMatVec_19 =
                      q_acc_19_0 * src_dof_0 + q_acc_19_1 * src_dof_1 + q_acc_19_2 * src_dof_2 + q_acc_19_3 * src_dof_3;
                  const walberla::float64 elMatVec_20 =
                      q_acc_20_0 * src_dof_0 + q_acc_20_1 * src_dof_1 + q_acc_20_2 * src_dof_2 + q_acc_20_3 * src_dof_3;
                  const walberla::float64 elMatVec_21 =
                      q_acc_21_0 * src_dof_0 + q_acc_21_1 * src_dof_1 + q_acc_21_2 * src_dof_2 + q_acc_21_3 * src_dof_3;
                  const walberla::float64 elMatVec_22 =
                      q_acc_22_0 * src_dof_0 + q_acc_22_1 * src_dof_1 + q_acc_22_2 * src_dof_2 + q_acc_22_3 * src_dof_3;
                  const walberla::float64 elMatVec_23 =
                      q_acc_23_0 * src_dof_0 + q_acc_23_1 * src_dof_1 + q_acc_23_2 * src_dof_2 + q_acc_23_3 * src_dof_3;
                  const walberla::float64 elMatVec_24 =
                      q_acc_24_0 * src_dof_0 + q_acc_24_1 * src_dof_1 + q_acc_24_2 * src_dof_2 + q_acc_24_3 * src_dof_3;
                  const walberla::float64 elMatVec_25 =
                      q_acc_25_0 * src_dof_0 + q_acc_25_1 * src_dof_1 + q_acc_25_2 * src_dof_2 + q_acc_25_3 * src_dof_3;
                  const walberla::float64 elMatVec_26 =
                      q_acc_26_0 * src_dof_0 + q_acc_26_1 * src_dof_1 + q_acc_26_2 * src_dof_2 + q_acc_26_3 * src_dof_3;
                  const walberla::float64 elMatVec_27 =
                      q_acc_27_0 * src_dof_0 + q_acc_27_1 * src_dof_1 + q_acc_27_2 * src_dof_2 + q_acc_27_3 * src_dof_3;
                  const walberla::float64 elMatVec_28 =
                      q_acc_28_0 * src_dof_0 + q_acc_28_1 * src_dof_1 + q_acc_28_2 * src_dof_2 + q_acc_28_3 * src_dof_3;
                  const walberla::float64 elMatVec_29 =
                      q_acc_29_0 * src_dof_0 + q_acc_29_1 * src_dof_1 + q_acc_29_2 * src_dof_2 + q_acc_29_3 * src_dof_3;
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_0 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_1 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_2 +
                      _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_3 +
                      _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_4 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_5 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_6 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_7 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_8 +
                      _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_9 +
                      _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_10 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_11 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_12 +
                      _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_13 +
                      _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_14 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_15 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_16 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_17 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_18 +
                      _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_19 +
                      _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_20 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_21 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) ) +
                                     1] =
                      elMatVec_22 +
                      _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) ) +
                                         1];
                  _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                       ( 6 ) ) +
                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                       ( 6 ) )] =
                      elMatVec_23 +
                      _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                         ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                         ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                             ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                           ( 6 ) ) +
                                         ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                             ( micro_edges_per_macro_edge + 3 ) ) /
                                           ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_24 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_25 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) +
                                   1] =
                      elMatVec_26 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) +
                                       1];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_27 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                   ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                       ( micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) ) +
                                   6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                     ( 6 ) )] =
                      elMatVec_28 +
                      _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                       ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                           ( micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) ) +
                                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                               ( micro_edges_per_macro_edge + 2 ) ) /
                                             ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                         ( 6 ) )];
                  _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                   ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                   ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                       ( micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) ) -
                                   ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                       ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                     ( 6 ) )] =
                      elMatVec_29 +
                      _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                       ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                           ( micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) ) -
                                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                         ( 6 ) )];
               }
      }
   }
}
void P1ToP2VectorGradientRotationIcosahedralShellMapOperator::
    toMatrix_P1ToP2VectorGradientRotationIcosahedralShellMapOperator_macro_3D(
        idx_t* RESTRICT                      _data_dst_edge_0,
        idx_t* RESTRICT                      _data_dst_edge_1,
        idx_t* RESTRICT                      _data_dst_edge_2,
        idx_t* RESTRICT                      _data_dst_vertex_0,
        idx_t* RESTRICT                      _data_dst_vertex_1,
        idx_t* RESTRICT                      _data_dst_vertex_2,
        walberla::float64* RESTRICT          _data_nx_rotationEdge,
        walberla::float64* RESTRICT          _data_nx_rotationVertex,
        walberla::float64* RESTRICT          _data_ny_rotationEdge,
        walberla::float64* RESTRICT          _data_ny_rotationVertex,
        walberla::float64* RESTRICT          _data_nz_rotationEdge,
        walberla::float64* RESTRICT          _data_nz_rotationVertex,
        idx_t* RESTRICT                      _data_src,
        walberla::float64                    forVertex_0,
        walberla::float64                    forVertex_1,
        walberla::float64                    forVertex_2,
        walberla::float64                    macro_vertex_coord_id_0comp0,
        walberla::float64                    macro_vertex_coord_id_0comp1,
        walberla::float64                    macro_vertex_coord_id_0comp2,
        walberla::float64                    macro_vertex_coord_id_1comp0,
        walberla::float64                    macro_vertex_coord_id_1comp1,
        walberla::float64                    macro_vertex_coord_id_1comp2,
        walberla::float64                    macro_vertex_coord_id_2comp0,
        walberla::float64                    macro_vertex_coord_id_2comp1,
        walberla::float64                    macro_vertex_coord_id_2comp2,
        walberla::float64                    macro_vertex_coord_id_3comp0,
        walberla::float64                    macro_vertex_coord_id_3comp1,
        walberla::float64                    macro_vertex_coord_id_3comp2,
        std::shared_ptr< SparseMatrixProxy > mat,
        int64_t                              micro_edges_per_macro_edge,
        walberla::float64                    micro_edges_per_macro_edge_float,
        walberla::float64                    radRayVertex,
        walberla::float64                    radRefVertex,
        walberla::float64                    rayVertex_0,
        walberla::float64                    rayVertex_1,
        walberla::float64                    rayVertex_2,
        walberla::float64                    refVertex_0,
        walberla::float64                    refVertex_1,
        walberla::float64                    refVertex_2,
        walberla::float64                    thrVertex_0,
        walberla::float64                    thrVertex_1,
        walberla::float64                    thrVertex_2 ) const
{
   {
      const walberla::float64 _data_q_w[] = {
          -0.1333333333333333, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983, 0.074999999999999983 };

      const walberla::float64 _data_q_p_0[] = { 0.25, 0.16666666666666666, 0.16666666666666666, 0.5, 0.16666666666666666 };

      const walberla::float64 _data_q_p_1[] = { 0.25, 0.16666666666666666, 0.5, 0.16666666666666666, 0.16666666666666666 };

      const walberla::float64 _data_q_p_2[] = { 0.25, 0.5, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666 };

      {
         /* CellType.WHITE_UP */
         const walberla::float64 tmp_coords_jac_0_WHITE_UP   = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 p_affine_const_0_0_WHITE_UP = macro_vertex_coord_id_0comp0;
         const walberla::float64 p_affine_const_0_1_WHITE_UP = macro_vertex_coord_id_0comp1;
         const walberla::float64 p_affine_const_0_2_WHITE_UP = macro_vertex_coord_id_0comp2;
         const walberla::float64 p_affine_const_1_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 p_affine_const_1_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 p_affine_const_1_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 p_affine_const_2_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_2_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_2_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_3_0_WHITE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 p_affine_const_3_1_WHITE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 p_affine_const_3_2_WHITE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 jac_affine_0_0_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_1_0_WHITE_UP;
         const walberla::float64 jac_affine_0_1_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_2_0_WHITE_UP;
         const walberla::float64 jac_affine_0_2_WHITE_UP   = -p_affine_const_0_0_WHITE_UP + p_affine_const_3_0_WHITE_UP;
         const walberla::float64 jac_affine_1_0_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_1_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_2_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_5_WHITE_UP = jac_affine_0_2_WHITE_UP * jac_affine_1_1_WHITE_UP;
         const walberla::float64 jac_affine_1_2_WHITE_UP   = -p_affine_const_0_1_WHITE_UP + p_affine_const_3_1_WHITE_UP;
         const walberla::float64 tmp_coords_jac_3_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_0_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_1_2_WHITE_UP;
         const walberla::float64 jac_affine_2_1_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_2_WHITE_UP = jac_affine_1_2_WHITE_UP * jac_affine_2_1_WHITE_UP;
         const walberla::float64 jac_affine_2_2_WHITE_UP   = -p_affine_const_0_2_WHITE_UP + p_affine_const_3_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_1_WHITE_UP = jac_affine_1_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_4_WHITE_UP = jac_affine_0_1_WHITE_UP * jac_affine_2_2_WHITE_UP;
         const walberla::float64 tmp_coords_jac_6_WHITE_UP =
             jac_affine_0_0_WHITE_UP * tmp_coords_jac_1_WHITE_UP - jac_affine_0_0_WHITE_UP * tmp_coords_jac_2_WHITE_UP +
             jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP -
             jac_affine_1_0_WHITE_UP * tmp_coords_jac_4_WHITE_UP + jac_affine_2_0_WHITE_UP * tmp_coords_jac_3_WHITE_UP -
             jac_affine_2_0_WHITE_UP * tmp_coords_jac_5_WHITE_UP;
         const walberla::float64 tmp_coords_jac_7_WHITE_UP = 1.0 / ( tmp_coords_jac_6_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_1_WHITE_UP - tmp_coords_jac_2_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( jac_affine_0_2_WHITE_UP * jac_affine_2_1_WHITE_UP - tmp_coords_jac_4_WHITE_UP );
         const walberla::float64 jac_affine_inv_0_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP * ( tmp_coords_jac_3_WHITE_UP - tmp_coords_jac_5_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_1_0_WHITE_UP * jac_affine_2_2_WHITE_UP + jac_affine_1_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_2_2_WHITE_UP - jac_affine_0_2_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_1_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_1_2_WHITE_UP + jac_affine_0_2_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_0_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_1_0_WHITE_UP * jac_affine_2_1_WHITE_UP - jac_affine_1_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_1_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( -jac_affine_0_0_WHITE_UP * jac_affine_2_1_WHITE_UP + jac_affine_0_1_WHITE_UP * jac_affine_2_0_WHITE_UP );
         const walberla::float64 jac_affine_inv_2_2_WHITE_UP =
             tmp_coords_jac_7_WHITE_UP *
             ( jac_affine_0_0_WHITE_UP * jac_affine_1_1_WHITE_UP - jac_affine_0_1_WHITE_UP * jac_affine_1_0_WHITE_UP );
         const walberla::float64 abs_det_jac_affine_WHITE_UP = abs( tmp_coords_jac_6_WHITE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_WHITE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_WHITE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_WHITE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_WHITE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_WHITE_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_WHITE_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_WHITE_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_WHITE_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_WHITE_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_WHITE_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_WHITE_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_WHITE_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_WHITE_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_WHITE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.WHITE_DOWN */
         const walberla::float64 tmp_coords_jac_0_WHITE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_3_WHITE_DOWN = tmp_coords_jac_1_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_4_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_5_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_WHITE_DOWN = tmp_coords_jac_4_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_7_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_8_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_9_WHITE_DOWN = tmp_coords_jac_7_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_10_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_11_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_12_WHITE_DOWN =
             tmp_coords_jac_0_WHITE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_WHITE_DOWN = tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_1_WHITE_DOWN = tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_0_2_WHITE_DOWN = tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_2_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_5_WHITE_DOWN;
         const walberla::float64 p_affine_const_1_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_8_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_0_WHITE_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_1_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_1_WHITE_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_4_WHITE_DOWN;
         const walberla::float64 p_affine_const_2_2_WHITE_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_7_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_0_WHITE_DOWN = tmp_coords_jac_10_WHITE_DOWN + tmp_coords_jac_3_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_1_WHITE_DOWN = tmp_coords_jac_11_WHITE_DOWN + tmp_coords_jac_6_WHITE_DOWN;
         const walberla::float64 p_affine_const_3_2_WHITE_DOWN = tmp_coords_jac_12_WHITE_DOWN + tmp_coords_jac_9_WHITE_DOWN;
         const walberla::float64 jac_affine_0_0_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_1_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_1_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_2_0_WHITE_DOWN;
         const walberla::float64 jac_affine_0_2_WHITE_DOWN     = -p_affine_const_0_0_WHITE_DOWN + p_affine_const_3_0_WHITE_DOWN;
         const walberla::float64 jac_affine_1_0_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_1_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_2_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_17_WHITE_DOWN  = jac_affine_0_2_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN;
         const walberla::float64 jac_affine_1_2_WHITE_DOWN     = -p_affine_const_0_1_WHITE_DOWN + p_affine_const_3_1_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_15_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_0_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_1_2_WHITE_DOWN;
         const walberla::float64 jac_affine_2_1_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_14_WHITE_DOWN  = jac_affine_1_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN;
         const walberla::float64 jac_affine_2_2_WHITE_DOWN     = -p_affine_const_0_2_WHITE_DOWN + p_affine_const_3_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_13_WHITE_DOWN  = jac_affine_1_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_16_WHITE_DOWN  = jac_affine_0_1_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_18_WHITE_DOWN =
             jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_13_WHITE_DOWN - jac_affine_0_0_WHITE_DOWN * tmp_coords_jac_14_WHITE_DOWN +
             jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN -
             jac_affine_1_0_WHITE_DOWN * tmp_coords_jac_16_WHITE_DOWN + jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_15_WHITE_DOWN -
             jac_affine_2_0_WHITE_DOWN * tmp_coords_jac_17_WHITE_DOWN;
         const walberla::float64 tmp_coords_jac_19_WHITE_DOWN = 1.0 / ( tmp_coords_jac_18_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_13_WHITE_DOWN - tmp_coords_jac_14_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_2_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - tmp_coords_jac_16_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN * ( tmp_coords_jac_15_WHITE_DOWN - tmp_coords_jac_17_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_1_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN + jac_affine_1_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_2_2_WHITE_DOWN - jac_affine_0_2_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_1_2_WHITE_DOWN + jac_affine_0_2_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_1_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN - jac_affine_1_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( -jac_affine_0_0_WHITE_DOWN * jac_affine_2_1_WHITE_DOWN + jac_affine_0_1_WHITE_DOWN * jac_affine_2_0_WHITE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_WHITE_DOWN =
             tmp_coords_jac_19_WHITE_DOWN *
             ( jac_affine_0_0_WHITE_DOWN * jac_affine_1_1_WHITE_DOWN - jac_affine_0_1_WHITE_DOWN * jac_affine_1_0_WHITE_DOWN );
         const walberla::float64 abs_det_jac_affine_WHITE_DOWN = abs( tmp_coords_jac_18_WHITE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 2; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_4 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nx_rotation_dof_8 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_4 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 ny_rotation_dof_8 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_4 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) +
                                            1];
                  const walberla::float64 nz_rotation_dof_8 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_WHITE_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_WHITE_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_WHITE_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_WHITE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.BLUE_UP */
         const walberla::float64 tmp_coords_jac_0_BLUE_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_6_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_0_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_0_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_0_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 p_affine_const_1_0_BLUE_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_1_1_BLUE_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_1_2_BLUE_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_2_0_BLUE_UP = tmp_coords_jac_1_BLUE_UP + tmp_coords_jac_4_BLUE_UP;
         const walberla::float64 p_affine_const_2_1_BLUE_UP = tmp_coords_jac_2_BLUE_UP + tmp_coords_jac_5_BLUE_UP;
         const walberla::float64 p_affine_const_2_2_BLUE_UP = tmp_coords_jac_3_BLUE_UP + tmp_coords_jac_6_BLUE_UP;
         const walberla::float64 p_affine_const_3_0_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) +
             tmp_coords_jac_1_BLUE_UP;
         const walberla::float64 p_affine_const_3_1_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) +
             tmp_coords_jac_2_BLUE_UP;
         const walberla::float64 p_affine_const_3_2_BLUE_UP =
             tmp_coords_jac_0_BLUE_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) +
             tmp_coords_jac_3_BLUE_UP;
         const walberla::float64 jac_affine_0_0_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_1_0_BLUE_UP;
         const walberla::float64 jac_affine_0_1_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_2_0_BLUE_UP;
         const walberla::float64 jac_affine_0_2_BLUE_UP    = -p_affine_const_0_0_BLUE_UP + p_affine_const_3_0_BLUE_UP;
         const walberla::float64 jac_affine_1_0_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_1_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_2_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_11_BLUE_UP = jac_affine_0_2_BLUE_UP * jac_affine_1_1_BLUE_UP;
         const walberla::float64 jac_affine_1_2_BLUE_UP    = -p_affine_const_0_1_BLUE_UP + p_affine_const_3_1_BLUE_UP;
         const walberla::float64 tmp_coords_jac_9_BLUE_UP  = jac_affine_0_1_BLUE_UP * jac_affine_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_0_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_1_2_BLUE_UP;
         const walberla::float64 jac_affine_2_1_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_8_BLUE_UP  = jac_affine_1_2_BLUE_UP * jac_affine_2_1_BLUE_UP;
         const walberla::float64 jac_affine_2_2_BLUE_UP    = -p_affine_const_0_2_BLUE_UP + p_affine_const_3_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_7_BLUE_UP  = jac_affine_1_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_10_BLUE_UP = jac_affine_0_1_BLUE_UP * jac_affine_2_2_BLUE_UP;
         const walberla::float64 tmp_coords_jac_12_BLUE_UP =
             jac_affine_0_0_BLUE_UP * tmp_coords_jac_7_BLUE_UP - jac_affine_0_0_BLUE_UP * tmp_coords_jac_8_BLUE_UP +
             jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP -
             jac_affine_1_0_BLUE_UP * tmp_coords_jac_10_BLUE_UP - jac_affine_2_0_BLUE_UP * tmp_coords_jac_11_BLUE_UP +
             jac_affine_2_0_BLUE_UP * tmp_coords_jac_9_BLUE_UP;
         const walberla::float64 tmp_coords_jac_13_BLUE_UP = 1.0 / ( tmp_coords_jac_12_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( tmp_coords_jac_7_BLUE_UP - tmp_coords_jac_8_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( jac_affine_0_2_BLUE_UP * jac_affine_2_1_BLUE_UP - tmp_coords_jac_10_BLUE_UP );
         const walberla::float64 jac_affine_inv_0_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP * ( -tmp_coords_jac_11_BLUE_UP + tmp_coords_jac_9_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_1_0_BLUE_UP * jac_affine_2_2_BLUE_UP + jac_affine_1_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_2_2_BLUE_UP - jac_affine_0_2_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_1_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_1_2_BLUE_UP + jac_affine_0_2_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_0_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_1_0_BLUE_UP * jac_affine_2_1_BLUE_UP - jac_affine_1_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_1_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( -jac_affine_0_0_BLUE_UP * jac_affine_2_1_BLUE_UP + jac_affine_0_1_BLUE_UP * jac_affine_2_0_BLUE_UP );
         const walberla::float64 jac_affine_inv_2_2_BLUE_UP =
             tmp_coords_jac_13_BLUE_UP *
             ( jac_affine_0_0_BLUE_UP * jac_affine_1_1_BLUE_UP - jac_affine_0_1_BLUE_UP * jac_affine_1_0_BLUE_UP );
         const walberla::float64 abs_det_jac_affine_BLUE_UP = abs( tmp_coords_jac_12_BLUE_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_BLUE_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_BLUE_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_BLUE_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_BLUE_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_BLUE_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_BLUE_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_BLUE_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_BLUE_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_BLUE_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_BLUE_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_BLUE_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_BLUE_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_BLUE_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_BLUE_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.BLUE_DOWN */
         const walberla::float64 tmp_coords_jac_0_BLUE_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_BLUE_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_BLUE_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_BLUE_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_BLUE_DOWN = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_6_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_7_BLUE_DOWN = macro_vertex_coord_id_0comp1 + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_8_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 tmp_coords_jac_9_BLUE_DOWN   = macro_vertex_coord_id_0comp2 + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN;
         const walberla::float64 p_affine_const_0_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_0_BLUE_DOWN = tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_1_BLUE_DOWN = tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_1_2_BLUE_DOWN = tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_0_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) +
             tmp_coords_jac_5_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_1_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) +
             tmp_coords_jac_7_BLUE_DOWN;
         const walberla::float64 p_affine_const_2_2_BLUE_DOWN =
             tmp_coords_jac_0_BLUE_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) +
             tmp_coords_jac_9_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_0_BLUE_DOWN = tmp_coords_jac_1_BLUE_DOWN + tmp_coords_jac_4_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_1_BLUE_DOWN = tmp_coords_jac_2_BLUE_DOWN + tmp_coords_jac_6_BLUE_DOWN;
         const walberla::float64 p_affine_const_3_2_BLUE_DOWN = tmp_coords_jac_3_BLUE_DOWN + tmp_coords_jac_8_BLUE_DOWN;
         const walberla::float64 jac_affine_0_0_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_1_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_1_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_2_0_BLUE_DOWN;
         const walberla::float64 jac_affine_0_2_BLUE_DOWN     = -p_affine_const_0_0_BLUE_DOWN + p_affine_const_3_0_BLUE_DOWN;
         const walberla::float64 jac_affine_1_0_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_1_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_2_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_14_BLUE_DOWN  = jac_affine_0_2_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN;
         const walberla::float64 jac_affine_1_2_BLUE_DOWN     = -p_affine_const_0_1_BLUE_DOWN + p_affine_const_3_1_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_12_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_0_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_1_2_BLUE_DOWN;
         const walberla::float64 jac_affine_2_1_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_11_BLUE_DOWN  = jac_affine_1_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN;
         const walberla::float64 jac_affine_2_2_BLUE_DOWN     = -p_affine_const_0_2_BLUE_DOWN + p_affine_const_3_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_10_BLUE_DOWN  = jac_affine_1_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_13_BLUE_DOWN  = jac_affine_0_1_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_15_BLUE_DOWN =
             jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_10_BLUE_DOWN - jac_affine_0_0_BLUE_DOWN * tmp_coords_jac_11_BLUE_DOWN +
             jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN -
             jac_affine_1_0_BLUE_DOWN * tmp_coords_jac_13_BLUE_DOWN + jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_12_BLUE_DOWN -
             jac_affine_2_0_BLUE_DOWN * tmp_coords_jac_14_BLUE_DOWN;
         const walberla::float64 tmp_coords_jac_16_BLUE_DOWN = 1.0 / ( tmp_coords_jac_15_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_10_BLUE_DOWN - tmp_coords_jac_11_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( jac_affine_0_2_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - tmp_coords_jac_13_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_0_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN * ( tmp_coords_jac_12_BLUE_DOWN - tmp_coords_jac_14_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_1_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN + jac_affine_1_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_2_2_BLUE_DOWN - jac_affine_0_2_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_1_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_1_2_BLUE_DOWN + jac_affine_0_2_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_0_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_1_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN - jac_affine_1_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_1_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( -jac_affine_0_0_BLUE_DOWN * jac_affine_2_1_BLUE_DOWN + jac_affine_0_1_BLUE_DOWN * jac_affine_2_0_BLUE_DOWN );
         const walberla::float64 jac_affine_inv_2_2_BLUE_DOWN =
             tmp_coords_jac_16_BLUE_DOWN *
             ( jac_affine_0_0_BLUE_DOWN * jac_affine_1_1_BLUE_DOWN - jac_affine_0_1_BLUE_DOWN * jac_affine_1_0_BLUE_DOWN );
         const walberla::float64 abs_det_jac_affine_BLUE_DOWN = abs( tmp_coords_jac_15_BLUE_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_BLUE_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_BLUE_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_BLUE_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_BLUE_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      2 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.GREEN_UP */
         const walberla::float64 tmp_coords_jac_0_GREEN_UP = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_UP =
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP;
         const walberla::float64 p_affine_const_0_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP;
         const walberla::float64 p_affine_const_0_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP;
         const walberla::float64 p_affine_const_1_0_GREEN_UP =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 p_affine_const_1_1_GREEN_UP =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 p_affine_const_1_2_GREEN_UP =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_UP * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 p_affine_const_2_0_GREEN_UP = macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_2_1_GREEN_UP = macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_2_2_GREEN_UP = macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 p_affine_const_3_0_GREEN_UP = tmp_coords_jac_1_GREEN_UP + tmp_coords_jac_4_GREEN_UP;
         const walberla::float64 p_affine_const_3_1_GREEN_UP = tmp_coords_jac_2_GREEN_UP + tmp_coords_jac_5_GREEN_UP;
         const walberla::float64 p_affine_const_3_2_GREEN_UP = tmp_coords_jac_3_GREEN_UP + tmp_coords_jac_6_GREEN_UP;
         const walberla::float64 jac_affine_0_0_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_1_0_GREEN_UP;
         const walberla::float64 jac_affine_0_1_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_2_0_GREEN_UP;
         const walberla::float64 jac_affine_0_2_GREEN_UP     = -p_affine_const_0_0_GREEN_UP + p_affine_const_3_0_GREEN_UP;
         const walberla::float64 jac_affine_1_0_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_1_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_2_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_11_GREEN_UP  = jac_affine_0_2_GREEN_UP * jac_affine_1_1_GREEN_UP;
         const walberla::float64 jac_affine_1_2_GREEN_UP     = -p_affine_const_0_1_GREEN_UP + p_affine_const_3_1_GREEN_UP;
         const walberla::float64 tmp_coords_jac_9_GREEN_UP   = jac_affine_0_1_GREEN_UP * jac_affine_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_0_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_1_2_GREEN_UP;
         const walberla::float64 jac_affine_2_1_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_8_GREEN_UP   = jac_affine_1_2_GREEN_UP * jac_affine_2_1_GREEN_UP;
         const walberla::float64 jac_affine_2_2_GREEN_UP     = -p_affine_const_0_2_GREEN_UP + p_affine_const_3_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_7_GREEN_UP   = jac_affine_1_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_10_GREEN_UP  = jac_affine_0_1_GREEN_UP * jac_affine_2_2_GREEN_UP;
         const walberla::float64 tmp_coords_jac_12_GREEN_UP =
             jac_affine_0_0_GREEN_UP * tmp_coords_jac_7_GREEN_UP - jac_affine_0_0_GREEN_UP * tmp_coords_jac_8_GREEN_UP +
             jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP -
             jac_affine_1_0_GREEN_UP * tmp_coords_jac_10_GREEN_UP - jac_affine_2_0_GREEN_UP * tmp_coords_jac_11_GREEN_UP +
             jac_affine_2_0_GREEN_UP * tmp_coords_jac_9_GREEN_UP;
         const walberla::float64 tmp_coords_jac_13_GREEN_UP = 1.0 / ( tmp_coords_jac_12_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( tmp_coords_jac_7_GREEN_UP - tmp_coords_jac_8_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( jac_affine_0_2_GREEN_UP * jac_affine_2_1_GREEN_UP - tmp_coords_jac_10_GREEN_UP );
         const walberla::float64 jac_affine_inv_0_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP * ( -tmp_coords_jac_11_GREEN_UP + tmp_coords_jac_9_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_1_0_GREEN_UP * jac_affine_2_2_GREEN_UP + jac_affine_1_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_2_2_GREEN_UP - jac_affine_0_2_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_1_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_1_2_GREEN_UP + jac_affine_0_2_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_0_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_1_0_GREEN_UP * jac_affine_2_1_GREEN_UP - jac_affine_1_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_1_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( -jac_affine_0_0_GREEN_UP * jac_affine_2_1_GREEN_UP + jac_affine_0_1_GREEN_UP * jac_affine_2_0_GREEN_UP );
         const walberla::float64 jac_affine_inv_2_2_GREEN_UP =
             tmp_coords_jac_13_GREEN_UP *
             ( jac_affine_0_0_GREEN_UP * jac_affine_1_1_GREEN_UP - jac_affine_0_1_GREEN_UP * jac_affine_1_0_GREEN_UP );
         const walberla::float64 abs_det_jac_affine_GREEN_UP = abs( tmp_coords_jac_12_GREEN_UP );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_3 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_7 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_3 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_7 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_3 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                           ( micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_7 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_GREEN_UP * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_GREEN_UP * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_GREEN_UP * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_GREEN_UP * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_GREEN_UP * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_GREEN_UP * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_GREEN_UP * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_GREEN_UP * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_GREEN_UP * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_GREEN_UP * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_GREEN_UP * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_GREEN_UP * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_GREEN_UP * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_GREEN_UP * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
      {
         /* CellType.GREEN_DOWN */
         const walberla::float64 tmp_coords_jac_0_GREEN_DOWN = 1.0 / ( micro_edges_per_macro_edge_float ) * 1.0;
         const walberla::float64 tmp_coords_jac_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 );
         const walberla::float64 tmp_coords_jac_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 );
         const walberla::float64 tmp_coords_jac_3_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 +
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 );
         const walberla::float64 tmp_coords_jac_4_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 );
         const walberla::float64 tmp_coords_jac_5_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 );
         const walberla::float64 tmp_coords_jac_6_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 );
         const walberla::float64 tmp_coords_jac_7_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 );
         const walberla::float64 tmp_coords_jac_8_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 );
         const walberla::float64 tmp_coords_jac_9_GREEN_DOWN =
             tmp_coords_jac_0_GREEN_DOWN * ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 );
         const walberla::float64 p_affine_const_0_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN;
         const walberla::float64 p_affine_const_0_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_4_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_5_GREEN_DOWN;
         const walberla::float64 p_affine_const_1_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_6_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_0_GREEN_DOWN =
             macro_vertex_coord_id_0comp0 + tmp_coords_jac_4_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_1_GREEN_DOWN =
             macro_vertex_coord_id_0comp1 + tmp_coords_jac_5_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_2_2_GREEN_DOWN =
             macro_vertex_coord_id_0comp2 + tmp_coords_jac_6_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_0_GREEN_DOWN = tmp_coords_jac_1_GREEN_DOWN + tmp_coords_jac_7_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_1_GREEN_DOWN = tmp_coords_jac_2_GREEN_DOWN + tmp_coords_jac_8_GREEN_DOWN;
         const walberla::float64 p_affine_const_3_2_GREEN_DOWN = tmp_coords_jac_3_GREEN_DOWN + tmp_coords_jac_9_GREEN_DOWN;
         const walberla::float64 jac_affine_0_0_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_1_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_1_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_2_0_GREEN_DOWN;
         const walberla::float64 jac_affine_0_2_GREEN_DOWN     = -p_affine_const_0_0_GREEN_DOWN + p_affine_const_3_0_GREEN_DOWN;
         const walberla::float64 jac_affine_1_0_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_1_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_2_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_14_GREEN_DOWN  = jac_affine_0_2_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN;
         const walberla::float64 jac_affine_1_2_GREEN_DOWN     = -p_affine_const_0_1_GREEN_DOWN + p_affine_const_3_1_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_12_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_0_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_1_2_GREEN_DOWN;
         const walberla::float64 jac_affine_2_1_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_11_GREEN_DOWN  = jac_affine_1_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN;
         const walberla::float64 jac_affine_2_2_GREEN_DOWN     = -p_affine_const_0_2_GREEN_DOWN + p_affine_const_3_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_10_GREEN_DOWN  = jac_affine_1_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_13_GREEN_DOWN  = jac_affine_0_1_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_15_GREEN_DOWN =
             jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_10_GREEN_DOWN - jac_affine_0_0_GREEN_DOWN * tmp_coords_jac_11_GREEN_DOWN +
             jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN -
             jac_affine_1_0_GREEN_DOWN * tmp_coords_jac_13_GREEN_DOWN + jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_12_GREEN_DOWN -
             jac_affine_2_0_GREEN_DOWN * tmp_coords_jac_14_GREEN_DOWN;
         const walberla::float64 tmp_coords_jac_16_GREEN_DOWN = 1.0 / ( tmp_coords_jac_15_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_10_GREEN_DOWN - tmp_coords_jac_11_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_2_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - tmp_coords_jac_13_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_0_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN * ( tmp_coords_jac_12_GREEN_DOWN - tmp_coords_jac_14_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_1_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN + jac_affine_1_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_2_2_GREEN_DOWN - jac_affine_0_2_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_1_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_1_2_GREEN_DOWN + jac_affine_0_2_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_0_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_1_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN - jac_affine_1_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_1_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( -jac_affine_0_0_GREEN_DOWN * jac_affine_2_1_GREEN_DOWN + jac_affine_0_1_GREEN_DOWN * jac_affine_2_0_GREEN_DOWN );
         const walberla::float64 jac_affine_inv_2_2_GREEN_DOWN =
             tmp_coords_jac_16_GREEN_DOWN *
             ( jac_affine_0_0_GREEN_DOWN * jac_affine_1_1_GREEN_DOWN - jac_affine_0_1_GREEN_DOWN * jac_affine_1_0_GREEN_DOWN );
         const walberla::float64 abs_det_jac_affine_GREEN_DOWN = abs( tmp_coords_jac_15_GREEN_DOWN );
         for ( int64_t ctr_2 = 0; ctr_2 < micro_edges_per_macro_edge; ctr_2 += 1 )
            for ( int64_t ctr_1 = 0; ctr_1 < -ctr_2 + micro_edges_per_macro_edge; ctr_1 += 1 )
               for ( int64_t ctr_0 = 0; ctr_0 < -ctr_1 - ctr_2 + micro_edges_per_macro_edge - 1; ctr_0 += 1 )
               {
                  const walberla::float64 p_affine_0_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_0_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_1_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 ) );
                  const walberla::float64 p_affine_2_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_2_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_0 = macro_vertex_coord_id_0comp0 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_1comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_2comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp0 + macro_vertex_coord_id_3comp0 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_1 = macro_vertex_coord_id_0comp1 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_1comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_2comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp1 + macro_vertex_coord_id_3comp1 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 p_affine_3_2 = macro_vertex_coord_id_0comp2 +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_1comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_0 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_2comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_1 + 1 ) ) +
                                                         1.0 / ( micro_edges_per_macro_edge_float ) *
                                                             ( -macro_vertex_coord_id_0comp2 + macro_vertex_coord_id_3comp2 ) *
                                                             1.0 * ( ( walberla::float64 )( ctr_2 + 1 ) );
                  const walberla::float64 nx_rotation_dof_0 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_1 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nx_rotation_dof_2 = _data_nx_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_3 =
                      _data_nx_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_4 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_5 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_6 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nx_rotation_dof_7 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_8 = _data_nx_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nx_rotation_dof_9 =
                      _data_nx_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_0 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_1 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 ny_rotation_dof_2 = _data_ny_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_3 =
                      _data_ny_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_4 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_5 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_6 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 ny_rotation_dof_7 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_8 = _data_ny_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 ny_rotation_dof_9 =
                      _data_ny_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_0 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_1 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) ) +
                                              1];
                  const walberla::float64 nz_rotation_dof_2 = _data_nz_rotationVertex
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                           ( micro_edges_per_macro_edge + 3 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_3 =
                      _data_nz_rotationVertex[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                              ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                              ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                  ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                ( 6 ) ) +
                                              ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                  ( micro_edges_per_macro_edge + 3 ) ) /
                                                ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_4 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_5 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_6 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                         ( 6 ) ) +
                       1];
                  const walberla::float64 nz_rotation_dof_7 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                    ( micro_edges_per_macro_edge + 2 ) ) /
                                                  ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_8 = _data_nz_rotationEdge
                      [ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) - ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                       ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                           ( micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) ) +
                       6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                               ( micro_edges_per_macro_edge + 2 ) ) /
                             ( 6 ) ) -
                       ( ( ( -ctr_2 + micro_edges_per_macro_edge ) * ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                           ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                         ( 6 ) )];
                  const walberla::float64 nz_rotation_dof_9 =
                      _data_nz_rotationEdge[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                            ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                            ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                ( micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) ) -
                                            ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                              ( 6 ) )];
                  walberla::float64 q_acc_0_0  = 0.0;
                  walberla::float64 q_acc_0_1  = 0.0;
                  walberla::float64 q_acc_0_2  = 0.0;
                  walberla::float64 q_acc_0_3  = 0.0;
                  walberla::float64 q_acc_1_0  = 0.0;
                  walberla::float64 q_acc_1_1  = 0.0;
                  walberla::float64 q_acc_1_2  = 0.0;
                  walberla::float64 q_acc_1_3  = 0.0;
                  walberla::float64 q_acc_2_0  = 0.0;
                  walberla::float64 q_acc_2_1  = 0.0;
                  walberla::float64 q_acc_2_2  = 0.0;
                  walberla::float64 q_acc_2_3  = 0.0;
                  walberla::float64 q_acc_3_0  = 0.0;
                  walberla::float64 q_acc_3_1  = 0.0;
                  walberla::float64 q_acc_3_2  = 0.0;
                  walberla::float64 q_acc_3_3  = 0.0;
                  walberla::float64 q_acc_4_0  = 0.0;
                  walberla::float64 q_acc_4_1  = 0.0;
                  walberla::float64 q_acc_4_2  = 0.0;
                  walberla::float64 q_acc_4_3  = 0.0;
                  walberla::float64 q_acc_5_0  = 0.0;
                  walberla::float64 q_acc_5_1  = 0.0;
                  walberla::float64 q_acc_5_2  = 0.0;
                  walberla::float64 q_acc_5_3  = 0.0;
                  walberla::float64 q_acc_6_0  = 0.0;
                  walberla::float64 q_acc_6_1  = 0.0;
                  walberla::float64 q_acc_6_2  = 0.0;
                  walberla::float64 q_acc_6_3  = 0.0;
                  walberla::float64 q_acc_7_0  = 0.0;
                  walberla::float64 q_acc_7_1  = 0.0;
                  walberla::float64 q_acc_7_2  = 0.0;
                  walberla::float64 q_acc_7_3  = 0.0;
                  walberla::float64 q_acc_8_0  = 0.0;
                  walberla::float64 q_acc_8_1  = 0.0;
                  walberla::float64 q_acc_8_2  = 0.0;
                  walberla::float64 q_acc_8_3  = 0.0;
                  walberla::float64 q_acc_9_0  = 0.0;
                  walberla::float64 q_acc_9_1  = 0.0;
                  walberla::float64 q_acc_9_2  = 0.0;
                  walberla::float64 q_acc_9_3  = 0.0;
                  walberla::float64 q_acc_10_0 = 0.0;
                  walberla::float64 q_acc_10_1 = 0.0;
                  walberla::float64 q_acc_10_2 = 0.0;
                  walberla::float64 q_acc_10_3 = 0.0;
                  walberla::float64 q_acc_11_0 = 0.0;
                  walberla::float64 q_acc_11_1 = 0.0;
                  walberla::float64 q_acc_11_2 = 0.0;
                  walberla::float64 q_acc_11_3 = 0.0;
                  walberla::float64 q_acc_12_0 = 0.0;
                  walberla::float64 q_acc_12_1 = 0.0;
                  walberla::float64 q_acc_12_2 = 0.0;
                  walberla::float64 q_acc_12_3 = 0.0;
                  walberla::float64 q_acc_13_0 = 0.0;
                  walberla::float64 q_acc_13_1 = 0.0;
                  walberla::float64 q_acc_13_2 = 0.0;
                  walberla::float64 q_acc_13_3 = 0.0;
                  walberla::float64 q_acc_14_0 = 0.0;
                  walberla::float64 q_acc_14_1 = 0.0;
                  walberla::float64 q_acc_14_2 = 0.0;
                  walberla::float64 q_acc_14_3 = 0.0;
                  walberla::float64 q_acc_15_0 = 0.0;
                  walberla::float64 q_acc_15_1 = 0.0;
                  walberla::float64 q_acc_15_2 = 0.0;
                  walberla::float64 q_acc_15_3 = 0.0;
                  walberla::float64 q_acc_16_0 = 0.0;
                  walberla::float64 q_acc_16_1 = 0.0;
                  walberla::float64 q_acc_16_2 = 0.0;
                  walberla::float64 q_acc_16_3 = 0.0;
                  walberla::float64 q_acc_17_0 = 0.0;
                  walberla::float64 q_acc_17_1 = 0.0;
                  walberla::float64 q_acc_17_2 = 0.0;
                  walberla::float64 q_acc_17_3 = 0.0;
                  walberla::float64 q_acc_18_0 = 0.0;
                  walberla::float64 q_acc_18_1 = 0.0;
                  walberla::float64 q_acc_18_2 = 0.0;
                  walberla::float64 q_acc_18_3 = 0.0;
                  walberla::float64 q_acc_19_0 = 0.0;
                  walberla::float64 q_acc_19_1 = 0.0;
                  walberla::float64 q_acc_19_2 = 0.0;
                  walberla::float64 q_acc_19_3 = 0.0;
                  walberla::float64 q_acc_20_0 = 0.0;
                  walberla::float64 q_acc_20_1 = 0.0;
                  walberla::float64 q_acc_20_2 = 0.0;
                  walberla::float64 q_acc_20_3 = 0.0;
                  walberla::float64 q_acc_21_0 = 0.0;
                  walberla::float64 q_acc_21_1 = 0.0;
                  walberla::float64 q_acc_21_2 = 0.0;
                  walberla::float64 q_acc_21_3 = 0.0;
                  walberla::float64 q_acc_22_0 = 0.0;
                  walberla::float64 q_acc_22_1 = 0.0;
                  walberla::float64 q_acc_22_2 = 0.0;
                  walberla::float64 q_acc_22_3 = 0.0;
                  walberla::float64 q_acc_23_0 = 0.0;
                  walberla::float64 q_acc_23_1 = 0.0;
                  walberla::float64 q_acc_23_2 = 0.0;
                  walberla::float64 q_acc_23_3 = 0.0;
                  walberla::float64 q_acc_24_0 = 0.0;
                  walberla::float64 q_acc_24_1 = 0.0;
                  walberla::float64 q_acc_24_2 = 0.0;
                  walberla::float64 q_acc_24_3 = 0.0;
                  walberla::float64 q_acc_25_0 = 0.0;
                  walberla::float64 q_acc_25_1 = 0.0;
                  walberla::float64 q_acc_25_2 = 0.0;
                  walberla::float64 q_acc_25_3 = 0.0;
                  walberla::float64 q_acc_26_0 = 0.0;
                  walberla::float64 q_acc_26_1 = 0.0;
                  walberla::float64 q_acc_26_2 = 0.0;
                  walberla::float64 q_acc_26_3 = 0.0;
                  walberla::float64 q_acc_27_0 = 0.0;
                  walberla::float64 q_acc_27_1 = 0.0;
                  walberla::float64 q_acc_27_2 = 0.0;
                  walberla::float64 q_acc_27_3 = 0.0;
                  walberla::float64 q_acc_28_0 = 0.0;
                  walberla::float64 q_acc_28_1 = 0.0;
                  walberla::float64 q_acc_28_2 = 0.0;
                  walberla::float64 q_acc_28_3 = 0.0;
                  walberla::float64 q_acc_29_0 = 0.0;
                  walberla::float64 q_acc_29_1 = 0.0;
                  walberla::float64 q_acc_29_2 = 0.0;
                  walberla::float64 q_acc_29_3 = 0.0;
                  for ( int64_t q = 0; q < 5; q += 1 )
                  {
                     const walberla::float64 tmp_qloop_0  = rayVertex_1 - refVertex_1;
                     const walberla::float64 tmp_qloop_1  = -rayVertex_0;
                     const walberla::float64 tmp_qloop_2  = -forVertex_0 - tmp_qloop_1;
                     const walberla::float64 tmp_qloop_3  = rayVertex_2 - thrVertex_2;
                     const walberla::float64 tmp_qloop_4  = tmp_qloop_2 * tmp_qloop_3;
                     const walberla::float64 tmp_qloop_5  = rayVertex_2 - refVertex_2;
                     const walberla::float64 tmp_qloop_6  = rayVertex_1 - thrVertex_1;
                     const walberla::float64 tmp_qloop_7  = tmp_qloop_2 * tmp_qloop_6;
                     const walberla::float64 tmp_qloop_8  = -rayVertex_1;
                     const walberla::float64 tmp_qloop_9  = -forVertex_1 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_10 = rayVertex_0 - thrVertex_0;
                     const walberla::float64 tmp_qloop_11 = rayVertex_0 - refVertex_0;
                     const walberla::float64 tmp_qloop_12 = -rayVertex_2;
                     const walberla::float64 tmp_qloop_13 = -forVertex_2 - tmp_qloop_12;
                     const walberla::float64 tmp_qloop_14 = tmp_qloop_3 * tmp_qloop_9;
                     const walberla::float64 tmp_qloop_15 = tmp_qloop_10 * tmp_qloop_13;
                     const walberla::float64 tmp_qloop_16 =
                         -tmp_qloop_0 * tmp_qloop_15 + tmp_qloop_0 * tmp_qloop_4 + tmp_qloop_10 * tmp_qloop_5 * tmp_qloop_9 +
                         tmp_qloop_11 * tmp_qloop_13 * tmp_qloop_6 - tmp_qloop_11 * tmp_qloop_14 - tmp_qloop_5 * tmp_qloop_7;
                     const walberla::float64 tmp_qloop_17 = 1.0 / ( tmp_qloop_16 );
                     const walberla::float64 tmp_qloop_18 = p_affine_0_0 + ( -p_affine_0_0 + p_affine_1_0 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_0 + p_affine_2_0 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_0 + p_affine_3_0 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_19 = ( tmp_qloop_18 * tmp_qloop_18 );
                     const walberla::float64 tmp_qloop_20 = radRayVertex * tmp_qloop_16;
                     const walberla::float64 tmp_qloop_21 = radRayVertex - radRefVertex;
                     const walberla::float64 tmp_qloop_22 = p_affine_0_2 + ( -p_affine_0_2 + p_affine_1_2 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_2 + p_affine_2_2 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_2 + p_affine_3_2 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_23 = -tmp_qloop_12 - tmp_qloop_22;
                     const walberla::float64 tmp_qloop_24 = -tmp_qloop_1 - tmp_qloop_18;
                     const walberla::float64 tmp_qloop_25 = p_affine_0_1 + ( -p_affine_0_1 + p_affine_1_1 ) * _data_q_p_0[q] +
                                                            ( -p_affine_0_1 + p_affine_2_1 ) * _data_q_p_1[q] +
                                                            ( -p_affine_0_1 + p_affine_3_1 ) * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_26 = -tmp_qloop_25 - tmp_qloop_8;
                     const walberla::float64 tmp_qloop_27 =
                         tmp_qloop_21 * ( tmp_qloop_10 * tmp_qloop_23 * tmp_qloop_9 + tmp_qloop_13 * tmp_qloop_24 * tmp_qloop_6 -
                                          tmp_qloop_14 * tmp_qloop_24 - tmp_qloop_15 * tmp_qloop_26 +
                                          tmp_qloop_2 * tmp_qloop_26 * tmp_qloop_3 - tmp_qloop_23 * tmp_qloop_7 );
                     const walberla::float64 tmp_qloop_28 = tmp_qloop_20 - tmp_qloop_27;
                     const walberla::float64 tmp_qloop_29 = ( tmp_qloop_25 * tmp_qloop_25 );
                     const walberla::float64 tmp_qloop_30 = ( tmp_qloop_22 * tmp_qloop_22 );
                     const walberla::float64 tmp_qloop_31 = tmp_qloop_19 + tmp_qloop_29 + tmp_qloop_30;
                     const walberla::float64 tmp_qloop_32 = -tmp_qloop_13 * tmp_qloop_6 + tmp_qloop_14;
                     const walberla::float64 tmp_qloop_33 = -tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_34 = tmp_qloop_18 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_35 = tmp_qloop_28 + tmp_qloop_34;
                     const walberla::float64 tmp_qloop_36 =
                         tmp_qloop_17 * ( -tmp_qloop_19 * tmp_qloop_28 + tmp_qloop_31 * tmp_qloop_35 );
                     const walberla::float64 tmp_qloop_37 = pow( tmp_qloop_31, -1.5000000000000000 );
                     const walberla::float64 tmp_qloop_38 = tmp_qloop_37 * 1.0;
                     const walberla::float64 tmp_qloop_39 = tmp_qloop_10 * tmp_qloop_13 - tmp_qloop_4;
                     const walberla::float64 tmp_qloop_40 = tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_41 = tmp_qloop_31 * tmp_qloop_40;
                     const walberla::float64 tmp_qloop_42 = -tmp_qloop_25 * tmp_qloop_28 - tmp_qloop_41;
                     const walberla::float64 tmp_qloop_43 = tmp_qloop_17 * tmp_qloop_38;
                     const walberla::float64 tmp_qloop_44 = tmp_qloop_42 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_45 = -tmp_qloop_10 * tmp_qloop_9 + tmp_qloop_7;
                     const walberla::float64 tmp_qloop_46 = -tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_47 = -tmp_qloop_28;
                     const walberla::float64 tmp_qloop_48 = tmp_qloop_22 * tmp_qloop_47;
                     const walberla::float64 tmp_qloop_49 = tmp_qloop_31 * tmp_qloop_46 + tmp_qloop_48;
                     const walberla::float64 tmp_qloop_50 = tmp_qloop_43 * tmp_qloop_49;
                     const walberla::float64 tmp_qloop_51 = tmp_qloop_18 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_33;
                     const walberla::float64 tmp_qloop_52 = tmp_qloop_43 * tmp_qloop_51;
                     const walberla::float64 tmp_qloop_53 = -tmp_qloop_21 * tmp_qloop_39;
                     const walberla::float64 tmp_qloop_54 = tmp_qloop_25 * tmp_qloop_53 + tmp_qloop_28;
                     const walberla::float64 tmp_qloop_55 = tmp_qloop_29 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_54;
                     const walberla::float64 tmp_qloop_56 = tmp_qloop_22 * tmp_qloop_46;
                     const walberla::float64 tmp_qloop_57 = tmp_qloop_28 + tmp_qloop_56;
                     const walberla::float64 tmp_qloop_58 = tmp_qloop_30 * tmp_qloop_47 + tmp_qloop_31 * tmp_qloop_57;
                     const walberla::float64 tmp_qloop_66 = pow( tmp_qloop_31, -2.5000000000000000 ) * 3.0;
                     const walberla::float64 tmp_qloop_67 = tmp_qloop_36 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_68 = tmp_qloop_21 * tmp_qloop_32;
                     const walberla::float64 tmp_qloop_69 = tmp_qloop_18 * 2.0;
                     const walberla::float64 tmp_qloop_70 = -tmp_qloop_41;
                     const walberla::float64 tmp_qloop_71 = tmp_qloop_35 * 2.0;
                     const walberla::float64 tmp_qloop_72 = tmp_qloop_21 * tmp_qloop_45;
                     const walberla::float64 tmp_qloop_73 = -tmp_qloop_31 * tmp_qloop_72;
                     const walberla::float64 tmp_qloop_74 = -tmp_qloop_20 + tmp_qloop_27;
                     const walberla::float64 tmp_qloop_75 = tmp_qloop_18 * tmp_qloop_68 + tmp_qloop_34 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_76 = tmp_qloop_17 * tmp_qloop_66;
                     const walberla::float64 tmp_qloop_77 = tmp_qloop_51 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_78 = tmp_qloop_25 * tmp_qloop_77;
                     const walberla::float64 tmp_qloop_79 = tmp_qloop_25 * 2.0;
                     const walberla::float64 tmp_qloop_80 = tmp_qloop_18 * tmp_qloop_40 + tmp_qloop_33 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_81 = tmp_qloop_25 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_82 = tmp_qloop_22 * 2.0;
                     const walberla::float64 tmp_qloop_83 = tmp_qloop_18 * tmp_qloop_72 + tmp_qloop_33 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_84 = -tmp_qloop_22 * tmp_qloop_78;
                     const walberla::float64 tmp_qloop_85 = tmp_qloop_18 * tmp_qloop_22;
                     const walberla::float64 tmp_qloop_86 = tmp_qloop_22 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_87 =
                         tmp_qloop_21 * tmp_qloop_25 * tmp_qloop_32 - tmp_qloop_40 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_88  = tmp_qloop_18 * tmp_qloop_43;
                     const walberla::float64 tmp_qloop_89  = tmp_qloop_42 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_90  = -tmp_qloop_25 * tmp_qloop_40 - tmp_qloop_28;
                     const walberla::float64 tmp_qloop_91  = tmp_qloop_25 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_92  = tmp_qloop_25 * tmp_qloop_72 - tmp_qloop_40 * tmp_qloop_82;
                     const walberla::float64 tmp_qloop_93  = tmp_qloop_85 * tmp_qloop_89;
                     const walberla::float64 tmp_qloop_94  = -tmp_qloop_31 * tmp_qloop_68;
                     const walberla::float64 tmp_qloop_95  = tmp_qloop_55 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_96  = tmp_qloop_22 * tmp_qloop_68 + tmp_qloop_46 * tmp_qloop_69;
                     const walberla::float64 tmp_qloop_97  = tmp_qloop_49 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_98  = tmp_qloop_22 * tmp_qloop_40 + tmp_qloop_46 * tmp_qloop_79;
                     const walberla::float64 tmp_qloop_99  = tmp_qloop_25 * tmp_qloop_97;
                     const walberla::float64 tmp_qloop_100 = tmp_qloop_18 * tmp_qloop_99;
                     const walberla::float64 tmp_qloop_101 = tmp_qloop_22 * tmp_qloop_72 + tmp_qloop_56 * 2.0 + tmp_qloop_74;
                     const walberla::float64 tmp_qloop_102 = tmp_qloop_58 * tmp_qloop_76;
                     const walberla::float64 tmp_qloop_105 = 4.0 * _data_q_p_2[q];
                     const walberla::float64 tmp_qloop_106 = 4.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_107 = 4.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_108 = tmp_qloop_106 + tmp_qloop_107;
                     const walberla::float64 tmp_qloop_109 = tmp_qloop_105 + tmp_qloop_108 - 3.0;
                     const walberla::float64 tmp_qloop_110 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_111 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_112 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_109 +
                                                             jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_109;
                     const walberla::float64 tmp_qloop_114 = 1.0 * ( abs( nx_rotation_dof_0 ) * abs( nx_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_115 = 1.0 * ( abs( ny_rotation_dof_0 ) * abs( ny_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_116 = pow( tmp_qloop_114 + tmp_qloop_115, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_117 = 1.0 * ( abs( nz_rotation_dof_0 ) * abs( nz_rotation_dof_0 ) );
                     const walberla::float64 tmp_qloop_118 = pow( tmp_qloop_115 + tmp_qloop_117, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_119 = tmp_qloop_118 + 1.0e-10;
                     const walberla::float64 tmp_qloop_120 = pow( tmp_qloop_114 + tmp_qloop_117, 0.50000000000000000 );
                     const bool              tmp_qloop_121 = tmp_qloop_116 < tmp_qloop_119 && tmp_qloop_120 < tmp_qloop_119;
                     const walberla::float64 tmp_qloop_122 = 1.0 / ( tmp_qloop_120 );
                     const walberla::float64 tmp_qloop_123 = nz_rotation_dof_0 * 1.0;
                     const walberla::float64 tmp_qloop_124 = tmp_qloop_122 * tmp_qloop_123;
                     const walberla::float64 tmp_qloop_125 = tmp_qloop_120 + 1.0e-10;
                     const bool              tmp_qloop_126 = tmp_qloop_116 < tmp_qloop_125 && tmp_qloop_118 < tmp_qloop_125;
                     const walberla::float64 tmp_qloop_127 = 1.0 / ( tmp_qloop_116 );
                     const walberla::float64 tmp_qloop_128 = tmp_qloop_127 * 1.0;
                     const walberla::float64 tmp_qloop_129 = ( nx_rotation_dof_0 * nx_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_130 = ( ny_rotation_dof_0 * ny_rotation_dof_0 );
                     const walberla::float64 tmp_qloop_131 = ( nz_rotation_dof_0 * nz_rotation_dof_0 );
                     const bool tmp_qloop_132 = pow( tmp_qloop_129 + tmp_qloop_130 + tmp_qloop_131, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_135 = 1.0 / ( tmp_qloop_118 );
                     const walberla::float64 tmp_qloop_136 = tmp_qloop_123 * tmp_qloop_135;
                     const walberla::float64 tmp_qloop_139 = tmp_qloop_135 * 1.0;
                     const walberla::float64 tmp_qloop_140 = ny_rotation_dof_0 * tmp_qloop_139;
                     const walberla::float64 tmp_qloop_141 = tmp_qloop_122 * 1.0;
                     const walberla::float64 tmp_qloop_142 = nx_rotation_dof_0 * tmp_qloop_141;
                     const walberla::float64 tmp_qloop_147 = tmp_qloop_106 - 1.0;
                     const walberla::float64 tmp_qloop_148 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_149 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_150 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_147;
                     const walberla::float64 tmp_qloop_152 = 1.0 * ( abs( nx_rotation_dof_1 ) * abs( nx_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_153 = 1.0 * ( abs( ny_rotation_dof_1 ) * abs( ny_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_154 = pow( tmp_qloop_152 + tmp_qloop_153, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_155 = 1.0 * ( abs( nz_rotation_dof_1 ) * abs( nz_rotation_dof_1 ) );
                     const walberla::float64 tmp_qloop_156 = pow( tmp_qloop_153 + tmp_qloop_155, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_157 = tmp_qloop_156 + 1.0e-10;
                     const walberla::float64 tmp_qloop_158 = pow( tmp_qloop_152 + tmp_qloop_155, 0.50000000000000000 );
                     const bool              tmp_qloop_159 = tmp_qloop_154 < tmp_qloop_157 && tmp_qloop_158 < tmp_qloop_157;
                     const walberla::float64 tmp_qloop_160 = 1.0 / ( tmp_qloop_158 );
                     const walberla::float64 tmp_qloop_161 = nz_rotation_dof_1 * 1.0;
                     const walberla::float64 tmp_qloop_162 = tmp_qloop_160 * tmp_qloop_161;
                     const walberla::float64 tmp_qloop_163 = tmp_qloop_158 + 1.0e-10;
                     const bool              tmp_qloop_164 = tmp_qloop_154 < tmp_qloop_163 && tmp_qloop_156 < tmp_qloop_163;
                     const walberla::float64 tmp_qloop_165 = 1.0 / ( tmp_qloop_154 );
                     const walberla::float64 tmp_qloop_166 = tmp_qloop_165 * 1.0;
                     const walberla::float64 tmp_qloop_167 = ( nx_rotation_dof_1 * nx_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_168 = ( ny_rotation_dof_1 * ny_rotation_dof_1 );
                     const walberla::float64 tmp_qloop_169 = ( nz_rotation_dof_1 * nz_rotation_dof_1 );
                     const bool tmp_qloop_170 = pow( tmp_qloop_167 + tmp_qloop_168 + tmp_qloop_169, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_173 = 1.0 / ( tmp_qloop_156 );
                     const walberla::float64 tmp_qloop_174 = tmp_qloop_161 * tmp_qloop_173;
                     const walberla::float64 tmp_qloop_177 = tmp_qloop_173 * 1.0;
                     const walberla::float64 tmp_qloop_178 = ny_rotation_dof_1 * tmp_qloop_177;
                     const walberla::float64 tmp_qloop_179 = tmp_qloop_160 * 1.0;
                     const walberla::float64 tmp_qloop_180 = nx_rotation_dof_1 * tmp_qloop_179;
                     const walberla::float64 tmp_qloop_182 = tmp_qloop_107 - 1.0;
                     const walberla::float64 tmp_qloop_183 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_184 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_185 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_182;
                     const walberla::float64 tmp_qloop_187 = 1.0 * ( abs( nx_rotation_dof_2 ) * abs( nx_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_188 = 1.0 * ( abs( ny_rotation_dof_2 ) * abs( ny_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_189 = pow( tmp_qloop_187 + tmp_qloop_188, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_190 = 1.0 * ( abs( nz_rotation_dof_2 ) * abs( nz_rotation_dof_2 ) );
                     const walberla::float64 tmp_qloop_191 = pow( tmp_qloop_188 + tmp_qloop_190, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_192 = tmp_qloop_191 + 1.0e-10;
                     const walberla::float64 tmp_qloop_193 = pow( tmp_qloop_187 + tmp_qloop_190, 0.50000000000000000 );
                     const bool              tmp_qloop_194 = tmp_qloop_189 < tmp_qloop_192 && tmp_qloop_193 < tmp_qloop_192;
                     const walberla::float64 tmp_qloop_195 = 1.0 / ( tmp_qloop_193 );
                     const walberla::float64 tmp_qloop_196 = nz_rotation_dof_2 * 1.0;
                     const walberla::float64 tmp_qloop_197 = tmp_qloop_195 * tmp_qloop_196;
                     const walberla::float64 tmp_qloop_198 = tmp_qloop_193 + 1.0e-10;
                     const bool              tmp_qloop_199 = tmp_qloop_189 < tmp_qloop_198 && tmp_qloop_191 < tmp_qloop_198;
                     const walberla::float64 tmp_qloop_200 = 1.0 / ( tmp_qloop_189 );
                     const walberla::float64 tmp_qloop_201 = tmp_qloop_200 * 1.0;
                     const walberla::float64 tmp_qloop_202 = ( nx_rotation_dof_2 * nx_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_203 = ( ny_rotation_dof_2 * ny_rotation_dof_2 );
                     const walberla::float64 tmp_qloop_204 = ( nz_rotation_dof_2 * nz_rotation_dof_2 );
                     const bool tmp_qloop_205 = pow( tmp_qloop_202 + tmp_qloop_203 + tmp_qloop_204, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_208 = 1.0 / ( tmp_qloop_191 );
                     const walberla::float64 tmp_qloop_209 = tmp_qloop_196 * tmp_qloop_208;
                     const walberla::float64 tmp_qloop_212 = tmp_qloop_208 * 1.0;
                     const walberla::float64 tmp_qloop_213 = ny_rotation_dof_2 * tmp_qloop_212;
                     const walberla::float64 tmp_qloop_214 = tmp_qloop_195 * 1.0;
                     const walberla::float64 tmp_qloop_215 = nx_rotation_dof_2 * tmp_qloop_214;
                     const walberla::float64 tmp_qloop_217 = tmp_qloop_105 - 1.0;
                     const walberla::float64 tmp_qloop_218 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_219 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_220 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_217;
                     const walberla::float64 tmp_qloop_222 = 1.0 * ( abs( nx_rotation_dof_3 ) * abs( nx_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_223 = 1.0 * ( abs( ny_rotation_dof_3 ) * abs( ny_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_224 = pow( tmp_qloop_222 + tmp_qloop_223, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_225 = 1.0 * ( abs( nz_rotation_dof_3 ) * abs( nz_rotation_dof_3 ) );
                     const walberla::float64 tmp_qloop_226 = pow( tmp_qloop_223 + tmp_qloop_225, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_227 = tmp_qloop_226 + 1.0e-10;
                     const walberla::float64 tmp_qloop_228 = pow( tmp_qloop_222 + tmp_qloop_225, 0.50000000000000000 );
                     const bool              tmp_qloop_229 = tmp_qloop_224 < tmp_qloop_227 && tmp_qloop_228 < tmp_qloop_227;
                     const walberla::float64 tmp_qloop_230 = 1.0 / ( tmp_qloop_228 );
                     const walberla::float64 tmp_qloop_231 = nz_rotation_dof_3 * 1.0;
                     const walberla::float64 tmp_qloop_232 = tmp_qloop_230 * tmp_qloop_231;
                     const walberla::float64 tmp_qloop_233 = tmp_qloop_228 + 1.0e-10;
                     const bool              tmp_qloop_234 = tmp_qloop_224 < tmp_qloop_233 && tmp_qloop_226 < tmp_qloop_233;
                     const walberla::float64 tmp_qloop_235 = 1.0 / ( tmp_qloop_224 );
                     const walberla::float64 tmp_qloop_236 = tmp_qloop_235 * 1.0;
                     const walberla::float64 tmp_qloop_237 = ( nx_rotation_dof_3 * nx_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_238 = ( ny_rotation_dof_3 * ny_rotation_dof_3 );
                     const walberla::float64 tmp_qloop_239 = ( nz_rotation_dof_3 * nz_rotation_dof_3 );
                     const bool tmp_qloop_240 = pow( tmp_qloop_237 + tmp_qloop_238 + tmp_qloop_239, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_243 = 1.0 / ( tmp_qloop_226 );
                     const walberla::float64 tmp_qloop_244 = tmp_qloop_231 * tmp_qloop_243;
                     const walberla::float64 tmp_qloop_247 = tmp_qloop_243 * 1.0;
                     const walberla::float64 tmp_qloop_248 = ny_rotation_dof_3 * tmp_qloop_247;
                     const walberla::float64 tmp_qloop_249 = tmp_qloop_230 * 1.0;
                     const walberla::float64 tmp_qloop_250 = nx_rotation_dof_3 * tmp_qloop_249;
                     const walberla::float64 tmp_qloop_252 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_253 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_254 = tmp_qloop_252 + tmp_qloop_253;
                     const walberla::float64 tmp_qloop_255 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_256 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_257 = tmp_qloop_255 + tmp_qloop_256;
                     const walberla::float64 tmp_qloop_258 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_259 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_260 = tmp_qloop_258 + tmp_qloop_259;
                     const walberla::float64 tmp_qloop_262 = 1.0 * ( abs( nx_rotation_dof_4 ) * abs( nx_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_263 = 1.0 * ( abs( ny_rotation_dof_4 ) * abs( ny_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_264 = pow( tmp_qloop_262 + tmp_qloop_263, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_265 = 1.0 * ( abs( nz_rotation_dof_4 ) * abs( nz_rotation_dof_4 ) );
                     const walberla::float64 tmp_qloop_266 = pow( tmp_qloop_263 + tmp_qloop_265, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_267 = tmp_qloop_266 + 1.0e-10;
                     const walberla::float64 tmp_qloop_268 = pow( tmp_qloop_262 + tmp_qloop_265, 0.50000000000000000 );
                     const bool              tmp_qloop_269 = tmp_qloop_264 < tmp_qloop_267 && tmp_qloop_268 < tmp_qloop_267;
                     const walberla::float64 tmp_qloop_270 = 1.0 / ( tmp_qloop_268 );
                     const walberla::float64 tmp_qloop_271 = nz_rotation_dof_4 * 1.0;
                     const walberla::float64 tmp_qloop_272 = tmp_qloop_270 * tmp_qloop_271;
                     const walberla::float64 tmp_qloop_273 = tmp_qloop_268 + 1.0e-10;
                     const bool              tmp_qloop_274 = tmp_qloop_264 < tmp_qloop_273 && tmp_qloop_266 < tmp_qloop_273;
                     const walberla::float64 tmp_qloop_275 = 1.0 / ( tmp_qloop_264 );
                     const walberla::float64 tmp_qloop_276 = tmp_qloop_275 * 1.0;
                     const walberla::float64 tmp_qloop_277 = ( nx_rotation_dof_4 * nx_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_278 = ( ny_rotation_dof_4 * ny_rotation_dof_4 );
                     const walberla::float64 tmp_qloop_279 = ( nz_rotation_dof_4 * nz_rotation_dof_4 );
                     const bool tmp_qloop_280 = pow( tmp_qloop_277 + tmp_qloop_278 + tmp_qloop_279, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_283 = 1.0 / ( tmp_qloop_266 );
                     const walberla::float64 tmp_qloop_284 = tmp_qloop_271 * tmp_qloop_283;
                     const walberla::float64 tmp_qloop_287 = tmp_qloop_283 * 1.0;
                     const walberla::float64 tmp_qloop_288 = ny_rotation_dof_4 * tmp_qloop_287;
                     const walberla::float64 tmp_qloop_289 = tmp_qloop_270 * 1.0;
                     const walberla::float64 tmp_qloop_290 = nx_rotation_dof_4 * tmp_qloop_289;
                     const walberla::float64 tmp_qloop_292 = jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_293 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_294 = tmp_qloop_292 + tmp_qloop_293;
                     const walberla::float64 tmp_qloop_295 = jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_296 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_297 = tmp_qloop_295 + tmp_qloop_296;
                     const walberla::float64 tmp_qloop_298 = jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_299 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_105;
                     const walberla::float64 tmp_qloop_300 = tmp_qloop_298 + tmp_qloop_299;
                     const walberla::float64 tmp_qloop_302 = 1.0 * ( abs( nx_rotation_dof_5 ) * abs( nx_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_303 = 1.0 * ( abs( ny_rotation_dof_5 ) * abs( ny_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_304 = pow( tmp_qloop_302 + tmp_qloop_303, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_305 = 1.0 * ( abs( nz_rotation_dof_5 ) * abs( nz_rotation_dof_5 ) );
                     const walberla::float64 tmp_qloop_306 = pow( tmp_qloop_303 + tmp_qloop_305, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_307 = tmp_qloop_306 + 1.0e-10;
                     const walberla::float64 tmp_qloop_308 = pow( tmp_qloop_302 + tmp_qloop_305, 0.50000000000000000 );
                     const bool              tmp_qloop_309 = tmp_qloop_304 < tmp_qloop_307 && tmp_qloop_308 < tmp_qloop_307;
                     const walberla::float64 tmp_qloop_310 = 1.0 / ( tmp_qloop_308 );
                     const walberla::float64 tmp_qloop_311 = nz_rotation_dof_5 * 1.0;
                     const walberla::float64 tmp_qloop_312 = tmp_qloop_310 * tmp_qloop_311;
                     const walberla::float64 tmp_qloop_313 = tmp_qloop_308 + 1.0e-10;
                     const bool              tmp_qloop_314 = tmp_qloop_304 < tmp_qloop_313 && tmp_qloop_306 < tmp_qloop_313;
                     const walberla::float64 tmp_qloop_315 = 1.0 / ( tmp_qloop_304 );
                     const walberla::float64 tmp_qloop_316 = tmp_qloop_315 * 1.0;
                     const walberla::float64 tmp_qloop_317 = ( nx_rotation_dof_5 * nx_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_318 = ( ny_rotation_dof_5 * ny_rotation_dof_5 );
                     const walberla::float64 tmp_qloop_319 = ( nz_rotation_dof_5 * nz_rotation_dof_5 );
                     const bool tmp_qloop_320 = pow( tmp_qloop_317 + tmp_qloop_318 + tmp_qloop_319, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_323 = 1.0 / ( tmp_qloop_306 );
                     const walberla::float64 tmp_qloop_324 = tmp_qloop_311 * tmp_qloop_323;
                     const walberla::float64 tmp_qloop_327 = tmp_qloop_323 * 1.0;
                     const walberla::float64 tmp_qloop_328 = ny_rotation_dof_5 * tmp_qloop_327;
                     const walberla::float64 tmp_qloop_329 = tmp_qloop_310 * 1.0;
                     const walberla::float64 tmp_qloop_330 = nx_rotation_dof_5 * tmp_qloop_329;
                     const walberla::float64 tmp_qloop_332 = jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_333 = jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_334 = tmp_qloop_332 + tmp_qloop_333;
                     const walberla::float64 tmp_qloop_335 = jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_336 = jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_337 = tmp_qloop_335 + tmp_qloop_336;
                     const walberla::float64 tmp_qloop_338 = jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_106;
                     const walberla::float64 tmp_qloop_339 = jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_107;
                     const walberla::float64 tmp_qloop_340 = tmp_qloop_338 + tmp_qloop_339;
                     const walberla::float64 tmp_qloop_342 = 1.0 * ( abs( nx_rotation_dof_6 ) * abs( nx_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_343 = 1.0 * ( abs( ny_rotation_dof_6 ) * abs( ny_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_344 = pow( tmp_qloop_342 + tmp_qloop_343, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_345 = 1.0 * ( abs( nz_rotation_dof_6 ) * abs( nz_rotation_dof_6 ) );
                     const walberla::float64 tmp_qloop_346 = pow( tmp_qloop_343 + tmp_qloop_345, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_347 = tmp_qloop_346 + 1.0e-10;
                     const walberla::float64 tmp_qloop_348 = pow( tmp_qloop_342 + tmp_qloop_345, 0.50000000000000000 );
                     const bool              tmp_qloop_349 = tmp_qloop_344 < tmp_qloop_347 && tmp_qloop_348 < tmp_qloop_347;
                     const walberla::float64 tmp_qloop_350 = 1.0 / ( tmp_qloop_348 );
                     const walberla::float64 tmp_qloop_351 = nz_rotation_dof_6 * 1.0;
                     const walberla::float64 tmp_qloop_352 = tmp_qloop_350 * tmp_qloop_351;
                     const walberla::float64 tmp_qloop_353 = tmp_qloop_348 + 1.0e-10;
                     const bool              tmp_qloop_354 = tmp_qloop_344 < tmp_qloop_353 && tmp_qloop_346 < tmp_qloop_353;
                     const walberla::float64 tmp_qloop_355 = 1.0 / ( tmp_qloop_344 );
                     const walberla::float64 tmp_qloop_356 = tmp_qloop_355 * 1.0;
                     const walberla::float64 tmp_qloop_357 = ( nx_rotation_dof_6 * nx_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_358 = ( ny_rotation_dof_6 * ny_rotation_dof_6 );
                     const walberla::float64 tmp_qloop_359 = ( nz_rotation_dof_6 * nz_rotation_dof_6 );
                     const bool tmp_qloop_360 = pow( tmp_qloop_357 + tmp_qloop_358 + tmp_qloop_359, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_363 = 1.0 / ( tmp_qloop_346 );
                     const walberla::float64 tmp_qloop_364 = tmp_qloop_351 * tmp_qloop_363;
                     const walberla::float64 tmp_qloop_367 = tmp_qloop_363 * 1.0;
                     const walberla::float64 tmp_qloop_368 = ny_rotation_dof_6 * tmp_qloop_367;
                     const walberla::float64 tmp_qloop_369 = tmp_qloop_350 * 1.0;
                     const walberla::float64 tmp_qloop_370 = nx_rotation_dof_6 * tmp_qloop_369;
                     const walberla::float64 tmp_qloop_372 = -tmp_qloop_108 - 8.0 * _data_q_p_2[q] + 4.0;
                     const walberla::float64 tmp_qloop_373 =
                         jac_affine_inv_2_0_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_253 - tmp_qloop_293;
                     const walberla::float64 tmp_qloop_374 =
                         jac_affine_inv_2_1_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_256 - tmp_qloop_296;
                     const walberla::float64 tmp_qloop_375 =
                         jac_affine_inv_2_2_GREEN_DOWN * tmp_qloop_372 - tmp_qloop_259 - tmp_qloop_299;
                     const walberla::float64 tmp_qloop_377 = 1.0 * ( abs( nx_rotation_dof_7 ) * abs( nx_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_378 = 1.0 * ( abs( ny_rotation_dof_7 ) * abs( ny_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_379 = pow( tmp_qloop_377 + tmp_qloop_378, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_380 = 1.0 * ( abs( nz_rotation_dof_7 ) * abs( nz_rotation_dof_7 ) );
                     const walberla::float64 tmp_qloop_381 = pow( tmp_qloop_378 + tmp_qloop_380, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_382 = tmp_qloop_381 + 1.0e-10;
                     const walberla::float64 tmp_qloop_383 = pow( tmp_qloop_377 + tmp_qloop_380, 0.50000000000000000 );
                     const bool              tmp_qloop_384 = tmp_qloop_379 < tmp_qloop_382 && tmp_qloop_383 < tmp_qloop_382;
                     const walberla::float64 tmp_qloop_385 = 1.0 / ( tmp_qloop_383 );
                     const walberla::float64 tmp_qloop_386 = nz_rotation_dof_7 * 1.0;
                     const walberla::float64 tmp_qloop_387 = tmp_qloop_385 * tmp_qloop_386;
                     const walberla::float64 tmp_qloop_388 = tmp_qloop_383 + 1.0e-10;
                     const bool              tmp_qloop_389 = tmp_qloop_379 < tmp_qloop_388 && tmp_qloop_381 < tmp_qloop_388;
                     const walberla::float64 tmp_qloop_390 = 1.0 / ( tmp_qloop_379 );
                     const walberla::float64 tmp_qloop_391 = tmp_qloop_390 * 1.0;
                     const walberla::float64 tmp_qloop_392 = ( nx_rotation_dof_7 * nx_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_393 = ( ny_rotation_dof_7 * ny_rotation_dof_7 );
                     const walberla::float64 tmp_qloop_394 = ( nz_rotation_dof_7 * nz_rotation_dof_7 );
                     const bool tmp_qloop_395 = pow( tmp_qloop_392 + tmp_qloop_393 + tmp_qloop_394, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_398 = 1.0 / ( tmp_qloop_381 );
                     const walberla::float64 tmp_qloop_399 = tmp_qloop_386 * tmp_qloop_398;
                     const walberla::float64 tmp_qloop_402 = tmp_qloop_398 * 1.0;
                     const walberla::float64 tmp_qloop_403 = ny_rotation_dof_7 * tmp_qloop_402;
                     const walberla::float64 tmp_qloop_404 = tmp_qloop_385 * 1.0;
                     const walberla::float64 tmp_qloop_405 = nx_rotation_dof_7 * tmp_qloop_404;
                     const walberla::float64 tmp_qloop_407 = tmp_qloop_105 - 4.0;
                     const walberla::float64 tmp_qloop_408 = -tmp_qloop_106 - tmp_qloop_407 - 8.0 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_409 =
                         jac_affine_inv_1_0_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_252 - tmp_qloop_333;
                     const walberla::float64 tmp_qloop_410 =
                         jac_affine_inv_1_1_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_255 - tmp_qloop_336;
                     const walberla::float64 tmp_qloop_411 =
                         jac_affine_inv_1_2_GREEN_DOWN * tmp_qloop_408 - tmp_qloop_258 - tmp_qloop_339;
                     const walberla::float64 tmp_qloop_413 = 1.0 * ( abs( nx_rotation_dof_8 ) * abs( nx_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_414 = 1.0 * ( abs( ny_rotation_dof_8 ) * abs( ny_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_415 = pow( tmp_qloop_413 + tmp_qloop_414, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_416 = 1.0 * ( abs( nz_rotation_dof_8 ) * abs( nz_rotation_dof_8 ) );
                     const walberla::float64 tmp_qloop_417 = pow( tmp_qloop_414 + tmp_qloop_416, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_418 = tmp_qloop_417 + 1.0e-10;
                     const walberla::float64 tmp_qloop_419 = pow( tmp_qloop_413 + tmp_qloop_416, 0.50000000000000000 );
                     const bool              tmp_qloop_420 = tmp_qloop_415 < tmp_qloop_418 && tmp_qloop_419 < tmp_qloop_418;
                     const walberla::float64 tmp_qloop_421 = 1.0 / ( tmp_qloop_419 );
                     const walberla::float64 tmp_qloop_422 = nz_rotation_dof_8 * 1.0;
                     const walberla::float64 tmp_qloop_423 = tmp_qloop_421 * tmp_qloop_422;
                     const walberla::float64 tmp_qloop_424 = tmp_qloop_419 + 1.0e-10;
                     const bool              tmp_qloop_425 = tmp_qloop_415 < tmp_qloop_424 && tmp_qloop_417 < tmp_qloop_424;
                     const walberla::float64 tmp_qloop_426 = 1.0 / ( tmp_qloop_415 );
                     const walberla::float64 tmp_qloop_427 = tmp_qloop_426 * 1.0;
                     const walberla::float64 tmp_qloop_428 = ( nx_rotation_dof_8 * nx_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_429 = ( ny_rotation_dof_8 * ny_rotation_dof_8 );
                     const walberla::float64 tmp_qloop_430 = ( nz_rotation_dof_8 * nz_rotation_dof_8 );
                     const bool tmp_qloop_431 = pow( tmp_qloop_428 + tmp_qloop_429 + tmp_qloop_430, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_434 = 1.0 / ( tmp_qloop_417 );
                     const walberla::float64 tmp_qloop_435 = tmp_qloop_422 * tmp_qloop_434;
                     const walberla::float64 tmp_qloop_438 = tmp_qloop_434 * 1.0;
                     const walberla::float64 tmp_qloop_439 = ny_rotation_dof_8 * tmp_qloop_438;
                     const walberla::float64 tmp_qloop_440 = tmp_qloop_421 * 1.0;
                     const walberla::float64 tmp_qloop_441 = nx_rotation_dof_8 * tmp_qloop_440;
                     const walberla::float64 tmp_qloop_443 = -tmp_qloop_107 - tmp_qloop_407 - 8.0 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_444 =
                         jac_affine_inv_0_0_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_292 - tmp_qloop_332;
                     const walberla::float64 tmp_qloop_445 =
                         jac_affine_inv_0_1_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_295 - tmp_qloop_335;
                     const walberla::float64 tmp_qloop_446 =
                         jac_affine_inv_0_2_GREEN_DOWN * tmp_qloop_443 - tmp_qloop_298 - tmp_qloop_338;
                     const walberla::float64 tmp_qloop_448 = 1.0 * ( abs( nx_rotation_dof_9 ) * abs( nx_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_449 = 1.0 * ( abs( ny_rotation_dof_9 ) * abs( ny_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_450 = pow( tmp_qloop_448 + tmp_qloop_449, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_451 = 1.0 * ( abs( nz_rotation_dof_9 ) * abs( nz_rotation_dof_9 ) );
                     const walberla::float64 tmp_qloop_452 = pow( tmp_qloop_449 + tmp_qloop_451, 0.50000000000000000 );
                     const walberla::float64 tmp_qloop_453 = tmp_qloop_452 + 1.0e-10;
                     const walberla::float64 tmp_qloop_454 = pow( tmp_qloop_448 + tmp_qloop_451, 0.50000000000000000 );
                     const bool              tmp_qloop_455 = tmp_qloop_450 < tmp_qloop_453 && tmp_qloop_454 < tmp_qloop_453;
                     const walberla::float64 tmp_qloop_456 = 1.0 / ( tmp_qloop_454 );
                     const walberla::float64 tmp_qloop_457 = nz_rotation_dof_9 * 1.0;
                     const walberla::float64 tmp_qloop_458 = tmp_qloop_456 * tmp_qloop_457;
                     const walberla::float64 tmp_qloop_459 = tmp_qloop_454 + 1.0e-10;
                     const bool              tmp_qloop_460 = tmp_qloop_450 < tmp_qloop_459 && tmp_qloop_452 < tmp_qloop_459;
                     const walberla::float64 tmp_qloop_461 = 1.0 / ( tmp_qloop_450 );
                     const walberla::float64 tmp_qloop_462 = tmp_qloop_461 * 1.0;
                     const walberla::float64 tmp_qloop_463 = ( nx_rotation_dof_9 * nx_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_464 = ( ny_rotation_dof_9 * ny_rotation_dof_9 );
                     const walberla::float64 tmp_qloop_465 = ( nz_rotation_dof_9 * nz_rotation_dof_9 );
                     const bool tmp_qloop_466 = pow( tmp_qloop_463 + tmp_qloop_464 + tmp_qloop_465, 0.50000000000000000 ) > 0.5;
                     const walberla::float64 tmp_qloop_469    = 1.0 / ( tmp_qloop_452 );
                     const walberla::float64 tmp_qloop_470    = tmp_qloop_457 * tmp_qloop_469;
                     const walberla::float64 tmp_qloop_473    = tmp_qloop_469 * 1.0;
                     const walberla::float64 tmp_qloop_474    = ny_rotation_dof_9 * tmp_qloop_473;
                     const walberla::float64 tmp_qloop_475    = tmp_qloop_456 * 1.0;
                     const walberla::float64 tmp_qloop_476    = nx_rotation_dof_9 * tmp_qloop_475;
                     const walberla::float64 tmp_qloop_478    = tmp_qloop_123 * tmp_qloop_127;
                     const walberla::float64 tmp_qloop_482    = tmp_qloop_161 * tmp_qloop_165;
                     const walberla::float64 tmp_qloop_486    = tmp_qloop_196 * tmp_qloop_200;
                     const walberla::float64 tmp_qloop_490    = tmp_qloop_231 * tmp_qloop_235;
                     const walberla::float64 tmp_qloop_494    = tmp_qloop_271 * tmp_qloop_275;
                     const walberla::float64 tmp_qloop_498    = tmp_qloop_311 * tmp_qloop_315;
                     const walberla::float64 tmp_qloop_502    = tmp_qloop_351 * tmp_qloop_355;
                     const walberla::float64 tmp_qloop_506    = tmp_qloop_386 * tmp_qloop_390;
                     const walberla::float64 tmp_qloop_510    = tmp_qloop_422 * tmp_qloop_426;
                     const walberla::float64 tmp_qloop_514    = tmp_qloop_457 * tmp_qloop_461;
                     const walberla::float64 jac_blending_0_0 = tmp_qloop_36 * tmp_qloop_38;
                     const walberla::float64 jac_blending_0_1 = tmp_qloop_18 * tmp_qloop_44;
                     const walberla::float64 jac_blending_0_2 = tmp_qloop_18 * tmp_qloop_50;
                     const walberla::float64 jac_blending_1_0 = tmp_qloop_25 * tmp_qloop_52;
                     const walberla::float64 jac_blending_1_1 = tmp_qloop_43 * tmp_qloop_55;
                     const walberla::float64 tmp_qloop_63     = jac_blending_0_2 * jac_blending_1_1;
                     const walberla::float64 jac_blending_1_2 = tmp_qloop_25 * tmp_qloop_50;
                     const walberla::float64 tmp_qloop_60     = jac_blending_0_1 * jac_blending_1_2;
                     const walberla::float64 jac_blending_2_0 = tmp_qloop_22 * tmp_qloop_52;
                     const walberla::float64 jac_blending_2_1 = tmp_qloop_22 * tmp_qloop_44;
                     const walberla::float64 tmp_qloop_61     = jac_blending_1_2 * jac_blending_2_1;
                     const walberla::float64 jac_blending_2_2 = tmp_qloop_43 * tmp_qloop_58;
                     const walberla::float64 tmp_qloop_59     = jac_blending_1_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_62     = jac_blending_0_1 * jac_blending_2_2;
                     const walberla::float64 tmp_qloop_64 = jac_blending_0_0 * tmp_qloop_59 - jac_blending_0_0 * tmp_qloop_61 +
                                                            jac_blending_0_2 * jac_blending_1_0 * jac_blending_2_1 -
                                                            jac_blending_1_0 * tmp_qloop_62 + jac_blending_2_0 * tmp_qloop_60 -
                                                            jac_blending_2_0 * tmp_qloop_63;
                     const walberla::float64 tmp_qloop_65         = 1.0 / ( tmp_qloop_64 );
                     const walberla::float64 abs_det_jac_blending = tmp_qloop_64;
                     const walberla::float64 tmp_qloop_103        = abs_det_jac_affine_GREEN_DOWN * abs_det_jac_blending;
                     const walberla::float64 tmp_qloop_104 =
                         tmp_qloop_103 * ( 1.0 - _data_q_p_0[q] - _data_q_p_1[q] - _data_q_p_2[q] );
                     const walberla::float64 tmp_qloop_144        = tmp_qloop_103 * _data_q_p_0[q];
                     const walberla::float64 tmp_qloop_145        = tmp_qloop_103 * _data_q_p_1[q];
                     const walberla::float64 tmp_qloop_146        = tmp_qloop_103 * _data_q_p_2[q];
                     const walberla::float64 jac_blending_inv_0_0 = tmp_qloop_65 * ( tmp_qloop_59 - tmp_qloop_61 );
                     const walberla::float64 jac_blending_inv_0_1 =
                         tmp_qloop_65 * ( jac_blending_0_2 * jac_blending_2_1 - tmp_qloop_62 );
                     const walberla::float64 jac_blending_inv_0_2 = tmp_qloop_65 * ( tmp_qloop_60 - tmp_qloop_63 );
                     const walberla::float64 jac_blending_inv_1_0 =
                         tmp_qloop_65 * ( -jac_blending_1_0 * jac_blending_2_2 + jac_blending_1_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_1 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_2_2 - jac_blending_0_2 * jac_blending_2_0 );
                     const walberla::float64 jac_blending_inv_1_2 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_1_2 + jac_blending_0_2 * jac_blending_1_0 );
                     const walberla::float64 jac_blending_inv_2_0 =
                         tmp_qloop_65 * ( jac_blending_1_0 * jac_blending_2_1 - jac_blending_1_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_113 = -jac_blending_inv_0_0 * tmp_qloop_110 -
                                                             jac_blending_inv_1_0 * tmp_qloop_111 -
                                                             jac_blending_inv_2_0 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_133 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_124 ) : ( ny_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_151 = -jac_blending_inv_0_0 * tmp_qloop_148 -
                                                             jac_blending_inv_1_0 * tmp_qloop_149 -
                                                             jac_blending_inv_2_0 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_171 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_162 ) : ( ny_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_186 = -jac_blending_inv_0_0 * tmp_qloop_183 -
                                                             jac_blending_inv_1_0 * tmp_qloop_184 -
                                                             jac_blending_inv_2_0 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_206 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_197 ) : ( ny_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_221 = -jac_blending_inv_0_0 * tmp_qloop_218 -
                                                             jac_blending_inv_1_0 * tmp_qloop_219 -
                                                             jac_blending_inv_2_0 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_241 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_232 ) : ( ny_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_261 = -jac_blending_inv_0_0 * tmp_qloop_254 -
                                                             jac_blending_inv_1_0 * tmp_qloop_257 -
                                                             jac_blending_inv_2_0 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_281 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_272 ) : ( ny_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_301 = -jac_blending_inv_0_0 * tmp_qloop_294 -
                                                             jac_blending_inv_1_0 * tmp_qloop_297 -
                                                             jac_blending_inv_2_0 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_321 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_312 ) : ( ny_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_341 = -jac_blending_inv_0_0 * tmp_qloop_334 -
                                                             jac_blending_inv_1_0 * tmp_qloop_337 -
                                                             jac_blending_inv_2_0 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_361 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_352 ) : ( ny_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_376 = -jac_blending_inv_0_0 * tmp_qloop_373 -
                                                             jac_blending_inv_1_0 * tmp_qloop_374 -
                                                             jac_blending_inv_2_0 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_396 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_387 ) : ( ny_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_412 = -jac_blending_inv_0_0 * tmp_qloop_409 -
                                                             jac_blending_inv_1_0 * tmp_qloop_410 -
                                                             jac_blending_inv_2_0 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_432 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_423 ) : ( ny_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_447 = -jac_blending_inv_0_0 * tmp_qloop_444 -
                                                             jac_blending_inv_1_0 * tmp_qloop_445 -
                                                             jac_blending_inv_2_0 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_467 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( 0.0 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_458 ) : ( ny_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_479 =
                         tmp_qloop_113 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_130 * tmp_qloop_139 - tmp_qloop_131 * tmp_qloop_139 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_142 ) :
                                                                             ( nx_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_483 =
                         tmp_qloop_151 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_168 * tmp_qloop_177 - tmp_qloop_169 * tmp_qloop_177 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_180 ) :
                                                                             ( nx_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_487 =
                         tmp_qloop_186 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_203 * tmp_qloop_212 - tmp_qloop_204 * tmp_qloop_212 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_215 ) :
                                                                             ( nx_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_491 =
                         tmp_qloop_221 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_238 * tmp_qloop_247 - tmp_qloop_239 * tmp_qloop_247 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_250 ) :
                                                                             ( nx_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_495 =
                         tmp_qloop_261 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_278 * tmp_qloop_287 - tmp_qloop_279 * tmp_qloop_287 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_290 ) :
                                                                             ( nx_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_499 =
                         tmp_qloop_301 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_318 * tmp_qloop_327 - tmp_qloop_319 * tmp_qloop_327 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_330 ) :
                                                                             ( nx_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_503 =
                         tmp_qloop_341 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_358 * tmp_qloop_367 - tmp_qloop_359 * tmp_qloop_367 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_370 ) :
                                                                             ( nx_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_507 =
                         tmp_qloop_376 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_393 * tmp_qloop_402 - tmp_qloop_394 * tmp_qloop_402 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_405 ) :
                                                                             ( nx_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_511 =
                         tmp_qloop_412 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_429 * tmp_qloop_438 - tmp_qloop_430 * tmp_qloop_438 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_441 ) :
                                                                             ( nx_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_515 =
                         tmp_qloop_447 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_464 * tmp_qloop_473 - tmp_qloop_465 * tmp_qloop_473 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_476 ) :
                                                                             ( nx_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_518 =
                         tmp_qloop_113 * ( ( tmp_qloop_132 ) ? ( nx_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_521 =
                         tmp_qloop_151 * ( ( tmp_qloop_170 ) ? ( nx_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_524 =
                         tmp_qloop_186 * ( ( tmp_qloop_205 ) ? ( nx_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_527 =
                         tmp_qloop_221 * ( ( tmp_qloop_240 ) ? ( nx_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_530 =
                         tmp_qloop_261 * ( ( tmp_qloop_280 ) ? ( nx_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_533 =
                         tmp_qloop_301 * ( ( tmp_qloop_320 ) ? ( nx_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_536 =
                         tmp_qloop_341 * ( ( tmp_qloop_360 ) ? ( nx_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_539 =
                         tmp_qloop_376 * ( ( tmp_qloop_395 ) ? ( nx_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_542 =
                         tmp_qloop_412 * ( ( tmp_qloop_431 ) ? ( nx_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_545 =
                         tmp_qloop_447 * ( ( tmp_qloop_466 ) ? ( nx_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_1 =
                         tmp_qloop_65 * ( -jac_blending_0_0 * jac_blending_2_1 + jac_blending_0_1 * jac_blending_2_0 );
                     const walberla::float64 tmp_qloop_134 = -jac_blending_inv_0_1 * tmp_qloop_110 -
                                                             jac_blending_inv_1_1 * tmp_qloop_111 -
                                                             jac_blending_inv_2_1 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_137 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( tmp_qloop_136 ) :
                                       ( ( tmp_qloop_126 ) ? ( 0.0 ) : ( -nx_rotation_dof_0 * tmp_qloop_128 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_172 = -jac_blending_inv_0_1 * tmp_qloop_148 -
                                                             jac_blending_inv_1_1 * tmp_qloop_149 -
                                                             jac_blending_inv_2_1 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_175 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( tmp_qloop_174 ) :
                                       ( ( tmp_qloop_164 ) ? ( 0.0 ) : ( -nx_rotation_dof_1 * tmp_qloop_166 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_207 = -jac_blending_inv_0_1 * tmp_qloop_183 -
                                                             jac_blending_inv_1_1 * tmp_qloop_184 -
                                                             jac_blending_inv_2_1 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_210 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( tmp_qloop_209 ) :
                                       ( ( tmp_qloop_199 ) ? ( 0.0 ) : ( -nx_rotation_dof_2 * tmp_qloop_201 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_242 = -jac_blending_inv_0_1 * tmp_qloop_218 -
                                                             jac_blending_inv_1_1 * tmp_qloop_219 -
                                                             jac_blending_inv_2_1 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_245 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( tmp_qloop_244 ) :
                                       ( ( tmp_qloop_234 ) ? ( 0.0 ) : ( -nx_rotation_dof_3 * tmp_qloop_236 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_282 = -jac_blending_inv_0_1 * tmp_qloop_254 -
                                                             jac_blending_inv_1_1 * tmp_qloop_257 -
                                                             jac_blending_inv_2_1 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_285 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( tmp_qloop_284 ) :
                                       ( ( tmp_qloop_274 ) ? ( 0.0 ) : ( -nx_rotation_dof_4 * tmp_qloop_276 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_322 = -jac_blending_inv_0_1 * tmp_qloop_294 -
                                                             jac_blending_inv_1_1 * tmp_qloop_297 -
                                                             jac_blending_inv_2_1 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_325 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( tmp_qloop_324 ) :
                                       ( ( tmp_qloop_314 ) ? ( 0.0 ) : ( -nx_rotation_dof_5 * tmp_qloop_316 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_362 = -jac_blending_inv_0_1 * tmp_qloop_334 -
                                                             jac_blending_inv_1_1 * tmp_qloop_337 -
                                                             jac_blending_inv_2_1 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_365 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( tmp_qloop_364 ) :
                                       ( ( tmp_qloop_354 ) ? ( 0.0 ) : ( -nx_rotation_dof_6 * tmp_qloop_356 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_397 = -jac_blending_inv_0_1 * tmp_qloop_373 -
                                                             jac_blending_inv_1_1 * tmp_qloop_374 -
                                                             jac_blending_inv_2_1 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_400 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( tmp_qloop_399 ) :
                                       ( ( tmp_qloop_389 ) ? ( 0.0 ) : ( -nx_rotation_dof_7 * tmp_qloop_391 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_433 = -jac_blending_inv_0_1 * tmp_qloop_409 -
                                                             jac_blending_inv_1_1 * tmp_qloop_410 -
                                                             jac_blending_inv_2_1 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_436 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( tmp_qloop_435 ) :
                                       ( ( tmp_qloop_425 ) ? ( 0.0 ) : ( -nx_rotation_dof_8 * tmp_qloop_427 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_468 = -jac_blending_inv_0_1 * tmp_qloop_444 -
                                                             jac_blending_inv_1_1 * tmp_qloop_445 -
                                                             jac_blending_inv_2_1 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_471 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( tmp_qloop_470 ) :
                                       ( ( tmp_qloop_460 ) ? ( 0.0 ) : ( -nx_rotation_dof_9 * tmp_qloop_462 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_480 =
                         tmp_qloop_134 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ?
                                       ( nx_rotation_dof_0 * tmp_qloop_140 ) :
                                       ( ( tmp_qloop_126 ) ? ( -tmp_qloop_129 * tmp_qloop_141 - tmp_qloop_131 * tmp_qloop_141 ) :
                                                             ( ny_rotation_dof_0 * tmp_qloop_478 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_484 =
                         tmp_qloop_172 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ?
                                       ( nx_rotation_dof_1 * tmp_qloop_178 ) :
                                       ( ( tmp_qloop_164 ) ? ( -tmp_qloop_167 * tmp_qloop_179 - tmp_qloop_169 * tmp_qloop_179 ) :
                                                             ( ny_rotation_dof_1 * tmp_qloop_482 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_488 =
                         tmp_qloop_207 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ?
                                       ( nx_rotation_dof_2 * tmp_qloop_213 ) :
                                       ( ( tmp_qloop_199 ) ? ( -tmp_qloop_202 * tmp_qloop_214 - tmp_qloop_204 * tmp_qloop_214 ) :
                                                             ( ny_rotation_dof_2 * tmp_qloop_486 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_492 =
                         tmp_qloop_242 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ?
                                       ( nx_rotation_dof_3 * tmp_qloop_248 ) :
                                       ( ( tmp_qloop_234 ) ? ( -tmp_qloop_237 * tmp_qloop_249 - tmp_qloop_239 * tmp_qloop_249 ) :
                                                             ( ny_rotation_dof_3 * tmp_qloop_490 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_496 =
                         tmp_qloop_282 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ?
                                       ( nx_rotation_dof_4 * tmp_qloop_288 ) :
                                       ( ( tmp_qloop_274 ) ? ( -tmp_qloop_277 * tmp_qloop_289 - tmp_qloop_279 * tmp_qloop_289 ) :
                                                             ( ny_rotation_dof_4 * tmp_qloop_494 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_500 =
                         tmp_qloop_322 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ?
                                       ( nx_rotation_dof_5 * tmp_qloop_328 ) :
                                       ( ( tmp_qloop_314 ) ? ( -tmp_qloop_317 * tmp_qloop_329 - tmp_qloop_319 * tmp_qloop_329 ) :
                                                             ( ny_rotation_dof_5 * tmp_qloop_498 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_504 =
                         tmp_qloop_362 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ?
                                       ( nx_rotation_dof_6 * tmp_qloop_368 ) :
                                       ( ( tmp_qloop_354 ) ? ( -tmp_qloop_357 * tmp_qloop_369 - tmp_qloop_359 * tmp_qloop_369 ) :
                                                             ( ny_rotation_dof_6 * tmp_qloop_502 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_508 =
                         tmp_qloop_397 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ?
                                       ( nx_rotation_dof_7 * tmp_qloop_403 ) :
                                       ( ( tmp_qloop_389 ) ? ( -tmp_qloop_392 * tmp_qloop_404 - tmp_qloop_394 * tmp_qloop_404 ) :
                                                             ( ny_rotation_dof_7 * tmp_qloop_506 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_512 =
                         tmp_qloop_433 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ?
                                       ( nx_rotation_dof_8 * tmp_qloop_439 ) :
                                       ( ( tmp_qloop_425 ) ? ( -tmp_qloop_428 * tmp_qloop_440 - tmp_qloop_430 * tmp_qloop_440 ) :
                                                             ( ny_rotation_dof_8 * tmp_qloop_510 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_516 =
                         tmp_qloop_468 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ?
                                       ( nx_rotation_dof_9 * tmp_qloop_474 ) :
                                       ( ( tmp_qloop_460 ) ? ( -tmp_qloop_463 * tmp_qloop_475 - tmp_qloop_465 * tmp_qloop_475 ) :
                                                             ( ny_rotation_dof_9 * tmp_qloop_514 ) ) ) ) :
                               ( 1.0 ) );
                     const walberla::float64 tmp_qloop_519 =
                         tmp_qloop_134 * ( ( tmp_qloop_132 ) ? ( ny_rotation_dof_0 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_522 =
                         tmp_qloop_172 * ( ( tmp_qloop_170 ) ? ( ny_rotation_dof_1 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_525 =
                         tmp_qloop_207 * ( ( tmp_qloop_205 ) ? ( ny_rotation_dof_2 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_528 =
                         tmp_qloop_242 * ( ( tmp_qloop_240 ) ? ( ny_rotation_dof_3 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_531 =
                         tmp_qloop_282 * ( ( tmp_qloop_280 ) ? ( ny_rotation_dof_4 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_534 =
                         tmp_qloop_322 * ( ( tmp_qloop_320 ) ? ( ny_rotation_dof_5 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_537 =
                         tmp_qloop_362 * ( ( tmp_qloop_360 ) ? ( ny_rotation_dof_6 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_540 =
                         tmp_qloop_397 * ( ( tmp_qloop_395 ) ? ( ny_rotation_dof_7 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_543 =
                         tmp_qloop_433 * ( ( tmp_qloop_431 ) ? ( ny_rotation_dof_8 ) : ( 0.0 ) );
                     const walberla::float64 tmp_qloop_546 =
                         tmp_qloop_468 * ( ( tmp_qloop_466 ) ? ( ny_rotation_dof_9 ) : ( 0.0 ) );
                     const walberla::float64 jac_blending_inv_2_2 =
                         tmp_qloop_65 * ( jac_blending_0_0 * jac_blending_1_1 - jac_blending_0_1 * jac_blending_1_0 );
                     const walberla::float64 tmp_qloop_138 = -jac_blending_inv_0_2 * tmp_qloop_110 -
                                                             jac_blending_inv_1_2 * tmp_qloop_111 -
                                                             jac_blending_inv_2_2 * tmp_qloop_112;
                     const walberla::float64 tmp_qloop_143 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ?
                                               ( ( ( tmp_qloop_121 ) ? ( -tmp_qloop_140 ) :
                                                                       ( ( tmp_qloop_126 ) ? ( tmp_qloop_142 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_176 = -jac_blending_inv_0_2 * tmp_qloop_148 -
                                                             jac_blending_inv_1_2 * tmp_qloop_149 -
                                                             jac_blending_inv_2_2 * tmp_qloop_150;
                     const walberla::float64 tmp_qloop_181 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ?
                                               ( ( ( tmp_qloop_159 ) ? ( -tmp_qloop_178 ) :
                                                                       ( ( tmp_qloop_164 ) ? ( tmp_qloop_180 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_211 = -jac_blending_inv_0_2 * tmp_qloop_183 -
                                                             jac_blending_inv_1_2 * tmp_qloop_184 -
                                                             jac_blending_inv_2_2 * tmp_qloop_185;
                     const walberla::float64 tmp_qloop_216 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ?
                                               ( ( ( tmp_qloop_194 ) ? ( -tmp_qloop_213 ) :
                                                                       ( ( tmp_qloop_199 ) ? ( tmp_qloop_215 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_246 = -jac_blending_inv_0_2 * tmp_qloop_218 -
                                                             jac_blending_inv_1_2 * tmp_qloop_219 -
                                                             jac_blending_inv_2_2 * tmp_qloop_220;
                     const walberla::float64 tmp_qloop_251 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ?
                                               ( ( ( tmp_qloop_229 ) ? ( -tmp_qloop_248 ) :
                                                                       ( ( tmp_qloop_234 ) ? ( tmp_qloop_250 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_286 = -jac_blending_inv_0_2 * tmp_qloop_254 -
                                                             jac_blending_inv_1_2 * tmp_qloop_257 -
                                                             jac_blending_inv_2_2 * tmp_qloop_260;
                     const walberla::float64 tmp_qloop_291 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ?
                                               ( ( ( tmp_qloop_269 ) ? ( -tmp_qloop_288 ) :
                                                                       ( ( tmp_qloop_274 ) ? ( tmp_qloop_290 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_326 = -jac_blending_inv_0_2 * tmp_qloop_294 -
                                                             jac_blending_inv_1_2 * tmp_qloop_297 -
                                                             jac_blending_inv_2_2 * tmp_qloop_300;
                     const walberla::float64 tmp_qloop_331 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ?
                                               ( ( ( tmp_qloop_309 ) ? ( -tmp_qloop_328 ) :
                                                                       ( ( tmp_qloop_314 ) ? ( tmp_qloop_330 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_366 = -jac_blending_inv_0_2 * tmp_qloop_334 -
                                                             jac_blending_inv_1_2 * tmp_qloop_337 -
                                                             jac_blending_inv_2_2 * tmp_qloop_340;
                     const walberla::float64 tmp_qloop_371 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ?
                                               ( ( ( tmp_qloop_349 ) ? ( -tmp_qloop_368 ) :
                                                                       ( ( tmp_qloop_354 ) ? ( tmp_qloop_370 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_401 = -jac_blending_inv_0_2 * tmp_qloop_373 -
                                                             jac_blending_inv_1_2 * tmp_qloop_374 -
                                                             jac_blending_inv_2_2 * tmp_qloop_375;
                     const walberla::float64 tmp_qloop_406 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ?
                                               ( ( ( tmp_qloop_384 ) ? ( -tmp_qloop_403 ) :
                                                                       ( ( tmp_qloop_389 ) ? ( tmp_qloop_405 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_437 = -jac_blending_inv_0_2 * tmp_qloop_409 -
                                                             jac_blending_inv_1_2 * tmp_qloop_410 -
                                                             jac_blending_inv_2_2 * tmp_qloop_411;
                     const walberla::float64 tmp_qloop_442 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ?
                                               ( ( ( tmp_qloop_420 ) ? ( -tmp_qloop_439 ) :
                                                                       ( ( tmp_qloop_425 ) ? ( tmp_qloop_441 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_472 = -jac_blending_inv_0_2 * tmp_qloop_444 -
                                                             jac_blending_inv_1_2 * tmp_qloop_445 -
                                                             jac_blending_inv_2_2 * tmp_qloop_446;
                     const walberla::float64 tmp_qloop_477 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ?
                                               ( ( ( tmp_qloop_455 ) ? ( -tmp_qloop_474 ) :
                                                                       ( ( tmp_qloop_460 ) ? ( tmp_qloop_476 ) : ( 0.0 ) ) ) ) :
                                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_481 =
                         tmp_qloop_138 *
                         ( ( tmp_qloop_132 ) ?
                               ( ( ( tmp_qloop_121 ) ? ( nx_rotation_dof_0 * tmp_qloop_136 ) :
                                                       ( ( tmp_qloop_126 ) ? ( ny_rotation_dof_0 * tmp_qloop_124 ) :
                                                                             ( -tmp_qloop_128 * tmp_qloop_129 -
                                                                               tmp_qloop_128 * tmp_qloop_130 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_485 =
                         tmp_qloop_176 *
                         ( ( tmp_qloop_170 ) ?
                               ( ( ( tmp_qloop_159 ) ? ( nx_rotation_dof_1 * tmp_qloop_174 ) :
                                                       ( ( tmp_qloop_164 ) ? ( ny_rotation_dof_1 * tmp_qloop_162 ) :
                                                                             ( -tmp_qloop_166 * tmp_qloop_167 -
                                                                               tmp_qloop_166 * tmp_qloop_168 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_489 =
                         tmp_qloop_211 *
                         ( ( tmp_qloop_205 ) ?
                               ( ( ( tmp_qloop_194 ) ? ( nx_rotation_dof_2 * tmp_qloop_209 ) :
                                                       ( ( tmp_qloop_199 ) ? ( ny_rotation_dof_2 * tmp_qloop_197 ) :
                                                                             ( -tmp_qloop_201 * tmp_qloop_202 -
                                                                               tmp_qloop_201 * tmp_qloop_203 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_493 =
                         tmp_qloop_246 *
                         ( ( tmp_qloop_240 ) ?
                               ( ( ( tmp_qloop_229 ) ? ( nx_rotation_dof_3 * tmp_qloop_244 ) :
                                                       ( ( tmp_qloop_234 ) ? ( ny_rotation_dof_3 * tmp_qloop_232 ) :
                                                                             ( -tmp_qloop_236 * tmp_qloop_237 -
                                                                               tmp_qloop_236 * tmp_qloop_238 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_497 =
                         tmp_qloop_286 *
                         ( ( tmp_qloop_280 ) ?
                               ( ( ( tmp_qloop_269 ) ? ( nx_rotation_dof_4 * tmp_qloop_284 ) :
                                                       ( ( tmp_qloop_274 ) ? ( ny_rotation_dof_4 * tmp_qloop_272 ) :
                                                                             ( -tmp_qloop_276 * tmp_qloop_277 -
                                                                               tmp_qloop_276 * tmp_qloop_278 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_501 =
                         tmp_qloop_326 *
                         ( ( tmp_qloop_320 ) ?
                               ( ( ( tmp_qloop_309 ) ? ( nx_rotation_dof_5 * tmp_qloop_324 ) :
                                                       ( ( tmp_qloop_314 ) ? ( ny_rotation_dof_5 * tmp_qloop_312 ) :
                                                                             ( -tmp_qloop_316 * tmp_qloop_317 -
                                                                               tmp_qloop_316 * tmp_qloop_318 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_505 =
                         tmp_qloop_366 *
                         ( ( tmp_qloop_360 ) ?
                               ( ( ( tmp_qloop_349 ) ? ( nx_rotation_dof_6 * tmp_qloop_364 ) :
                                                       ( ( tmp_qloop_354 ) ? ( ny_rotation_dof_6 * tmp_qloop_352 ) :
                                                                             ( -tmp_qloop_356 * tmp_qloop_357 -
                                                                               tmp_qloop_356 * tmp_qloop_358 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_509 =
                         tmp_qloop_401 *
                         ( ( tmp_qloop_395 ) ?
                               ( ( ( tmp_qloop_384 ) ? ( nx_rotation_dof_7 * tmp_qloop_399 ) :
                                                       ( ( tmp_qloop_389 ) ? ( ny_rotation_dof_7 * tmp_qloop_387 ) :
                                                                             ( -tmp_qloop_391 * tmp_qloop_392 -
                                                                               tmp_qloop_391 * tmp_qloop_393 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_513 =
                         tmp_qloop_437 *
                         ( ( tmp_qloop_431 ) ?
                               ( ( ( tmp_qloop_420 ) ? ( nx_rotation_dof_8 * tmp_qloop_435 ) :
                                                       ( ( tmp_qloop_425 ) ? ( ny_rotation_dof_8 * tmp_qloop_423 ) :
                                                                             ( -tmp_qloop_427 * tmp_qloop_428 -
                                                                               tmp_qloop_427 * tmp_qloop_429 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_517 =
                         tmp_qloop_472 *
                         ( ( tmp_qloop_466 ) ?
                               ( ( ( tmp_qloop_455 ) ? ( nx_rotation_dof_9 * tmp_qloop_470 ) :
                                                       ( ( tmp_qloop_460 ) ? ( ny_rotation_dof_9 * tmp_qloop_458 ) :
                                                                             ( -tmp_qloop_462 * tmp_qloop_463 -
                                                                               tmp_qloop_462 * tmp_qloop_464 ) ) ) ) :
                               ( 0.0 ) );
                     const walberla::float64 tmp_qloop_520 =
                         tmp_qloop_138 * ( ( tmp_qloop_132 ) ? ( nz_rotation_dof_0 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_523 =
                         tmp_qloop_176 * ( ( tmp_qloop_170 ) ? ( nz_rotation_dof_1 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_526 =
                         tmp_qloop_211 * ( ( tmp_qloop_205 ) ? ( nz_rotation_dof_2 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_529 =
                         tmp_qloop_246 * ( ( tmp_qloop_240 ) ? ( nz_rotation_dof_3 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_532 =
                         tmp_qloop_286 * ( ( tmp_qloop_280 ) ? ( nz_rotation_dof_4 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_535 =
                         tmp_qloop_326 * ( ( tmp_qloop_320 ) ? ( nz_rotation_dof_5 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_538 =
                         tmp_qloop_366 * ( ( tmp_qloop_360 ) ? ( nz_rotation_dof_6 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_541 =
                         tmp_qloop_401 * ( ( tmp_qloop_395 ) ? ( nz_rotation_dof_7 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_544 =
                         tmp_qloop_437 * ( ( tmp_qloop_431 ) ? ( nz_rotation_dof_8 ) : ( 1.0 ) );
                     const walberla::float64 tmp_qloop_547 =
                         tmp_qloop_472 * ( ( tmp_qloop_466 ) ? ( nz_rotation_dof_9 ) : ( 1.0 ) );
                     const walberla::float64 hessian_blending_0_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_68 - tmp_qloop_28 * tmp_qloop_69 +
                               tmp_qloop_31 * ( tmp_qloop_33 - tmp_qloop_68 ) + tmp_qloop_35 * tmp_qloop_69 ) *
                             1.0 -
                         tmp_qloop_18 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_1_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_40 + tmp_qloop_25 * tmp_qloop_71 + tmp_qloop_70 ) * 1.0 -
                         tmp_qloop_25 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_2_0_0 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_19 * tmp_qloop_72 + tmp_qloop_22 * tmp_qloop_71 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_67;
                     const walberla::float64 hessian_blending_0_0_1 =
                         tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_18 * tmp_qloop_78;
                     const walberla::float64 hessian_blending_1_0_1 =
                         -tmp_qloop_29 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_80 * tmp_qloop_81;
                     const walberla::float64 hessian_blending_2_0_1 = tmp_qloop_81 * tmp_qloop_83 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_0_0_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_75 * 1.0 - tmp_qloop_77 * tmp_qloop_85;
                     const walberla::float64 hessian_blending_1_0_2 = tmp_qloop_80 * tmp_qloop_86 + tmp_qloop_84;
                     const walberla::float64 hessian_blending_2_0_2 =
                         -tmp_qloop_30 * tmp_qloop_77 + tmp_qloop_52 + tmp_qloop_83 * tmp_qloop_86;
                     const walberla::float64 hessian_blending_0_1_0 =
                         -tmp_qloop_19 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_87 * tmp_qloop_88;
                     const walberla::float64 hessian_blending_1_1_0 =
                         tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_18 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_0 = tmp_qloop_88 * tmp_qloop_92 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_0_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_68 + tmp_qloop_54 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0 -
                         tmp_qloop_18 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_1_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_40 + tmp_qloop_31 * ( -tmp_qloop_40 + tmp_qloop_53 ) +
                               tmp_qloop_47 * tmp_qloop_79 + tmp_qloop_54 * tmp_qloop_79 ) *
                             1.0 -
                         tmp_qloop_25 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_2_1_1 =
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_29 * tmp_qloop_72 + tmp_qloop_54 * tmp_qloop_82 + tmp_qloop_73 ) * 1.0 -
                         tmp_qloop_22 * tmp_qloop_95;
                     const walberla::float64 hessian_blending_0_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_87 * 1.0 - tmp_qloop_93;
                     const walberla::float64 hessian_blending_1_1_2 =
                         tmp_qloop_17 * tmp_qloop_22 * tmp_qloop_37 * tmp_qloop_90 * 1.0 - tmp_qloop_22 * tmp_qloop_91;
                     const walberla::float64 hessian_blending_2_1_2 =
                         -tmp_qloop_30 * tmp_qloop_89 + tmp_qloop_44 + tmp_qloop_86 * tmp_qloop_92;
                     const walberla::float64 hessian_blending_0_2_0 =
                         -tmp_qloop_19 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_88 * tmp_qloop_96;
                     const walberla::float64 hessian_blending_1_2_0 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * tmp_qloop_98 * 1.0;
                     const walberla::float64 hessian_blending_2_2_0 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_18 * tmp_qloop_37 * 1.0 - tmp_qloop_85 * tmp_qloop_97;
                     const walberla::float64 hessian_blending_0_2_1 =
                         -tmp_qloop_100 + tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * tmp_qloop_96 * 1.0;
                     const walberla::float64 hessian_blending_1_2_1 =
                         -tmp_qloop_29 * tmp_qloop_97 + tmp_qloop_50 + tmp_qloop_81 * tmp_qloop_98;
                     const walberla::float64 hessian_blending_2_2_1 =
                         tmp_qloop_101 * tmp_qloop_17 * tmp_qloop_25 * tmp_qloop_37 * 1.0 - tmp_qloop_22 * tmp_qloop_99;
                     const walberla::float64 hessian_blending_0_2_2 =
                         -tmp_qloop_102 * tmp_qloop_18 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_68 + tmp_qloop_57 * tmp_qloop_69 + tmp_qloop_94 ) * 1.0;
                     const walberla::float64 hessian_blending_1_2_2 =
                         -tmp_qloop_102 * tmp_qloop_25 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_40 + tmp_qloop_57 * tmp_qloop_79 + tmp_qloop_70 ) * 1.0;
                     const walberla::float64 hessian_blending_2_2_2 =
                         -tmp_qloop_102 * tmp_qloop_22 +
                         tmp_qloop_17 * tmp_qloop_37 *
                             ( tmp_qloop_30 * tmp_qloop_72 + tmp_qloop_31 * ( tmp_qloop_46 - tmp_qloop_72 ) + tmp_qloop_48 * 2.0 +
                               tmp_qloop_57 * tmp_qloop_82 ) *
                             1.0;
                     const walberla::float64 q_tmp_0_0 =
                         ( tmp_qloop_104 * tmp_qloop_133 + tmp_qloop_104 * tmp_qloop_137 + tmp_qloop_104 * tmp_qloop_143 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_1 =
                         ( tmp_qloop_133 * tmp_qloop_144 + tmp_qloop_137 * tmp_qloop_144 + tmp_qloop_143 * tmp_qloop_144 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_2 =
                         ( tmp_qloop_133 * tmp_qloop_145 + tmp_qloop_137 * tmp_qloop_145 + tmp_qloop_143 * tmp_qloop_145 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_0_3 =
                         ( tmp_qloop_133 * tmp_qloop_146 + tmp_qloop_137 * tmp_qloop_146 + tmp_qloop_143 * tmp_qloop_146 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_0 =
                         ( tmp_qloop_104 * tmp_qloop_171 + tmp_qloop_104 * tmp_qloop_175 + tmp_qloop_104 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_1 =
                         ( tmp_qloop_144 * tmp_qloop_171 + tmp_qloop_144 * tmp_qloop_175 + tmp_qloop_144 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_2 =
                         ( tmp_qloop_145 * tmp_qloop_171 + tmp_qloop_145 * tmp_qloop_175 + tmp_qloop_145 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_1_3 =
                         ( tmp_qloop_146 * tmp_qloop_171 + tmp_qloop_146 * tmp_qloop_175 + tmp_qloop_146 * tmp_qloop_181 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_0 =
                         ( tmp_qloop_104 * tmp_qloop_206 + tmp_qloop_104 * tmp_qloop_210 + tmp_qloop_104 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_1 =
                         ( tmp_qloop_144 * tmp_qloop_206 + tmp_qloop_144 * tmp_qloop_210 + tmp_qloop_144 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_2 =
                         ( tmp_qloop_145 * tmp_qloop_206 + tmp_qloop_145 * tmp_qloop_210 + tmp_qloop_145 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_2_3 =
                         ( tmp_qloop_146 * tmp_qloop_206 + tmp_qloop_146 * tmp_qloop_210 + tmp_qloop_146 * tmp_qloop_216 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_0 =
                         ( tmp_qloop_104 * tmp_qloop_241 + tmp_qloop_104 * tmp_qloop_245 + tmp_qloop_104 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_1 =
                         ( tmp_qloop_144 * tmp_qloop_241 + tmp_qloop_144 * tmp_qloop_245 + tmp_qloop_144 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_2 =
                         ( tmp_qloop_145 * tmp_qloop_241 + tmp_qloop_145 * tmp_qloop_245 + tmp_qloop_145 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_3_3 =
                         ( tmp_qloop_146 * tmp_qloop_241 + tmp_qloop_146 * tmp_qloop_245 + tmp_qloop_146 * tmp_qloop_251 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_0 =
                         ( tmp_qloop_104 * tmp_qloop_281 + tmp_qloop_104 * tmp_qloop_285 + tmp_qloop_104 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_1 =
                         ( tmp_qloop_144 * tmp_qloop_281 + tmp_qloop_144 * tmp_qloop_285 + tmp_qloop_144 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_2 =
                         ( tmp_qloop_145 * tmp_qloop_281 + tmp_qloop_145 * tmp_qloop_285 + tmp_qloop_145 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_4_3 =
                         ( tmp_qloop_146 * tmp_qloop_281 + tmp_qloop_146 * tmp_qloop_285 + tmp_qloop_146 * tmp_qloop_291 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_0 =
                         ( tmp_qloop_104 * tmp_qloop_321 + tmp_qloop_104 * tmp_qloop_325 + tmp_qloop_104 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_1 =
                         ( tmp_qloop_144 * tmp_qloop_321 + tmp_qloop_144 * tmp_qloop_325 + tmp_qloop_144 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_2 =
                         ( tmp_qloop_145 * tmp_qloop_321 + tmp_qloop_145 * tmp_qloop_325 + tmp_qloop_145 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_5_3 =
                         ( tmp_qloop_146 * tmp_qloop_321 + tmp_qloop_146 * tmp_qloop_325 + tmp_qloop_146 * tmp_qloop_331 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_0 =
                         ( tmp_qloop_104 * tmp_qloop_361 + tmp_qloop_104 * tmp_qloop_365 + tmp_qloop_104 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_1 =
                         ( tmp_qloop_144 * tmp_qloop_361 + tmp_qloop_144 * tmp_qloop_365 + tmp_qloop_144 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_2 =
                         ( tmp_qloop_145 * tmp_qloop_361 + tmp_qloop_145 * tmp_qloop_365 + tmp_qloop_145 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_6_3 =
                         ( tmp_qloop_146 * tmp_qloop_361 + tmp_qloop_146 * tmp_qloop_365 + tmp_qloop_146 * tmp_qloop_371 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_0 =
                         ( tmp_qloop_104 * tmp_qloop_396 + tmp_qloop_104 * tmp_qloop_400 + tmp_qloop_104 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_1 =
                         ( tmp_qloop_144 * tmp_qloop_396 + tmp_qloop_144 * tmp_qloop_400 + tmp_qloop_144 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_2 =
                         ( tmp_qloop_145 * tmp_qloop_396 + tmp_qloop_145 * tmp_qloop_400 + tmp_qloop_145 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_7_3 =
                         ( tmp_qloop_146 * tmp_qloop_396 + tmp_qloop_146 * tmp_qloop_400 + tmp_qloop_146 * tmp_qloop_406 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_0 =
                         ( tmp_qloop_104 * tmp_qloop_432 + tmp_qloop_104 * tmp_qloop_436 + tmp_qloop_104 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_1 =
                         ( tmp_qloop_144 * tmp_qloop_432 + tmp_qloop_144 * tmp_qloop_436 + tmp_qloop_144 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_2 =
                         ( tmp_qloop_145 * tmp_qloop_432 + tmp_qloop_145 * tmp_qloop_436 + tmp_qloop_145 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_8_3 =
                         ( tmp_qloop_146 * tmp_qloop_432 + tmp_qloop_146 * tmp_qloop_436 + tmp_qloop_146 * tmp_qloop_442 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_0 =
                         ( tmp_qloop_104 * tmp_qloop_467 + tmp_qloop_104 * tmp_qloop_471 + tmp_qloop_104 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_1 =
                         ( tmp_qloop_144 * tmp_qloop_467 + tmp_qloop_144 * tmp_qloop_471 + tmp_qloop_144 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_2 =
                         ( tmp_qloop_145 * tmp_qloop_467 + tmp_qloop_145 * tmp_qloop_471 + tmp_qloop_145 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_9_3 =
                         ( tmp_qloop_146 * tmp_qloop_467 + tmp_qloop_146 * tmp_qloop_471 + tmp_qloop_146 * tmp_qloop_477 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_0 =
                         ( tmp_qloop_104 * tmp_qloop_479 + tmp_qloop_104 * tmp_qloop_480 + tmp_qloop_104 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_1 =
                         ( tmp_qloop_144 * tmp_qloop_479 + tmp_qloop_144 * tmp_qloop_480 + tmp_qloop_144 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_2 =
                         ( tmp_qloop_145 * tmp_qloop_479 + tmp_qloop_145 * tmp_qloop_480 + tmp_qloop_145 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_10_3 =
                         ( tmp_qloop_146 * tmp_qloop_479 + tmp_qloop_146 * tmp_qloop_480 + tmp_qloop_146 * tmp_qloop_481 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_0 =
                         ( tmp_qloop_104 * tmp_qloop_483 + tmp_qloop_104 * tmp_qloop_484 + tmp_qloop_104 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_1 =
                         ( tmp_qloop_144 * tmp_qloop_483 + tmp_qloop_144 * tmp_qloop_484 + tmp_qloop_144 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_2 =
                         ( tmp_qloop_145 * tmp_qloop_483 + tmp_qloop_145 * tmp_qloop_484 + tmp_qloop_145 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_11_3 =
                         ( tmp_qloop_146 * tmp_qloop_483 + tmp_qloop_146 * tmp_qloop_484 + tmp_qloop_146 * tmp_qloop_485 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_0 =
                         ( tmp_qloop_104 * tmp_qloop_487 + tmp_qloop_104 * tmp_qloop_488 + tmp_qloop_104 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_1 =
                         ( tmp_qloop_144 * tmp_qloop_487 + tmp_qloop_144 * tmp_qloop_488 + tmp_qloop_144 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_2 =
                         ( tmp_qloop_145 * tmp_qloop_487 + tmp_qloop_145 * tmp_qloop_488 + tmp_qloop_145 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_12_3 =
                         ( tmp_qloop_146 * tmp_qloop_487 + tmp_qloop_146 * tmp_qloop_488 + tmp_qloop_146 * tmp_qloop_489 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_0 =
                         ( tmp_qloop_104 * tmp_qloop_491 + tmp_qloop_104 * tmp_qloop_492 + tmp_qloop_104 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_1 =
                         ( tmp_qloop_144 * tmp_qloop_491 + tmp_qloop_144 * tmp_qloop_492 + tmp_qloop_144 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_2 =
                         ( tmp_qloop_145 * tmp_qloop_491 + tmp_qloop_145 * tmp_qloop_492 + tmp_qloop_145 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_13_3 =
                         ( tmp_qloop_146 * tmp_qloop_491 + tmp_qloop_146 * tmp_qloop_492 + tmp_qloop_146 * tmp_qloop_493 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_0 =
                         ( tmp_qloop_104 * tmp_qloop_495 + tmp_qloop_104 * tmp_qloop_496 + tmp_qloop_104 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_1 =
                         ( tmp_qloop_144 * tmp_qloop_495 + tmp_qloop_144 * tmp_qloop_496 + tmp_qloop_144 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_2 =
                         ( tmp_qloop_145 * tmp_qloop_495 + tmp_qloop_145 * tmp_qloop_496 + tmp_qloop_145 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_14_3 =
                         ( tmp_qloop_146 * tmp_qloop_495 + tmp_qloop_146 * tmp_qloop_496 + tmp_qloop_146 * tmp_qloop_497 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_0 =
                         ( tmp_qloop_104 * tmp_qloop_499 + tmp_qloop_104 * tmp_qloop_500 + tmp_qloop_104 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_1 =
                         ( tmp_qloop_144 * tmp_qloop_499 + tmp_qloop_144 * tmp_qloop_500 + tmp_qloop_144 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_2 =
                         ( tmp_qloop_145 * tmp_qloop_499 + tmp_qloop_145 * tmp_qloop_500 + tmp_qloop_145 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_15_3 =
                         ( tmp_qloop_146 * tmp_qloop_499 + tmp_qloop_146 * tmp_qloop_500 + tmp_qloop_146 * tmp_qloop_501 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_0 =
                         ( tmp_qloop_104 * tmp_qloop_503 + tmp_qloop_104 * tmp_qloop_504 + tmp_qloop_104 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_1 =
                         ( tmp_qloop_144 * tmp_qloop_503 + tmp_qloop_144 * tmp_qloop_504 + tmp_qloop_144 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_2 =
                         ( tmp_qloop_145 * tmp_qloop_503 + tmp_qloop_145 * tmp_qloop_504 + tmp_qloop_145 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_16_3 =
                         ( tmp_qloop_146 * tmp_qloop_503 + tmp_qloop_146 * tmp_qloop_504 + tmp_qloop_146 * tmp_qloop_505 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_0 =
                         ( tmp_qloop_104 * tmp_qloop_507 + tmp_qloop_104 * tmp_qloop_508 + tmp_qloop_104 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_1 =
                         ( tmp_qloop_144 * tmp_qloop_507 + tmp_qloop_144 * tmp_qloop_508 + tmp_qloop_144 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_2 =
                         ( tmp_qloop_145 * tmp_qloop_507 + tmp_qloop_145 * tmp_qloop_508 + tmp_qloop_145 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_17_3 =
                         ( tmp_qloop_146 * tmp_qloop_507 + tmp_qloop_146 * tmp_qloop_508 + tmp_qloop_146 * tmp_qloop_509 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_0 =
                         ( tmp_qloop_104 * tmp_qloop_511 + tmp_qloop_104 * tmp_qloop_512 + tmp_qloop_104 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_1 =
                         ( tmp_qloop_144 * tmp_qloop_511 + tmp_qloop_144 * tmp_qloop_512 + tmp_qloop_144 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_2 =
                         ( tmp_qloop_145 * tmp_qloop_511 + tmp_qloop_145 * tmp_qloop_512 + tmp_qloop_145 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_18_3 =
                         ( tmp_qloop_146 * tmp_qloop_511 + tmp_qloop_146 * tmp_qloop_512 + tmp_qloop_146 * tmp_qloop_513 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_0 =
                         ( tmp_qloop_104 * tmp_qloop_515 + tmp_qloop_104 * tmp_qloop_516 + tmp_qloop_104 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_1 =
                         ( tmp_qloop_144 * tmp_qloop_515 + tmp_qloop_144 * tmp_qloop_516 + tmp_qloop_144 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_2 =
                         ( tmp_qloop_145 * tmp_qloop_515 + tmp_qloop_145 * tmp_qloop_516 + tmp_qloop_145 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_19_3 =
                         ( tmp_qloop_146 * tmp_qloop_515 + tmp_qloop_146 * tmp_qloop_516 + tmp_qloop_146 * tmp_qloop_517 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_0 =
                         ( tmp_qloop_104 * tmp_qloop_518 + tmp_qloop_104 * tmp_qloop_519 + tmp_qloop_104 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_1 =
                         ( tmp_qloop_144 * tmp_qloop_518 + tmp_qloop_144 * tmp_qloop_519 + tmp_qloop_144 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_2 =
                         ( tmp_qloop_145 * tmp_qloop_518 + tmp_qloop_145 * tmp_qloop_519 + tmp_qloop_145 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_20_3 =
                         ( tmp_qloop_146 * tmp_qloop_518 + tmp_qloop_146 * tmp_qloop_519 + tmp_qloop_146 * tmp_qloop_520 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_0 =
                         ( tmp_qloop_104 * tmp_qloop_521 + tmp_qloop_104 * tmp_qloop_522 + tmp_qloop_104 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_1 =
                         ( tmp_qloop_144 * tmp_qloop_521 + tmp_qloop_144 * tmp_qloop_522 + tmp_qloop_144 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_2 =
                         ( tmp_qloop_145 * tmp_qloop_521 + tmp_qloop_145 * tmp_qloop_522 + tmp_qloop_145 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_21_3 =
                         ( tmp_qloop_146 * tmp_qloop_521 + tmp_qloop_146 * tmp_qloop_522 + tmp_qloop_146 * tmp_qloop_523 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_0 =
                         ( tmp_qloop_104 * tmp_qloop_524 + tmp_qloop_104 * tmp_qloop_525 + tmp_qloop_104 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_1 =
                         ( tmp_qloop_144 * tmp_qloop_524 + tmp_qloop_144 * tmp_qloop_525 + tmp_qloop_144 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_2 =
                         ( tmp_qloop_145 * tmp_qloop_524 + tmp_qloop_145 * tmp_qloop_525 + tmp_qloop_145 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_22_3 =
                         ( tmp_qloop_146 * tmp_qloop_524 + tmp_qloop_146 * tmp_qloop_525 + tmp_qloop_146 * tmp_qloop_526 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_0 =
                         ( tmp_qloop_104 * tmp_qloop_527 + tmp_qloop_104 * tmp_qloop_528 + tmp_qloop_104 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_1 =
                         ( tmp_qloop_144 * tmp_qloop_527 + tmp_qloop_144 * tmp_qloop_528 + tmp_qloop_144 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_2 =
                         ( tmp_qloop_145 * tmp_qloop_527 + tmp_qloop_145 * tmp_qloop_528 + tmp_qloop_145 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_23_3 =
                         ( tmp_qloop_146 * tmp_qloop_527 + tmp_qloop_146 * tmp_qloop_528 + tmp_qloop_146 * tmp_qloop_529 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_0 =
                         ( tmp_qloop_104 * tmp_qloop_530 + tmp_qloop_104 * tmp_qloop_531 + tmp_qloop_104 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_1 =
                         ( tmp_qloop_144 * tmp_qloop_530 + tmp_qloop_144 * tmp_qloop_531 + tmp_qloop_144 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_2 =
                         ( tmp_qloop_145 * tmp_qloop_530 + tmp_qloop_145 * tmp_qloop_531 + tmp_qloop_145 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_24_3 =
                         ( tmp_qloop_146 * tmp_qloop_530 + tmp_qloop_146 * tmp_qloop_531 + tmp_qloop_146 * tmp_qloop_532 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_0 =
                         ( tmp_qloop_104 * tmp_qloop_533 + tmp_qloop_104 * tmp_qloop_534 + tmp_qloop_104 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_1 =
                         ( tmp_qloop_144 * tmp_qloop_533 + tmp_qloop_144 * tmp_qloop_534 + tmp_qloop_144 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_2 =
                         ( tmp_qloop_145 * tmp_qloop_533 + tmp_qloop_145 * tmp_qloop_534 + tmp_qloop_145 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_25_3 =
                         ( tmp_qloop_146 * tmp_qloop_533 + tmp_qloop_146 * tmp_qloop_534 + tmp_qloop_146 * tmp_qloop_535 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_0 =
                         ( tmp_qloop_104 * tmp_qloop_536 + tmp_qloop_104 * tmp_qloop_537 + tmp_qloop_104 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_1 =
                         ( tmp_qloop_144 * tmp_qloop_536 + tmp_qloop_144 * tmp_qloop_537 + tmp_qloop_144 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_2 =
                         ( tmp_qloop_145 * tmp_qloop_536 + tmp_qloop_145 * tmp_qloop_537 + tmp_qloop_145 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_26_3 =
                         ( tmp_qloop_146 * tmp_qloop_536 + tmp_qloop_146 * tmp_qloop_537 + tmp_qloop_146 * tmp_qloop_538 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_0 =
                         ( tmp_qloop_104 * tmp_qloop_539 + tmp_qloop_104 * tmp_qloop_540 + tmp_qloop_104 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_1 =
                         ( tmp_qloop_144 * tmp_qloop_539 + tmp_qloop_144 * tmp_qloop_540 + tmp_qloop_144 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_2 =
                         ( tmp_qloop_145 * tmp_qloop_539 + tmp_qloop_145 * tmp_qloop_540 + tmp_qloop_145 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_27_3 =
                         ( tmp_qloop_146 * tmp_qloop_539 + tmp_qloop_146 * tmp_qloop_540 + tmp_qloop_146 * tmp_qloop_541 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_0 =
                         ( tmp_qloop_104 * tmp_qloop_542 + tmp_qloop_104 * tmp_qloop_543 + tmp_qloop_104 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_1 =
                         ( tmp_qloop_144 * tmp_qloop_542 + tmp_qloop_144 * tmp_qloop_543 + tmp_qloop_144 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_2 =
                         ( tmp_qloop_145 * tmp_qloop_542 + tmp_qloop_145 * tmp_qloop_543 + tmp_qloop_145 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_28_3 =
                         ( tmp_qloop_146 * tmp_qloop_542 + tmp_qloop_146 * tmp_qloop_543 + tmp_qloop_146 * tmp_qloop_544 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_0 =
                         ( tmp_qloop_104 * tmp_qloop_545 + tmp_qloop_104 * tmp_qloop_546 + tmp_qloop_104 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_1 =
                         ( tmp_qloop_144 * tmp_qloop_545 + tmp_qloop_144 * tmp_qloop_546 + tmp_qloop_144 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_2 =
                         ( tmp_qloop_145 * tmp_qloop_545 + tmp_qloop_145 * tmp_qloop_546 + tmp_qloop_145 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     const walberla::float64 q_tmp_29_3 =
                         ( tmp_qloop_146 * tmp_qloop_545 + tmp_qloop_146 * tmp_qloop_546 + tmp_qloop_146 * tmp_qloop_547 ) *
                         _data_q_w[q];
                     q_acc_0_0  = q_acc_0_0 + q_tmp_0_0;
                     q_acc_0_1  = q_acc_0_1 + q_tmp_0_1;
                     q_acc_0_2  = q_acc_0_2 + q_tmp_0_2;
                     q_acc_0_3  = q_acc_0_3 + q_tmp_0_3;
                     q_acc_1_0  = q_acc_1_0 + q_tmp_1_0;
                     q_acc_1_1  = q_acc_1_1 + q_tmp_1_1;
                     q_acc_1_2  = q_acc_1_2 + q_tmp_1_2;
                     q_acc_1_3  = q_acc_1_3 + q_tmp_1_3;
                     q_acc_2_0  = q_acc_2_0 + q_tmp_2_0;
                     q_acc_2_1  = q_acc_2_1 + q_tmp_2_1;
                     q_acc_2_2  = q_acc_2_2 + q_tmp_2_2;
                     q_acc_2_3  = q_acc_2_3 + q_tmp_2_3;
                     q_acc_3_0  = q_acc_3_0 + q_tmp_3_0;
                     q_acc_3_1  = q_acc_3_1 + q_tmp_3_1;
                     q_acc_3_2  = q_acc_3_2 + q_tmp_3_2;
                     q_acc_3_3  = q_acc_3_3 + q_tmp_3_3;
                     q_acc_4_0  = q_acc_4_0 + q_tmp_4_0;
                     q_acc_4_1  = q_acc_4_1 + q_tmp_4_1;
                     q_acc_4_2  = q_acc_4_2 + q_tmp_4_2;
                     q_acc_4_3  = q_acc_4_3 + q_tmp_4_3;
                     q_acc_5_0  = q_acc_5_0 + q_tmp_5_0;
                     q_acc_5_1  = q_acc_5_1 + q_tmp_5_1;
                     q_acc_5_2  = q_acc_5_2 + q_tmp_5_2;
                     q_acc_5_3  = q_acc_5_3 + q_tmp_5_3;
                     q_acc_6_0  = q_acc_6_0 + q_tmp_6_0;
                     q_acc_6_1  = q_acc_6_1 + q_tmp_6_1;
                     q_acc_6_2  = q_acc_6_2 + q_tmp_6_2;
                     q_acc_6_3  = q_acc_6_3 + q_tmp_6_3;
                     q_acc_7_0  = q_acc_7_0 + q_tmp_7_0;
                     q_acc_7_1  = q_acc_7_1 + q_tmp_7_1;
                     q_acc_7_2  = q_acc_7_2 + q_tmp_7_2;
                     q_acc_7_3  = q_acc_7_3 + q_tmp_7_3;
                     q_acc_8_0  = q_acc_8_0 + q_tmp_8_0;
                     q_acc_8_1  = q_acc_8_1 + q_tmp_8_1;
                     q_acc_8_2  = q_acc_8_2 + q_tmp_8_2;
                     q_acc_8_3  = q_acc_8_3 + q_tmp_8_3;
                     q_acc_9_0  = q_acc_9_0 + q_tmp_9_0;
                     q_acc_9_1  = q_acc_9_1 + q_tmp_9_1;
                     q_acc_9_2  = q_acc_9_2 + q_tmp_9_2;
                     q_acc_9_3  = q_acc_9_3 + q_tmp_9_3;
                     q_acc_10_0 = q_acc_10_0 + q_tmp_10_0;
                     q_acc_10_1 = q_acc_10_1 + q_tmp_10_1;
                     q_acc_10_2 = q_acc_10_2 + q_tmp_10_2;
                     q_acc_10_3 = q_acc_10_3 + q_tmp_10_3;
                     q_acc_11_0 = q_acc_11_0 + q_tmp_11_0;
                     q_acc_11_1 = q_acc_11_1 + q_tmp_11_1;
                     q_acc_11_2 = q_acc_11_2 + q_tmp_11_2;
                     q_acc_11_3 = q_acc_11_3 + q_tmp_11_3;
                     q_acc_12_0 = q_acc_12_0 + q_tmp_12_0;
                     q_acc_12_1 = q_acc_12_1 + q_tmp_12_1;
                     q_acc_12_2 = q_acc_12_2 + q_tmp_12_2;
                     q_acc_12_3 = q_acc_12_3 + q_tmp_12_3;
                     q_acc_13_0 = q_acc_13_0 + q_tmp_13_0;
                     q_acc_13_1 = q_acc_13_1 + q_tmp_13_1;
                     q_acc_13_2 = q_acc_13_2 + q_tmp_13_2;
                     q_acc_13_3 = q_acc_13_3 + q_tmp_13_3;
                     q_acc_14_0 = q_acc_14_0 + q_tmp_14_0;
                     q_acc_14_1 = q_acc_14_1 + q_tmp_14_1;
                     q_acc_14_2 = q_acc_14_2 + q_tmp_14_2;
                     q_acc_14_3 = q_acc_14_3 + q_tmp_14_3;
                     q_acc_15_0 = q_acc_15_0 + q_tmp_15_0;
                     q_acc_15_1 = q_acc_15_1 + q_tmp_15_1;
                     q_acc_15_2 = q_acc_15_2 + q_tmp_15_2;
                     q_acc_15_3 = q_acc_15_3 + q_tmp_15_3;
                     q_acc_16_0 = q_acc_16_0 + q_tmp_16_0;
                     q_acc_16_1 = q_acc_16_1 + q_tmp_16_1;
                     q_acc_16_2 = q_acc_16_2 + q_tmp_16_2;
                     q_acc_16_3 = q_acc_16_3 + q_tmp_16_3;
                     q_acc_17_0 = q_acc_17_0 + q_tmp_17_0;
                     q_acc_17_1 = q_acc_17_1 + q_tmp_17_1;
                     q_acc_17_2 = q_acc_17_2 + q_tmp_17_2;
                     q_acc_17_3 = q_acc_17_3 + q_tmp_17_3;
                     q_acc_18_0 = q_acc_18_0 + q_tmp_18_0;
                     q_acc_18_1 = q_acc_18_1 + q_tmp_18_1;
                     q_acc_18_2 = q_acc_18_2 + q_tmp_18_2;
                     q_acc_18_3 = q_acc_18_3 + q_tmp_18_3;
                     q_acc_19_0 = q_acc_19_0 + q_tmp_19_0;
                     q_acc_19_1 = q_acc_19_1 + q_tmp_19_1;
                     q_acc_19_2 = q_acc_19_2 + q_tmp_19_2;
                     q_acc_19_3 = q_acc_19_3 + q_tmp_19_3;
                     q_acc_20_0 = q_acc_20_0 + q_tmp_20_0;
                     q_acc_20_1 = q_acc_20_1 + q_tmp_20_1;
                     q_acc_20_2 = q_acc_20_2 + q_tmp_20_2;
                     q_acc_20_3 = q_acc_20_3 + q_tmp_20_3;
                     q_acc_21_0 = q_acc_21_0 + q_tmp_21_0;
                     q_acc_21_1 = q_acc_21_1 + q_tmp_21_1;
                     q_acc_21_2 = q_acc_21_2 + q_tmp_21_2;
                     q_acc_21_3 = q_acc_21_3 + q_tmp_21_3;
                     q_acc_22_0 = q_acc_22_0 + q_tmp_22_0;
                     q_acc_22_1 = q_acc_22_1 + q_tmp_22_1;
                     q_acc_22_2 = q_acc_22_2 + q_tmp_22_2;
                     q_acc_22_3 = q_acc_22_3 + q_tmp_22_3;
                     q_acc_23_0 = q_acc_23_0 + q_tmp_23_0;
                     q_acc_23_1 = q_acc_23_1 + q_tmp_23_1;
                     q_acc_23_2 = q_acc_23_2 + q_tmp_23_2;
                     q_acc_23_3 = q_acc_23_3 + q_tmp_23_3;
                     q_acc_24_0 = q_acc_24_0 + q_tmp_24_0;
                     q_acc_24_1 = q_acc_24_1 + q_tmp_24_1;
                     q_acc_24_2 = q_acc_24_2 + q_tmp_24_2;
                     q_acc_24_3 = q_acc_24_3 + q_tmp_24_3;
                     q_acc_25_0 = q_acc_25_0 + q_tmp_25_0;
                     q_acc_25_1 = q_acc_25_1 + q_tmp_25_1;
                     q_acc_25_2 = q_acc_25_2 + q_tmp_25_2;
                     q_acc_25_3 = q_acc_25_3 + q_tmp_25_3;
                     q_acc_26_0 = q_acc_26_0 + q_tmp_26_0;
                     q_acc_26_1 = q_acc_26_1 + q_tmp_26_1;
                     q_acc_26_2 = q_acc_26_2 + q_tmp_26_2;
                     q_acc_26_3 = q_acc_26_3 + q_tmp_26_3;
                     q_acc_27_0 = q_acc_27_0 + q_tmp_27_0;
                     q_acc_27_1 = q_acc_27_1 + q_tmp_27_1;
                     q_acc_27_2 = q_acc_27_2 + q_tmp_27_2;
                     q_acc_27_3 = q_acc_27_3 + q_tmp_27_3;
                     q_acc_28_0 = q_acc_28_0 + q_tmp_28_0;
                     q_acc_28_1 = q_acc_28_1 + q_tmp_28_1;
                     q_acc_28_2 = q_acc_28_2 + q_tmp_28_2;
                     q_acc_28_3 = q_acc_28_3 + q_tmp_28_3;
                     q_acc_29_0 = q_acc_29_0 + q_tmp_29_0;
                     q_acc_29_1 = q_acc_29_1 + q_tmp_29_1;
                     q_acc_29_2 = q_acc_29_2 + q_tmp_29_2;
                     q_acc_29_3 = q_acc_29_3 + q_tmp_29_3;
                  }
                  const walberla::float64 elMat_0_0  = q_acc_0_0;
                  const walberla::float64 elMat_0_1  = q_acc_0_1;
                  const walberla::float64 elMat_0_2  = q_acc_0_2;
                  const walberla::float64 elMat_0_3  = q_acc_0_3;
                  const walberla::float64 elMat_1_0  = q_acc_1_0;
                  const walberla::float64 elMat_1_1  = q_acc_1_1;
                  const walberla::float64 elMat_1_2  = q_acc_1_2;
                  const walberla::float64 elMat_1_3  = q_acc_1_3;
                  const walberla::float64 elMat_2_0  = q_acc_2_0;
                  const walberla::float64 elMat_2_1  = q_acc_2_1;
                  const walberla::float64 elMat_2_2  = q_acc_2_2;
                  const walberla::float64 elMat_2_3  = q_acc_2_3;
                  const walberla::float64 elMat_3_0  = q_acc_3_0;
                  const walberla::float64 elMat_3_1  = q_acc_3_1;
                  const walberla::float64 elMat_3_2  = q_acc_3_2;
                  const walberla::float64 elMat_3_3  = q_acc_3_3;
                  const walberla::float64 elMat_4_0  = q_acc_4_0;
                  const walberla::float64 elMat_4_1  = q_acc_4_1;
                  const walberla::float64 elMat_4_2  = q_acc_4_2;
                  const walberla::float64 elMat_4_3  = q_acc_4_3;
                  const walberla::float64 elMat_5_0  = q_acc_5_0;
                  const walberla::float64 elMat_5_1  = q_acc_5_1;
                  const walberla::float64 elMat_5_2  = q_acc_5_2;
                  const walberla::float64 elMat_5_3  = q_acc_5_3;
                  const walberla::float64 elMat_6_0  = q_acc_6_0;
                  const walberla::float64 elMat_6_1  = q_acc_6_1;
                  const walberla::float64 elMat_6_2  = q_acc_6_2;
                  const walberla::float64 elMat_6_3  = q_acc_6_3;
                  const walberla::float64 elMat_7_0  = q_acc_7_0;
                  const walberla::float64 elMat_7_1  = q_acc_7_1;
                  const walberla::float64 elMat_7_2  = q_acc_7_2;
                  const walberla::float64 elMat_7_3  = q_acc_7_3;
                  const walberla::float64 elMat_8_0  = q_acc_8_0;
                  const walberla::float64 elMat_8_1  = q_acc_8_1;
                  const walberla::float64 elMat_8_2  = q_acc_8_2;
                  const walberla::float64 elMat_8_3  = q_acc_8_3;
                  const walberla::float64 elMat_9_0  = q_acc_9_0;
                  const walberla::float64 elMat_9_1  = q_acc_9_1;
                  const walberla::float64 elMat_9_2  = q_acc_9_2;
                  const walberla::float64 elMat_9_3  = q_acc_9_3;
                  const walberla::float64 elMat_10_0 = q_acc_10_0;
                  const walberla::float64 elMat_10_1 = q_acc_10_1;
                  const walberla::float64 elMat_10_2 = q_acc_10_2;
                  const walberla::float64 elMat_10_3 = q_acc_10_3;
                  const walberla::float64 elMat_11_0 = q_acc_11_0;
                  const walberla::float64 elMat_11_1 = q_acc_11_1;
                  const walberla::float64 elMat_11_2 = q_acc_11_2;
                  const walberla::float64 elMat_11_3 = q_acc_11_3;
                  const walberla::float64 elMat_12_0 = q_acc_12_0;
                  const walberla::float64 elMat_12_1 = q_acc_12_1;
                  const walberla::float64 elMat_12_2 = q_acc_12_2;
                  const walberla::float64 elMat_12_3 = q_acc_12_3;
                  const walberla::float64 elMat_13_0 = q_acc_13_0;
                  const walberla::float64 elMat_13_1 = q_acc_13_1;
                  const walberla::float64 elMat_13_2 = q_acc_13_2;
                  const walberla::float64 elMat_13_3 = q_acc_13_3;
                  const walberla::float64 elMat_14_0 = q_acc_14_0;
                  const walberla::float64 elMat_14_1 = q_acc_14_1;
                  const walberla::float64 elMat_14_2 = q_acc_14_2;
                  const walberla::float64 elMat_14_3 = q_acc_14_3;
                  const walberla::float64 elMat_15_0 = q_acc_15_0;
                  const walberla::float64 elMat_15_1 = q_acc_15_1;
                  const walberla::float64 elMat_15_2 = q_acc_15_2;
                  const walberla::float64 elMat_15_3 = q_acc_15_3;
                  const walberla::float64 elMat_16_0 = q_acc_16_0;
                  const walberla::float64 elMat_16_1 = q_acc_16_1;
                  const walberla::float64 elMat_16_2 = q_acc_16_2;
                  const walberla::float64 elMat_16_3 = q_acc_16_3;
                  const walberla::float64 elMat_17_0 = q_acc_17_0;
                  const walberla::float64 elMat_17_1 = q_acc_17_1;
                  const walberla::float64 elMat_17_2 = q_acc_17_2;
                  const walberla::float64 elMat_17_3 = q_acc_17_3;
                  const walberla::float64 elMat_18_0 = q_acc_18_0;
                  const walberla::float64 elMat_18_1 = q_acc_18_1;
                  const walberla::float64 elMat_18_2 = q_acc_18_2;
                  const walberla::float64 elMat_18_3 = q_acc_18_3;
                  const walberla::float64 elMat_19_0 = q_acc_19_0;
                  const walberla::float64 elMat_19_1 = q_acc_19_1;
                  const walberla::float64 elMat_19_2 = q_acc_19_2;
                  const walberla::float64 elMat_19_3 = q_acc_19_3;
                  const walberla::float64 elMat_20_0 = q_acc_20_0;
                  const walberla::float64 elMat_20_1 = q_acc_20_1;
                  const walberla::float64 elMat_20_2 = q_acc_20_2;
                  const walberla::float64 elMat_20_3 = q_acc_20_3;
                  const walberla::float64 elMat_21_0 = q_acc_21_0;
                  const walberla::float64 elMat_21_1 = q_acc_21_1;
                  const walberla::float64 elMat_21_2 = q_acc_21_2;
                  const walberla::float64 elMat_21_3 = q_acc_21_3;
                  const walberla::float64 elMat_22_0 = q_acc_22_0;
                  const walberla::float64 elMat_22_1 = q_acc_22_1;
                  const walberla::float64 elMat_22_2 = q_acc_22_2;
                  const walberla::float64 elMat_22_3 = q_acc_22_3;
                  const walberla::float64 elMat_23_0 = q_acc_23_0;
                  const walberla::float64 elMat_23_1 = q_acc_23_1;
                  const walberla::float64 elMat_23_2 = q_acc_23_2;
                  const walberla::float64 elMat_23_3 = q_acc_23_3;
                  const walberla::float64 elMat_24_0 = q_acc_24_0;
                  const walberla::float64 elMat_24_1 = q_acc_24_1;
                  const walberla::float64 elMat_24_2 = q_acc_24_2;
                  const walberla::float64 elMat_24_3 = q_acc_24_3;
                  const walberla::float64 elMat_25_0 = q_acc_25_0;
                  const walberla::float64 elMat_25_1 = q_acc_25_1;
                  const walberla::float64 elMat_25_2 = q_acc_25_2;
                  const walberla::float64 elMat_25_3 = q_acc_25_3;
                  const walberla::float64 elMat_26_0 = q_acc_26_0;
                  const walberla::float64 elMat_26_1 = q_acc_26_1;
                  const walberla::float64 elMat_26_2 = q_acc_26_2;
                  const walberla::float64 elMat_26_3 = q_acc_26_3;
                  const walberla::float64 elMat_27_0 = q_acc_27_0;
                  const walberla::float64 elMat_27_1 = q_acc_27_1;
                  const walberla::float64 elMat_27_2 = q_acc_27_2;
                  const walberla::float64 elMat_27_3 = q_acc_27_3;
                  const walberla::float64 elMat_28_0 = q_acc_28_0;
                  const walberla::float64 elMat_28_1 = q_acc_28_1;
                  const walberla::float64 elMat_28_2 = q_acc_28_2;
                  const walberla::float64 elMat_28_3 = q_acc_28_3;
                  const walberla::float64 elMat_29_0 = q_acc_29_0;
                  const walberla::float64 elMat_29_1 = q_acc_29_1;
                  const walberla::float64 elMat_29_2 = q_acc_29_2;
                  const walberla::float64 elMat_29_3 = q_acc_29_3;

                  std::vector< uint_t > _data_rowIdx( 30 );
                  std::vector< uint_t > _data_colIdx( 4 );
                  std::vector< real_t > _data_mat( 120 );

                  _data_rowIdx[0] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[1] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[2] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[3] = ( (
                      uint64_t) ( _data_dst_vertex_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[4] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[5] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[6] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[7] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[8] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[9] =
                      ( (uint64_t) ( _data_dst_edge_0[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[10] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[11] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[12] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[13] = ( (
                      uint64_t) ( _data_dst_vertex_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[14] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[15] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[16] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[17] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[18] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[19] =
                      ( (uint64_t) ( _data_dst_edge_1[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[20] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[21] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[22] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) ) +
                                                     1] ) );
                  _data_rowIdx[23] = ( (
                      uint64_t) ( _data_dst_vertex_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                     ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                                     ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                         ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                       ( 6 ) ) +
                                                     ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                         ( micro_edges_per_macro_edge + 3 ) ) /
                                                       ( 6 ) )] ) );
                  _data_rowIdx[24] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      4 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[25] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      5 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[26] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) +
                                                      1] ) );
                  _data_rowIdx[27] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      3 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[28] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge ) -
                                                      ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge - 1 ) *
                                                          ( micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) ) +
                                                      6 * ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                              ( micro_edges_per_macro_edge + 2 ) ) /
                                                            ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge - 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) ) /
                                                        ( 6 ) )] ) );
                  _data_rowIdx[29] =
                      ( (uint64_t) ( _data_dst_edge_2[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                                      ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                                      ( ( micro_edges_per_macro_edge * ( micro_edges_per_macro_edge + 1 ) *
                                                          ( micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) ) -
                                                      ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                          ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                        ( 6 ) )] ) );
                  _data_colIdx[0] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );
                  _data_colIdx[1] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 2 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[2] =
                      ( (uint64_t) ( _data_src[ctr_0 + ctr_1 * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ctr_1 * ( ctr_1 + 1 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) ) +
                                               1] ) );
                  _data_colIdx[3] =
                      ( (uint64_t) ( _data_src[ctr_0 + ( ctr_1 + 1 ) * ( -ctr_2 + micro_edges_per_macro_edge + 1 ) -
                                               ( ( ( ctr_1 + 1 ) * ( ctr_1 + 2 ) ) / ( 2 ) ) -
                                               ( ( ( -ctr_2 + micro_edges_per_macro_edge ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 1 ) *
                                                   ( -ctr_2 + micro_edges_per_macro_edge + 2 ) ) /
                                                 ( 6 ) ) +
                                               ( ( ( micro_edges_per_macro_edge + 1 ) * ( micro_edges_per_macro_edge + 2 ) *
                                                   ( micro_edges_per_macro_edge + 3 ) ) /
                                                 ( 6 ) )] ) );

                  /* Apply basis transformation */

                  _data_mat[0]   = ( (real_t) ( elMat_0_0 ) );
                  _data_mat[1]   = ( (real_t) ( elMat_0_1 ) );
                  _data_mat[2]   = ( (real_t) ( elMat_0_2 ) );
                  _data_mat[3]   = ( (real_t) ( elMat_0_3 ) );
                  _data_mat[4]   = ( (real_t) ( elMat_1_0 ) );
                  _data_mat[5]   = ( (real_t) ( elMat_1_1 ) );
                  _data_mat[6]   = ( (real_t) ( elMat_1_2 ) );
                  _data_mat[7]   = ( (real_t) ( elMat_1_3 ) );
                  _data_mat[8]   = ( (real_t) ( elMat_2_0 ) );
                  _data_mat[9]   = ( (real_t) ( elMat_2_1 ) );
                  _data_mat[10]  = ( (real_t) ( elMat_2_2 ) );
                  _data_mat[11]  = ( (real_t) ( elMat_2_3 ) );
                  _data_mat[12]  = ( (real_t) ( elMat_3_0 ) );
                  _data_mat[13]  = ( (real_t) ( elMat_3_1 ) );
                  _data_mat[14]  = ( (real_t) ( elMat_3_2 ) );
                  _data_mat[15]  = ( (real_t) ( elMat_3_3 ) );
                  _data_mat[16]  = ( (real_t) ( elMat_4_0 ) );
                  _data_mat[17]  = ( (real_t) ( elMat_4_1 ) );
                  _data_mat[18]  = ( (real_t) ( elMat_4_2 ) );
                  _data_mat[19]  = ( (real_t) ( elMat_4_3 ) );
                  _data_mat[20]  = ( (real_t) ( elMat_5_0 ) );
                  _data_mat[21]  = ( (real_t) ( elMat_5_1 ) );
                  _data_mat[22]  = ( (real_t) ( elMat_5_2 ) );
                  _data_mat[23]  = ( (real_t) ( elMat_5_3 ) );
                  _data_mat[24]  = ( (real_t) ( elMat_6_0 ) );
                  _data_mat[25]  = ( (real_t) ( elMat_6_1 ) );
                  _data_mat[26]  = ( (real_t) ( elMat_6_2 ) );
                  _data_mat[27]  = ( (real_t) ( elMat_6_3 ) );
                  _data_mat[28]  = ( (real_t) ( elMat_7_0 ) );
                  _data_mat[29]  = ( (real_t) ( elMat_7_1 ) );
                  _data_mat[30]  = ( (real_t) ( elMat_7_2 ) );
                  _data_mat[31]  = ( (real_t) ( elMat_7_3 ) );
                  _data_mat[32]  = ( (real_t) ( elMat_8_0 ) );
                  _data_mat[33]  = ( (real_t) ( elMat_8_1 ) );
                  _data_mat[34]  = ( (real_t) ( elMat_8_2 ) );
                  _data_mat[35]  = ( (real_t) ( elMat_8_3 ) );
                  _data_mat[36]  = ( (real_t) ( elMat_9_0 ) );
                  _data_mat[37]  = ( (real_t) ( elMat_9_1 ) );
                  _data_mat[38]  = ( (real_t) ( elMat_9_2 ) );
                  _data_mat[39]  = ( (real_t) ( elMat_9_3 ) );
                  _data_mat[40]  = ( (real_t) ( elMat_10_0 ) );
                  _data_mat[41]  = ( (real_t) ( elMat_10_1 ) );
                  _data_mat[42]  = ( (real_t) ( elMat_10_2 ) );
                  _data_mat[43]  = ( (real_t) ( elMat_10_3 ) );
                  _data_mat[44]  = ( (real_t) ( elMat_11_0 ) );
                  _data_mat[45]  = ( (real_t) ( elMat_11_1 ) );
                  _data_mat[46]  = ( (real_t) ( elMat_11_2 ) );
                  _data_mat[47]  = ( (real_t) ( elMat_11_3 ) );
                  _data_mat[48]  = ( (real_t) ( elMat_12_0 ) );
                  _data_mat[49]  = ( (real_t) ( elMat_12_1 ) );
                  _data_mat[50]  = ( (real_t) ( elMat_12_2 ) );
                  _data_mat[51]  = ( (real_t) ( elMat_12_3 ) );
                  _data_mat[52]  = ( (real_t) ( elMat_13_0 ) );
                  _data_mat[53]  = ( (real_t) ( elMat_13_1 ) );
                  _data_mat[54]  = ( (real_t) ( elMat_13_2 ) );
                  _data_mat[55]  = ( (real_t) ( elMat_13_3 ) );
                  _data_mat[56]  = ( (real_t) ( elMat_14_0 ) );
                  _data_mat[57]  = ( (real_t) ( elMat_14_1 ) );
                  _data_mat[58]  = ( (real_t) ( elMat_14_2 ) );
                  _data_mat[59]  = ( (real_t) ( elMat_14_3 ) );
                  _data_mat[60]  = ( (real_t) ( elMat_15_0 ) );
                  _data_mat[61]  = ( (real_t) ( elMat_15_1 ) );
                  _data_mat[62]  = ( (real_t) ( elMat_15_2 ) );
                  _data_mat[63]  = ( (real_t) ( elMat_15_3 ) );
                  _data_mat[64]  = ( (real_t) ( elMat_16_0 ) );
                  _data_mat[65]  = ( (real_t) ( elMat_16_1 ) );
                  _data_mat[66]  = ( (real_t) ( elMat_16_2 ) );
                  _data_mat[67]  = ( (real_t) ( elMat_16_3 ) );
                  _data_mat[68]  = ( (real_t) ( elMat_17_0 ) );
                  _data_mat[69]  = ( (real_t) ( elMat_17_1 ) );
                  _data_mat[70]  = ( (real_t) ( elMat_17_2 ) );
                  _data_mat[71]  = ( (real_t) ( elMat_17_3 ) );
                  _data_mat[72]  = ( (real_t) ( elMat_18_0 ) );
                  _data_mat[73]  = ( (real_t) ( elMat_18_1 ) );
                  _data_mat[74]  = ( (real_t) ( elMat_18_2 ) );
                  _data_mat[75]  = ( (real_t) ( elMat_18_3 ) );
                  _data_mat[76]  = ( (real_t) ( elMat_19_0 ) );
                  _data_mat[77]  = ( (real_t) ( elMat_19_1 ) );
                  _data_mat[78]  = ( (real_t) ( elMat_19_2 ) );
                  _data_mat[79]  = ( (real_t) ( elMat_19_3 ) );
                  _data_mat[80]  = ( (real_t) ( elMat_20_0 ) );
                  _data_mat[81]  = ( (real_t) ( elMat_20_1 ) );
                  _data_mat[82]  = ( (real_t) ( elMat_20_2 ) );
                  _data_mat[83]  = ( (real_t) ( elMat_20_3 ) );
                  _data_mat[84]  = ( (real_t) ( elMat_21_0 ) );
                  _data_mat[85]  = ( (real_t) ( elMat_21_1 ) );
                  _data_mat[86]  = ( (real_t) ( elMat_21_2 ) );
                  _data_mat[87]  = ( (real_t) ( elMat_21_3 ) );
                  _data_mat[88]  = ( (real_t) ( elMat_22_0 ) );
                  _data_mat[89]  = ( (real_t) ( elMat_22_1 ) );
                  _data_mat[90]  = ( (real_t) ( elMat_22_2 ) );
                  _data_mat[91]  = ( (real_t) ( elMat_22_3 ) );
                  _data_mat[92]  = ( (real_t) ( elMat_23_0 ) );
                  _data_mat[93]  = ( (real_t) ( elMat_23_1 ) );
                  _data_mat[94]  = ( (real_t) ( elMat_23_2 ) );
                  _data_mat[95]  = ( (real_t) ( elMat_23_3 ) );
                  _data_mat[96]  = ( (real_t) ( elMat_24_0 ) );
                  _data_mat[97]  = ( (real_t) ( elMat_24_1 ) );
                  _data_mat[98]  = ( (real_t) ( elMat_24_2 ) );
                  _data_mat[99]  = ( (real_t) ( elMat_24_3 ) );
                  _data_mat[100] = ( (real_t) ( elMat_25_0 ) );
                  _data_mat[101] = ( (real_t) ( elMat_25_1 ) );
                  _data_mat[102] = ( (real_t) ( elMat_25_2 ) );
                  _data_mat[103] = ( (real_t) ( elMat_25_3 ) );
                  _data_mat[104] = ( (real_t) ( elMat_26_0 ) );
                  _data_mat[105] = ( (real_t) ( elMat_26_1 ) );
                  _data_mat[106] = ( (real_t) ( elMat_26_2 ) );
                  _data_mat[107] = ( (real_t) ( elMat_26_3 ) );
                  _data_mat[108] = ( (real_t) ( elMat_27_0 ) );
                  _data_mat[109] = ( (real_t) ( elMat_27_1 ) );
                  _data_mat[110] = ( (real_t) ( elMat_27_2 ) );
                  _data_mat[111] = ( (real_t) ( elMat_27_3 ) );
                  _data_mat[112] = ( (real_t) ( elMat_28_0 ) );
                  _data_mat[113] = ( (real_t) ( elMat_28_1 ) );
                  _data_mat[114] = ( (real_t) ( elMat_28_2 ) );
                  _data_mat[115] = ( (real_t) ( elMat_28_3 ) );
                  _data_mat[116] = ( (real_t) ( elMat_29_0 ) );
                  _data_mat[117] = ( (real_t) ( elMat_29_1 ) );
                  _data_mat[118] = ( (real_t) ( elMat_29_2 ) );
                  _data_mat[119] = ( (real_t) ( elMat_29_3 ) );

                  mat->addValues( _data_rowIdx, _data_colIdx, _data_mat );
               }
      }
   }
}

} // namespace operatorgeneration

} // namespace hyteg
