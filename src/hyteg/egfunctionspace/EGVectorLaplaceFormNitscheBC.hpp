
/*
* Copyright (c) 2017-2022 Nils Kohl.
*
* This file is part of HyTeG
* (see https://i10git.cs.fau.de/hyteg/hyteg).
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

# pragma once

# include "core/DataTypes.h"

# include "hyteg/dgfunctionspace/DGBasisInfo.hpp"
# include "hyteg/dgfunctionspace/DGForm.hpp"
# include "hyteg/dgfunctionspace/DGForm2D.hpp"
# include "hyteg/types/matrix.hpp"
# include "hyteg/types/pointnd.hpp"

# include "Eigen/Eigen"

namespace hyteg {
namespace dg{
namespace eg{

class EGVectorLaplaceFormNitscheBC_P1P1_00 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1P1_00()
: callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g0( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g0( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = 1.0 / (tmp_4);
      real_t tmp_6 = tmp_0*tmp_5;
      real_t tmp_7 = tmp_2*tmp_5;
      real_t tmp_8 = -tmp_6 - tmp_7;
      real_t tmp_9 = tmp_1*tmp_5;
      real_t tmp_10 = tmp_3*tmp_5;
      real_t tmp_11 = -tmp_10 - tmp_9;
      real_t tmp_12 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_13 = tmp_12*((tmp_11*tmp_11) + (tmp_8*tmp_8));
      real_t tmp_14 = tmp_12*(tmp_11*tmp_9 + tmp_7*tmp_8);
      real_t tmp_15 = 0.5*tmp_14;
      real_t tmp_16 = tmp_12*(tmp_10*tmp_11 + tmp_6*tmp_8);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = 1.0 / (tmp_4*tmp_4);
      real_t tmp_19 = tmp_12*((tmp_1*tmp_1)*tmp_18 + tmp_18*(tmp_2*tmp_2));
      real_t tmp_20 = tmp_12*(tmp_0*tmp_18*tmp_2 + tmp_1*tmp_18*tmp_3);
      real_t tmp_21 = 0.5*tmp_20;
      real_t tmp_22 = tmp_12*((tmp_0*tmp_0)*tmp_18 + tmp_18*(tmp_3*tmp_3));
      real_t a_0_0 = 0.5*tmp_13;
      real_t a_0_1 = tmp_15;
      real_t a_0_2 = tmp_17;
      real_t a_1_0 = tmp_15;
      real_t a_1_1 = 0.5*tmp_19;
      real_t a_1_2 = tmp_21;
      real_t a_2_0 = tmp_17;
      real_t a_2_1 = tmp_21;
      real_t a_2_2 = 0.5*tmp_22;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = -tmp_15 - tmp_18 + 1;
      real_t tmp_20 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_21 = 1.0*tmp_20;
      real_t tmp_22 = 0.11846344252809471*tmp_2;
      real_t tmp_23 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_24 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_25 = tmp_11*tmp_23 + tmp_14*tmp_24;
      real_t tmp_26 = tmp_16*tmp_23 + tmp_17*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_2;
      real_t tmp_29 = 0.5*tmp_1 + tmp_4;
      real_t tmp_30 = 0.5*tmp_0 + tmp_12;
      real_t tmp_31 = tmp_11*tmp_29 + tmp_14*tmp_30;
      real_t tmp_32 = tmp_16*tmp_29 + tmp_17*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_2;
      real_t tmp_35 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_36 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_37 = tmp_11*tmp_35 + tmp_14*tmp_36;
      real_t tmp_38 = tmp_16*tmp_35 + tmp_17*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_2;
      real_t tmp_41 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_42 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_43 = tmp_11*tmp_41 + tmp_14*tmp_42;
      real_t tmp_44 = tmp_16*tmp_41 + tmp_17*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_2;
      real_t tmp_47 = 0.5*tmp_20;
      real_t tmp_48 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_49 = 0.5*tmp_48;
      real_t tmp_50 = tmp_22*(3*tmp_15*tmp_19*tmp_3 - tmp_15*tmp_47 - tmp_19*tmp_49) + tmp_28*(3*tmp_25*tmp_27*tmp_3 - tmp_25*tmp_47 - tmp_27*tmp_49) + tmp_34*(3*tmp_3*tmp_31*tmp_33 - tmp_31*tmp_47 - tmp_33*tmp_49) + tmp_40*(3*tmp_3*tmp_37*tmp_39 - tmp_37*tmp_47 - tmp_39*tmp_49) + tmp_46*(3*tmp_3*tmp_43*tmp_45 - tmp_43*tmp_47 - tmp_45*tmp_49);
      real_t tmp_51 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t tmp_52 = 0.5*tmp_51;
      real_t tmp_53 = tmp_22*(3*tmp_18*tmp_19*tmp_3 - tmp_18*tmp_47 - tmp_19*tmp_52) + tmp_28*(3*tmp_26*tmp_27*tmp_3 - tmp_26*tmp_47 - tmp_27*tmp_52) + tmp_34*(3*tmp_3*tmp_32*tmp_33 - tmp_32*tmp_47 - tmp_33*tmp_52) + tmp_40*(3*tmp_3*tmp_38*tmp_39 - tmp_38*tmp_47 - tmp_39*tmp_52) + tmp_46*(3*tmp_3*tmp_44*tmp_45 - tmp_44*tmp_47 - tmp_45*tmp_52);
      real_t tmp_54 = 1.0*tmp_48;
      real_t tmp_55 = tmp_22*(3*tmp_15*tmp_18*tmp_3 - tmp_15*tmp_52 - tmp_18*tmp_49) + tmp_28*(3*tmp_25*tmp_26*tmp_3 - tmp_25*tmp_52 - tmp_26*tmp_49) + tmp_34*(3*tmp_3*tmp_31*tmp_32 - tmp_31*tmp_52 - tmp_32*tmp_49) + tmp_40*(3*tmp_3*tmp_37*tmp_38 - tmp_37*tmp_52 - tmp_38*tmp_49) + tmp_46*(3*tmp_3*tmp_43*tmp_44 - tmp_43*tmp_52 - tmp_44*tmp_49);
      real_t tmp_56 = 1.0*tmp_51;
      real_t a_0_0 = tmp_22*(3*(tmp_19*tmp_19)*tmp_3 - tmp_19*tmp_21) + tmp_28*(-tmp_21*tmp_27 + 3*(tmp_27*tmp_27)*tmp_3) + tmp_34*(-tmp_21*tmp_33 + 3*tmp_3*(tmp_33*tmp_33)) + tmp_40*(-tmp_21*tmp_39 + 3*tmp_3*(tmp_39*tmp_39)) + tmp_46*(-tmp_21*tmp_45 + 3*tmp_3*(tmp_45*tmp_45));
      real_t a_0_1 = tmp_50;
      real_t a_0_2 = tmp_53;
      real_t a_1_0 = tmp_50;
      real_t a_1_1 = tmp_22*(3*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_54) + tmp_28*(3*(tmp_25*tmp_25)*tmp_3 - tmp_25*tmp_54) + tmp_34*(3*tmp_3*(tmp_31*tmp_31) - tmp_31*tmp_54) + tmp_40*(3*tmp_3*(tmp_37*tmp_37) - tmp_37*tmp_54) + tmp_46*(3*tmp_3*(tmp_43*tmp_43) - tmp_43*tmp_54);
      real_t a_1_2 = tmp_55;
      real_t a_2_0 = tmp_53;
      real_t a_2_1 = tmp_55;
      real_t a_2_2 = tmp_22*(3*(tmp_18*tmp_18)*tmp_3 - tmp_18*tmp_56) + tmp_28*(3*(tmp_26*tmp_26)*tmp_3 - tmp_26*tmp_56) + tmp_34*(3*tmp_3*(tmp_32*tmp_32) - tmp_32*tmp_56) + tmp_40*(3*tmp_3*(tmp_38*tmp_38) - tmp_38*tmp_56) + tmp_46*(3*tmp_3*(tmp_44*tmp_44) - tmp_44*tmp_56);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (tmp_0*tmp_1 - tmp_2*tmp_3);
      real_t tmp_5 = tmp_0*tmp_4;
      real_t tmp_6 = tmp_3*tmp_4;
      real_t tmp_7 = tmp_1*tmp_4;
      real_t tmp_8 = tmp_2*tmp_4;
      real_t tmp_9 = p_affine_10_0*(-tmp_5 - tmp_6) + p_affine_10_1*(-tmp_7 - tmp_8);
      real_t tmp_10 = -p_affine_3_1;
      real_t tmp_11 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_12 = p_affine_6_1 + 0.046910077030668018*tmp_11;
      real_t tmp_13 = tmp_10 + tmp_12;
      real_t tmp_14 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_15 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_16 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_17 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_18 = 1.0 / (-tmp_14*tmp_17 + tmp_15*tmp_16);
      real_t tmp_19 = tmp_14*tmp_18;
      real_t tmp_20 = -p_affine_3_0;
      real_t tmp_21 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_22 = p_affine_6_0 + 0.046910077030668018*tmp_21;
      real_t tmp_23 = tmp_20 + tmp_22;
      real_t tmp_24 = tmp_16*tmp_18;
      real_t tmp_25 = tmp_13*tmp_19 + tmp_23*tmp_24;
      real_t tmp_26 = tmp_15*tmp_18;
      real_t tmp_27 = tmp_17*tmp_18;
      real_t tmp_28 = tmp_13*tmp_26 + tmp_23*tmp_27;
      real_t tmp_29 = -tmp_25 - tmp_28 + 1;
      real_t tmp_30 = -p_affine_0_1;
      real_t tmp_31 = tmp_12 + tmp_30;
      real_t tmp_32 = -p_affine_0_0;
      real_t tmp_33 = tmp_22 + tmp_32;
      real_t tmp_34 = tmp_31*tmp_8 + tmp_33*tmp_5;
      real_t tmp_35 = tmp_31*tmp_7 + tmp_33*tmp_6;
      real_t tmp_36 = -tmp_34 - tmp_35 + 1;
      real_t tmp_37 = 0.5*p_affine_10_0*(-tmp_24 - tmp_27) + 0.5*p_affine_10_1*(-tmp_19 - tmp_26);
      real_t tmp_38 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_21*tmp_21), 1.0/2.0));
      real_t tmp_39 = 3/tmp_38;
      real_t tmp_40 = tmp_36*tmp_39;
      real_t tmp_41 = 0.11846344252809471*tmp_38;
      real_t tmp_42 = p_affine_6_1 + 0.23076534494715845*tmp_11;
      real_t tmp_43 = tmp_10 + tmp_42;
      real_t tmp_44 = p_affine_6_0 + 0.23076534494715845*tmp_21;
      real_t tmp_45 = tmp_20 + tmp_44;
      real_t tmp_46 = tmp_19*tmp_43 + tmp_24*tmp_45;
      real_t tmp_47 = tmp_26*tmp_43 + tmp_27*tmp_45;
      real_t tmp_48 = -tmp_46 - tmp_47 + 1;
      real_t tmp_49 = tmp_30 + tmp_42;
      real_t tmp_50 = tmp_32 + tmp_44;
      real_t tmp_51 = tmp_49*tmp_8 + tmp_5*tmp_50;
      real_t tmp_52 = tmp_49*tmp_7 + tmp_50*tmp_6;
      real_t tmp_53 = -tmp_51 - tmp_52 + 1;
      real_t tmp_54 = tmp_39*tmp_53;
      real_t tmp_55 = 0.2393143352496831*tmp_38;
      real_t tmp_56 = p_affine_6_1 + 0.5*tmp_11;
      real_t tmp_57 = tmp_10 + tmp_56;
      real_t tmp_58 = p_affine_6_0 + 0.5*tmp_21;
      real_t tmp_59 = tmp_20 + tmp_58;
      real_t tmp_60 = tmp_19*tmp_57 + tmp_24*tmp_59;
      real_t tmp_61 = tmp_26*tmp_57 + tmp_27*tmp_59;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_30 + tmp_56;
      real_t tmp_64 = tmp_32 + tmp_58;
      real_t tmp_65 = tmp_5*tmp_64 + tmp_63*tmp_8;
      real_t tmp_66 = tmp_6*tmp_64 + tmp_63*tmp_7;
      real_t tmp_67 = -tmp_65 - tmp_66 + 1;
      real_t tmp_68 = tmp_39*tmp_67;
      real_t tmp_69 = 0.2844444444444445*tmp_38;
      real_t tmp_70 = p_affine_6_1 + 0.7692346550528415*tmp_11;
      real_t tmp_71 = tmp_10 + tmp_70;
      real_t tmp_72 = p_affine_6_0 + 0.7692346550528415*tmp_21;
      real_t tmp_73 = tmp_20 + tmp_72;
      real_t tmp_74 = tmp_19*tmp_71 + tmp_24*tmp_73;
      real_t tmp_75 = tmp_26*tmp_71 + tmp_27*tmp_73;
      real_t tmp_76 = -tmp_74 - tmp_75 + 1;
      real_t tmp_77 = tmp_30 + tmp_70;
      real_t tmp_78 = tmp_32 + tmp_72;
      real_t tmp_79 = tmp_5*tmp_78 + tmp_77*tmp_8;
      real_t tmp_80 = tmp_6*tmp_78 + tmp_7*tmp_77;
      real_t tmp_81 = -tmp_79 - tmp_80 + 1;
      real_t tmp_82 = tmp_39*tmp_81;
      real_t tmp_83 = 0.2393143352496831*tmp_38;
      real_t tmp_84 = p_affine_6_1 + 0.95308992296933193*tmp_11;
      real_t tmp_85 = tmp_10 + tmp_84;
      real_t tmp_86 = p_affine_6_0 + 0.95308992296933193*tmp_21;
      real_t tmp_87 = tmp_20 + tmp_86;
      real_t tmp_88 = tmp_19*tmp_85 + tmp_24*tmp_87;
      real_t tmp_89 = tmp_26*tmp_85 + tmp_27*tmp_87;
      real_t tmp_90 = -tmp_88 - tmp_89 + 1;
      real_t tmp_91 = tmp_30 + tmp_84;
      real_t tmp_92 = tmp_32 + tmp_86;
      real_t tmp_93 = tmp_5*tmp_92 + tmp_8*tmp_91;
      real_t tmp_94 = tmp_6*tmp_92 + tmp_7*tmp_91;
      real_t tmp_95 = -tmp_93 - tmp_94 + 1;
      real_t tmp_96 = tmp_39*tmp_95;
      real_t tmp_97 = 0.11846344252809471*tmp_38;
      real_t tmp_98 = 0.5*p_affine_10_0*tmp_24 + 0.5*p_affine_10_1*tmp_19;
      real_t tmp_99 = 0.5*p_affine_10_0*tmp_27 + 0.5*p_affine_10_1*tmp_26;
      real_t tmp_100 = p_affine_10_0*tmp_5 + p_affine_10_1*tmp_8;
      real_t tmp_101 = tmp_34*tmp_39;
      real_t tmp_102 = tmp_39*tmp_51;
      real_t tmp_103 = tmp_39*tmp_65;
      real_t tmp_104 = tmp_39*tmp_79;
      real_t tmp_105 = tmp_39*tmp_93;
      real_t tmp_106 = p_affine_10_0*tmp_6 + p_affine_10_1*tmp_7;
      real_t tmp_107 = tmp_35*tmp_39;
      real_t tmp_108 = tmp_39*tmp_52;
      real_t tmp_109 = tmp_39*tmp_66;
      real_t tmp_110 = tmp_39*tmp_80;
      real_t tmp_111 = tmp_39*tmp_94;
      real_t a_0_0 = tmp_41*(-tmp_29*tmp_40 + 0.5*tmp_29*tmp_9 - tmp_36*tmp_37) + tmp_55*(-tmp_37*tmp_53 - tmp_48*tmp_54 + 0.5*tmp_48*tmp_9) + tmp_69*(-tmp_37*tmp_67 - tmp_62*tmp_68 + 0.5*tmp_62*tmp_9) + tmp_83*(-tmp_37*tmp_81 - tmp_76*tmp_82 + 0.5*tmp_76*tmp_9) + tmp_97*(-tmp_37*tmp_95 + 0.5*tmp_9*tmp_90 - tmp_90*tmp_96);
      real_t a_0_1 = tmp_41*(-tmp_25*tmp_40 + 0.5*tmp_25*tmp_9 - tmp_36*tmp_98) + tmp_55*(-tmp_46*tmp_54 + 0.5*tmp_46*tmp_9 - tmp_53*tmp_98) + tmp_69*(-tmp_60*tmp_68 + 0.5*tmp_60*tmp_9 - tmp_67*tmp_98) + tmp_83*(-tmp_74*tmp_82 + 0.5*tmp_74*tmp_9 - tmp_81*tmp_98) + tmp_97*(0.5*tmp_88*tmp_9 - tmp_88*tmp_96 - tmp_95*tmp_98);
      real_t a_0_2 = tmp_41*(-tmp_28*tmp_40 + 0.5*tmp_28*tmp_9 - tmp_36*tmp_99) + tmp_55*(-tmp_47*tmp_54 + 0.5*tmp_47*tmp_9 - tmp_53*tmp_99) + tmp_69*(-tmp_61*tmp_68 + 0.5*tmp_61*tmp_9 - tmp_67*tmp_99) + tmp_83*(-tmp_75*tmp_82 + 0.5*tmp_75*tmp_9 - tmp_81*tmp_99) + tmp_97*(0.5*tmp_89*tmp_9 - tmp_89*tmp_96 - tmp_95*tmp_99);
      real_t a_1_0 = tmp_41*(0.5*tmp_100*tmp_29 - tmp_101*tmp_29 - tmp_34*tmp_37) + tmp_55*(0.5*tmp_100*tmp_48 - tmp_102*tmp_48 - tmp_37*tmp_51) + tmp_69*(0.5*tmp_100*tmp_62 - tmp_103*tmp_62 - tmp_37*tmp_65) + tmp_83*(0.5*tmp_100*tmp_76 - tmp_104*tmp_76 - tmp_37*tmp_79) + tmp_97*(0.5*tmp_100*tmp_90 - tmp_105*tmp_90 - tmp_37*tmp_93);
      real_t a_1_1 = tmp_41*(0.5*tmp_100*tmp_25 - tmp_101*tmp_25 - tmp_34*tmp_98) + tmp_55*(0.5*tmp_100*tmp_46 - tmp_102*tmp_46 - tmp_51*tmp_98) + tmp_69*(0.5*tmp_100*tmp_60 - tmp_103*tmp_60 - tmp_65*tmp_98) + tmp_83*(0.5*tmp_100*tmp_74 - tmp_104*tmp_74 - tmp_79*tmp_98) + tmp_97*(0.5*tmp_100*tmp_88 - tmp_105*tmp_88 - tmp_93*tmp_98);
      real_t a_1_2 = tmp_41*(0.5*tmp_100*tmp_28 - tmp_101*tmp_28 - tmp_34*tmp_99) + tmp_55*(0.5*tmp_100*tmp_47 - tmp_102*tmp_47 - tmp_51*tmp_99) + tmp_69*(0.5*tmp_100*tmp_61 - tmp_103*tmp_61 - tmp_65*tmp_99) + tmp_83*(0.5*tmp_100*tmp_75 - tmp_104*tmp_75 - tmp_79*tmp_99) + tmp_97*(0.5*tmp_100*tmp_89 - tmp_105*tmp_89 - tmp_93*tmp_99);
      real_t a_2_0 = tmp_41*(0.5*tmp_106*tmp_29 - tmp_107*tmp_29 - tmp_35*tmp_37) + tmp_55*(0.5*tmp_106*tmp_48 - tmp_108*tmp_48 - tmp_37*tmp_52) + tmp_69*(0.5*tmp_106*tmp_62 - tmp_109*tmp_62 - tmp_37*tmp_66) + tmp_83*(0.5*tmp_106*tmp_76 - tmp_110*tmp_76 - tmp_37*tmp_80) + tmp_97*(0.5*tmp_106*tmp_90 - tmp_111*tmp_90 - tmp_37*tmp_94);
      real_t a_2_1 = tmp_41*(0.5*tmp_106*tmp_25 - tmp_107*tmp_25 - tmp_35*tmp_98) + tmp_55*(0.5*tmp_106*tmp_46 - tmp_108*tmp_46 - tmp_52*tmp_98) + tmp_69*(0.5*tmp_106*tmp_60 - tmp_109*tmp_60 - tmp_66*tmp_98) + tmp_83*(0.5*tmp_106*tmp_74 - tmp_110*tmp_74 - tmp_80*tmp_98) + tmp_97*(0.5*tmp_106*tmp_88 - tmp_111*tmp_88 - tmp_94*tmp_98);
      real_t a_2_2 = tmp_41*(0.5*tmp_106*tmp_28 - tmp_107*tmp_28 - tmp_35*tmp_99) + tmp_55*(0.5*tmp_106*tmp_47 - tmp_108*tmp_47 - tmp_52*tmp_99) + tmp_69*(0.5*tmp_106*tmp_61 - tmp_109*tmp_61 - tmp_66*tmp_99) + tmp_83*(0.5*tmp_106*tmp_75 - tmp_110*tmp_75 - tmp_80*tmp_99) + tmp_97*(0.5*tmp_106*tmp_89 - tmp_111*tmp_89 - tmp_94*tmp_99);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = -tmp_15 - tmp_18 + 1;
      real_t tmp_20 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_21 = 2*tmp_20;
      real_t tmp_22 = 0.11846344252809471*tmp_2;
      real_t tmp_23 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_24 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_25 = tmp_11*tmp_23 + tmp_14*tmp_24;
      real_t tmp_26 = tmp_16*tmp_23 + tmp_17*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_2;
      real_t tmp_29 = 0.5*tmp_1 + tmp_4;
      real_t tmp_30 = 0.5*tmp_0 + tmp_12;
      real_t tmp_31 = tmp_11*tmp_29 + tmp_14*tmp_30;
      real_t tmp_32 = tmp_16*tmp_29 + tmp_17*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_2;
      real_t tmp_35 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_36 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_37 = tmp_11*tmp_35 + tmp_14*tmp_36;
      real_t tmp_38 = tmp_16*tmp_35 + tmp_17*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_2;
      real_t tmp_41 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_42 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_43 = tmp_11*tmp_41 + tmp_14*tmp_42;
      real_t tmp_44 = tmp_16*tmp_41 + tmp_17*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_2;
      real_t tmp_47 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_48 = tmp_22*(3*tmp_15*tmp_19*tmp_3 - tmp_15*tmp_20 - tmp_19*tmp_47) + tmp_28*(-tmp_20*tmp_25 + 3*tmp_25*tmp_27*tmp_3 - tmp_27*tmp_47) + tmp_34*(-tmp_20*tmp_31 + 3*tmp_3*tmp_31*tmp_33 - tmp_33*tmp_47) + tmp_40*(-tmp_20*tmp_37 + 3*tmp_3*tmp_37*tmp_39 - tmp_39*tmp_47) + tmp_46*(-tmp_20*tmp_43 + 3*tmp_3*tmp_43*tmp_45 - tmp_45*tmp_47);
      real_t tmp_49 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t tmp_50 = tmp_22*(3*tmp_18*tmp_19*tmp_3 - tmp_18*tmp_20 - tmp_19*tmp_49) + tmp_28*(-tmp_20*tmp_26 + 3*tmp_26*tmp_27*tmp_3 - tmp_27*tmp_49) + tmp_34*(-tmp_20*tmp_32 + 3*tmp_3*tmp_32*tmp_33 - tmp_33*tmp_49) + tmp_40*(-tmp_20*tmp_38 + 3*tmp_3*tmp_38*tmp_39 - tmp_39*tmp_49) + tmp_46*(-tmp_20*tmp_44 + 3*tmp_3*tmp_44*tmp_45 - tmp_45*tmp_49);
      real_t tmp_51 = 2*tmp_47;
      real_t tmp_52 = tmp_22*(3*tmp_15*tmp_18*tmp_3 - tmp_15*tmp_49 - tmp_18*tmp_47) + tmp_28*(3*tmp_25*tmp_26*tmp_3 - tmp_25*tmp_49 - tmp_26*tmp_47) + tmp_34*(3*tmp_3*tmp_31*tmp_32 - tmp_31*tmp_49 - tmp_32*tmp_47) + tmp_40*(3*tmp_3*tmp_37*tmp_38 - tmp_37*tmp_49 - tmp_38*tmp_47) + tmp_46*(3*tmp_3*tmp_43*tmp_44 - tmp_43*tmp_49 - tmp_44*tmp_47);
      real_t tmp_53 = 2*tmp_49;
      real_t a_0_0 = tmp_22*(3*(tmp_19*tmp_19)*tmp_3 - tmp_19*tmp_21) + tmp_28*(-tmp_21*tmp_27 + 3*(tmp_27*tmp_27)*tmp_3) + tmp_34*(-tmp_21*tmp_33 + 3*tmp_3*(tmp_33*tmp_33)) + tmp_40*(-tmp_21*tmp_39 + 3*tmp_3*(tmp_39*tmp_39)) + tmp_46*(-tmp_21*tmp_45 + 3*tmp_3*(tmp_45*tmp_45));
      real_t a_0_1 = tmp_48;
      real_t a_0_2 = tmp_50;
      real_t a_1_0 = tmp_48;
      real_t a_1_1 = tmp_22*(3*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_51) + tmp_28*(3*(tmp_25*tmp_25)*tmp_3 - tmp_25*tmp_51) + tmp_34*(3*tmp_3*(tmp_31*tmp_31) - tmp_31*tmp_51) + tmp_40*(3*tmp_3*(tmp_37*tmp_37) - tmp_37*tmp_51) + tmp_46*(3*tmp_3*(tmp_43*tmp_43) - tmp_43*tmp_51);
      real_t a_1_2 = tmp_52;
      real_t a_2_0 = tmp_50;
      real_t a_2_1 = tmp_52;
      real_t a_2_2 = tmp_22*(3*(tmp_18*tmp_18)*tmp_3 - tmp_18*tmp_53) + tmp_28*(3*(tmp_26*tmp_26)*tmp_3 - tmp_26*tmp_53) + tmp_34*(3*tmp_3*(tmp_32*tmp_32) - tmp_32*tmp_53) + tmp_40*(3*tmp_3*(tmp_38*tmp_38) - tmp_38*tmp_53) + tmp_46*(3*tmp_3*(tmp_44*tmp_44) - tmp_44*tmp_53);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id4 = 0;
      Scalar_Variable_Coefficient_2D_g0( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id0 );
      Scalar_Variable_Coefficient_2D_g0( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id1 );
      Scalar_Variable_Coefficient_2D_g0( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id2 );
      Scalar_Variable_Coefficient_2D_g0( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id3 );
      Scalar_Variable_Coefficient_2D_g0( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id4 );
      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_20 = 0.11846344252809471*Scalar_Variable_Coefficient_2D_g0_out0_id0*tmp_2;
      real_t tmp_21 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_22 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_23 = tmp_11*tmp_21 + tmp_14*tmp_22;
      real_t tmp_24 = tmp_16*tmp_21 + tmp_17*tmp_22;
      real_t tmp_25 = 0.2393143352496831*Scalar_Variable_Coefficient_2D_g0_out0_id1*tmp_2;
      real_t tmp_26 = 0.5*tmp_1 + tmp_4;
      real_t tmp_27 = 0.5*tmp_0 + tmp_12;
      real_t tmp_28 = tmp_11*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = 0.2844444444444445*Scalar_Variable_Coefficient_2D_g0_out0_id2*tmp_2;
      real_t tmp_31 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_32 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_33 = tmp_11*tmp_31 + tmp_14*tmp_32;
      real_t tmp_34 = tmp_16*tmp_31 + tmp_17*tmp_32;
      real_t tmp_35 = 0.2393143352496831*Scalar_Variable_Coefficient_2D_g0_out0_id3*tmp_2;
      real_t tmp_36 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_37 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_38 = tmp_11*tmp_36 + tmp_14*tmp_37;
      real_t tmp_39 = tmp_16*tmp_36 + tmp_17*tmp_37;
      real_t tmp_40 = 0.11846344252809471*Scalar_Variable_Coefficient_2D_g0_out0_id4*tmp_2;
      real_t tmp_41 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_42 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_20*(-tmp_19 + 3*tmp_3*(-tmp_15 - tmp_18 + 1)) + tmp_25*(-tmp_19 + 3*tmp_3*(-tmp_23 - tmp_24 + 1)) + tmp_30*(-tmp_19 + 3*tmp_3*(-tmp_28 - tmp_29 + 1)) + tmp_35*(-tmp_19 + 3*tmp_3*(-tmp_33 - tmp_34 + 1)) + tmp_40*(-tmp_19 + 3*tmp_3*(-tmp_38 - tmp_39 + 1));
      real_t a_1_0 = tmp_20*(3*tmp_15*tmp_3 - tmp_41) + tmp_25*(3*tmp_23*tmp_3 - tmp_41) + tmp_30*(3*tmp_28*tmp_3 - tmp_41) + tmp_35*(3*tmp_3*tmp_33 - tmp_41) + tmp_40*(3*tmp_3*tmp_38 - tmp_41);
      real_t a_2_0 = tmp_20*(3*tmp_18*tmp_3 - tmp_42) + tmp_25*(3*tmp_24*tmp_3 - tmp_42) + tmp_30*(3*tmp_29*tmp_3 - tmp_42) + tmp_35*(3*tmp_3*tmp_34 - tmp_42) + tmp_40*(3*tmp_3*tmp_39 - tmp_42);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id20 = 0;
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id0 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id1 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id2 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id3 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id4 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id5 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id6 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id7 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id8 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id9 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id10 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id11 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id12 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id13 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id14 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id15 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id16 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id17 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id18 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id19 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id20 );
      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_45 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_46 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g0_out0_id0*tmp_45;
      real_t tmp_47 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_48 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_49 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_50 = tmp_26*tmp_47 + tmp_30*tmp_48 + tmp_34*tmp_49;
      real_t tmp_51 = tmp_36*tmp_47 + tmp_37*tmp_48 + tmp_38*tmp_49;
      real_t tmp_52 = tmp_40*tmp_47 + tmp_41*tmp_48 + tmp_42*tmp_49;
      real_t tmp_53 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g0_out0_id1*tmp_45;
      real_t tmp_54 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_55 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_56 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_57 = tmp_26*tmp_54 + tmp_30*tmp_55 + tmp_34*tmp_56;
      real_t tmp_58 = tmp_36*tmp_54 + tmp_37*tmp_55 + tmp_38*tmp_56;
      real_t tmp_59 = tmp_40*tmp_54 + tmp_41*tmp_55 + tmp_42*tmp_56;
      real_t tmp_60 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id10*tmp_45;
      real_t tmp_61 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_62 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_63 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_64 = tmp_26*tmp_61 + tmp_30*tmp_62 + tmp_34*tmp_63;
      real_t tmp_65 = tmp_36*tmp_61 + tmp_37*tmp_62 + tmp_38*tmp_63;
      real_t tmp_66 = tmp_40*tmp_61 + tmp_41*tmp_62 + tmp_42*tmp_63;
      real_t tmp_67 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_45;
      real_t tmp_68 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_69 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_70 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_71 = tmp_26*tmp_68 + tmp_30*tmp_69 + tmp_34*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g0_out0_id12*tmp_45;
      real_t tmp_75 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_76 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_77 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_78 = tmp_26*tmp_75 + tmp_30*tmp_76 + tmp_34*tmp_77;
      real_t tmp_79 = tmp_36*tmp_75 + tmp_37*tmp_76 + tmp_38*tmp_77;
      real_t tmp_80 = tmp_40*tmp_75 + tmp_41*tmp_76 + tmp_42*tmp_77;
      real_t tmp_81 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id13*tmp_45;
      real_t tmp_82 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_83 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_84 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_85 = tmp_26*tmp_82 + tmp_30*tmp_83 + tmp_34*tmp_84;
      real_t tmp_86 = tmp_36*tmp_82 + tmp_37*tmp_83 + tmp_38*tmp_84;
      real_t tmp_87 = tmp_40*tmp_82 + tmp_41*tmp_83 + tmp_42*tmp_84;
      real_t tmp_88 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_45;
      real_t tmp_89 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_90 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_91 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g0_out0_id15*tmp_45;
      real_t tmp_96 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_97 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_98 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_99 = tmp_26*tmp_96 + tmp_30*tmp_97 + tmp_34*tmp_98;
      real_t tmp_100 = tmp_36*tmp_96 + tmp_37*tmp_97 + tmp_38*tmp_98;
      real_t tmp_101 = tmp_40*tmp_96 + tmp_41*tmp_97 + tmp_42*tmp_98;
      real_t tmp_102 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g0_out0_id16*tmp_45;
      real_t tmp_103 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_104 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_105 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_106 = tmp_103*tmp_26 + tmp_104*tmp_30 + tmp_105*tmp_34;
      real_t tmp_107 = tmp_103*tmp_36 + tmp_104*tmp_37 + tmp_105*tmp_38;
      real_t tmp_108 = tmp_103*tmp_40 + tmp_104*tmp_41 + tmp_105*tmp_42;
      real_t tmp_109 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_45;
      real_t tmp_110 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_111 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_112 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_113 = tmp_110*tmp_26 + tmp_111*tmp_30 + tmp_112*tmp_34;
      real_t tmp_114 = tmp_110*tmp_36 + tmp_111*tmp_37 + tmp_112*tmp_38;
      real_t tmp_115 = tmp_110*tmp_40 + tmp_111*tmp_41 + tmp_112*tmp_42;
      real_t tmp_116 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g0_out0_id18*tmp_45;
      real_t tmp_117 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_118 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_119 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_120 = tmp_117*tmp_26 + tmp_118*tmp_30 + tmp_119*tmp_34;
      real_t tmp_121 = tmp_117*tmp_36 + tmp_118*tmp_37 + tmp_119*tmp_38;
      real_t tmp_122 = tmp_117*tmp_40 + tmp_118*tmp_41 + tmp_119*tmp_42;
      real_t tmp_123 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g0_out0_id19*tmp_45;
      real_t tmp_124 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_125 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_126 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_127 = tmp_124*tmp_26 + tmp_125*tmp_30 + tmp_126*tmp_34;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_45;
      real_t tmp_131 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_132 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_133 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_134 = tmp_131*tmp_26 + tmp_132*tmp_30 + tmp_133*tmp_34;
      real_t tmp_135 = tmp_131*tmp_36 + tmp_132*tmp_37 + tmp_133*tmp_38;
      real_t tmp_136 = tmp_131*tmp_40 + tmp_132*tmp_41 + tmp_133*tmp_42;
      real_t tmp_137 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_45;
      real_t tmp_138 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_139 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_140 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_141 = tmp_138*tmp_26 + tmp_139*tmp_30 + tmp_140*tmp_34;
      real_t tmp_142 = tmp_138*tmp_36 + tmp_139*tmp_37 + tmp_140*tmp_38;
      real_t tmp_143 = tmp_138*tmp_40 + tmp_139*tmp_41 + tmp_140*tmp_42;
      real_t tmp_144 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id3*tmp_45;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id4*tmp_45;
      real_t tmp_152 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_153 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_154 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_155 = tmp_152*tmp_26 + tmp_153*tmp_30 + tmp_154*tmp_34;
      real_t tmp_156 = tmp_152*tmp_36 + tmp_153*tmp_37 + tmp_154*tmp_38;
      real_t tmp_157 = tmp_152*tmp_40 + tmp_153*tmp_41 + tmp_154*tmp_42;
      real_t tmp_158 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_45;
      real_t tmp_159 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_160 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_161 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_162 = tmp_159*tmp_26 + tmp_160*tmp_30 + tmp_161*tmp_34;
      real_t tmp_163 = tmp_159*tmp_36 + tmp_160*tmp_37 + tmp_161*tmp_38;
      real_t tmp_164 = tmp_159*tmp_40 + tmp_160*tmp_41 + tmp_161*tmp_42;
      real_t tmp_165 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id6*tmp_45;
      real_t tmp_166 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_167 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_168 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_169 = tmp_166*tmp_26 + tmp_167*tmp_30 + tmp_168*tmp_34;
      real_t tmp_170 = tmp_166*tmp_36 + tmp_167*tmp_37 + tmp_168*tmp_38;
      real_t tmp_171 = tmp_166*tmp_40 + tmp_167*tmp_41 + tmp_168*tmp_42;
      real_t tmp_172 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id7*tmp_45;
      real_t tmp_173 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_174 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_175 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_176 = tmp_173*tmp_26 + tmp_174*tmp_30 + tmp_175*tmp_34;
      real_t tmp_177 = tmp_173*tmp_36 + tmp_174*tmp_37 + tmp_175*tmp_38;
      real_t tmp_178 = tmp_173*tmp_40 + tmp_174*tmp_41 + tmp_175*tmp_42;
      real_t tmp_179 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_45;
      real_t tmp_180 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_181 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_182 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_183 = tmp_180*tmp_26 + tmp_181*tmp_30 + tmp_182*tmp_34;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g0_out0_id9*tmp_45;
      real_t tmp_187 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_188 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_189 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t a_0_0 = tmp_102*(-tmp_44 + 3.0*tmp_7*(-tmp_100 - tmp_101 - tmp_99 + 1)) + tmp_109*(-tmp_44 + 3.0*tmp_7*(-tmp_106 - tmp_107 - tmp_108 + 1)) + tmp_116*(-tmp_44 + 3.0*tmp_7*(-tmp_113 - tmp_114 - tmp_115 + 1)) + tmp_123*(-tmp_44 + 3.0*tmp_7*(-tmp_120 - tmp_121 - tmp_122 + 1)) + tmp_130*(-tmp_44 + 3.0*tmp_7*(-tmp_127 - tmp_128 - tmp_129 + 1)) + tmp_137*(-tmp_44 + 3.0*tmp_7*(-tmp_134 - tmp_135 - tmp_136 + 1)) + tmp_144*(-tmp_44 + 3.0*tmp_7*(-tmp_141 - tmp_142 - tmp_143 + 1)) + tmp_151*(-tmp_44 + 3.0*tmp_7*(-tmp_148 - tmp_149 - tmp_150 + 1)) + tmp_158*(-tmp_44 + 3.0*tmp_7*(-tmp_155 - tmp_156 - tmp_157 + 1)) + tmp_165*(-tmp_44 + 3.0*tmp_7*(-tmp_162 - tmp_163 - tmp_164 + 1)) + tmp_172*(-tmp_44 + 3.0*tmp_7*(-tmp_169 - tmp_170 - tmp_171 + 1)) + tmp_179*(-tmp_44 + 3.0*tmp_7*(-tmp_176 - tmp_177 - tmp_178 + 1)) + tmp_186*(-tmp_44 + 3.0*tmp_7*(-tmp_183 - tmp_184 - tmp_185 + 1)) + tmp_46*(-tmp_44 + 3.0*tmp_7*(-tmp_35 - tmp_39 - tmp_43 + 1)) + tmp_53*(-tmp_44 + 3.0*tmp_7*(-tmp_50 - tmp_51 - tmp_52 + 1)) + tmp_60*(-tmp_44 + 3.0*tmp_7*(-tmp_57 - tmp_58 - tmp_59 + 1)) + tmp_67*(-tmp_44 + 3.0*tmp_7*(-tmp_64 - tmp_65 - tmp_66 + 1)) + tmp_74*(-tmp_44 + 3.0*tmp_7*(-tmp_71 - tmp_72 - tmp_73 + 1)) + tmp_81*(-tmp_44 + 3.0*tmp_7*(-tmp_78 - tmp_79 - tmp_80 + 1)) + tmp_88*(-tmp_44 + 3.0*tmp_7*(-tmp_85 - tmp_86 - tmp_87 + 1)) + tmp_95*(-tmp_44 + 3.0*tmp_7*(-tmp_92 - tmp_93 - tmp_94 + 1));
      real_t a_1_0 = tmp_102*(-tmp_187 + 3.0*tmp_7*tmp_99) + tmp_109*(3.0*tmp_106*tmp_7 - tmp_187) + tmp_116*(3.0*tmp_113*tmp_7 - tmp_187) + tmp_123*(3.0*tmp_120*tmp_7 - tmp_187) + tmp_130*(3.0*tmp_127*tmp_7 - tmp_187) + tmp_137*(3.0*tmp_134*tmp_7 - tmp_187) + tmp_144*(3.0*tmp_141*tmp_7 - tmp_187) + tmp_151*(3.0*tmp_148*tmp_7 - tmp_187) + tmp_158*(3.0*tmp_155*tmp_7 - tmp_187) + tmp_165*(3.0*tmp_162*tmp_7 - tmp_187) + tmp_172*(3.0*tmp_169*tmp_7 - tmp_187) + tmp_179*(3.0*tmp_176*tmp_7 - tmp_187) + tmp_186*(3.0*tmp_183*tmp_7 - tmp_187) + tmp_46*(-tmp_187 + 3.0*tmp_35*tmp_7) + tmp_53*(-tmp_187 + 3.0*tmp_50*tmp_7) + tmp_60*(-tmp_187 + 3.0*tmp_57*tmp_7) + tmp_67*(-tmp_187 + 3.0*tmp_64*tmp_7) + tmp_74*(-tmp_187 + 3.0*tmp_7*tmp_71) + tmp_81*(-tmp_187 + 3.0*tmp_7*tmp_78) + tmp_88*(-tmp_187 + 3.0*tmp_7*tmp_85) + tmp_95*(-tmp_187 + 3.0*tmp_7*tmp_92);
      real_t a_2_0 = tmp_102*(3.0*tmp_100*tmp_7 - tmp_188) + tmp_109*(3.0*tmp_107*tmp_7 - tmp_188) + tmp_116*(3.0*tmp_114*tmp_7 - tmp_188) + tmp_123*(3.0*tmp_121*tmp_7 - tmp_188) + tmp_130*(3.0*tmp_128*tmp_7 - tmp_188) + tmp_137*(3.0*tmp_135*tmp_7 - tmp_188) + tmp_144*(3.0*tmp_142*tmp_7 - tmp_188) + tmp_151*(3.0*tmp_149*tmp_7 - tmp_188) + tmp_158*(3.0*tmp_156*tmp_7 - tmp_188) + tmp_165*(3.0*tmp_163*tmp_7 - tmp_188) + tmp_172*(3.0*tmp_170*tmp_7 - tmp_188) + tmp_179*(3.0*tmp_177*tmp_7 - tmp_188) + tmp_186*(3.0*tmp_184*tmp_7 - tmp_188) + tmp_46*(-tmp_188 + 3.0*tmp_39*tmp_7) + tmp_53*(-tmp_188 + 3.0*tmp_51*tmp_7) + tmp_60*(-tmp_188 + 3.0*tmp_58*tmp_7) + tmp_67*(-tmp_188 + 3.0*tmp_65*tmp_7) + tmp_74*(-tmp_188 + 3.0*tmp_7*tmp_72) + tmp_81*(-tmp_188 + 3.0*tmp_7*tmp_79) + tmp_88*(-tmp_188 + 3.0*tmp_7*tmp_86) + tmp_95*(-tmp_188 + 3.0*tmp_7*tmp_93);
      real_t a_3_0 = tmp_102*(3.0*tmp_101*tmp_7 - tmp_189) + tmp_109*(3.0*tmp_108*tmp_7 - tmp_189) + tmp_116*(3.0*tmp_115*tmp_7 - tmp_189) + tmp_123*(3.0*tmp_122*tmp_7 - tmp_189) + tmp_130*(3.0*tmp_129*tmp_7 - tmp_189) + tmp_137*(3.0*tmp_136*tmp_7 - tmp_189) + tmp_144*(3.0*tmp_143*tmp_7 - tmp_189) + tmp_151*(3.0*tmp_150*tmp_7 - tmp_189) + tmp_158*(3.0*tmp_157*tmp_7 - tmp_189) + tmp_165*(3.0*tmp_164*tmp_7 - tmp_189) + tmp_172*(3.0*tmp_171*tmp_7 - tmp_189) + tmp_179*(3.0*tmp_178*tmp_7 - tmp_189) + tmp_186*(3.0*tmp_185*tmp_7 - tmp_189) + tmp_46*(-tmp_189 + 3.0*tmp_43*tmp_7) + tmp_53*(-tmp_189 + 3.0*tmp_52*tmp_7) + tmp_60*(-tmp_189 + 3.0*tmp_59*tmp_7) + tmp_67*(-tmp_189 + 3.0*tmp_66*tmp_7) + tmp_74*(-tmp_189 + 3.0*tmp_7*tmp_73) + tmp_81*(-tmp_189 + 3.0*tmp_7*tmp_80) + tmp_88*(-tmp_189 + 3.0*tmp_7*tmp_87) + tmp_95*(-tmp_189 + 3.0*tmp_7*tmp_94);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_10 - tmp_14;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_24 = tmp_16*tmp_23;
      real_t tmp_25 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = -tmp_24 - tmp_26 - tmp_28;
      real_t tmp_30 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_31 = tmp_16*tmp_30;
      real_t tmp_32 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_33 = tmp_16*tmp_32;
      real_t tmp_34 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_35 = tmp_16*tmp_34;
      real_t tmp_36 = -tmp_31 - tmp_33 - tmp_35;
      real_t tmp_37 = p_affine_0_0*p_affine_1_1;
      real_t tmp_38 = p_affine_0_0*p_affine_1_2;
      real_t tmp_39 = p_affine_2_1*p_affine_3_2;
      real_t tmp_40 = p_affine_0_1*p_affine_1_0;
      real_t tmp_41 = p_affine_0_1*p_affine_1_2;
      real_t tmp_42 = p_affine_2_2*p_affine_3_0;
      real_t tmp_43 = p_affine_0_2*p_affine_1_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_1;
      real_t tmp_45 = p_affine_2_0*p_affine_3_1;
      real_t tmp_46 = p_affine_2_2*p_affine_3_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_0;
      real_t tmp_49 = std::abs(p_affine_0_0*tmp_39 - p_affine_0_0*tmp_46 + p_affine_0_1*tmp_42 - p_affine_0_1*tmp_47 + p_affine_0_2*tmp_45 - p_affine_0_2*tmp_48 - p_affine_1_0*tmp_39 + p_affine_1_0*tmp_46 - p_affine_1_1*tmp_42 + p_affine_1_1*tmp_47 - p_affine_1_2*tmp_45 + p_affine_1_2*tmp_48 + p_affine_2_0*tmp_41 - p_affine_2_0*tmp_44 - p_affine_2_1*tmp_38 + p_affine_2_1*tmp_43 + p_affine_2_2*tmp_37 - p_affine_2_2*tmp_40 - p_affine_3_0*tmp_41 + p_affine_3_0*tmp_44 + p_affine_3_1*tmp_38 - p_affine_3_1*tmp_43 - p_affine_3_2*tmp_37 + p_affine_3_2*tmp_40);
      real_t tmp_50 = tmp_49*((tmp_22*tmp_22) + (tmp_29*tmp_29) + (tmp_36*tmp_36));
      real_t tmp_51 = tmp_49*(tmp_21*tmp_22 + tmp_28*tmp_29 + tmp_35*tmp_36);
      real_t tmp_52 = 0.1666666666666668*tmp_51;
      real_t tmp_53 = tmp_49*(tmp_19*tmp_22 + tmp_26*tmp_29 + tmp_33*tmp_36);
      real_t tmp_54 = 0.1666666666666668*tmp_53;
      real_t tmp_55 = tmp_49*(tmp_17*tmp_22 + tmp_24*tmp_29 + tmp_31*tmp_36);
      real_t tmp_56 = 0.1666666666666668*tmp_55;
      real_t tmp_57 = 1.0 / (tmp_15*tmp_15);
      real_t tmp_58 = tmp_49*((tmp_20*tmp_20)*tmp_57 + (tmp_27*tmp_27)*tmp_57 + (tmp_34*tmp_34)*tmp_57);
      real_t tmp_59 = tmp_20*tmp_57;
      real_t tmp_60 = tmp_27*tmp_57;
      real_t tmp_61 = tmp_34*tmp_57;
      real_t tmp_62 = tmp_49*(tmp_18*tmp_59 + tmp_25*tmp_60 + tmp_32*tmp_61);
      real_t tmp_63 = 0.1666666666666668*tmp_62;
      real_t tmp_64 = tmp_49*(tmp_23*tmp_60 + tmp_30*tmp_61 + tmp_59*tmp_6);
      real_t tmp_65 = 0.1666666666666668*tmp_64;
      real_t tmp_66 = tmp_49*((tmp_18*tmp_18)*tmp_57 + (tmp_25*tmp_25)*tmp_57 + (tmp_32*tmp_32)*tmp_57);
      real_t tmp_67 = tmp_49*(tmp_18*tmp_57*tmp_6 + tmp_23*tmp_25*tmp_57 + tmp_30*tmp_32*tmp_57);
      real_t tmp_68 = 0.1666666666666668*tmp_67;
      real_t tmp_69 = tmp_49*((tmp_23*tmp_23)*tmp_57 + (tmp_30*tmp_30)*tmp_57 + tmp_57*(tmp_6*tmp_6));
      real_t a_0_0 = 0.1666666666666668*tmp_50;
      real_t a_0_1 = tmp_52;
      real_t a_0_2 = tmp_54;
      real_t a_0_3 = tmp_56;
      real_t a_1_0 = tmp_52;
      real_t a_1_1 = 0.1666666666666668*tmp_58;
      real_t a_1_2 = tmp_63;
      real_t a_1_3 = tmp_65;
      real_t a_2_0 = tmp_54;
      real_t a_2_1 = tmp_63;
      real_t a_2_2 = 0.1666666666666668*tmp_66;
      real_t a_2_3 = tmp_68;
      real_t a_3_0 = tmp_56;
      real_t a_3_1 = tmp_65;
      real_t a_3_2 = tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_16 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_16;
      real_t tmp_23 = tmp_11*tmp_19;
      real_t tmp_24 = tmp_13*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 + tmp_13*tmp_21 - tmp_14*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_23 - tmp_20*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_15 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_12*tmp_20 + tmp_14*tmp_15);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(tmp_13*tmp_19 - tmp_22);
      real_t tmp_37 = tmp_25*(tmp_15*tmp_16 - tmp_24);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_15*tmp_19);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(tmp_17 - tmp_23);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_16*tmp_20);
      real_t tmp_42 = tmp_25*(-tmp_14*tmp_18 + tmp_21);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 1.0*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = 0.5*tmp_45;
      real_t tmp_210 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_211 = 0.5*tmp_210;
      real_t tmp_212 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_209 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_209 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_209 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_209 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_209 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_209 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_209 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_209 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_209 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_209 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_209 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_209 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_209 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_209 - tmp_207*tmp_211) + tmp_48*(-tmp_209*tmp_35 - tmp_211*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_52 - tmp_211*tmp_55 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_60 - tmp_211*tmp_63 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_68 - tmp_211*tmp_71 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_76 - tmp_211*tmp_79 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_84 - tmp_211*tmp_87 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_92 - tmp_211*tmp_95 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_214 = 0.5*tmp_213;
      real_t tmp_215 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_209 - tmp_103*tmp_214) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_209 - tmp_111*tmp_214) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_209 - tmp_119*tmp_214) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_209 - tmp_127*tmp_214) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_209 - tmp_135*tmp_214) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_209 - tmp_143*tmp_214) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_209 - tmp_151*tmp_214) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_209 - tmp_159*tmp_214) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_209 - tmp_167*tmp_214) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_209 - tmp_175*tmp_214) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_209 - tmp_183*tmp_214) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_209 - tmp_191*tmp_214) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_209 - tmp_199*tmp_214) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_209 - tmp_207*tmp_214) + tmp_48*(-tmp_209*tmp_39 - tmp_214*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_214*tmp_55 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_214*tmp_63 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_214*tmp_71 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_77 - tmp_214*tmp_79 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_209*tmp_85 - tmp_214*tmp_87 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_209*tmp_93 - tmp_214*tmp_95 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_216 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_217 = 0.5*tmp_216;
      real_t tmp_218 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_209 - tmp_103*tmp_217) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_209 - tmp_111*tmp_217) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_209 - tmp_119*tmp_217) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_209 - tmp_127*tmp_217) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_209 - tmp_135*tmp_217) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_209 - tmp_143*tmp_217) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_209 - tmp_151*tmp_217) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_209 - tmp_159*tmp_217) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_209 - tmp_167*tmp_217) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_209 - tmp_175*tmp_217) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_209 - tmp_183*tmp_217) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_209 - tmp_191*tmp_217) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_209 - tmp_199*tmp_217) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_209 - tmp_207*tmp_217) + tmp_48*(-tmp_209*tmp_43 - tmp_217*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_217*tmp_55 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_217*tmp_63 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_217*tmp_71 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_209*tmp_78 - tmp_217*tmp_79 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_209*tmp_86 - tmp_217*tmp_87 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_209*tmp_94 - tmp_217*tmp_95 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_219 = 1.0*tmp_210;
      real_t tmp_220 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_214 - tmp_101*tmp_211) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_214 - tmp_109*tmp_211) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_214 - tmp_117*tmp_211) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_214 - tmp_125*tmp_211) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_214 - tmp_133*tmp_211) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_214 - tmp_141*tmp_211) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_214 - tmp_149*tmp_211) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_214 - tmp_157*tmp_211) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_214 - tmp_165*tmp_211) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_214 - tmp_173*tmp_211) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_214 - tmp_181*tmp_211) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_214 - tmp_189*tmp_211) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_214 - tmp_197*tmp_211) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_214 - tmp_205*tmp_211) + tmp_48*(-tmp_211*tmp_39 - tmp_214*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_211*tmp_53 - tmp_214*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_211*tmp_61 - tmp_214*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_211*tmp_69 - tmp_214*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_211*tmp_77 - tmp_214*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_211*tmp_85 - tmp_214*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_211*tmp_93 - tmp_214*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_221 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_217 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_217 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_217 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_217 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_217 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_217 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_217 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_217 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_217 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_217 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_217 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_217 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_217 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_217 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_217*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_217*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_217*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_217*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_217*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_217*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_217*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_222 = 1.0*tmp_213;
      real_t tmp_223 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_217 - tmp_102*tmp_214) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_217 - tmp_110*tmp_214) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_217 - tmp_118*tmp_214) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_217 - tmp_126*tmp_214) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_217 - tmp_134*tmp_214) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_217 - tmp_142*tmp_214) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_217 - tmp_150*tmp_214) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_217 - tmp_158*tmp_214) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_217 - tmp_166*tmp_214) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_217 - tmp_174*tmp_214) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_217 - tmp_182*tmp_214) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_217 - tmp_190*tmp_214) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_217 - tmp_198*tmp_214) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_217 - tmp_206*tmp_214) + tmp_48*(-tmp_214*tmp_43 - tmp_217*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_214*tmp_54 - tmp_217*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_214*tmp_62 - tmp_217*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_214*tmp_70 - tmp_217*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_214*tmp_78 - tmp_217*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_214*tmp_86 - tmp_217*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_214*tmp_94 - tmp_217*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_224 = 1.0*tmp_216;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_212;
      real_t a_0_2 = tmp_215;
      real_t a_0_3 = tmp_218;
      real_t a_1_0 = tmp_212;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_219) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_219) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_219) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_219) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_219) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_219) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_219) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_219) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_219) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_219) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_219) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_219) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_219) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_219) + tmp_48*(-tmp_219*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_219*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_219*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_219*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_219*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_219*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_219*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_220;
      real_t a_1_3 = tmp_221;
      real_t a_2_0 = tmp_215;
      real_t a_2_1 = tmp_220;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_222) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_222) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_222) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_222) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_222) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_222) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_222) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_222) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_222) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_222) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_222) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_222) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_222) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_222) + tmp_48*(-tmp_222*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_222*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_222*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_222*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_222*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_222*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_222*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_223;
      real_t a_3_0 = tmp_218;
      real_t a_3_1 = tmp_221;
      real_t a_3_2 = tmp_223;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_224) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_224) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_224) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_224) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_224) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_224) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_224) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_224) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_224) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_224) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_224) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_224) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_224) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_224) + tmp_48*(-tmp_224*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_224*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_224*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_224*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_224*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_224*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_224*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_26 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_27 = -tmp_26;
      real_t tmp_28 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_27 + 0.93718850182767688*tmp_28;
      real_t tmp_30 = tmp_25 + tmp_29;
      real_t tmp_31 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_32 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_33 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_34 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_35 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_36 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_39 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_40 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_41 = tmp_39*tmp_40;
      real_t tmp_42 = tmp_32*tmp_36;
      real_t tmp_43 = tmp_31*tmp_39;
      real_t tmp_44 = tmp_33*tmp_38;
      real_t tmp_45 = 1.0 / (tmp_31*tmp_32*tmp_38 + tmp_33*tmp_41 - tmp_34*tmp_44 + tmp_35*tmp_37 - tmp_35*tmp_43 - tmp_40*tmp_42);
      real_t tmp_46 = tmp_45*(tmp_31*tmp_32 - tmp_33*tmp_34);
      real_t tmp_47 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_48 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_49 = -tmp_48;
      real_t tmp_50 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_51 = 0.031405749086161582*tmp_49 + 0.93718850182767688*tmp_50;
      real_t tmp_52 = tmp_47 + tmp_51;
      real_t tmp_53 = tmp_45*(-tmp_31*tmp_35 + tmp_33*tmp_40);
      real_t tmp_54 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_55 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_56 = -tmp_55;
      real_t tmp_57 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_58 = 0.031405749086161582*tmp_56 + 0.93718850182767688*tmp_57;
      real_t tmp_59 = tmp_54 + tmp_58;
      real_t tmp_60 = tmp_45*(-tmp_32*tmp_40 + tmp_34*tmp_35);
      real_t tmp_61 = tmp_30*tmp_46 + tmp_52*tmp_53 + tmp_59*tmp_60;
      real_t tmp_62 = tmp_45*(tmp_33*tmp_39 - tmp_42);
      real_t tmp_63 = tmp_45*(tmp_35*tmp_36 - tmp_44);
      real_t tmp_64 = tmp_45*(tmp_32*tmp_38 - tmp_35*tmp_39);
      real_t tmp_65 = tmp_30*tmp_62 + tmp_52*tmp_63 + tmp_59*tmp_64;
      real_t tmp_66 = tmp_45*(tmp_37 - tmp_43);
      real_t tmp_67 = tmp_45*(tmp_31*tmp_38 - tmp_36*tmp_40);
      real_t tmp_68 = tmp_45*(-tmp_34*tmp_38 + tmp_41);
      real_t tmp_69 = tmp_30*tmp_66 + tmp_52*tmp_67 + tmp_59*tmp_68;
      real_t tmp_70 = -tmp_61 - tmp_65 - tmp_69 + 1;
      real_t tmp_71 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_72 = tmp_29 + tmp_71;
      real_t tmp_73 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_74 = tmp_51 + tmp_73;
      real_t tmp_75 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_76 = tmp_58 + tmp_75;
      real_t tmp_77 = tmp_17*tmp_76 + tmp_20*tmp_74 + tmp_23*tmp_72;
      real_t tmp_78 = tmp_16*tmp_76 + tmp_19*tmp_74 + tmp_22*tmp_72;
      real_t tmp_79 = tmp_15*tmp_76 + tmp_18*tmp_74 + tmp_21*tmp_72;
      real_t tmp_80 = -tmp_77 - tmp_78 - tmp_79 + 1;
      real_t tmp_81 = 0.5*p_affine_13_0*(-tmp_60 - tmp_64 - tmp_68) + 0.5*p_affine_13_1*(-tmp_53 - tmp_63 - tmp_67) + 0.5*p_affine_13_2*(-tmp_46 - tmp_62 - tmp_66);
      real_t tmp_82 = (std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)*std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)) + (std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)*std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)) + (std::abs(tmp_48*tmp_57 - tmp_50*tmp_55)*std::abs(tmp_48*tmp_57 - tmp_50*tmp_55));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_80*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_27 + 0.60796128279561268*tmp_28;
      real_t tmp_88 = tmp_25 + tmp_87;
      real_t tmp_89 = 0.19601935860219369*tmp_49 + 0.60796128279561268*tmp_50;
      real_t tmp_90 = tmp_47 + tmp_89;
      real_t tmp_91 = 0.19601935860219369*tmp_56 + 0.60796128279561268*tmp_57;
      real_t tmp_92 = tmp_54 + tmp_91;
      real_t tmp_93 = tmp_46*tmp_88 + tmp_53*tmp_90 + tmp_60*tmp_92;
      real_t tmp_94 = tmp_62*tmp_88 + tmp_63*tmp_90 + tmp_64*tmp_92;
      real_t tmp_95 = tmp_66*tmp_88 + tmp_67*tmp_90 + tmp_68*tmp_92;
      real_t tmp_96 = -tmp_93 - tmp_94 - tmp_95 + 1;
      real_t tmp_97 = tmp_71 + tmp_87;
      real_t tmp_98 = tmp_73 + tmp_89;
      real_t tmp_99 = tmp_75 + tmp_91;
      real_t tmp_100 = tmp_17*tmp_99 + tmp_20*tmp_98 + tmp_23*tmp_97;
      real_t tmp_101 = tmp_16*tmp_99 + tmp_19*tmp_98 + tmp_22*tmp_97;
      real_t tmp_102 = tmp_15*tmp_99 + tmp_18*tmp_98 + tmp_21*tmp_97;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = tmp_103*tmp_83;
      real_t tmp_105 = 0.037198804536718075*tmp_85;
      real_t tmp_106 = 0.37605877282253791*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_107 = tmp_106 + tmp_25;
      real_t tmp_108 = 0.37605877282253791*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_109 = tmp_108 + tmp_47;
      real_t tmp_110 = 0.37605877282253791*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_111 = tmp_110 + tmp_54;
      real_t tmp_112 = tmp_107*tmp_46 + tmp_109*tmp_53 + tmp_111*tmp_60;
      real_t tmp_113 = tmp_107*tmp_62 + tmp_109*tmp_63 + tmp_111*tmp_64;
      real_t tmp_114 = tmp_107*tmp_66 + tmp_109*tmp_67 + tmp_111*tmp_68;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = tmp_106 + tmp_71;
      real_t tmp_117 = tmp_108 + tmp_73;
      real_t tmp_118 = tmp_110 + tmp_75;
      real_t tmp_119 = tmp_116*tmp_23 + tmp_117*tmp_20 + tmp_118*tmp_17;
      real_t tmp_120 = tmp_116*tmp_22 + tmp_117*tmp_19 + tmp_118*tmp_16;
      real_t tmp_121 = tmp_116*tmp_21 + tmp_117*tmp_18 + tmp_118*tmp_15;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = tmp_122*tmp_83;
      real_t tmp_124 = 0.020848748529055869*tmp_85;
      real_t tmp_125 = 0.78764240869137092*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_126 = tmp_125 + tmp_25;
      real_t tmp_127 = 0.78764240869137092*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_128 = tmp_127 + tmp_47;
      real_t tmp_129 = 0.78764240869137092*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_130 = tmp_129 + tmp_54;
      real_t tmp_131 = tmp_126*tmp_46 + tmp_128*tmp_53 + tmp_130*tmp_60;
      real_t tmp_132 = tmp_126*tmp_62 + tmp_128*tmp_63 + tmp_130*tmp_64;
      real_t tmp_133 = tmp_126*tmp_66 + tmp_128*tmp_67 + tmp_130*tmp_68;
      real_t tmp_134 = -tmp_131 - tmp_132 - tmp_133 + 1;
      real_t tmp_135 = tmp_125 + tmp_71;
      real_t tmp_136 = tmp_127 + tmp_73;
      real_t tmp_137 = tmp_129 + tmp_75;
      real_t tmp_138 = tmp_135*tmp_23 + tmp_136*tmp_20 + tmp_137*tmp_17;
      real_t tmp_139 = tmp_135*tmp_22 + tmp_136*tmp_19 + tmp_137*tmp_16;
      real_t tmp_140 = tmp_135*tmp_21 + tmp_136*tmp_18 + tmp_137*tmp_15;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = tmp_141*tmp_83;
      real_t tmp_143 = 0.019202922745021479*tmp_85;
      real_t tmp_144 = 0.58463275527740355*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_145 = tmp_144 + tmp_25;
      real_t tmp_146 = 0.58463275527740355*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_147 = tmp_146 + tmp_47;
      real_t tmp_148 = 0.58463275527740355*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_149 = tmp_148 + tmp_54;
      real_t tmp_150 = tmp_145*tmp_46 + tmp_147*tmp_53 + tmp_149*tmp_60;
      real_t tmp_151 = tmp_145*tmp_62 + tmp_147*tmp_63 + tmp_149*tmp_64;
      real_t tmp_152 = tmp_145*tmp_66 + tmp_147*tmp_67 + tmp_149*tmp_68;
      real_t tmp_153 = -tmp_150 - tmp_151 - tmp_152 + 1;
      real_t tmp_154 = tmp_144 + tmp_71;
      real_t tmp_155 = tmp_146 + tmp_73;
      real_t tmp_156 = tmp_148 + tmp_75;
      real_t tmp_157 = tmp_154*tmp_23 + tmp_155*tmp_20 + tmp_156*tmp_17;
      real_t tmp_158 = tmp_154*tmp_22 + tmp_155*tmp_19 + tmp_156*tmp_16;
      real_t tmp_159 = tmp_15*tmp_156 + tmp_154*tmp_21 + tmp_155*tmp_18;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = tmp_160*tmp_83;
      real_t tmp_162 = 0.020848748529055869*tmp_85;
      real_t tmp_163 = 0.041227165399737475*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_164 = tmp_163 + tmp_25;
      real_t tmp_165 = 0.041227165399737475*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_166 = tmp_165 + tmp_47;
      real_t tmp_167 = 0.041227165399737475*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_168 = tmp_167 + tmp_54;
      real_t tmp_169 = tmp_164*tmp_46 + tmp_166*tmp_53 + tmp_168*tmp_60;
      real_t tmp_170 = tmp_164*tmp_62 + tmp_166*tmp_63 + tmp_168*tmp_64;
      real_t tmp_171 = tmp_164*tmp_66 + tmp_166*tmp_67 + tmp_168*tmp_68;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_163 + tmp_71;
      real_t tmp_174 = tmp_165 + tmp_73;
      real_t tmp_175 = tmp_167 + tmp_75;
      real_t tmp_176 = tmp_17*tmp_175 + tmp_173*tmp_23 + tmp_174*tmp_20;
      real_t tmp_177 = tmp_16*tmp_175 + tmp_173*tmp_22 + tmp_174*tmp_19;
      real_t tmp_178 = tmp_15*tmp_175 + tmp_173*tmp_21 + tmp_174*tmp_18;
      real_t tmp_179 = -tmp_176 - tmp_177 - tmp_178 + 1;
      real_t tmp_180 = tmp_179*tmp_83;
      real_t tmp_181 = 0.019202922745021479*tmp_85;
      real_t tmp_182 = 0.039308471900058539*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_183 = tmp_182 + tmp_25;
      real_t tmp_184 = 0.039308471900058539*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_185 = tmp_184 + tmp_47;
      real_t tmp_186 = 0.039308471900058539*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_187 = tmp_186 + tmp_54;
      real_t tmp_188 = tmp_183*tmp_46 + tmp_185*tmp_53 + tmp_187*tmp_60;
      real_t tmp_189 = tmp_183*tmp_62 + tmp_185*tmp_63 + tmp_187*tmp_64;
      real_t tmp_190 = tmp_183*tmp_66 + tmp_185*tmp_67 + tmp_187*tmp_68;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = tmp_182 + tmp_71;
      real_t tmp_193 = tmp_184 + tmp_73;
      real_t tmp_194 = tmp_186 + tmp_75;
      real_t tmp_195 = tmp_17*tmp_194 + tmp_192*tmp_23 + tmp_193*tmp_20;
      real_t tmp_196 = tmp_16*tmp_194 + tmp_19*tmp_193 + tmp_192*tmp_22;
      real_t tmp_197 = tmp_15*tmp_194 + tmp_18*tmp_193 + tmp_192*tmp_21;
      real_t tmp_198 = -tmp_195 - tmp_196 - tmp_197 + 1;
      real_t tmp_199 = tmp_198*tmp_83;
      real_t tmp_200 = 0.020848748529055869*tmp_85;
      real_t tmp_201 = 0.78764240869137092*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_202 = tmp_201 + tmp_25;
      real_t tmp_203 = 0.78764240869137092*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_204 = tmp_203 + tmp_47;
      real_t tmp_205 = 0.78764240869137092*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_206 = tmp_205 + tmp_54;
      real_t tmp_207 = tmp_202*tmp_46 + tmp_204*tmp_53 + tmp_206*tmp_60;
      real_t tmp_208 = tmp_202*tmp_62 + tmp_204*tmp_63 + tmp_206*tmp_64;
      real_t tmp_209 = tmp_202*tmp_66 + tmp_204*tmp_67 + tmp_206*tmp_68;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = tmp_201 + tmp_71;
      real_t tmp_212 = tmp_203 + tmp_73;
      real_t tmp_213 = tmp_205 + tmp_75;
      real_t tmp_214 = tmp_17*tmp_213 + tmp_20*tmp_212 + tmp_211*tmp_23;
      real_t tmp_215 = tmp_16*tmp_213 + tmp_19*tmp_212 + tmp_211*tmp_22;
      real_t tmp_216 = tmp_15*tmp_213 + tmp_18*tmp_212 + tmp_21*tmp_211;
      real_t tmp_217 = -tmp_214 - tmp_215 - tmp_216 + 1;
      real_t tmp_218 = tmp_217*tmp_83;
      real_t tmp_219 = 0.019202922745021479*tmp_85;
      real_t tmp_220 = 0.58463275527740355*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_221 = tmp_220 + tmp_25;
      real_t tmp_222 = 0.58463275527740355*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_223 = tmp_222 + tmp_47;
      real_t tmp_224 = 0.58463275527740355*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_225 = tmp_224 + tmp_54;
      real_t tmp_226 = tmp_221*tmp_46 + tmp_223*tmp_53 + tmp_225*tmp_60;
      real_t tmp_227 = tmp_221*tmp_62 + tmp_223*tmp_63 + tmp_225*tmp_64;
      real_t tmp_228 = tmp_221*tmp_66 + tmp_223*tmp_67 + tmp_225*tmp_68;
      real_t tmp_229 = -tmp_226 - tmp_227 - tmp_228 + 1;
      real_t tmp_230 = tmp_220 + tmp_71;
      real_t tmp_231 = tmp_222 + tmp_73;
      real_t tmp_232 = tmp_224 + tmp_75;
      real_t tmp_233 = tmp_17*tmp_232 + tmp_20*tmp_231 + tmp_23*tmp_230;
      real_t tmp_234 = tmp_16*tmp_232 + tmp_19*tmp_231 + tmp_22*tmp_230;
      real_t tmp_235 = tmp_15*tmp_232 + tmp_18*tmp_231 + tmp_21*tmp_230;
      real_t tmp_236 = -tmp_233 - tmp_234 - tmp_235 + 1;
      real_t tmp_237 = tmp_236*tmp_83;
      real_t tmp_238 = 0.020848748529055869*tmp_85;
      real_t tmp_239 = 0.1711304259088916*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_240 = tmp_239 + tmp_25;
      real_t tmp_241 = 0.1711304259088916*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_242 = tmp_241 + tmp_47;
      real_t tmp_243 = 0.1711304259088916*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_244 = tmp_243 + tmp_54;
      real_t tmp_245 = tmp_240*tmp_46 + tmp_242*tmp_53 + tmp_244*tmp_60;
      real_t tmp_246 = tmp_240*tmp_62 + tmp_242*tmp_63 + tmp_244*tmp_64;
      real_t tmp_247 = tmp_240*tmp_66 + tmp_242*tmp_67 + tmp_244*tmp_68;
      real_t tmp_248 = -tmp_245 - tmp_246 - tmp_247 + 1;
      real_t tmp_249 = tmp_239 + tmp_71;
      real_t tmp_250 = tmp_241 + tmp_73;
      real_t tmp_251 = tmp_243 + tmp_75;
      real_t tmp_252 = tmp_17*tmp_251 + tmp_20*tmp_250 + tmp_23*tmp_249;
      real_t tmp_253 = tmp_16*tmp_251 + tmp_19*tmp_250 + tmp_22*tmp_249;
      real_t tmp_254 = tmp_15*tmp_251 + tmp_18*tmp_250 + tmp_21*tmp_249;
      real_t tmp_255 = -tmp_252 - tmp_253 - tmp_254 + 1;
      real_t tmp_256 = tmp_255*tmp_83;
      real_t tmp_257 = 0.019202922745021479*tmp_85;
      real_t tmp_258 = 0.37605877282253791*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_259 = tmp_25 + tmp_258;
      real_t tmp_260 = 0.37605877282253791*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_261 = tmp_260 + tmp_47;
      real_t tmp_262 = 0.37605877282253791*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_263 = tmp_262 + tmp_54;
      real_t tmp_264 = tmp_259*tmp_46 + tmp_261*tmp_53 + tmp_263*tmp_60;
      real_t tmp_265 = tmp_259*tmp_62 + tmp_261*tmp_63 + tmp_263*tmp_64;
      real_t tmp_266 = tmp_259*tmp_66 + tmp_261*tmp_67 + tmp_263*tmp_68;
      real_t tmp_267 = -tmp_264 - tmp_265 - tmp_266 + 1;
      real_t tmp_268 = tmp_258 + tmp_71;
      real_t tmp_269 = tmp_260 + tmp_73;
      real_t tmp_270 = tmp_262 + tmp_75;
      real_t tmp_271 = tmp_17*tmp_270 + tmp_20*tmp_269 + tmp_23*tmp_268;
      real_t tmp_272 = tmp_16*tmp_270 + tmp_19*tmp_269 + tmp_22*tmp_268;
      real_t tmp_273 = tmp_15*tmp_270 + tmp_18*tmp_269 + tmp_21*tmp_268;
      real_t tmp_274 = -tmp_271 - tmp_272 - tmp_273 + 1;
      real_t tmp_275 = tmp_274*tmp_83;
      real_t tmp_276 = 0.020848748529055869*tmp_85;
      real_t tmp_277 = 0.041227165399737475*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_278 = tmp_25 + tmp_277;
      real_t tmp_279 = 0.041227165399737475*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_280 = tmp_279 + tmp_47;
      real_t tmp_281 = 0.041227165399737475*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_282 = tmp_281 + tmp_54;
      real_t tmp_283 = tmp_278*tmp_46 + tmp_280*tmp_53 + tmp_282*tmp_60;
      real_t tmp_284 = tmp_278*tmp_62 + tmp_280*tmp_63 + tmp_282*tmp_64;
      real_t tmp_285 = tmp_278*tmp_66 + tmp_280*tmp_67 + tmp_282*tmp_68;
      real_t tmp_286 = -tmp_283 - tmp_284 - tmp_285 + 1;
      real_t tmp_287 = tmp_277 + tmp_71;
      real_t tmp_288 = tmp_279 + tmp_73;
      real_t tmp_289 = tmp_281 + tmp_75;
      real_t tmp_290 = tmp_17*tmp_289 + tmp_20*tmp_288 + tmp_23*tmp_287;
      real_t tmp_291 = tmp_16*tmp_289 + tmp_19*tmp_288 + tmp_22*tmp_287;
      real_t tmp_292 = tmp_15*tmp_289 + tmp_18*tmp_288 + tmp_21*tmp_287;
      real_t tmp_293 = -tmp_290 - tmp_291 - tmp_292 + 1;
      real_t tmp_294 = tmp_293*tmp_83;
      real_t tmp_295 = 0.019202922745021479*tmp_85;
      real_t tmp_296 = 0.40446199974765351*tmp_27 + 0.19107600050469298*tmp_28;
      real_t tmp_297 = tmp_25 + tmp_296;
      real_t tmp_298 = 0.40446199974765351*tmp_49 + 0.19107600050469298*tmp_50;
      real_t tmp_299 = tmp_298 + tmp_47;
      real_t tmp_300 = 0.40446199974765351*tmp_56 + 0.19107600050469298*tmp_57;
      real_t tmp_301 = tmp_300 + tmp_54;
      real_t tmp_302 = tmp_297*tmp_46 + tmp_299*tmp_53 + tmp_301*tmp_60;
      real_t tmp_303 = tmp_297*tmp_62 + tmp_299*tmp_63 + tmp_301*tmp_64;
      real_t tmp_304 = tmp_297*tmp_66 + tmp_299*tmp_67 + tmp_301*tmp_68;
      real_t tmp_305 = -tmp_302 - tmp_303 - tmp_304 + 1;
      real_t tmp_306 = tmp_296 + tmp_71;
      real_t tmp_307 = tmp_298 + tmp_73;
      real_t tmp_308 = tmp_300 + tmp_75;
      real_t tmp_309 = tmp_17*tmp_308 + tmp_20*tmp_307 + tmp_23*tmp_306;
      real_t tmp_310 = tmp_16*tmp_308 + tmp_19*tmp_307 + tmp_22*tmp_306;
      real_t tmp_311 = tmp_15*tmp_308 + tmp_18*tmp_307 + tmp_21*tmp_306;
      real_t tmp_312 = -tmp_309 - tmp_310 - tmp_311 + 1;
      real_t tmp_313 = tmp_312*tmp_83;
      real_t tmp_314 = 0.042507265838595799*tmp_85;
      real_t tmp_315 = 0.039308471900058539*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_316 = tmp_25 + tmp_315;
      real_t tmp_317 = 0.039308471900058539*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_318 = tmp_317 + tmp_47;
      real_t tmp_319 = 0.039308471900058539*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_320 = tmp_319 + tmp_54;
      real_t tmp_321 = tmp_316*tmp_46 + tmp_318*tmp_53 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_316*tmp_62 + tmp_318*tmp_63 + tmp_320*tmp_64;
      real_t tmp_323 = tmp_316*tmp_66 + tmp_318*tmp_67 + tmp_320*tmp_68;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_315 + tmp_71;
      real_t tmp_326 = tmp_317 + tmp_73;
      real_t tmp_327 = tmp_319 + tmp_75;
      real_t tmp_328 = tmp_17*tmp_327 + tmp_20*tmp_326 + tmp_23*tmp_325;
      real_t tmp_329 = tmp_16*tmp_327 + tmp_19*tmp_326 + tmp_22*tmp_325;
      real_t tmp_330 = tmp_15*tmp_327 + tmp_18*tmp_326 + tmp_21*tmp_325;
      real_t tmp_331 = -tmp_328 - tmp_329 - tmp_330 + 1;
      real_t tmp_332 = tmp_331*tmp_83;
      real_t tmp_333 = 0.020848748529055869*tmp_85;
      real_t tmp_334 = 0.93718850182767688*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_335 = tmp_25 + tmp_334;
      real_t tmp_336 = 0.93718850182767688*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_337 = tmp_336 + tmp_47;
      real_t tmp_338 = 0.93718850182767688*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_339 = tmp_338 + tmp_54;
      real_t tmp_340 = tmp_335*tmp_46 + tmp_337*tmp_53 + tmp_339*tmp_60;
      real_t tmp_341 = tmp_335*tmp_62 + tmp_337*tmp_63 + tmp_339*tmp_64;
      real_t tmp_342 = tmp_335*tmp_66 + tmp_337*tmp_67 + tmp_339*tmp_68;
      real_t tmp_343 = -tmp_340 - tmp_341 - tmp_342 + 1;
      real_t tmp_344 = tmp_334 + tmp_71;
      real_t tmp_345 = tmp_336 + tmp_73;
      real_t tmp_346 = tmp_338 + tmp_75;
      real_t tmp_347 = tmp_17*tmp_346 + tmp_20*tmp_345 + tmp_23*tmp_344;
      real_t tmp_348 = tmp_16*tmp_346 + tmp_19*tmp_345 + tmp_22*tmp_344;
      real_t tmp_349 = tmp_15*tmp_346 + tmp_18*tmp_345 + tmp_21*tmp_344;
      real_t tmp_350 = -tmp_347 - tmp_348 - tmp_349 + 1;
      real_t tmp_351 = tmp_350*tmp_83;
      real_t tmp_352 = 0.0068572537431980923*tmp_85;
      real_t tmp_353 = 0.60796128279561268*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_354 = tmp_25 + tmp_353;
      real_t tmp_355 = 0.60796128279561268*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_356 = tmp_355 + tmp_47;
      real_t tmp_357 = 0.60796128279561268*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_358 = tmp_357 + tmp_54;
      real_t tmp_359 = tmp_354*tmp_46 + tmp_356*tmp_53 + tmp_358*tmp_60;
      real_t tmp_360 = tmp_354*tmp_62 + tmp_356*tmp_63 + tmp_358*tmp_64;
      real_t tmp_361 = tmp_354*tmp_66 + tmp_356*tmp_67 + tmp_358*tmp_68;
      real_t tmp_362 = -tmp_359 - tmp_360 - tmp_361 + 1;
      real_t tmp_363 = tmp_353 + tmp_71;
      real_t tmp_364 = tmp_355 + tmp_73;
      real_t tmp_365 = tmp_357 + tmp_75;
      real_t tmp_366 = tmp_17*tmp_365 + tmp_20*tmp_364 + tmp_23*tmp_363;
      real_t tmp_367 = tmp_16*tmp_365 + tmp_19*tmp_364 + tmp_22*tmp_363;
      real_t tmp_368 = tmp_15*tmp_365 + tmp_18*tmp_364 + tmp_21*tmp_363;
      real_t tmp_369 = -tmp_366 - tmp_367 - tmp_368 + 1;
      real_t tmp_370 = tmp_369*tmp_83;
      real_t tmp_371 = 0.037198804536718075*tmp_85;
      real_t tmp_372 = 0.19107600050469298*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_373 = tmp_25 + tmp_372;
      real_t tmp_374 = 0.19107600050469298*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_375 = tmp_374 + tmp_47;
      real_t tmp_376 = 0.19107600050469298*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_377 = tmp_376 + tmp_54;
      real_t tmp_378 = tmp_373*tmp_46 + tmp_375*tmp_53 + tmp_377*tmp_60;
      real_t tmp_379 = tmp_373*tmp_62 + tmp_375*tmp_63 + tmp_377*tmp_64;
      real_t tmp_380 = tmp_373*tmp_66 + tmp_375*tmp_67 + tmp_377*tmp_68;
      real_t tmp_381 = -tmp_378 - tmp_379 - tmp_380 + 1;
      real_t tmp_382 = tmp_372 + tmp_71;
      real_t tmp_383 = tmp_374 + tmp_73;
      real_t tmp_384 = tmp_376 + tmp_75;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_388*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.031405749086161582*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_392 = tmp_25 + tmp_391;
      real_t tmp_393 = 0.031405749086161582*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_394 = tmp_393 + tmp_47;
      real_t tmp_395 = 0.031405749086161582*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_396 = tmp_395 + tmp_54;
      real_t tmp_397 = tmp_392*tmp_46 + tmp_394*tmp_53 + tmp_396*tmp_60;
      real_t tmp_398 = tmp_392*tmp_62 + tmp_394*tmp_63 + tmp_396*tmp_64;
      real_t tmp_399 = tmp_392*tmp_66 + tmp_394*tmp_67 + tmp_396*tmp_68;
      real_t tmp_400 = -tmp_397 - tmp_398 - tmp_399 + 1;
      real_t tmp_401 = tmp_391 + tmp_71;
      real_t tmp_402 = tmp_393 + tmp_73;
      real_t tmp_403 = tmp_395 + tmp_75;
      real_t tmp_404 = tmp_17*tmp_403 + tmp_20*tmp_402 + tmp_23*tmp_401;
      real_t tmp_405 = tmp_16*tmp_403 + tmp_19*tmp_402 + tmp_22*tmp_401;
      real_t tmp_406 = tmp_15*tmp_403 + tmp_18*tmp_402 + tmp_21*tmp_401;
      real_t tmp_407 = -tmp_404 - tmp_405 - tmp_406 + 1;
      real_t tmp_408 = tmp_407*tmp_83;
      real_t tmp_409 = 0.0068572537431980923*tmp_85;
      real_t tmp_410 = 0.19601935860219369*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_411 = tmp_25 + tmp_410;
      real_t tmp_412 = 0.19601935860219369*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_413 = tmp_412 + tmp_47;
      real_t tmp_414 = 0.19601935860219369*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_415 = tmp_414 + tmp_54;
      real_t tmp_416 = tmp_411*tmp_46 + tmp_413*tmp_53 + tmp_415*tmp_60;
      real_t tmp_417 = tmp_411*tmp_62 + tmp_413*tmp_63 + tmp_415*tmp_64;
      real_t tmp_418 = tmp_411*tmp_66 + tmp_413*tmp_67 + tmp_415*tmp_68;
      real_t tmp_419 = -tmp_416 - tmp_417 - tmp_418 + 1;
      real_t tmp_420 = tmp_410 + tmp_71;
      real_t tmp_421 = tmp_412 + tmp_73;
      real_t tmp_422 = tmp_414 + tmp_75;
      real_t tmp_423 = tmp_17*tmp_422 + tmp_20*tmp_421 + tmp_23*tmp_420;
      real_t tmp_424 = tmp_16*tmp_422 + tmp_19*tmp_421 + tmp_22*tmp_420;
      real_t tmp_425 = tmp_15*tmp_422 + tmp_18*tmp_421 + tmp_21*tmp_420;
      real_t tmp_426 = -tmp_423 - tmp_424 - tmp_425 + 1;
      real_t tmp_427 = tmp_426*tmp_83;
      real_t tmp_428 = 0.037198804536718075*tmp_85;
      real_t tmp_429 = 0.40446199974765351*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_430 = tmp_25 + tmp_429;
      real_t tmp_431 = 0.40446199974765351*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_432 = tmp_431 + tmp_47;
      real_t tmp_433 = 0.40446199974765351*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_434 = tmp_433 + tmp_54;
      real_t tmp_435 = tmp_430*tmp_46 + tmp_432*tmp_53 + tmp_434*tmp_60;
      real_t tmp_436 = tmp_430*tmp_62 + tmp_432*tmp_63 + tmp_434*tmp_64;
      real_t tmp_437 = tmp_430*tmp_66 + tmp_432*tmp_67 + tmp_434*tmp_68;
      real_t tmp_438 = -tmp_435 - tmp_436 - tmp_437 + 1;
      real_t tmp_439 = tmp_429 + tmp_71;
      real_t tmp_440 = tmp_431 + tmp_73;
      real_t tmp_441 = tmp_433 + tmp_75;
      real_t tmp_442 = tmp_17*tmp_441 + tmp_20*tmp_440 + tmp_23*tmp_439;
      real_t tmp_443 = tmp_16*tmp_441 + tmp_19*tmp_440 + tmp_22*tmp_439;
      real_t tmp_444 = tmp_15*tmp_441 + tmp_18*tmp_440 + tmp_21*tmp_439;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_445*tmp_83;
      real_t tmp_447 = 0.042507265838595799*tmp_85;
      real_t tmp_448 = 0.1711304259088916*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_449 = tmp_25 + tmp_448;
      real_t tmp_450 = 0.1711304259088916*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_451 = tmp_450 + tmp_47;
      real_t tmp_452 = 0.1711304259088916*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_453 = tmp_452 + tmp_54;
      real_t tmp_454 = tmp_449*tmp_46 + tmp_451*tmp_53 + tmp_453*tmp_60;
      real_t tmp_455 = tmp_449*tmp_62 + tmp_451*tmp_63 + tmp_453*tmp_64;
      real_t tmp_456 = tmp_449*tmp_66 + tmp_451*tmp_67 + tmp_453*tmp_68;
      real_t tmp_457 = -tmp_454 - tmp_455 - tmp_456 + 1;
      real_t tmp_458 = tmp_448 + tmp_71;
      real_t tmp_459 = tmp_450 + tmp_73;
      real_t tmp_460 = tmp_452 + tmp_75;
      real_t tmp_461 = tmp_17*tmp_460 + tmp_20*tmp_459 + tmp_23*tmp_458;
      real_t tmp_462 = tmp_16*tmp_460 + tmp_19*tmp_459 + tmp_22*tmp_458;
      real_t tmp_463 = tmp_15*tmp_460 + tmp_18*tmp_459 + tmp_21*tmp_458;
      real_t tmp_464 = -tmp_461 - tmp_462 - tmp_463 + 1;
      real_t tmp_465 = tmp_464*tmp_83;
      real_t tmp_466 = 0.019202922745021479*tmp_85;
      real_t tmp_467 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_53 + 0.5*p_affine_13_2*tmp_46;
      real_t tmp_468 = 0.5*p_affine_13_0*tmp_64 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_62;
      real_t tmp_469 = 0.5*p_affine_13_0*tmp_68 + 0.5*p_affine_13_1*tmp_67 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_470 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_471 = tmp_77*tmp_83;
      real_t tmp_472 = tmp_100*tmp_83;
      real_t tmp_473 = tmp_119*tmp_83;
      real_t tmp_474 = tmp_138*tmp_83;
      real_t tmp_475 = tmp_157*tmp_83;
      real_t tmp_476 = tmp_176*tmp_83;
      real_t tmp_477 = tmp_195*tmp_83;
      real_t tmp_478 = tmp_214*tmp_83;
      real_t tmp_479 = tmp_233*tmp_83;
      real_t tmp_480 = tmp_252*tmp_83;
      real_t tmp_481 = tmp_271*tmp_83;
      real_t tmp_482 = tmp_290*tmp_83;
      real_t tmp_483 = tmp_309*tmp_83;
      real_t tmp_484 = tmp_328*tmp_83;
      real_t tmp_485 = tmp_347*tmp_83;
      real_t tmp_486 = tmp_366*tmp_83;
      real_t tmp_487 = tmp_385*tmp_83;
      real_t tmp_488 = tmp_404*tmp_83;
      real_t tmp_489 = tmp_423*tmp_83;
      real_t tmp_490 = tmp_442*tmp_83;
      real_t tmp_491 = tmp_461*tmp_83;
      real_t tmp_492 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_493 = tmp_78*tmp_83;
      real_t tmp_494 = tmp_101*tmp_83;
      real_t tmp_495 = tmp_120*tmp_83;
      real_t tmp_496 = tmp_139*tmp_83;
      real_t tmp_497 = tmp_158*tmp_83;
      real_t tmp_498 = tmp_177*tmp_83;
      real_t tmp_499 = tmp_196*tmp_83;
      real_t tmp_500 = tmp_215*tmp_83;
      real_t tmp_501 = tmp_234*tmp_83;
      real_t tmp_502 = tmp_253*tmp_83;
      real_t tmp_503 = tmp_272*tmp_83;
      real_t tmp_504 = tmp_291*tmp_83;
      real_t tmp_505 = tmp_310*tmp_83;
      real_t tmp_506 = tmp_329*tmp_83;
      real_t tmp_507 = tmp_348*tmp_83;
      real_t tmp_508 = tmp_367*tmp_83;
      real_t tmp_509 = tmp_386*tmp_83;
      real_t tmp_510 = tmp_405*tmp_83;
      real_t tmp_511 = tmp_424*tmp_83;
      real_t tmp_512 = tmp_443*tmp_83;
      real_t tmp_513 = tmp_462*tmp_83;
      real_t tmp_514 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t tmp_515 = tmp_79*tmp_83;
      real_t tmp_516 = tmp_102*tmp_83;
      real_t tmp_517 = tmp_121*tmp_83;
      real_t tmp_518 = tmp_140*tmp_83;
      real_t tmp_519 = tmp_159*tmp_83;
      real_t tmp_520 = tmp_178*tmp_83;
      real_t tmp_521 = tmp_197*tmp_83;
      real_t tmp_522 = tmp_216*tmp_83;
      real_t tmp_523 = tmp_235*tmp_83;
      real_t tmp_524 = tmp_254*tmp_83;
      real_t tmp_525 = tmp_273*tmp_83;
      real_t tmp_526 = tmp_292*tmp_83;
      real_t tmp_527 = tmp_311*tmp_83;
      real_t tmp_528 = tmp_330*tmp_83;
      real_t tmp_529 = tmp_349*tmp_83;
      real_t tmp_530 = tmp_368*tmp_83;
      real_t tmp_531 = tmp_387*tmp_83;
      real_t tmp_532 = tmp_406*tmp_83;
      real_t tmp_533 = tmp_425*tmp_83;
      real_t tmp_534 = tmp_444*tmp_83;
      real_t tmp_535 = tmp_463*tmp_83;
      real_t a_0_0 = tmp_105*(-tmp_103*tmp_81 - tmp_104*tmp_96 + 0.5*tmp_24*tmp_96) + tmp_124*(-tmp_115*tmp_123 + 0.5*tmp_115*tmp_24 - tmp_122*tmp_81) + tmp_143*(-tmp_134*tmp_142 + 0.5*tmp_134*tmp_24 - tmp_141*tmp_81) + tmp_162*(-tmp_153*tmp_161 + 0.5*tmp_153*tmp_24 - tmp_160*tmp_81) + tmp_181*(-tmp_172*tmp_180 + 0.5*tmp_172*tmp_24 - tmp_179*tmp_81) + tmp_200*(-tmp_191*tmp_199 + 0.5*tmp_191*tmp_24 - tmp_198*tmp_81) + tmp_219*(-tmp_210*tmp_218 + 0.5*tmp_210*tmp_24 - tmp_217*tmp_81) + tmp_238*(-tmp_229*tmp_237 + 0.5*tmp_229*tmp_24 - tmp_236*tmp_81) + tmp_257*(0.5*tmp_24*tmp_248 - tmp_248*tmp_256 - tmp_255*tmp_81) + tmp_276*(0.5*tmp_24*tmp_267 - tmp_267*tmp_275 - tmp_274*tmp_81) + tmp_295*(0.5*tmp_24*tmp_286 - tmp_286*tmp_294 - tmp_293*tmp_81) + tmp_314*(0.5*tmp_24*tmp_305 - tmp_305*tmp_313 - tmp_312*tmp_81) + tmp_333*(0.5*tmp_24*tmp_324 - tmp_324*tmp_332 - tmp_331*tmp_81) + tmp_352*(0.5*tmp_24*tmp_343 - tmp_343*tmp_351 - tmp_350*tmp_81) + tmp_371*(0.5*tmp_24*tmp_362 - tmp_362*tmp_370 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_381*tmp_389 - tmp_388*tmp_81) + tmp_409*(0.5*tmp_24*tmp_400 - tmp_400*tmp_408 - tmp_407*tmp_81) + tmp_428*(0.5*tmp_24*tmp_419 - tmp_419*tmp_427 - tmp_426*tmp_81) + tmp_447*(0.5*tmp_24*tmp_438 - tmp_438*tmp_446 - tmp_445*tmp_81) + tmp_466*(0.5*tmp_24*tmp_457 - tmp_457*tmp_465 - tmp_464*tmp_81) + tmp_86*(0.5*tmp_24*tmp_70 - tmp_70*tmp_84 - tmp_80*tmp_81);
      real_t a_0_1 = tmp_105*(-tmp_103*tmp_467 - tmp_104*tmp_93 + 0.5*tmp_24*tmp_93) + tmp_124*(-tmp_112*tmp_123 + 0.5*tmp_112*tmp_24 - tmp_122*tmp_467) + tmp_143*(-tmp_131*tmp_142 + 0.5*tmp_131*tmp_24 - tmp_141*tmp_467) + tmp_162*(-tmp_150*tmp_161 + 0.5*tmp_150*tmp_24 - tmp_160*tmp_467) + tmp_181*(-tmp_169*tmp_180 + 0.5*tmp_169*tmp_24 - tmp_179*tmp_467) + tmp_200*(-tmp_188*tmp_199 + 0.5*tmp_188*tmp_24 - tmp_198*tmp_467) + tmp_219*(-tmp_207*tmp_218 + 0.5*tmp_207*tmp_24 - tmp_217*tmp_467) + tmp_238*(-tmp_226*tmp_237 + 0.5*tmp_226*tmp_24 - tmp_236*tmp_467) + tmp_257*(0.5*tmp_24*tmp_245 - tmp_245*tmp_256 - tmp_255*tmp_467) + tmp_276*(0.5*tmp_24*tmp_264 - tmp_264*tmp_275 - tmp_274*tmp_467) + tmp_295*(0.5*tmp_24*tmp_283 - tmp_283*tmp_294 - tmp_293*tmp_467) + tmp_314*(0.5*tmp_24*tmp_302 - tmp_302*tmp_313 - tmp_312*tmp_467) + tmp_333*(0.5*tmp_24*tmp_321 - tmp_321*tmp_332 - tmp_331*tmp_467) + tmp_352*(0.5*tmp_24*tmp_340 - tmp_340*tmp_351 - tmp_350*tmp_467) + tmp_371*(0.5*tmp_24*tmp_359 - tmp_359*tmp_370 - tmp_369*tmp_467) + tmp_390*(0.5*tmp_24*tmp_378 - tmp_378*tmp_389 - tmp_388*tmp_467) + tmp_409*(0.5*tmp_24*tmp_397 - tmp_397*tmp_408 - tmp_407*tmp_467) + tmp_428*(0.5*tmp_24*tmp_416 - tmp_416*tmp_427 - tmp_426*tmp_467) + tmp_447*(0.5*tmp_24*tmp_435 - tmp_435*tmp_446 - tmp_445*tmp_467) + tmp_466*(0.5*tmp_24*tmp_454 - tmp_454*tmp_465 - tmp_464*tmp_467) + tmp_86*(0.5*tmp_24*tmp_61 - tmp_467*tmp_80 - tmp_61*tmp_84);
      real_t a_0_2 = tmp_105*(-tmp_103*tmp_468 - tmp_104*tmp_94 + 0.5*tmp_24*tmp_94) + tmp_124*(-tmp_113*tmp_123 + 0.5*tmp_113*tmp_24 - tmp_122*tmp_468) + tmp_143*(-tmp_132*tmp_142 + 0.5*tmp_132*tmp_24 - tmp_141*tmp_468) + tmp_162*(-tmp_151*tmp_161 + 0.5*tmp_151*tmp_24 - tmp_160*tmp_468) + tmp_181*(-tmp_170*tmp_180 + 0.5*tmp_170*tmp_24 - tmp_179*tmp_468) + tmp_200*(-tmp_189*tmp_199 + 0.5*tmp_189*tmp_24 - tmp_198*tmp_468) + tmp_219*(-tmp_208*tmp_218 + 0.5*tmp_208*tmp_24 - tmp_217*tmp_468) + tmp_238*(-tmp_227*tmp_237 + 0.5*tmp_227*tmp_24 - tmp_236*tmp_468) + tmp_257*(0.5*tmp_24*tmp_246 - tmp_246*tmp_256 - tmp_255*tmp_468) + tmp_276*(0.5*tmp_24*tmp_265 - tmp_265*tmp_275 - tmp_274*tmp_468) + tmp_295*(0.5*tmp_24*tmp_284 - tmp_284*tmp_294 - tmp_293*tmp_468) + tmp_314*(0.5*tmp_24*tmp_303 - tmp_303*tmp_313 - tmp_312*tmp_468) + tmp_333*(0.5*tmp_24*tmp_322 - tmp_322*tmp_332 - tmp_331*tmp_468) + tmp_352*(0.5*tmp_24*tmp_341 - tmp_341*tmp_351 - tmp_350*tmp_468) + tmp_371*(0.5*tmp_24*tmp_360 - tmp_360*tmp_370 - tmp_369*tmp_468) + tmp_390*(0.5*tmp_24*tmp_379 - tmp_379*tmp_389 - tmp_388*tmp_468) + tmp_409*(0.5*tmp_24*tmp_398 - tmp_398*tmp_408 - tmp_407*tmp_468) + tmp_428*(0.5*tmp_24*tmp_417 - tmp_417*tmp_427 - tmp_426*tmp_468) + tmp_447*(0.5*tmp_24*tmp_436 - tmp_436*tmp_446 - tmp_445*tmp_468) + tmp_466*(0.5*tmp_24*tmp_455 - tmp_455*tmp_465 - tmp_464*tmp_468) + tmp_86*(0.5*tmp_24*tmp_65 - tmp_468*tmp_80 - tmp_65*tmp_84);
      real_t a_0_3 = tmp_105*(-tmp_103*tmp_469 - tmp_104*tmp_95 + 0.5*tmp_24*tmp_95) + tmp_124*(-tmp_114*tmp_123 + 0.5*tmp_114*tmp_24 - tmp_122*tmp_469) + tmp_143*(-tmp_133*tmp_142 + 0.5*tmp_133*tmp_24 - tmp_141*tmp_469) + tmp_162*(-tmp_152*tmp_161 + 0.5*tmp_152*tmp_24 - tmp_160*tmp_469) + tmp_181*(-tmp_171*tmp_180 + 0.5*tmp_171*tmp_24 - tmp_179*tmp_469) + tmp_200*(-tmp_190*tmp_199 + 0.5*tmp_190*tmp_24 - tmp_198*tmp_469) + tmp_219*(-tmp_209*tmp_218 + 0.5*tmp_209*tmp_24 - tmp_217*tmp_469) + tmp_238*(-tmp_228*tmp_237 + 0.5*tmp_228*tmp_24 - tmp_236*tmp_469) + tmp_257*(0.5*tmp_24*tmp_247 - tmp_247*tmp_256 - tmp_255*tmp_469) + tmp_276*(0.5*tmp_24*tmp_266 - tmp_266*tmp_275 - tmp_274*tmp_469) + tmp_295*(0.5*tmp_24*tmp_285 - tmp_285*tmp_294 - tmp_293*tmp_469) + tmp_314*(0.5*tmp_24*tmp_304 - tmp_304*tmp_313 - tmp_312*tmp_469) + tmp_333*(0.5*tmp_24*tmp_323 - tmp_323*tmp_332 - tmp_331*tmp_469) + tmp_352*(0.5*tmp_24*tmp_342 - tmp_342*tmp_351 - tmp_350*tmp_469) + tmp_371*(0.5*tmp_24*tmp_361 - tmp_361*tmp_370 - tmp_369*tmp_469) + tmp_390*(0.5*tmp_24*tmp_380 - tmp_380*tmp_389 - tmp_388*tmp_469) + tmp_409*(0.5*tmp_24*tmp_399 - tmp_399*tmp_408 - tmp_407*tmp_469) + tmp_428*(0.5*tmp_24*tmp_418 - tmp_418*tmp_427 - tmp_426*tmp_469) + tmp_447*(0.5*tmp_24*tmp_437 - tmp_437*tmp_446 - tmp_445*tmp_469) + tmp_466*(0.5*tmp_24*tmp_456 - tmp_456*tmp_465 - tmp_464*tmp_469) + tmp_86*(0.5*tmp_24*tmp_69 - tmp_469*tmp_80 - tmp_69*tmp_84);
      real_t a_1_0 = tmp_105*(-tmp_100*tmp_81 + 0.5*tmp_470*tmp_96 - tmp_472*tmp_96) + tmp_124*(0.5*tmp_115*tmp_470 - tmp_115*tmp_473 - tmp_119*tmp_81) + tmp_143*(0.5*tmp_134*tmp_470 - tmp_134*tmp_474 - tmp_138*tmp_81) + tmp_162*(0.5*tmp_153*tmp_470 - tmp_153*tmp_475 - tmp_157*tmp_81) + tmp_181*(0.5*tmp_172*tmp_470 - tmp_172*tmp_476 - tmp_176*tmp_81) + tmp_200*(0.5*tmp_191*tmp_470 - tmp_191*tmp_477 - tmp_195*tmp_81) + tmp_219*(0.5*tmp_210*tmp_470 - tmp_210*tmp_478 - tmp_214*tmp_81) + tmp_238*(0.5*tmp_229*tmp_470 - tmp_229*tmp_479 - tmp_233*tmp_81) + tmp_257*(0.5*tmp_248*tmp_470 - tmp_248*tmp_480 - tmp_252*tmp_81) + tmp_276*(0.5*tmp_267*tmp_470 - tmp_267*tmp_481 - tmp_271*tmp_81) + tmp_295*(0.5*tmp_286*tmp_470 - tmp_286*tmp_482 - tmp_290*tmp_81) + tmp_314*(0.5*tmp_305*tmp_470 - tmp_305*tmp_483 - tmp_309*tmp_81) + tmp_333*(0.5*tmp_324*tmp_470 - tmp_324*tmp_484 - tmp_328*tmp_81) + tmp_352*(0.5*tmp_343*tmp_470 - tmp_343*tmp_485 - tmp_347*tmp_81) + tmp_371*(0.5*tmp_362*tmp_470 - tmp_362*tmp_486 - tmp_366*tmp_81) + tmp_390*(0.5*tmp_381*tmp_470 - tmp_381*tmp_487 - tmp_385*tmp_81) + tmp_409*(0.5*tmp_400*tmp_470 - tmp_400*tmp_488 - tmp_404*tmp_81) + tmp_428*(0.5*tmp_419*tmp_470 - tmp_419*tmp_489 - tmp_423*tmp_81) + tmp_447*(0.5*tmp_438*tmp_470 - tmp_438*tmp_490 - tmp_442*tmp_81) + tmp_466*(0.5*tmp_457*tmp_470 - tmp_457*tmp_491 - tmp_461*tmp_81) + tmp_86*(0.5*tmp_470*tmp_70 - tmp_471*tmp_70 - tmp_77*tmp_81);
      real_t a_1_1 = tmp_105*(-tmp_100*tmp_467 + 0.5*tmp_470*tmp_93 - tmp_472*tmp_93) + tmp_124*(0.5*tmp_112*tmp_470 - tmp_112*tmp_473 - tmp_119*tmp_467) + tmp_143*(0.5*tmp_131*tmp_470 - tmp_131*tmp_474 - tmp_138*tmp_467) + tmp_162*(0.5*tmp_150*tmp_470 - tmp_150*tmp_475 - tmp_157*tmp_467) + tmp_181*(0.5*tmp_169*tmp_470 - tmp_169*tmp_476 - tmp_176*tmp_467) + tmp_200*(0.5*tmp_188*tmp_470 - tmp_188*tmp_477 - tmp_195*tmp_467) + tmp_219*(0.5*tmp_207*tmp_470 - tmp_207*tmp_478 - tmp_214*tmp_467) + tmp_238*(0.5*tmp_226*tmp_470 - tmp_226*tmp_479 - tmp_233*tmp_467) + tmp_257*(0.5*tmp_245*tmp_470 - tmp_245*tmp_480 - tmp_252*tmp_467) + tmp_276*(0.5*tmp_264*tmp_470 - tmp_264*tmp_481 - tmp_271*tmp_467) + tmp_295*(0.5*tmp_283*tmp_470 - tmp_283*tmp_482 - tmp_290*tmp_467) + tmp_314*(0.5*tmp_302*tmp_470 - tmp_302*tmp_483 - tmp_309*tmp_467) + tmp_333*(0.5*tmp_321*tmp_470 - tmp_321*tmp_484 - tmp_328*tmp_467) + tmp_352*(0.5*tmp_340*tmp_470 - tmp_340*tmp_485 - tmp_347*tmp_467) + tmp_371*(0.5*tmp_359*tmp_470 - tmp_359*tmp_486 - tmp_366*tmp_467) + tmp_390*(0.5*tmp_378*tmp_470 - tmp_378*tmp_487 - tmp_385*tmp_467) + tmp_409*(0.5*tmp_397*tmp_470 - tmp_397*tmp_488 - tmp_404*tmp_467) + tmp_428*(0.5*tmp_416*tmp_470 - tmp_416*tmp_489 - tmp_423*tmp_467) + tmp_447*(0.5*tmp_435*tmp_470 - tmp_435*tmp_490 - tmp_442*tmp_467) + tmp_466*(0.5*tmp_454*tmp_470 - tmp_454*tmp_491 - tmp_461*tmp_467) + tmp_86*(-tmp_467*tmp_77 + 0.5*tmp_470*tmp_61 - tmp_471*tmp_61);
      real_t a_1_2 = tmp_105*(-tmp_100*tmp_468 + 0.5*tmp_470*tmp_94 - tmp_472*tmp_94) + tmp_124*(0.5*tmp_113*tmp_470 - tmp_113*tmp_473 - tmp_119*tmp_468) + tmp_143*(0.5*tmp_132*tmp_470 - tmp_132*tmp_474 - tmp_138*tmp_468) + tmp_162*(0.5*tmp_151*tmp_470 - tmp_151*tmp_475 - tmp_157*tmp_468) + tmp_181*(0.5*tmp_170*tmp_470 - tmp_170*tmp_476 - tmp_176*tmp_468) + tmp_200*(0.5*tmp_189*tmp_470 - tmp_189*tmp_477 - tmp_195*tmp_468) + tmp_219*(0.5*tmp_208*tmp_470 - tmp_208*tmp_478 - tmp_214*tmp_468) + tmp_238*(0.5*tmp_227*tmp_470 - tmp_227*tmp_479 - tmp_233*tmp_468) + tmp_257*(0.5*tmp_246*tmp_470 - tmp_246*tmp_480 - tmp_252*tmp_468) + tmp_276*(0.5*tmp_265*tmp_470 - tmp_265*tmp_481 - tmp_271*tmp_468) + tmp_295*(0.5*tmp_284*tmp_470 - tmp_284*tmp_482 - tmp_290*tmp_468) + tmp_314*(0.5*tmp_303*tmp_470 - tmp_303*tmp_483 - tmp_309*tmp_468) + tmp_333*(0.5*tmp_322*tmp_470 - tmp_322*tmp_484 - tmp_328*tmp_468) + tmp_352*(0.5*tmp_341*tmp_470 - tmp_341*tmp_485 - tmp_347*tmp_468) + tmp_371*(0.5*tmp_360*tmp_470 - tmp_360*tmp_486 - tmp_366*tmp_468) + tmp_390*(0.5*tmp_379*tmp_470 - tmp_379*tmp_487 - tmp_385*tmp_468) + tmp_409*(0.5*tmp_398*tmp_470 - tmp_398*tmp_488 - tmp_404*tmp_468) + tmp_428*(0.5*tmp_417*tmp_470 - tmp_417*tmp_489 - tmp_423*tmp_468) + tmp_447*(0.5*tmp_436*tmp_470 - tmp_436*tmp_490 - tmp_442*tmp_468) + tmp_466*(0.5*tmp_455*tmp_470 - tmp_455*tmp_491 - tmp_461*tmp_468) + tmp_86*(-tmp_468*tmp_77 + 0.5*tmp_470*tmp_65 - tmp_471*tmp_65);
      real_t a_1_3 = tmp_105*(-tmp_100*tmp_469 + 0.5*tmp_470*tmp_95 - tmp_472*tmp_95) + tmp_124*(0.5*tmp_114*tmp_470 - tmp_114*tmp_473 - tmp_119*tmp_469) + tmp_143*(0.5*tmp_133*tmp_470 - tmp_133*tmp_474 - tmp_138*tmp_469) + tmp_162*(0.5*tmp_152*tmp_470 - tmp_152*tmp_475 - tmp_157*tmp_469) + tmp_181*(0.5*tmp_171*tmp_470 - tmp_171*tmp_476 - tmp_176*tmp_469) + tmp_200*(0.5*tmp_190*tmp_470 - tmp_190*tmp_477 - tmp_195*tmp_469) + tmp_219*(0.5*tmp_209*tmp_470 - tmp_209*tmp_478 - tmp_214*tmp_469) + tmp_238*(0.5*tmp_228*tmp_470 - tmp_228*tmp_479 - tmp_233*tmp_469) + tmp_257*(0.5*tmp_247*tmp_470 - tmp_247*tmp_480 - tmp_252*tmp_469) + tmp_276*(0.5*tmp_266*tmp_470 - tmp_266*tmp_481 - tmp_271*tmp_469) + tmp_295*(0.5*tmp_285*tmp_470 - tmp_285*tmp_482 - tmp_290*tmp_469) + tmp_314*(0.5*tmp_304*tmp_470 - tmp_304*tmp_483 - tmp_309*tmp_469) + tmp_333*(0.5*tmp_323*tmp_470 - tmp_323*tmp_484 - tmp_328*tmp_469) + tmp_352*(0.5*tmp_342*tmp_470 - tmp_342*tmp_485 - tmp_347*tmp_469) + tmp_371*(0.5*tmp_361*tmp_470 - tmp_361*tmp_486 - tmp_366*tmp_469) + tmp_390*(0.5*tmp_380*tmp_470 - tmp_380*tmp_487 - tmp_385*tmp_469) + tmp_409*(0.5*tmp_399*tmp_470 - tmp_399*tmp_488 - tmp_404*tmp_469) + tmp_428*(0.5*tmp_418*tmp_470 - tmp_418*tmp_489 - tmp_423*tmp_469) + tmp_447*(0.5*tmp_437*tmp_470 - tmp_437*tmp_490 - tmp_442*tmp_469) + tmp_466*(0.5*tmp_456*tmp_470 - tmp_456*tmp_491 - tmp_461*tmp_469) + tmp_86*(-tmp_469*tmp_77 + 0.5*tmp_470*tmp_69 - tmp_471*tmp_69);
      real_t a_2_0 = tmp_105*(-tmp_101*tmp_81 + 0.5*tmp_492*tmp_96 - tmp_494*tmp_96) + tmp_124*(0.5*tmp_115*tmp_492 - tmp_115*tmp_495 - tmp_120*tmp_81) + tmp_143*(0.5*tmp_134*tmp_492 - tmp_134*tmp_496 - tmp_139*tmp_81) + tmp_162*(0.5*tmp_153*tmp_492 - tmp_153*tmp_497 - tmp_158*tmp_81) + tmp_181*(0.5*tmp_172*tmp_492 - tmp_172*tmp_498 - tmp_177*tmp_81) + tmp_200*(0.5*tmp_191*tmp_492 - tmp_191*tmp_499 - tmp_196*tmp_81) + tmp_219*(0.5*tmp_210*tmp_492 - tmp_210*tmp_500 - tmp_215*tmp_81) + tmp_238*(0.5*tmp_229*tmp_492 - tmp_229*tmp_501 - tmp_234*tmp_81) + tmp_257*(0.5*tmp_248*tmp_492 - tmp_248*tmp_502 - tmp_253*tmp_81) + tmp_276*(0.5*tmp_267*tmp_492 - tmp_267*tmp_503 - tmp_272*tmp_81) + tmp_295*(0.5*tmp_286*tmp_492 - tmp_286*tmp_504 - tmp_291*tmp_81) + tmp_314*(0.5*tmp_305*tmp_492 - tmp_305*tmp_505 - tmp_310*tmp_81) + tmp_333*(0.5*tmp_324*tmp_492 - tmp_324*tmp_506 - tmp_329*tmp_81) + tmp_352*(0.5*tmp_343*tmp_492 - tmp_343*tmp_507 - tmp_348*tmp_81) + tmp_371*(0.5*tmp_362*tmp_492 - tmp_362*tmp_508 - tmp_367*tmp_81) + tmp_390*(0.5*tmp_381*tmp_492 - tmp_381*tmp_509 - tmp_386*tmp_81) + tmp_409*(0.5*tmp_400*tmp_492 - tmp_400*tmp_510 - tmp_405*tmp_81) + tmp_428*(0.5*tmp_419*tmp_492 - tmp_419*tmp_511 - tmp_424*tmp_81) + tmp_447*(0.5*tmp_438*tmp_492 - tmp_438*tmp_512 - tmp_443*tmp_81) + tmp_466*(0.5*tmp_457*tmp_492 - tmp_457*tmp_513 - tmp_462*tmp_81) + tmp_86*(0.5*tmp_492*tmp_70 - tmp_493*tmp_70 - tmp_78*tmp_81);
      real_t a_2_1 = tmp_105*(-tmp_101*tmp_467 + 0.5*tmp_492*tmp_93 - tmp_494*tmp_93) + tmp_124*(0.5*tmp_112*tmp_492 - tmp_112*tmp_495 - tmp_120*tmp_467) + tmp_143*(0.5*tmp_131*tmp_492 - tmp_131*tmp_496 - tmp_139*tmp_467) + tmp_162*(0.5*tmp_150*tmp_492 - tmp_150*tmp_497 - tmp_158*tmp_467) + tmp_181*(0.5*tmp_169*tmp_492 - tmp_169*tmp_498 - tmp_177*tmp_467) + tmp_200*(0.5*tmp_188*tmp_492 - tmp_188*tmp_499 - tmp_196*tmp_467) + tmp_219*(0.5*tmp_207*tmp_492 - tmp_207*tmp_500 - tmp_215*tmp_467) + tmp_238*(0.5*tmp_226*tmp_492 - tmp_226*tmp_501 - tmp_234*tmp_467) + tmp_257*(0.5*tmp_245*tmp_492 - tmp_245*tmp_502 - tmp_253*tmp_467) + tmp_276*(0.5*tmp_264*tmp_492 - tmp_264*tmp_503 - tmp_272*tmp_467) + tmp_295*(0.5*tmp_283*tmp_492 - tmp_283*tmp_504 - tmp_291*tmp_467) + tmp_314*(0.5*tmp_302*tmp_492 - tmp_302*tmp_505 - tmp_310*tmp_467) + tmp_333*(0.5*tmp_321*tmp_492 - tmp_321*tmp_506 - tmp_329*tmp_467) + tmp_352*(0.5*tmp_340*tmp_492 - tmp_340*tmp_507 - tmp_348*tmp_467) + tmp_371*(0.5*tmp_359*tmp_492 - tmp_359*tmp_508 - tmp_367*tmp_467) + tmp_390*(0.5*tmp_378*tmp_492 - tmp_378*tmp_509 - tmp_386*tmp_467) + tmp_409*(0.5*tmp_397*tmp_492 - tmp_397*tmp_510 - tmp_405*tmp_467) + tmp_428*(0.5*tmp_416*tmp_492 - tmp_416*tmp_511 - tmp_424*tmp_467) + tmp_447*(0.5*tmp_435*tmp_492 - tmp_435*tmp_512 - tmp_443*tmp_467) + tmp_466*(0.5*tmp_454*tmp_492 - tmp_454*tmp_513 - tmp_462*tmp_467) + tmp_86*(-tmp_467*tmp_78 + 0.5*tmp_492*tmp_61 - tmp_493*tmp_61);
      real_t a_2_2 = tmp_105*(-tmp_101*tmp_468 + 0.5*tmp_492*tmp_94 - tmp_494*tmp_94) + tmp_124*(0.5*tmp_113*tmp_492 - tmp_113*tmp_495 - tmp_120*tmp_468) + tmp_143*(0.5*tmp_132*tmp_492 - tmp_132*tmp_496 - tmp_139*tmp_468) + tmp_162*(0.5*tmp_151*tmp_492 - tmp_151*tmp_497 - tmp_158*tmp_468) + tmp_181*(0.5*tmp_170*tmp_492 - tmp_170*tmp_498 - tmp_177*tmp_468) + tmp_200*(0.5*tmp_189*tmp_492 - tmp_189*tmp_499 - tmp_196*tmp_468) + tmp_219*(0.5*tmp_208*tmp_492 - tmp_208*tmp_500 - tmp_215*tmp_468) + tmp_238*(0.5*tmp_227*tmp_492 - tmp_227*tmp_501 - tmp_234*tmp_468) + tmp_257*(0.5*tmp_246*tmp_492 - tmp_246*tmp_502 - tmp_253*tmp_468) + tmp_276*(0.5*tmp_265*tmp_492 - tmp_265*tmp_503 - tmp_272*tmp_468) + tmp_295*(0.5*tmp_284*tmp_492 - tmp_284*tmp_504 - tmp_291*tmp_468) + tmp_314*(0.5*tmp_303*tmp_492 - tmp_303*tmp_505 - tmp_310*tmp_468) + tmp_333*(0.5*tmp_322*tmp_492 - tmp_322*tmp_506 - tmp_329*tmp_468) + tmp_352*(0.5*tmp_341*tmp_492 - tmp_341*tmp_507 - tmp_348*tmp_468) + tmp_371*(0.5*tmp_360*tmp_492 - tmp_360*tmp_508 - tmp_367*tmp_468) + tmp_390*(0.5*tmp_379*tmp_492 - tmp_379*tmp_509 - tmp_386*tmp_468) + tmp_409*(0.5*tmp_398*tmp_492 - tmp_398*tmp_510 - tmp_405*tmp_468) + tmp_428*(0.5*tmp_417*tmp_492 - tmp_417*tmp_511 - tmp_424*tmp_468) + tmp_447*(0.5*tmp_436*tmp_492 - tmp_436*tmp_512 - tmp_443*tmp_468) + tmp_466*(0.5*tmp_455*tmp_492 - tmp_455*tmp_513 - tmp_462*tmp_468) + tmp_86*(-tmp_468*tmp_78 + 0.5*tmp_492*tmp_65 - tmp_493*tmp_65);
      real_t a_2_3 = tmp_105*(-tmp_101*tmp_469 + 0.5*tmp_492*tmp_95 - tmp_494*tmp_95) + tmp_124*(0.5*tmp_114*tmp_492 - tmp_114*tmp_495 - tmp_120*tmp_469) + tmp_143*(0.5*tmp_133*tmp_492 - tmp_133*tmp_496 - tmp_139*tmp_469) + tmp_162*(0.5*tmp_152*tmp_492 - tmp_152*tmp_497 - tmp_158*tmp_469) + tmp_181*(0.5*tmp_171*tmp_492 - tmp_171*tmp_498 - tmp_177*tmp_469) + tmp_200*(0.5*tmp_190*tmp_492 - tmp_190*tmp_499 - tmp_196*tmp_469) + tmp_219*(0.5*tmp_209*tmp_492 - tmp_209*tmp_500 - tmp_215*tmp_469) + tmp_238*(0.5*tmp_228*tmp_492 - tmp_228*tmp_501 - tmp_234*tmp_469) + tmp_257*(0.5*tmp_247*tmp_492 - tmp_247*tmp_502 - tmp_253*tmp_469) + tmp_276*(0.5*tmp_266*tmp_492 - tmp_266*tmp_503 - tmp_272*tmp_469) + tmp_295*(0.5*tmp_285*tmp_492 - tmp_285*tmp_504 - tmp_291*tmp_469) + tmp_314*(0.5*tmp_304*tmp_492 - tmp_304*tmp_505 - tmp_310*tmp_469) + tmp_333*(0.5*tmp_323*tmp_492 - tmp_323*tmp_506 - tmp_329*tmp_469) + tmp_352*(0.5*tmp_342*tmp_492 - tmp_342*tmp_507 - tmp_348*tmp_469) + tmp_371*(0.5*tmp_361*tmp_492 - tmp_361*tmp_508 - tmp_367*tmp_469) + tmp_390*(0.5*tmp_380*tmp_492 - tmp_380*tmp_509 - tmp_386*tmp_469) + tmp_409*(0.5*tmp_399*tmp_492 - tmp_399*tmp_510 - tmp_405*tmp_469) + tmp_428*(0.5*tmp_418*tmp_492 - tmp_418*tmp_511 - tmp_424*tmp_469) + tmp_447*(0.5*tmp_437*tmp_492 - tmp_437*tmp_512 - tmp_443*tmp_469) + tmp_466*(0.5*tmp_456*tmp_492 - tmp_456*tmp_513 - tmp_462*tmp_469) + tmp_86*(-tmp_469*tmp_78 + 0.5*tmp_492*tmp_69 - tmp_493*tmp_69);
      real_t a_3_0 = tmp_105*(-tmp_102*tmp_81 + 0.5*tmp_514*tmp_96 - tmp_516*tmp_96) + tmp_124*(0.5*tmp_115*tmp_514 - tmp_115*tmp_517 - tmp_121*tmp_81) + tmp_143*(0.5*tmp_134*tmp_514 - tmp_134*tmp_518 - tmp_140*tmp_81) + tmp_162*(0.5*tmp_153*tmp_514 - tmp_153*tmp_519 - tmp_159*tmp_81) + tmp_181*(0.5*tmp_172*tmp_514 - tmp_172*tmp_520 - tmp_178*tmp_81) + tmp_200*(0.5*tmp_191*tmp_514 - tmp_191*tmp_521 - tmp_197*tmp_81) + tmp_219*(0.5*tmp_210*tmp_514 - tmp_210*tmp_522 - tmp_216*tmp_81) + tmp_238*(0.5*tmp_229*tmp_514 - tmp_229*tmp_523 - tmp_235*tmp_81) + tmp_257*(0.5*tmp_248*tmp_514 - tmp_248*tmp_524 - tmp_254*tmp_81) + tmp_276*(0.5*tmp_267*tmp_514 - tmp_267*tmp_525 - tmp_273*tmp_81) + tmp_295*(0.5*tmp_286*tmp_514 - tmp_286*tmp_526 - tmp_292*tmp_81) + tmp_314*(0.5*tmp_305*tmp_514 - tmp_305*tmp_527 - tmp_311*tmp_81) + tmp_333*(0.5*tmp_324*tmp_514 - tmp_324*tmp_528 - tmp_330*tmp_81) + tmp_352*(0.5*tmp_343*tmp_514 - tmp_343*tmp_529 - tmp_349*tmp_81) + tmp_371*(0.5*tmp_362*tmp_514 - tmp_362*tmp_530 - tmp_368*tmp_81) + tmp_390*(0.5*tmp_381*tmp_514 - tmp_381*tmp_531 - tmp_387*tmp_81) + tmp_409*(0.5*tmp_400*tmp_514 - tmp_400*tmp_532 - tmp_406*tmp_81) + tmp_428*(0.5*tmp_419*tmp_514 - tmp_419*tmp_533 - tmp_425*tmp_81) + tmp_447*(0.5*tmp_438*tmp_514 - tmp_438*tmp_534 - tmp_444*tmp_81) + tmp_466*(0.5*tmp_457*tmp_514 - tmp_457*tmp_535 - tmp_463*tmp_81) + tmp_86*(0.5*tmp_514*tmp_70 - tmp_515*tmp_70 - tmp_79*tmp_81);
      real_t a_3_1 = tmp_105*(-tmp_102*tmp_467 + 0.5*tmp_514*tmp_93 - tmp_516*tmp_93) + tmp_124*(0.5*tmp_112*tmp_514 - tmp_112*tmp_517 - tmp_121*tmp_467) + tmp_143*(0.5*tmp_131*tmp_514 - tmp_131*tmp_518 - tmp_140*tmp_467) + tmp_162*(0.5*tmp_150*tmp_514 - tmp_150*tmp_519 - tmp_159*tmp_467) + tmp_181*(0.5*tmp_169*tmp_514 - tmp_169*tmp_520 - tmp_178*tmp_467) + tmp_200*(0.5*tmp_188*tmp_514 - tmp_188*tmp_521 - tmp_197*tmp_467) + tmp_219*(0.5*tmp_207*tmp_514 - tmp_207*tmp_522 - tmp_216*tmp_467) + tmp_238*(0.5*tmp_226*tmp_514 - tmp_226*tmp_523 - tmp_235*tmp_467) + tmp_257*(0.5*tmp_245*tmp_514 - tmp_245*tmp_524 - tmp_254*tmp_467) + tmp_276*(0.5*tmp_264*tmp_514 - tmp_264*tmp_525 - tmp_273*tmp_467) + tmp_295*(0.5*tmp_283*tmp_514 - tmp_283*tmp_526 - tmp_292*tmp_467) + tmp_314*(0.5*tmp_302*tmp_514 - tmp_302*tmp_527 - tmp_311*tmp_467) + tmp_333*(0.5*tmp_321*tmp_514 - tmp_321*tmp_528 - tmp_330*tmp_467) + tmp_352*(0.5*tmp_340*tmp_514 - tmp_340*tmp_529 - tmp_349*tmp_467) + tmp_371*(0.5*tmp_359*tmp_514 - tmp_359*tmp_530 - tmp_368*tmp_467) + tmp_390*(0.5*tmp_378*tmp_514 - tmp_378*tmp_531 - tmp_387*tmp_467) + tmp_409*(0.5*tmp_397*tmp_514 - tmp_397*tmp_532 - tmp_406*tmp_467) + tmp_428*(0.5*tmp_416*tmp_514 - tmp_416*tmp_533 - tmp_425*tmp_467) + tmp_447*(0.5*tmp_435*tmp_514 - tmp_435*tmp_534 - tmp_444*tmp_467) + tmp_466*(0.5*tmp_454*tmp_514 - tmp_454*tmp_535 - tmp_463*tmp_467) + tmp_86*(-tmp_467*tmp_79 + 0.5*tmp_514*tmp_61 - tmp_515*tmp_61);
      real_t a_3_2 = tmp_105*(-tmp_102*tmp_468 + 0.5*tmp_514*tmp_94 - tmp_516*tmp_94) + tmp_124*(0.5*tmp_113*tmp_514 - tmp_113*tmp_517 - tmp_121*tmp_468) + tmp_143*(0.5*tmp_132*tmp_514 - tmp_132*tmp_518 - tmp_140*tmp_468) + tmp_162*(0.5*tmp_151*tmp_514 - tmp_151*tmp_519 - tmp_159*tmp_468) + tmp_181*(0.5*tmp_170*tmp_514 - tmp_170*tmp_520 - tmp_178*tmp_468) + tmp_200*(0.5*tmp_189*tmp_514 - tmp_189*tmp_521 - tmp_197*tmp_468) + tmp_219*(0.5*tmp_208*tmp_514 - tmp_208*tmp_522 - tmp_216*tmp_468) + tmp_238*(0.5*tmp_227*tmp_514 - tmp_227*tmp_523 - tmp_235*tmp_468) + tmp_257*(0.5*tmp_246*tmp_514 - tmp_246*tmp_524 - tmp_254*tmp_468) + tmp_276*(0.5*tmp_265*tmp_514 - tmp_265*tmp_525 - tmp_273*tmp_468) + tmp_295*(0.5*tmp_284*tmp_514 - tmp_284*tmp_526 - tmp_292*tmp_468) + tmp_314*(0.5*tmp_303*tmp_514 - tmp_303*tmp_527 - tmp_311*tmp_468) + tmp_333*(0.5*tmp_322*tmp_514 - tmp_322*tmp_528 - tmp_330*tmp_468) + tmp_352*(0.5*tmp_341*tmp_514 - tmp_341*tmp_529 - tmp_349*tmp_468) + tmp_371*(0.5*tmp_360*tmp_514 - tmp_360*tmp_530 - tmp_368*tmp_468) + tmp_390*(0.5*tmp_379*tmp_514 - tmp_379*tmp_531 - tmp_387*tmp_468) + tmp_409*(0.5*tmp_398*tmp_514 - tmp_398*tmp_532 - tmp_406*tmp_468) + tmp_428*(0.5*tmp_417*tmp_514 - tmp_417*tmp_533 - tmp_425*tmp_468) + tmp_447*(0.5*tmp_436*tmp_514 - tmp_436*tmp_534 - tmp_444*tmp_468) + tmp_466*(0.5*tmp_455*tmp_514 - tmp_455*tmp_535 - tmp_463*tmp_468) + tmp_86*(-tmp_468*tmp_79 + 0.5*tmp_514*tmp_65 - tmp_515*tmp_65);
      real_t a_3_3 = tmp_105*(-tmp_102*tmp_469 + 0.5*tmp_514*tmp_95 - tmp_516*tmp_95) + tmp_124*(0.5*tmp_114*tmp_514 - tmp_114*tmp_517 - tmp_121*tmp_469) + tmp_143*(0.5*tmp_133*tmp_514 - tmp_133*tmp_518 - tmp_140*tmp_469) + tmp_162*(0.5*tmp_152*tmp_514 - tmp_152*tmp_519 - tmp_159*tmp_469) + tmp_181*(0.5*tmp_171*tmp_514 - tmp_171*tmp_520 - tmp_178*tmp_469) + tmp_200*(0.5*tmp_190*tmp_514 - tmp_190*tmp_521 - tmp_197*tmp_469) + tmp_219*(0.5*tmp_209*tmp_514 - tmp_209*tmp_522 - tmp_216*tmp_469) + tmp_238*(0.5*tmp_228*tmp_514 - tmp_228*tmp_523 - tmp_235*tmp_469) + tmp_257*(0.5*tmp_247*tmp_514 - tmp_247*tmp_524 - tmp_254*tmp_469) + tmp_276*(0.5*tmp_266*tmp_514 - tmp_266*tmp_525 - tmp_273*tmp_469) + tmp_295*(0.5*tmp_285*tmp_514 - tmp_285*tmp_526 - tmp_292*tmp_469) + tmp_314*(0.5*tmp_304*tmp_514 - tmp_304*tmp_527 - tmp_311*tmp_469) + tmp_333*(0.5*tmp_323*tmp_514 - tmp_323*tmp_528 - tmp_330*tmp_469) + tmp_352*(0.5*tmp_342*tmp_514 - tmp_342*tmp_529 - tmp_349*tmp_469) + tmp_371*(0.5*tmp_361*tmp_514 - tmp_361*tmp_530 - tmp_368*tmp_469) + tmp_390*(0.5*tmp_380*tmp_514 - tmp_380*tmp_531 - tmp_387*tmp_469) + tmp_409*(0.5*tmp_399*tmp_514 - tmp_399*tmp_532 - tmp_406*tmp_469) + tmp_428*(0.5*tmp_418*tmp_514 - tmp_418*tmp_533 - tmp_425*tmp_469) + tmp_447*(0.5*tmp_437*tmp_514 - tmp_437*tmp_534 - tmp_444*tmp_469) + tmp_466*(0.5*tmp_456*tmp_514 - tmp_456*tmp_535 - tmp_463*tmp_469) + tmp_86*(-tmp_469*tmp_79 + 0.5*tmp_514*tmp_69 - tmp_515*tmp_69);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 2*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_210 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_45 - tmp_103*tmp_209) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_45 - tmp_111*tmp_209) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_45 - tmp_119*tmp_209) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_45 - tmp_127*tmp_209) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_45 - tmp_135*tmp_209) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_45 - tmp_143*tmp_209) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_45 - tmp_151*tmp_209) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_45 - tmp_159*tmp_209) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_45 - tmp_167*tmp_209) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_45 - tmp_175*tmp_209) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_45 - tmp_183*tmp_209) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_45 - tmp_191*tmp_209) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_45 - tmp_199*tmp_209) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_45 - tmp_207*tmp_209) + tmp_48*(-tmp_209*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_45) + tmp_56*(-tmp_209*tmp_55 - tmp_45*tmp_52 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_63 - tmp_45*tmp_60 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_71 - tmp_45*tmp_68 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_79 - tmp_45*tmp_76 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_87 - tmp_45*tmp_84 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_95 - tmp_45*tmp_92 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_211 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_212 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_45 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_45 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_45 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_45 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_45 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_45 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_45 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_45 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_45 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_45 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_45 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_45 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_45 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_45 - tmp_207*tmp_211) + tmp_48*(-tmp_211*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_45) + tmp_56*(-tmp_211*tmp_55 - tmp_45*tmp_53 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_211*tmp_63 - tmp_45*tmp_61 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_211*tmp_71 - tmp_45*tmp_69 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_211*tmp_79 - tmp_45*tmp_77 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_211*tmp_87 - tmp_45*tmp_85 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_211*tmp_95 - tmp_45*tmp_93 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_214 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_45 - tmp_103*tmp_213) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_45 - tmp_111*tmp_213) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_45 - tmp_119*tmp_213) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_45 - tmp_127*tmp_213) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_45 - tmp_135*tmp_213) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_45 - tmp_143*tmp_213) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_45 - tmp_151*tmp_213) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_45 - tmp_159*tmp_213) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_45 - tmp_167*tmp_213) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_45 - tmp_175*tmp_213) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_45 - tmp_183*tmp_213) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_45 - tmp_191*tmp_213) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_45 - tmp_199*tmp_213) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_45 - tmp_207*tmp_213) + tmp_48*(-tmp_213*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_45) + tmp_56*(-tmp_213*tmp_55 - tmp_45*tmp_54 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_213*tmp_63 - tmp_45*tmp_62 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_213*tmp_71 - tmp_45*tmp_70 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_213*tmp_79 - tmp_45*tmp_78 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_213*tmp_87 - tmp_45*tmp_86 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_213*tmp_95 - tmp_45*tmp_94 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_215 = 2*tmp_209;
      real_t tmp_216 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_211 - tmp_101*tmp_209) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_211 - tmp_109*tmp_209) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_211 - tmp_117*tmp_209) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_211 - tmp_125*tmp_209) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_211 - tmp_133*tmp_209) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_211 - tmp_141*tmp_209) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_211 - tmp_149*tmp_209) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_211 - tmp_157*tmp_209) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_211 - tmp_165*tmp_209) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_211 - tmp_173*tmp_209) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_211 - tmp_181*tmp_209) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_211 - tmp_189*tmp_209) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_211 - tmp_197*tmp_209) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_211 - tmp_205*tmp_209) + tmp_48*(-tmp_209*tmp_39 - tmp_211*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_211*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_211*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_211*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_209*tmp_77 - tmp_211*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_209*tmp_85 - tmp_211*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_209*tmp_93 - tmp_211*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_217 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_213 - tmp_102*tmp_209) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_213 - tmp_110*tmp_209) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_213 - tmp_118*tmp_209) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_213 - tmp_126*tmp_209) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_213 - tmp_134*tmp_209) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_213 - tmp_142*tmp_209) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_213 - tmp_150*tmp_209) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_213 - tmp_158*tmp_209) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_213 - tmp_166*tmp_209) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_213 - tmp_174*tmp_209) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_213 - tmp_182*tmp_209) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_213 - tmp_190*tmp_209) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_213 - tmp_198*tmp_209) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_213 - tmp_206*tmp_209) + tmp_48*(-tmp_209*tmp_43 - tmp_213*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_213*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_213*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_213*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_209*tmp_78 - tmp_213*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_209*tmp_86 - tmp_213*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_209*tmp_94 - tmp_213*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_218 = 2*tmp_211;
      real_t tmp_219 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_213 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_213 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_213 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_213 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_213 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_213 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_213 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_213 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_213 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_213 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_213 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_213 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_213 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_213 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_213*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_213*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_213*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_213*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_213*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_213*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_213*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_220 = 2*tmp_213;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_210;
      real_t a_0_2 = tmp_212;
      real_t a_0_3 = tmp_214;
      real_t a_1_0 = tmp_210;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_215) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_215) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_215) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_215) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_215) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_215) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_215) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_215) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_215) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_215) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_215) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_215) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_215) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_215) + tmp_48*(-tmp_215*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_215*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_215*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_215*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_215*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_215*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_215*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_216;
      real_t a_1_3 = tmp_217;
      real_t a_2_0 = tmp_212;
      real_t a_2_1 = tmp_216;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_218) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_218) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_218) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_218) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_218) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_218) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_218) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_218) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_218) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_218) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_218) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_218) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_218) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_218) + tmp_48*(-tmp_218*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_218*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_218*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_218*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_218*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_218*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_218*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_219;
      real_t a_3_0 = tmp_214;
      real_t a_3_1 = tmp_217;
      real_t a_3_2 = tmp_219;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_220) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_220) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_220) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_220) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_220) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_220) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_220) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_220) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_220) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_220) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_220) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_220) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_220) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_220) + tmp_48*(-tmp_220*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_220*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_220*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_220*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_220*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_220*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_220*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g0;

};




class EGVectorLaplaceFormNitscheBC_P1E_0 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1E_0()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_4*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = tmp_0*tmp_8 + tmp_4*tmp_7;
      real_t tmp_10 = tmp_1*tmp_6;
      real_t tmp_11 = tmp_5*tmp_6;
      real_t tmp_12 = tmp_11*tmp_4 + tmp_2*tmp_6;
      real_t tmp_13 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_14 = tmp_13*(tmp_12*(-tmp_10 - tmp_11) + tmp_9*(-tmp_7 - tmp_8));
      real_t tmp_15 = tmp_13*(tmp_10*tmp_12 + tmp_8*tmp_9);
      real_t tmp_16 = tmp_13*(tmp_11*tmp_12 + tmp_7*tmp_9);
      real_t a_0_0 = 0.5*tmp_14;
      real_t a_1_0 = 0.5*tmp_15;
      real_t a_2_0 = 0.5*tmp_16;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_3 = 0.046910077030668018*tmp_1 + tmp_2;
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_0*tmp_5;
      real_t tmp_7 = -tmp_4;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = 1.0 / (tmp_6 + tmp_7*tmp_8);
      real_t tmp_10 = tmp_4*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_11 + tmp_12;
      real_t tmp_14 = tmp_5*tmp_9;
      real_t tmp_15 = tmp_10*tmp_3 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_0*tmp_9;
      real_t tmp_17 = tmp_8*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_3;
      real_t tmp_19 = tmp_0*(tmp_15 - 1.0/3.0) + tmp_7*(tmp_18 - 1.0/3.0);
      real_t tmp_20 = 0.5*p_affine_10_0*(-tmp_14 - tmp_17) + 0.5*p_affine_10_1*(-tmp_10 - tmp_16);
      real_t tmp_21 = -tmp_15 - tmp_18 + 1;
      real_t tmp_22 = 0.5*p_affine_10_0*(tmp_17*tmp_7 + tmp_6*tmp_9) + 0.5*p_affine_10_1*(tmp_0*tmp_10 + tmp_16*tmp_7);
      real_t tmp_23 = std::abs(std::pow((tmp_1*tmp_1) + (tmp_11*tmp_11), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_1 + tmp_2;
      real_t tmp_27 = 0.23076534494715845*tmp_11 + tmp_12;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = tmp_0*(tmp_28 - 1.0/3.0) + tmp_7*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_1 + tmp_2;
      real_t tmp_34 = 0.5*tmp_11 + tmp_12;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_14*tmp_34;
      real_t tmp_36 = tmp_16*tmp_33 + tmp_17*tmp_34;
      real_t tmp_37 = tmp_0*(tmp_35 - 1.0/3.0) + tmp_7*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_1 + tmp_2;
      real_t tmp_41 = 0.7692346550528415*tmp_11 + tmp_12;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_14*tmp_41;
      real_t tmp_43 = tmp_16*tmp_40 + tmp_17*tmp_41;
      real_t tmp_44 = tmp_0*(tmp_42 - 1.0/3.0) + tmp_7*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_1 + tmp_2;
      real_t tmp_48 = 0.95308992296933193*tmp_11 + tmp_12;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_14*tmp_48;
      real_t tmp_50 = tmp_16*tmp_47 + tmp_17*tmp_48;
      real_t tmp_51 = tmp_0*(tmp_49 - 1.0/3.0) + tmp_7*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = 0.5*p_affine_10_0*tmp_14 + 0.5*p_affine_10_1*tmp_10;
      real_t tmp_55 = 0.5*p_affine_10_0*tmp_17 + 0.5*p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_25*(-tmp_19*tmp_20 + 3*tmp_19*tmp_21*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_20*tmp_30 - tmp_22*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_20*tmp_37 - tmp_22*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_20*tmp_44 - tmp_22*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_20*tmp_51 - tmp_22*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_1_0 = tmp_25*(3*tmp_15*tmp_19*tmp_24 - tmp_15*tmp_22 - tmp_19*tmp_54) + tmp_32*(-tmp_22*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_22*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_22*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_22*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_2_0 = tmp_25*(3*tmp_18*tmp_19*tmp_24 - tmp_18*tmp_22 - tmp_19*tmp_55) + tmp_32*(-tmp_22*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_22*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_22*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_22*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (tmp_0*tmp_1 - tmp_2*tmp_3);
      real_t tmp_5 = tmp_0*tmp_4;
      real_t tmp_6 = tmp_3*tmp_4;
      real_t tmp_7 = tmp_1*tmp_4;
      real_t tmp_8 = tmp_2*tmp_4;
      real_t tmp_9 = p_affine_10_0*(-tmp_5 - tmp_6) + p_affine_10_1*(-tmp_7 - tmp_8);
      real_t tmp_10 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_11 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_12 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_13 = tmp_10*tmp_12;
      real_t tmp_14 = -tmp_11;
      real_t tmp_15 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_16 = 1.0 / (tmp_13 + tmp_14*tmp_15);
      real_t tmp_17 = -p_affine_3_1;
      real_t tmp_18 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_19 = p_affine_6_1 + 0.046910077030668018*tmp_18;
      real_t tmp_20 = tmp_16*(tmp_17 + tmp_19);
      real_t tmp_21 = -p_affine_3_0;
      real_t tmp_22 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_23 = p_affine_6_0 + 0.046910077030668018*tmp_22;
      real_t tmp_24 = tmp_16*(tmp_21 + tmp_23);
      real_t tmp_25 = tmp_10*(tmp_11*tmp_20 + tmp_12*tmp_24 - 1.0/3.0) + tmp_14*(tmp_10*tmp_20 + tmp_15*tmp_24 - 1.0/3.0);
      real_t tmp_26 = -p_affine_0_1;
      real_t tmp_27 = tmp_19 + tmp_26;
      real_t tmp_28 = -p_affine_0_0;
      real_t tmp_29 = tmp_23 + tmp_28;
      real_t tmp_30 = tmp_27*tmp_8 + tmp_29*tmp_5;
      real_t tmp_31 = tmp_27*tmp_7 + tmp_29*tmp_6;
      real_t tmp_32 = -tmp_30 - tmp_31 + 1;
      real_t tmp_33 = tmp_14*tmp_16;
      real_t tmp_34 = tmp_11*tmp_16;
      real_t tmp_35 = 0.5*p_affine_10_0*(tmp_13*tmp_16 + tmp_15*tmp_33) + 0.5*p_affine_10_1*(tmp_10*tmp_33 + tmp_10*tmp_34);
      real_t tmp_36 = std::abs(std::pow((tmp_18*tmp_18) + (tmp_22*tmp_22), 1.0/2.0));
      real_t tmp_37 = 3/tmp_36;
      real_t tmp_38 = tmp_25*tmp_37;
      real_t tmp_39 = 0.11846344252809471*tmp_36;
      real_t tmp_40 = p_affine_6_1 + 0.23076534494715845*tmp_18;
      real_t tmp_41 = tmp_17 + tmp_40;
      real_t tmp_42 = p_affine_6_0 + 0.23076534494715845*tmp_22;
      real_t tmp_43 = tmp_16*(tmp_21 + tmp_42);
      real_t tmp_44 = tmp_10*tmp_16;
      real_t tmp_45 = tmp_10*(tmp_12*tmp_43 + tmp_34*tmp_41 - 1.0/3.0) + tmp_14*(tmp_15*tmp_43 + tmp_41*tmp_44 - 1.0/3.0);
      real_t tmp_46 = tmp_26 + tmp_40;
      real_t tmp_47 = tmp_28 + tmp_42;
      real_t tmp_48 = tmp_46*tmp_8 + tmp_47*tmp_5;
      real_t tmp_49 = tmp_46*tmp_7 + tmp_47*tmp_6;
      real_t tmp_50 = -tmp_48 - tmp_49 + 1;
      real_t tmp_51 = tmp_37*tmp_45;
      real_t tmp_52 = 0.2393143352496831*tmp_36;
      real_t tmp_53 = p_affine_6_1 + 0.5*tmp_18;
      real_t tmp_54 = tmp_17 + tmp_53;
      real_t tmp_55 = p_affine_6_0 + 0.5*tmp_22;
      real_t tmp_56 = tmp_16*(tmp_21 + tmp_55);
      real_t tmp_57 = tmp_10*(tmp_12*tmp_56 + tmp_34*tmp_54 - 1.0/3.0) + tmp_14*(tmp_15*tmp_56 + tmp_44*tmp_54 - 1.0/3.0);
      real_t tmp_58 = tmp_26 + tmp_53;
      real_t tmp_59 = tmp_28 + tmp_55;
      real_t tmp_60 = tmp_5*tmp_59 + tmp_58*tmp_8;
      real_t tmp_61 = tmp_58*tmp_7 + tmp_59*tmp_6;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_37*tmp_57;
      real_t tmp_64 = 0.2844444444444445*tmp_36;
      real_t tmp_65 = p_affine_6_1 + 0.7692346550528415*tmp_18;
      real_t tmp_66 = tmp_17 + tmp_65;
      real_t tmp_67 = p_affine_6_0 + 0.7692346550528415*tmp_22;
      real_t tmp_68 = tmp_16*(tmp_21 + tmp_67);
      real_t tmp_69 = tmp_10*(tmp_12*tmp_68 + tmp_34*tmp_66 - 1.0/3.0) + tmp_14*(tmp_15*tmp_68 + tmp_44*tmp_66 - 1.0/3.0);
      real_t tmp_70 = tmp_26 + tmp_65;
      real_t tmp_71 = tmp_28 + tmp_67;
      real_t tmp_72 = tmp_5*tmp_71 + tmp_70*tmp_8;
      real_t tmp_73 = tmp_6*tmp_71 + tmp_7*tmp_70;
      real_t tmp_74 = -tmp_72 - tmp_73 + 1;
      real_t tmp_75 = tmp_37*tmp_69;
      real_t tmp_76 = 0.2393143352496831*tmp_36;
      real_t tmp_77 = p_affine_6_1 + 0.95308992296933193*tmp_18;
      real_t tmp_78 = tmp_17 + tmp_77;
      real_t tmp_79 = p_affine_6_0 + 0.95308992296933193*tmp_22;
      real_t tmp_80 = tmp_16*(tmp_21 + tmp_79);
      real_t tmp_81 = tmp_10*(tmp_12*tmp_80 + tmp_34*tmp_78 - 1.0/3.0) + tmp_14*(tmp_15*tmp_80 + tmp_44*tmp_78 - 1.0/3.0);
      real_t tmp_82 = tmp_26 + tmp_77;
      real_t tmp_83 = tmp_28 + tmp_79;
      real_t tmp_84 = tmp_5*tmp_83 + tmp_8*tmp_82;
      real_t tmp_85 = tmp_6*tmp_83 + tmp_7*tmp_82;
      real_t tmp_86 = -tmp_84 - tmp_85 + 1;
      real_t tmp_87 = tmp_37*tmp_81;
      real_t tmp_88 = 0.11846344252809471*tmp_36;
      real_t tmp_89 = p_affine_10_0*tmp_5 + p_affine_10_1*tmp_8;
      real_t tmp_90 = p_affine_10_0*tmp_6 + p_affine_10_1*tmp_7;
      real_t a_0_0 = tmp_39*(0.5*tmp_25*tmp_9 - tmp_32*tmp_35 - tmp_32*tmp_38) + tmp_52*(-tmp_35*tmp_50 + 0.5*tmp_45*tmp_9 - tmp_50*tmp_51) + tmp_64*(-tmp_35*tmp_62 + 0.5*tmp_57*tmp_9 - tmp_62*tmp_63) + tmp_76*(-tmp_35*tmp_74 + 0.5*tmp_69*tmp_9 - tmp_74*tmp_75) + tmp_88*(-tmp_35*tmp_86 + 0.5*tmp_81*tmp_9 - tmp_86*tmp_87);
      real_t a_1_0 = tmp_39*(0.5*tmp_25*tmp_89 - tmp_30*tmp_35 - tmp_30*tmp_38) + tmp_52*(-tmp_35*tmp_48 + 0.5*tmp_45*tmp_89 - tmp_48*tmp_51) + tmp_64*(-tmp_35*tmp_60 + 0.5*tmp_57*tmp_89 - tmp_60*tmp_63) + tmp_76*(-tmp_35*tmp_72 + 0.5*tmp_69*tmp_89 - tmp_72*tmp_75) + tmp_88*(-tmp_35*tmp_84 + 0.5*tmp_81*tmp_89 - tmp_84*tmp_87);
      real_t a_2_0 = tmp_39*(0.5*tmp_25*tmp_90 - tmp_31*tmp_35 - tmp_31*tmp_38) + tmp_52*(-tmp_35*tmp_49 + 0.5*tmp_45*tmp_90 - tmp_49*tmp_51) + tmp_64*(-tmp_35*tmp_61 + 0.5*tmp_57*tmp_90 - tmp_61*tmp_63) + tmp_76*(-tmp_35*tmp_73 + 0.5*tmp_69*tmp_90 - tmp_73*tmp_75) + tmp_88*(-tmp_35*tmp_85 + 0.5*tmp_81*tmp_90 - tmp_85*tmp_87);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_4*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_5*tmp_6;
      real_t tmp_9 = tmp_1*tmp_6;
      real_t tmp_10 = tmp_3*tmp_6;
      real_t tmp_11 = p_affine_10_0*(-tmp_7 - tmp_8) + p_affine_10_1*(-tmp_10 - tmp_9);
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_14 = 0.046910077030668018*tmp_12 + tmp_13;
      real_t tmp_15 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_16 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_17 = 0.046910077030668018*tmp_15 + tmp_16;
      real_t tmp_18 = tmp_10*tmp_14 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*tmp_9 + tmp_17*tmp_8;
      real_t tmp_20 = tmp_1*(tmp_18 - 1.0/3.0) + tmp_4*(tmp_19 - 1.0/3.0);
      real_t tmp_21 = p_affine_10_0*(tmp_2*tmp_6 + tmp_4*tmp_8) + p_affine_10_1*(tmp_1*tmp_10 + tmp_4*tmp_9);
      real_t tmp_22 = -tmp_18 - tmp_19 + 1;
      real_t tmp_23 = std::abs(std::pow((tmp_12*tmp_12) + (tmp_15*tmp_15), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_12 + tmp_13;
      real_t tmp_27 = 0.23076534494715845*tmp_15 + tmp_16;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_27*tmp_7;
      real_t tmp_29 = tmp_26*tmp_9 + tmp_27*tmp_8;
      real_t tmp_30 = tmp_1*(tmp_28 - 1.0/3.0) + tmp_4*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_12 + tmp_13;
      real_t tmp_34 = 0.5*tmp_15 + tmp_16;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_34*tmp_7;
      real_t tmp_36 = tmp_33*tmp_9 + tmp_34*tmp_8;
      real_t tmp_37 = tmp_1*(tmp_35 - 1.0/3.0) + tmp_4*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_12 + tmp_13;
      real_t tmp_41 = 0.7692346550528415*tmp_15 + tmp_16;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_41*tmp_7;
      real_t tmp_43 = tmp_40*tmp_9 + tmp_41*tmp_8;
      real_t tmp_44 = tmp_1*(tmp_42 - 1.0/3.0) + tmp_4*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_12 + tmp_13;
      real_t tmp_48 = 0.95308992296933193*tmp_15 + tmp_16;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_48*tmp_7;
      real_t tmp_50 = tmp_47*tmp_9 + tmp_48*tmp_8;
      real_t tmp_51 = tmp_1*(tmp_49 - 1.0/3.0) + tmp_4*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = p_affine_10_0*tmp_7 + p_affine_10_1*tmp_10;
      real_t tmp_55 = p_affine_10_0*tmp_8 + p_affine_10_1*tmp_9;
      real_t a_0_0 = tmp_25*(-tmp_11*tmp_20 + 3*tmp_20*tmp_22*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_11*tmp_30 - tmp_21*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_11*tmp_37 - tmp_21*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_11*tmp_44 - tmp_21*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_11*tmp_51 - tmp_21*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_1_0 = tmp_25*(3*tmp_18*tmp_20*tmp_24 - tmp_18*tmp_21 - tmp_20*tmp_54) + tmp_32*(-tmp_21*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_21*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_21*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_21*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_2_0 = tmp_25*(3*tmp_19*tmp_20*tmp_24 - tmp_19*tmp_21 - tmp_20*tmp_55) + tmp_32*(-tmp_21*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_21*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_21*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_21*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_0*tmp_17 + tmp_11*tmp_15 + tmp_16*tmp_3;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_0*tmp_21 + tmp_11*tmp_19 + tmp_20*tmp_3;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_0*tmp_25 + tmp_11*tmp_23 + tmp_24*tmp_3;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_1_0 = 0.1666666666666668*tmp_41;
      real_t a_2_0 = 0.1666666666666668*tmp_42;
      real_t a_3_0 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_13 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_13*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_10*tmp_13;
      real_t tmp_18 = tmp_12*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_0*tmp_11 - tmp_0*tmp_16 + tmp_12*tmp_6*tmp_7 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_10*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_11 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(-tmp_0*tmp_7 + tmp_13*tmp_8);
      real_t tmp_35 = tmp_19*(tmp_0*tmp_10 - tmp_12*tmp_8);
      real_t tmp_36 = tmp_19*(tmp_12*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(tmp_0*tmp_9 - tmp_13*tmp_6);
      real_t tmp_39 = tmp_19*(-tmp_0*tmp_14 + tmp_12*tmp_6);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_6*(tmp_37 - 1.0/4.0) + tmp_8*(tmp_41 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_36*tmp_6 + tmp_40*tmp_8) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_35*tmp_6 + tmp_39*tmp_8) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_34*tmp_6 + tmp_38*tmp_8);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_6*(tmp_54 - 1.0/4.0) + tmp_8*(tmp_55 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_6*(tmp_63 - 1.0/4.0) + tmp_8*(tmp_64 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_6*(tmp_72 - 1.0/4.0) + tmp_8*(tmp_73 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_6*(tmp_81 - 1.0/4.0) + tmp_8*(tmp_82 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_6*(tmp_90 - 1.0/4.0) + tmp_8*(tmp_91 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_6*(tmp_99 - 1.0/4.0) + tmp_8*(tmp_100 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_6*(tmp_108 - 1.0/4.0) + tmp_8*(tmp_109 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_6*(tmp_117 - 1.0/4.0) + tmp_8*(tmp_118 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_6*(tmp_126 - 1.0/4.0) + tmp_8*(tmp_127 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_6*(tmp_135 - 1.0/4.0) + tmp_8*(tmp_136 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_6*(tmp_144 - 1.0/4.0) + tmp_8*(tmp_145 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_6*(tmp_153 - 1.0/4.0) + tmp_8*(tmp_154 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_6*(tmp_162 - 1.0/4.0) + tmp_8*(tmp_163 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_6*(tmp_171 - 1.0/4.0) + tmp_8*(tmp_172 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_6*(tmp_180 - 1.0/4.0) + tmp_8*(tmp_181 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_6*(tmp_189 - 1.0/4.0) + tmp_8*(tmp_190 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_6*(tmp_198 - 1.0/4.0) + tmp_8*(tmp_199 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_6*(tmp_207 - 1.0/4.0) + tmp_8*(tmp_208 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_6*(tmp_216 - 1.0/4.0) + tmp_8*(tmp_217 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_6*(tmp_225 - 1.0/4.0) + tmp_8*(tmp_226 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_26 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_27 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_28 = tmp_26*tmp_27;
      real_t tmp_29 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_30 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_31 = tmp_29*tmp_30;
      real_t tmp_32 = tmp_28 - tmp_31;
      real_t tmp_33 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_34 = tmp_30*tmp_33;
      real_t tmp_35 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_36 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_37 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_38 = tmp_27*tmp_37;
      real_t tmp_39 = tmp_26*tmp_33;
      real_t tmp_40 = 1.0 / (tmp_25*tmp_34 - tmp_25*tmp_38 + tmp_28*tmp_35 + tmp_29*tmp_36*tmp_37 - tmp_31*tmp_35 - tmp_36*tmp_39);
      real_t tmp_41 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_42 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_43 = -tmp_42;
      real_t tmp_44 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_45 = 0.031405749086161582*tmp_43 + 0.93718850182767688*tmp_44;
      real_t tmp_46 = tmp_40*(tmp_41 + tmp_45);
      real_t tmp_47 = tmp_29*tmp_37 - tmp_39;
      real_t tmp_48 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_49 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_50 = -tmp_49;
      real_t tmp_51 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_52 = 0.031405749086161582*tmp_50 + 0.93718850182767688*tmp_51;
      real_t tmp_53 = tmp_40*(tmp_48 + tmp_52);
      real_t tmp_54 = tmp_34 - tmp_38;
      real_t tmp_55 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_56 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_57 = -tmp_56;
      real_t tmp_58 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_59 = 0.031405749086161582*tmp_57 + 0.93718850182767688*tmp_58;
      real_t tmp_60 = tmp_40*(tmp_55 + tmp_59);
      real_t tmp_61 = -tmp_25*tmp_27 + tmp_29*tmp_36;
      real_t tmp_62 = tmp_25*tmp_33 - tmp_29*tmp_35;
      real_t tmp_63 = tmp_27*tmp_35 - tmp_33*tmp_36;
      real_t tmp_64 = tmp_25*tmp_30 - tmp_26*tmp_36;
      real_t tmp_65 = -tmp_25*tmp_37 + tmp_26*tmp_35;
      real_t tmp_66 = -tmp_30*tmp_35 + tmp_36*tmp_37;
      real_t tmp_67 = tmp_25*(tmp_32*tmp_46 + tmp_47*tmp_53 + tmp_54*tmp_60 - 1.0/4.0) + tmp_26*(tmp_46*tmp_61 + tmp_53*tmp_62 + tmp_60*tmp_63 - 1.0/4.0) + tmp_29*(tmp_46*tmp_64 + tmp_53*tmp_65 + tmp_60*tmp_66 - 1.0/4.0);
      real_t tmp_68 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_69 = tmp_45 + tmp_68;
      real_t tmp_70 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_71 = tmp_52 + tmp_70;
      real_t tmp_72 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_73 = tmp_59 + tmp_72;
      real_t tmp_74 = tmp_17*tmp_73 + tmp_20*tmp_71 + tmp_23*tmp_69;
      real_t tmp_75 = tmp_16*tmp_73 + tmp_19*tmp_71 + tmp_22*tmp_69;
      real_t tmp_76 = tmp_15*tmp_73 + tmp_18*tmp_71 + tmp_21*tmp_69;
      real_t tmp_77 = -tmp_74 - tmp_75 - tmp_76 + 1;
      real_t tmp_78 = tmp_25*tmp_40;
      real_t tmp_79 = tmp_26*tmp_40;
      real_t tmp_80 = tmp_29*tmp_40;
      real_t tmp_81 = 0.5*p_affine_13_0*(tmp_54*tmp_78 + tmp_63*tmp_79 + tmp_66*tmp_80) + 0.5*p_affine_13_1*(tmp_47*tmp_78 + tmp_62*tmp_79 + tmp_65*tmp_80) + 0.5*p_affine_13_2*(tmp_32*tmp_78 + tmp_61*tmp_79 + tmp_64*tmp_80);
      real_t tmp_82 = (std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)*std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)) + (std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)*std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)) + (std::abs(tmp_49*tmp_58 - tmp_51*tmp_56)*std::abs(tmp_49*tmp_58 - tmp_51*tmp_56));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_67*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_43 + 0.60796128279561268*tmp_44;
      real_t tmp_88 = tmp_40*(tmp_41 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_50 + 0.60796128279561268*tmp_51;
      real_t tmp_90 = tmp_40*(tmp_48 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_57 + 0.60796128279561268*tmp_58;
      real_t tmp_92 = tmp_40*(tmp_55 + tmp_91);
      real_t tmp_93 = tmp_25*(tmp_32*tmp_88 + tmp_47*tmp_90 + tmp_54*tmp_92 - 1.0/4.0) + tmp_26*(tmp_61*tmp_88 + tmp_62*tmp_90 + tmp_63*tmp_92 - 1.0/4.0) + tmp_29*(tmp_64*tmp_88 + tmp_65*tmp_90 + tmp_66*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_68 + tmp_87;
      real_t tmp_95 = tmp_70 + tmp_89;
      real_t tmp_96 = tmp_72 + tmp_91;
      real_t tmp_97 = tmp_17*tmp_96 + tmp_20*tmp_95 + tmp_23*tmp_94;
      real_t tmp_98 = tmp_16*tmp_96 + tmp_19*tmp_95 + tmp_22*tmp_94;
      real_t tmp_99 = tmp_15*tmp_96 + tmp_18*tmp_95 + tmp_21*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_104 = tmp_40*(tmp_103 + tmp_41);
      real_t tmp_105 = 0.37605877282253791*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_106 = tmp_40*(tmp_105 + tmp_48);
      real_t tmp_107 = 0.37605877282253791*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_108 = tmp_40*(tmp_107 + tmp_55);
      real_t tmp_109 = tmp_25*(tmp_104*tmp_32 + tmp_106*tmp_47 + tmp_108*tmp_54 - 1.0/4.0) + tmp_26*(tmp_104*tmp_61 + tmp_106*tmp_62 + tmp_108*tmp_63 - 1.0/4.0) + tmp_29*(tmp_104*tmp_64 + tmp_106*tmp_65 + tmp_108*tmp_66 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_68;
      real_t tmp_111 = tmp_105 + tmp_70;
      real_t tmp_112 = tmp_107 + tmp_72;
      real_t tmp_113 = tmp_110*tmp_23 + tmp_111*tmp_20 + tmp_112*tmp_17;
      real_t tmp_114 = tmp_110*tmp_22 + tmp_111*tmp_19 + tmp_112*tmp_16;
      real_t tmp_115 = tmp_110*tmp_21 + tmp_111*tmp_18 + tmp_112*tmp_15;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_120 = tmp_40*(tmp_119 + tmp_41);
      real_t tmp_121 = 0.78764240869137092*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_122 = tmp_40*(tmp_121 + tmp_48);
      real_t tmp_123 = 0.78764240869137092*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_124 = tmp_40*(tmp_123 + tmp_55);
      real_t tmp_125 = tmp_25*(tmp_120*tmp_32 + tmp_122*tmp_47 + tmp_124*tmp_54 - 1.0/4.0) + tmp_26*(tmp_120*tmp_61 + tmp_122*tmp_62 + tmp_124*tmp_63 - 1.0/4.0) + tmp_29*(tmp_120*tmp_64 + tmp_122*tmp_65 + tmp_124*tmp_66 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_68;
      real_t tmp_127 = tmp_121 + tmp_70;
      real_t tmp_128 = tmp_123 + tmp_72;
      real_t tmp_129 = tmp_126*tmp_23 + tmp_127*tmp_20 + tmp_128*tmp_17;
      real_t tmp_130 = tmp_126*tmp_22 + tmp_127*tmp_19 + tmp_128*tmp_16;
      real_t tmp_131 = tmp_126*tmp_21 + tmp_127*tmp_18 + tmp_128*tmp_15;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_136 = tmp_40*(tmp_135 + tmp_41);
      real_t tmp_137 = 0.58463275527740355*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_138 = tmp_40*(tmp_137 + tmp_48);
      real_t tmp_139 = 0.58463275527740355*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_140 = tmp_40*(tmp_139 + tmp_55);
      real_t tmp_141 = tmp_25*(tmp_136*tmp_32 + tmp_138*tmp_47 + tmp_140*tmp_54 - 1.0/4.0) + tmp_26*(tmp_136*tmp_61 + tmp_138*tmp_62 + tmp_140*tmp_63 - 1.0/4.0) + tmp_29*(tmp_136*tmp_64 + tmp_138*tmp_65 + tmp_140*tmp_66 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_68;
      real_t tmp_143 = tmp_137 + tmp_70;
      real_t tmp_144 = tmp_139 + tmp_72;
      real_t tmp_145 = tmp_142*tmp_23 + tmp_143*tmp_20 + tmp_144*tmp_17;
      real_t tmp_146 = tmp_142*tmp_22 + tmp_143*tmp_19 + tmp_144*tmp_16;
      real_t tmp_147 = tmp_142*tmp_21 + tmp_143*tmp_18 + tmp_144*tmp_15;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_152 = tmp_40*(tmp_151 + tmp_41);
      real_t tmp_153 = 0.041227165399737475*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_154 = tmp_40*(tmp_153 + tmp_48);
      real_t tmp_155 = 0.041227165399737475*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_156 = tmp_40*(tmp_155 + tmp_55);
      real_t tmp_157 = tmp_25*(tmp_152*tmp_32 + tmp_154*tmp_47 + tmp_156*tmp_54 - 1.0/4.0) + tmp_26*(tmp_152*tmp_61 + tmp_154*tmp_62 + tmp_156*tmp_63 - 1.0/4.0) + tmp_29*(tmp_152*tmp_64 + tmp_154*tmp_65 + tmp_156*tmp_66 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_68;
      real_t tmp_159 = tmp_153 + tmp_70;
      real_t tmp_160 = tmp_155 + tmp_72;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_168 = tmp_40*(tmp_167 + tmp_41);
      real_t tmp_169 = 0.039308471900058539*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_170 = tmp_40*(tmp_169 + tmp_48);
      real_t tmp_171 = 0.039308471900058539*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_172 = tmp_40*(tmp_171 + tmp_55);
      real_t tmp_173 = tmp_25*(tmp_168*tmp_32 + tmp_170*tmp_47 + tmp_172*tmp_54 - 1.0/4.0) + tmp_26*(tmp_168*tmp_61 + tmp_170*tmp_62 + tmp_172*tmp_63 - 1.0/4.0) + tmp_29*(tmp_168*tmp_64 + tmp_170*tmp_65 + tmp_172*tmp_66 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_68;
      real_t tmp_175 = tmp_169 + tmp_70;
      real_t tmp_176 = tmp_171 + tmp_72;
      real_t tmp_177 = tmp_17*tmp_176 + tmp_174*tmp_23 + tmp_175*tmp_20;
      real_t tmp_178 = tmp_16*tmp_176 + tmp_174*tmp_22 + tmp_175*tmp_19;
      real_t tmp_179 = tmp_15*tmp_176 + tmp_174*tmp_21 + tmp_175*tmp_18;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_184 = tmp_40*(tmp_183 + tmp_41);
      real_t tmp_185 = 0.78764240869137092*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_186 = tmp_40*(tmp_185 + tmp_48);
      real_t tmp_187 = 0.78764240869137092*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_188 = tmp_40*(tmp_187 + tmp_55);
      real_t tmp_189 = tmp_25*(tmp_184*tmp_32 + tmp_186*tmp_47 + tmp_188*tmp_54 - 1.0/4.0) + tmp_26*(tmp_184*tmp_61 + tmp_186*tmp_62 + tmp_188*tmp_63 - 1.0/4.0) + tmp_29*(tmp_184*tmp_64 + tmp_186*tmp_65 + tmp_188*tmp_66 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_68;
      real_t tmp_191 = tmp_185 + tmp_70;
      real_t tmp_192 = tmp_187 + tmp_72;
      real_t tmp_193 = tmp_17*tmp_192 + tmp_190*tmp_23 + tmp_191*tmp_20;
      real_t tmp_194 = tmp_16*tmp_192 + tmp_19*tmp_191 + tmp_190*tmp_22;
      real_t tmp_195 = tmp_15*tmp_192 + tmp_18*tmp_191 + tmp_190*tmp_21;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_200 = tmp_40*(tmp_199 + tmp_41);
      real_t tmp_201 = 0.58463275527740355*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_202 = tmp_40*(tmp_201 + tmp_48);
      real_t tmp_203 = 0.58463275527740355*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_204 = tmp_40*(tmp_203 + tmp_55);
      real_t tmp_205 = tmp_25*(tmp_200*tmp_32 + tmp_202*tmp_47 + tmp_204*tmp_54 - 1.0/4.0) + tmp_26*(tmp_200*tmp_61 + tmp_202*tmp_62 + tmp_204*tmp_63 - 1.0/4.0) + tmp_29*(tmp_200*tmp_64 + tmp_202*tmp_65 + tmp_204*tmp_66 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_68;
      real_t tmp_207 = tmp_201 + tmp_70;
      real_t tmp_208 = tmp_203 + tmp_72;
      real_t tmp_209 = tmp_17*tmp_208 + tmp_20*tmp_207 + tmp_206*tmp_23;
      real_t tmp_210 = tmp_16*tmp_208 + tmp_19*tmp_207 + tmp_206*tmp_22;
      real_t tmp_211 = tmp_15*tmp_208 + tmp_18*tmp_207 + tmp_206*tmp_21;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_216 = tmp_40*(tmp_215 + tmp_41);
      real_t tmp_217 = 0.1711304259088916*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_218 = tmp_40*(tmp_217 + tmp_48);
      real_t tmp_219 = 0.1711304259088916*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_220 = tmp_40*(tmp_219 + tmp_55);
      real_t tmp_221 = tmp_25*(tmp_216*tmp_32 + tmp_218*tmp_47 + tmp_220*tmp_54 - 1.0/4.0) + tmp_26*(tmp_216*tmp_61 + tmp_218*tmp_62 + tmp_220*tmp_63 - 1.0/4.0) + tmp_29*(tmp_216*tmp_64 + tmp_218*tmp_65 + tmp_220*tmp_66 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_68;
      real_t tmp_223 = tmp_217 + tmp_70;
      real_t tmp_224 = tmp_219 + tmp_72;
      real_t tmp_225 = tmp_17*tmp_224 + tmp_20*tmp_223 + tmp_222*tmp_23;
      real_t tmp_226 = tmp_16*tmp_224 + tmp_19*tmp_223 + tmp_22*tmp_222;
      real_t tmp_227 = tmp_15*tmp_224 + tmp_18*tmp_223 + tmp_21*tmp_222;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_232 = tmp_40*(tmp_231 + tmp_41);
      real_t tmp_233 = 0.37605877282253791*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_234 = tmp_40*(tmp_233 + tmp_48);
      real_t tmp_235 = 0.37605877282253791*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_236 = tmp_40*(tmp_235 + tmp_55);
      real_t tmp_237 = tmp_25*(tmp_232*tmp_32 + tmp_234*tmp_47 + tmp_236*tmp_54 - 1.0/4.0) + tmp_26*(tmp_232*tmp_61 + tmp_234*tmp_62 + tmp_236*tmp_63 - 1.0/4.0) + tmp_29*(tmp_232*tmp_64 + tmp_234*tmp_65 + tmp_236*tmp_66 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_68;
      real_t tmp_239 = tmp_233 + tmp_70;
      real_t tmp_240 = tmp_235 + tmp_72;
      real_t tmp_241 = tmp_17*tmp_240 + tmp_20*tmp_239 + tmp_23*tmp_238;
      real_t tmp_242 = tmp_16*tmp_240 + tmp_19*tmp_239 + tmp_22*tmp_238;
      real_t tmp_243 = tmp_15*tmp_240 + tmp_18*tmp_239 + tmp_21*tmp_238;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_248 = tmp_40*(tmp_247 + tmp_41);
      real_t tmp_249 = 0.041227165399737475*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_250 = tmp_40*(tmp_249 + tmp_48);
      real_t tmp_251 = 0.041227165399737475*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_252 = tmp_40*(tmp_251 + tmp_55);
      real_t tmp_253 = tmp_25*(tmp_248*tmp_32 + tmp_250*tmp_47 + tmp_252*tmp_54 - 1.0/4.0) + tmp_26*(tmp_248*tmp_61 + tmp_250*tmp_62 + tmp_252*tmp_63 - 1.0/4.0) + tmp_29*(tmp_248*tmp_64 + tmp_250*tmp_65 + tmp_252*tmp_66 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_68;
      real_t tmp_255 = tmp_249 + tmp_70;
      real_t tmp_256 = tmp_251 + tmp_72;
      real_t tmp_257 = tmp_17*tmp_256 + tmp_20*tmp_255 + tmp_23*tmp_254;
      real_t tmp_258 = tmp_16*tmp_256 + tmp_19*tmp_255 + tmp_22*tmp_254;
      real_t tmp_259 = tmp_15*tmp_256 + tmp_18*tmp_255 + tmp_21*tmp_254;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_43 + 0.19107600050469298*tmp_44;
      real_t tmp_264 = tmp_40*(tmp_263 + tmp_41);
      real_t tmp_265 = 0.40446199974765351*tmp_50 + 0.19107600050469298*tmp_51;
      real_t tmp_266 = tmp_40*(tmp_265 + tmp_48);
      real_t tmp_267 = 0.40446199974765351*tmp_57 + 0.19107600050469298*tmp_58;
      real_t tmp_268 = tmp_40*(tmp_267 + tmp_55);
      real_t tmp_269 = tmp_25*(tmp_264*tmp_32 + tmp_266*tmp_47 + tmp_268*tmp_54 - 1.0/4.0) + tmp_26*(tmp_264*tmp_61 + tmp_266*tmp_62 + tmp_268*tmp_63 - 1.0/4.0) + tmp_29*(tmp_264*tmp_64 + tmp_266*tmp_65 + tmp_268*tmp_66 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_68;
      real_t tmp_271 = tmp_265 + tmp_70;
      real_t tmp_272 = tmp_267 + tmp_72;
      real_t tmp_273 = tmp_17*tmp_272 + tmp_20*tmp_271 + tmp_23*tmp_270;
      real_t tmp_274 = tmp_16*tmp_272 + tmp_19*tmp_271 + tmp_22*tmp_270;
      real_t tmp_275 = tmp_15*tmp_272 + tmp_18*tmp_271 + tmp_21*tmp_270;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_280 = tmp_40*(tmp_279 + tmp_41);
      real_t tmp_281 = 0.039308471900058539*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_282 = tmp_40*(tmp_281 + tmp_48);
      real_t tmp_283 = 0.039308471900058539*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_284 = tmp_40*(tmp_283 + tmp_55);
      real_t tmp_285 = tmp_25*(tmp_280*tmp_32 + tmp_282*tmp_47 + tmp_284*tmp_54 - 1.0/4.0) + tmp_26*(tmp_280*tmp_61 + tmp_282*tmp_62 + tmp_284*tmp_63 - 1.0/4.0) + tmp_29*(tmp_280*tmp_64 + tmp_282*tmp_65 + tmp_284*tmp_66 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_68;
      real_t tmp_287 = tmp_281 + tmp_70;
      real_t tmp_288 = tmp_283 + tmp_72;
      real_t tmp_289 = tmp_17*tmp_288 + tmp_20*tmp_287 + tmp_23*tmp_286;
      real_t tmp_290 = tmp_16*tmp_288 + tmp_19*tmp_287 + tmp_22*tmp_286;
      real_t tmp_291 = tmp_15*tmp_288 + tmp_18*tmp_287 + tmp_21*tmp_286;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_296 = tmp_40*(tmp_295 + tmp_41);
      real_t tmp_297 = 0.93718850182767688*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_298 = tmp_40*(tmp_297 + tmp_48);
      real_t tmp_299 = 0.93718850182767688*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_300 = tmp_40*(tmp_299 + tmp_55);
      real_t tmp_301 = tmp_25*(tmp_296*tmp_32 + tmp_298*tmp_47 + tmp_300*tmp_54 - 1.0/4.0) + tmp_26*(tmp_296*tmp_61 + tmp_298*tmp_62 + tmp_300*tmp_63 - 1.0/4.0) + tmp_29*(tmp_296*tmp_64 + tmp_298*tmp_65 + tmp_300*tmp_66 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_68;
      real_t tmp_303 = tmp_297 + tmp_70;
      real_t tmp_304 = tmp_299 + tmp_72;
      real_t tmp_305 = tmp_17*tmp_304 + tmp_20*tmp_303 + tmp_23*tmp_302;
      real_t tmp_306 = tmp_16*tmp_304 + tmp_19*tmp_303 + tmp_22*tmp_302;
      real_t tmp_307 = tmp_15*tmp_304 + tmp_18*tmp_303 + tmp_21*tmp_302;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_312 = tmp_40*(tmp_311 + tmp_41);
      real_t tmp_313 = 0.60796128279561268*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_314 = tmp_40*(tmp_313 + tmp_48);
      real_t tmp_315 = 0.60796128279561268*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_316 = tmp_40*(tmp_315 + tmp_55);
      real_t tmp_317 = tmp_25*(tmp_312*tmp_32 + tmp_314*tmp_47 + tmp_316*tmp_54 - 1.0/4.0) + tmp_26*(tmp_312*tmp_61 + tmp_314*tmp_62 + tmp_316*tmp_63 - 1.0/4.0) + tmp_29*(tmp_312*tmp_64 + tmp_314*tmp_65 + tmp_316*tmp_66 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_68;
      real_t tmp_319 = tmp_313 + tmp_70;
      real_t tmp_320 = tmp_315 + tmp_72;
      real_t tmp_321 = tmp_17*tmp_320 + tmp_20*tmp_319 + tmp_23*tmp_318;
      real_t tmp_322 = tmp_16*tmp_320 + tmp_19*tmp_319 + tmp_22*tmp_318;
      real_t tmp_323 = tmp_15*tmp_320 + tmp_18*tmp_319 + tmp_21*tmp_318;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_328 = tmp_40*(tmp_327 + tmp_41);
      real_t tmp_329 = 0.19107600050469298*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_330 = tmp_40*(tmp_329 + tmp_48);
      real_t tmp_331 = 0.19107600050469298*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_332 = tmp_40*(tmp_331 + tmp_55);
      real_t tmp_333 = tmp_25*(tmp_32*tmp_328 + tmp_330*tmp_47 + tmp_332*tmp_54 - 1.0/4.0) + tmp_26*(tmp_328*tmp_61 + tmp_330*tmp_62 + tmp_332*tmp_63 - 1.0/4.0) + tmp_29*(tmp_328*tmp_64 + tmp_330*tmp_65 + tmp_332*tmp_66 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_68;
      real_t tmp_335 = tmp_329 + tmp_70;
      real_t tmp_336 = tmp_331 + tmp_72;
      real_t tmp_337 = tmp_17*tmp_336 + tmp_20*tmp_335 + tmp_23*tmp_334;
      real_t tmp_338 = tmp_16*tmp_336 + tmp_19*tmp_335 + tmp_22*tmp_334;
      real_t tmp_339 = tmp_15*tmp_336 + tmp_18*tmp_335 + tmp_21*tmp_334;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_344 = tmp_40*(tmp_343 + tmp_41);
      real_t tmp_345 = 0.031405749086161582*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_346 = tmp_40*(tmp_345 + tmp_48);
      real_t tmp_347 = 0.031405749086161582*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_348 = tmp_40*(tmp_347 + tmp_55);
      real_t tmp_349 = tmp_25*(tmp_32*tmp_344 + tmp_346*tmp_47 + tmp_348*tmp_54 - 1.0/4.0) + tmp_26*(tmp_344*tmp_61 + tmp_346*tmp_62 + tmp_348*tmp_63 - 1.0/4.0) + tmp_29*(tmp_344*tmp_64 + tmp_346*tmp_65 + tmp_348*tmp_66 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_68;
      real_t tmp_351 = tmp_345 + tmp_70;
      real_t tmp_352 = tmp_347 + tmp_72;
      real_t tmp_353 = tmp_17*tmp_352 + tmp_20*tmp_351 + tmp_23*tmp_350;
      real_t tmp_354 = tmp_16*tmp_352 + tmp_19*tmp_351 + tmp_22*tmp_350;
      real_t tmp_355 = tmp_15*tmp_352 + tmp_18*tmp_351 + tmp_21*tmp_350;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_360 = tmp_40*(tmp_359 + tmp_41);
      real_t tmp_361 = 0.19601935860219369*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_362 = tmp_40*(tmp_361 + tmp_48);
      real_t tmp_363 = 0.19601935860219369*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_364 = tmp_40*(tmp_363 + tmp_55);
      real_t tmp_365 = tmp_25*(tmp_32*tmp_360 + tmp_362*tmp_47 + tmp_364*tmp_54 - 1.0/4.0) + tmp_26*(tmp_360*tmp_61 + tmp_362*tmp_62 + tmp_364*tmp_63 - 1.0/4.0) + tmp_29*(tmp_360*tmp_64 + tmp_362*tmp_65 + tmp_364*tmp_66 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_68;
      real_t tmp_367 = tmp_361 + tmp_70;
      real_t tmp_368 = tmp_363 + tmp_72;
      real_t tmp_369 = tmp_17*tmp_368 + tmp_20*tmp_367 + tmp_23*tmp_366;
      real_t tmp_370 = tmp_16*tmp_368 + tmp_19*tmp_367 + tmp_22*tmp_366;
      real_t tmp_371 = tmp_15*tmp_368 + tmp_18*tmp_367 + tmp_21*tmp_366;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_376 = tmp_40*(tmp_375 + tmp_41);
      real_t tmp_377 = 0.40446199974765351*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_378 = tmp_40*(tmp_377 + tmp_48);
      real_t tmp_379 = 0.40446199974765351*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_380 = tmp_40*(tmp_379 + tmp_55);
      real_t tmp_381 = tmp_25*(tmp_32*tmp_376 + tmp_378*tmp_47 + tmp_380*tmp_54 - 1.0/4.0) + tmp_26*(tmp_376*tmp_61 + tmp_378*tmp_62 + tmp_380*tmp_63 - 1.0/4.0) + tmp_29*(tmp_376*tmp_64 + tmp_378*tmp_65 + tmp_380*tmp_66 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_68;
      real_t tmp_383 = tmp_377 + tmp_70;
      real_t tmp_384 = tmp_379 + tmp_72;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_392 = tmp_40*(tmp_391 + tmp_41);
      real_t tmp_393 = 0.1711304259088916*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_394 = tmp_40*(tmp_393 + tmp_48);
      real_t tmp_395 = 0.1711304259088916*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_396 = tmp_40*(tmp_395 + tmp_55);
      real_t tmp_397 = tmp_25*(tmp_32*tmp_392 + tmp_394*tmp_47 + tmp_396*tmp_54 - 1.0/4.0) + tmp_26*(tmp_392*tmp_61 + tmp_394*tmp_62 + tmp_396*tmp_63 - 1.0/4.0) + tmp_29*(tmp_392*tmp_64 + tmp_394*tmp_65 + tmp_396*tmp_66 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_68;
      real_t tmp_399 = tmp_393 + tmp_70;
      real_t tmp_400 = tmp_395 + tmp_72;
      real_t tmp_401 = tmp_17*tmp_400 + tmp_20*tmp_399 + tmp_23*tmp_398;
      real_t tmp_402 = tmp_16*tmp_400 + tmp_19*tmp_399 + tmp_22*tmp_398;
      real_t tmp_403 = tmp_15*tmp_400 + tmp_18*tmp_399 + tmp_21*tmp_398;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_408 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_409 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 - tmp_100*tmp_81 + 0.5*tmp_24*tmp_93) + tmp_118*(0.5*tmp_109*tmp_24 - tmp_116*tmp_117 - tmp_116*tmp_81) + tmp_134*(0.5*tmp_125*tmp_24 - tmp_132*tmp_133 - tmp_132*tmp_81) + tmp_150*(0.5*tmp_141*tmp_24 - tmp_148*tmp_149 - tmp_148*tmp_81) + tmp_166*(0.5*tmp_157*tmp_24 - tmp_164*tmp_165 - tmp_164*tmp_81) + tmp_182*(0.5*tmp_173*tmp_24 - tmp_180*tmp_181 - tmp_180*tmp_81) + tmp_198*(0.5*tmp_189*tmp_24 - tmp_196*tmp_197 - tmp_196*tmp_81) + tmp_214*(0.5*tmp_205*tmp_24 - tmp_212*tmp_213 - tmp_212*tmp_81) + tmp_230*(0.5*tmp_221*tmp_24 - tmp_228*tmp_229 - tmp_228*tmp_81) + tmp_246*(0.5*tmp_237*tmp_24 - tmp_244*tmp_245 - tmp_244*tmp_81) + tmp_262*(0.5*tmp_24*tmp_253 - tmp_260*tmp_261 - tmp_260*tmp_81) + tmp_278*(0.5*tmp_24*tmp_269 - tmp_276*tmp_277 - tmp_276*tmp_81) + tmp_294*(0.5*tmp_24*tmp_285 - tmp_292*tmp_293 - tmp_292*tmp_81) + tmp_310*(0.5*tmp_24*tmp_301 - tmp_308*tmp_309 - tmp_308*tmp_81) + tmp_326*(0.5*tmp_24*tmp_317 - tmp_324*tmp_325 - tmp_324*tmp_81) + tmp_342*(0.5*tmp_24*tmp_333 - tmp_340*tmp_341 - tmp_340*tmp_81) + tmp_358*(0.5*tmp_24*tmp_349 - tmp_356*tmp_357 - tmp_356*tmp_81) + tmp_374*(0.5*tmp_24*tmp_365 - tmp_372*tmp_373 - tmp_372*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_388*tmp_389 - tmp_388*tmp_81) + tmp_406*(0.5*tmp_24*tmp_397 - tmp_404*tmp_405 - tmp_404*tmp_81) + tmp_86*(0.5*tmp_24*tmp_67 - tmp_77*tmp_81 - tmp_77*tmp_84);
      real_t a_1_0 = tmp_102*(-tmp_101*tmp_97 + 0.5*tmp_407*tmp_93 - tmp_81*tmp_97) + tmp_118*(0.5*tmp_109*tmp_407 - tmp_113*tmp_117 - tmp_113*tmp_81) + tmp_134*(0.5*tmp_125*tmp_407 - tmp_129*tmp_133 - tmp_129*tmp_81) + tmp_150*(0.5*tmp_141*tmp_407 - tmp_145*tmp_149 - tmp_145*tmp_81) + tmp_166*(0.5*tmp_157*tmp_407 - tmp_161*tmp_165 - tmp_161*tmp_81) + tmp_182*(0.5*tmp_173*tmp_407 - tmp_177*tmp_181 - tmp_177*tmp_81) + tmp_198*(0.5*tmp_189*tmp_407 - tmp_193*tmp_197 - tmp_193*tmp_81) + tmp_214*(0.5*tmp_205*tmp_407 - tmp_209*tmp_213 - tmp_209*tmp_81) + tmp_230*(0.5*tmp_221*tmp_407 - tmp_225*tmp_229 - tmp_225*tmp_81) + tmp_246*(0.5*tmp_237*tmp_407 - tmp_241*tmp_245 - tmp_241*tmp_81) + tmp_262*(0.5*tmp_253*tmp_407 - tmp_257*tmp_261 - tmp_257*tmp_81) + tmp_278*(0.5*tmp_269*tmp_407 - tmp_273*tmp_277 - tmp_273*tmp_81) + tmp_294*(0.5*tmp_285*tmp_407 - tmp_289*tmp_293 - tmp_289*tmp_81) + tmp_310*(0.5*tmp_301*tmp_407 - tmp_305*tmp_309 - tmp_305*tmp_81) + tmp_326*(0.5*tmp_317*tmp_407 - tmp_321*tmp_325 - tmp_321*tmp_81) + tmp_342*(0.5*tmp_333*tmp_407 - tmp_337*tmp_341 - tmp_337*tmp_81) + tmp_358*(0.5*tmp_349*tmp_407 - tmp_353*tmp_357 - tmp_353*tmp_81) + tmp_374*(0.5*tmp_365*tmp_407 - tmp_369*tmp_373 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_381*tmp_407 - tmp_385*tmp_389 - tmp_385*tmp_81) + tmp_406*(0.5*tmp_397*tmp_407 - tmp_401*tmp_405 - tmp_401*tmp_81) + tmp_86*(0.5*tmp_407*tmp_67 - tmp_74*tmp_81 - tmp_74*tmp_84);
      real_t a_2_0 = tmp_102*(-tmp_101*tmp_98 + 0.5*tmp_408*tmp_93 - tmp_81*tmp_98) + tmp_118*(0.5*tmp_109*tmp_408 - tmp_114*tmp_117 - tmp_114*tmp_81) + tmp_134*(0.5*tmp_125*tmp_408 - tmp_130*tmp_133 - tmp_130*tmp_81) + tmp_150*(0.5*tmp_141*tmp_408 - tmp_146*tmp_149 - tmp_146*tmp_81) + tmp_166*(0.5*tmp_157*tmp_408 - tmp_162*tmp_165 - tmp_162*tmp_81) + tmp_182*(0.5*tmp_173*tmp_408 - tmp_178*tmp_181 - tmp_178*tmp_81) + tmp_198*(0.5*tmp_189*tmp_408 - tmp_194*tmp_197 - tmp_194*tmp_81) + tmp_214*(0.5*tmp_205*tmp_408 - tmp_210*tmp_213 - tmp_210*tmp_81) + tmp_230*(0.5*tmp_221*tmp_408 - tmp_226*tmp_229 - tmp_226*tmp_81) + tmp_246*(0.5*tmp_237*tmp_408 - tmp_242*tmp_245 - tmp_242*tmp_81) + tmp_262*(0.5*tmp_253*tmp_408 - tmp_258*tmp_261 - tmp_258*tmp_81) + tmp_278*(0.5*tmp_269*tmp_408 - tmp_274*tmp_277 - tmp_274*tmp_81) + tmp_294*(0.5*tmp_285*tmp_408 - tmp_290*tmp_293 - tmp_290*tmp_81) + tmp_310*(0.5*tmp_301*tmp_408 - tmp_306*tmp_309 - tmp_306*tmp_81) + tmp_326*(0.5*tmp_317*tmp_408 - tmp_322*tmp_325 - tmp_322*tmp_81) + tmp_342*(0.5*tmp_333*tmp_408 - tmp_338*tmp_341 - tmp_338*tmp_81) + tmp_358*(0.5*tmp_349*tmp_408 - tmp_354*tmp_357 - tmp_354*tmp_81) + tmp_374*(0.5*tmp_365*tmp_408 - tmp_370*tmp_373 - tmp_370*tmp_81) + tmp_390*(0.5*tmp_381*tmp_408 - tmp_386*tmp_389 - tmp_386*tmp_81) + tmp_406*(0.5*tmp_397*tmp_408 - tmp_402*tmp_405 - tmp_402*tmp_81) + tmp_86*(0.5*tmp_408*tmp_67 - tmp_75*tmp_81 - tmp_75*tmp_84);
      real_t a_3_0 = tmp_102*(-tmp_101*tmp_99 + 0.5*tmp_409*tmp_93 - tmp_81*tmp_99) + tmp_118*(0.5*tmp_109*tmp_409 - tmp_115*tmp_117 - tmp_115*tmp_81) + tmp_134*(0.5*tmp_125*tmp_409 - tmp_131*tmp_133 - tmp_131*tmp_81) + tmp_150*(0.5*tmp_141*tmp_409 - tmp_147*tmp_149 - tmp_147*tmp_81) + tmp_166*(0.5*tmp_157*tmp_409 - tmp_163*tmp_165 - tmp_163*tmp_81) + tmp_182*(0.5*tmp_173*tmp_409 - tmp_179*tmp_181 - tmp_179*tmp_81) + tmp_198*(0.5*tmp_189*tmp_409 - tmp_195*tmp_197 - tmp_195*tmp_81) + tmp_214*(0.5*tmp_205*tmp_409 - tmp_211*tmp_213 - tmp_211*tmp_81) + tmp_230*(0.5*tmp_221*tmp_409 - tmp_227*tmp_229 - tmp_227*tmp_81) + tmp_246*(0.5*tmp_237*tmp_409 - tmp_243*tmp_245 - tmp_243*tmp_81) + tmp_262*(0.5*tmp_253*tmp_409 - tmp_259*tmp_261 - tmp_259*tmp_81) + tmp_278*(0.5*tmp_269*tmp_409 - tmp_275*tmp_277 - tmp_275*tmp_81) + tmp_294*(0.5*tmp_285*tmp_409 - tmp_291*tmp_293 - tmp_291*tmp_81) + tmp_310*(0.5*tmp_301*tmp_409 - tmp_307*tmp_309 - tmp_307*tmp_81) + tmp_326*(0.5*tmp_317*tmp_409 - tmp_323*tmp_325 - tmp_323*tmp_81) + tmp_342*(0.5*tmp_333*tmp_409 - tmp_339*tmp_341 - tmp_339*tmp_81) + tmp_358*(0.5*tmp_349*tmp_409 - tmp_355*tmp_357 - tmp_355*tmp_81) + tmp_374*(0.5*tmp_365*tmp_409 - tmp_371*tmp_373 - tmp_371*tmp_81) + tmp_390*(0.5*tmp_381*tmp_409 - tmp_387*tmp_389 - tmp_387*tmp_81) + tmp_406*(0.5*tmp_397*tmp_409 - tmp_403*tmp_405 - tmp_403*tmp_81) + tmp_86*(0.5*tmp_409*tmp_67 - tmp_76*tmp_81 - tmp_76*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_11*(tmp_42 - 1.0/4.0) + tmp_6*(tmp_40 - 1.0/4.0) + tmp_9*(tmp_41 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_11*tmp_15 + tmp_16*tmp_9 + tmp_17*tmp_6) + p_affine_13_1*(tmp_11*tmp_18 + tmp_19*tmp_9 + tmp_20*tmp_6) + p_affine_13_2*(tmp_11*tmp_21 + tmp_22*tmp_9 + tmp_23*tmp_6);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_11*(tmp_55 - 1.0/4.0) + tmp_6*(tmp_53 - 1.0/4.0) + tmp_9*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_11*(tmp_64 - 1.0/4.0) + tmp_6*(tmp_62 - 1.0/4.0) + tmp_9*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_11*(tmp_73 - 1.0/4.0) + tmp_6*(tmp_71 - 1.0/4.0) + tmp_9*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_11*(tmp_82 - 1.0/4.0) + tmp_6*(tmp_80 - 1.0/4.0) + tmp_9*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_11*(tmp_91 - 1.0/4.0) + tmp_6*(tmp_89 - 1.0/4.0) + tmp_9*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_11*(tmp_100 - 1.0/4.0) + tmp_6*(tmp_98 - 1.0/4.0) + tmp_9*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_11*(tmp_109 - 1.0/4.0) + tmp_6*(tmp_107 - 1.0/4.0) + tmp_9*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_11*(tmp_118 - 1.0/4.0) + tmp_6*(tmp_116 - 1.0/4.0) + tmp_9*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_11*(tmp_127 - 1.0/4.0) + tmp_6*(tmp_125 - 1.0/4.0) + tmp_9*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_11*(tmp_136 - 1.0/4.0) + tmp_6*(tmp_134 - 1.0/4.0) + tmp_9*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_11*(tmp_145 - 1.0/4.0) + tmp_6*(tmp_143 - 1.0/4.0) + tmp_9*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_11*(tmp_154 - 1.0/4.0) + tmp_6*(tmp_152 - 1.0/4.0) + tmp_9*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_11*(tmp_163 - 1.0/4.0) + tmp_6*(tmp_161 - 1.0/4.0) + tmp_9*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_11*(tmp_172 - 1.0/4.0) + tmp_6*(tmp_170 - 1.0/4.0) + tmp_9*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_11*(tmp_181 - 1.0/4.0) + tmp_6*(tmp_179 - 1.0/4.0) + tmp_9*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_11*(tmp_190 - 1.0/4.0) + tmp_6*(tmp_188 - 1.0/4.0) + tmp_9*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_11*(tmp_199 - 1.0/4.0) + tmp_6*(tmp_197 - 1.0/4.0) + tmp_9*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_11*(tmp_208 - 1.0/4.0) + tmp_6*(tmp_206 - 1.0/4.0) + tmp_9*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_11*(tmp_217 - 1.0/4.0) + tmp_6*(tmp_215 - 1.0/4.0) + tmp_9*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_11*(tmp_226 - 1.0/4.0) + tmp_6*(tmp_224 - 1.0/4.0) + tmp_9*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_P1P1_11 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1P1_11()
: callback_Scalar_Variable_Coefficient_2D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g1( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g1( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = 1.0 / (tmp_4);
      real_t tmp_6 = tmp_0*tmp_5;
      real_t tmp_7 = tmp_2*tmp_5;
      real_t tmp_8 = -tmp_6 - tmp_7;
      real_t tmp_9 = tmp_1*tmp_5;
      real_t tmp_10 = tmp_3*tmp_5;
      real_t tmp_11 = -tmp_10 - tmp_9;
      real_t tmp_12 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_13 = tmp_12*((tmp_11*tmp_11) + (tmp_8*tmp_8));
      real_t tmp_14 = tmp_12*(tmp_11*tmp_9 + tmp_7*tmp_8);
      real_t tmp_15 = 0.5*tmp_14;
      real_t tmp_16 = tmp_12*(tmp_10*tmp_11 + tmp_6*tmp_8);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = 1.0 / (tmp_4*tmp_4);
      real_t tmp_19 = tmp_12*((tmp_1*tmp_1)*tmp_18 + tmp_18*(tmp_2*tmp_2));
      real_t tmp_20 = tmp_12*(tmp_0*tmp_18*tmp_2 + tmp_1*tmp_18*tmp_3);
      real_t tmp_21 = 0.5*tmp_20;
      real_t tmp_22 = tmp_12*((tmp_0*tmp_0)*tmp_18 + tmp_18*(tmp_3*tmp_3));
      real_t a_0_0 = 0.5*tmp_13;
      real_t a_0_1 = tmp_15;
      real_t a_0_2 = tmp_17;
      real_t a_1_0 = tmp_15;
      real_t a_1_1 = 0.5*tmp_19;
      real_t a_1_2 = tmp_21;
      real_t a_2_0 = tmp_17;
      real_t a_2_1 = tmp_21;
      real_t a_2_2 = 0.5*tmp_22;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = -tmp_15 - tmp_18 + 1;
      real_t tmp_20 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_21 = 1.0*tmp_20;
      real_t tmp_22 = 0.11846344252809471*tmp_2;
      real_t tmp_23 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_24 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_25 = tmp_11*tmp_23 + tmp_14*tmp_24;
      real_t tmp_26 = tmp_16*tmp_23 + tmp_17*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_2;
      real_t tmp_29 = 0.5*tmp_1 + tmp_4;
      real_t tmp_30 = 0.5*tmp_0 + tmp_12;
      real_t tmp_31 = tmp_11*tmp_29 + tmp_14*tmp_30;
      real_t tmp_32 = tmp_16*tmp_29 + tmp_17*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_2;
      real_t tmp_35 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_36 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_37 = tmp_11*tmp_35 + tmp_14*tmp_36;
      real_t tmp_38 = tmp_16*tmp_35 + tmp_17*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_2;
      real_t tmp_41 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_42 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_43 = tmp_11*tmp_41 + tmp_14*tmp_42;
      real_t tmp_44 = tmp_16*tmp_41 + tmp_17*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_2;
      real_t tmp_47 = 0.5*tmp_20;
      real_t tmp_48 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_49 = 0.5*tmp_48;
      real_t tmp_50 = tmp_22*(3*tmp_15*tmp_19*tmp_3 - tmp_15*tmp_47 - tmp_19*tmp_49) + tmp_28*(3*tmp_25*tmp_27*tmp_3 - tmp_25*tmp_47 - tmp_27*tmp_49) + tmp_34*(3*tmp_3*tmp_31*tmp_33 - tmp_31*tmp_47 - tmp_33*tmp_49) + tmp_40*(3*tmp_3*tmp_37*tmp_39 - tmp_37*tmp_47 - tmp_39*tmp_49) + tmp_46*(3*tmp_3*tmp_43*tmp_45 - tmp_43*tmp_47 - tmp_45*tmp_49);
      real_t tmp_51 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t tmp_52 = 0.5*tmp_51;
      real_t tmp_53 = tmp_22*(3*tmp_18*tmp_19*tmp_3 - tmp_18*tmp_47 - tmp_19*tmp_52) + tmp_28*(3*tmp_26*tmp_27*tmp_3 - tmp_26*tmp_47 - tmp_27*tmp_52) + tmp_34*(3*tmp_3*tmp_32*tmp_33 - tmp_32*tmp_47 - tmp_33*tmp_52) + tmp_40*(3*tmp_3*tmp_38*tmp_39 - tmp_38*tmp_47 - tmp_39*tmp_52) + tmp_46*(3*tmp_3*tmp_44*tmp_45 - tmp_44*tmp_47 - tmp_45*tmp_52);
      real_t tmp_54 = 1.0*tmp_48;
      real_t tmp_55 = tmp_22*(3*tmp_15*tmp_18*tmp_3 - tmp_15*tmp_52 - tmp_18*tmp_49) + tmp_28*(3*tmp_25*tmp_26*tmp_3 - tmp_25*tmp_52 - tmp_26*tmp_49) + tmp_34*(3*tmp_3*tmp_31*tmp_32 - tmp_31*tmp_52 - tmp_32*tmp_49) + tmp_40*(3*tmp_3*tmp_37*tmp_38 - tmp_37*tmp_52 - tmp_38*tmp_49) + tmp_46*(3*tmp_3*tmp_43*tmp_44 - tmp_43*tmp_52 - tmp_44*tmp_49);
      real_t tmp_56 = 1.0*tmp_51;
      real_t a_0_0 = tmp_22*(3*(tmp_19*tmp_19)*tmp_3 - tmp_19*tmp_21) + tmp_28*(-tmp_21*tmp_27 + 3*(tmp_27*tmp_27)*tmp_3) + tmp_34*(-tmp_21*tmp_33 + 3*tmp_3*(tmp_33*tmp_33)) + tmp_40*(-tmp_21*tmp_39 + 3*tmp_3*(tmp_39*tmp_39)) + tmp_46*(-tmp_21*tmp_45 + 3*tmp_3*(tmp_45*tmp_45));
      real_t a_0_1 = tmp_50;
      real_t a_0_2 = tmp_53;
      real_t a_1_0 = tmp_50;
      real_t a_1_1 = tmp_22*(3*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_54) + tmp_28*(3*(tmp_25*tmp_25)*tmp_3 - tmp_25*tmp_54) + tmp_34*(3*tmp_3*(tmp_31*tmp_31) - tmp_31*tmp_54) + tmp_40*(3*tmp_3*(tmp_37*tmp_37) - tmp_37*tmp_54) + tmp_46*(3*tmp_3*(tmp_43*tmp_43) - tmp_43*tmp_54);
      real_t a_1_2 = tmp_55;
      real_t a_2_0 = tmp_53;
      real_t a_2_1 = tmp_55;
      real_t a_2_2 = tmp_22*(3*(tmp_18*tmp_18)*tmp_3 - tmp_18*tmp_56) + tmp_28*(3*(tmp_26*tmp_26)*tmp_3 - tmp_26*tmp_56) + tmp_34*(3*tmp_3*(tmp_32*tmp_32) - tmp_32*tmp_56) + tmp_40*(3*tmp_3*(tmp_38*tmp_38) - tmp_38*tmp_56) + tmp_46*(3*tmp_3*(tmp_44*tmp_44) - tmp_44*tmp_56);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (tmp_0*tmp_1 - tmp_2*tmp_3);
      real_t tmp_5 = tmp_0*tmp_4;
      real_t tmp_6 = tmp_3*tmp_4;
      real_t tmp_7 = tmp_1*tmp_4;
      real_t tmp_8 = tmp_2*tmp_4;
      real_t tmp_9 = p_affine_10_0*(-tmp_5 - tmp_6) + p_affine_10_1*(-tmp_7 - tmp_8);
      real_t tmp_10 = -p_affine_3_1;
      real_t tmp_11 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_12 = p_affine_6_1 + 0.046910077030668018*tmp_11;
      real_t tmp_13 = tmp_10 + tmp_12;
      real_t tmp_14 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_15 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_16 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_17 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_18 = 1.0 / (-tmp_14*tmp_17 + tmp_15*tmp_16);
      real_t tmp_19 = tmp_14*tmp_18;
      real_t tmp_20 = -p_affine_3_0;
      real_t tmp_21 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_22 = p_affine_6_0 + 0.046910077030668018*tmp_21;
      real_t tmp_23 = tmp_20 + tmp_22;
      real_t tmp_24 = tmp_16*tmp_18;
      real_t tmp_25 = tmp_13*tmp_19 + tmp_23*tmp_24;
      real_t tmp_26 = tmp_15*tmp_18;
      real_t tmp_27 = tmp_17*tmp_18;
      real_t tmp_28 = tmp_13*tmp_26 + tmp_23*tmp_27;
      real_t tmp_29 = -tmp_25 - tmp_28 + 1;
      real_t tmp_30 = -p_affine_0_1;
      real_t tmp_31 = tmp_12 + tmp_30;
      real_t tmp_32 = -p_affine_0_0;
      real_t tmp_33 = tmp_22 + tmp_32;
      real_t tmp_34 = tmp_31*tmp_8 + tmp_33*tmp_5;
      real_t tmp_35 = tmp_31*tmp_7 + tmp_33*tmp_6;
      real_t tmp_36 = -tmp_34 - tmp_35 + 1;
      real_t tmp_37 = 0.5*p_affine_10_0*(-tmp_24 - tmp_27) + 0.5*p_affine_10_1*(-tmp_19 - tmp_26);
      real_t tmp_38 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_21*tmp_21), 1.0/2.0));
      real_t tmp_39 = 3/tmp_38;
      real_t tmp_40 = tmp_36*tmp_39;
      real_t tmp_41 = 0.11846344252809471*tmp_38;
      real_t tmp_42 = p_affine_6_1 + 0.23076534494715845*tmp_11;
      real_t tmp_43 = tmp_10 + tmp_42;
      real_t tmp_44 = p_affine_6_0 + 0.23076534494715845*tmp_21;
      real_t tmp_45 = tmp_20 + tmp_44;
      real_t tmp_46 = tmp_19*tmp_43 + tmp_24*tmp_45;
      real_t tmp_47 = tmp_26*tmp_43 + tmp_27*tmp_45;
      real_t tmp_48 = -tmp_46 - tmp_47 + 1;
      real_t tmp_49 = tmp_30 + tmp_42;
      real_t tmp_50 = tmp_32 + tmp_44;
      real_t tmp_51 = tmp_49*tmp_8 + tmp_5*tmp_50;
      real_t tmp_52 = tmp_49*tmp_7 + tmp_50*tmp_6;
      real_t tmp_53 = -tmp_51 - tmp_52 + 1;
      real_t tmp_54 = tmp_39*tmp_53;
      real_t tmp_55 = 0.2393143352496831*tmp_38;
      real_t tmp_56 = p_affine_6_1 + 0.5*tmp_11;
      real_t tmp_57 = tmp_10 + tmp_56;
      real_t tmp_58 = p_affine_6_0 + 0.5*tmp_21;
      real_t tmp_59 = tmp_20 + tmp_58;
      real_t tmp_60 = tmp_19*tmp_57 + tmp_24*tmp_59;
      real_t tmp_61 = tmp_26*tmp_57 + tmp_27*tmp_59;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_30 + tmp_56;
      real_t tmp_64 = tmp_32 + tmp_58;
      real_t tmp_65 = tmp_5*tmp_64 + tmp_63*tmp_8;
      real_t tmp_66 = tmp_6*tmp_64 + tmp_63*tmp_7;
      real_t tmp_67 = -tmp_65 - tmp_66 + 1;
      real_t tmp_68 = tmp_39*tmp_67;
      real_t tmp_69 = 0.2844444444444445*tmp_38;
      real_t tmp_70 = p_affine_6_1 + 0.7692346550528415*tmp_11;
      real_t tmp_71 = tmp_10 + tmp_70;
      real_t tmp_72 = p_affine_6_0 + 0.7692346550528415*tmp_21;
      real_t tmp_73 = tmp_20 + tmp_72;
      real_t tmp_74 = tmp_19*tmp_71 + tmp_24*tmp_73;
      real_t tmp_75 = tmp_26*tmp_71 + tmp_27*tmp_73;
      real_t tmp_76 = -tmp_74 - tmp_75 + 1;
      real_t tmp_77 = tmp_30 + tmp_70;
      real_t tmp_78 = tmp_32 + tmp_72;
      real_t tmp_79 = tmp_5*tmp_78 + tmp_77*tmp_8;
      real_t tmp_80 = tmp_6*tmp_78 + tmp_7*tmp_77;
      real_t tmp_81 = -tmp_79 - tmp_80 + 1;
      real_t tmp_82 = tmp_39*tmp_81;
      real_t tmp_83 = 0.2393143352496831*tmp_38;
      real_t tmp_84 = p_affine_6_1 + 0.95308992296933193*tmp_11;
      real_t tmp_85 = tmp_10 + tmp_84;
      real_t tmp_86 = p_affine_6_0 + 0.95308992296933193*tmp_21;
      real_t tmp_87 = tmp_20 + tmp_86;
      real_t tmp_88 = tmp_19*tmp_85 + tmp_24*tmp_87;
      real_t tmp_89 = tmp_26*tmp_85 + tmp_27*tmp_87;
      real_t tmp_90 = -tmp_88 - tmp_89 + 1;
      real_t tmp_91 = tmp_30 + tmp_84;
      real_t tmp_92 = tmp_32 + tmp_86;
      real_t tmp_93 = tmp_5*tmp_92 + tmp_8*tmp_91;
      real_t tmp_94 = tmp_6*tmp_92 + tmp_7*tmp_91;
      real_t tmp_95 = -tmp_93 - tmp_94 + 1;
      real_t tmp_96 = tmp_39*tmp_95;
      real_t tmp_97 = 0.11846344252809471*tmp_38;
      real_t tmp_98 = 0.5*p_affine_10_0*tmp_24 + 0.5*p_affine_10_1*tmp_19;
      real_t tmp_99 = 0.5*p_affine_10_0*tmp_27 + 0.5*p_affine_10_1*tmp_26;
      real_t tmp_100 = p_affine_10_0*tmp_5 + p_affine_10_1*tmp_8;
      real_t tmp_101 = tmp_34*tmp_39;
      real_t tmp_102 = tmp_39*tmp_51;
      real_t tmp_103 = tmp_39*tmp_65;
      real_t tmp_104 = tmp_39*tmp_79;
      real_t tmp_105 = tmp_39*tmp_93;
      real_t tmp_106 = p_affine_10_0*tmp_6 + p_affine_10_1*tmp_7;
      real_t tmp_107 = tmp_35*tmp_39;
      real_t tmp_108 = tmp_39*tmp_52;
      real_t tmp_109 = tmp_39*tmp_66;
      real_t tmp_110 = tmp_39*tmp_80;
      real_t tmp_111 = tmp_39*tmp_94;
      real_t a_0_0 = tmp_41*(-tmp_29*tmp_40 + 0.5*tmp_29*tmp_9 - tmp_36*tmp_37) + tmp_55*(-tmp_37*tmp_53 - tmp_48*tmp_54 + 0.5*tmp_48*tmp_9) + tmp_69*(-tmp_37*tmp_67 - tmp_62*tmp_68 + 0.5*tmp_62*tmp_9) + tmp_83*(-tmp_37*tmp_81 - tmp_76*tmp_82 + 0.5*tmp_76*tmp_9) + tmp_97*(-tmp_37*tmp_95 + 0.5*tmp_9*tmp_90 - tmp_90*tmp_96);
      real_t a_0_1 = tmp_41*(-tmp_25*tmp_40 + 0.5*tmp_25*tmp_9 - tmp_36*tmp_98) + tmp_55*(-tmp_46*tmp_54 + 0.5*tmp_46*tmp_9 - tmp_53*tmp_98) + tmp_69*(-tmp_60*tmp_68 + 0.5*tmp_60*tmp_9 - tmp_67*tmp_98) + tmp_83*(-tmp_74*tmp_82 + 0.5*tmp_74*tmp_9 - tmp_81*tmp_98) + tmp_97*(0.5*tmp_88*tmp_9 - tmp_88*tmp_96 - tmp_95*tmp_98);
      real_t a_0_2 = tmp_41*(-tmp_28*tmp_40 + 0.5*tmp_28*tmp_9 - tmp_36*tmp_99) + tmp_55*(-tmp_47*tmp_54 + 0.5*tmp_47*tmp_9 - tmp_53*tmp_99) + tmp_69*(-tmp_61*tmp_68 + 0.5*tmp_61*tmp_9 - tmp_67*tmp_99) + tmp_83*(-tmp_75*tmp_82 + 0.5*tmp_75*tmp_9 - tmp_81*tmp_99) + tmp_97*(0.5*tmp_89*tmp_9 - tmp_89*tmp_96 - tmp_95*tmp_99);
      real_t a_1_0 = tmp_41*(0.5*tmp_100*tmp_29 - tmp_101*tmp_29 - tmp_34*tmp_37) + tmp_55*(0.5*tmp_100*tmp_48 - tmp_102*tmp_48 - tmp_37*tmp_51) + tmp_69*(0.5*tmp_100*tmp_62 - tmp_103*tmp_62 - tmp_37*tmp_65) + tmp_83*(0.5*tmp_100*tmp_76 - tmp_104*tmp_76 - tmp_37*tmp_79) + tmp_97*(0.5*tmp_100*tmp_90 - tmp_105*tmp_90 - tmp_37*tmp_93);
      real_t a_1_1 = tmp_41*(0.5*tmp_100*tmp_25 - tmp_101*tmp_25 - tmp_34*tmp_98) + tmp_55*(0.5*tmp_100*tmp_46 - tmp_102*tmp_46 - tmp_51*tmp_98) + tmp_69*(0.5*tmp_100*tmp_60 - tmp_103*tmp_60 - tmp_65*tmp_98) + tmp_83*(0.5*tmp_100*tmp_74 - tmp_104*tmp_74 - tmp_79*tmp_98) + tmp_97*(0.5*tmp_100*tmp_88 - tmp_105*tmp_88 - tmp_93*tmp_98);
      real_t a_1_2 = tmp_41*(0.5*tmp_100*tmp_28 - tmp_101*tmp_28 - tmp_34*tmp_99) + tmp_55*(0.5*tmp_100*tmp_47 - tmp_102*tmp_47 - tmp_51*tmp_99) + tmp_69*(0.5*tmp_100*tmp_61 - tmp_103*tmp_61 - tmp_65*tmp_99) + tmp_83*(0.5*tmp_100*tmp_75 - tmp_104*tmp_75 - tmp_79*tmp_99) + tmp_97*(0.5*tmp_100*tmp_89 - tmp_105*tmp_89 - tmp_93*tmp_99);
      real_t a_2_0 = tmp_41*(0.5*tmp_106*tmp_29 - tmp_107*tmp_29 - tmp_35*tmp_37) + tmp_55*(0.5*tmp_106*tmp_48 - tmp_108*tmp_48 - tmp_37*tmp_52) + tmp_69*(0.5*tmp_106*tmp_62 - tmp_109*tmp_62 - tmp_37*tmp_66) + tmp_83*(0.5*tmp_106*tmp_76 - tmp_110*tmp_76 - tmp_37*tmp_80) + tmp_97*(0.5*tmp_106*tmp_90 - tmp_111*tmp_90 - tmp_37*tmp_94);
      real_t a_2_1 = tmp_41*(0.5*tmp_106*tmp_25 - tmp_107*tmp_25 - tmp_35*tmp_98) + tmp_55*(0.5*tmp_106*tmp_46 - tmp_108*tmp_46 - tmp_52*tmp_98) + tmp_69*(0.5*tmp_106*tmp_60 - tmp_109*tmp_60 - tmp_66*tmp_98) + tmp_83*(0.5*tmp_106*tmp_74 - tmp_110*tmp_74 - tmp_80*tmp_98) + tmp_97*(0.5*tmp_106*tmp_88 - tmp_111*tmp_88 - tmp_94*tmp_98);
      real_t a_2_2 = tmp_41*(0.5*tmp_106*tmp_28 - tmp_107*tmp_28 - tmp_35*tmp_99) + tmp_55*(0.5*tmp_106*tmp_47 - tmp_108*tmp_47 - tmp_52*tmp_99) + tmp_69*(0.5*tmp_106*tmp_61 - tmp_109*tmp_61 - tmp_66*tmp_99) + tmp_83*(0.5*tmp_106*tmp_75 - tmp_110*tmp_75 - tmp_80*tmp_99) + tmp_97*(0.5*tmp_106*tmp_89 - tmp_111*tmp_89 - tmp_94*tmp_99);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = -tmp_15 - tmp_18 + 1;
      real_t tmp_20 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_21 = 2*tmp_20;
      real_t tmp_22 = 0.11846344252809471*tmp_2;
      real_t tmp_23 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_24 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_25 = tmp_11*tmp_23 + tmp_14*tmp_24;
      real_t tmp_26 = tmp_16*tmp_23 + tmp_17*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_2;
      real_t tmp_29 = 0.5*tmp_1 + tmp_4;
      real_t tmp_30 = 0.5*tmp_0 + tmp_12;
      real_t tmp_31 = tmp_11*tmp_29 + tmp_14*tmp_30;
      real_t tmp_32 = tmp_16*tmp_29 + tmp_17*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_2;
      real_t tmp_35 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_36 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_37 = tmp_11*tmp_35 + tmp_14*tmp_36;
      real_t tmp_38 = tmp_16*tmp_35 + tmp_17*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_2;
      real_t tmp_41 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_42 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_43 = tmp_11*tmp_41 + tmp_14*tmp_42;
      real_t tmp_44 = tmp_16*tmp_41 + tmp_17*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_2;
      real_t tmp_47 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_48 = tmp_22*(3*tmp_15*tmp_19*tmp_3 - tmp_15*tmp_20 - tmp_19*tmp_47) + tmp_28*(-tmp_20*tmp_25 + 3*tmp_25*tmp_27*tmp_3 - tmp_27*tmp_47) + tmp_34*(-tmp_20*tmp_31 + 3*tmp_3*tmp_31*tmp_33 - tmp_33*tmp_47) + tmp_40*(-tmp_20*tmp_37 + 3*tmp_3*tmp_37*tmp_39 - tmp_39*tmp_47) + tmp_46*(-tmp_20*tmp_43 + 3*tmp_3*tmp_43*tmp_45 - tmp_45*tmp_47);
      real_t tmp_49 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t tmp_50 = tmp_22*(3*tmp_18*tmp_19*tmp_3 - tmp_18*tmp_20 - tmp_19*tmp_49) + tmp_28*(-tmp_20*tmp_26 + 3*tmp_26*tmp_27*tmp_3 - tmp_27*tmp_49) + tmp_34*(-tmp_20*tmp_32 + 3*tmp_3*tmp_32*tmp_33 - tmp_33*tmp_49) + tmp_40*(-tmp_20*tmp_38 + 3*tmp_3*tmp_38*tmp_39 - tmp_39*tmp_49) + tmp_46*(-tmp_20*tmp_44 + 3*tmp_3*tmp_44*tmp_45 - tmp_45*tmp_49);
      real_t tmp_51 = 2*tmp_47;
      real_t tmp_52 = tmp_22*(3*tmp_15*tmp_18*tmp_3 - tmp_15*tmp_49 - tmp_18*tmp_47) + tmp_28*(3*tmp_25*tmp_26*tmp_3 - tmp_25*tmp_49 - tmp_26*tmp_47) + tmp_34*(3*tmp_3*tmp_31*tmp_32 - tmp_31*tmp_49 - tmp_32*tmp_47) + tmp_40*(3*tmp_3*tmp_37*tmp_38 - tmp_37*tmp_49 - tmp_38*tmp_47) + tmp_46*(3*tmp_3*tmp_43*tmp_44 - tmp_43*tmp_49 - tmp_44*tmp_47);
      real_t tmp_53 = 2*tmp_49;
      real_t a_0_0 = tmp_22*(3*(tmp_19*tmp_19)*tmp_3 - tmp_19*tmp_21) + tmp_28*(-tmp_21*tmp_27 + 3*(tmp_27*tmp_27)*tmp_3) + tmp_34*(-tmp_21*tmp_33 + 3*tmp_3*(tmp_33*tmp_33)) + tmp_40*(-tmp_21*tmp_39 + 3*tmp_3*(tmp_39*tmp_39)) + tmp_46*(-tmp_21*tmp_45 + 3*tmp_3*(tmp_45*tmp_45));
      real_t a_0_1 = tmp_48;
      real_t a_0_2 = tmp_50;
      real_t a_1_0 = tmp_48;
      real_t a_1_1 = tmp_22*(3*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_51) + tmp_28*(3*(tmp_25*tmp_25)*tmp_3 - tmp_25*tmp_51) + tmp_34*(3*tmp_3*(tmp_31*tmp_31) - tmp_31*tmp_51) + tmp_40*(3*tmp_3*(tmp_37*tmp_37) - tmp_37*tmp_51) + tmp_46*(3*tmp_3*(tmp_43*tmp_43) - tmp_43*tmp_51);
      real_t a_1_2 = tmp_52;
      real_t a_2_0 = tmp_50;
      real_t a_2_1 = tmp_52;
      real_t a_2_2 = tmp_22*(3*(tmp_18*tmp_18)*tmp_3 - tmp_18*tmp_53) + tmp_28*(3*(tmp_26*tmp_26)*tmp_3 - tmp_26*tmp_53) + tmp_34*(3*tmp_3*(tmp_32*tmp_32) - tmp_32*tmp_53) + tmp_40*(3*tmp_3*(tmp_38*tmp_38) - tmp_38*tmp_53) + tmp_46*(3*tmp_3*(tmp_44*tmp_44) - tmp_44*tmp_53);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g1_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id4 = 0;
      Scalar_Variable_Coefficient_2D_g1( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id0 );
      Scalar_Variable_Coefficient_2D_g1( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id1 );
      Scalar_Variable_Coefficient_2D_g1( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id2 );
      Scalar_Variable_Coefficient_2D_g1( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id3 );
      Scalar_Variable_Coefficient_2D_g1( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id4 );
      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (-tmp_6*tmp_9 + tmp_7*tmp_8);
      real_t tmp_11 = tmp_10*tmp_6;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_0 + tmp_12;
      real_t tmp_14 = tmp_10*tmp_8;
      real_t tmp_15 = tmp_11*tmp_5 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_5;
      real_t tmp_19 = p_affine_10_0*(-tmp_14 - tmp_17) + p_affine_10_1*(-tmp_11 - tmp_16);
      real_t tmp_20 = 0.11846344252809471*Scalar_Variable_Coefficient_2D_g1_out0_id0*tmp_2;
      real_t tmp_21 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_22 = 0.23076534494715845*tmp_0 + tmp_12;
      real_t tmp_23 = tmp_11*tmp_21 + tmp_14*tmp_22;
      real_t tmp_24 = tmp_16*tmp_21 + tmp_17*tmp_22;
      real_t tmp_25 = 0.2393143352496831*Scalar_Variable_Coefficient_2D_g1_out0_id1*tmp_2;
      real_t tmp_26 = 0.5*tmp_1 + tmp_4;
      real_t tmp_27 = 0.5*tmp_0 + tmp_12;
      real_t tmp_28 = tmp_11*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = 0.2844444444444445*Scalar_Variable_Coefficient_2D_g1_out0_id2*tmp_2;
      real_t tmp_31 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_32 = 0.7692346550528415*tmp_0 + tmp_12;
      real_t tmp_33 = tmp_11*tmp_31 + tmp_14*tmp_32;
      real_t tmp_34 = tmp_16*tmp_31 + tmp_17*tmp_32;
      real_t tmp_35 = 0.2393143352496831*Scalar_Variable_Coefficient_2D_g1_out0_id3*tmp_2;
      real_t tmp_36 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_37 = 0.95308992296933193*tmp_0 + tmp_12;
      real_t tmp_38 = tmp_11*tmp_36 + tmp_14*tmp_37;
      real_t tmp_39 = tmp_16*tmp_36 + tmp_17*tmp_37;
      real_t tmp_40 = 0.11846344252809471*Scalar_Variable_Coefficient_2D_g1_out0_id4*tmp_2;
      real_t tmp_41 = p_affine_10_0*tmp_14 + p_affine_10_1*tmp_11;
      real_t tmp_42 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_20*(-tmp_19 + 3*tmp_3*(-tmp_15 - tmp_18 + 1)) + tmp_25*(-tmp_19 + 3*tmp_3*(-tmp_23 - tmp_24 + 1)) + tmp_30*(-tmp_19 + 3*tmp_3*(-tmp_28 - tmp_29 + 1)) + tmp_35*(-tmp_19 + 3*tmp_3*(-tmp_33 - tmp_34 + 1)) + tmp_40*(-tmp_19 + 3*tmp_3*(-tmp_38 - tmp_39 + 1));
      real_t a_1_0 = tmp_20*(3*tmp_15*tmp_3 - tmp_41) + tmp_25*(3*tmp_23*tmp_3 - tmp_41) + tmp_30*(3*tmp_28*tmp_3 - tmp_41) + tmp_35*(3*tmp_3*tmp_33 - tmp_41) + tmp_40*(3*tmp_3*tmp_38 - tmp_41);
      real_t a_2_0 = tmp_20*(3*tmp_18*tmp_3 - tmp_42) + tmp_25*(3*tmp_24*tmp_3 - tmp_42) + tmp_30*(3*tmp_29*tmp_3 - tmp_42) + tmp_35*(3*tmp_3*tmp_34 - tmp_42) + tmp_40*(3*tmp_3*tmp_39 - tmp_42);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g1_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id20 = 0;
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id0 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id1 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id2 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id3 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id4 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id5 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id6 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id7 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id8 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id9 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id10 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id11 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id12 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id13 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id14 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id15 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id16 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id17 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id18 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id19 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id20 );
      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_45 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_46 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g1_out0_id0*tmp_45;
      real_t tmp_47 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_48 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_49 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_50 = tmp_26*tmp_47 + tmp_30*tmp_48 + tmp_34*tmp_49;
      real_t tmp_51 = tmp_36*tmp_47 + tmp_37*tmp_48 + tmp_38*tmp_49;
      real_t tmp_52 = tmp_40*tmp_47 + tmp_41*tmp_48 + tmp_42*tmp_49;
      real_t tmp_53 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g1_out0_id1*tmp_45;
      real_t tmp_54 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_55 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_56 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_57 = tmp_26*tmp_54 + tmp_30*tmp_55 + tmp_34*tmp_56;
      real_t tmp_58 = tmp_36*tmp_54 + tmp_37*tmp_55 + tmp_38*tmp_56;
      real_t tmp_59 = tmp_40*tmp_54 + tmp_41*tmp_55 + tmp_42*tmp_56;
      real_t tmp_60 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id10*tmp_45;
      real_t tmp_61 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_62 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_63 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_64 = tmp_26*tmp_61 + tmp_30*tmp_62 + tmp_34*tmp_63;
      real_t tmp_65 = tmp_36*tmp_61 + tmp_37*tmp_62 + tmp_38*tmp_63;
      real_t tmp_66 = tmp_40*tmp_61 + tmp_41*tmp_62 + tmp_42*tmp_63;
      real_t tmp_67 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id11*tmp_45;
      real_t tmp_68 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_69 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_70 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_71 = tmp_26*tmp_68 + tmp_30*tmp_69 + tmp_34*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g1_out0_id12*tmp_45;
      real_t tmp_75 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_76 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_77 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_78 = tmp_26*tmp_75 + tmp_30*tmp_76 + tmp_34*tmp_77;
      real_t tmp_79 = tmp_36*tmp_75 + tmp_37*tmp_76 + tmp_38*tmp_77;
      real_t tmp_80 = tmp_40*tmp_75 + tmp_41*tmp_76 + tmp_42*tmp_77;
      real_t tmp_81 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id13*tmp_45;
      real_t tmp_82 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_83 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_84 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_85 = tmp_26*tmp_82 + tmp_30*tmp_83 + tmp_34*tmp_84;
      real_t tmp_86 = tmp_36*tmp_82 + tmp_37*tmp_83 + tmp_38*tmp_84;
      real_t tmp_87 = tmp_40*tmp_82 + tmp_41*tmp_83 + tmp_42*tmp_84;
      real_t tmp_88 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g1_out0_id14*tmp_45;
      real_t tmp_89 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_90 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_91 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g1_out0_id15*tmp_45;
      real_t tmp_96 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_97 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_98 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_99 = tmp_26*tmp_96 + tmp_30*tmp_97 + tmp_34*tmp_98;
      real_t tmp_100 = tmp_36*tmp_96 + tmp_37*tmp_97 + tmp_38*tmp_98;
      real_t tmp_101 = tmp_40*tmp_96 + tmp_41*tmp_97 + tmp_42*tmp_98;
      real_t tmp_102 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g1_out0_id16*tmp_45;
      real_t tmp_103 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_104 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_105 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_106 = tmp_103*tmp_26 + tmp_104*tmp_30 + tmp_105*tmp_34;
      real_t tmp_107 = tmp_103*tmp_36 + tmp_104*tmp_37 + tmp_105*tmp_38;
      real_t tmp_108 = tmp_103*tmp_40 + tmp_104*tmp_41 + tmp_105*tmp_42;
      real_t tmp_109 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g1_out0_id17*tmp_45;
      real_t tmp_110 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_111 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_112 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_113 = tmp_110*tmp_26 + tmp_111*tmp_30 + tmp_112*tmp_34;
      real_t tmp_114 = tmp_110*tmp_36 + tmp_111*tmp_37 + tmp_112*tmp_38;
      real_t tmp_115 = tmp_110*tmp_40 + tmp_111*tmp_41 + tmp_112*tmp_42;
      real_t tmp_116 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g1_out0_id18*tmp_45;
      real_t tmp_117 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_118 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_119 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_120 = tmp_117*tmp_26 + tmp_118*tmp_30 + tmp_119*tmp_34;
      real_t tmp_121 = tmp_117*tmp_36 + tmp_118*tmp_37 + tmp_119*tmp_38;
      real_t tmp_122 = tmp_117*tmp_40 + tmp_118*tmp_41 + tmp_119*tmp_42;
      real_t tmp_123 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g1_out0_id19*tmp_45;
      real_t tmp_124 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_125 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_126 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_127 = tmp_124*tmp_26 + tmp_125*tmp_30 + tmp_126*tmp_34;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id2*tmp_45;
      real_t tmp_131 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_132 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_133 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_134 = tmp_131*tmp_26 + tmp_132*tmp_30 + tmp_133*tmp_34;
      real_t tmp_135 = tmp_131*tmp_36 + tmp_132*tmp_37 + tmp_133*tmp_38;
      real_t tmp_136 = tmp_131*tmp_40 + tmp_132*tmp_41 + tmp_133*tmp_42;
      real_t tmp_137 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id20*tmp_45;
      real_t tmp_138 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_139 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_140 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_141 = tmp_138*tmp_26 + tmp_139*tmp_30 + tmp_140*tmp_34;
      real_t tmp_142 = tmp_138*tmp_36 + tmp_139*tmp_37 + tmp_140*tmp_38;
      real_t tmp_143 = tmp_138*tmp_40 + tmp_139*tmp_41 + tmp_140*tmp_42;
      real_t tmp_144 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id3*tmp_45;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id4*tmp_45;
      real_t tmp_152 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_153 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_154 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_155 = tmp_152*tmp_26 + tmp_153*tmp_30 + tmp_154*tmp_34;
      real_t tmp_156 = tmp_152*tmp_36 + tmp_153*tmp_37 + tmp_154*tmp_38;
      real_t tmp_157 = tmp_152*tmp_40 + tmp_153*tmp_41 + tmp_154*tmp_42;
      real_t tmp_158 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id5*tmp_45;
      real_t tmp_159 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_160 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_161 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_162 = tmp_159*tmp_26 + tmp_160*tmp_30 + tmp_161*tmp_34;
      real_t tmp_163 = tmp_159*tmp_36 + tmp_160*tmp_37 + tmp_161*tmp_38;
      real_t tmp_164 = tmp_159*tmp_40 + tmp_160*tmp_41 + tmp_161*tmp_42;
      real_t tmp_165 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id6*tmp_45;
      real_t tmp_166 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_167 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_168 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_169 = tmp_166*tmp_26 + tmp_167*tmp_30 + tmp_168*tmp_34;
      real_t tmp_170 = tmp_166*tmp_36 + tmp_167*tmp_37 + tmp_168*tmp_38;
      real_t tmp_171 = tmp_166*tmp_40 + tmp_167*tmp_41 + tmp_168*tmp_42;
      real_t tmp_172 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id7*tmp_45;
      real_t tmp_173 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_174 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_175 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_176 = tmp_173*tmp_26 + tmp_174*tmp_30 + tmp_175*tmp_34;
      real_t tmp_177 = tmp_173*tmp_36 + tmp_174*tmp_37 + tmp_175*tmp_38;
      real_t tmp_178 = tmp_173*tmp_40 + tmp_174*tmp_41 + tmp_175*tmp_42;
      real_t tmp_179 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g1_out0_id8*tmp_45;
      real_t tmp_180 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_181 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_182 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_183 = tmp_180*tmp_26 + tmp_181*tmp_30 + tmp_182*tmp_34;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g1_out0_id9*tmp_45;
      real_t tmp_187 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_188 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_189 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t a_0_0 = tmp_102*(-tmp_44 + 3.0*tmp_7*(-tmp_100 - tmp_101 - tmp_99 + 1)) + tmp_109*(-tmp_44 + 3.0*tmp_7*(-tmp_106 - tmp_107 - tmp_108 + 1)) + tmp_116*(-tmp_44 + 3.0*tmp_7*(-tmp_113 - tmp_114 - tmp_115 + 1)) + tmp_123*(-tmp_44 + 3.0*tmp_7*(-tmp_120 - tmp_121 - tmp_122 + 1)) + tmp_130*(-tmp_44 + 3.0*tmp_7*(-tmp_127 - tmp_128 - tmp_129 + 1)) + tmp_137*(-tmp_44 + 3.0*tmp_7*(-tmp_134 - tmp_135 - tmp_136 + 1)) + tmp_144*(-tmp_44 + 3.0*tmp_7*(-tmp_141 - tmp_142 - tmp_143 + 1)) + tmp_151*(-tmp_44 + 3.0*tmp_7*(-tmp_148 - tmp_149 - tmp_150 + 1)) + tmp_158*(-tmp_44 + 3.0*tmp_7*(-tmp_155 - tmp_156 - tmp_157 + 1)) + tmp_165*(-tmp_44 + 3.0*tmp_7*(-tmp_162 - tmp_163 - tmp_164 + 1)) + tmp_172*(-tmp_44 + 3.0*tmp_7*(-tmp_169 - tmp_170 - tmp_171 + 1)) + tmp_179*(-tmp_44 + 3.0*tmp_7*(-tmp_176 - tmp_177 - tmp_178 + 1)) + tmp_186*(-tmp_44 + 3.0*tmp_7*(-tmp_183 - tmp_184 - tmp_185 + 1)) + tmp_46*(-tmp_44 + 3.0*tmp_7*(-tmp_35 - tmp_39 - tmp_43 + 1)) + tmp_53*(-tmp_44 + 3.0*tmp_7*(-tmp_50 - tmp_51 - tmp_52 + 1)) + tmp_60*(-tmp_44 + 3.0*tmp_7*(-tmp_57 - tmp_58 - tmp_59 + 1)) + tmp_67*(-tmp_44 + 3.0*tmp_7*(-tmp_64 - tmp_65 - tmp_66 + 1)) + tmp_74*(-tmp_44 + 3.0*tmp_7*(-tmp_71 - tmp_72 - tmp_73 + 1)) + tmp_81*(-tmp_44 + 3.0*tmp_7*(-tmp_78 - tmp_79 - tmp_80 + 1)) + tmp_88*(-tmp_44 + 3.0*tmp_7*(-tmp_85 - tmp_86 - tmp_87 + 1)) + tmp_95*(-tmp_44 + 3.0*tmp_7*(-tmp_92 - tmp_93 - tmp_94 + 1));
      real_t a_1_0 = tmp_102*(-tmp_187 + 3.0*tmp_7*tmp_99) + tmp_109*(3.0*tmp_106*tmp_7 - tmp_187) + tmp_116*(3.0*tmp_113*tmp_7 - tmp_187) + tmp_123*(3.0*tmp_120*tmp_7 - tmp_187) + tmp_130*(3.0*tmp_127*tmp_7 - tmp_187) + tmp_137*(3.0*tmp_134*tmp_7 - tmp_187) + tmp_144*(3.0*tmp_141*tmp_7 - tmp_187) + tmp_151*(3.0*tmp_148*tmp_7 - tmp_187) + tmp_158*(3.0*tmp_155*tmp_7 - tmp_187) + tmp_165*(3.0*tmp_162*tmp_7 - tmp_187) + tmp_172*(3.0*tmp_169*tmp_7 - tmp_187) + tmp_179*(3.0*tmp_176*tmp_7 - tmp_187) + tmp_186*(3.0*tmp_183*tmp_7 - tmp_187) + tmp_46*(-tmp_187 + 3.0*tmp_35*tmp_7) + tmp_53*(-tmp_187 + 3.0*tmp_50*tmp_7) + tmp_60*(-tmp_187 + 3.0*tmp_57*tmp_7) + tmp_67*(-tmp_187 + 3.0*tmp_64*tmp_7) + tmp_74*(-tmp_187 + 3.0*tmp_7*tmp_71) + tmp_81*(-tmp_187 + 3.0*tmp_7*tmp_78) + tmp_88*(-tmp_187 + 3.0*tmp_7*tmp_85) + tmp_95*(-tmp_187 + 3.0*tmp_7*tmp_92);
      real_t a_2_0 = tmp_102*(3.0*tmp_100*tmp_7 - tmp_188) + tmp_109*(3.0*tmp_107*tmp_7 - tmp_188) + tmp_116*(3.0*tmp_114*tmp_7 - tmp_188) + tmp_123*(3.0*tmp_121*tmp_7 - tmp_188) + tmp_130*(3.0*tmp_128*tmp_7 - tmp_188) + tmp_137*(3.0*tmp_135*tmp_7 - tmp_188) + tmp_144*(3.0*tmp_142*tmp_7 - tmp_188) + tmp_151*(3.0*tmp_149*tmp_7 - tmp_188) + tmp_158*(3.0*tmp_156*tmp_7 - tmp_188) + tmp_165*(3.0*tmp_163*tmp_7 - tmp_188) + tmp_172*(3.0*tmp_170*tmp_7 - tmp_188) + tmp_179*(3.0*tmp_177*tmp_7 - tmp_188) + tmp_186*(3.0*tmp_184*tmp_7 - tmp_188) + tmp_46*(-tmp_188 + 3.0*tmp_39*tmp_7) + tmp_53*(-tmp_188 + 3.0*tmp_51*tmp_7) + tmp_60*(-tmp_188 + 3.0*tmp_58*tmp_7) + tmp_67*(-tmp_188 + 3.0*tmp_65*tmp_7) + tmp_74*(-tmp_188 + 3.0*tmp_7*tmp_72) + tmp_81*(-tmp_188 + 3.0*tmp_7*tmp_79) + tmp_88*(-tmp_188 + 3.0*tmp_7*tmp_86) + tmp_95*(-tmp_188 + 3.0*tmp_7*tmp_93);
      real_t a_3_0 = tmp_102*(3.0*tmp_101*tmp_7 - tmp_189) + tmp_109*(3.0*tmp_108*tmp_7 - tmp_189) + tmp_116*(3.0*tmp_115*tmp_7 - tmp_189) + tmp_123*(3.0*tmp_122*tmp_7 - tmp_189) + tmp_130*(3.0*tmp_129*tmp_7 - tmp_189) + tmp_137*(3.0*tmp_136*tmp_7 - tmp_189) + tmp_144*(3.0*tmp_143*tmp_7 - tmp_189) + tmp_151*(3.0*tmp_150*tmp_7 - tmp_189) + tmp_158*(3.0*tmp_157*tmp_7 - tmp_189) + tmp_165*(3.0*tmp_164*tmp_7 - tmp_189) + tmp_172*(3.0*tmp_171*tmp_7 - tmp_189) + tmp_179*(3.0*tmp_178*tmp_7 - tmp_189) + tmp_186*(3.0*tmp_185*tmp_7 - tmp_189) + tmp_46*(-tmp_189 + 3.0*tmp_43*tmp_7) + tmp_53*(-tmp_189 + 3.0*tmp_52*tmp_7) + tmp_60*(-tmp_189 + 3.0*tmp_59*tmp_7) + tmp_67*(-tmp_189 + 3.0*tmp_66*tmp_7) + tmp_74*(-tmp_189 + 3.0*tmp_7*tmp_73) + tmp_81*(-tmp_189 + 3.0*tmp_7*tmp_80) + tmp_88*(-tmp_189 + 3.0*tmp_7*tmp_87) + tmp_95*(-tmp_189 + 3.0*tmp_7*tmp_94);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_10 - tmp_14;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_24 = tmp_16*tmp_23;
      real_t tmp_25 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = -tmp_24 - tmp_26 - tmp_28;
      real_t tmp_30 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_31 = tmp_16*tmp_30;
      real_t tmp_32 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_33 = tmp_16*tmp_32;
      real_t tmp_34 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_35 = tmp_16*tmp_34;
      real_t tmp_36 = -tmp_31 - tmp_33 - tmp_35;
      real_t tmp_37 = p_affine_0_0*p_affine_1_1;
      real_t tmp_38 = p_affine_0_0*p_affine_1_2;
      real_t tmp_39 = p_affine_2_1*p_affine_3_2;
      real_t tmp_40 = p_affine_0_1*p_affine_1_0;
      real_t tmp_41 = p_affine_0_1*p_affine_1_2;
      real_t tmp_42 = p_affine_2_2*p_affine_3_0;
      real_t tmp_43 = p_affine_0_2*p_affine_1_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_1;
      real_t tmp_45 = p_affine_2_0*p_affine_3_1;
      real_t tmp_46 = p_affine_2_2*p_affine_3_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_0;
      real_t tmp_49 = std::abs(p_affine_0_0*tmp_39 - p_affine_0_0*tmp_46 + p_affine_0_1*tmp_42 - p_affine_0_1*tmp_47 + p_affine_0_2*tmp_45 - p_affine_0_2*tmp_48 - p_affine_1_0*tmp_39 + p_affine_1_0*tmp_46 - p_affine_1_1*tmp_42 + p_affine_1_1*tmp_47 - p_affine_1_2*tmp_45 + p_affine_1_2*tmp_48 + p_affine_2_0*tmp_41 - p_affine_2_0*tmp_44 - p_affine_2_1*tmp_38 + p_affine_2_1*tmp_43 + p_affine_2_2*tmp_37 - p_affine_2_2*tmp_40 - p_affine_3_0*tmp_41 + p_affine_3_0*tmp_44 + p_affine_3_1*tmp_38 - p_affine_3_1*tmp_43 - p_affine_3_2*tmp_37 + p_affine_3_2*tmp_40);
      real_t tmp_50 = tmp_49*((tmp_22*tmp_22) + (tmp_29*tmp_29) + (tmp_36*tmp_36));
      real_t tmp_51 = tmp_49*(tmp_21*tmp_22 + tmp_28*tmp_29 + tmp_35*tmp_36);
      real_t tmp_52 = 0.1666666666666668*tmp_51;
      real_t tmp_53 = tmp_49*(tmp_19*tmp_22 + tmp_26*tmp_29 + tmp_33*tmp_36);
      real_t tmp_54 = 0.1666666666666668*tmp_53;
      real_t tmp_55 = tmp_49*(tmp_17*tmp_22 + tmp_24*tmp_29 + tmp_31*tmp_36);
      real_t tmp_56 = 0.1666666666666668*tmp_55;
      real_t tmp_57 = 1.0 / (tmp_15*tmp_15);
      real_t tmp_58 = tmp_49*((tmp_20*tmp_20)*tmp_57 + (tmp_27*tmp_27)*tmp_57 + (tmp_34*tmp_34)*tmp_57);
      real_t tmp_59 = tmp_20*tmp_57;
      real_t tmp_60 = tmp_27*tmp_57;
      real_t tmp_61 = tmp_34*tmp_57;
      real_t tmp_62 = tmp_49*(tmp_18*tmp_59 + tmp_25*tmp_60 + tmp_32*tmp_61);
      real_t tmp_63 = 0.1666666666666668*tmp_62;
      real_t tmp_64 = tmp_49*(tmp_23*tmp_60 + tmp_30*tmp_61 + tmp_59*tmp_6);
      real_t tmp_65 = 0.1666666666666668*tmp_64;
      real_t tmp_66 = tmp_49*((tmp_18*tmp_18)*tmp_57 + (tmp_25*tmp_25)*tmp_57 + (tmp_32*tmp_32)*tmp_57);
      real_t tmp_67 = tmp_49*(tmp_18*tmp_57*tmp_6 + tmp_23*tmp_25*tmp_57 + tmp_30*tmp_32*tmp_57);
      real_t tmp_68 = 0.1666666666666668*tmp_67;
      real_t tmp_69 = tmp_49*((tmp_23*tmp_23)*tmp_57 + (tmp_30*tmp_30)*tmp_57 + tmp_57*(tmp_6*tmp_6));
      real_t a_0_0 = 0.1666666666666668*tmp_50;
      real_t a_0_1 = tmp_52;
      real_t a_0_2 = tmp_54;
      real_t a_0_3 = tmp_56;
      real_t a_1_0 = tmp_52;
      real_t a_1_1 = 0.1666666666666668*tmp_58;
      real_t a_1_2 = tmp_63;
      real_t a_1_3 = tmp_65;
      real_t a_2_0 = tmp_54;
      real_t a_2_1 = tmp_63;
      real_t a_2_2 = 0.1666666666666668*tmp_66;
      real_t a_2_3 = tmp_68;
      real_t a_3_0 = tmp_56;
      real_t a_3_1 = tmp_65;
      real_t a_3_2 = tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_16 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_16;
      real_t tmp_23 = tmp_11*tmp_19;
      real_t tmp_24 = tmp_13*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 + tmp_13*tmp_21 - tmp_14*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_23 - tmp_20*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_15 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_12*tmp_20 + tmp_14*tmp_15);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(tmp_13*tmp_19 - tmp_22);
      real_t tmp_37 = tmp_25*(tmp_15*tmp_16 - tmp_24);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_15*tmp_19);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(tmp_17 - tmp_23);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_16*tmp_20);
      real_t tmp_42 = tmp_25*(-tmp_14*tmp_18 + tmp_21);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 1.0*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = 0.5*tmp_45;
      real_t tmp_210 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_211 = 0.5*tmp_210;
      real_t tmp_212 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_209 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_209 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_209 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_209 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_209 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_209 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_209 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_209 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_209 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_209 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_209 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_209 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_209 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_209 - tmp_207*tmp_211) + tmp_48*(-tmp_209*tmp_35 - tmp_211*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_52 - tmp_211*tmp_55 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_60 - tmp_211*tmp_63 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_68 - tmp_211*tmp_71 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_76 - tmp_211*tmp_79 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_84 - tmp_211*tmp_87 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_92 - tmp_211*tmp_95 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_214 = 0.5*tmp_213;
      real_t tmp_215 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_209 - tmp_103*tmp_214) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_209 - tmp_111*tmp_214) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_209 - tmp_119*tmp_214) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_209 - tmp_127*tmp_214) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_209 - tmp_135*tmp_214) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_209 - tmp_143*tmp_214) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_209 - tmp_151*tmp_214) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_209 - tmp_159*tmp_214) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_209 - tmp_167*tmp_214) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_209 - tmp_175*tmp_214) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_209 - tmp_183*tmp_214) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_209 - tmp_191*tmp_214) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_209 - tmp_199*tmp_214) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_209 - tmp_207*tmp_214) + tmp_48*(-tmp_209*tmp_39 - tmp_214*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_214*tmp_55 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_214*tmp_63 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_214*tmp_71 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_77 - tmp_214*tmp_79 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_209*tmp_85 - tmp_214*tmp_87 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_209*tmp_93 - tmp_214*tmp_95 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_216 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_217 = 0.5*tmp_216;
      real_t tmp_218 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_209 - tmp_103*tmp_217) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_209 - tmp_111*tmp_217) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_209 - tmp_119*tmp_217) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_209 - tmp_127*tmp_217) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_209 - tmp_135*tmp_217) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_209 - tmp_143*tmp_217) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_209 - tmp_151*tmp_217) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_209 - tmp_159*tmp_217) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_209 - tmp_167*tmp_217) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_209 - tmp_175*tmp_217) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_209 - tmp_183*tmp_217) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_209 - tmp_191*tmp_217) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_209 - tmp_199*tmp_217) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_209 - tmp_207*tmp_217) + tmp_48*(-tmp_209*tmp_43 - tmp_217*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_217*tmp_55 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_217*tmp_63 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_217*tmp_71 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_209*tmp_78 - tmp_217*tmp_79 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_209*tmp_86 - tmp_217*tmp_87 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_209*tmp_94 - tmp_217*tmp_95 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_219 = 1.0*tmp_210;
      real_t tmp_220 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_214 - tmp_101*tmp_211) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_214 - tmp_109*tmp_211) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_214 - tmp_117*tmp_211) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_214 - tmp_125*tmp_211) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_214 - tmp_133*tmp_211) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_214 - tmp_141*tmp_211) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_214 - tmp_149*tmp_211) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_214 - tmp_157*tmp_211) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_214 - tmp_165*tmp_211) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_214 - tmp_173*tmp_211) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_214 - tmp_181*tmp_211) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_214 - tmp_189*tmp_211) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_214 - tmp_197*tmp_211) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_214 - tmp_205*tmp_211) + tmp_48*(-tmp_211*tmp_39 - tmp_214*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_211*tmp_53 - tmp_214*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_211*tmp_61 - tmp_214*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_211*tmp_69 - tmp_214*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_211*tmp_77 - tmp_214*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_211*tmp_85 - tmp_214*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_211*tmp_93 - tmp_214*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_221 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_217 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_217 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_217 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_217 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_217 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_217 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_217 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_217 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_217 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_217 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_217 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_217 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_217 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_217 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_217*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_217*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_217*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_217*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_217*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_217*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_217*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_222 = 1.0*tmp_213;
      real_t tmp_223 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_217 - tmp_102*tmp_214) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_217 - tmp_110*tmp_214) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_217 - tmp_118*tmp_214) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_217 - tmp_126*tmp_214) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_217 - tmp_134*tmp_214) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_217 - tmp_142*tmp_214) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_217 - tmp_150*tmp_214) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_217 - tmp_158*tmp_214) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_217 - tmp_166*tmp_214) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_217 - tmp_174*tmp_214) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_217 - tmp_182*tmp_214) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_217 - tmp_190*tmp_214) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_217 - tmp_198*tmp_214) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_217 - tmp_206*tmp_214) + tmp_48*(-tmp_214*tmp_43 - tmp_217*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_214*tmp_54 - tmp_217*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_214*tmp_62 - tmp_217*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_214*tmp_70 - tmp_217*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_214*tmp_78 - tmp_217*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_214*tmp_86 - tmp_217*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_214*tmp_94 - tmp_217*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_224 = 1.0*tmp_216;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_212;
      real_t a_0_2 = tmp_215;
      real_t a_0_3 = tmp_218;
      real_t a_1_0 = tmp_212;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_219) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_219) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_219) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_219) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_219) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_219) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_219) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_219) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_219) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_219) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_219) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_219) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_219) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_219) + tmp_48*(-tmp_219*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_219*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_219*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_219*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_219*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_219*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_219*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_220;
      real_t a_1_3 = tmp_221;
      real_t a_2_0 = tmp_215;
      real_t a_2_1 = tmp_220;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_222) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_222) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_222) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_222) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_222) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_222) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_222) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_222) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_222) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_222) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_222) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_222) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_222) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_222) + tmp_48*(-tmp_222*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_222*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_222*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_222*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_222*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_222*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_222*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_223;
      real_t a_3_0 = tmp_218;
      real_t a_3_1 = tmp_221;
      real_t a_3_2 = tmp_223;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_224) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_224) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_224) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_224) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_224) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_224) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_224) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_224) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_224) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_224) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_224) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_224) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_224) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_224) + tmp_48*(-tmp_224*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_224*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_224*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_224*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_224*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_224*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_224*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_26 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_27 = -tmp_26;
      real_t tmp_28 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_27 + 0.93718850182767688*tmp_28;
      real_t tmp_30 = tmp_25 + tmp_29;
      real_t tmp_31 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_32 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_33 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_34 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_35 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_36 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_39 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_40 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_41 = tmp_39*tmp_40;
      real_t tmp_42 = tmp_32*tmp_36;
      real_t tmp_43 = tmp_31*tmp_39;
      real_t tmp_44 = tmp_33*tmp_38;
      real_t tmp_45 = 1.0 / (tmp_31*tmp_32*tmp_38 + tmp_33*tmp_41 - tmp_34*tmp_44 + tmp_35*tmp_37 - tmp_35*tmp_43 - tmp_40*tmp_42);
      real_t tmp_46 = tmp_45*(tmp_31*tmp_32 - tmp_33*tmp_34);
      real_t tmp_47 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_48 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_49 = -tmp_48;
      real_t tmp_50 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_51 = 0.031405749086161582*tmp_49 + 0.93718850182767688*tmp_50;
      real_t tmp_52 = tmp_47 + tmp_51;
      real_t tmp_53 = tmp_45*(-tmp_31*tmp_35 + tmp_33*tmp_40);
      real_t tmp_54 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_55 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_56 = -tmp_55;
      real_t tmp_57 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_58 = 0.031405749086161582*tmp_56 + 0.93718850182767688*tmp_57;
      real_t tmp_59 = tmp_54 + tmp_58;
      real_t tmp_60 = tmp_45*(-tmp_32*tmp_40 + tmp_34*tmp_35);
      real_t tmp_61 = tmp_30*tmp_46 + tmp_52*tmp_53 + tmp_59*tmp_60;
      real_t tmp_62 = tmp_45*(tmp_33*tmp_39 - tmp_42);
      real_t tmp_63 = tmp_45*(tmp_35*tmp_36 - tmp_44);
      real_t tmp_64 = tmp_45*(tmp_32*tmp_38 - tmp_35*tmp_39);
      real_t tmp_65 = tmp_30*tmp_62 + tmp_52*tmp_63 + tmp_59*tmp_64;
      real_t tmp_66 = tmp_45*(tmp_37 - tmp_43);
      real_t tmp_67 = tmp_45*(tmp_31*tmp_38 - tmp_36*tmp_40);
      real_t tmp_68 = tmp_45*(-tmp_34*tmp_38 + tmp_41);
      real_t tmp_69 = tmp_30*tmp_66 + tmp_52*tmp_67 + tmp_59*tmp_68;
      real_t tmp_70 = -tmp_61 - tmp_65 - tmp_69 + 1;
      real_t tmp_71 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_72 = tmp_29 + tmp_71;
      real_t tmp_73 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_74 = tmp_51 + tmp_73;
      real_t tmp_75 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_76 = tmp_58 + tmp_75;
      real_t tmp_77 = tmp_17*tmp_76 + tmp_20*tmp_74 + tmp_23*tmp_72;
      real_t tmp_78 = tmp_16*tmp_76 + tmp_19*tmp_74 + tmp_22*tmp_72;
      real_t tmp_79 = tmp_15*tmp_76 + tmp_18*tmp_74 + tmp_21*tmp_72;
      real_t tmp_80 = -tmp_77 - tmp_78 - tmp_79 + 1;
      real_t tmp_81 = 0.5*p_affine_13_0*(-tmp_60 - tmp_64 - tmp_68) + 0.5*p_affine_13_1*(-tmp_53 - tmp_63 - tmp_67) + 0.5*p_affine_13_2*(-tmp_46 - tmp_62 - tmp_66);
      real_t tmp_82 = (std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)*std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)) + (std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)*std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)) + (std::abs(tmp_48*tmp_57 - tmp_50*tmp_55)*std::abs(tmp_48*tmp_57 - tmp_50*tmp_55));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_80*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_27 + 0.60796128279561268*tmp_28;
      real_t tmp_88 = tmp_25 + tmp_87;
      real_t tmp_89 = 0.19601935860219369*tmp_49 + 0.60796128279561268*tmp_50;
      real_t tmp_90 = tmp_47 + tmp_89;
      real_t tmp_91 = 0.19601935860219369*tmp_56 + 0.60796128279561268*tmp_57;
      real_t tmp_92 = tmp_54 + tmp_91;
      real_t tmp_93 = tmp_46*tmp_88 + tmp_53*tmp_90 + tmp_60*tmp_92;
      real_t tmp_94 = tmp_62*tmp_88 + tmp_63*tmp_90 + tmp_64*tmp_92;
      real_t tmp_95 = tmp_66*tmp_88 + tmp_67*tmp_90 + tmp_68*tmp_92;
      real_t tmp_96 = -tmp_93 - tmp_94 - tmp_95 + 1;
      real_t tmp_97 = tmp_71 + tmp_87;
      real_t tmp_98 = tmp_73 + tmp_89;
      real_t tmp_99 = tmp_75 + tmp_91;
      real_t tmp_100 = tmp_17*tmp_99 + tmp_20*tmp_98 + tmp_23*tmp_97;
      real_t tmp_101 = tmp_16*tmp_99 + tmp_19*tmp_98 + tmp_22*tmp_97;
      real_t tmp_102 = tmp_15*tmp_99 + tmp_18*tmp_98 + tmp_21*tmp_97;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = tmp_103*tmp_83;
      real_t tmp_105 = 0.037198804536718075*tmp_85;
      real_t tmp_106 = 0.37605877282253791*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_107 = tmp_106 + tmp_25;
      real_t tmp_108 = 0.37605877282253791*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_109 = tmp_108 + tmp_47;
      real_t tmp_110 = 0.37605877282253791*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_111 = tmp_110 + tmp_54;
      real_t tmp_112 = tmp_107*tmp_46 + tmp_109*tmp_53 + tmp_111*tmp_60;
      real_t tmp_113 = tmp_107*tmp_62 + tmp_109*tmp_63 + tmp_111*tmp_64;
      real_t tmp_114 = tmp_107*tmp_66 + tmp_109*tmp_67 + tmp_111*tmp_68;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = tmp_106 + tmp_71;
      real_t tmp_117 = tmp_108 + tmp_73;
      real_t tmp_118 = tmp_110 + tmp_75;
      real_t tmp_119 = tmp_116*tmp_23 + tmp_117*tmp_20 + tmp_118*tmp_17;
      real_t tmp_120 = tmp_116*tmp_22 + tmp_117*tmp_19 + tmp_118*tmp_16;
      real_t tmp_121 = tmp_116*tmp_21 + tmp_117*tmp_18 + tmp_118*tmp_15;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = tmp_122*tmp_83;
      real_t tmp_124 = 0.020848748529055869*tmp_85;
      real_t tmp_125 = 0.78764240869137092*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_126 = tmp_125 + tmp_25;
      real_t tmp_127 = 0.78764240869137092*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_128 = tmp_127 + tmp_47;
      real_t tmp_129 = 0.78764240869137092*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_130 = tmp_129 + tmp_54;
      real_t tmp_131 = tmp_126*tmp_46 + tmp_128*tmp_53 + tmp_130*tmp_60;
      real_t tmp_132 = tmp_126*tmp_62 + tmp_128*tmp_63 + tmp_130*tmp_64;
      real_t tmp_133 = tmp_126*tmp_66 + tmp_128*tmp_67 + tmp_130*tmp_68;
      real_t tmp_134 = -tmp_131 - tmp_132 - tmp_133 + 1;
      real_t tmp_135 = tmp_125 + tmp_71;
      real_t tmp_136 = tmp_127 + tmp_73;
      real_t tmp_137 = tmp_129 + tmp_75;
      real_t tmp_138 = tmp_135*tmp_23 + tmp_136*tmp_20 + tmp_137*tmp_17;
      real_t tmp_139 = tmp_135*tmp_22 + tmp_136*tmp_19 + tmp_137*tmp_16;
      real_t tmp_140 = tmp_135*tmp_21 + tmp_136*tmp_18 + tmp_137*tmp_15;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = tmp_141*tmp_83;
      real_t tmp_143 = 0.019202922745021479*tmp_85;
      real_t tmp_144 = 0.58463275527740355*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_145 = tmp_144 + tmp_25;
      real_t tmp_146 = 0.58463275527740355*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_147 = tmp_146 + tmp_47;
      real_t tmp_148 = 0.58463275527740355*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_149 = tmp_148 + tmp_54;
      real_t tmp_150 = tmp_145*tmp_46 + tmp_147*tmp_53 + tmp_149*tmp_60;
      real_t tmp_151 = tmp_145*tmp_62 + tmp_147*tmp_63 + tmp_149*tmp_64;
      real_t tmp_152 = tmp_145*tmp_66 + tmp_147*tmp_67 + tmp_149*tmp_68;
      real_t tmp_153 = -tmp_150 - tmp_151 - tmp_152 + 1;
      real_t tmp_154 = tmp_144 + tmp_71;
      real_t tmp_155 = tmp_146 + tmp_73;
      real_t tmp_156 = tmp_148 + tmp_75;
      real_t tmp_157 = tmp_154*tmp_23 + tmp_155*tmp_20 + tmp_156*tmp_17;
      real_t tmp_158 = tmp_154*tmp_22 + tmp_155*tmp_19 + tmp_156*tmp_16;
      real_t tmp_159 = tmp_15*tmp_156 + tmp_154*tmp_21 + tmp_155*tmp_18;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = tmp_160*tmp_83;
      real_t tmp_162 = 0.020848748529055869*tmp_85;
      real_t tmp_163 = 0.041227165399737475*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_164 = tmp_163 + tmp_25;
      real_t tmp_165 = 0.041227165399737475*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_166 = tmp_165 + tmp_47;
      real_t tmp_167 = 0.041227165399737475*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_168 = tmp_167 + tmp_54;
      real_t tmp_169 = tmp_164*tmp_46 + tmp_166*tmp_53 + tmp_168*tmp_60;
      real_t tmp_170 = tmp_164*tmp_62 + tmp_166*tmp_63 + tmp_168*tmp_64;
      real_t tmp_171 = tmp_164*tmp_66 + tmp_166*tmp_67 + tmp_168*tmp_68;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_163 + tmp_71;
      real_t tmp_174 = tmp_165 + tmp_73;
      real_t tmp_175 = tmp_167 + tmp_75;
      real_t tmp_176 = tmp_17*tmp_175 + tmp_173*tmp_23 + tmp_174*tmp_20;
      real_t tmp_177 = tmp_16*tmp_175 + tmp_173*tmp_22 + tmp_174*tmp_19;
      real_t tmp_178 = tmp_15*tmp_175 + tmp_173*tmp_21 + tmp_174*tmp_18;
      real_t tmp_179 = -tmp_176 - tmp_177 - tmp_178 + 1;
      real_t tmp_180 = tmp_179*tmp_83;
      real_t tmp_181 = 0.019202922745021479*tmp_85;
      real_t tmp_182 = 0.039308471900058539*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_183 = tmp_182 + tmp_25;
      real_t tmp_184 = 0.039308471900058539*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_185 = tmp_184 + tmp_47;
      real_t tmp_186 = 0.039308471900058539*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_187 = tmp_186 + tmp_54;
      real_t tmp_188 = tmp_183*tmp_46 + tmp_185*tmp_53 + tmp_187*tmp_60;
      real_t tmp_189 = tmp_183*tmp_62 + tmp_185*tmp_63 + tmp_187*tmp_64;
      real_t tmp_190 = tmp_183*tmp_66 + tmp_185*tmp_67 + tmp_187*tmp_68;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = tmp_182 + tmp_71;
      real_t tmp_193 = tmp_184 + tmp_73;
      real_t tmp_194 = tmp_186 + tmp_75;
      real_t tmp_195 = tmp_17*tmp_194 + tmp_192*tmp_23 + tmp_193*tmp_20;
      real_t tmp_196 = tmp_16*tmp_194 + tmp_19*tmp_193 + tmp_192*tmp_22;
      real_t tmp_197 = tmp_15*tmp_194 + tmp_18*tmp_193 + tmp_192*tmp_21;
      real_t tmp_198 = -tmp_195 - tmp_196 - tmp_197 + 1;
      real_t tmp_199 = tmp_198*tmp_83;
      real_t tmp_200 = 0.020848748529055869*tmp_85;
      real_t tmp_201 = 0.78764240869137092*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_202 = tmp_201 + tmp_25;
      real_t tmp_203 = 0.78764240869137092*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_204 = tmp_203 + tmp_47;
      real_t tmp_205 = 0.78764240869137092*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_206 = tmp_205 + tmp_54;
      real_t tmp_207 = tmp_202*tmp_46 + tmp_204*tmp_53 + tmp_206*tmp_60;
      real_t tmp_208 = tmp_202*tmp_62 + tmp_204*tmp_63 + tmp_206*tmp_64;
      real_t tmp_209 = tmp_202*tmp_66 + tmp_204*tmp_67 + tmp_206*tmp_68;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = tmp_201 + tmp_71;
      real_t tmp_212 = tmp_203 + tmp_73;
      real_t tmp_213 = tmp_205 + tmp_75;
      real_t tmp_214 = tmp_17*tmp_213 + tmp_20*tmp_212 + tmp_211*tmp_23;
      real_t tmp_215 = tmp_16*tmp_213 + tmp_19*tmp_212 + tmp_211*tmp_22;
      real_t tmp_216 = tmp_15*tmp_213 + tmp_18*tmp_212 + tmp_21*tmp_211;
      real_t tmp_217 = -tmp_214 - tmp_215 - tmp_216 + 1;
      real_t tmp_218 = tmp_217*tmp_83;
      real_t tmp_219 = 0.019202922745021479*tmp_85;
      real_t tmp_220 = 0.58463275527740355*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_221 = tmp_220 + tmp_25;
      real_t tmp_222 = 0.58463275527740355*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_223 = tmp_222 + tmp_47;
      real_t tmp_224 = 0.58463275527740355*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_225 = tmp_224 + tmp_54;
      real_t tmp_226 = tmp_221*tmp_46 + tmp_223*tmp_53 + tmp_225*tmp_60;
      real_t tmp_227 = tmp_221*tmp_62 + tmp_223*tmp_63 + tmp_225*tmp_64;
      real_t tmp_228 = tmp_221*tmp_66 + tmp_223*tmp_67 + tmp_225*tmp_68;
      real_t tmp_229 = -tmp_226 - tmp_227 - tmp_228 + 1;
      real_t tmp_230 = tmp_220 + tmp_71;
      real_t tmp_231 = tmp_222 + tmp_73;
      real_t tmp_232 = tmp_224 + tmp_75;
      real_t tmp_233 = tmp_17*tmp_232 + tmp_20*tmp_231 + tmp_23*tmp_230;
      real_t tmp_234 = tmp_16*tmp_232 + tmp_19*tmp_231 + tmp_22*tmp_230;
      real_t tmp_235 = tmp_15*tmp_232 + tmp_18*tmp_231 + tmp_21*tmp_230;
      real_t tmp_236 = -tmp_233 - tmp_234 - tmp_235 + 1;
      real_t tmp_237 = tmp_236*tmp_83;
      real_t tmp_238 = 0.020848748529055869*tmp_85;
      real_t tmp_239 = 0.1711304259088916*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_240 = tmp_239 + tmp_25;
      real_t tmp_241 = 0.1711304259088916*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_242 = tmp_241 + tmp_47;
      real_t tmp_243 = 0.1711304259088916*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_244 = tmp_243 + tmp_54;
      real_t tmp_245 = tmp_240*tmp_46 + tmp_242*tmp_53 + tmp_244*tmp_60;
      real_t tmp_246 = tmp_240*tmp_62 + tmp_242*tmp_63 + tmp_244*tmp_64;
      real_t tmp_247 = tmp_240*tmp_66 + tmp_242*tmp_67 + tmp_244*tmp_68;
      real_t tmp_248 = -tmp_245 - tmp_246 - tmp_247 + 1;
      real_t tmp_249 = tmp_239 + tmp_71;
      real_t tmp_250 = tmp_241 + tmp_73;
      real_t tmp_251 = tmp_243 + tmp_75;
      real_t tmp_252 = tmp_17*tmp_251 + tmp_20*tmp_250 + tmp_23*tmp_249;
      real_t tmp_253 = tmp_16*tmp_251 + tmp_19*tmp_250 + tmp_22*tmp_249;
      real_t tmp_254 = tmp_15*tmp_251 + tmp_18*tmp_250 + tmp_21*tmp_249;
      real_t tmp_255 = -tmp_252 - tmp_253 - tmp_254 + 1;
      real_t tmp_256 = tmp_255*tmp_83;
      real_t tmp_257 = 0.019202922745021479*tmp_85;
      real_t tmp_258 = 0.37605877282253791*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_259 = tmp_25 + tmp_258;
      real_t tmp_260 = 0.37605877282253791*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_261 = tmp_260 + tmp_47;
      real_t tmp_262 = 0.37605877282253791*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_263 = tmp_262 + tmp_54;
      real_t tmp_264 = tmp_259*tmp_46 + tmp_261*tmp_53 + tmp_263*tmp_60;
      real_t tmp_265 = tmp_259*tmp_62 + tmp_261*tmp_63 + tmp_263*tmp_64;
      real_t tmp_266 = tmp_259*tmp_66 + tmp_261*tmp_67 + tmp_263*tmp_68;
      real_t tmp_267 = -tmp_264 - tmp_265 - tmp_266 + 1;
      real_t tmp_268 = tmp_258 + tmp_71;
      real_t tmp_269 = tmp_260 + tmp_73;
      real_t tmp_270 = tmp_262 + tmp_75;
      real_t tmp_271 = tmp_17*tmp_270 + tmp_20*tmp_269 + tmp_23*tmp_268;
      real_t tmp_272 = tmp_16*tmp_270 + tmp_19*tmp_269 + tmp_22*tmp_268;
      real_t tmp_273 = tmp_15*tmp_270 + tmp_18*tmp_269 + tmp_21*tmp_268;
      real_t tmp_274 = -tmp_271 - tmp_272 - tmp_273 + 1;
      real_t tmp_275 = tmp_274*tmp_83;
      real_t tmp_276 = 0.020848748529055869*tmp_85;
      real_t tmp_277 = 0.041227165399737475*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_278 = tmp_25 + tmp_277;
      real_t tmp_279 = 0.041227165399737475*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_280 = tmp_279 + tmp_47;
      real_t tmp_281 = 0.041227165399737475*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_282 = tmp_281 + tmp_54;
      real_t tmp_283 = tmp_278*tmp_46 + tmp_280*tmp_53 + tmp_282*tmp_60;
      real_t tmp_284 = tmp_278*tmp_62 + tmp_280*tmp_63 + tmp_282*tmp_64;
      real_t tmp_285 = tmp_278*tmp_66 + tmp_280*tmp_67 + tmp_282*tmp_68;
      real_t tmp_286 = -tmp_283 - tmp_284 - tmp_285 + 1;
      real_t tmp_287 = tmp_277 + tmp_71;
      real_t tmp_288 = tmp_279 + tmp_73;
      real_t tmp_289 = tmp_281 + tmp_75;
      real_t tmp_290 = tmp_17*tmp_289 + tmp_20*tmp_288 + tmp_23*tmp_287;
      real_t tmp_291 = tmp_16*tmp_289 + tmp_19*tmp_288 + tmp_22*tmp_287;
      real_t tmp_292 = tmp_15*tmp_289 + tmp_18*tmp_288 + tmp_21*tmp_287;
      real_t tmp_293 = -tmp_290 - tmp_291 - tmp_292 + 1;
      real_t tmp_294 = tmp_293*tmp_83;
      real_t tmp_295 = 0.019202922745021479*tmp_85;
      real_t tmp_296 = 0.40446199974765351*tmp_27 + 0.19107600050469298*tmp_28;
      real_t tmp_297 = tmp_25 + tmp_296;
      real_t tmp_298 = 0.40446199974765351*tmp_49 + 0.19107600050469298*tmp_50;
      real_t tmp_299 = tmp_298 + tmp_47;
      real_t tmp_300 = 0.40446199974765351*tmp_56 + 0.19107600050469298*tmp_57;
      real_t tmp_301 = tmp_300 + tmp_54;
      real_t tmp_302 = tmp_297*tmp_46 + tmp_299*tmp_53 + tmp_301*tmp_60;
      real_t tmp_303 = tmp_297*tmp_62 + tmp_299*tmp_63 + tmp_301*tmp_64;
      real_t tmp_304 = tmp_297*tmp_66 + tmp_299*tmp_67 + tmp_301*tmp_68;
      real_t tmp_305 = -tmp_302 - tmp_303 - tmp_304 + 1;
      real_t tmp_306 = tmp_296 + tmp_71;
      real_t tmp_307 = tmp_298 + tmp_73;
      real_t tmp_308 = tmp_300 + tmp_75;
      real_t tmp_309 = tmp_17*tmp_308 + tmp_20*tmp_307 + tmp_23*tmp_306;
      real_t tmp_310 = tmp_16*tmp_308 + tmp_19*tmp_307 + tmp_22*tmp_306;
      real_t tmp_311 = tmp_15*tmp_308 + tmp_18*tmp_307 + tmp_21*tmp_306;
      real_t tmp_312 = -tmp_309 - tmp_310 - tmp_311 + 1;
      real_t tmp_313 = tmp_312*tmp_83;
      real_t tmp_314 = 0.042507265838595799*tmp_85;
      real_t tmp_315 = 0.039308471900058539*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_316 = tmp_25 + tmp_315;
      real_t tmp_317 = 0.039308471900058539*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_318 = tmp_317 + tmp_47;
      real_t tmp_319 = 0.039308471900058539*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_320 = tmp_319 + tmp_54;
      real_t tmp_321 = tmp_316*tmp_46 + tmp_318*tmp_53 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_316*tmp_62 + tmp_318*tmp_63 + tmp_320*tmp_64;
      real_t tmp_323 = tmp_316*tmp_66 + tmp_318*tmp_67 + tmp_320*tmp_68;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_315 + tmp_71;
      real_t tmp_326 = tmp_317 + tmp_73;
      real_t tmp_327 = tmp_319 + tmp_75;
      real_t tmp_328 = tmp_17*tmp_327 + tmp_20*tmp_326 + tmp_23*tmp_325;
      real_t tmp_329 = tmp_16*tmp_327 + tmp_19*tmp_326 + tmp_22*tmp_325;
      real_t tmp_330 = tmp_15*tmp_327 + tmp_18*tmp_326 + tmp_21*tmp_325;
      real_t tmp_331 = -tmp_328 - tmp_329 - tmp_330 + 1;
      real_t tmp_332 = tmp_331*tmp_83;
      real_t tmp_333 = 0.020848748529055869*tmp_85;
      real_t tmp_334 = 0.93718850182767688*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_335 = tmp_25 + tmp_334;
      real_t tmp_336 = 0.93718850182767688*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_337 = tmp_336 + tmp_47;
      real_t tmp_338 = 0.93718850182767688*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_339 = tmp_338 + tmp_54;
      real_t tmp_340 = tmp_335*tmp_46 + tmp_337*tmp_53 + tmp_339*tmp_60;
      real_t tmp_341 = tmp_335*tmp_62 + tmp_337*tmp_63 + tmp_339*tmp_64;
      real_t tmp_342 = tmp_335*tmp_66 + tmp_337*tmp_67 + tmp_339*tmp_68;
      real_t tmp_343 = -tmp_340 - tmp_341 - tmp_342 + 1;
      real_t tmp_344 = tmp_334 + tmp_71;
      real_t tmp_345 = tmp_336 + tmp_73;
      real_t tmp_346 = tmp_338 + tmp_75;
      real_t tmp_347 = tmp_17*tmp_346 + tmp_20*tmp_345 + tmp_23*tmp_344;
      real_t tmp_348 = tmp_16*tmp_346 + tmp_19*tmp_345 + tmp_22*tmp_344;
      real_t tmp_349 = tmp_15*tmp_346 + tmp_18*tmp_345 + tmp_21*tmp_344;
      real_t tmp_350 = -tmp_347 - tmp_348 - tmp_349 + 1;
      real_t tmp_351 = tmp_350*tmp_83;
      real_t tmp_352 = 0.0068572537431980923*tmp_85;
      real_t tmp_353 = 0.60796128279561268*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_354 = tmp_25 + tmp_353;
      real_t tmp_355 = 0.60796128279561268*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_356 = tmp_355 + tmp_47;
      real_t tmp_357 = 0.60796128279561268*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_358 = tmp_357 + tmp_54;
      real_t tmp_359 = tmp_354*tmp_46 + tmp_356*tmp_53 + tmp_358*tmp_60;
      real_t tmp_360 = tmp_354*tmp_62 + tmp_356*tmp_63 + tmp_358*tmp_64;
      real_t tmp_361 = tmp_354*tmp_66 + tmp_356*tmp_67 + tmp_358*tmp_68;
      real_t tmp_362 = -tmp_359 - tmp_360 - tmp_361 + 1;
      real_t tmp_363 = tmp_353 + tmp_71;
      real_t tmp_364 = tmp_355 + tmp_73;
      real_t tmp_365 = tmp_357 + tmp_75;
      real_t tmp_366 = tmp_17*tmp_365 + tmp_20*tmp_364 + tmp_23*tmp_363;
      real_t tmp_367 = tmp_16*tmp_365 + tmp_19*tmp_364 + tmp_22*tmp_363;
      real_t tmp_368 = tmp_15*tmp_365 + tmp_18*tmp_364 + tmp_21*tmp_363;
      real_t tmp_369 = -tmp_366 - tmp_367 - tmp_368 + 1;
      real_t tmp_370 = tmp_369*tmp_83;
      real_t tmp_371 = 0.037198804536718075*tmp_85;
      real_t tmp_372 = 0.19107600050469298*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_373 = tmp_25 + tmp_372;
      real_t tmp_374 = 0.19107600050469298*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_375 = tmp_374 + tmp_47;
      real_t tmp_376 = 0.19107600050469298*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_377 = tmp_376 + tmp_54;
      real_t tmp_378 = tmp_373*tmp_46 + tmp_375*tmp_53 + tmp_377*tmp_60;
      real_t tmp_379 = tmp_373*tmp_62 + tmp_375*tmp_63 + tmp_377*tmp_64;
      real_t tmp_380 = tmp_373*tmp_66 + tmp_375*tmp_67 + tmp_377*tmp_68;
      real_t tmp_381 = -tmp_378 - tmp_379 - tmp_380 + 1;
      real_t tmp_382 = tmp_372 + tmp_71;
      real_t tmp_383 = tmp_374 + tmp_73;
      real_t tmp_384 = tmp_376 + tmp_75;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_388*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.031405749086161582*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_392 = tmp_25 + tmp_391;
      real_t tmp_393 = 0.031405749086161582*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_394 = tmp_393 + tmp_47;
      real_t tmp_395 = 0.031405749086161582*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_396 = tmp_395 + tmp_54;
      real_t tmp_397 = tmp_392*tmp_46 + tmp_394*tmp_53 + tmp_396*tmp_60;
      real_t tmp_398 = tmp_392*tmp_62 + tmp_394*tmp_63 + tmp_396*tmp_64;
      real_t tmp_399 = tmp_392*tmp_66 + tmp_394*tmp_67 + tmp_396*tmp_68;
      real_t tmp_400 = -tmp_397 - tmp_398 - tmp_399 + 1;
      real_t tmp_401 = tmp_391 + tmp_71;
      real_t tmp_402 = tmp_393 + tmp_73;
      real_t tmp_403 = tmp_395 + tmp_75;
      real_t tmp_404 = tmp_17*tmp_403 + tmp_20*tmp_402 + tmp_23*tmp_401;
      real_t tmp_405 = tmp_16*tmp_403 + tmp_19*tmp_402 + tmp_22*tmp_401;
      real_t tmp_406 = tmp_15*tmp_403 + tmp_18*tmp_402 + tmp_21*tmp_401;
      real_t tmp_407 = -tmp_404 - tmp_405 - tmp_406 + 1;
      real_t tmp_408 = tmp_407*tmp_83;
      real_t tmp_409 = 0.0068572537431980923*tmp_85;
      real_t tmp_410 = 0.19601935860219369*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_411 = tmp_25 + tmp_410;
      real_t tmp_412 = 0.19601935860219369*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_413 = tmp_412 + tmp_47;
      real_t tmp_414 = 0.19601935860219369*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_415 = tmp_414 + tmp_54;
      real_t tmp_416 = tmp_411*tmp_46 + tmp_413*tmp_53 + tmp_415*tmp_60;
      real_t tmp_417 = tmp_411*tmp_62 + tmp_413*tmp_63 + tmp_415*tmp_64;
      real_t tmp_418 = tmp_411*tmp_66 + tmp_413*tmp_67 + tmp_415*tmp_68;
      real_t tmp_419 = -tmp_416 - tmp_417 - tmp_418 + 1;
      real_t tmp_420 = tmp_410 + tmp_71;
      real_t tmp_421 = tmp_412 + tmp_73;
      real_t tmp_422 = tmp_414 + tmp_75;
      real_t tmp_423 = tmp_17*tmp_422 + tmp_20*tmp_421 + tmp_23*tmp_420;
      real_t tmp_424 = tmp_16*tmp_422 + tmp_19*tmp_421 + tmp_22*tmp_420;
      real_t tmp_425 = tmp_15*tmp_422 + tmp_18*tmp_421 + tmp_21*tmp_420;
      real_t tmp_426 = -tmp_423 - tmp_424 - tmp_425 + 1;
      real_t tmp_427 = tmp_426*tmp_83;
      real_t tmp_428 = 0.037198804536718075*tmp_85;
      real_t tmp_429 = 0.40446199974765351*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_430 = tmp_25 + tmp_429;
      real_t tmp_431 = 0.40446199974765351*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_432 = tmp_431 + tmp_47;
      real_t tmp_433 = 0.40446199974765351*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_434 = tmp_433 + tmp_54;
      real_t tmp_435 = tmp_430*tmp_46 + tmp_432*tmp_53 + tmp_434*tmp_60;
      real_t tmp_436 = tmp_430*tmp_62 + tmp_432*tmp_63 + tmp_434*tmp_64;
      real_t tmp_437 = tmp_430*tmp_66 + tmp_432*tmp_67 + tmp_434*tmp_68;
      real_t tmp_438 = -tmp_435 - tmp_436 - tmp_437 + 1;
      real_t tmp_439 = tmp_429 + tmp_71;
      real_t tmp_440 = tmp_431 + tmp_73;
      real_t tmp_441 = tmp_433 + tmp_75;
      real_t tmp_442 = tmp_17*tmp_441 + tmp_20*tmp_440 + tmp_23*tmp_439;
      real_t tmp_443 = tmp_16*tmp_441 + tmp_19*tmp_440 + tmp_22*tmp_439;
      real_t tmp_444 = tmp_15*tmp_441 + tmp_18*tmp_440 + tmp_21*tmp_439;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_445*tmp_83;
      real_t tmp_447 = 0.042507265838595799*tmp_85;
      real_t tmp_448 = 0.1711304259088916*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_449 = tmp_25 + tmp_448;
      real_t tmp_450 = 0.1711304259088916*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_451 = tmp_450 + tmp_47;
      real_t tmp_452 = 0.1711304259088916*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_453 = tmp_452 + tmp_54;
      real_t tmp_454 = tmp_449*tmp_46 + tmp_451*tmp_53 + tmp_453*tmp_60;
      real_t tmp_455 = tmp_449*tmp_62 + tmp_451*tmp_63 + tmp_453*tmp_64;
      real_t tmp_456 = tmp_449*tmp_66 + tmp_451*tmp_67 + tmp_453*tmp_68;
      real_t tmp_457 = -tmp_454 - tmp_455 - tmp_456 + 1;
      real_t tmp_458 = tmp_448 + tmp_71;
      real_t tmp_459 = tmp_450 + tmp_73;
      real_t tmp_460 = tmp_452 + tmp_75;
      real_t tmp_461 = tmp_17*tmp_460 + tmp_20*tmp_459 + tmp_23*tmp_458;
      real_t tmp_462 = tmp_16*tmp_460 + tmp_19*tmp_459 + tmp_22*tmp_458;
      real_t tmp_463 = tmp_15*tmp_460 + tmp_18*tmp_459 + tmp_21*tmp_458;
      real_t tmp_464 = -tmp_461 - tmp_462 - tmp_463 + 1;
      real_t tmp_465 = tmp_464*tmp_83;
      real_t tmp_466 = 0.019202922745021479*tmp_85;
      real_t tmp_467 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_53 + 0.5*p_affine_13_2*tmp_46;
      real_t tmp_468 = 0.5*p_affine_13_0*tmp_64 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_62;
      real_t tmp_469 = 0.5*p_affine_13_0*tmp_68 + 0.5*p_affine_13_1*tmp_67 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_470 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_471 = tmp_77*tmp_83;
      real_t tmp_472 = tmp_100*tmp_83;
      real_t tmp_473 = tmp_119*tmp_83;
      real_t tmp_474 = tmp_138*tmp_83;
      real_t tmp_475 = tmp_157*tmp_83;
      real_t tmp_476 = tmp_176*tmp_83;
      real_t tmp_477 = tmp_195*tmp_83;
      real_t tmp_478 = tmp_214*tmp_83;
      real_t tmp_479 = tmp_233*tmp_83;
      real_t tmp_480 = tmp_252*tmp_83;
      real_t tmp_481 = tmp_271*tmp_83;
      real_t tmp_482 = tmp_290*tmp_83;
      real_t tmp_483 = tmp_309*tmp_83;
      real_t tmp_484 = tmp_328*tmp_83;
      real_t tmp_485 = tmp_347*tmp_83;
      real_t tmp_486 = tmp_366*tmp_83;
      real_t tmp_487 = tmp_385*tmp_83;
      real_t tmp_488 = tmp_404*tmp_83;
      real_t tmp_489 = tmp_423*tmp_83;
      real_t tmp_490 = tmp_442*tmp_83;
      real_t tmp_491 = tmp_461*tmp_83;
      real_t tmp_492 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_493 = tmp_78*tmp_83;
      real_t tmp_494 = tmp_101*tmp_83;
      real_t tmp_495 = tmp_120*tmp_83;
      real_t tmp_496 = tmp_139*tmp_83;
      real_t tmp_497 = tmp_158*tmp_83;
      real_t tmp_498 = tmp_177*tmp_83;
      real_t tmp_499 = tmp_196*tmp_83;
      real_t tmp_500 = tmp_215*tmp_83;
      real_t tmp_501 = tmp_234*tmp_83;
      real_t tmp_502 = tmp_253*tmp_83;
      real_t tmp_503 = tmp_272*tmp_83;
      real_t tmp_504 = tmp_291*tmp_83;
      real_t tmp_505 = tmp_310*tmp_83;
      real_t tmp_506 = tmp_329*tmp_83;
      real_t tmp_507 = tmp_348*tmp_83;
      real_t tmp_508 = tmp_367*tmp_83;
      real_t tmp_509 = tmp_386*tmp_83;
      real_t tmp_510 = tmp_405*tmp_83;
      real_t tmp_511 = tmp_424*tmp_83;
      real_t tmp_512 = tmp_443*tmp_83;
      real_t tmp_513 = tmp_462*tmp_83;
      real_t tmp_514 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t tmp_515 = tmp_79*tmp_83;
      real_t tmp_516 = tmp_102*tmp_83;
      real_t tmp_517 = tmp_121*tmp_83;
      real_t tmp_518 = tmp_140*tmp_83;
      real_t tmp_519 = tmp_159*tmp_83;
      real_t tmp_520 = tmp_178*tmp_83;
      real_t tmp_521 = tmp_197*tmp_83;
      real_t tmp_522 = tmp_216*tmp_83;
      real_t tmp_523 = tmp_235*tmp_83;
      real_t tmp_524 = tmp_254*tmp_83;
      real_t tmp_525 = tmp_273*tmp_83;
      real_t tmp_526 = tmp_292*tmp_83;
      real_t tmp_527 = tmp_311*tmp_83;
      real_t tmp_528 = tmp_330*tmp_83;
      real_t tmp_529 = tmp_349*tmp_83;
      real_t tmp_530 = tmp_368*tmp_83;
      real_t tmp_531 = tmp_387*tmp_83;
      real_t tmp_532 = tmp_406*tmp_83;
      real_t tmp_533 = tmp_425*tmp_83;
      real_t tmp_534 = tmp_444*tmp_83;
      real_t tmp_535 = tmp_463*tmp_83;
      real_t a_0_0 = tmp_105*(-tmp_103*tmp_81 - tmp_104*tmp_96 + 0.5*tmp_24*tmp_96) + tmp_124*(-tmp_115*tmp_123 + 0.5*tmp_115*tmp_24 - tmp_122*tmp_81) + tmp_143*(-tmp_134*tmp_142 + 0.5*tmp_134*tmp_24 - tmp_141*tmp_81) + tmp_162*(-tmp_153*tmp_161 + 0.5*tmp_153*tmp_24 - tmp_160*tmp_81) + tmp_181*(-tmp_172*tmp_180 + 0.5*tmp_172*tmp_24 - tmp_179*tmp_81) + tmp_200*(-tmp_191*tmp_199 + 0.5*tmp_191*tmp_24 - tmp_198*tmp_81) + tmp_219*(-tmp_210*tmp_218 + 0.5*tmp_210*tmp_24 - tmp_217*tmp_81) + tmp_238*(-tmp_229*tmp_237 + 0.5*tmp_229*tmp_24 - tmp_236*tmp_81) + tmp_257*(0.5*tmp_24*tmp_248 - tmp_248*tmp_256 - tmp_255*tmp_81) + tmp_276*(0.5*tmp_24*tmp_267 - tmp_267*tmp_275 - tmp_274*tmp_81) + tmp_295*(0.5*tmp_24*tmp_286 - tmp_286*tmp_294 - tmp_293*tmp_81) + tmp_314*(0.5*tmp_24*tmp_305 - tmp_305*tmp_313 - tmp_312*tmp_81) + tmp_333*(0.5*tmp_24*tmp_324 - tmp_324*tmp_332 - tmp_331*tmp_81) + tmp_352*(0.5*tmp_24*tmp_343 - tmp_343*tmp_351 - tmp_350*tmp_81) + tmp_371*(0.5*tmp_24*tmp_362 - tmp_362*tmp_370 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_381*tmp_389 - tmp_388*tmp_81) + tmp_409*(0.5*tmp_24*tmp_400 - tmp_400*tmp_408 - tmp_407*tmp_81) + tmp_428*(0.5*tmp_24*tmp_419 - tmp_419*tmp_427 - tmp_426*tmp_81) + tmp_447*(0.5*tmp_24*tmp_438 - tmp_438*tmp_446 - tmp_445*tmp_81) + tmp_466*(0.5*tmp_24*tmp_457 - tmp_457*tmp_465 - tmp_464*tmp_81) + tmp_86*(0.5*tmp_24*tmp_70 - tmp_70*tmp_84 - tmp_80*tmp_81);
      real_t a_0_1 = tmp_105*(-tmp_103*tmp_467 - tmp_104*tmp_93 + 0.5*tmp_24*tmp_93) + tmp_124*(-tmp_112*tmp_123 + 0.5*tmp_112*tmp_24 - tmp_122*tmp_467) + tmp_143*(-tmp_131*tmp_142 + 0.5*tmp_131*tmp_24 - tmp_141*tmp_467) + tmp_162*(-tmp_150*tmp_161 + 0.5*tmp_150*tmp_24 - tmp_160*tmp_467) + tmp_181*(-tmp_169*tmp_180 + 0.5*tmp_169*tmp_24 - tmp_179*tmp_467) + tmp_200*(-tmp_188*tmp_199 + 0.5*tmp_188*tmp_24 - tmp_198*tmp_467) + tmp_219*(-tmp_207*tmp_218 + 0.5*tmp_207*tmp_24 - tmp_217*tmp_467) + tmp_238*(-tmp_226*tmp_237 + 0.5*tmp_226*tmp_24 - tmp_236*tmp_467) + tmp_257*(0.5*tmp_24*tmp_245 - tmp_245*tmp_256 - tmp_255*tmp_467) + tmp_276*(0.5*tmp_24*tmp_264 - tmp_264*tmp_275 - tmp_274*tmp_467) + tmp_295*(0.5*tmp_24*tmp_283 - tmp_283*tmp_294 - tmp_293*tmp_467) + tmp_314*(0.5*tmp_24*tmp_302 - tmp_302*tmp_313 - tmp_312*tmp_467) + tmp_333*(0.5*tmp_24*tmp_321 - tmp_321*tmp_332 - tmp_331*tmp_467) + tmp_352*(0.5*tmp_24*tmp_340 - tmp_340*tmp_351 - tmp_350*tmp_467) + tmp_371*(0.5*tmp_24*tmp_359 - tmp_359*tmp_370 - tmp_369*tmp_467) + tmp_390*(0.5*tmp_24*tmp_378 - tmp_378*tmp_389 - tmp_388*tmp_467) + tmp_409*(0.5*tmp_24*tmp_397 - tmp_397*tmp_408 - tmp_407*tmp_467) + tmp_428*(0.5*tmp_24*tmp_416 - tmp_416*tmp_427 - tmp_426*tmp_467) + tmp_447*(0.5*tmp_24*tmp_435 - tmp_435*tmp_446 - tmp_445*tmp_467) + tmp_466*(0.5*tmp_24*tmp_454 - tmp_454*tmp_465 - tmp_464*tmp_467) + tmp_86*(0.5*tmp_24*tmp_61 - tmp_467*tmp_80 - tmp_61*tmp_84);
      real_t a_0_2 = tmp_105*(-tmp_103*tmp_468 - tmp_104*tmp_94 + 0.5*tmp_24*tmp_94) + tmp_124*(-tmp_113*tmp_123 + 0.5*tmp_113*tmp_24 - tmp_122*tmp_468) + tmp_143*(-tmp_132*tmp_142 + 0.5*tmp_132*tmp_24 - tmp_141*tmp_468) + tmp_162*(-tmp_151*tmp_161 + 0.5*tmp_151*tmp_24 - tmp_160*tmp_468) + tmp_181*(-tmp_170*tmp_180 + 0.5*tmp_170*tmp_24 - tmp_179*tmp_468) + tmp_200*(-tmp_189*tmp_199 + 0.5*tmp_189*tmp_24 - tmp_198*tmp_468) + tmp_219*(-tmp_208*tmp_218 + 0.5*tmp_208*tmp_24 - tmp_217*tmp_468) + tmp_238*(-tmp_227*tmp_237 + 0.5*tmp_227*tmp_24 - tmp_236*tmp_468) + tmp_257*(0.5*tmp_24*tmp_246 - tmp_246*tmp_256 - tmp_255*tmp_468) + tmp_276*(0.5*tmp_24*tmp_265 - tmp_265*tmp_275 - tmp_274*tmp_468) + tmp_295*(0.5*tmp_24*tmp_284 - tmp_284*tmp_294 - tmp_293*tmp_468) + tmp_314*(0.5*tmp_24*tmp_303 - tmp_303*tmp_313 - tmp_312*tmp_468) + tmp_333*(0.5*tmp_24*tmp_322 - tmp_322*tmp_332 - tmp_331*tmp_468) + tmp_352*(0.5*tmp_24*tmp_341 - tmp_341*tmp_351 - tmp_350*tmp_468) + tmp_371*(0.5*tmp_24*tmp_360 - tmp_360*tmp_370 - tmp_369*tmp_468) + tmp_390*(0.5*tmp_24*tmp_379 - tmp_379*tmp_389 - tmp_388*tmp_468) + tmp_409*(0.5*tmp_24*tmp_398 - tmp_398*tmp_408 - tmp_407*tmp_468) + tmp_428*(0.5*tmp_24*tmp_417 - tmp_417*tmp_427 - tmp_426*tmp_468) + tmp_447*(0.5*tmp_24*tmp_436 - tmp_436*tmp_446 - tmp_445*tmp_468) + tmp_466*(0.5*tmp_24*tmp_455 - tmp_455*tmp_465 - tmp_464*tmp_468) + tmp_86*(0.5*tmp_24*tmp_65 - tmp_468*tmp_80 - tmp_65*tmp_84);
      real_t a_0_3 = tmp_105*(-tmp_103*tmp_469 - tmp_104*tmp_95 + 0.5*tmp_24*tmp_95) + tmp_124*(-tmp_114*tmp_123 + 0.5*tmp_114*tmp_24 - tmp_122*tmp_469) + tmp_143*(-tmp_133*tmp_142 + 0.5*tmp_133*tmp_24 - tmp_141*tmp_469) + tmp_162*(-tmp_152*tmp_161 + 0.5*tmp_152*tmp_24 - tmp_160*tmp_469) + tmp_181*(-tmp_171*tmp_180 + 0.5*tmp_171*tmp_24 - tmp_179*tmp_469) + tmp_200*(-tmp_190*tmp_199 + 0.5*tmp_190*tmp_24 - tmp_198*tmp_469) + tmp_219*(-tmp_209*tmp_218 + 0.5*tmp_209*tmp_24 - tmp_217*tmp_469) + tmp_238*(-tmp_228*tmp_237 + 0.5*tmp_228*tmp_24 - tmp_236*tmp_469) + tmp_257*(0.5*tmp_24*tmp_247 - tmp_247*tmp_256 - tmp_255*tmp_469) + tmp_276*(0.5*tmp_24*tmp_266 - tmp_266*tmp_275 - tmp_274*tmp_469) + tmp_295*(0.5*tmp_24*tmp_285 - tmp_285*tmp_294 - tmp_293*tmp_469) + tmp_314*(0.5*tmp_24*tmp_304 - tmp_304*tmp_313 - tmp_312*tmp_469) + tmp_333*(0.5*tmp_24*tmp_323 - tmp_323*tmp_332 - tmp_331*tmp_469) + tmp_352*(0.5*tmp_24*tmp_342 - tmp_342*tmp_351 - tmp_350*tmp_469) + tmp_371*(0.5*tmp_24*tmp_361 - tmp_361*tmp_370 - tmp_369*tmp_469) + tmp_390*(0.5*tmp_24*tmp_380 - tmp_380*tmp_389 - tmp_388*tmp_469) + tmp_409*(0.5*tmp_24*tmp_399 - tmp_399*tmp_408 - tmp_407*tmp_469) + tmp_428*(0.5*tmp_24*tmp_418 - tmp_418*tmp_427 - tmp_426*tmp_469) + tmp_447*(0.5*tmp_24*tmp_437 - tmp_437*tmp_446 - tmp_445*tmp_469) + tmp_466*(0.5*tmp_24*tmp_456 - tmp_456*tmp_465 - tmp_464*tmp_469) + tmp_86*(0.5*tmp_24*tmp_69 - tmp_469*tmp_80 - tmp_69*tmp_84);
      real_t a_1_0 = tmp_105*(-tmp_100*tmp_81 + 0.5*tmp_470*tmp_96 - tmp_472*tmp_96) + tmp_124*(0.5*tmp_115*tmp_470 - tmp_115*tmp_473 - tmp_119*tmp_81) + tmp_143*(0.5*tmp_134*tmp_470 - tmp_134*tmp_474 - tmp_138*tmp_81) + tmp_162*(0.5*tmp_153*tmp_470 - tmp_153*tmp_475 - tmp_157*tmp_81) + tmp_181*(0.5*tmp_172*tmp_470 - tmp_172*tmp_476 - tmp_176*tmp_81) + tmp_200*(0.5*tmp_191*tmp_470 - tmp_191*tmp_477 - tmp_195*tmp_81) + tmp_219*(0.5*tmp_210*tmp_470 - tmp_210*tmp_478 - tmp_214*tmp_81) + tmp_238*(0.5*tmp_229*tmp_470 - tmp_229*tmp_479 - tmp_233*tmp_81) + tmp_257*(0.5*tmp_248*tmp_470 - tmp_248*tmp_480 - tmp_252*tmp_81) + tmp_276*(0.5*tmp_267*tmp_470 - tmp_267*tmp_481 - tmp_271*tmp_81) + tmp_295*(0.5*tmp_286*tmp_470 - tmp_286*tmp_482 - tmp_290*tmp_81) + tmp_314*(0.5*tmp_305*tmp_470 - tmp_305*tmp_483 - tmp_309*tmp_81) + tmp_333*(0.5*tmp_324*tmp_470 - tmp_324*tmp_484 - tmp_328*tmp_81) + tmp_352*(0.5*tmp_343*tmp_470 - tmp_343*tmp_485 - tmp_347*tmp_81) + tmp_371*(0.5*tmp_362*tmp_470 - tmp_362*tmp_486 - tmp_366*tmp_81) + tmp_390*(0.5*tmp_381*tmp_470 - tmp_381*tmp_487 - tmp_385*tmp_81) + tmp_409*(0.5*tmp_400*tmp_470 - tmp_400*tmp_488 - tmp_404*tmp_81) + tmp_428*(0.5*tmp_419*tmp_470 - tmp_419*tmp_489 - tmp_423*tmp_81) + tmp_447*(0.5*tmp_438*tmp_470 - tmp_438*tmp_490 - tmp_442*tmp_81) + tmp_466*(0.5*tmp_457*tmp_470 - tmp_457*tmp_491 - tmp_461*tmp_81) + tmp_86*(0.5*tmp_470*tmp_70 - tmp_471*tmp_70 - tmp_77*tmp_81);
      real_t a_1_1 = tmp_105*(-tmp_100*tmp_467 + 0.5*tmp_470*tmp_93 - tmp_472*tmp_93) + tmp_124*(0.5*tmp_112*tmp_470 - tmp_112*tmp_473 - tmp_119*tmp_467) + tmp_143*(0.5*tmp_131*tmp_470 - tmp_131*tmp_474 - tmp_138*tmp_467) + tmp_162*(0.5*tmp_150*tmp_470 - tmp_150*tmp_475 - tmp_157*tmp_467) + tmp_181*(0.5*tmp_169*tmp_470 - tmp_169*tmp_476 - tmp_176*tmp_467) + tmp_200*(0.5*tmp_188*tmp_470 - tmp_188*tmp_477 - tmp_195*tmp_467) + tmp_219*(0.5*tmp_207*tmp_470 - tmp_207*tmp_478 - tmp_214*tmp_467) + tmp_238*(0.5*tmp_226*tmp_470 - tmp_226*tmp_479 - tmp_233*tmp_467) + tmp_257*(0.5*tmp_245*tmp_470 - tmp_245*tmp_480 - tmp_252*tmp_467) + tmp_276*(0.5*tmp_264*tmp_470 - tmp_264*tmp_481 - tmp_271*tmp_467) + tmp_295*(0.5*tmp_283*tmp_470 - tmp_283*tmp_482 - tmp_290*tmp_467) + tmp_314*(0.5*tmp_302*tmp_470 - tmp_302*tmp_483 - tmp_309*tmp_467) + tmp_333*(0.5*tmp_321*tmp_470 - tmp_321*tmp_484 - tmp_328*tmp_467) + tmp_352*(0.5*tmp_340*tmp_470 - tmp_340*tmp_485 - tmp_347*tmp_467) + tmp_371*(0.5*tmp_359*tmp_470 - tmp_359*tmp_486 - tmp_366*tmp_467) + tmp_390*(0.5*tmp_378*tmp_470 - tmp_378*tmp_487 - tmp_385*tmp_467) + tmp_409*(0.5*tmp_397*tmp_470 - tmp_397*tmp_488 - tmp_404*tmp_467) + tmp_428*(0.5*tmp_416*tmp_470 - tmp_416*tmp_489 - tmp_423*tmp_467) + tmp_447*(0.5*tmp_435*tmp_470 - tmp_435*tmp_490 - tmp_442*tmp_467) + tmp_466*(0.5*tmp_454*tmp_470 - tmp_454*tmp_491 - tmp_461*tmp_467) + tmp_86*(-tmp_467*tmp_77 + 0.5*tmp_470*tmp_61 - tmp_471*tmp_61);
      real_t a_1_2 = tmp_105*(-tmp_100*tmp_468 + 0.5*tmp_470*tmp_94 - tmp_472*tmp_94) + tmp_124*(0.5*tmp_113*tmp_470 - tmp_113*tmp_473 - tmp_119*tmp_468) + tmp_143*(0.5*tmp_132*tmp_470 - tmp_132*tmp_474 - tmp_138*tmp_468) + tmp_162*(0.5*tmp_151*tmp_470 - tmp_151*tmp_475 - tmp_157*tmp_468) + tmp_181*(0.5*tmp_170*tmp_470 - tmp_170*tmp_476 - tmp_176*tmp_468) + tmp_200*(0.5*tmp_189*tmp_470 - tmp_189*tmp_477 - tmp_195*tmp_468) + tmp_219*(0.5*tmp_208*tmp_470 - tmp_208*tmp_478 - tmp_214*tmp_468) + tmp_238*(0.5*tmp_227*tmp_470 - tmp_227*tmp_479 - tmp_233*tmp_468) + tmp_257*(0.5*tmp_246*tmp_470 - tmp_246*tmp_480 - tmp_252*tmp_468) + tmp_276*(0.5*tmp_265*tmp_470 - tmp_265*tmp_481 - tmp_271*tmp_468) + tmp_295*(0.5*tmp_284*tmp_470 - tmp_284*tmp_482 - tmp_290*tmp_468) + tmp_314*(0.5*tmp_303*tmp_470 - tmp_303*tmp_483 - tmp_309*tmp_468) + tmp_333*(0.5*tmp_322*tmp_470 - tmp_322*tmp_484 - tmp_328*tmp_468) + tmp_352*(0.5*tmp_341*tmp_470 - tmp_341*tmp_485 - tmp_347*tmp_468) + tmp_371*(0.5*tmp_360*tmp_470 - tmp_360*tmp_486 - tmp_366*tmp_468) + tmp_390*(0.5*tmp_379*tmp_470 - tmp_379*tmp_487 - tmp_385*tmp_468) + tmp_409*(0.5*tmp_398*tmp_470 - tmp_398*tmp_488 - tmp_404*tmp_468) + tmp_428*(0.5*tmp_417*tmp_470 - tmp_417*tmp_489 - tmp_423*tmp_468) + tmp_447*(0.5*tmp_436*tmp_470 - tmp_436*tmp_490 - tmp_442*tmp_468) + tmp_466*(0.5*tmp_455*tmp_470 - tmp_455*tmp_491 - tmp_461*tmp_468) + tmp_86*(-tmp_468*tmp_77 + 0.5*tmp_470*tmp_65 - tmp_471*tmp_65);
      real_t a_1_3 = tmp_105*(-tmp_100*tmp_469 + 0.5*tmp_470*tmp_95 - tmp_472*tmp_95) + tmp_124*(0.5*tmp_114*tmp_470 - tmp_114*tmp_473 - tmp_119*tmp_469) + tmp_143*(0.5*tmp_133*tmp_470 - tmp_133*tmp_474 - tmp_138*tmp_469) + tmp_162*(0.5*tmp_152*tmp_470 - tmp_152*tmp_475 - tmp_157*tmp_469) + tmp_181*(0.5*tmp_171*tmp_470 - tmp_171*tmp_476 - tmp_176*tmp_469) + tmp_200*(0.5*tmp_190*tmp_470 - tmp_190*tmp_477 - tmp_195*tmp_469) + tmp_219*(0.5*tmp_209*tmp_470 - tmp_209*tmp_478 - tmp_214*tmp_469) + tmp_238*(0.5*tmp_228*tmp_470 - tmp_228*tmp_479 - tmp_233*tmp_469) + tmp_257*(0.5*tmp_247*tmp_470 - tmp_247*tmp_480 - tmp_252*tmp_469) + tmp_276*(0.5*tmp_266*tmp_470 - tmp_266*tmp_481 - tmp_271*tmp_469) + tmp_295*(0.5*tmp_285*tmp_470 - tmp_285*tmp_482 - tmp_290*tmp_469) + tmp_314*(0.5*tmp_304*tmp_470 - tmp_304*tmp_483 - tmp_309*tmp_469) + tmp_333*(0.5*tmp_323*tmp_470 - tmp_323*tmp_484 - tmp_328*tmp_469) + tmp_352*(0.5*tmp_342*tmp_470 - tmp_342*tmp_485 - tmp_347*tmp_469) + tmp_371*(0.5*tmp_361*tmp_470 - tmp_361*tmp_486 - tmp_366*tmp_469) + tmp_390*(0.5*tmp_380*tmp_470 - tmp_380*tmp_487 - tmp_385*tmp_469) + tmp_409*(0.5*tmp_399*tmp_470 - tmp_399*tmp_488 - tmp_404*tmp_469) + tmp_428*(0.5*tmp_418*tmp_470 - tmp_418*tmp_489 - tmp_423*tmp_469) + tmp_447*(0.5*tmp_437*tmp_470 - tmp_437*tmp_490 - tmp_442*tmp_469) + tmp_466*(0.5*tmp_456*tmp_470 - tmp_456*tmp_491 - tmp_461*tmp_469) + tmp_86*(-tmp_469*tmp_77 + 0.5*tmp_470*tmp_69 - tmp_471*tmp_69);
      real_t a_2_0 = tmp_105*(-tmp_101*tmp_81 + 0.5*tmp_492*tmp_96 - tmp_494*tmp_96) + tmp_124*(0.5*tmp_115*tmp_492 - tmp_115*tmp_495 - tmp_120*tmp_81) + tmp_143*(0.5*tmp_134*tmp_492 - tmp_134*tmp_496 - tmp_139*tmp_81) + tmp_162*(0.5*tmp_153*tmp_492 - tmp_153*tmp_497 - tmp_158*tmp_81) + tmp_181*(0.5*tmp_172*tmp_492 - tmp_172*tmp_498 - tmp_177*tmp_81) + tmp_200*(0.5*tmp_191*tmp_492 - tmp_191*tmp_499 - tmp_196*tmp_81) + tmp_219*(0.5*tmp_210*tmp_492 - tmp_210*tmp_500 - tmp_215*tmp_81) + tmp_238*(0.5*tmp_229*tmp_492 - tmp_229*tmp_501 - tmp_234*tmp_81) + tmp_257*(0.5*tmp_248*tmp_492 - tmp_248*tmp_502 - tmp_253*tmp_81) + tmp_276*(0.5*tmp_267*tmp_492 - tmp_267*tmp_503 - tmp_272*tmp_81) + tmp_295*(0.5*tmp_286*tmp_492 - tmp_286*tmp_504 - tmp_291*tmp_81) + tmp_314*(0.5*tmp_305*tmp_492 - tmp_305*tmp_505 - tmp_310*tmp_81) + tmp_333*(0.5*tmp_324*tmp_492 - tmp_324*tmp_506 - tmp_329*tmp_81) + tmp_352*(0.5*tmp_343*tmp_492 - tmp_343*tmp_507 - tmp_348*tmp_81) + tmp_371*(0.5*tmp_362*tmp_492 - tmp_362*tmp_508 - tmp_367*tmp_81) + tmp_390*(0.5*tmp_381*tmp_492 - tmp_381*tmp_509 - tmp_386*tmp_81) + tmp_409*(0.5*tmp_400*tmp_492 - tmp_400*tmp_510 - tmp_405*tmp_81) + tmp_428*(0.5*tmp_419*tmp_492 - tmp_419*tmp_511 - tmp_424*tmp_81) + tmp_447*(0.5*tmp_438*tmp_492 - tmp_438*tmp_512 - tmp_443*tmp_81) + tmp_466*(0.5*tmp_457*tmp_492 - tmp_457*tmp_513 - tmp_462*tmp_81) + tmp_86*(0.5*tmp_492*tmp_70 - tmp_493*tmp_70 - tmp_78*tmp_81);
      real_t a_2_1 = tmp_105*(-tmp_101*tmp_467 + 0.5*tmp_492*tmp_93 - tmp_494*tmp_93) + tmp_124*(0.5*tmp_112*tmp_492 - tmp_112*tmp_495 - tmp_120*tmp_467) + tmp_143*(0.5*tmp_131*tmp_492 - tmp_131*tmp_496 - tmp_139*tmp_467) + tmp_162*(0.5*tmp_150*tmp_492 - tmp_150*tmp_497 - tmp_158*tmp_467) + tmp_181*(0.5*tmp_169*tmp_492 - tmp_169*tmp_498 - tmp_177*tmp_467) + tmp_200*(0.5*tmp_188*tmp_492 - tmp_188*tmp_499 - tmp_196*tmp_467) + tmp_219*(0.5*tmp_207*tmp_492 - tmp_207*tmp_500 - tmp_215*tmp_467) + tmp_238*(0.5*tmp_226*tmp_492 - tmp_226*tmp_501 - tmp_234*tmp_467) + tmp_257*(0.5*tmp_245*tmp_492 - tmp_245*tmp_502 - tmp_253*tmp_467) + tmp_276*(0.5*tmp_264*tmp_492 - tmp_264*tmp_503 - tmp_272*tmp_467) + tmp_295*(0.5*tmp_283*tmp_492 - tmp_283*tmp_504 - tmp_291*tmp_467) + tmp_314*(0.5*tmp_302*tmp_492 - tmp_302*tmp_505 - tmp_310*tmp_467) + tmp_333*(0.5*tmp_321*tmp_492 - tmp_321*tmp_506 - tmp_329*tmp_467) + tmp_352*(0.5*tmp_340*tmp_492 - tmp_340*tmp_507 - tmp_348*tmp_467) + tmp_371*(0.5*tmp_359*tmp_492 - tmp_359*tmp_508 - tmp_367*tmp_467) + tmp_390*(0.5*tmp_378*tmp_492 - tmp_378*tmp_509 - tmp_386*tmp_467) + tmp_409*(0.5*tmp_397*tmp_492 - tmp_397*tmp_510 - tmp_405*tmp_467) + tmp_428*(0.5*tmp_416*tmp_492 - tmp_416*tmp_511 - tmp_424*tmp_467) + tmp_447*(0.5*tmp_435*tmp_492 - tmp_435*tmp_512 - tmp_443*tmp_467) + tmp_466*(0.5*tmp_454*tmp_492 - tmp_454*tmp_513 - tmp_462*tmp_467) + tmp_86*(-tmp_467*tmp_78 + 0.5*tmp_492*tmp_61 - tmp_493*tmp_61);
      real_t a_2_2 = tmp_105*(-tmp_101*tmp_468 + 0.5*tmp_492*tmp_94 - tmp_494*tmp_94) + tmp_124*(0.5*tmp_113*tmp_492 - tmp_113*tmp_495 - tmp_120*tmp_468) + tmp_143*(0.5*tmp_132*tmp_492 - tmp_132*tmp_496 - tmp_139*tmp_468) + tmp_162*(0.5*tmp_151*tmp_492 - tmp_151*tmp_497 - tmp_158*tmp_468) + tmp_181*(0.5*tmp_170*tmp_492 - tmp_170*tmp_498 - tmp_177*tmp_468) + tmp_200*(0.5*tmp_189*tmp_492 - tmp_189*tmp_499 - tmp_196*tmp_468) + tmp_219*(0.5*tmp_208*tmp_492 - tmp_208*tmp_500 - tmp_215*tmp_468) + tmp_238*(0.5*tmp_227*tmp_492 - tmp_227*tmp_501 - tmp_234*tmp_468) + tmp_257*(0.5*tmp_246*tmp_492 - tmp_246*tmp_502 - tmp_253*tmp_468) + tmp_276*(0.5*tmp_265*tmp_492 - tmp_265*tmp_503 - tmp_272*tmp_468) + tmp_295*(0.5*tmp_284*tmp_492 - tmp_284*tmp_504 - tmp_291*tmp_468) + tmp_314*(0.5*tmp_303*tmp_492 - tmp_303*tmp_505 - tmp_310*tmp_468) + tmp_333*(0.5*tmp_322*tmp_492 - tmp_322*tmp_506 - tmp_329*tmp_468) + tmp_352*(0.5*tmp_341*tmp_492 - tmp_341*tmp_507 - tmp_348*tmp_468) + tmp_371*(0.5*tmp_360*tmp_492 - tmp_360*tmp_508 - tmp_367*tmp_468) + tmp_390*(0.5*tmp_379*tmp_492 - tmp_379*tmp_509 - tmp_386*tmp_468) + tmp_409*(0.5*tmp_398*tmp_492 - tmp_398*tmp_510 - tmp_405*tmp_468) + tmp_428*(0.5*tmp_417*tmp_492 - tmp_417*tmp_511 - tmp_424*tmp_468) + tmp_447*(0.5*tmp_436*tmp_492 - tmp_436*tmp_512 - tmp_443*tmp_468) + tmp_466*(0.5*tmp_455*tmp_492 - tmp_455*tmp_513 - tmp_462*tmp_468) + tmp_86*(-tmp_468*tmp_78 + 0.5*tmp_492*tmp_65 - tmp_493*tmp_65);
      real_t a_2_3 = tmp_105*(-tmp_101*tmp_469 + 0.5*tmp_492*tmp_95 - tmp_494*tmp_95) + tmp_124*(0.5*tmp_114*tmp_492 - tmp_114*tmp_495 - tmp_120*tmp_469) + tmp_143*(0.5*tmp_133*tmp_492 - tmp_133*tmp_496 - tmp_139*tmp_469) + tmp_162*(0.5*tmp_152*tmp_492 - tmp_152*tmp_497 - tmp_158*tmp_469) + tmp_181*(0.5*tmp_171*tmp_492 - tmp_171*tmp_498 - tmp_177*tmp_469) + tmp_200*(0.5*tmp_190*tmp_492 - tmp_190*tmp_499 - tmp_196*tmp_469) + tmp_219*(0.5*tmp_209*tmp_492 - tmp_209*tmp_500 - tmp_215*tmp_469) + tmp_238*(0.5*tmp_228*tmp_492 - tmp_228*tmp_501 - tmp_234*tmp_469) + tmp_257*(0.5*tmp_247*tmp_492 - tmp_247*tmp_502 - tmp_253*tmp_469) + tmp_276*(0.5*tmp_266*tmp_492 - tmp_266*tmp_503 - tmp_272*tmp_469) + tmp_295*(0.5*tmp_285*tmp_492 - tmp_285*tmp_504 - tmp_291*tmp_469) + tmp_314*(0.5*tmp_304*tmp_492 - tmp_304*tmp_505 - tmp_310*tmp_469) + tmp_333*(0.5*tmp_323*tmp_492 - tmp_323*tmp_506 - tmp_329*tmp_469) + tmp_352*(0.5*tmp_342*tmp_492 - tmp_342*tmp_507 - tmp_348*tmp_469) + tmp_371*(0.5*tmp_361*tmp_492 - tmp_361*tmp_508 - tmp_367*tmp_469) + tmp_390*(0.5*tmp_380*tmp_492 - tmp_380*tmp_509 - tmp_386*tmp_469) + tmp_409*(0.5*tmp_399*tmp_492 - tmp_399*tmp_510 - tmp_405*tmp_469) + tmp_428*(0.5*tmp_418*tmp_492 - tmp_418*tmp_511 - tmp_424*tmp_469) + tmp_447*(0.5*tmp_437*tmp_492 - tmp_437*tmp_512 - tmp_443*tmp_469) + tmp_466*(0.5*tmp_456*tmp_492 - tmp_456*tmp_513 - tmp_462*tmp_469) + tmp_86*(-tmp_469*tmp_78 + 0.5*tmp_492*tmp_69 - tmp_493*tmp_69);
      real_t a_3_0 = tmp_105*(-tmp_102*tmp_81 + 0.5*tmp_514*tmp_96 - tmp_516*tmp_96) + tmp_124*(0.5*tmp_115*tmp_514 - tmp_115*tmp_517 - tmp_121*tmp_81) + tmp_143*(0.5*tmp_134*tmp_514 - tmp_134*tmp_518 - tmp_140*tmp_81) + tmp_162*(0.5*tmp_153*tmp_514 - tmp_153*tmp_519 - tmp_159*tmp_81) + tmp_181*(0.5*tmp_172*tmp_514 - tmp_172*tmp_520 - tmp_178*tmp_81) + tmp_200*(0.5*tmp_191*tmp_514 - tmp_191*tmp_521 - tmp_197*tmp_81) + tmp_219*(0.5*tmp_210*tmp_514 - tmp_210*tmp_522 - tmp_216*tmp_81) + tmp_238*(0.5*tmp_229*tmp_514 - tmp_229*tmp_523 - tmp_235*tmp_81) + tmp_257*(0.5*tmp_248*tmp_514 - tmp_248*tmp_524 - tmp_254*tmp_81) + tmp_276*(0.5*tmp_267*tmp_514 - tmp_267*tmp_525 - tmp_273*tmp_81) + tmp_295*(0.5*tmp_286*tmp_514 - tmp_286*tmp_526 - tmp_292*tmp_81) + tmp_314*(0.5*tmp_305*tmp_514 - tmp_305*tmp_527 - tmp_311*tmp_81) + tmp_333*(0.5*tmp_324*tmp_514 - tmp_324*tmp_528 - tmp_330*tmp_81) + tmp_352*(0.5*tmp_343*tmp_514 - tmp_343*tmp_529 - tmp_349*tmp_81) + tmp_371*(0.5*tmp_362*tmp_514 - tmp_362*tmp_530 - tmp_368*tmp_81) + tmp_390*(0.5*tmp_381*tmp_514 - tmp_381*tmp_531 - tmp_387*tmp_81) + tmp_409*(0.5*tmp_400*tmp_514 - tmp_400*tmp_532 - tmp_406*tmp_81) + tmp_428*(0.5*tmp_419*tmp_514 - tmp_419*tmp_533 - tmp_425*tmp_81) + tmp_447*(0.5*tmp_438*tmp_514 - tmp_438*tmp_534 - tmp_444*tmp_81) + tmp_466*(0.5*tmp_457*tmp_514 - tmp_457*tmp_535 - tmp_463*tmp_81) + tmp_86*(0.5*tmp_514*tmp_70 - tmp_515*tmp_70 - tmp_79*tmp_81);
      real_t a_3_1 = tmp_105*(-tmp_102*tmp_467 + 0.5*tmp_514*tmp_93 - tmp_516*tmp_93) + tmp_124*(0.5*tmp_112*tmp_514 - tmp_112*tmp_517 - tmp_121*tmp_467) + tmp_143*(0.5*tmp_131*tmp_514 - tmp_131*tmp_518 - tmp_140*tmp_467) + tmp_162*(0.5*tmp_150*tmp_514 - tmp_150*tmp_519 - tmp_159*tmp_467) + tmp_181*(0.5*tmp_169*tmp_514 - tmp_169*tmp_520 - tmp_178*tmp_467) + tmp_200*(0.5*tmp_188*tmp_514 - tmp_188*tmp_521 - tmp_197*tmp_467) + tmp_219*(0.5*tmp_207*tmp_514 - tmp_207*tmp_522 - tmp_216*tmp_467) + tmp_238*(0.5*tmp_226*tmp_514 - tmp_226*tmp_523 - tmp_235*tmp_467) + tmp_257*(0.5*tmp_245*tmp_514 - tmp_245*tmp_524 - tmp_254*tmp_467) + tmp_276*(0.5*tmp_264*tmp_514 - tmp_264*tmp_525 - tmp_273*tmp_467) + tmp_295*(0.5*tmp_283*tmp_514 - tmp_283*tmp_526 - tmp_292*tmp_467) + tmp_314*(0.5*tmp_302*tmp_514 - tmp_302*tmp_527 - tmp_311*tmp_467) + tmp_333*(0.5*tmp_321*tmp_514 - tmp_321*tmp_528 - tmp_330*tmp_467) + tmp_352*(0.5*tmp_340*tmp_514 - tmp_340*tmp_529 - tmp_349*tmp_467) + tmp_371*(0.5*tmp_359*tmp_514 - tmp_359*tmp_530 - tmp_368*tmp_467) + tmp_390*(0.5*tmp_378*tmp_514 - tmp_378*tmp_531 - tmp_387*tmp_467) + tmp_409*(0.5*tmp_397*tmp_514 - tmp_397*tmp_532 - tmp_406*tmp_467) + tmp_428*(0.5*tmp_416*tmp_514 - tmp_416*tmp_533 - tmp_425*tmp_467) + tmp_447*(0.5*tmp_435*tmp_514 - tmp_435*tmp_534 - tmp_444*tmp_467) + tmp_466*(0.5*tmp_454*tmp_514 - tmp_454*tmp_535 - tmp_463*tmp_467) + tmp_86*(-tmp_467*tmp_79 + 0.5*tmp_514*tmp_61 - tmp_515*tmp_61);
      real_t a_3_2 = tmp_105*(-tmp_102*tmp_468 + 0.5*tmp_514*tmp_94 - tmp_516*tmp_94) + tmp_124*(0.5*tmp_113*tmp_514 - tmp_113*tmp_517 - tmp_121*tmp_468) + tmp_143*(0.5*tmp_132*tmp_514 - tmp_132*tmp_518 - tmp_140*tmp_468) + tmp_162*(0.5*tmp_151*tmp_514 - tmp_151*tmp_519 - tmp_159*tmp_468) + tmp_181*(0.5*tmp_170*tmp_514 - tmp_170*tmp_520 - tmp_178*tmp_468) + tmp_200*(0.5*tmp_189*tmp_514 - tmp_189*tmp_521 - tmp_197*tmp_468) + tmp_219*(0.5*tmp_208*tmp_514 - tmp_208*tmp_522 - tmp_216*tmp_468) + tmp_238*(0.5*tmp_227*tmp_514 - tmp_227*tmp_523 - tmp_235*tmp_468) + tmp_257*(0.5*tmp_246*tmp_514 - tmp_246*tmp_524 - tmp_254*tmp_468) + tmp_276*(0.5*tmp_265*tmp_514 - tmp_265*tmp_525 - tmp_273*tmp_468) + tmp_295*(0.5*tmp_284*tmp_514 - tmp_284*tmp_526 - tmp_292*tmp_468) + tmp_314*(0.5*tmp_303*tmp_514 - tmp_303*tmp_527 - tmp_311*tmp_468) + tmp_333*(0.5*tmp_322*tmp_514 - tmp_322*tmp_528 - tmp_330*tmp_468) + tmp_352*(0.5*tmp_341*tmp_514 - tmp_341*tmp_529 - tmp_349*tmp_468) + tmp_371*(0.5*tmp_360*tmp_514 - tmp_360*tmp_530 - tmp_368*tmp_468) + tmp_390*(0.5*tmp_379*tmp_514 - tmp_379*tmp_531 - tmp_387*tmp_468) + tmp_409*(0.5*tmp_398*tmp_514 - tmp_398*tmp_532 - tmp_406*tmp_468) + tmp_428*(0.5*tmp_417*tmp_514 - tmp_417*tmp_533 - tmp_425*tmp_468) + tmp_447*(0.5*tmp_436*tmp_514 - tmp_436*tmp_534 - tmp_444*tmp_468) + tmp_466*(0.5*tmp_455*tmp_514 - tmp_455*tmp_535 - tmp_463*tmp_468) + tmp_86*(-tmp_468*tmp_79 + 0.5*tmp_514*tmp_65 - tmp_515*tmp_65);
      real_t a_3_3 = tmp_105*(-tmp_102*tmp_469 + 0.5*tmp_514*tmp_95 - tmp_516*tmp_95) + tmp_124*(0.5*tmp_114*tmp_514 - tmp_114*tmp_517 - tmp_121*tmp_469) + tmp_143*(0.5*tmp_133*tmp_514 - tmp_133*tmp_518 - tmp_140*tmp_469) + tmp_162*(0.5*tmp_152*tmp_514 - tmp_152*tmp_519 - tmp_159*tmp_469) + tmp_181*(0.5*tmp_171*tmp_514 - tmp_171*tmp_520 - tmp_178*tmp_469) + tmp_200*(0.5*tmp_190*tmp_514 - tmp_190*tmp_521 - tmp_197*tmp_469) + tmp_219*(0.5*tmp_209*tmp_514 - tmp_209*tmp_522 - tmp_216*tmp_469) + tmp_238*(0.5*tmp_228*tmp_514 - tmp_228*tmp_523 - tmp_235*tmp_469) + tmp_257*(0.5*tmp_247*tmp_514 - tmp_247*tmp_524 - tmp_254*tmp_469) + tmp_276*(0.5*tmp_266*tmp_514 - tmp_266*tmp_525 - tmp_273*tmp_469) + tmp_295*(0.5*tmp_285*tmp_514 - tmp_285*tmp_526 - tmp_292*tmp_469) + tmp_314*(0.5*tmp_304*tmp_514 - tmp_304*tmp_527 - tmp_311*tmp_469) + tmp_333*(0.5*tmp_323*tmp_514 - tmp_323*tmp_528 - tmp_330*tmp_469) + tmp_352*(0.5*tmp_342*tmp_514 - tmp_342*tmp_529 - tmp_349*tmp_469) + tmp_371*(0.5*tmp_361*tmp_514 - tmp_361*tmp_530 - tmp_368*tmp_469) + tmp_390*(0.5*tmp_380*tmp_514 - tmp_380*tmp_531 - tmp_387*tmp_469) + tmp_409*(0.5*tmp_399*tmp_514 - tmp_399*tmp_532 - tmp_406*tmp_469) + tmp_428*(0.5*tmp_418*tmp_514 - tmp_418*tmp_533 - tmp_425*tmp_469) + tmp_447*(0.5*tmp_437*tmp_514 - tmp_437*tmp_534 - tmp_444*tmp_469) + tmp_466*(0.5*tmp_456*tmp_514 - tmp_456*tmp_535 - tmp_463*tmp_469) + tmp_86*(-tmp_469*tmp_79 + 0.5*tmp_514*tmp_69 - tmp_515*tmp_69);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 2*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_210 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_45 - tmp_103*tmp_209) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_45 - tmp_111*tmp_209) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_45 - tmp_119*tmp_209) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_45 - tmp_127*tmp_209) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_45 - tmp_135*tmp_209) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_45 - tmp_143*tmp_209) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_45 - tmp_151*tmp_209) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_45 - tmp_159*tmp_209) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_45 - tmp_167*tmp_209) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_45 - tmp_175*tmp_209) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_45 - tmp_183*tmp_209) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_45 - tmp_191*tmp_209) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_45 - tmp_199*tmp_209) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_45 - tmp_207*tmp_209) + tmp_48*(-tmp_209*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_45) + tmp_56*(-tmp_209*tmp_55 - tmp_45*tmp_52 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_63 - tmp_45*tmp_60 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_71 - tmp_45*tmp_68 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_79 - tmp_45*tmp_76 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_87 - tmp_45*tmp_84 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_95 - tmp_45*tmp_92 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_211 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_212 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_45 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_45 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_45 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_45 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_45 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_45 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_45 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_45 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_45 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_45 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_45 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_45 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_45 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_45 - tmp_207*tmp_211) + tmp_48*(-tmp_211*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_45) + tmp_56*(-tmp_211*tmp_55 - tmp_45*tmp_53 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_211*tmp_63 - tmp_45*tmp_61 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_211*tmp_71 - tmp_45*tmp_69 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_211*tmp_79 - tmp_45*tmp_77 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_211*tmp_87 - tmp_45*tmp_85 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_211*tmp_95 - tmp_45*tmp_93 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_214 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_45 - tmp_103*tmp_213) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_45 - tmp_111*tmp_213) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_45 - tmp_119*tmp_213) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_45 - tmp_127*tmp_213) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_45 - tmp_135*tmp_213) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_45 - tmp_143*tmp_213) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_45 - tmp_151*tmp_213) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_45 - tmp_159*tmp_213) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_45 - tmp_167*tmp_213) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_45 - tmp_175*tmp_213) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_45 - tmp_183*tmp_213) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_45 - tmp_191*tmp_213) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_45 - tmp_199*tmp_213) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_45 - tmp_207*tmp_213) + tmp_48*(-tmp_213*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_45) + tmp_56*(-tmp_213*tmp_55 - tmp_45*tmp_54 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_213*tmp_63 - tmp_45*tmp_62 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_213*tmp_71 - tmp_45*tmp_70 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_213*tmp_79 - tmp_45*tmp_78 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_213*tmp_87 - tmp_45*tmp_86 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_213*tmp_95 - tmp_45*tmp_94 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_215 = 2*tmp_209;
      real_t tmp_216 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_211 - tmp_101*tmp_209) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_211 - tmp_109*tmp_209) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_211 - tmp_117*tmp_209) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_211 - tmp_125*tmp_209) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_211 - tmp_133*tmp_209) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_211 - tmp_141*tmp_209) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_211 - tmp_149*tmp_209) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_211 - tmp_157*tmp_209) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_211 - tmp_165*tmp_209) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_211 - tmp_173*tmp_209) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_211 - tmp_181*tmp_209) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_211 - tmp_189*tmp_209) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_211 - tmp_197*tmp_209) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_211 - tmp_205*tmp_209) + tmp_48*(-tmp_209*tmp_39 - tmp_211*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_211*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_211*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_211*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_209*tmp_77 - tmp_211*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_209*tmp_85 - tmp_211*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_209*tmp_93 - tmp_211*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_217 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_213 - tmp_102*tmp_209) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_213 - tmp_110*tmp_209) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_213 - tmp_118*tmp_209) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_213 - tmp_126*tmp_209) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_213 - tmp_134*tmp_209) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_213 - tmp_142*tmp_209) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_213 - tmp_150*tmp_209) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_213 - tmp_158*tmp_209) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_213 - tmp_166*tmp_209) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_213 - tmp_174*tmp_209) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_213 - tmp_182*tmp_209) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_213 - tmp_190*tmp_209) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_213 - tmp_198*tmp_209) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_213 - tmp_206*tmp_209) + tmp_48*(-tmp_209*tmp_43 - tmp_213*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_213*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_213*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_213*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_209*tmp_78 - tmp_213*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_209*tmp_86 - tmp_213*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_209*tmp_94 - tmp_213*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_218 = 2*tmp_211;
      real_t tmp_219 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_213 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_213 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_213 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_213 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_213 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_213 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_213 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_213 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_213 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_213 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_213 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_213 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_213 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_213 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_213*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_213*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_213*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_213*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_213*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_213*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_213*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_220 = 2*tmp_213;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_210;
      real_t a_0_2 = tmp_212;
      real_t a_0_3 = tmp_214;
      real_t a_1_0 = tmp_210;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_215) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_215) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_215) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_215) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_215) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_215) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_215) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_215) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_215) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_215) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_215) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_215) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_215) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_215) + tmp_48*(-tmp_215*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_215*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_215*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_215*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_215*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_215*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_215*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_216;
      real_t a_1_3 = tmp_217;
      real_t a_2_0 = tmp_212;
      real_t a_2_1 = tmp_216;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_218) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_218) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_218) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_218) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_218) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_218) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_218) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_218) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_218) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_218) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_218) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_218) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_218) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_218) + tmp_48*(-tmp_218*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_218*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_218*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_218*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_218*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_218*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_218*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_219;
      real_t a_3_0 = tmp_214;
      real_t a_3_1 = tmp_217;
      real_t a_3_2 = tmp_219;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_220) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_220) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_220) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_220) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_220) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_220) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_220) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_220) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_220) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_220) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_220) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_220) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_220) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_220) + tmp_48*(-tmp_220*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_220*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_220*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_220*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_220*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_220*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_220*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;

};




class EGVectorLaplaceFormNitscheBC_P1E_1 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1E_1()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = -tmp_4;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_3*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = tmp_2*tmp_6 + tmp_5*tmp_8;
      real_t tmp_10 = tmp_1*tmp_6;
      real_t tmp_11 = tmp_4*tmp_6;
      real_t tmp_12 = tmp_1*tmp_11 + tmp_10*tmp_5;
      real_t tmp_13 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_14 = tmp_13*(tmp_12*(-tmp_10 - tmp_11) + tmp_9*(-tmp_7 - tmp_8));
      real_t tmp_15 = tmp_13*(tmp_10*tmp_12 + tmp_8*tmp_9);
      real_t tmp_16 = tmp_13*(tmp_11*tmp_12 + tmp_7*tmp_9);
      real_t a_0_0 = 0.5*tmp_14;
      real_t a_1_0 = 0.5*tmp_15;
      real_t a_2_0 = 0.5*tmp_16;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_4 = 0.046910077030668018*tmp_2 + tmp_3;
      real_t tmp_5 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_8 = tmp_6*tmp_7;
      real_t tmp_9 = 1.0 / (tmp_1*tmp_5 + tmp_8);
      real_t tmp_10 = tmp_5*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_11 + tmp_12;
      real_t tmp_14 = tmp_7*tmp_9;
      real_t tmp_15 = tmp_10*tmp_4 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_6*tmp_9;
      real_t tmp_17 = tmp_0*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_4;
      real_t tmp_19 = tmp_1*(tmp_15 - 1.0/3.0) + tmp_7*(tmp_18 - 1.0/3.0);
      real_t tmp_20 = 0.5*p_affine_10_0*(-tmp_14 - tmp_17) + 0.5*p_affine_10_1*(-tmp_10 - tmp_16);
      real_t tmp_21 = -tmp_15 - tmp_18 + 1;
      real_t tmp_22 = 0.5*p_affine_10_0*(tmp_1*tmp_14 + tmp_17*tmp_7) + 0.5*p_affine_10_1*(tmp_1*tmp_10 + tmp_8*tmp_9);
      real_t tmp_23 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_2*tmp_2), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_2 + tmp_3;
      real_t tmp_27 = 0.23076534494715845*tmp_11 + tmp_12;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = tmp_1*(tmp_28 - 1.0/3.0) + tmp_7*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_2 + tmp_3;
      real_t tmp_34 = 0.5*tmp_11 + tmp_12;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_14*tmp_34;
      real_t tmp_36 = tmp_16*tmp_33 + tmp_17*tmp_34;
      real_t tmp_37 = tmp_1*(tmp_35 - 1.0/3.0) + tmp_7*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_2 + tmp_3;
      real_t tmp_41 = 0.7692346550528415*tmp_11 + tmp_12;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_14*tmp_41;
      real_t tmp_43 = tmp_16*tmp_40 + tmp_17*tmp_41;
      real_t tmp_44 = tmp_1*(tmp_42 - 1.0/3.0) + tmp_7*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_2 + tmp_3;
      real_t tmp_48 = 0.95308992296933193*tmp_11 + tmp_12;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_14*tmp_48;
      real_t tmp_50 = tmp_16*tmp_47 + tmp_17*tmp_48;
      real_t tmp_51 = tmp_1*(tmp_49 - 1.0/3.0) + tmp_7*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = 0.5*p_affine_10_0*tmp_14 + 0.5*p_affine_10_1*tmp_10;
      real_t tmp_55 = 0.5*p_affine_10_0*tmp_17 + 0.5*p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_25*(-tmp_19*tmp_20 + 3*tmp_19*tmp_21*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_20*tmp_30 - tmp_22*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_20*tmp_37 - tmp_22*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_20*tmp_44 - tmp_22*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_20*tmp_51 - tmp_22*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_1_0 = tmp_25*(3*tmp_15*tmp_19*tmp_24 - tmp_15*tmp_22 - tmp_19*tmp_54) + tmp_32*(-tmp_22*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_22*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_22*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_22*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_2_0 = tmp_25*(3*tmp_18*tmp_19*tmp_24 - tmp_18*tmp_22 - tmp_19*tmp_55) + tmp_32*(-tmp_22*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_22*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_22*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_22*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (tmp_0*tmp_1 - tmp_2*tmp_3);
      real_t tmp_5 = tmp_0*tmp_4;
      real_t tmp_6 = tmp_3*tmp_4;
      real_t tmp_7 = tmp_1*tmp_4;
      real_t tmp_8 = tmp_2*tmp_4;
      real_t tmp_9 = p_affine_10_0*(-tmp_5 - tmp_6) + p_affine_10_1*(-tmp_7 - tmp_8);
      real_t tmp_10 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_11 = -tmp_10;
      real_t tmp_12 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_13 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_14 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_15 = tmp_13*tmp_14;
      real_t tmp_16 = 1.0 / (tmp_11*tmp_12 + tmp_15);
      real_t tmp_17 = -p_affine_3_1;
      real_t tmp_18 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_19 = p_affine_6_1 + 0.046910077030668018*tmp_18;
      real_t tmp_20 = tmp_16*(tmp_17 + tmp_19);
      real_t tmp_21 = -p_affine_3_0;
      real_t tmp_22 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_23 = p_affine_6_0 + 0.046910077030668018*tmp_22;
      real_t tmp_24 = tmp_16*(tmp_21 + tmp_23);
      real_t tmp_25 = tmp_11*(tmp_12*tmp_20 + tmp_14*tmp_24 - 1.0/3.0) + tmp_14*(tmp_10*tmp_24 + tmp_13*tmp_20 - 1.0/3.0);
      real_t tmp_26 = -p_affine_0_1;
      real_t tmp_27 = tmp_19 + tmp_26;
      real_t tmp_28 = -p_affine_0_0;
      real_t tmp_29 = tmp_23 + tmp_28;
      real_t tmp_30 = tmp_27*tmp_8 + tmp_29*tmp_5;
      real_t tmp_31 = tmp_27*tmp_7 + tmp_29*tmp_6;
      real_t tmp_32 = -tmp_30 - tmp_31 + 1;
      real_t tmp_33 = tmp_14*tmp_16;
      real_t tmp_34 = tmp_12*tmp_16;
      real_t tmp_35 = 0.5*p_affine_10_0*(tmp_10*tmp_33 + tmp_11*tmp_33) + 0.5*p_affine_10_1*(tmp_11*tmp_34 + tmp_15*tmp_16);
      real_t tmp_36 = std::abs(std::pow((tmp_18*tmp_18) + (tmp_22*tmp_22), 1.0/2.0));
      real_t tmp_37 = 3/tmp_36;
      real_t tmp_38 = tmp_25*tmp_37;
      real_t tmp_39 = 0.11846344252809471*tmp_36;
      real_t tmp_40 = p_affine_6_1 + 0.23076534494715845*tmp_18;
      real_t tmp_41 = tmp_17 + tmp_40;
      real_t tmp_42 = p_affine_6_0 + 0.23076534494715845*tmp_22;
      real_t tmp_43 = tmp_21 + tmp_42;
      real_t tmp_44 = tmp_13*tmp_16;
      real_t tmp_45 = tmp_10*tmp_16;
      real_t tmp_46 = tmp_11*(tmp_33*tmp_43 + tmp_34*tmp_41 - 1.0/3.0) + tmp_14*(tmp_41*tmp_44 + tmp_43*tmp_45 - 1.0/3.0);
      real_t tmp_47 = tmp_26 + tmp_40;
      real_t tmp_48 = tmp_28 + tmp_42;
      real_t tmp_49 = tmp_47*tmp_8 + tmp_48*tmp_5;
      real_t tmp_50 = tmp_47*tmp_7 + tmp_48*tmp_6;
      real_t tmp_51 = -tmp_49 - tmp_50 + 1;
      real_t tmp_52 = tmp_37*tmp_46;
      real_t tmp_53 = 0.2393143352496831*tmp_36;
      real_t tmp_54 = p_affine_6_1 + 0.5*tmp_18;
      real_t tmp_55 = tmp_17 + tmp_54;
      real_t tmp_56 = p_affine_6_0 + 0.5*tmp_22;
      real_t tmp_57 = tmp_21 + tmp_56;
      real_t tmp_58 = tmp_11*(tmp_33*tmp_57 + tmp_34*tmp_55 - 1.0/3.0) + tmp_14*(tmp_44*tmp_55 + tmp_45*tmp_57 - 1.0/3.0);
      real_t tmp_59 = tmp_26 + tmp_54;
      real_t tmp_60 = tmp_28 + tmp_56;
      real_t tmp_61 = tmp_5*tmp_60 + tmp_59*tmp_8;
      real_t tmp_62 = tmp_59*tmp_7 + tmp_6*tmp_60;
      real_t tmp_63 = -tmp_61 - tmp_62 + 1;
      real_t tmp_64 = tmp_37*tmp_58;
      real_t tmp_65 = 0.2844444444444445*tmp_36;
      real_t tmp_66 = p_affine_6_1 + 0.7692346550528415*tmp_18;
      real_t tmp_67 = tmp_17 + tmp_66;
      real_t tmp_68 = p_affine_6_0 + 0.7692346550528415*tmp_22;
      real_t tmp_69 = tmp_21 + tmp_68;
      real_t tmp_70 = tmp_11*(tmp_33*tmp_69 + tmp_34*tmp_67 - 1.0/3.0) + tmp_14*(tmp_44*tmp_67 + tmp_45*tmp_69 - 1.0/3.0);
      real_t tmp_71 = tmp_26 + tmp_66;
      real_t tmp_72 = tmp_28 + tmp_68;
      real_t tmp_73 = tmp_5*tmp_72 + tmp_71*tmp_8;
      real_t tmp_74 = tmp_6*tmp_72 + tmp_7*tmp_71;
      real_t tmp_75 = -tmp_73 - tmp_74 + 1;
      real_t tmp_76 = tmp_37*tmp_70;
      real_t tmp_77 = 0.2393143352496831*tmp_36;
      real_t tmp_78 = p_affine_6_1 + 0.95308992296933193*tmp_18;
      real_t tmp_79 = tmp_17 + tmp_78;
      real_t tmp_80 = p_affine_6_0 + 0.95308992296933193*tmp_22;
      real_t tmp_81 = tmp_21 + tmp_80;
      real_t tmp_82 = tmp_11*(tmp_33*tmp_81 + tmp_34*tmp_79 - 1.0/3.0) + tmp_14*(tmp_44*tmp_79 + tmp_45*tmp_81 - 1.0/3.0);
      real_t tmp_83 = tmp_26 + tmp_78;
      real_t tmp_84 = tmp_28 + tmp_80;
      real_t tmp_85 = tmp_5*tmp_84 + tmp_8*tmp_83;
      real_t tmp_86 = tmp_6*tmp_84 + tmp_7*tmp_83;
      real_t tmp_87 = -tmp_85 - tmp_86 + 1;
      real_t tmp_88 = tmp_37*tmp_82;
      real_t tmp_89 = 0.11846344252809471*tmp_36;
      real_t tmp_90 = p_affine_10_0*tmp_5 + p_affine_10_1*tmp_8;
      real_t tmp_91 = p_affine_10_0*tmp_6 + p_affine_10_1*tmp_7;
      real_t a_0_0 = tmp_39*(0.5*tmp_25*tmp_9 - tmp_32*tmp_35 - tmp_32*tmp_38) + tmp_53*(-tmp_35*tmp_51 + 0.5*tmp_46*tmp_9 - tmp_51*tmp_52) + tmp_65*(-tmp_35*tmp_63 + 0.5*tmp_58*tmp_9 - tmp_63*tmp_64) + tmp_77*(-tmp_35*tmp_75 + 0.5*tmp_70*tmp_9 - tmp_75*tmp_76) + tmp_89*(-tmp_35*tmp_87 + 0.5*tmp_82*tmp_9 - tmp_87*tmp_88);
      real_t a_1_0 = tmp_39*(0.5*tmp_25*tmp_90 - tmp_30*tmp_35 - tmp_30*tmp_38) + tmp_53*(-tmp_35*tmp_49 + 0.5*tmp_46*tmp_90 - tmp_49*tmp_52) + tmp_65*(-tmp_35*tmp_61 + 0.5*tmp_58*tmp_90 - tmp_61*tmp_64) + tmp_77*(-tmp_35*tmp_73 + 0.5*tmp_70*tmp_90 - tmp_73*tmp_76) + tmp_89*(-tmp_35*tmp_85 + 0.5*tmp_82*tmp_90 - tmp_85*tmp_88);
      real_t a_2_0 = tmp_39*(0.5*tmp_25*tmp_91 - tmp_31*tmp_35 - tmp_31*tmp_38) + tmp_53*(-tmp_35*tmp_50 + 0.5*tmp_46*tmp_91 - tmp_50*tmp_52) + tmp_65*(-tmp_35*tmp_62 + 0.5*tmp_58*tmp_91 - tmp_62*tmp_64) + tmp_77*(-tmp_35*tmp_74 + 0.5*tmp_70*tmp_91 - tmp_74*tmp_76) + tmp_89*(-tmp_35*tmp_86 + 0.5*tmp_82*tmp_91 - tmp_86*tmp_88);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = -tmp_4;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_3*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_4*tmp_6;
      real_t tmp_9 = tmp_1*tmp_6;
      real_t tmp_10 = tmp_3*tmp_6;
      real_t tmp_11 = p_affine_10_0*(-tmp_7 - tmp_8) + p_affine_10_1*(-tmp_10 - tmp_9);
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_14 = 0.046910077030668018*tmp_12 + tmp_13;
      real_t tmp_15 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_16 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_17 = 0.046910077030668018*tmp_15 + tmp_16;
      real_t tmp_18 = tmp_10*tmp_14 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*tmp_9 + tmp_17*tmp_8;
      real_t tmp_20 = tmp_0*(tmp_19 - 1.0/3.0) + tmp_5*(tmp_18 - 1.0/3.0);
      real_t tmp_21 = p_affine_10_0*(tmp_0*tmp_8 + tmp_5*tmp_7) + p_affine_10_1*(tmp_10*tmp_5 + tmp_2*tmp_6);
      real_t tmp_22 = -tmp_18 - tmp_19 + 1;
      real_t tmp_23 = std::abs(std::pow((tmp_12*tmp_12) + (tmp_15*tmp_15), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_12 + tmp_13;
      real_t tmp_27 = 0.23076534494715845*tmp_15 + tmp_16;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_27*tmp_7;
      real_t tmp_29 = tmp_26*tmp_9 + tmp_27*tmp_8;
      real_t tmp_30 = tmp_0*(tmp_29 - 1.0/3.0) + tmp_5*(tmp_28 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_12 + tmp_13;
      real_t tmp_34 = 0.5*tmp_15 + tmp_16;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_34*tmp_7;
      real_t tmp_36 = tmp_33*tmp_9 + tmp_34*tmp_8;
      real_t tmp_37 = tmp_0*(tmp_36 - 1.0/3.0) + tmp_5*(tmp_35 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_12 + tmp_13;
      real_t tmp_41 = 0.7692346550528415*tmp_15 + tmp_16;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_41*tmp_7;
      real_t tmp_43 = tmp_40*tmp_9 + tmp_41*tmp_8;
      real_t tmp_44 = tmp_0*(tmp_43 - 1.0/3.0) + tmp_5*(tmp_42 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_12 + tmp_13;
      real_t tmp_48 = 0.95308992296933193*tmp_15 + tmp_16;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_48*tmp_7;
      real_t tmp_50 = tmp_47*tmp_9 + tmp_48*tmp_8;
      real_t tmp_51 = tmp_0*(tmp_50 - 1.0/3.0) + tmp_5*(tmp_49 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = p_affine_10_0*tmp_7 + p_affine_10_1*tmp_10;
      real_t tmp_55 = p_affine_10_0*tmp_8 + p_affine_10_1*tmp_9;
      real_t a_0_0 = tmp_25*(-tmp_11*tmp_20 + 3*tmp_20*tmp_22*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_11*tmp_30 - tmp_21*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_11*tmp_37 - tmp_21*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_11*tmp_44 - tmp_21*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_11*tmp_51 - tmp_21*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_1_0 = tmp_25*(3*tmp_18*tmp_20*tmp_24 - tmp_18*tmp_21 - tmp_20*tmp_54) + tmp_32*(-tmp_21*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_21*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_21*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_21*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_2_0 = tmp_25*(3*tmp_19*tmp_20*tmp_24 - tmp_19*tmp_21 - tmp_20*tmp_55) + tmp_32*(-tmp_21*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_21*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_21*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_21*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_1*tmp_16 + tmp_15*tmp_8 + tmp_17*tmp_4;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_1*tmp_20 + tmp_19*tmp_8 + tmp_21*tmp_4;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_1*tmp_24 + tmp_23*tmp_8 + tmp_25*tmp_4;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_1_0 = 0.1666666666666668*tmp_41;
      real_t a_2_0 = 0.1666666666666668*tmp_42;
      real_t a_3_0 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_11 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_12 = tmp_11*tmp_9;
      real_t tmp_13 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_0*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_0*tmp_11;
      real_t tmp_18 = tmp_13*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_10*tmp_12 - tmp_10*tmp_16 + tmp_13*tmp_6*tmp_7 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_11*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_12 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(tmp_0*tmp_8 - tmp_10*tmp_7);
      real_t tmp_35 = tmp_19*(tmp_10*tmp_11 - tmp_13*tmp_8);
      real_t tmp_36 = tmp_19*(tmp_13*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(-tmp_0*tmp_6 + tmp_10*tmp_9);
      real_t tmp_39 = tmp_19*(-tmp_10*tmp_14 + tmp_13*tmp_6);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_7*(tmp_41 - 1.0/4.0) + tmp_9*(tmp_37 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_36*tmp_9 + tmp_40*tmp_7) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_35*tmp_9 + tmp_39*tmp_7) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_34*tmp_9 + tmp_38*tmp_7);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_7*(tmp_55 - 1.0/4.0) + tmp_9*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_7*(tmp_64 - 1.0/4.0) + tmp_9*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_7*(tmp_73 - 1.0/4.0) + tmp_9*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_7*(tmp_82 - 1.0/4.0) + tmp_9*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_7*(tmp_91 - 1.0/4.0) + tmp_9*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_7*(tmp_100 - 1.0/4.0) + tmp_9*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_7*(tmp_109 - 1.0/4.0) + tmp_9*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_7*(tmp_118 - 1.0/4.0) + tmp_9*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_7*(tmp_127 - 1.0/4.0) + tmp_9*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_7*(tmp_136 - 1.0/4.0) + tmp_9*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_7*(tmp_145 - 1.0/4.0) + tmp_9*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_7*(tmp_154 - 1.0/4.0) + tmp_9*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_7*(tmp_163 - 1.0/4.0) + tmp_9*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_7*(tmp_172 - 1.0/4.0) + tmp_9*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_7*(tmp_181 - 1.0/4.0) + tmp_9*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_7*(tmp_190 - 1.0/4.0) + tmp_9*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_7*(tmp_199 - 1.0/4.0) + tmp_9*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_7*(tmp_208 - 1.0/4.0) + tmp_9*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_7*(tmp_217 - 1.0/4.0) + tmp_9*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_7*(tmp_226 - 1.0/4.0) + tmp_9*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_26 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_27 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_28 = tmp_26*tmp_27;
      real_t tmp_29 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_30 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_31 = tmp_29*tmp_30;
      real_t tmp_32 = tmp_28 - tmp_31;
      real_t tmp_33 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_34 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_35 = tmp_30*tmp_34;
      real_t tmp_36 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_37 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_38 = tmp_27*tmp_37;
      real_t tmp_39 = tmp_26*tmp_34;
      real_t tmp_40 = 1.0 / (tmp_25*tmp_29*tmp_37 - tmp_25*tmp_39 + tmp_28*tmp_36 - tmp_31*tmp_36 + tmp_33*tmp_35 - tmp_33*tmp_38);
      real_t tmp_41 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_42 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_43 = -tmp_42;
      real_t tmp_44 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_45 = 0.031405749086161582*tmp_43 + 0.93718850182767688*tmp_44;
      real_t tmp_46 = tmp_40*(tmp_41 + tmp_45);
      real_t tmp_47 = tmp_29*tmp_37 - tmp_39;
      real_t tmp_48 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_49 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_50 = -tmp_49;
      real_t tmp_51 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_52 = 0.031405749086161582*tmp_50 + 0.93718850182767688*tmp_51;
      real_t tmp_53 = tmp_40*(tmp_48 + tmp_52);
      real_t tmp_54 = tmp_35 - tmp_38;
      real_t tmp_55 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_56 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_57 = -tmp_56;
      real_t tmp_58 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_59 = 0.031405749086161582*tmp_57 + 0.93718850182767688*tmp_58;
      real_t tmp_60 = tmp_40*(tmp_55 + tmp_59);
      real_t tmp_61 = tmp_25*tmp_29 - tmp_27*tmp_33;
      real_t tmp_62 = -tmp_29*tmp_36 + tmp_33*tmp_34;
      real_t tmp_63 = -tmp_25*tmp_34 + tmp_27*tmp_36;
      real_t tmp_64 = -tmp_25*tmp_26 + tmp_30*tmp_33;
      real_t tmp_65 = tmp_26*tmp_36 - tmp_33*tmp_37;
      real_t tmp_66 = tmp_25*tmp_37 - tmp_30*tmp_36;
      real_t tmp_67 = tmp_25*(tmp_32*tmp_46 + tmp_47*tmp_53 + tmp_54*tmp_60 - 1.0/4.0) + tmp_27*(tmp_46*tmp_64 + tmp_53*tmp_65 + tmp_60*tmp_66 - 1.0/4.0) + tmp_30*(tmp_46*tmp_61 + tmp_53*tmp_62 + tmp_60*tmp_63 - 1.0/4.0);
      real_t tmp_68 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_69 = tmp_45 + tmp_68;
      real_t tmp_70 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_71 = tmp_52 + tmp_70;
      real_t tmp_72 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_73 = tmp_59 + tmp_72;
      real_t tmp_74 = tmp_17*tmp_73 + tmp_20*tmp_71 + tmp_23*tmp_69;
      real_t tmp_75 = tmp_16*tmp_73 + tmp_19*tmp_71 + tmp_22*tmp_69;
      real_t tmp_76 = tmp_15*tmp_73 + tmp_18*tmp_71 + tmp_21*tmp_69;
      real_t tmp_77 = -tmp_74 - tmp_75 - tmp_76 + 1;
      real_t tmp_78 = tmp_25*tmp_40;
      real_t tmp_79 = tmp_30*tmp_40;
      real_t tmp_80 = tmp_27*tmp_40;
      real_t tmp_81 = 0.5*p_affine_13_0*(tmp_54*tmp_78 + tmp_63*tmp_79 + tmp_66*tmp_80) + 0.5*p_affine_13_1*(tmp_47*tmp_78 + tmp_62*tmp_79 + tmp_65*tmp_80) + 0.5*p_affine_13_2*(tmp_32*tmp_78 + tmp_61*tmp_79 + tmp_64*tmp_80);
      real_t tmp_82 = (std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)*std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)) + (std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)*std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)) + (std::abs(tmp_49*tmp_58 - tmp_51*tmp_56)*std::abs(tmp_49*tmp_58 - tmp_51*tmp_56));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_67*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_43 + 0.60796128279561268*tmp_44;
      real_t tmp_88 = tmp_40*(tmp_41 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_50 + 0.60796128279561268*tmp_51;
      real_t tmp_90 = tmp_40*(tmp_48 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_57 + 0.60796128279561268*tmp_58;
      real_t tmp_92 = tmp_40*(tmp_55 + tmp_91);
      real_t tmp_93 = tmp_25*(tmp_32*tmp_88 + tmp_47*tmp_90 + tmp_54*tmp_92 - 1.0/4.0) + tmp_27*(tmp_64*tmp_88 + tmp_65*tmp_90 + tmp_66*tmp_92 - 1.0/4.0) + tmp_30*(tmp_61*tmp_88 + tmp_62*tmp_90 + tmp_63*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_68 + tmp_87;
      real_t tmp_95 = tmp_70 + tmp_89;
      real_t tmp_96 = tmp_72 + tmp_91;
      real_t tmp_97 = tmp_17*tmp_96 + tmp_20*tmp_95 + tmp_23*tmp_94;
      real_t tmp_98 = tmp_16*tmp_96 + tmp_19*tmp_95 + tmp_22*tmp_94;
      real_t tmp_99 = tmp_15*tmp_96 + tmp_18*tmp_95 + tmp_21*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_104 = tmp_40*(tmp_103 + tmp_41);
      real_t tmp_105 = 0.37605877282253791*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_106 = tmp_40*(tmp_105 + tmp_48);
      real_t tmp_107 = 0.37605877282253791*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_108 = tmp_40*(tmp_107 + tmp_55);
      real_t tmp_109 = tmp_25*(tmp_104*tmp_32 + tmp_106*tmp_47 + tmp_108*tmp_54 - 1.0/4.0) + tmp_27*(tmp_104*tmp_64 + tmp_106*tmp_65 + tmp_108*tmp_66 - 1.0/4.0) + tmp_30*(tmp_104*tmp_61 + tmp_106*tmp_62 + tmp_108*tmp_63 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_68;
      real_t tmp_111 = tmp_105 + tmp_70;
      real_t tmp_112 = tmp_107 + tmp_72;
      real_t tmp_113 = tmp_110*tmp_23 + tmp_111*tmp_20 + tmp_112*tmp_17;
      real_t tmp_114 = tmp_110*tmp_22 + tmp_111*tmp_19 + tmp_112*tmp_16;
      real_t tmp_115 = tmp_110*tmp_21 + tmp_111*tmp_18 + tmp_112*tmp_15;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_120 = tmp_40*(tmp_119 + tmp_41);
      real_t tmp_121 = 0.78764240869137092*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_122 = tmp_40*(tmp_121 + tmp_48);
      real_t tmp_123 = 0.78764240869137092*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_124 = tmp_40*(tmp_123 + tmp_55);
      real_t tmp_125 = tmp_25*(tmp_120*tmp_32 + tmp_122*tmp_47 + tmp_124*tmp_54 - 1.0/4.0) + tmp_27*(tmp_120*tmp_64 + tmp_122*tmp_65 + tmp_124*tmp_66 - 1.0/4.0) + tmp_30*(tmp_120*tmp_61 + tmp_122*tmp_62 + tmp_124*tmp_63 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_68;
      real_t tmp_127 = tmp_121 + tmp_70;
      real_t tmp_128 = tmp_123 + tmp_72;
      real_t tmp_129 = tmp_126*tmp_23 + tmp_127*tmp_20 + tmp_128*tmp_17;
      real_t tmp_130 = tmp_126*tmp_22 + tmp_127*tmp_19 + tmp_128*tmp_16;
      real_t tmp_131 = tmp_126*tmp_21 + tmp_127*tmp_18 + tmp_128*tmp_15;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_136 = tmp_40*(tmp_135 + tmp_41);
      real_t tmp_137 = 0.58463275527740355*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_138 = tmp_40*(tmp_137 + tmp_48);
      real_t tmp_139 = 0.58463275527740355*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_140 = tmp_40*(tmp_139 + tmp_55);
      real_t tmp_141 = tmp_25*(tmp_136*tmp_32 + tmp_138*tmp_47 + tmp_140*tmp_54 - 1.0/4.0) + tmp_27*(tmp_136*tmp_64 + tmp_138*tmp_65 + tmp_140*tmp_66 - 1.0/4.0) + tmp_30*(tmp_136*tmp_61 + tmp_138*tmp_62 + tmp_140*tmp_63 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_68;
      real_t tmp_143 = tmp_137 + tmp_70;
      real_t tmp_144 = tmp_139 + tmp_72;
      real_t tmp_145 = tmp_142*tmp_23 + tmp_143*tmp_20 + tmp_144*tmp_17;
      real_t tmp_146 = tmp_142*tmp_22 + tmp_143*tmp_19 + tmp_144*tmp_16;
      real_t tmp_147 = tmp_142*tmp_21 + tmp_143*tmp_18 + tmp_144*tmp_15;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_152 = tmp_40*(tmp_151 + tmp_41);
      real_t tmp_153 = 0.041227165399737475*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_154 = tmp_40*(tmp_153 + tmp_48);
      real_t tmp_155 = 0.041227165399737475*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_156 = tmp_40*(tmp_155 + tmp_55);
      real_t tmp_157 = tmp_25*(tmp_152*tmp_32 + tmp_154*tmp_47 + tmp_156*tmp_54 - 1.0/4.0) + tmp_27*(tmp_152*tmp_64 + tmp_154*tmp_65 + tmp_156*tmp_66 - 1.0/4.0) + tmp_30*(tmp_152*tmp_61 + tmp_154*tmp_62 + tmp_156*tmp_63 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_68;
      real_t tmp_159 = tmp_153 + tmp_70;
      real_t tmp_160 = tmp_155 + tmp_72;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_168 = tmp_40*(tmp_167 + tmp_41);
      real_t tmp_169 = 0.039308471900058539*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_170 = tmp_40*(tmp_169 + tmp_48);
      real_t tmp_171 = 0.039308471900058539*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_172 = tmp_40*(tmp_171 + tmp_55);
      real_t tmp_173 = tmp_25*(tmp_168*tmp_32 + tmp_170*tmp_47 + tmp_172*tmp_54 - 1.0/4.0) + tmp_27*(tmp_168*tmp_64 + tmp_170*tmp_65 + tmp_172*tmp_66 - 1.0/4.0) + tmp_30*(tmp_168*tmp_61 + tmp_170*tmp_62 + tmp_172*tmp_63 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_68;
      real_t tmp_175 = tmp_169 + tmp_70;
      real_t tmp_176 = tmp_171 + tmp_72;
      real_t tmp_177 = tmp_17*tmp_176 + tmp_174*tmp_23 + tmp_175*tmp_20;
      real_t tmp_178 = tmp_16*tmp_176 + tmp_174*tmp_22 + tmp_175*tmp_19;
      real_t tmp_179 = tmp_15*tmp_176 + tmp_174*tmp_21 + tmp_175*tmp_18;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_184 = tmp_40*(tmp_183 + tmp_41);
      real_t tmp_185 = 0.78764240869137092*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_186 = tmp_40*(tmp_185 + tmp_48);
      real_t tmp_187 = 0.78764240869137092*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_188 = tmp_40*(tmp_187 + tmp_55);
      real_t tmp_189 = tmp_25*(tmp_184*tmp_32 + tmp_186*tmp_47 + tmp_188*tmp_54 - 1.0/4.0) + tmp_27*(tmp_184*tmp_64 + tmp_186*tmp_65 + tmp_188*tmp_66 - 1.0/4.0) + tmp_30*(tmp_184*tmp_61 + tmp_186*tmp_62 + tmp_188*tmp_63 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_68;
      real_t tmp_191 = tmp_185 + tmp_70;
      real_t tmp_192 = tmp_187 + tmp_72;
      real_t tmp_193 = tmp_17*tmp_192 + tmp_190*tmp_23 + tmp_191*tmp_20;
      real_t tmp_194 = tmp_16*tmp_192 + tmp_19*tmp_191 + tmp_190*tmp_22;
      real_t tmp_195 = tmp_15*tmp_192 + tmp_18*tmp_191 + tmp_190*tmp_21;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_200 = tmp_40*(tmp_199 + tmp_41);
      real_t tmp_201 = 0.58463275527740355*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_202 = tmp_40*(tmp_201 + tmp_48);
      real_t tmp_203 = 0.58463275527740355*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_204 = tmp_40*(tmp_203 + tmp_55);
      real_t tmp_205 = tmp_25*(tmp_200*tmp_32 + tmp_202*tmp_47 + tmp_204*tmp_54 - 1.0/4.0) + tmp_27*(tmp_200*tmp_64 + tmp_202*tmp_65 + tmp_204*tmp_66 - 1.0/4.0) + tmp_30*(tmp_200*tmp_61 + tmp_202*tmp_62 + tmp_204*tmp_63 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_68;
      real_t tmp_207 = tmp_201 + tmp_70;
      real_t tmp_208 = tmp_203 + tmp_72;
      real_t tmp_209 = tmp_17*tmp_208 + tmp_20*tmp_207 + tmp_206*tmp_23;
      real_t tmp_210 = tmp_16*tmp_208 + tmp_19*tmp_207 + tmp_206*tmp_22;
      real_t tmp_211 = tmp_15*tmp_208 + tmp_18*tmp_207 + tmp_206*tmp_21;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_216 = tmp_40*(tmp_215 + tmp_41);
      real_t tmp_217 = 0.1711304259088916*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_218 = tmp_40*(tmp_217 + tmp_48);
      real_t tmp_219 = 0.1711304259088916*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_220 = tmp_40*(tmp_219 + tmp_55);
      real_t tmp_221 = tmp_25*(tmp_216*tmp_32 + tmp_218*tmp_47 + tmp_220*tmp_54 - 1.0/4.0) + tmp_27*(tmp_216*tmp_64 + tmp_218*tmp_65 + tmp_220*tmp_66 - 1.0/4.0) + tmp_30*(tmp_216*tmp_61 + tmp_218*tmp_62 + tmp_220*tmp_63 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_68;
      real_t tmp_223 = tmp_217 + tmp_70;
      real_t tmp_224 = tmp_219 + tmp_72;
      real_t tmp_225 = tmp_17*tmp_224 + tmp_20*tmp_223 + tmp_222*tmp_23;
      real_t tmp_226 = tmp_16*tmp_224 + tmp_19*tmp_223 + tmp_22*tmp_222;
      real_t tmp_227 = tmp_15*tmp_224 + tmp_18*tmp_223 + tmp_21*tmp_222;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_232 = tmp_40*(tmp_231 + tmp_41);
      real_t tmp_233 = 0.37605877282253791*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_234 = tmp_40*(tmp_233 + tmp_48);
      real_t tmp_235 = 0.37605877282253791*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_236 = tmp_40*(tmp_235 + tmp_55);
      real_t tmp_237 = tmp_25*(tmp_232*tmp_32 + tmp_234*tmp_47 + tmp_236*tmp_54 - 1.0/4.0) + tmp_27*(tmp_232*tmp_64 + tmp_234*tmp_65 + tmp_236*tmp_66 - 1.0/4.0) + tmp_30*(tmp_232*tmp_61 + tmp_234*tmp_62 + tmp_236*tmp_63 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_68;
      real_t tmp_239 = tmp_233 + tmp_70;
      real_t tmp_240 = tmp_235 + tmp_72;
      real_t tmp_241 = tmp_17*tmp_240 + tmp_20*tmp_239 + tmp_23*tmp_238;
      real_t tmp_242 = tmp_16*tmp_240 + tmp_19*tmp_239 + tmp_22*tmp_238;
      real_t tmp_243 = tmp_15*tmp_240 + tmp_18*tmp_239 + tmp_21*tmp_238;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_248 = tmp_40*(tmp_247 + tmp_41);
      real_t tmp_249 = 0.041227165399737475*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_250 = tmp_40*(tmp_249 + tmp_48);
      real_t tmp_251 = 0.041227165399737475*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_252 = tmp_40*(tmp_251 + tmp_55);
      real_t tmp_253 = tmp_25*(tmp_248*tmp_32 + tmp_250*tmp_47 + tmp_252*tmp_54 - 1.0/4.0) + tmp_27*(tmp_248*tmp_64 + tmp_250*tmp_65 + tmp_252*tmp_66 - 1.0/4.0) + tmp_30*(tmp_248*tmp_61 + tmp_250*tmp_62 + tmp_252*tmp_63 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_68;
      real_t tmp_255 = tmp_249 + tmp_70;
      real_t tmp_256 = tmp_251 + tmp_72;
      real_t tmp_257 = tmp_17*tmp_256 + tmp_20*tmp_255 + tmp_23*tmp_254;
      real_t tmp_258 = tmp_16*tmp_256 + tmp_19*tmp_255 + tmp_22*tmp_254;
      real_t tmp_259 = tmp_15*tmp_256 + tmp_18*tmp_255 + tmp_21*tmp_254;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_43 + 0.19107600050469298*tmp_44;
      real_t tmp_264 = tmp_40*(tmp_263 + tmp_41);
      real_t tmp_265 = 0.40446199974765351*tmp_50 + 0.19107600050469298*tmp_51;
      real_t tmp_266 = tmp_40*(tmp_265 + tmp_48);
      real_t tmp_267 = 0.40446199974765351*tmp_57 + 0.19107600050469298*tmp_58;
      real_t tmp_268 = tmp_40*(tmp_267 + tmp_55);
      real_t tmp_269 = tmp_25*(tmp_264*tmp_32 + tmp_266*tmp_47 + tmp_268*tmp_54 - 1.0/4.0) + tmp_27*(tmp_264*tmp_64 + tmp_266*tmp_65 + tmp_268*tmp_66 - 1.0/4.0) + tmp_30*(tmp_264*tmp_61 + tmp_266*tmp_62 + tmp_268*tmp_63 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_68;
      real_t tmp_271 = tmp_265 + tmp_70;
      real_t tmp_272 = tmp_267 + tmp_72;
      real_t tmp_273 = tmp_17*tmp_272 + tmp_20*tmp_271 + tmp_23*tmp_270;
      real_t tmp_274 = tmp_16*tmp_272 + tmp_19*tmp_271 + tmp_22*tmp_270;
      real_t tmp_275 = tmp_15*tmp_272 + tmp_18*tmp_271 + tmp_21*tmp_270;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_280 = tmp_40*(tmp_279 + tmp_41);
      real_t tmp_281 = 0.039308471900058539*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_282 = tmp_40*(tmp_281 + tmp_48);
      real_t tmp_283 = 0.039308471900058539*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_284 = tmp_40*(tmp_283 + tmp_55);
      real_t tmp_285 = tmp_25*(tmp_280*tmp_32 + tmp_282*tmp_47 + tmp_284*tmp_54 - 1.0/4.0) + tmp_27*(tmp_280*tmp_64 + tmp_282*tmp_65 + tmp_284*tmp_66 - 1.0/4.0) + tmp_30*(tmp_280*tmp_61 + tmp_282*tmp_62 + tmp_284*tmp_63 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_68;
      real_t tmp_287 = tmp_281 + tmp_70;
      real_t tmp_288 = tmp_283 + tmp_72;
      real_t tmp_289 = tmp_17*tmp_288 + tmp_20*tmp_287 + tmp_23*tmp_286;
      real_t tmp_290 = tmp_16*tmp_288 + tmp_19*tmp_287 + tmp_22*tmp_286;
      real_t tmp_291 = tmp_15*tmp_288 + tmp_18*tmp_287 + tmp_21*tmp_286;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_296 = tmp_40*(tmp_295 + tmp_41);
      real_t tmp_297 = 0.93718850182767688*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_298 = tmp_40*(tmp_297 + tmp_48);
      real_t tmp_299 = 0.93718850182767688*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_300 = tmp_40*(tmp_299 + tmp_55);
      real_t tmp_301 = tmp_25*(tmp_296*tmp_32 + tmp_298*tmp_47 + tmp_300*tmp_54 - 1.0/4.0) + tmp_27*(tmp_296*tmp_64 + tmp_298*tmp_65 + tmp_300*tmp_66 - 1.0/4.0) + tmp_30*(tmp_296*tmp_61 + tmp_298*tmp_62 + tmp_300*tmp_63 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_68;
      real_t tmp_303 = tmp_297 + tmp_70;
      real_t tmp_304 = tmp_299 + tmp_72;
      real_t tmp_305 = tmp_17*tmp_304 + tmp_20*tmp_303 + tmp_23*tmp_302;
      real_t tmp_306 = tmp_16*tmp_304 + tmp_19*tmp_303 + tmp_22*tmp_302;
      real_t tmp_307 = tmp_15*tmp_304 + tmp_18*tmp_303 + tmp_21*tmp_302;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_312 = tmp_40*(tmp_311 + tmp_41);
      real_t tmp_313 = 0.60796128279561268*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_314 = tmp_40*(tmp_313 + tmp_48);
      real_t tmp_315 = 0.60796128279561268*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_316 = tmp_40*(tmp_315 + tmp_55);
      real_t tmp_317 = tmp_25*(tmp_312*tmp_32 + tmp_314*tmp_47 + tmp_316*tmp_54 - 1.0/4.0) + tmp_27*(tmp_312*tmp_64 + tmp_314*tmp_65 + tmp_316*tmp_66 - 1.0/4.0) + tmp_30*(tmp_312*tmp_61 + tmp_314*tmp_62 + tmp_316*tmp_63 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_68;
      real_t tmp_319 = tmp_313 + tmp_70;
      real_t tmp_320 = tmp_315 + tmp_72;
      real_t tmp_321 = tmp_17*tmp_320 + tmp_20*tmp_319 + tmp_23*tmp_318;
      real_t tmp_322 = tmp_16*tmp_320 + tmp_19*tmp_319 + tmp_22*tmp_318;
      real_t tmp_323 = tmp_15*tmp_320 + tmp_18*tmp_319 + tmp_21*tmp_318;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_328 = tmp_40*(tmp_327 + tmp_41);
      real_t tmp_329 = 0.19107600050469298*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_330 = tmp_40*(tmp_329 + tmp_48);
      real_t tmp_331 = 0.19107600050469298*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_332 = tmp_40*(tmp_331 + tmp_55);
      real_t tmp_333 = tmp_25*(tmp_32*tmp_328 + tmp_330*tmp_47 + tmp_332*tmp_54 - 1.0/4.0) + tmp_27*(tmp_328*tmp_64 + tmp_330*tmp_65 + tmp_332*tmp_66 - 1.0/4.0) + tmp_30*(tmp_328*tmp_61 + tmp_330*tmp_62 + tmp_332*tmp_63 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_68;
      real_t tmp_335 = tmp_329 + tmp_70;
      real_t tmp_336 = tmp_331 + tmp_72;
      real_t tmp_337 = tmp_17*tmp_336 + tmp_20*tmp_335 + tmp_23*tmp_334;
      real_t tmp_338 = tmp_16*tmp_336 + tmp_19*tmp_335 + tmp_22*tmp_334;
      real_t tmp_339 = tmp_15*tmp_336 + tmp_18*tmp_335 + tmp_21*tmp_334;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_344 = tmp_40*(tmp_343 + tmp_41);
      real_t tmp_345 = 0.031405749086161582*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_346 = tmp_40*(tmp_345 + tmp_48);
      real_t tmp_347 = 0.031405749086161582*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_348 = tmp_40*(tmp_347 + tmp_55);
      real_t tmp_349 = tmp_25*(tmp_32*tmp_344 + tmp_346*tmp_47 + tmp_348*tmp_54 - 1.0/4.0) + tmp_27*(tmp_344*tmp_64 + tmp_346*tmp_65 + tmp_348*tmp_66 - 1.0/4.0) + tmp_30*(tmp_344*tmp_61 + tmp_346*tmp_62 + tmp_348*tmp_63 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_68;
      real_t tmp_351 = tmp_345 + tmp_70;
      real_t tmp_352 = tmp_347 + tmp_72;
      real_t tmp_353 = tmp_17*tmp_352 + tmp_20*tmp_351 + tmp_23*tmp_350;
      real_t tmp_354 = tmp_16*tmp_352 + tmp_19*tmp_351 + tmp_22*tmp_350;
      real_t tmp_355 = tmp_15*tmp_352 + tmp_18*tmp_351 + tmp_21*tmp_350;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_360 = tmp_40*(tmp_359 + tmp_41);
      real_t tmp_361 = 0.19601935860219369*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_362 = tmp_40*(tmp_361 + tmp_48);
      real_t tmp_363 = 0.19601935860219369*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_364 = tmp_40*(tmp_363 + tmp_55);
      real_t tmp_365 = tmp_25*(tmp_32*tmp_360 + tmp_362*tmp_47 + tmp_364*tmp_54 - 1.0/4.0) + tmp_27*(tmp_360*tmp_64 + tmp_362*tmp_65 + tmp_364*tmp_66 - 1.0/4.0) + tmp_30*(tmp_360*tmp_61 + tmp_362*tmp_62 + tmp_364*tmp_63 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_68;
      real_t tmp_367 = tmp_361 + tmp_70;
      real_t tmp_368 = tmp_363 + tmp_72;
      real_t tmp_369 = tmp_17*tmp_368 + tmp_20*tmp_367 + tmp_23*tmp_366;
      real_t tmp_370 = tmp_16*tmp_368 + tmp_19*tmp_367 + tmp_22*tmp_366;
      real_t tmp_371 = tmp_15*tmp_368 + tmp_18*tmp_367 + tmp_21*tmp_366;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_376 = tmp_40*(tmp_375 + tmp_41);
      real_t tmp_377 = 0.40446199974765351*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_378 = tmp_40*(tmp_377 + tmp_48);
      real_t tmp_379 = 0.40446199974765351*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_380 = tmp_40*(tmp_379 + tmp_55);
      real_t tmp_381 = tmp_25*(tmp_32*tmp_376 + tmp_378*tmp_47 + tmp_380*tmp_54 - 1.0/4.0) + tmp_27*(tmp_376*tmp_64 + tmp_378*tmp_65 + tmp_380*tmp_66 - 1.0/4.0) + tmp_30*(tmp_376*tmp_61 + tmp_378*tmp_62 + tmp_380*tmp_63 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_68;
      real_t tmp_383 = tmp_377 + tmp_70;
      real_t tmp_384 = tmp_379 + tmp_72;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_392 = tmp_40*(tmp_391 + tmp_41);
      real_t tmp_393 = 0.1711304259088916*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_394 = tmp_40*(tmp_393 + tmp_48);
      real_t tmp_395 = 0.1711304259088916*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_396 = tmp_40*(tmp_395 + tmp_55);
      real_t tmp_397 = tmp_25*(tmp_32*tmp_392 + tmp_394*tmp_47 + tmp_396*tmp_54 - 1.0/4.0) + tmp_27*(tmp_392*tmp_64 + tmp_394*tmp_65 + tmp_396*tmp_66 - 1.0/4.0) + tmp_30*(tmp_392*tmp_61 + tmp_394*tmp_62 + tmp_396*tmp_63 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_68;
      real_t tmp_399 = tmp_393 + tmp_70;
      real_t tmp_400 = tmp_395 + tmp_72;
      real_t tmp_401 = tmp_17*tmp_400 + tmp_20*tmp_399 + tmp_23*tmp_398;
      real_t tmp_402 = tmp_16*tmp_400 + tmp_19*tmp_399 + tmp_22*tmp_398;
      real_t tmp_403 = tmp_15*tmp_400 + tmp_18*tmp_399 + tmp_21*tmp_398;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_408 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_409 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 - tmp_100*tmp_81 + 0.5*tmp_24*tmp_93) + tmp_118*(0.5*tmp_109*tmp_24 - tmp_116*tmp_117 - tmp_116*tmp_81) + tmp_134*(0.5*tmp_125*tmp_24 - tmp_132*tmp_133 - tmp_132*tmp_81) + tmp_150*(0.5*tmp_141*tmp_24 - tmp_148*tmp_149 - tmp_148*tmp_81) + tmp_166*(0.5*tmp_157*tmp_24 - tmp_164*tmp_165 - tmp_164*tmp_81) + tmp_182*(0.5*tmp_173*tmp_24 - tmp_180*tmp_181 - tmp_180*tmp_81) + tmp_198*(0.5*tmp_189*tmp_24 - tmp_196*tmp_197 - tmp_196*tmp_81) + tmp_214*(0.5*tmp_205*tmp_24 - tmp_212*tmp_213 - tmp_212*tmp_81) + tmp_230*(0.5*tmp_221*tmp_24 - tmp_228*tmp_229 - tmp_228*tmp_81) + tmp_246*(0.5*tmp_237*tmp_24 - tmp_244*tmp_245 - tmp_244*tmp_81) + tmp_262*(0.5*tmp_24*tmp_253 - tmp_260*tmp_261 - tmp_260*tmp_81) + tmp_278*(0.5*tmp_24*tmp_269 - tmp_276*tmp_277 - tmp_276*tmp_81) + tmp_294*(0.5*tmp_24*tmp_285 - tmp_292*tmp_293 - tmp_292*tmp_81) + tmp_310*(0.5*tmp_24*tmp_301 - tmp_308*tmp_309 - tmp_308*tmp_81) + tmp_326*(0.5*tmp_24*tmp_317 - tmp_324*tmp_325 - tmp_324*tmp_81) + tmp_342*(0.5*tmp_24*tmp_333 - tmp_340*tmp_341 - tmp_340*tmp_81) + tmp_358*(0.5*tmp_24*tmp_349 - tmp_356*tmp_357 - tmp_356*tmp_81) + tmp_374*(0.5*tmp_24*tmp_365 - tmp_372*tmp_373 - tmp_372*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_388*tmp_389 - tmp_388*tmp_81) + tmp_406*(0.5*tmp_24*tmp_397 - tmp_404*tmp_405 - tmp_404*tmp_81) + tmp_86*(0.5*tmp_24*tmp_67 - tmp_77*tmp_81 - tmp_77*tmp_84);
      real_t a_1_0 = tmp_102*(-tmp_101*tmp_97 + 0.5*tmp_407*tmp_93 - tmp_81*tmp_97) + tmp_118*(0.5*tmp_109*tmp_407 - tmp_113*tmp_117 - tmp_113*tmp_81) + tmp_134*(0.5*tmp_125*tmp_407 - tmp_129*tmp_133 - tmp_129*tmp_81) + tmp_150*(0.5*tmp_141*tmp_407 - tmp_145*tmp_149 - tmp_145*tmp_81) + tmp_166*(0.5*tmp_157*tmp_407 - tmp_161*tmp_165 - tmp_161*tmp_81) + tmp_182*(0.5*tmp_173*tmp_407 - tmp_177*tmp_181 - tmp_177*tmp_81) + tmp_198*(0.5*tmp_189*tmp_407 - tmp_193*tmp_197 - tmp_193*tmp_81) + tmp_214*(0.5*tmp_205*tmp_407 - tmp_209*tmp_213 - tmp_209*tmp_81) + tmp_230*(0.5*tmp_221*tmp_407 - tmp_225*tmp_229 - tmp_225*tmp_81) + tmp_246*(0.5*tmp_237*tmp_407 - tmp_241*tmp_245 - tmp_241*tmp_81) + tmp_262*(0.5*tmp_253*tmp_407 - tmp_257*tmp_261 - tmp_257*tmp_81) + tmp_278*(0.5*tmp_269*tmp_407 - tmp_273*tmp_277 - tmp_273*tmp_81) + tmp_294*(0.5*tmp_285*tmp_407 - tmp_289*tmp_293 - tmp_289*tmp_81) + tmp_310*(0.5*tmp_301*tmp_407 - tmp_305*tmp_309 - tmp_305*tmp_81) + tmp_326*(0.5*tmp_317*tmp_407 - tmp_321*tmp_325 - tmp_321*tmp_81) + tmp_342*(0.5*tmp_333*tmp_407 - tmp_337*tmp_341 - tmp_337*tmp_81) + tmp_358*(0.5*tmp_349*tmp_407 - tmp_353*tmp_357 - tmp_353*tmp_81) + tmp_374*(0.5*tmp_365*tmp_407 - tmp_369*tmp_373 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_381*tmp_407 - tmp_385*tmp_389 - tmp_385*tmp_81) + tmp_406*(0.5*tmp_397*tmp_407 - tmp_401*tmp_405 - tmp_401*tmp_81) + tmp_86*(0.5*tmp_407*tmp_67 - tmp_74*tmp_81 - tmp_74*tmp_84);
      real_t a_2_0 = tmp_102*(-tmp_101*tmp_98 + 0.5*tmp_408*tmp_93 - tmp_81*tmp_98) + tmp_118*(0.5*tmp_109*tmp_408 - tmp_114*tmp_117 - tmp_114*tmp_81) + tmp_134*(0.5*tmp_125*tmp_408 - tmp_130*tmp_133 - tmp_130*tmp_81) + tmp_150*(0.5*tmp_141*tmp_408 - tmp_146*tmp_149 - tmp_146*tmp_81) + tmp_166*(0.5*tmp_157*tmp_408 - tmp_162*tmp_165 - tmp_162*tmp_81) + tmp_182*(0.5*tmp_173*tmp_408 - tmp_178*tmp_181 - tmp_178*tmp_81) + tmp_198*(0.5*tmp_189*tmp_408 - tmp_194*tmp_197 - tmp_194*tmp_81) + tmp_214*(0.5*tmp_205*tmp_408 - tmp_210*tmp_213 - tmp_210*tmp_81) + tmp_230*(0.5*tmp_221*tmp_408 - tmp_226*tmp_229 - tmp_226*tmp_81) + tmp_246*(0.5*tmp_237*tmp_408 - tmp_242*tmp_245 - tmp_242*tmp_81) + tmp_262*(0.5*tmp_253*tmp_408 - tmp_258*tmp_261 - tmp_258*tmp_81) + tmp_278*(0.5*tmp_269*tmp_408 - tmp_274*tmp_277 - tmp_274*tmp_81) + tmp_294*(0.5*tmp_285*tmp_408 - tmp_290*tmp_293 - tmp_290*tmp_81) + tmp_310*(0.5*tmp_301*tmp_408 - tmp_306*tmp_309 - tmp_306*tmp_81) + tmp_326*(0.5*tmp_317*tmp_408 - tmp_322*tmp_325 - tmp_322*tmp_81) + tmp_342*(0.5*tmp_333*tmp_408 - tmp_338*tmp_341 - tmp_338*tmp_81) + tmp_358*(0.5*tmp_349*tmp_408 - tmp_354*tmp_357 - tmp_354*tmp_81) + tmp_374*(0.5*tmp_365*tmp_408 - tmp_370*tmp_373 - tmp_370*tmp_81) + tmp_390*(0.5*tmp_381*tmp_408 - tmp_386*tmp_389 - tmp_386*tmp_81) + tmp_406*(0.5*tmp_397*tmp_408 - tmp_402*tmp_405 - tmp_402*tmp_81) + tmp_86*(0.5*tmp_408*tmp_67 - tmp_75*tmp_81 - tmp_75*tmp_84);
      real_t a_3_0 = tmp_102*(-tmp_101*tmp_99 + 0.5*tmp_409*tmp_93 - tmp_81*tmp_99) + tmp_118*(0.5*tmp_109*tmp_409 - tmp_115*tmp_117 - tmp_115*tmp_81) + tmp_134*(0.5*tmp_125*tmp_409 - tmp_131*tmp_133 - tmp_131*tmp_81) + tmp_150*(0.5*tmp_141*tmp_409 - tmp_147*tmp_149 - tmp_147*tmp_81) + tmp_166*(0.5*tmp_157*tmp_409 - tmp_163*tmp_165 - tmp_163*tmp_81) + tmp_182*(0.5*tmp_173*tmp_409 - tmp_179*tmp_181 - tmp_179*tmp_81) + tmp_198*(0.5*tmp_189*tmp_409 - tmp_195*tmp_197 - tmp_195*tmp_81) + tmp_214*(0.5*tmp_205*tmp_409 - tmp_211*tmp_213 - tmp_211*tmp_81) + tmp_230*(0.5*tmp_221*tmp_409 - tmp_227*tmp_229 - tmp_227*tmp_81) + tmp_246*(0.5*tmp_237*tmp_409 - tmp_243*tmp_245 - tmp_243*tmp_81) + tmp_262*(0.5*tmp_253*tmp_409 - tmp_259*tmp_261 - tmp_259*tmp_81) + tmp_278*(0.5*tmp_269*tmp_409 - tmp_275*tmp_277 - tmp_275*tmp_81) + tmp_294*(0.5*tmp_285*tmp_409 - tmp_291*tmp_293 - tmp_291*tmp_81) + tmp_310*(0.5*tmp_301*tmp_409 - tmp_307*tmp_309 - tmp_307*tmp_81) + tmp_326*(0.5*tmp_317*tmp_409 - tmp_323*tmp_325 - tmp_323*tmp_81) + tmp_342*(0.5*tmp_333*tmp_409 - tmp_339*tmp_341 - tmp_339*tmp_81) + tmp_358*(0.5*tmp_349*tmp_409 - tmp_355*tmp_357 - tmp_355*tmp_81) + tmp_374*(0.5*tmp_365*tmp_409 - tmp_371*tmp_373 - tmp_371*tmp_81) + tmp_390*(0.5*tmp_381*tmp_409 - tmp_387*tmp_389 - tmp_387*tmp_81) + tmp_406*(0.5*tmp_397*tmp_409 - tmp_403*tmp_405 - tmp_403*tmp_81) + tmp_86*(0.5*tmp_409*tmp_67 - tmp_76*tmp_81 - tmp_76*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_0*(tmp_40 - 1.0/4.0) + tmp_10*(tmp_42 - 1.0/4.0) + tmp_3*(tmp_41 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_0*tmp_17 + tmp_10*tmp_15 + tmp_16*tmp_3) + p_affine_13_1*(tmp_0*tmp_20 + tmp_10*tmp_18 + tmp_19*tmp_3) + p_affine_13_2*(tmp_0*tmp_23 + tmp_10*tmp_21 + tmp_22*tmp_3);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_10*(tmp_55 - 1.0/4.0) + tmp_3*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_10*(tmp_64 - 1.0/4.0) + tmp_3*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_10*(tmp_73 - 1.0/4.0) + tmp_3*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_10*(tmp_82 - 1.0/4.0) + tmp_3*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_10*(tmp_91 - 1.0/4.0) + tmp_3*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_10*(tmp_100 - 1.0/4.0) + tmp_3*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_10*(tmp_109 - 1.0/4.0) + tmp_3*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_10*(tmp_118 - 1.0/4.0) + tmp_3*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_10*(tmp_127 - 1.0/4.0) + tmp_3*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_10*(tmp_136 - 1.0/4.0) + tmp_3*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_10*(tmp_145 - 1.0/4.0) + tmp_3*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_10*(tmp_154 - 1.0/4.0) + tmp_3*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_10*(tmp_163 - 1.0/4.0) + tmp_3*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_10*(tmp_172 - 1.0/4.0) + tmp_3*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_10*(tmp_181 - 1.0/4.0) + tmp_3*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_10*(tmp_190 - 1.0/4.0) + tmp_3*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_10*(tmp_199 - 1.0/4.0) + tmp_3*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_10*(tmp_208 - 1.0/4.0) + tmp_3*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_10*(tmp_217 - 1.0/4.0) + tmp_3*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_10*(tmp_226 - 1.0/4.0) + tmp_3*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_P1P1_22 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1P1_22()
: callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
    {}



void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g2_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id20 = 0;
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id0 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id1 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id2 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id3 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id4 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id5 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id6 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id7 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id8 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id9 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id10 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id11 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id12 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id13 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id14 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id15 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id16 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id17 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id18 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id19 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id20 );
      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_45 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_46 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g2_out0_id0*tmp_45;
      real_t tmp_47 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_48 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_49 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_50 = tmp_26*tmp_47 + tmp_30*tmp_48 + tmp_34*tmp_49;
      real_t tmp_51 = tmp_36*tmp_47 + tmp_37*tmp_48 + tmp_38*tmp_49;
      real_t tmp_52 = tmp_40*tmp_47 + tmp_41*tmp_48 + tmp_42*tmp_49;
      real_t tmp_53 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_45;
      real_t tmp_54 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_55 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_56 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_57 = tmp_26*tmp_54 + tmp_30*tmp_55 + tmp_34*tmp_56;
      real_t tmp_58 = tmp_36*tmp_54 + tmp_37*tmp_55 + tmp_38*tmp_56;
      real_t tmp_59 = tmp_40*tmp_54 + tmp_41*tmp_55 + tmp_42*tmp_56;
      real_t tmp_60 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_45;
      real_t tmp_61 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_62 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_63 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_64 = tmp_26*tmp_61 + tmp_30*tmp_62 + tmp_34*tmp_63;
      real_t tmp_65 = tmp_36*tmp_61 + tmp_37*tmp_62 + tmp_38*tmp_63;
      real_t tmp_66 = tmp_40*tmp_61 + tmp_41*tmp_62 + tmp_42*tmp_63;
      real_t tmp_67 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id11*tmp_45;
      real_t tmp_68 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_69 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_70 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_71 = tmp_26*tmp_68 + tmp_30*tmp_69 + tmp_34*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g2_out0_id12*tmp_45;
      real_t tmp_75 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_76 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_77 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_78 = tmp_26*tmp_75 + tmp_30*tmp_76 + tmp_34*tmp_77;
      real_t tmp_79 = tmp_36*tmp_75 + tmp_37*tmp_76 + tmp_38*tmp_77;
      real_t tmp_80 = tmp_40*tmp_75 + tmp_41*tmp_76 + tmp_42*tmp_77;
      real_t tmp_81 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_45;
      real_t tmp_82 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_83 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_84 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_85 = tmp_26*tmp_82 + tmp_30*tmp_83 + tmp_34*tmp_84;
      real_t tmp_86 = tmp_36*tmp_82 + tmp_37*tmp_83 + tmp_38*tmp_84;
      real_t tmp_87 = tmp_40*tmp_82 + tmp_41*tmp_83 + tmp_42*tmp_84;
      real_t tmp_88 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g2_out0_id14*tmp_45;
      real_t tmp_89 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_90 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_91 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g2_out0_id15*tmp_45;
      real_t tmp_96 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_97 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_98 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_99 = tmp_26*tmp_96 + tmp_30*tmp_97 + tmp_34*tmp_98;
      real_t tmp_100 = tmp_36*tmp_96 + tmp_37*tmp_97 + tmp_38*tmp_98;
      real_t tmp_101 = tmp_40*tmp_96 + tmp_41*tmp_97 + tmp_42*tmp_98;
      real_t tmp_102 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_45;
      real_t tmp_103 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_104 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_105 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_106 = tmp_103*tmp_26 + tmp_104*tmp_30 + tmp_105*tmp_34;
      real_t tmp_107 = tmp_103*tmp_36 + tmp_104*tmp_37 + tmp_105*tmp_38;
      real_t tmp_108 = tmp_103*tmp_40 + tmp_104*tmp_41 + tmp_105*tmp_42;
      real_t tmp_109 = 0.0068572537431980923*Scalar_Variable_Coefficient_3D_g2_out0_id17*tmp_45;
      real_t tmp_110 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_111 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_112 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_113 = tmp_110*tmp_26 + tmp_111*tmp_30 + tmp_112*tmp_34;
      real_t tmp_114 = tmp_110*tmp_36 + tmp_111*tmp_37 + tmp_112*tmp_38;
      real_t tmp_115 = tmp_110*tmp_40 + tmp_111*tmp_41 + tmp_112*tmp_42;
      real_t tmp_116 = 0.037198804536718075*Scalar_Variable_Coefficient_3D_g2_out0_id18*tmp_45;
      real_t tmp_117 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_118 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_119 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_120 = tmp_117*tmp_26 + tmp_118*tmp_30 + tmp_119*tmp_34;
      real_t tmp_121 = tmp_117*tmp_36 + tmp_118*tmp_37 + tmp_119*tmp_38;
      real_t tmp_122 = tmp_117*tmp_40 + tmp_118*tmp_41 + tmp_119*tmp_42;
      real_t tmp_123 = 0.042507265838595799*Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_45;
      real_t tmp_124 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_125 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_126 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_127 = tmp_124*tmp_26 + tmp_125*tmp_30 + tmp_126*tmp_34;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id2*tmp_45;
      real_t tmp_131 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_132 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_133 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_134 = tmp_131*tmp_26 + tmp_132*tmp_30 + tmp_133*tmp_34;
      real_t tmp_135 = tmp_131*tmp_36 + tmp_132*tmp_37 + tmp_133*tmp_38;
      real_t tmp_136 = tmp_131*tmp_40 + tmp_132*tmp_41 + tmp_133*tmp_42;
      real_t tmp_137 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id20*tmp_45;
      real_t tmp_138 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_139 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_140 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_141 = tmp_138*tmp_26 + tmp_139*tmp_30 + tmp_140*tmp_34;
      real_t tmp_142 = tmp_138*tmp_36 + tmp_139*tmp_37 + tmp_140*tmp_38;
      real_t tmp_143 = tmp_138*tmp_40 + tmp_139*tmp_41 + tmp_140*tmp_42;
      real_t tmp_144 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id3*tmp_45;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_45;
      real_t tmp_152 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_153 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_154 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_155 = tmp_152*tmp_26 + tmp_153*tmp_30 + tmp_154*tmp_34;
      real_t tmp_156 = tmp_152*tmp_36 + tmp_153*tmp_37 + tmp_154*tmp_38;
      real_t tmp_157 = tmp_152*tmp_40 + tmp_153*tmp_41 + tmp_154*tmp_42;
      real_t tmp_158 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id5*tmp_45;
      real_t tmp_159 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_160 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_161 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_162 = tmp_159*tmp_26 + tmp_160*tmp_30 + tmp_161*tmp_34;
      real_t tmp_163 = tmp_159*tmp_36 + tmp_160*tmp_37 + tmp_161*tmp_38;
      real_t tmp_164 = tmp_159*tmp_40 + tmp_160*tmp_41 + tmp_161*tmp_42;
      real_t tmp_165 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id6*tmp_45;
      real_t tmp_166 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_167 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_168 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_169 = tmp_166*tmp_26 + tmp_167*tmp_30 + tmp_168*tmp_34;
      real_t tmp_170 = tmp_166*tmp_36 + tmp_167*tmp_37 + tmp_168*tmp_38;
      real_t tmp_171 = tmp_166*tmp_40 + tmp_167*tmp_41 + tmp_168*tmp_42;
      real_t tmp_172 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_45;
      real_t tmp_173 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_174 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_175 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_176 = tmp_173*tmp_26 + tmp_174*tmp_30 + tmp_175*tmp_34;
      real_t tmp_177 = tmp_173*tmp_36 + tmp_174*tmp_37 + tmp_175*tmp_38;
      real_t tmp_178 = tmp_173*tmp_40 + tmp_174*tmp_41 + tmp_175*tmp_42;
      real_t tmp_179 = 0.020848748529055869*Scalar_Variable_Coefficient_3D_g2_out0_id8*tmp_45;
      real_t tmp_180 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_181 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_182 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_183 = tmp_180*tmp_26 + tmp_181*tmp_30 + tmp_182*tmp_34;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = 0.019202922745021479*Scalar_Variable_Coefficient_3D_g2_out0_id9*tmp_45;
      real_t tmp_187 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_188 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_189 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t a_0_0 = tmp_102*(-tmp_44 + 3.0*tmp_7*(-tmp_100 - tmp_101 - tmp_99 + 1)) + tmp_109*(-tmp_44 + 3.0*tmp_7*(-tmp_106 - tmp_107 - tmp_108 + 1)) + tmp_116*(-tmp_44 + 3.0*tmp_7*(-tmp_113 - tmp_114 - tmp_115 + 1)) + tmp_123*(-tmp_44 + 3.0*tmp_7*(-tmp_120 - tmp_121 - tmp_122 + 1)) + tmp_130*(-tmp_44 + 3.0*tmp_7*(-tmp_127 - tmp_128 - tmp_129 + 1)) + tmp_137*(-tmp_44 + 3.0*tmp_7*(-tmp_134 - tmp_135 - tmp_136 + 1)) + tmp_144*(-tmp_44 + 3.0*tmp_7*(-tmp_141 - tmp_142 - tmp_143 + 1)) + tmp_151*(-tmp_44 + 3.0*tmp_7*(-tmp_148 - tmp_149 - tmp_150 + 1)) + tmp_158*(-tmp_44 + 3.0*tmp_7*(-tmp_155 - tmp_156 - tmp_157 + 1)) + tmp_165*(-tmp_44 + 3.0*tmp_7*(-tmp_162 - tmp_163 - tmp_164 + 1)) + tmp_172*(-tmp_44 + 3.0*tmp_7*(-tmp_169 - tmp_170 - tmp_171 + 1)) + tmp_179*(-tmp_44 + 3.0*tmp_7*(-tmp_176 - tmp_177 - tmp_178 + 1)) + tmp_186*(-tmp_44 + 3.0*tmp_7*(-tmp_183 - tmp_184 - tmp_185 + 1)) + tmp_46*(-tmp_44 + 3.0*tmp_7*(-tmp_35 - tmp_39 - tmp_43 + 1)) + tmp_53*(-tmp_44 + 3.0*tmp_7*(-tmp_50 - tmp_51 - tmp_52 + 1)) + tmp_60*(-tmp_44 + 3.0*tmp_7*(-tmp_57 - tmp_58 - tmp_59 + 1)) + tmp_67*(-tmp_44 + 3.0*tmp_7*(-tmp_64 - tmp_65 - tmp_66 + 1)) + tmp_74*(-tmp_44 + 3.0*tmp_7*(-tmp_71 - tmp_72 - tmp_73 + 1)) + tmp_81*(-tmp_44 + 3.0*tmp_7*(-tmp_78 - tmp_79 - tmp_80 + 1)) + tmp_88*(-tmp_44 + 3.0*tmp_7*(-tmp_85 - tmp_86 - tmp_87 + 1)) + tmp_95*(-tmp_44 + 3.0*tmp_7*(-tmp_92 - tmp_93 - tmp_94 + 1));
      real_t a_1_0 = tmp_102*(-tmp_187 + 3.0*tmp_7*tmp_99) + tmp_109*(3.0*tmp_106*tmp_7 - tmp_187) + tmp_116*(3.0*tmp_113*tmp_7 - tmp_187) + tmp_123*(3.0*tmp_120*tmp_7 - tmp_187) + tmp_130*(3.0*tmp_127*tmp_7 - tmp_187) + tmp_137*(3.0*tmp_134*tmp_7 - tmp_187) + tmp_144*(3.0*tmp_141*tmp_7 - tmp_187) + tmp_151*(3.0*tmp_148*tmp_7 - tmp_187) + tmp_158*(3.0*tmp_155*tmp_7 - tmp_187) + tmp_165*(3.0*tmp_162*tmp_7 - tmp_187) + tmp_172*(3.0*tmp_169*tmp_7 - tmp_187) + tmp_179*(3.0*tmp_176*tmp_7 - tmp_187) + tmp_186*(3.0*tmp_183*tmp_7 - tmp_187) + tmp_46*(-tmp_187 + 3.0*tmp_35*tmp_7) + tmp_53*(-tmp_187 + 3.0*tmp_50*tmp_7) + tmp_60*(-tmp_187 + 3.0*tmp_57*tmp_7) + tmp_67*(-tmp_187 + 3.0*tmp_64*tmp_7) + tmp_74*(-tmp_187 + 3.0*tmp_7*tmp_71) + tmp_81*(-tmp_187 + 3.0*tmp_7*tmp_78) + tmp_88*(-tmp_187 + 3.0*tmp_7*tmp_85) + tmp_95*(-tmp_187 + 3.0*tmp_7*tmp_92);
      real_t a_2_0 = tmp_102*(3.0*tmp_100*tmp_7 - tmp_188) + tmp_109*(3.0*tmp_107*tmp_7 - tmp_188) + tmp_116*(3.0*tmp_114*tmp_7 - tmp_188) + tmp_123*(3.0*tmp_121*tmp_7 - tmp_188) + tmp_130*(3.0*tmp_128*tmp_7 - tmp_188) + tmp_137*(3.0*tmp_135*tmp_7 - tmp_188) + tmp_144*(3.0*tmp_142*tmp_7 - tmp_188) + tmp_151*(3.0*tmp_149*tmp_7 - tmp_188) + tmp_158*(3.0*tmp_156*tmp_7 - tmp_188) + tmp_165*(3.0*tmp_163*tmp_7 - tmp_188) + tmp_172*(3.0*tmp_170*tmp_7 - tmp_188) + tmp_179*(3.0*tmp_177*tmp_7 - tmp_188) + tmp_186*(3.0*tmp_184*tmp_7 - tmp_188) + tmp_46*(-tmp_188 + 3.0*tmp_39*tmp_7) + tmp_53*(-tmp_188 + 3.0*tmp_51*tmp_7) + tmp_60*(-tmp_188 + 3.0*tmp_58*tmp_7) + tmp_67*(-tmp_188 + 3.0*tmp_65*tmp_7) + tmp_74*(-tmp_188 + 3.0*tmp_7*tmp_72) + tmp_81*(-tmp_188 + 3.0*tmp_7*tmp_79) + tmp_88*(-tmp_188 + 3.0*tmp_7*tmp_86) + tmp_95*(-tmp_188 + 3.0*tmp_7*tmp_93);
      real_t a_3_0 = tmp_102*(3.0*tmp_101*tmp_7 - tmp_189) + tmp_109*(3.0*tmp_108*tmp_7 - tmp_189) + tmp_116*(3.0*tmp_115*tmp_7 - tmp_189) + tmp_123*(3.0*tmp_122*tmp_7 - tmp_189) + tmp_130*(3.0*tmp_129*tmp_7 - tmp_189) + tmp_137*(3.0*tmp_136*tmp_7 - tmp_189) + tmp_144*(3.0*tmp_143*tmp_7 - tmp_189) + tmp_151*(3.0*tmp_150*tmp_7 - tmp_189) + tmp_158*(3.0*tmp_157*tmp_7 - tmp_189) + tmp_165*(3.0*tmp_164*tmp_7 - tmp_189) + tmp_172*(3.0*tmp_171*tmp_7 - tmp_189) + tmp_179*(3.0*tmp_178*tmp_7 - tmp_189) + tmp_186*(3.0*tmp_185*tmp_7 - tmp_189) + tmp_46*(-tmp_189 + 3.0*tmp_43*tmp_7) + tmp_53*(-tmp_189 + 3.0*tmp_52*tmp_7) + tmp_60*(-tmp_189 + 3.0*tmp_59*tmp_7) + tmp_67*(-tmp_189 + 3.0*tmp_66*tmp_7) + tmp_74*(-tmp_189 + 3.0*tmp_7*tmp_73) + tmp_81*(-tmp_189 + 3.0*tmp_7*tmp_80) + tmp_88*(-tmp_189 + 3.0*tmp_7*tmp_87) + tmp_95*(-tmp_189 + 3.0*tmp_7*tmp_94);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_10 - tmp_14;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_24 = tmp_16*tmp_23;
      real_t tmp_25 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = -tmp_24 - tmp_26 - tmp_28;
      real_t tmp_30 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_31 = tmp_16*tmp_30;
      real_t tmp_32 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_33 = tmp_16*tmp_32;
      real_t tmp_34 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_35 = tmp_16*tmp_34;
      real_t tmp_36 = -tmp_31 - tmp_33 - tmp_35;
      real_t tmp_37 = p_affine_0_0*p_affine_1_1;
      real_t tmp_38 = p_affine_0_0*p_affine_1_2;
      real_t tmp_39 = p_affine_2_1*p_affine_3_2;
      real_t tmp_40 = p_affine_0_1*p_affine_1_0;
      real_t tmp_41 = p_affine_0_1*p_affine_1_2;
      real_t tmp_42 = p_affine_2_2*p_affine_3_0;
      real_t tmp_43 = p_affine_0_2*p_affine_1_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_1;
      real_t tmp_45 = p_affine_2_0*p_affine_3_1;
      real_t tmp_46 = p_affine_2_2*p_affine_3_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_0;
      real_t tmp_49 = std::abs(p_affine_0_0*tmp_39 - p_affine_0_0*tmp_46 + p_affine_0_1*tmp_42 - p_affine_0_1*tmp_47 + p_affine_0_2*tmp_45 - p_affine_0_2*tmp_48 - p_affine_1_0*tmp_39 + p_affine_1_0*tmp_46 - p_affine_1_1*tmp_42 + p_affine_1_1*tmp_47 - p_affine_1_2*tmp_45 + p_affine_1_2*tmp_48 + p_affine_2_0*tmp_41 - p_affine_2_0*tmp_44 - p_affine_2_1*tmp_38 + p_affine_2_1*tmp_43 + p_affine_2_2*tmp_37 - p_affine_2_2*tmp_40 - p_affine_3_0*tmp_41 + p_affine_3_0*tmp_44 + p_affine_3_1*tmp_38 - p_affine_3_1*tmp_43 - p_affine_3_2*tmp_37 + p_affine_3_2*tmp_40);
      real_t tmp_50 = tmp_49*((tmp_22*tmp_22) + (tmp_29*tmp_29) + (tmp_36*tmp_36));
      real_t tmp_51 = tmp_49*(tmp_21*tmp_22 + tmp_28*tmp_29 + tmp_35*tmp_36);
      real_t tmp_52 = 0.1666666666666668*tmp_51;
      real_t tmp_53 = tmp_49*(tmp_19*tmp_22 + tmp_26*tmp_29 + tmp_33*tmp_36);
      real_t tmp_54 = 0.1666666666666668*tmp_53;
      real_t tmp_55 = tmp_49*(tmp_17*tmp_22 + tmp_24*tmp_29 + tmp_31*tmp_36);
      real_t tmp_56 = 0.1666666666666668*tmp_55;
      real_t tmp_57 = 1.0 / (tmp_15*tmp_15);
      real_t tmp_58 = tmp_49*((tmp_20*tmp_20)*tmp_57 + (tmp_27*tmp_27)*tmp_57 + (tmp_34*tmp_34)*tmp_57);
      real_t tmp_59 = tmp_20*tmp_57;
      real_t tmp_60 = tmp_27*tmp_57;
      real_t tmp_61 = tmp_34*tmp_57;
      real_t tmp_62 = tmp_49*(tmp_18*tmp_59 + tmp_25*tmp_60 + tmp_32*tmp_61);
      real_t tmp_63 = 0.1666666666666668*tmp_62;
      real_t tmp_64 = tmp_49*(tmp_23*tmp_60 + tmp_30*tmp_61 + tmp_59*tmp_6);
      real_t tmp_65 = 0.1666666666666668*tmp_64;
      real_t tmp_66 = tmp_49*((tmp_18*tmp_18)*tmp_57 + (tmp_25*tmp_25)*tmp_57 + (tmp_32*tmp_32)*tmp_57);
      real_t tmp_67 = tmp_49*(tmp_18*tmp_57*tmp_6 + tmp_23*tmp_25*tmp_57 + tmp_30*tmp_32*tmp_57);
      real_t tmp_68 = 0.1666666666666668*tmp_67;
      real_t tmp_69 = tmp_49*((tmp_23*tmp_23)*tmp_57 + (tmp_30*tmp_30)*tmp_57 + tmp_57*(tmp_6*tmp_6));
      real_t a_0_0 = 0.1666666666666668*tmp_50;
      real_t a_0_1 = tmp_52;
      real_t a_0_2 = tmp_54;
      real_t a_0_3 = tmp_56;
      real_t a_1_0 = tmp_52;
      real_t a_1_1 = 0.1666666666666668*tmp_58;
      real_t a_1_2 = tmp_63;
      real_t a_1_3 = tmp_65;
      real_t a_2_0 = tmp_54;
      real_t a_2_1 = tmp_63;
      real_t a_2_2 = 0.1666666666666668*tmp_66;
      real_t a_2_3 = tmp_68;
      real_t a_3_0 = tmp_56;
      real_t a_3_1 = tmp_65;
      real_t a_3_2 = tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_16 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_16;
      real_t tmp_23 = tmp_11*tmp_19;
      real_t tmp_24 = tmp_13*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 + tmp_13*tmp_21 - tmp_14*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_23 - tmp_20*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_15 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(-tmp_12*tmp_20 + tmp_14*tmp_15);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(tmp_13*tmp_19 - tmp_22);
      real_t tmp_37 = tmp_25*(tmp_15*tmp_16 - tmp_24);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_15*tmp_19);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(tmp_17 - tmp_23);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_16*tmp_20);
      real_t tmp_42 = tmp_25*(-tmp_14*tmp_18 + tmp_21);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 1.0*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = 0.5*tmp_45;
      real_t tmp_210 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_211 = 0.5*tmp_210;
      real_t tmp_212 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_209 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_209 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_209 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_209 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_209 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_209 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_209 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_209 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_209 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_209 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_209 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_209 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_209 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_209 - tmp_207*tmp_211) + tmp_48*(-tmp_209*tmp_35 - tmp_211*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_52 - tmp_211*tmp_55 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_60 - tmp_211*tmp_63 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_68 - tmp_211*tmp_71 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_76 - tmp_211*tmp_79 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_84 - tmp_211*tmp_87 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_92 - tmp_211*tmp_95 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_214 = 0.5*tmp_213;
      real_t tmp_215 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_209 - tmp_103*tmp_214) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_209 - tmp_111*tmp_214) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_209 - tmp_119*tmp_214) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_209 - tmp_127*tmp_214) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_209 - tmp_135*tmp_214) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_209 - tmp_143*tmp_214) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_209 - tmp_151*tmp_214) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_209 - tmp_159*tmp_214) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_209 - tmp_167*tmp_214) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_209 - tmp_175*tmp_214) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_209 - tmp_183*tmp_214) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_209 - tmp_191*tmp_214) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_209 - tmp_199*tmp_214) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_209 - tmp_207*tmp_214) + tmp_48*(-tmp_209*tmp_39 - tmp_214*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_214*tmp_55 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_214*tmp_63 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_214*tmp_71 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_77 - tmp_214*tmp_79 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_209*tmp_85 - tmp_214*tmp_87 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_209*tmp_93 - tmp_214*tmp_95 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_216 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_217 = 0.5*tmp_216;
      real_t tmp_218 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_209 - tmp_103*tmp_217) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_209 - tmp_111*tmp_217) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_209 - tmp_119*tmp_217) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_209 - tmp_127*tmp_217) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_209 - tmp_135*tmp_217) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_209 - tmp_143*tmp_217) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_209 - tmp_151*tmp_217) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_209 - tmp_159*tmp_217) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_209 - tmp_167*tmp_217) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_209 - tmp_175*tmp_217) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_209 - tmp_183*tmp_217) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_209 - tmp_191*tmp_217) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_209 - tmp_199*tmp_217) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_209 - tmp_207*tmp_217) + tmp_48*(-tmp_209*tmp_43 - tmp_217*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_217*tmp_55 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_217*tmp_63 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_217*tmp_71 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_209*tmp_78 - tmp_217*tmp_79 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_209*tmp_86 - tmp_217*tmp_87 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_209*tmp_94 - tmp_217*tmp_95 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_219 = 1.0*tmp_210;
      real_t tmp_220 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_214 - tmp_101*tmp_211) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_214 - tmp_109*tmp_211) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_214 - tmp_117*tmp_211) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_214 - tmp_125*tmp_211) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_214 - tmp_133*tmp_211) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_214 - tmp_141*tmp_211) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_214 - tmp_149*tmp_211) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_214 - tmp_157*tmp_211) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_214 - tmp_165*tmp_211) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_214 - tmp_173*tmp_211) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_214 - tmp_181*tmp_211) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_214 - tmp_189*tmp_211) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_214 - tmp_197*tmp_211) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_214 - tmp_205*tmp_211) + tmp_48*(-tmp_211*tmp_39 - tmp_214*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_211*tmp_53 - tmp_214*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_211*tmp_61 - tmp_214*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_211*tmp_69 - tmp_214*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_211*tmp_77 - tmp_214*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_211*tmp_85 - tmp_214*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_211*tmp_93 - tmp_214*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_221 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_217 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_217 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_217 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_217 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_217 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_217 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_217 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_217 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_217 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_217 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_217 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_217 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_217 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_217 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_217*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_217*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_217*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_217*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_217*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_217*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_217*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_222 = 1.0*tmp_213;
      real_t tmp_223 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_217 - tmp_102*tmp_214) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_217 - tmp_110*tmp_214) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_217 - tmp_118*tmp_214) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_217 - tmp_126*tmp_214) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_217 - tmp_134*tmp_214) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_217 - tmp_142*tmp_214) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_217 - tmp_150*tmp_214) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_217 - tmp_158*tmp_214) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_217 - tmp_166*tmp_214) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_217 - tmp_174*tmp_214) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_217 - tmp_182*tmp_214) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_217 - tmp_190*tmp_214) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_217 - tmp_198*tmp_214) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_217 - tmp_206*tmp_214) + tmp_48*(-tmp_214*tmp_43 - tmp_217*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_214*tmp_54 - tmp_217*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_214*tmp_62 - tmp_217*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_214*tmp_70 - tmp_217*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_214*tmp_78 - tmp_217*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_214*tmp_86 - tmp_217*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_214*tmp_94 - tmp_217*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_224 = 1.0*tmp_216;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_212;
      real_t a_0_2 = tmp_215;
      real_t a_0_3 = tmp_218;
      real_t a_1_0 = tmp_212;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_219) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_219) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_219) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_219) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_219) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_219) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_219) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_219) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_219) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_219) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_219) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_219) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_219) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_219) + tmp_48*(-tmp_219*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_219*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_219*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_219*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_219*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_219*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_219*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_220;
      real_t a_1_3 = tmp_221;
      real_t a_2_0 = tmp_215;
      real_t a_2_1 = tmp_220;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_222) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_222) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_222) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_222) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_222) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_222) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_222) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_222) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_222) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_222) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_222) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_222) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_222) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_222) + tmp_48*(-tmp_222*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_222*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_222*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_222*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_222*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_222*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_222*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_223;
      real_t a_3_0 = tmp_218;
      real_t a_3_1 = tmp_221;
      real_t a_3_2 = tmp_223;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_224) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_224) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_224) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_224) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_224) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_224) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_224) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_224) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_224) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_224) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_224) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_224) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_224) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_224) + tmp_48*(-tmp_224*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_224*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_224*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_224*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_224*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_224*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_224*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_26 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_27 = -tmp_26;
      real_t tmp_28 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_27 + 0.93718850182767688*tmp_28;
      real_t tmp_30 = tmp_25 + tmp_29;
      real_t tmp_31 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_32 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_33 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_34 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_35 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_36 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_37 = tmp_34*tmp_36;
      real_t tmp_38 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_39 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_40 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_41 = tmp_39*tmp_40;
      real_t tmp_42 = tmp_32*tmp_36;
      real_t tmp_43 = tmp_31*tmp_39;
      real_t tmp_44 = tmp_33*tmp_38;
      real_t tmp_45 = 1.0 / (tmp_31*tmp_32*tmp_38 + tmp_33*tmp_41 - tmp_34*tmp_44 + tmp_35*tmp_37 - tmp_35*tmp_43 - tmp_40*tmp_42);
      real_t tmp_46 = tmp_45*(tmp_31*tmp_32 - tmp_33*tmp_34);
      real_t tmp_47 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_48 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_49 = -tmp_48;
      real_t tmp_50 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_51 = 0.031405749086161582*tmp_49 + 0.93718850182767688*tmp_50;
      real_t tmp_52 = tmp_47 + tmp_51;
      real_t tmp_53 = tmp_45*(-tmp_31*tmp_35 + tmp_33*tmp_40);
      real_t tmp_54 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_55 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_56 = -tmp_55;
      real_t tmp_57 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_58 = 0.031405749086161582*tmp_56 + 0.93718850182767688*tmp_57;
      real_t tmp_59 = tmp_54 + tmp_58;
      real_t tmp_60 = tmp_45*(-tmp_32*tmp_40 + tmp_34*tmp_35);
      real_t tmp_61 = tmp_30*tmp_46 + tmp_52*tmp_53 + tmp_59*tmp_60;
      real_t tmp_62 = tmp_45*(tmp_33*tmp_39 - tmp_42);
      real_t tmp_63 = tmp_45*(tmp_35*tmp_36 - tmp_44);
      real_t tmp_64 = tmp_45*(tmp_32*tmp_38 - tmp_35*tmp_39);
      real_t tmp_65 = tmp_30*tmp_62 + tmp_52*tmp_63 + tmp_59*tmp_64;
      real_t tmp_66 = tmp_45*(tmp_37 - tmp_43);
      real_t tmp_67 = tmp_45*(tmp_31*tmp_38 - tmp_36*tmp_40);
      real_t tmp_68 = tmp_45*(-tmp_34*tmp_38 + tmp_41);
      real_t tmp_69 = tmp_30*tmp_66 + tmp_52*tmp_67 + tmp_59*tmp_68;
      real_t tmp_70 = -tmp_61 - tmp_65 - tmp_69 + 1;
      real_t tmp_71 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_72 = tmp_29 + tmp_71;
      real_t tmp_73 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_74 = tmp_51 + tmp_73;
      real_t tmp_75 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_76 = tmp_58 + tmp_75;
      real_t tmp_77 = tmp_17*tmp_76 + tmp_20*tmp_74 + tmp_23*tmp_72;
      real_t tmp_78 = tmp_16*tmp_76 + tmp_19*tmp_74 + tmp_22*tmp_72;
      real_t tmp_79 = tmp_15*tmp_76 + tmp_18*tmp_74 + tmp_21*tmp_72;
      real_t tmp_80 = -tmp_77 - tmp_78 - tmp_79 + 1;
      real_t tmp_81 = 0.5*p_affine_13_0*(-tmp_60 - tmp_64 - tmp_68) + 0.5*p_affine_13_1*(-tmp_53 - tmp_63 - tmp_67) + 0.5*p_affine_13_2*(-tmp_46 - tmp_62 - tmp_66);
      real_t tmp_82 = (std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)*std::abs(tmp_26*tmp_50 - tmp_28*tmp_48)) + (std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)*std::abs(tmp_26*tmp_57 - tmp_28*tmp_55)) + (std::abs(tmp_48*tmp_57 - tmp_50*tmp_55)*std::abs(tmp_48*tmp_57 - tmp_50*tmp_55));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_80*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_27 + 0.60796128279561268*tmp_28;
      real_t tmp_88 = tmp_25 + tmp_87;
      real_t tmp_89 = 0.19601935860219369*tmp_49 + 0.60796128279561268*tmp_50;
      real_t tmp_90 = tmp_47 + tmp_89;
      real_t tmp_91 = 0.19601935860219369*tmp_56 + 0.60796128279561268*tmp_57;
      real_t tmp_92 = tmp_54 + tmp_91;
      real_t tmp_93 = tmp_46*tmp_88 + tmp_53*tmp_90 + tmp_60*tmp_92;
      real_t tmp_94 = tmp_62*tmp_88 + tmp_63*tmp_90 + tmp_64*tmp_92;
      real_t tmp_95 = tmp_66*tmp_88 + tmp_67*tmp_90 + tmp_68*tmp_92;
      real_t tmp_96 = -tmp_93 - tmp_94 - tmp_95 + 1;
      real_t tmp_97 = tmp_71 + tmp_87;
      real_t tmp_98 = tmp_73 + tmp_89;
      real_t tmp_99 = tmp_75 + tmp_91;
      real_t tmp_100 = tmp_17*tmp_99 + tmp_20*tmp_98 + tmp_23*tmp_97;
      real_t tmp_101 = tmp_16*tmp_99 + tmp_19*tmp_98 + tmp_22*tmp_97;
      real_t tmp_102 = tmp_15*tmp_99 + tmp_18*tmp_98 + tmp_21*tmp_97;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = tmp_103*tmp_83;
      real_t tmp_105 = 0.037198804536718075*tmp_85;
      real_t tmp_106 = 0.37605877282253791*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_107 = tmp_106 + tmp_25;
      real_t tmp_108 = 0.37605877282253791*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_109 = tmp_108 + tmp_47;
      real_t tmp_110 = 0.37605877282253791*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_111 = tmp_110 + tmp_54;
      real_t tmp_112 = tmp_107*tmp_46 + tmp_109*tmp_53 + tmp_111*tmp_60;
      real_t tmp_113 = tmp_107*tmp_62 + tmp_109*tmp_63 + tmp_111*tmp_64;
      real_t tmp_114 = tmp_107*tmp_66 + tmp_109*tmp_67 + tmp_111*tmp_68;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = tmp_106 + tmp_71;
      real_t tmp_117 = tmp_108 + tmp_73;
      real_t tmp_118 = tmp_110 + tmp_75;
      real_t tmp_119 = tmp_116*tmp_23 + tmp_117*tmp_20 + tmp_118*tmp_17;
      real_t tmp_120 = tmp_116*tmp_22 + tmp_117*tmp_19 + tmp_118*tmp_16;
      real_t tmp_121 = tmp_116*tmp_21 + tmp_117*tmp_18 + tmp_118*tmp_15;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = tmp_122*tmp_83;
      real_t tmp_124 = 0.020848748529055869*tmp_85;
      real_t tmp_125 = 0.78764240869137092*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_126 = tmp_125 + tmp_25;
      real_t tmp_127 = 0.78764240869137092*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_128 = tmp_127 + tmp_47;
      real_t tmp_129 = 0.78764240869137092*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_130 = tmp_129 + tmp_54;
      real_t tmp_131 = tmp_126*tmp_46 + tmp_128*tmp_53 + tmp_130*tmp_60;
      real_t tmp_132 = tmp_126*tmp_62 + tmp_128*tmp_63 + tmp_130*tmp_64;
      real_t tmp_133 = tmp_126*tmp_66 + tmp_128*tmp_67 + tmp_130*tmp_68;
      real_t tmp_134 = -tmp_131 - tmp_132 - tmp_133 + 1;
      real_t tmp_135 = tmp_125 + tmp_71;
      real_t tmp_136 = tmp_127 + tmp_73;
      real_t tmp_137 = tmp_129 + tmp_75;
      real_t tmp_138 = tmp_135*tmp_23 + tmp_136*tmp_20 + tmp_137*tmp_17;
      real_t tmp_139 = tmp_135*tmp_22 + tmp_136*tmp_19 + tmp_137*tmp_16;
      real_t tmp_140 = tmp_135*tmp_21 + tmp_136*tmp_18 + tmp_137*tmp_15;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = tmp_141*tmp_83;
      real_t tmp_143 = 0.019202922745021479*tmp_85;
      real_t tmp_144 = 0.58463275527740355*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_145 = tmp_144 + tmp_25;
      real_t tmp_146 = 0.58463275527740355*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_147 = tmp_146 + tmp_47;
      real_t tmp_148 = 0.58463275527740355*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_149 = tmp_148 + tmp_54;
      real_t tmp_150 = tmp_145*tmp_46 + tmp_147*tmp_53 + tmp_149*tmp_60;
      real_t tmp_151 = tmp_145*tmp_62 + tmp_147*tmp_63 + tmp_149*tmp_64;
      real_t tmp_152 = tmp_145*tmp_66 + tmp_147*tmp_67 + tmp_149*tmp_68;
      real_t tmp_153 = -tmp_150 - tmp_151 - tmp_152 + 1;
      real_t tmp_154 = tmp_144 + tmp_71;
      real_t tmp_155 = tmp_146 + tmp_73;
      real_t tmp_156 = tmp_148 + tmp_75;
      real_t tmp_157 = tmp_154*tmp_23 + tmp_155*tmp_20 + tmp_156*tmp_17;
      real_t tmp_158 = tmp_154*tmp_22 + tmp_155*tmp_19 + tmp_156*tmp_16;
      real_t tmp_159 = tmp_15*tmp_156 + tmp_154*tmp_21 + tmp_155*tmp_18;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = tmp_160*tmp_83;
      real_t tmp_162 = 0.020848748529055869*tmp_85;
      real_t tmp_163 = 0.041227165399737475*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_164 = tmp_163 + tmp_25;
      real_t tmp_165 = 0.041227165399737475*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_166 = tmp_165 + tmp_47;
      real_t tmp_167 = 0.041227165399737475*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_168 = tmp_167 + tmp_54;
      real_t tmp_169 = tmp_164*tmp_46 + tmp_166*tmp_53 + tmp_168*tmp_60;
      real_t tmp_170 = tmp_164*tmp_62 + tmp_166*tmp_63 + tmp_168*tmp_64;
      real_t tmp_171 = tmp_164*tmp_66 + tmp_166*tmp_67 + tmp_168*tmp_68;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_163 + tmp_71;
      real_t tmp_174 = tmp_165 + tmp_73;
      real_t tmp_175 = tmp_167 + tmp_75;
      real_t tmp_176 = tmp_17*tmp_175 + tmp_173*tmp_23 + tmp_174*tmp_20;
      real_t tmp_177 = tmp_16*tmp_175 + tmp_173*tmp_22 + tmp_174*tmp_19;
      real_t tmp_178 = tmp_15*tmp_175 + tmp_173*tmp_21 + tmp_174*tmp_18;
      real_t tmp_179 = -tmp_176 - tmp_177 - tmp_178 + 1;
      real_t tmp_180 = tmp_179*tmp_83;
      real_t tmp_181 = 0.019202922745021479*tmp_85;
      real_t tmp_182 = 0.039308471900058539*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_183 = tmp_182 + tmp_25;
      real_t tmp_184 = 0.039308471900058539*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_185 = tmp_184 + tmp_47;
      real_t tmp_186 = 0.039308471900058539*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_187 = tmp_186 + tmp_54;
      real_t tmp_188 = tmp_183*tmp_46 + tmp_185*tmp_53 + tmp_187*tmp_60;
      real_t tmp_189 = tmp_183*tmp_62 + tmp_185*tmp_63 + tmp_187*tmp_64;
      real_t tmp_190 = tmp_183*tmp_66 + tmp_185*tmp_67 + tmp_187*tmp_68;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = tmp_182 + tmp_71;
      real_t tmp_193 = tmp_184 + tmp_73;
      real_t tmp_194 = tmp_186 + tmp_75;
      real_t tmp_195 = tmp_17*tmp_194 + tmp_192*tmp_23 + tmp_193*tmp_20;
      real_t tmp_196 = tmp_16*tmp_194 + tmp_19*tmp_193 + tmp_192*tmp_22;
      real_t tmp_197 = tmp_15*tmp_194 + tmp_18*tmp_193 + tmp_192*tmp_21;
      real_t tmp_198 = -tmp_195 - tmp_196 - tmp_197 + 1;
      real_t tmp_199 = tmp_198*tmp_83;
      real_t tmp_200 = 0.020848748529055869*tmp_85;
      real_t tmp_201 = 0.78764240869137092*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_202 = tmp_201 + tmp_25;
      real_t tmp_203 = 0.78764240869137092*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_204 = tmp_203 + tmp_47;
      real_t tmp_205 = 0.78764240869137092*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_206 = tmp_205 + tmp_54;
      real_t tmp_207 = tmp_202*tmp_46 + tmp_204*tmp_53 + tmp_206*tmp_60;
      real_t tmp_208 = tmp_202*tmp_62 + tmp_204*tmp_63 + tmp_206*tmp_64;
      real_t tmp_209 = tmp_202*tmp_66 + tmp_204*tmp_67 + tmp_206*tmp_68;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = tmp_201 + tmp_71;
      real_t tmp_212 = tmp_203 + tmp_73;
      real_t tmp_213 = tmp_205 + tmp_75;
      real_t tmp_214 = tmp_17*tmp_213 + tmp_20*tmp_212 + tmp_211*tmp_23;
      real_t tmp_215 = tmp_16*tmp_213 + tmp_19*tmp_212 + tmp_211*tmp_22;
      real_t tmp_216 = tmp_15*tmp_213 + tmp_18*tmp_212 + tmp_21*tmp_211;
      real_t tmp_217 = -tmp_214 - tmp_215 - tmp_216 + 1;
      real_t tmp_218 = tmp_217*tmp_83;
      real_t tmp_219 = 0.019202922745021479*tmp_85;
      real_t tmp_220 = 0.58463275527740355*tmp_27 + 0.039308471900058539*tmp_28;
      real_t tmp_221 = tmp_220 + tmp_25;
      real_t tmp_222 = 0.58463275527740355*tmp_49 + 0.039308471900058539*tmp_50;
      real_t tmp_223 = tmp_222 + tmp_47;
      real_t tmp_224 = 0.58463275527740355*tmp_56 + 0.039308471900058539*tmp_57;
      real_t tmp_225 = tmp_224 + tmp_54;
      real_t tmp_226 = tmp_221*tmp_46 + tmp_223*tmp_53 + tmp_225*tmp_60;
      real_t tmp_227 = tmp_221*tmp_62 + tmp_223*tmp_63 + tmp_225*tmp_64;
      real_t tmp_228 = tmp_221*tmp_66 + tmp_223*tmp_67 + tmp_225*tmp_68;
      real_t tmp_229 = -tmp_226 - tmp_227 - tmp_228 + 1;
      real_t tmp_230 = tmp_220 + tmp_71;
      real_t tmp_231 = tmp_222 + tmp_73;
      real_t tmp_232 = tmp_224 + tmp_75;
      real_t tmp_233 = tmp_17*tmp_232 + tmp_20*tmp_231 + tmp_23*tmp_230;
      real_t tmp_234 = tmp_16*tmp_232 + tmp_19*tmp_231 + tmp_22*tmp_230;
      real_t tmp_235 = tmp_15*tmp_232 + tmp_18*tmp_231 + tmp_21*tmp_230;
      real_t tmp_236 = -tmp_233 - tmp_234 - tmp_235 + 1;
      real_t tmp_237 = tmp_236*tmp_83;
      real_t tmp_238 = 0.020848748529055869*tmp_85;
      real_t tmp_239 = 0.1711304259088916*tmp_27 + 0.78764240869137092*tmp_28;
      real_t tmp_240 = tmp_239 + tmp_25;
      real_t tmp_241 = 0.1711304259088916*tmp_49 + 0.78764240869137092*tmp_50;
      real_t tmp_242 = tmp_241 + tmp_47;
      real_t tmp_243 = 0.1711304259088916*tmp_56 + 0.78764240869137092*tmp_57;
      real_t tmp_244 = tmp_243 + tmp_54;
      real_t tmp_245 = tmp_240*tmp_46 + tmp_242*tmp_53 + tmp_244*tmp_60;
      real_t tmp_246 = tmp_240*tmp_62 + tmp_242*tmp_63 + tmp_244*tmp_64;
      real_t tmp_247 = tmp_240*tmp_66 + tmp_242*tmp_67 + tmp_244*tmp_68;
      real_t tmp_248 = -tmp_245 - tmp_246 - tmp_247 + 1;
      real_t tmp_249 = tmp_239 + tmp_71;
      real_t tmp_250 = tmp_241 + tmp_73;
      real_t tmp_251 = tmp_243 + tmp_75;
      real_t tmp_252 = tmp_17*tmp_251 + tmp_20*tmp_250 + tmp_23*tmp_249;
      real_t tmp_253 = tmp_16*tmp_251 + tmp_19*tmp_250 + tmp_22*tmp_249;
      real_t tmp_254 = tmp_15*tmp_251 + tmp_18*tmp_250 + tmp_21*tmp_249;
      real_t tmp_255 = -tmp_252 - tmp_253 - tmp_254 + 1;
      real_t tmp_256 = tmp_255*tmp_83;
      real_t tmp_257 = 0.019202922745021479*tmp_85;
      real_t tmp_258 = 0.37605877282253791*tmp_27 + 0.58463275527740355*tmp_28;
      real_t tmp_259 = tmp_25 + tmp_258;
      real_t tmp_260 = 0.37605877282253791*tmp_49 + 0.58463275527740355*tmp_50;
      real_t tmp_261 = tmp_260 + tmp_47;
      real_t tmp_262 = 0.37605877282253791*tmp_56 + 0.58463275527740355*tmp_57;
      real_t tmp_263 = tmp_262 + tmp_54;
      real_t tmp_264 = tmp_259*tmp_46 + tmp_261*tmp_53 + tmp_263*tmp_60;
      real_t tmp_265 = tmp_259*tmp_62 + tmp_261*tmp_63 + tmp_263*tmp_64;
      real_t tmp_266 = tmp_259*tmp_66 + tmp_261*tmp_67 + tmp_263*tmp_68;
      real_t tmp_267 = -tmp_264 - tmp_265 - tmp_266 + 1;
      real_t tmp_268 = tmp_258 + tmp_71;
      real_t tmp_269 = tmp_260 + tmp_73;
      real_t tmp_270 = tmp_262 + tmp_75;
      real_t tmp_271 = tmp_17*tmp_270 + tmp_20*tmp_269 + tmp_23*tmp_268;
      real_t tmp_272 = tmp_16*tmp_270 + tmp_19*tmp_269 + tmp_22*tmp_268;
      real_t tmp_273 = tmp_15*tmp_270 + tmp_18*tmp_269 + tmp_21*tmp_268;
      real_t tmp_274 = -tmp_271 - tmp_272 - tmp_273 + 1;
      real_t tmp_275 = tmp_274*tmp_83;
      real_t tmp_276 = 0.020848748529055869*tmp_85;
      real_t tmp_277 = 0.041227165399737475*tmp_27 + 0.1711304259088916*tmp_28;
      real_t tmp_278 = tmp_25 + tmp_277;
      real_t tmp_279 = 0.041227165399737475*tmp_49 + 0.1711304259088916*tmp_50;
      real_t tmp_280 = tmp_279 + tmp_47;
      real_t tmp_281 = 0.041227165399737475*tmp_56 + 0.1711304259088916*tmp_57;
      real_t tmp_282 = tmp_281 + tmp_54;
      real_t tmp_283 = tmp_278*tmp_46 + tmp_280*tmp_53 + tmp_282*tmp_60;
      real_t tmp_284 = tmp_278*tmp_62 + tmp_280*tmp_63 + tmp_282*tmp_64;
      real_t tmp_285 = tmp_278*tmp_66 + tmp_280*tmp_67 + tmp_282*tmp_68;
      real_t tmp_286 = -tmp_283 - tmp_284 - tmp_285 + 1;
      real_t tmp_287 = tmp_277 + tmp_71;
      real_t tmp_288 = tmp_279 + tmp_73;
      real_t tmp_289 = tmp_281 + tmp_75;
      real_t tmp_290 = tmp_17*tmp_289 + tmp_20*tmp_288 + tmp_23*tmp_287;
      real_t tmp_291 = tmp_16*tmp_289 + tmp_19*tmp_288 + tmp_22*tmp_287;
      real_t tmp_292 = tmp_15*tmp_289 + tmp_18*tmp_288 + tmp_21*tmp_287;
      real_t tmp_293 = -tmp_290 - tmp_291 - tmp_292 + 1;
      real_t tmp_294 = tmp_293*tmp_83;
      real_t tmp_295 = 0.019202922745021479*tmp_85;
      real_t tmp_296 = 0.40446199974765351*tmp_27 + 0.19107600050469298*tmp_28;
      real_t tmp_297 = tmp_25 + tmp_296;
      real_t tmp_298 = 0.40446199974765351*tmp_49 + 0.19107600050469298*tmp_50;
      real_t tmp_299 = tmp_298 + tmp_47;
      real_t tmp_300 = 0.40446199974765351*tmp_56 + 0.19107600050469298*tmp_57;
      real_t tmp_301 = tmp_300 + tmp_54;
      real_t tmp_302 = tmp_297*tmp_46 + tmp_299*tmp_53 + tmp_301*tmp_60;
      real_t tmp_303 = tmp_297*tmp_62 + tmp_299*tmp_63 + tmp_301*tmp_64;
      real_t tmp_304 = tmp_297*tmp_66 + tmp_299*tmp_67 + tmp_301*tmp_68;
      real_t tmp_305 = -tmp_302 - tmp_303 - tmp_304 + 1;
      real_t tmp_306 = tmp_296 + tmp_71;
      real_t tmp_307 = tmp_298 + tmp_73;
      real_t tmp_308 = tmp_300 + tmp_75;
      real_t tmp_309 = tmp_17*tmp_308 + tmp_20*tmp_307 + tmp_23*tmp_306;
      real_t tmp_310 = tmp_16*tmp_308 + tmp_19*tmp_307 + tmp_22*tmp_306;
      real_t tmp_311 = tmp_15*tmp_308 + tmp_18*tmp_307 + tmp_21*tmp_306;
      real_t tmp_312 = -tmp_309 - tmp_310 - tmp_311 + 1;
      real_t tmp_313 = tmp_312*tmp_83;
      real_t tmp_314 = 0.042507265838595799*tmp_85;
      real_t tmp_315 = 0.039308471900058539*tmp_27 + 0.37605877282253791*tmp_28;
      real_t tmp_316 = tmp_25 + tmp_315;
      real_t tmp_317 = 0.039308471900058539*tmp_49 + 0.37605877282253791*tmp_50;
      real_t tmp_318 = tmp_317 + tmp_47;
      real_t tmp_319 = 0.039308471900058539*tmp_56 + 0.37605877282253791*tmp_57;
      real_t tmp_320 = tmp_319 + tmp_54;
      real_t tmp_321 = tmp_316*tmp_46 + tmp_318*tmp_53 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_316*tmp_62 + tmp_318*tmp_63 + tmp_320*tmp_64;
      real_t tmp_323 = tmp_316*tmp_66 + tmp_318*tmp_67 + tmp_320*tmp_68;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_315 + tmp_71;
      real_t tmp_326 = tmp_317 + tmp_73;
      real_t tmp_327 = tmp_319 + tmp_75;
      real_t tmp_328 = tmp_17*tmp_327 + tmp_20*tmp_326 + tmp_23*tmp_325;
      real_t tmp_329 = tmp_16*tmp_327 + tmp_19*tmp_326 + tmp_22*tmp_325;
      real_t tmp_330 = tmp_15*tmp_327 + tmp_18*tmp_326 + tmp_21*tmp_325;
      real_t tmp_331 = -tmp_328 - tmp_329 - tmp_330 + 1;
      real_t tmp_332 = tmp_331*tmp_83;
      real_t tmp_333 = 0.020848748529055869*tmp_85;
      real_t tmp_334 = 0.93718850182767688*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_335 = tmp_25 + tmp_334;
      real_t tmp_336 = 0.93718850182767688*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_337 = tmp_336 + tmp_47;
      real_t tmp_338 = 0.93718850182767688*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_339 = tmp_338 + tmp_54;
      real_t tmp_340 = tmp_335*tmp_46 + tmp_337*tmp_53 + tmp_339*tmp_60;
      real_t tmp_341 = tmp_335*tmp_62 + tmp_337*tmp_63 + tmp_339*tmp_64;
      real_t tmp_342 = tmp_335*tmp_66 + tmp_337*tmp_67 + tmp_339*tmp_68;
      real_t tmp_343 = -tmp_340 - tmp_341 - tmp_342 + 1;
      real_t tmp_344 = tmp_334 + tmp_71;
      real_t tmp_345 = tmp_336 + tmp_73;
      real_t tmp_346 = tmp_338 + tmp_75;
      real_t tmp_347 = tmp_17*tmp_346 + tmp_20*tmp_345 + tmp_23*tmp_344;
      real_t tmp_348 = tmp_16*tmp_346 + tmp_19*tmp_345 + tmp_22*tmp_344;
      real_t tmp_349 = tmp_15*tmp_346 + tmp_18*tmp_345 + tmp_21*tmp_344;
      real_t tmp_350 = -tmp_347 - tmp_348 - tmp_349 + 1;
      real_t tmp_351 = tmp_350*tmp_83;
      real_t tmp_352 = 0.0068572537431980923*tmp_85;
      real_t tmp_353 = 0.60796128279561268*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_354 = tmp_25 + tmp_353;
      real_t tmp_355 = 0.60796128279561268*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_356 = tmp_355 + tmp_47;
      real_t tmp_357 = 0.60796128279561268*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_358 = tmp_357 + tmp_54;
      real_t tmp_359 = tmp_354*tmp_46 + tmp_356*tmp_53 + tmp_358*tmp_60;
      real_t tmp_360 = tmp_354*tmp_62 + tmp_356*tmp_63 + tmp_358*tmp_64;
      real_t tmp_361 = tmp_354*tmp_66 + tmp_356*tmp_67 + tmp_358*tmp_68;
      real_t tmp_362 = -tmp_359 - tmp_360 - tmp_361 + 1;
      real_t tmp_363 = tmp_353 + tmp_71;
      real_t tmp_364 = tmp_355 + tmp_73;
      real_t tmp_365 = tmp_357 + tmp_75;
      real_t tmp_366 = tmp_17*tmp_365 + tmp_20*tmp_364 + tmp_23*tmp_363;
      real_t tmp_367 = tmp_16*tmp_365 + tmp_19*tmp_364 + tmp_22*tmp_363;
      real_t tmp_368 = tmp_15*tmp_365 + tmp_18*tmp_364 + tmp_21*tmp_363;
      real_t tmp_369 = -tmp_366 - tmp_367 - tmp_368 + 1;
      real_t tmp_370 = tmp_369*tmp_83;
      real_t tmp_371 = 0.037198804536718075*tmp_85;
      real_t tmp_372 = 0.19107600050469298*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_373 = tmp_25 + tmp_372;
      real_t tmp_374 = 0.19107600050469298*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_375 = tmp_374 + tmp_47;
      real_t tmp_376 = 0.19107600050469298*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_377 = tmp_376 + tmp_54;
      real_t tmp_378 = tmp_373*tmp_46 + tmp_375*tmp_53 + tmp_377*tmp_60;
      real_t tmp_379 = tmp_373*tmp_62 + tmp_375*tmp_63 + tmp_377*tmp_64;
      real_t tmp_380 = tmp_373*tmp_66 + tmp_375*tmp_67 + tmp_377*tmp_68;
      real_t tmp_381 = -tmp_378 - tmp_379 - tmp_380 + 1;
      real_t tmp_382 = tmp_372 + tmp_71;
      real_t tmp_383 = tmp_374 + tmp_73;
      real_t tmp_384 = tmp_376 + tmp_75;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_388*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.031405749086161582*tmp_27 + 0.031405749086161582*tmp_28;
      real_t tmp_392 = tmp_25 + tmp_391;
      real_t tmp_393 = 0.031405749086161582*tmp_49 + 0.031405749086161582*tmp_50;
      real_t tmp_394 = tmp_393 + tmp_47;
      real_t tmp_395 = 0.031405749086161582*tmp_56 + 0.031405749086161582*tmp_57;
      real_t tmp_396 = tmp_395 + tmp_54;
      real_t tmp_397 = tmp_392*tmp_46 + tmp_394*tmp_53 + tmp_396*tmp_60;
      real_t tmp_398 = tmp_392*tmp_62 + tmp_394*tmp_63 + tmp_396*tmp_64;
      real_t tmp_399 = tmp_392*tmp_66 + tmp_394*tmp_67 + tmp_396*tmp_68;
      real_t tmp_400 = -tmp_397 - tmp_398 - tmp_399 + 1;
      real_t tmp_401 = tmp_391 + tmp_71;
      real_t tmp_402 = tmp_393 + tmp_73;
      real_t tmp_403 = tmp_395 + tmp_75;
      real_t tmp_404 = tmp_17*tmp_403 + tmp_20*tmp_402 + tmp_23*tmp_401;
      real_t tmp_405 = tmp_16*tmp_403 + tmp_19*tmp_402 + tmp_22*tmp_401;
      real_t tmp_406 = tmp_15*tmp_403 + tmp_18*tmp_402 + tmp_21*tmp_401;
      real_t tmp_407 = -tmp_404 - tmp_405 - tmp_406 + 1;
      real_t tmp_408 = tmp_407*tmp_83;
      real_t tmp_409 = 0.0068572537431980923*tmp_85;
      real_t tmp_410 = 0.19601935860219369*tmp_27 + 0.19601935860219369*tmp_28;
      real_t tmp_411 = tmp_25 + tmp_410;
      real_t tmp_412 = 0.19601935860219369*tmp_49 + 0.19601935860219369*tmp_50;
      real_t tmp_413 = tmp_412 + tmp_47;
      real_t tmp_414 = 0.19601935860219369*tmp_56 + 0.19601935860219369*tmp_57;
      real_t tmp_415 = tmp_414 + tmp_54;
      real_t tmp_416 = tmp_411*tmp_46 + tmp_413*tmp_53 + tmp_415*tmp_60;
      real_t tmp_417 = tmp_411*tmp_62 + tmp_413*tmp_63 + tmp_415*tmp_64;
      real_t tmp_418 = tmp_411*tmp_66 + tmp_413*tmp_67 + tmp_415*tmp_68;
      real_t tmp_419 = -tmp_416 - tmp_417 - tmp_418 + 1;
      real_t tmp_420 = tmp_410 + tmp_71;
      real_t tmp_421 = tmp_412 + tmp_73;
      real_t tmp_422 = tmp_414 + tmp_75;
      real_t tmp_423 = tmp_17*tmp_422 + tmp_20*tmp_421 + tmp_23*tmp_420;
      real_t tmp_424 = tmp_16*tmp_422 + tmp_19*tmp_421 + tmp_22*tmp_420;
      real_t tmp_425 = tmp_15*tmp_422 + tmp_18*tmp_421 + tmp_21*tmp_420;
      real_t tmp_426 = -tmp_423 - tmp_424 - tmp_425 + 1;
      real_t tmp_427 = tmp_426*tmp_83;
      real_t tmp_428 = 0.037198804536718075*tmp_85;
      real_t tmp_429 = 0.40446199974765351*tmp_27 + 0.40446199974765351*tmp_28;
      real_t tmp_430 = tmp_25 + tmp_429;
      real_t tmp_431 = 0.40446199974765351*tmp_49 + 0.40446199974765351*tmp_50;
      real_t tmp_432 = tmp_431 + tmp_47;
      real_t tmp_433 = 0.40446199974765351*tmp_56 + 0.40446199974765351*tmp_57;
      real_t tmp_434 = tmp_433 + tmp_54;
      real_t tmp_435 = tmp_430*tmp_46 + tmp_432*tmp_53 + tmp_434*tmp_60;
      real_t tmp_436 = tmp_430*tmp_62 + tmp_432*tmp_63 + tmp_434*tmp_64;
      real_t tmp_437 = tmp_430*tmp_66 + tmp_432*tmp_67 + tmp_434*tmp_68;
      real_t tmp_438 = -tmp_435 - tmp_436 - tmp_437 + 1;
      real_t tmp_439 = tmp_429 + tmp_71;
      real_t tmp_440 = tmp_431 + tmp_73;
      real_t tmp_441 = tmp_433 + tmp_75;
      real_t tmp_442 = tmp_17*tmp_441 + tmp_20*tmp_440 + tmp_23*tmp_439;
      real_t tmp_443 = tmp_16*tmp_441 + tmp_19*tmp_440 + tmp_22*tmp_439;
      real_t tmp_444 = tmp_15*tmp_441 + tmp_18*tmp_440 + tmp_21*tmp_439;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_445*tmp_83;
      real_t tmp_447 = 0.042507265838595799*tmp_85;
      real_t tmp_448 = 0.1711304259088916*tmp_27 + 0.041227165399737475*tmp_28;
      real_t tmp_449 = tmp_25 + tmp_448;
      real_t tmp_450 = 0.1711304259088916*tmp_49 + 0.041227165399737475*tmp_50;
      real_t tmp_451 = tmp_450 + tmp_47;
      real_t tmp_452 = 0.1711304259088916*tmp_56 + 0.041227165399737475*tmp_57;
      real_t tmp_453 = tmp_452 + tmp_54;
      real_t tmp_454 = tmp_449*tmp_46 + tmp_451*tmp_53 + tmp_453*tmp_60;
      real_t tmp_455 = tmp_449*tmp_62 + tmp_451*tmp_63 + tmp_453*tmp_64;
      real_t tmp_456 = tmp_449*tmp_66 + tmp_451*tmp_67 + tmp_453*tmp_68;
      real_t tmp_457 = -tmp_454 - tmp_455 - tmp_456 + 1;
      real_t tmp_458 = tmp_448 + tmp_71;
      real_t tmp_459 = tmp_450 + tmp_73;
      real_t tmp_460 = tmp_452 + tmp_75;
      real_t tmp_461 = tmp_17*tmp_460 + tmp_20*tmp_459 + tmp_23*tmp_458;
      real_t tmp_462 = tmp_16*tmp_460 + tmp_19*tmp_459 + tmp_22*tmp_458;
      real_t tmp_463 = tmp_15*tmp_460 + tmp_18*tmp_459 + tmp_21*tmp_458;
      real_t tmp_464 = -tmp_461 - tmp_462 - tmp_463 + 1;
      real_t tmp_465 = tmp_464*tmp_83;
      real_t tmp_466 = 0.019202922745021479*tmp_85;
      real_t tmp_467 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_53 + 0.5*p_affine_13_2*tmp_46;
      real_t tmp_468 = 0.5*p_affine_13_0*tmp_64 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_62;
      real_t tmp_469 = 0.5*p_affine_13_0*tmp_68 + 0.5*p_affine_13_1*tmp_67 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_470 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_471 = tmp_77*tmp_83;
      real_t tmp_472 = tmp_100*tmp_83;
      real_t tmp_473 = tmp_119*tmp_83;
      real_t tmp_474 = tmp_138*tmp_83;
      real_t tmp_475 = tmp_157*tmp_83;
      real_t tmp_476 = tmp_176*tmp_83;
      real_t tmp_477 = tmp_195*tmp_83;
      real_t tmp_478 = tmp_214*tmp_83;
      real_t tmp_479 = tmp_233*tmp_83;
      real_t tmp_480 = tmp_252*tmp_83;
      real_t tmp_481 = tmp_271*tmp_83;
      real_t tmp_482 = tmp_290*tmp_83;
      real_t tmp_483 = tmp_309*tmp_83;
      real_t tmp_484 = tmp_328*tmp_83;
      real_t tmp_485 = tmp_347*tmp_83;
      real_t tmp_486 = tmp_366*tmp_83;
      real_t tmp_487 = tmp_385*tmp_83;
      real_t tmp_488 = tmp_404*tmp_83;
      real_t tmp_489 = tmp_423*tmp_83;
      real_t tmp_490 = tmp_442*tmp_83;
      real_t tmp_491 = tmp_461*tmp_83;
      real_t tmp_492 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_493 = tmp_78*tmp_83;
      real_t tmp_494 = tmp_101*tmp_83;
      real_t tmp_495 = tmp_120*tmp_83;
      real_t tmp_496 = tmp_139*tmp_83;
      real_t tmp_497 = tmp_158*tmp_83;
      real_t tmp_498 = tmp_177*tmp_83;
      real_t tmp_499 = tmp_196*tmp_83;
      real_t tmp_500 = tmp_215*tmp_83;
      real_t tmp_501 = tmp_234*tmp_83;
      real_t tmp_502 = tmp_253*tmp_83;
      real_t tmp_503 = tmp_272*tmp_83;
      real_t tmp_504 = tmp_291*tmp_83;
      real_t tmp_505 = tmp_310*tmp_83;
      real_t tmp_506 = tmp_329*tmp_83;
      real_t tmp_507 = tmp_348*tmp_83;
      real_t tmp_508 = tmp_367*tmp_83;
      real_t tmp_509 = tmp_386*tmp_83;
      real_t tmp_510 = tmp_405*tmp_83;
      real_t tmp_511 = tmp_424*tmp_83;
      real_t tmp_512 = tmp_443*tmp_83;
      real_t tmp_513 = tmp_462*tmp_83;
      real_t tmp_514 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t tmp_515 = tmp_79*tmp_83;
      real_t tmp_516 = tmp_102*tmp_83;
      real_t tmp_517 = tmp_121*tmp_83;
      real_t tmp_518 = tmp_140*tmp_83;
      real_t tmp_519 = tmp_159*tmp_83;
      real_t tmp_520 = tmp_178*tmp_83;
      real_t tmp_521 = tmp_197*tmp_83;
      real_t tmp_522 = tmp_216*tmp_83;
      real_t tmp_523 = tmp_235*tmp_83;
      real_t tmp_524 = tmp_254*tmp_83;
      real_t tmp_525 = tmp_273*tmp_83;
      real_t tmp_526 = tmp_292*tmp_83;
      real_t tmp_527 = tmp_311*tmp_83;
      real_t tmp_528 = tmp_330*tmp_83;
      real_t tmp_529 = tmp_349*tmp_83;
      real_t tmp_530 = tmp_368*tmp_83;
      real_t tmp_531 = tmp_387*tmp_83;
      real_t tmp_532 = tmp_406*tmp_83;
      real_t tmp_533 = tmp_425*tmp_83;
      real_t tmp_534 = tmp_444*tmp_83;
      real_t tmp_535 = tmp_463*tmp_83;
      real_t a_0_0 = tmp_105*(-tmp_103*tmp_81 - tmp_104*tmp_96 + 0.5*tmp_24*tmp_96) + tmp_124*(-tmp_115*tmp_123 + 0.5*tmp_115*tmp_24 - tmp_122*tmp_81) + tmp_143*(-tmp_134*tmp_142 + 0.5*tmp_134*tmp_24 - tmp_141*tmp_81) + tmp_162*(-tmp_153*tmp_161 + 0.5*tmp_153*tmp_24 - tmp_160*tmp_81) + tmp_181*(-tmp_172*tmp_180 + 0.5*tmp_172*tmp_24 - tmp_179*tmp_81) + tmp_200*(-tmp_191*tmp_199 + 0.5*tmp_191*tmp_24 - tmp_198*tmp_81) + tmp_219*(-tmp_210*tmp_218 + 0.5*tmp_210*tmp_24 - tmp_217*tmp_81) + tmp_238*(-tmp_229*tmp_237 + 0.5*tmp_229*tmp_24 - tmp_236*tmp_81) + tmp_257*(0.5*tmp_24*tmp_248 - tmp_248*tmp_256 - tmp_255*tmp_81) + tmp_276*(0.5*tmp_24*tmp_267 - tmp_267*tmp_275 - tmp_274*tmp_81) + tmp_295*(0.5*tmp_24*tmp_286 - tmp_286*tmp_294 - tmp_293*tmp_81) + tmp_314*(0.5*tmp_24*tmp_305 - tmp_305*tmp_313 - tmp_312*tmp_81) + tmp_333*(0.5*tmp_24*tmp_324 - tmp_324*tmp_332 - tmp_331*tmp_81) + tmp_352*(0.5*tmp_24*tmp_343 - tmp_343*tmp_351 - tmp_350*tmp_81) + tmp_371*(0.5*tmp_24*tmp_362 - tmp_362*tmp_370 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_381*tmp_389 - tmp_388*tmp_81) + tmp_409*(0.5*tmp_24*tmp_400 - tmp_400*tmp_408 - tmp_407*tmp_81) + tmp_428*(0.5*tmp_24*tmp_419 - tmp_419*tmp_427 - tmp_426*tmp_81) + tmp_447*(0.5*tmp_24*tmp_438 - tmp_438*tmp_446 - tmp_445*tmp_81) + tmp_466*(0.5*tmp_24*tmp_457 - tmp_457*tmp_465 - tmp_464*tmp_81) + tmp_86*(0.5*tmp_24*tmp_70 - tmp_70*tmp_84 - tmp_80*tmp_81);
      real_t a_0_1 = tmp_105*(-tmp_103*tmp_467 - tmp_104*tmp_93 + 0.5*tmp_24*tmp_93) + tmp_124*(-tmp_112*tmp_123 + 0.5*tmp_112*tmp_24 - tmp_122*tmp_467) + tmp_143*(-tmp_131*tmp_142 + 0.5*tmp_131*tmp_24 - tmp_141*tmp_467) + tmp_162*(-tmp_150*tmp_161 + 0.5*tmp_150*tmp_24 - tmp_160*tmp_467) + tmp_181*(-tmp_169*tmp_180 + 0.5*tmp_169*tmp_24 - tmp_179*tmp_467) + tmp_200*(-tmp_188*tmp_199 + 0.5*tmp_188*tmp_24 - tmp_198*tmp_467) + tmp_219*(-tmp_207*tmp_218 + 0.5*tmp_207*tmp_24 - tmp_217*tmp_467) + tmp_238*(-tmp_226*tmp_237 + 0.5*tmp_226*tmp_24 - tmp_236*tmp_467) + tmp_257*(0.5*tmp_24*tmp_245 - tmp_245*tmp_256 - tmp_255*tmp_467) + tmp_276*(0.5*tmp_24*tmp_264 - tmp_264*tmp_275 - tmp_274*tmp_467) + tmp_295*(0.5*tmp_24*tmp_283 - tmp_283*tmp_294 - tmp_293*tmp_467) + tmp_314*(0.5*tmp_24*tmp_302 - tmp_302*tmp_313 - tmp_312*tmp_467) + tmp_333*(0.5*tmp_24*tmp_321 - tmp_321*tmp_332 - tmp_331*tmp_467) + tmp_352*(0.5*tmp_24*tmp_340 - tmp_340*tmp_351 - tmp_350*tmp_467) + tmp_371*(0.5*tmp_24*tmp_359 - tmp_359*tmp_370 - tmp_369*tmp_467) + tmp_390*(0.5*tmp_24*tmp_378 - tmp_378*tmp_389 - tmp_388*tmp_467) + tmp_409*(0.5*tmp_24*tmp_397 - tmp_397*tmp_408 - tmp_407*tmp_467) + tmp_428*(0.5*tmp_24*tmp_416 - tmp_416*tmp_427 - tmp_426*tmp_467) + tmp_447*(0.5*tmp_24*tmp_435 - tmp_435*tmp_446 - tmp_445*tmp_467) + tmp_466*(0.5*tmp_24*tmp_454 - tmp_454*tmp_465 - tmp_464*tmp_467) + tmp_86*(0.5*tmp_24*tmp_61 - tmp_467*tmp_80 - tmp_61*tmp_84);
      real_t a_0_2 = tmp_105*(-tmp_103*tmp_468 - tmp_104*tmp_94 + 0.5*tmp_24*tmp_94) + tmp_124*(-tmp_113*tmp_123 + 0.5*tmp_113*tmp_24 - tmp_122*tmp_468) + tmp_143*(-tmp_132*tmp_142 + 0.5*tmp_132*tmp_24 - tmp_141*tmp_468) + tmp_162*(-tmp_151*tmp_161 + 0.5*tmp_151*tmp_24 - tmp_160*tmp_468) + tmp_181*(-tmp_170*tmp_180 + 0.5*tmp_170*tmp_24 - tmp_179*tmp_468) + tmp_200*(-tmp_189*tmp_199 + 0.5*tmp_189*tmp_24 - tmp_198*tmp_468) + tmp_219*(-tmp_208*tmp_218 + 0.5*tmp_208*tmp_24 - tmp_217*tmp_468) + tmp_238*(-tmp_227*tmp_237 + 0.5*tmp_227*tmp_24 - tmp_236*tmp_468) + tmp_257*(0.5*tmp_24*tmp_246 - tmp_246*tmp_256 - tmp_255*tmp_468) + tmp_276*(0.5*tmp_24*tmp_265 - tmp_265*tmp_275 - tmp_274*tmp_468) + tmp_295*(0.5*tmp_24*tmp_284 - tmp_284*tmp_294 - tmp_293*tmp_468) + tmp_314*(0.5*tmp_24*tmp_303 - tmp_303*tmp_313 - tmp_312*tmp_468) + tmp_333*(0.5*tmp_24*tmp_322 - tmp_322*tmp_332 - tmp_331*tmp_468) + tmp_352*(0.5*tmp_24*tmp_341 - tmp_341*tmp_351 - tmp_350*tmp_468) + tmp_371*(0.5*tmp_24*tmp_360 - tmp_360*tmp_370 - tmp_369*tmp_468) + tmp_390*(0.5*tmp_24*tmp_379 - tmp_379*tmp_389 - tmp_388*tmp_468) + tmp_409*(0.5*tmp_24*tmp_398 - tmp_398*tmp_408 - tmp_407*tmp_468) + tmp_428*(0.5*tmp_24*tmp_417 - tmp_417*tmp_427 - tmp_426*tmp_468) + tmp_447*(0.5*tmp_24*tmp_436 - tmp_436*tmp_446 - tmp_445*tmp_468) + tmp_466*(0.5*tmp_24*tmp_455 - tmp_455*tmp_465 - tmp_464*tmp_468) + tmp_86*(0.5*tmp_24*tmp_65 - tmp_468*tmp_80 - tmp_65*tmp_84);
      real_t a_0_3 = tmp_105*(-tmp_103*tmp_469 - tmp_104*tmp_95 + 0.5*tmp_24*tmp_95) + tmp_124*(-tmp_114*tmp_123 + 0.5*tmp_114*tmp_24 - tmp_122*tmp_469) + tmp_143*(-tmp_133*tmp_142 + 0.5*tmp_133*tmp_24 - tmp_141*tmp_469) + tmp_162*(-tmp_152*tmp_161 + 0.5*tmp_152*tmp_24 - tmp_160*tmp_469) + tmp_181*(-tmp_171*tmp_180 + 0.5*tmp_171*tmp_24 - tmp_179*tmp_469) + tmp_200*(-tmp_190*tmp_199 + 0.5*tmp_190*tmp_24 - tmp_198*tmp_469) + tmp_219*(-tmp_209*tmp_218 + 0.5*tmp_209*tmp_24 - tmp_217*tmp_469) + tmp_238*(-tmp_228*tmp_237 + 0.5*tmp_228*tmp_24 - tmp_236*tmp_469) + tmp_257*(0.5*tmp_24*tmp_247 - tmp_247*tmp_256 - tmp_255*tmp_469) + tmp_276*(0.5*tmp_24*tmp_266 - tmp_266*tmp_275 - tmp_274*tmp_469) + tmp_295*(0.5*tmp_24*tmp_285 - tmp_285*tmp_294 - tmp_293*tmp_469) + tmp_314*(0.5*tmp_24*tmp_304 - tmp_304*tmp_313 - tmp_312*tmp_469) + tmp_333*(0.5*tmp_24*tmp_323 - tmp_323*tmp_332 - tmp_331*tmp_469) + tmp_352*(0.5*tmp_24*tmp_342 - tmp_342*tmp_351 - tmp_350*tmp_469) + tmp_371*(0.5*tmp_24*tmp_361 - tmp_361*tmp_370 - tmp_369*tmp_469) + tmp_390*(0.5*tmp_24*tmp_380 - tmp_380*tmp_389 - tmp_388*tmp_469) + tmp_409*(0.5*tmp_24*tmp_399 - tmp_399*tmp_408 - tmp_407*tmp_469) + tmp_428*(0.5*tmp_24*tmp_418 - tmp_418*tmp_427 - tmp_426*tmp_469) + tmp_447*(0.5*tmp_24*tmp_437 - tmp_437*tmp_446 - tmp_445*tmp_469) + tmp_466*(0.5*tmp_24*tmp_456 - tmp_456*tmp_465 - tmp_464*tmp_469) + tmp_86*(0.5*tmp_24*tmp_69 - tmp_469*tmp_80 - tmp_69*tmp_84);
      real_t a_1_0 = tmp_105*(-tmp_100*tmp_81 + 0.5*tmp_470*tmp_96 - tmp_472*tmp_96) + tmp_124*(0.5*tmp_115*tmp_470 - tmp_115*tmp_473 - tmp_119*tmp_81) + tmp_143*(0.5*tmp_134*tmp_470 - tmp_134*tmp_474 - tmp_138*tmp_81) + tmp_162*(0.5*tmp_153*tmp_470 - tmp_153*tmp_475 - tmp_157*tmp_81) + tmp_181*(0.5*tmp_172*tmp_470 - tmp_172*tmp_476 - tmp_176*tmp_81) + tmp_200*(0.5*tmp_191*tmp_470 - tmp_191*tmp_477 - tmp_195*tmp_81) + tmp_219*(0.5*tmp_210*tmp_470 - tmp_210*tmp_478 - tmp_214*tmp_81) + tmp_238*(0.5*tmp_229*tmp_470 - tmp_229*tmp_479 - tmp_233*tmp_81) + tmp_257*(0.5*tmp_248*tmp_470 - tmp_248*tmp_480 - tmp_252*tmp_81) + tmp_276*(0.5*tmp_267*tmp_470 - tmp_267*tmp_481 - tmp_271*tmp_81) + tmp_295*(0.5*tmp_286*tmp_470 - tmp_286*tmp_482 - tmp_290*tmp_81) + tmp_314*(0.5*tmp_305*tmp_470 - tmp_305*tmp_483 - tmp_309*tmp_81) + tmp_333*(0.5*tmp_324*tmp_470 - tmp_324*tmp_484 - tmp_328*tmp_81) + tmp_352*(0.5*tmp_343*tmp_470 - tmp_343*tmp_485 - tmp_347*tmp_81) + tmp_371*(0.5*tmp_362*tmp_470 - tmp_362*tmp_486 - tmp_366*tmp_81) + tmp_390*(0.5*tmp_381*tmp_470 - tmp_381*tmp_487 - tmp_385*tmp_81) + tmp_409*(0.5*tmp_400*tmp_470 - tmp_400*tmp_488 - tmp_404*tmp_81) + tmp_428*(0.5*tmp_419*tmp_470 - tmp_419*tmp_489 - tmp_423*tmp_81) + tmp_447*(0.5*tmp_438*tmp_470 - tmp_438*tmp_490 - tmp_442*tmp_81) + tmp_466*(0.5*tmp_457*tmp_470 - tmp_457*tmp_491 - tmp_461*tmp_81) + tmp_86*(0.5*tmp_470*tmp_70 - tmp_471*tmp_70 - tmp_77*tmp_81);
      real_t a_1_1 = tmp_105*(-tmp_100*tmp_467 + 0.5*tmp_470*tmp_93 - tmp_472*tmp_93) + tmp_124*(0.5*tmp_112*tmp_470 - tmp_112*tmp_473 - tmp_119*tmp_467) + tmp_143*(0.5*tmp_131*tmp_470 - tmp_131*tmp_474 - tmp_138*tmp_467) + tmp_162*(0.5*tmp_150*tmp_470 - tmp_150*tmp_475 - tmp_157*tmp_467) + tmp_181*(0.5*tmp_169*tmp_470 - tmp_169*tmp_476 - tmp_176*tmp_467) + tmp_200*(0.5*tmp_188*tmp_470 - tmp_188*tmp_477 - tmp_195*tmp_467) + tmp_219*(0.5*tmp_207*tmp_470 - tmp_207*tmp_478 - tmp_214*tmp_467) + tmp_238*(0.5*tmp_226*tmp_470 - tmp_226*tmp_479 - tmp_233*tmp_467) + tmp_257*(0.5*tmp_245*tmp_470 - tmp_245*tmp_480 - tmp_252*tmp_467) + tmp_276*(0.5*tmp_264*tmp_470 - tmp_264*tmp_481 - tmp_271*tmp_467) + tmp_295*(0.5*tmp_283*tmp_470 - tmp_283*tmp_482 - tmp_290*tmp_467) + tmp_314*(0.5*tmp_302*tmp_470 - tmp_302*tmp_483 - tmp_309*tmp_467) + tmp_333*(0.5*tmp_321*tmp_470 - tmp_321*tmp_484 - tmp_328*tmp_467) + tmp_352*(0.5*tmp_340*tmp_470 - tmp_340*tmp_485 - tmp_347*tmp_467) + tmp_371*(0.5*tmp_359*tmp_470 - tmp_359*tmp_486 - tmp_366*tmp_467) + tmp_390*(0.5*tmp_378*tmp_470 - tmp_378*tmp_487 - tmp_385*tmp_467) + tmp_409*(0.5*tmp_397*tmp_470 - tmp_397*tmp_488 - tmp_404*tmp_467) + tmp_428*(0.5*tmp_416*tmp_470 - tmp_416*tmp_489 - tmp_423*tmp_467) + tmp_447*(0.5*tmp_435*tmp_470 - tmp_435*tmp_490 - tmp_442*tmp_467) + tmp_466*(0.5*tmp_454*tmp_470 - tmp_454*tmp_491 - tmp_461*tmp_467) + tmp_86*(-tmp_467*tmp_77 + 0.5*tmp_470*tmp_61 - tmp_471*tmp_61);
      real_t a_1_2 = tmp_105*(-tmp_100*tmp_468 + 0.5*tmp_470*tmp_94 - tmp_472*tmp_94) + tmp_124*(0.5*tmp_113*tmp_470 - tmp_113*tmp_473 - tmp_119*tmp_468) + tmp_143*(0.5*tmp_132*tmp_470 - tmp_132*tmp_474 - tmp_138*tmp_468) + tmp_162*(0.5*tmp_151*tmp_470 - tmp_151*tmp_475 - tmp_157*tmp_468) + tmp_181*(0.5*tmp_170*tmp_470 - tmp_170*tmp_476 - tmp_176*tmp_468) + tmp_200*(0.5*tmp_189*tmp_470 - tmp_189*tmp_477 - tmp_195*tmp_468) + tmp_219*(0.5*tmp_208*tmp_470 - tmp_208*tmp_478 - tmp_214*tmp_468) + tmp_238*(0.5*tmp_227*tmp_470 - tmp_227*tmp_479 - tmp_233*tmp_468) + tmp_257*(0.5*tmp_246*tmp_470 - tmp_246*tmp_480 - tmp_252*tmp_468) + tmp_276*(0.5*tmp_265*tmp_470 - tmp_265*tmp_481 - tmp_271*tmp_468) + tmp_295*(0.5*tmp_284*tmp_470 - tmp_284*tmp_482 - tmp_290*tmp_468) + tmp_314*(0.5*tmp_303*tmp_470 - tmp_303*tmp_483 - tmp_309*tmp_468) + tmp_333*(0.5*tmp_322*tmp_470 - tmp_322*tmp_484 - tmp_328*tmp_468) + tmp_352*(0.5*tmp_341*tmp_470 - tmp_341*tmp_485 - tmp_347*tmp_468) + tmp_371*(0.5*tmp_360*tmp_470 - tmp_360*tmp_486 - tmp_366*tmp_468) + tmp_390*(0.5*tmp_379*tmp_470 - tmp_379*tmp_487 - tmp_385*tmp_468) + tmp_409*(0.5*tmp_398*tmp_470 - tmp_398*tmp_488 - tmp_404*tmp_468) + tmp_428*(0.5*tmp_417*tmp_470 - tmp_417*tmp_489 - tmp_423*tmp_468) + tmp_447*(0.5*tmp_436*tmp_470 - tmp_436*tmp_490 - tmp_442*tmp_468) + tmp_466*(0.5*tmp_455*tmp_470 - tmp_455*tmp_491 - tmp_461*tmp_468) + tmp_86*(-tmp_468*tmp_77 + 0.5*tmp_470*tmp_65 - tmp_471*tmp_65);
      real_t a_1_3 = tmp_105*(-tmp_100*tmp_469 + 0.5*tmp_470*tmp_95 - tmp_472*tmp_95) + tmp_124*(0.5*tmp_114*tmp_470 - tmp_114*tmp_473 - tmp_119*tmp_469) + tmp_143*(0.5*tmp_133*tmp_470 - tmp_133*tmp_474 - tmp_138*tmp_469) + tmp_162*(0.5*tmp_152*tmp_470 - tmp_152*tmp_475 - tmp_157*tmp_469) + tmp_181*(0.5*tmp_171*tmp_470 - tmp_171*tmp_476 - tmp_176*tmp_469) + tmp_200*(0.5*tmp_190*tmp_470 - tmp_190*tmp_477 - tmp_195*tmp_469) + tmp_219*(0.5*tmp_209*tmp_470 - tmp_209*tmp_478 - tmp_214*tmp_469) + tmp_238*(0.5*tmp_228*tmp_470 - tmp_228*tmp_479 - tmp_233*tmp_469) + tmp_257*(0.5*tmp_247*tmp_470 - tmp_247*tmp_480 - tmp_252*tmp_469) + tmp_276*(0.5*tmp_266*tmp_470 - tmp_266*tmp_481 - tmp_271*tmp_469) + tmp_295*(0.5*tmp_285*tmp_470 - tmp_285*tmp_482 - tmp_290*tmp_469) + tmp_314*(0.5*tmp_304*tmp_470 - tmp_304*tmp_483 - tmp_309*tmp_469) + tmp_333*(0.5*tmp_323*tmp_470 - tmp_323*tmp_484 - tmp_328*tmp_469) + tmp_352*(0.5*tmp_342*tmp_470 - tmp_342*tmp_485 - tmp_347*tmp_469) + tmp_371*(0.5*tmp_361*tmp_470 - tmp_361*tmp_486 - tmp_366*tmp_469) + tmp_390*(0.5*tmp_380*tmp_470 - tmp_380*tmp_487 - tmp_385*tmp_469) + tmp_409*(0.5*tmp_399*tmp_470 - tmp_399*tmp_488 - tmp_404*tmp_469) + tmp_428*(0.5*tmp_418*tmp_470 - tmp_418*tmp_489 - tmp_423*tmp_469) + tmp_447*(0.5*tmp_437*tmp_470 - tmp_437*tmp_490 - tmp_442*tmp_469) + tmp_466*(0.5*tmp_456*tmp_470 - tmp_456*tmp_491 - tmp_461*tmp_469) + tmp_86*(-tmp_469*tmp_77 + 0.5*tmp_470*tmp_69 - tmp_471*tmp_69);
      real_t a_2_0 = tmp_105*(-tmp_101*tmp_81 + 0.5*tmp_492*tmp_96 - tmp_494*tmp_96) + tmp_124*(0.5*tmp_115*tmp_492 - tmp_115*tmp_495 - tmp_120*tmp_81) + tmp_143*(0.5*tmp_134*tmp_492 - tmp_134*tmp_496 - tmp_139*tmp_81) + tmp_162*(0.5*tmp_153*tmp_492 - tmp_153*tmp_497 - tmp_158*tmp_81) + tmp_181*(0.5*tmp_172*tmp_492 - tmp_172*tmp_498 - tmp_177*tmp_81) + tmp_200*(0.5*tmp_191*tmp_492 - tmp_191*tmp_499 - tmp_196*tmp_81) + tmp_219*(0.5*tmp_210*tmp_492 - tmp_210*tmp_500 - tmp_215*tmp_81) + tmp_238*(0.5*tmp_229*tmp_492 - tmp_229*tmp_501 - tmp_234*tmp_81) + tmp_257*(0.5*tmp_248*tmp_492 - tmp_248*tmp_502 - tmp_253*tmp_81) + tmp_276*(0.5*tmp_267*tmp_492 - tmp_267*tmp_503 - tmp_272*tmp_81) + tmp_295*(0.5*tmp_286*tmp_492 - tmp_286*tmp_504 - tmp_291*tmp_81) + tmp_314*(0.5*tmp_305*tmp_492 - tmp_305*tmp_505 - tmp_310*tmp_81) + tmp_333*(0.5*tmp_324*tmp_492 - tmp_324*tmp_506 - tmp_329*tmp_81) + tmp_352*(0.5*tmp_343*tmp_492 - tmp_343*tmp_507 - tmp_348*tmp_81) + tmp_371*(0.5*tmp_362*tmp_492 - tmp_362*tmp_508 - tmp_367*tmp_81) + tmp_390*(0.5*tmp_381*tmp_492 - tmp_381*tmp_509 - tmp_386*tmp_81) + tmp_409*(0.5*tmp_400*tmp_492 - tmp_400*tmp_510 - tmp_405*tmp_81) + tmp_428*(0.5*tmp_419*tmp_492 - tmp_419*tmp_511 - tmp_424*tmp_81) + tmp_447*(0.5*tmp_438*tmp_492 - tmp_438*tmp_512 - tmp_443*tmp_81) + tmp_466*(0.5*tmp_457*tmp_492 - tmp_457*tmp_513 - tmp_462*tmp_81) + tmp_86*(0.5*tmp_492*tmp_70 - tmp_493*tmp_70 - tmp_78*tmp_81);
      real_t a_2_1 = tmp_105*(-tmp_101*tmp_467 + 0.5*tmp_492*tmp_93 - tmp_494*tmp_93) + tmp_124*(0.5*tmp_112*tmp_492 - tmp_112*tmp_495 - tmp_120*tmp_467) + tmp_143*(0.5*tmp_131*tmp_492 - tmp_131*tmp_496 - tmp_139*tmp_467) + tmp_162*(0.5*tmp_150*tmp_492 - tmp_150*tmp_497 - tmp_158*tmp_467) + tmp_181*(0.5*tmp_169*tmp_492 - tmp_169*tmp_498 - tmp_177*tmp_467) + tmp_200*(0.5*tmp_188*tmp_492 - tmp_188*tmp_499 - tmp_196*tmp_467) + tmp_219*(0.5*tmp_207*tmp_492 - tmp_207*tmp_500 - tmp_215*tmp_467) + tmp_238*(0.5*tmp_226*tmp_492 - tmp_226*tmp_501 - tmp_234*tmp_467) + tmp_257*(0.5*tmp_245*tmp_492 - tmp_245*tmp_502 - tmp_253*tmp_467) + tmp_276*(0.5*tmp_264*tmp_492 - tmp_264*tmp_503 - tmp_272*tmp_467) + tmp_295*(0.5*tmp_283*tmp_492 - tmp_283*tmp_504 - tmp_291*tmp_467) + tmp_314*(0.5*tmp_302*tmp_492 - tmp_302*tmp_505 - tmp_310*tmp_467) + tmp_333*(0.5*tmp_321*tmp_492 - tmp_321*tmp_506 - tmp_329*tmp_467) + tmp_352*(0.5*tmp_340*tmp_492 - tmp_340*tmp_507 - tmp_348*tmp_467) + tmp_371*(0.5*tmp_359*tmp_492 - tmp_359*tmp_508 - tmp_367*tmp_467) + tmp_390*(0.5*tmp_378*tmp_492 - tmp_378*tmp_509 - tmp_386*tmp_467) + tmp_409*(0.5*tmp_397*tmp_492 - tmp_397*tmp_510 - tmp_405*tmp_467) + tmp_428*(0.5*tmp_416*tmp_492 - tmp_416*tmp_511 - tmp_424*tmp_467) + tmp_447*(0.5*tmp_435*tmp_492 - tmp_435*tmp_512 - tmp_443*tmp_467) + tmp_466*(0.5*tmp_454*tmp_492 - tmp_454*tmp_513 - tmp_462*tmp_467) + tmp_86*(-tmp_467*tmp_78 + 0.5*tmp_492*tmp_61 - tmp_493*tmp_61);
      real_t a_2_2 = tmp_105*(-tmp_101*tmp_468 + 0.5*tmp_492*tmp_94 - tmp_494*tmp_94) + tmp_124*(0.5*tmp_113*tmp_492 - tmp_113*tmp_495 - tmp_120*tmp_468) + tmp_143*(0.5*tmp_132*tmp_492 - tmp_132*tmp_496 - tmp_139*tmp_468) + tmp_162*(0.5*tmp_151*tmp_492 - tmp_151*tmp_497 - tmp_158*tmp_468) + tmp_181*(0.5*tmp_170*tmp_492 - tmp_170*tmp_498 - tmp_177*tmp_468) + tmp_200*(0.5*tmp_189*tmp_492 - tmp_189*tmp_499 - tmp_196*tmp_468) + tmp_219*(0.5*tmp_208*tmp_492 - tmp_208*tmp_500 - tmp_215*tmp_468) + tmp_238*(0.5*tmp_227*tmp_492 - tmp_227*tmp_501 - tmp_234*tmp_468) + tmp_257*(0.5*tmp_246*tmp_492 - tmp_246*tmp_502 - tmp_253*tmp_468) + tmp_276*(0.5*tmp_265*tmp_492 - tmp_265*tmp_503 - tmp_272*tmp_468) + tmp_295*(0.5*tmp_284*tmp_492 - tmp_284*tmp_504 - tmp_291*tmp_468) + tmp_314*(0.5*tmp_303*tmp_492 - tmp_303*tmp_505 - tmp_310*tmp_468) + tmp_333*(0.5*tmp_322*tmp_492 - tmp_322*tmp_506 - tmp_329*tmp_468) + tmp_352*(0.5*tmp_341*tmp_492 - tmp_341*tmp_507 - tmp_348*tmp_468) + tmp_371*(0.5*tmp_360*tmp_492 - tmp_360*tmp_508 - tmp_367*tmp_468) + tmp_390*(0.5*tmp_379*tmp_492 - tmp_379*tmp_509 - tmp_386*tmp_468) + tmp_409*(0.5*tmp_398*tmp_492 - tmp_398*tmp_510 - tmp_405*tmp_468) + tmp_428*(0.5*tmp_417*tmp_492 - tmp_417*tmp_511 - tmp_424*tmp_468) + tmp_447*(0.5*tmp_436*tmp_492 - tmp_436*tmp_512 - tmp_443*tmp_468) + tmp_466*(0.5*tmp_455*tmp_492 - tmp_455*tmp_513 - tmp_462*tmp_468) + tmp_86*(-tmp_468*tmp_78 + 0.5*tmp_492*tmp_65 - tmp_493*tmp_65);
      real_t a_2_3 = tmp_105*(-tmp_101*tmp_469 + 0.5*tmp_492*tmp_95 - tmp_494*tmp_95) + tmp_124*(0.5*tmp_114*tmp_492 - tmp_114*tmp_495 - tmp_120*tmp_469) + tmp_143*(0.5*tmp_133*tmp_492 - tmp_133*tmp_496 - tmp_139*tmp_469) + tmp_162*(0.5*tmp_152*tmp_492 - tmp_152*tmp_497 - tmp_158*tmp_469) + tmp_181*(0.5*tmp_171*tmp_492 - tmp_171*tmp_498 - tmp_177*tmp_469) + tmp_200*(0.5*tmp_190*tmp_492 - tmp_190*tmp_499 - tmp_196*tmp_469) + tmp_219*(0.5*tmp_209*tmp_492 - tmp_209*tmp_500 - tmp_215*tmp_469) + tmp_238*(0.5*tmp_228*tmp_492 - tmp_228*tmp_501 - tmp_234*tmp_469) + tmp_257*(0.5*tmp_247*tmp_492 - tmp_247*tmp_502 - tmp_253*tmp_469) + tmp_276*(0.5*tmp_266*tmp_492 - tmp_266*tmp_503 - tmp_272*tmp_469) + tmp_295*(0.5*tmp_285*tmp_492 - tmp_285*tmp_504 - tmp_291*tmp_469) + tmp_314*(0.5*tmp_304*tmp_492 - tmp_304*tmp_505 - tmp_310*tmp_469) + tmp_333*(0.5*tmp_323*tmp_492 - tmp_323*tmp_506 - tmp_329*tmp_469) + tmp_352*(0.5*tmp_342*tmp_492 - tmp_342*tmp_507 - tmp_348*tmp_469) + tmp_371*(0.5*tmp_361*tmp_492 - tmp_361*tmp_508 - tmp_367*tmp_469) + tmp_390*(0.5*tmp_380*tmp_492 - tmp_380*tmp_509 - tmp_386*tmp_469) + tmp_409*(0.5*tmp_399*tmp_492 - tmp_399*tmp_510 - tmp_405*tmp_469) + tmp_428*(0.5*tmp_418*tmp_492 - tmp_418*tmp_511 - tmp_424*tmp_469) + tmp_447*(0.5*tmp_437*tmp_492 - tmp_437*tmp_512 - tmp_443*tmp_469) + tmp_466*(0.5*tmp_456*tmp_492 - tmp_456*tmp_513 - tmp_462*tmp_469) + tmp_86*(-tmp_469*tmp_78 + 0.5*tmp_492*tmp_69 - tmp_493*tmp_69);
      real_t a_3_0 = tmp_105*(-tmp_102*tmp_81 + 0.5*tmp_514*tmp_96 - tmp_516*tmp_96) + tmp_124*(0.5*tmp_115*tmp_514 - tmp_115*tmp_517 - tmp_121*tmp_81) + tmp_143*(0.5*tmp_134*tmp_514 - tmp_134*tmp_518 - tmp_140*tmp_81) + tmp_162*(0.5*tmp_153*tmp_514 - tmp_153*tmp_519 - tmp_159*tmp_81) + tmp_181*(0.5*tmp_172*tmp_514 - tmp_172*tmp_520 - tmp_178*tmp_81) + tmp_200*(0.5*tmp_191*tmp_514 - tmp_191*tmp_521 - tmp_197*tmp_81) + tmp_219*(0.5*tmp_210*tmp_514 - tmp_210*tmp_522 - tmp_216*tmp_81) + tmp_238*(0.5*tmp_229*tmp_514 - tmp_229*tmp_523 - tmp_235*tmp_81) + tmp_257*(0.5*tmp_248*tmp_514 - tmp_248*tmp_524 - tmp_254*tmp_81) + tmp_276*(0.5*tmp_267*tmp_514 - tmp_267*tmp_525 - tmp_273*tmp_81) + tmp_295*(0.5*tmp_286*tmp_514 - tmp_286*tmp_526 - tmp_292*tmp_81) + tmp_314*(0.5*tmp_305*tmp_514 - tmp_305*tmp_527 - tmp_311*tmp_81) + tmp_333*(0.5*tmp_324*tmp_514 - tmp_324*tmp_528 - tmp_330*tmp_81) + tmp_352*(0.5*tmp_343*tmp_514 - tmp_343*tmp_529 - tmp_349*tmp_81) + tmp_371*(0.5*tmp_362*tmp_514 - tmp_362*tmp_530 - tmp_368*tmp_81) + tmp_390*(0.5*tmp_381*tmp_514 - tmp_381*tmp_531 - tmp_387*tmp_81) + tmp_409*(0.5*tmp_400*tmp_514 - tmp_400*tmp_532 - tmp_406*tmp_81) + tmp_428*(0.5*tmp_419*tmp_514 - tmp_419*tmp_533 - tmp_425*tmp_81) + tmp_447*(0.5*tmp_438*tmp_514 - tmp_438*tmp_534 - tmp_444*tmp_81) + tmp_466*(0.5*tmp_457*tmp_514 - tmp_457*tmp_535 - tmp_463*tmp_81) + tmp_86*(0.5*tmp_514*tmp_70 - tmp_515*tmp_70 - tmp_79*tmp_81);
      real_t a_3_1 = tmp_105*(-tmp_102*tmp_467 + 0.5*tmp_514*tmp_93 - tmp_516*tmp_93) + tmp_124*(0.5*tmp_112*tmp_514 - tmp_112*tmp_517 - tmp_121*tmp_467) + tmp_143*(0.5*tmp_131*tmp_514 - tmp_131*tmp_518 - tmp_140*tmp_467) + tmp_162*(0.5*tmp_150*tmp_514 - tmp_150*tmp_519 - tmp_159*tmp_467) + tmp_181*(0.5*tmp_169*tmp_514 - tmp_169*tmp_520 - tmp_178*tmp_467) + tmp_200*(0.5*tmp_188*tmp_514 - tmp_188*tmp_521 - tmp_197*tmp_467) + tmp_219*(0.5*tmp_207*tmp_514 - tmp_207*tmp_522 - tmp_216*tmp_467) + tmp_238*(0.5*tmp_226*tmp_514 - tmp_226*tmp_523 - tmp_235*tmp_467) + tmp_257*(0.5*tmp_245*tmp_514 - tmp_245*tmp_524 - tmp_254*tmp_467) + tmp_276*(0.5*tmp_264*tmp_514 - tmp_264*tmp_525 - tmp_273*tmp_467) + tmp_295*(0.5*tmp_283*tmp_514 - tmp_283*tmp_526 - tmp_292*tmp_467) + tmp_314*(0.5*tmp_302*tmp_514 - tmp_302*tmp_527 - tmp_311*tmp_467) + tmp_333*(0.5*tmp_321*tmp_514 - tmp_321*tmp_528 - tmp_330*tmp_467) + tmp_352*(0.5*tmp_340*tmp_514 - tmp_340*tmp_529 - tmp_349*tmp_467) + tmp_371*(0.5*tmp_359*tmp_514 - tmp_359*tmp_530 - tmp_368*tmp_467) + tmp_390*(0.5*tmp_378*tmp_514 - tmp_378*tmp_531 - tmp_387*tmp_467) + tmp_409*(0.5*tmp_397*tmp_514 - tmp_397*tmp_532 - tmp_406*tmp_467) + tmp_428*(0.5*tmp_416*tmp_514 - tmp_416*tmp_533 - tmp_425*tmp_467) + tmp_447*(0.5*tmp_435*tmp_514 - tmp_435*tmp_534 - tmp_444*tmp_467) + tmp_466*(0.5*tmp_454*tmp_514 - tmp_454*tmp_535 - tmp_463*tmp_467) + tmp_86*(-tmp_467*tmp_79 + 0.5*tmp_514*tmp_61 - tmp_515*tmp_61);
      real_t a_3_2 = tmp_105*(-tmp_102*tmp_468 + 0.5*tmp_514*tmp_94 - tmp_516*tmp_94) + tmp_124*(0.5*tmp_113*tmp_514 - tmp_113*tmp_517 - tmp_121*tmp_468) + tmp_143*(0.5*tmp_132*tmp_514 - tmp_132*tmp_518 - tmp_140*tmp_468) + tmp_162*(0.5*tmp_151*tmp_514 - tmp_151*tmp_519 - tmp_159*tmp_468) + tmp_181*(0.5*tmp_170*tmp_514 - tmp_170*tmp_520 - tmp_178*tmp_468) + tmp_200*(0.5*tmp_189*tmp_514 - tmp_189*tmp_521 - tmp_197*tmp_468) + tmp_219*(0.5*tmp_208*tmp_514 - tmp_208*tmp_522 - tmp_216*tmp_468) + tmp_238*(0.5*tmp_227*tmp_514 - tmp_227*tmp_523 - tmp_235*tmp_468) + tmp_257*(0.5*tmp_246*tmp_514 - tmp_246*tmp_524 - tmp_254*tmp_468) + tmp_276*(0.5*tmp_265*tmp_514 - tmp_265*tmp_525 - tmp_273*tmp_468) + tmp_295*(0.5*tmp_284*tmp_514 - tmp_284*tmp_526 - tmp_292*tmp_468) + tmp_314*(0.5*tmp_303*tmp_514 - tmp_303*tmp_527 - tmp_311*tmp_468) + tmp_333*(0.5*tmp_322*tmp_514 - tmp_322*tmp_528 - tmp_330*tmp_468) + tmp_352*(0.5*tmp_341*tmp_514 - tmp_341*tmp_529 - tmp_349*tmp_468) + tmp_371*(0.5*tmp_360*tmp_514 - tmp_360*tmp_530 - tmp_368*tmp_468) + tmp_390*(0.5*tmp_379*tmp_514 - tmp_379*tmp_531 - tmp_387*tmp_468) + tmp_409*(0.5*tmp_398*tmp_514 - tmp_398*tmp_532 - tmp_406*tmp_468) + tmp_428*(0.5*tmp_417*tmp_514 - tmp_417*tmp_533 - tmp_425*tmp_468) + tmp_447*(0.5*tmp_436*tmp_514 - tmp_436*tmp_534 - tmp_444*tmp_468) + tmp_466*(0.5*tmp_455*tmp_514 - tmp_455*tmp_535 - tmp_463*tmp_468) + tmp_86*(-tmp_468*tmp_79 + 0.5*tmp_514*tmp_65 - tmp_515*tmp_65);
      real_t a_3_3 = tmp_105*(-tmp_102*tmp_469 + 0.5*tmp_514*tmp_95 - tmp_516*tmp_95) + tmp_124*(0.5*tmp_114*tmp_514 - tmp_114*tmp_517 - tmp_121*tmp_469) + tmp_143*(0.5*tmp_133*tmp_514 - tmp_133*tmp_518 - tmp_140*tmp_469) + tmp_162*(0.5*tmp_152*tmp_514 - tmp_152*tmp_519 - tmp_159*tmp_469) + tmp_181*(0.5*tmp_171*tmp_514 - tmp_171*tmp_520 - tmp_178*tmp_469) + tmp_200*(0.5*tmp_190*tmp_514 - tmp_190*tmp_521 - tmp_197*tmp_469) + tmp_219*(0.5*tmp_209*tmp_514 - tmp_209*tmp_522 - tmp_216*tmp_469) + tmp_238*(0.5*tmp_228*tmp_514 - tmp_228*tmp_523 - tmp_235*tmp_469) + tmp_257*(0.5*tmp_247*tmp_514 - tmp_247*tmp_524 - tmp_254*tmp_469) + tmp_276*(0.5*tmp_266*tmp_514 - tmp_266*tmp_525 - tmp_273*tmp_469) + tmp_295*(0.5*tmp_285*tmp_514 - tmp_285*tmp_526 - tmp_292*tmp_469) + tmp_314*(0.5*tmp_304*tmp_514 - tmp_304*tmp_527 - tmp_311*tmp_469) + tmp_333*(0.5*tmp_323*tmp_514 - tmp_323*tmp_528 - tmp_330*tmp_469) + tmp_352*(0.5*tmp_342*tmp_514 - tmp_342*tmp_529 - tmp_349*tmp_469) + tmp_371*(0.5*tmp_361*tmp_514 - tmp_361*tmp_530 - tmp_368*tmp_469) + tmp_390*(0.5*tmp_380*tmp_514 - tmp_380*tmp_531 - tmp_387*tmp_469) + tmp_409*(0.5*tmp_399*tmp_514 - tmp_399*tmp_532 - tmp_406*tmp_469) + tmp_428*(0.5*tmp_418*tmp_514 - tmp_418*tmp_533 - tmp_425*tmp_469) + tmp_447*(0.5*tmp_437*tmp_514 - tmp_437*tmp_534 - tmp_444*tmp_469) + tmp_466*(0.5*tmp_456*tmp_514 - tmp_456*tmp_535 - tmp_463*tmp_469) + tmp_86*(-tmp_469*tmp_79 + 0.5*tmp_514*tmp_69 - tmp_515*tmp_69);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -tmp_4;
      real_t tmp_9 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_10 = 0.93718850182767688*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_11 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_13 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_14 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_15 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_16 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_17 = tmp_14*tmp_16;
      real_t tmp_18 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_19 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_20 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_21 = tmp_19*tmp_20;
      real_t tmp_22 = tmp_12*tmp_20;
      real_t tmp_23 = tmp_16*tmp_19;
      real_t tmp_24 = tmp_14*tmp_18;
      real_t tmp_25 = 1.0 / (tmp_11*tmp_12*tmp_18 - tmp_11*tmp_23 + tmp_13*tmp_21 - tmp_13*tmp_24 + tmp_15*tmp_17 - tmp_15*tmp_22);
      real_t tmp_26 = tmp_25*(tmp_11*tmp_12 - tmp_13*tmp_14);
      real_t tmp_27 = -tmp_1;
      real_t tmp_28 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_29 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_30 = tmp_25*(-tmp_11*tmp_16 + tmp_13*tmp_20);
      real_t tmp_31 = -tmp_3;
      real_t tmp_32 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_33 = 0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_34 = tmp_25*(tmp_17 - tmp_22);
      real_t tmp_35 = tmp_10*tmp_26 + tmp_29*tmp_30 + tmp_33*tmp_34;
      real_t tmp_36 = tmp_25*(-tmp_12*tmp_15 + tmp_13*tmp_19);
      real_t tmp_37 = tmp_25*(-tmp_13*tmp_18 + tmp_15*tmp_16);
      real_t tmp_38 = tmp_25*(tmp_12*tmp_18 - tmp_23);
      real_t tmp_39 = tmp_10*tmp_36 + tmp_29*tmp_37 + tmp_33*tmp_38;
      real_t tmp_40 = tmp_25*(-tmp_11*tmp_19 + tmp_14*tmp_15);
      real_t tmp_41 = tmp_25*(tmp_11*tmp_18 - tmp_15*tmp_20);
      real_t tmp_42 = tmp_25*(tmp_21 - tmp_24);
      real_t tmp_43 = tmp_10*tmp_40 + tmp_29*tmp_41 + tmp_33*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = p_affine_13_0*(-tmp_34 - tmp_38 - tmp_42) + p_affine_13_1*(-tmp_30 - tmp_37 - tmp_41) + p_affine_13_2*(-tmp_26 - tmp_36 - tmp_40);
      real_t tmp_46 = 2*tmp_45;
      real_t tmp_47 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_48 = 0.0068572537431980923*tmp_47;
      real_t tmp_49 = 0.60796128279561268*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_50 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_51 = 0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_52 = tmp_26*tmp_49 + tmp_30*tmp_50 + tmp_34*tmp_51;
      real_t tmp_53 = tmp_36*tmp_49 + tmp_37*tmp_50 + tmp_38*tmp_51;
      real_t tmp_54 = tmp_40*tmp_49 + tmp_41*tmp_50 + tmp_42*tmp_51;
      real_t tmp_55 = -tmp_52 - tmp_53 - tmp_54 + 1;
      real_t tmp_56 = 0.037198804536718075*tmp_47;
      real_t tmp_57 = 0.039308471900058539*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_58 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_59 = 0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_60 = tmp_26*tmp_57 + tmp_30*tmp_58 + tmp_34*tmp_59;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59;
      real_t tmp_63 = -tmp_60 - tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.020848748529055869*tmp_47;
      real_t tmp_65 = 0.1711304259088916*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_66 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_67 = 0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_68 = tmp_26*tmp_65 + tmp_30*tmp_66 + tmp_34*tmp_67;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67;
      real_t tmp_71 = -tmp_68 - tmp_69 - tmp_70 + 1;
      real_t tmp_72 = 0.019202922745021479*tmp_47;
      real_t tmp_73 = 0.37605877282253791*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_74 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_75 = 0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_76 = tmp_26*tmp_73 + tmp_30*tmp_74 + tmp_34*tmp_75;
      real_t tmp_77 = tmp_36*tmp_73 + tmp_37*tmp_74 + tmp_38*tmp_75;
      real_t tmp_78 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 0.020848748529055869*tmp_47;
      real_t tmp_81 = 0.78764240869137092*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_82 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_83 = 0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_84 = tmp_26*tmp_81 + tmp_30*tmp_82 + tmp_34*tmp_83;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.019202922745021479*tmp_47;
      real_t tmp_89 = 0.58463275527740355*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_90 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_91 = 0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_92 = tmp_26*tmp_89 + tmp_30*tmp_90 + tmp_34*tmp_91;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91;
      real_t tmp_95 = -tmp_92 - tmp_93 - tmp_94 + 1;
      real_t tmp_96 = 0.020848748529055869*tmp_47;
      real_t tmp_97 = 0.041227165399737475*tmp_5 + 0.78764240869137092*tmp_8 + tmp_9;
      real_t tmp_98 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_99 = 0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_31 + tmp_32;
      real_t tmp_100 = tmp_26*tmp_97 + tmp_30*tmp_98 + tmp_34*tmp_99;
      real_t tmp_101 = tmp_36*tmp_97 + tmp_37*tmp_98 + tmp_38*tmp_99;
      real_t tmp_102 = tmp_40*tmp_97 + tmp_41*tmp_98 + tmp_42*tmp_99;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = 0.019202922745021479*tmp_47;
      real_t tmp_105 = 0.039308471900058539*tmp_5 + 0.58463275527740355*tmp_8 + tmp_9;
      real_t tmp_106 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_107 = 0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_31 + tmp_32;
      real_t tmp_108 = tmp_105*tmp_26 + tmp_106*tmp_30 + tmp_107*tmp_34;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42;
      real_t tmp_111 = -tmp_108 - tmp_109 - tmp_110 + 1;
      real_t tmp_112 = 0.020848748529055869*tmp_47;
      real_t tmp_113 = 0.78764240869137092*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_114 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_115 = 0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_116 = tmp_113*tmp_26 + tmp_114*tmp_30 + tmp_115*tmp_34;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = 0.019202922745021479*tmp_47;
      real_t tmp_121 = 0.58463275527740355*tmp_5 + 0.37605877282253791*tmp_8 + tmp_9;
      real_t tmp_122 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_123 = 0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_31 + tmp_32;
      real_t tmp_124 = tmp_121*tmp_26 + tmp_122*tmp_30 + tmp_123*tmp_34;
      real_t tmp_125 = tmp_121*tmp_36 + tmp_122*tmp_37 + tmp_123*tmp_38;
      real_t tmp_126 = tmp_121*tmp_40 + tmp_122*tmp_41 + tmp_123*tmp_42;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_47;
      real_t tmp_129 = 0.1711304259088916*tmp_5 + 0.041227165399737475*tmp_8 + tmp_9;
      real_t tmp_130 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_131 = 0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_31 + tmp_32;
      real_t tmp_132 = tmp_129*tmp_26 + tmp_130*tmp_30 + tmp_131*tmp_34;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = 0.019202922745021479*tmp_47;
      real_t tmp_137 = 0.19107600050469298*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_138 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_139 = 0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_140 = tmp_137*tmp_26 + tmp_138*tmp_30 + tmp_139*tmp_34;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42;
      real_t tmp_143 = -tmp_140 - tmp_141 - tmp_142 + 1;
      real_t tmp_144 = 0.042507265838595799*tmp_47;
      real_t tmp_145 = 0.37605877282253791*tmp_5 + 0.039308471900058539*tmp_8 + tmp_9;
      real_t tmp_146 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_147 = 0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_31 + tmp_32;
      real_t tmp_148 = tmp_145*tmp_26 + tmp_146*tmp_30 + tmp_147*tmp_34;
      real_t tmp_149 = tmp_145*tmp_36 + tmp_146*tmp_37 + tmp_147*tmp_38;
      real_t tmp_150 = tmp_145*tmp_40 + tmp_146*tmp_41 + tmp_147*tmp_42;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 0.020848748529055869*tmp_47;
      real_t tmp_153 = 0.031405749086161582*tmp_5 + 0.93718850182767688*tmp_8 + tmp_9;
      real_t tmp_154 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_155 = 0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_31 + tmp_32;
      real_t tmp_156 = tmp_153*tmp_26 + tmp_154*tmp_30 + tmp_155*tmp_34;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.0068572537431980923*tmp_47;
      real_t tmp_161 = 0.19601935860219369*tmp_5 + 0.60796128279561268*tmp_8 + tmp_9;
      real_t tmp_162 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_163 = 0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_31 + tmp_32;
      real_t tmp_164 = tmp_161*tmp_26 + tmp_162*tmp_30 + tmp_163*tmp_34;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42;
      real_t tmp_167 = -tmp_164 - tmp_165 - tmp_166 + 1;
      real_t tmp_168 = 0.037198804536718075*tmp_47;
      real_t tmp_169 = 0.40446199974765351*tmp_5 + 0.19107600050469298*tmp_8 + tmp_9;
      real_t tmp_170 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_171 = 0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_31 + tmp_32;
      real_t tmp_172 = tmp_169*tmp_26 + tmp_170*tmp_30 + tmp_171*tmp_34;
      real_t tmp_173 = tmp_169*tmp_36 + tmp_170*tmp_37 + tmp_171*tmp_38;
      real_t tmp_174 = tmp_169*tmp_40 + tmp_170*tmp_41 + tmp_171*tmp_42;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = 0.042507265838595799*tmp_47;
      real_t tmp_177 = 0.031405749086161582*tmp_5 + 0.031405749086161582*tmp_8 + tmp_9;
      real_t tmp_178 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_179 = 0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_31 + tmp_32;
      real_t tmp_180 = tmp_177*tmp_26 + tmp_178*tmp_30 + tmp_179*tmp_34;
      real_t tmp_181 = tmp_177*tmp_36 + tmp_178*tmp_37 + tmp_179*tmp_38;
      real_t tmp_182 = tmp_177*tmp_40 + tmp_178*tmp_41 + tmp_179*tmp_42;
      real_t tmp_183 = -tmp_180 - tmp_181 - tmp_182 + 1;
      real_t tmp_184 = 0.0068572537431980923*tmp_47;
      real_t tmp_185 = 0.19601935860219369*tmp_5 + 0.19601935860219369*tmp_8 + tmp_9;
      real_t tmp_186 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_187 = 0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_31 + tmp_32;
      real_t tmp_188 = tmp_185*tmp_26 + tmp_186*tmp_30 + tmp_187*tmp_34;
      real_t tmp_189 = tmp_185*tmp_36 + tmp_186*tmp_37 + tmp_187*tmp_38;
      real_t tmp_190 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = 0.037198804536718075*tmp_47;
      real_t tmp_193 = 0.40446199974765351*tmp_5 + 0.40446199974765351*tmp_8 + tmp_9;
      real_t tmp_194 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_195 = 0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_31 + tmp_32;
      real_t tmp_196 = tmp_193*tmp_26 + tmp_194*tmp_30 + tmp_195*tmp_34;
      real_t tmp_197 = tmp_193*tmp_36 + tmp_194*tmp_37 + tmp_195*tmp_38;
      real_t tmp_198 = tmp_193*tmp_40 + tmp_194*tmp_41 + tmp_195*tmp_42;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.042507265838595799*tmp_47;
      real_t tmp_201 = 0.041227165399737475*tmp_5 + 0.1711304259088916*tmp_8 + tmp_9;
      real_t tmp_202 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_203 = 0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_31 + tmp_32;
      real_t tmp_204 = tmp_201*tmp_26 + tmp_202*tmp_30 + tmp_203*tmp_34;
      real_t tmp_205 = tmp_201*tmp_36 + tmp_202*tmp_37 + tmp_203*tmp_38;
      real_t tmp_206 = tmp_201*tmp_40 + tmp_202*tmp_41 + tmp_203*tmp_42;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = 0.019202922745021479*tmp_47;
      real_t tmp_209 = p_affine_13_0*tmp_34 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_26;
      real_t tmp_210 = tmp_104*(3.0*tmp_100*tmp_103*tmp_7 - tmp_100*tmp_45 - tmp_103*tmp_209) + tmp_112*(3.0*tmp_108*tmp_111*tmp_7 - tmp_108*tmp_45 - tmp_111*tmp_209) + tmp_120*(3.0*tmp_116*tmp_119*tmp_7 - tmp_116*tmp_45 - tmp_119*tmp_209) + tmp_128*(3.0*tmp_124*tmp_127*tmp_7 - tmp_124*tmp_45 - tmp_127*tmp_209) + tmp_136*(3.0*tmp_132*tmp_135*tmp_7 - tmp_132*tmp_45 - tmp_135*tmp_209) + tmp_144*(3.0*tmp_140*tmp_143*tmp_7 - tmp_140*tmp_45 - tmp_143*tmp_209) + tmp_152*(3.0*tmp_148*tmp_151*tmp_7 - tmp_148*tmp_45 - tmp_151*tmp_209) + tmp_160*(3.0*tmp_156*tmp_159*tmp_7 - tmp_156*tmp_45 - tmp_159*tmp_209) + tmp_168*(3.0*tmp_164*tmp_167*tmp_7 - tmp_164*tmp_45 - tmp_167*tmp_209) + tmp_176*(3.0*tmp_172*tmp_175*tmp_7 - tmp_172*tmp_45 - tmp_175*tmp_209) + tmp_184*(3.0*tmp_180*tmp_183*tmp_7 - tmp_180*tmp_45 - tmp_183*tmp_209) + tmp_192*(3.0*tmp_188*tmp_191*tmp_7 - tmp_188*tmp_45 - tmp_191*tmp_209) + tmp_200*(3.0*tmp_196*tmp_199*tmp_7 - tmp_196*tmp_45 - tmp_199*tmp_209) + tmp_208*(3.0*tmp_204*tmp_207*tmp_7 - tmp_204*tmp_45 - tmp_207*tmp_209) + tmp_48*(-tmp_209*tmp_44 + 3.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_45) + tmp_56*(-tmp_209*tmp_55 - tmp_45*tmp_52 + 3.0*tmp_52*tmp_55*tmp_7) + tmp_64*(-tmp_209*tmp_63 - tmp_45*tmp_60 + 3.0*tmp_60*tmp_63*tmp_7) + tmp_72*(-tmp_209*tmp_71 - tmp_45*tmp_68 + 3.0*tmp_68*tmp_7*tmp_71) + tmp_80*(-tmp_209*tmp_79 - tmp_45*tmp_76 + 3.0*tmp_7*tmp_76*tmp_79) + tmp_88*(-tmp_209*tmp_87 - tmp_45*tmp_84 + 3.0*tmp_7*tmp_84*tmp_87) + tmp_96*(-tmp_209*tmp_95 - tmp_45*tmp_92 + 3.0*tmp_7*tmp_92*tmp_95);
      real_t tmp_211 = p_affine_13_0*tmp_38 + p_affine_13_1*tmp_37 + p_affine_13_2*tmp_36;
      real_t tmp_212 = tmp_104*(3.0*tmp_101*tmp_103*tmp_7 - tmp_101*tmp_45 - tmp_103*tmp_211) + tmp_112*(3.0*tmp_109*tmp_111*tmp_7 - tmp_109*tmp_45 - tmp_111*tmp_211) + tmp_120*(3.0*tmp_117*tmp_119*tmp_7 - tmp_117*tmp_45 - tmp_119*tmp_211) + tmp_128*(3.0*tmp_125*tmp_127*tmp_7 - tmp_125*tmp_45 - tmp_127*tmp_211) + tmp_136*(3.0*tmp_133*tmp_135*tmp_7 - tmp_133*tmp_45 - tmp_135*tmp_211) + tmp_144*(3.0*tmp_141*tmp_143*tmp_7 - tmp_141*tmp_45 - tmp_143*tmp_211) + tmp_152*(3.0*tmp_149*tmp_151*tmp_7 - tmp_149*tmp_45 - tmp_151*tmp_211) + tmp_160*(3.0*tmp_157*tmp_159*tmp_7 - tmp_157*tmp_45 - tmp_159*tmp_211) + tmp_168*(3.0*tmp_165*tmp_167*tmp_7 - tmp_165*tmp_45 - tmp_167*tmp_211) + tmp_176*(3.0*tmp_173*tmp_175*tmp_7 - tmp_173*tmp_45 - tmp_175*tmp_211) + tmp_184*(3.0*tmp_181*tmp_183*tmp_7 - tmp_181*tmp_45 - tmp_183*tmp_211) + tmp_192*(3.0*tmp_189*tmp_191*tmp_7 - tmp_189*tmp_45 - tmp_191*tmp_211) + tmp_200*(3.0*tmp_197*tmp_199*tmp_7 - tmp_197*tmp_45 - tmp_199*tmp_211) + tmp_208*(3.0*tmp_205*tmp_207*tmp_7 - tmp_205*tmp_45 - tmp_207*tmp_211) + tmp_48*(-tmp_211*tmp_44 + 3.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_45) + tmp_56*(-tmp_211*tmp_55 - tmp_45*tmp_53 + 3.0*tmp_53*tmp_55*tmp_7) + tmp_64*(-tmp_211*tmp_63 - tmp_45*tmp_61 + 3.0*tmp_61*tmp_63*tmp_7) + tmp_72*(-tmp_211*tmp_71 - tmp_45*tmp_69 + 3.0*tmp_69*tmp_7*tmp_71) + tmp_80*(-tmp_211*tmp_79 - tmp_45*tmp_77 + 3.0*tmp_7*tmp_77*tmp_79) + tmp_88*(-tmp_211*tmp_87 - tmp_45*tmp_85 + 3.0*tmp_7*tmp_85*tmp_87) + tmp_96*(-tmp_211*tmp_95 - tmp_45*tmp_93 + 3.0*tmp_7*tmp_93*tmp_95);
      real_t tmp_213 = p_affine_13_0*tmp_42 + p_affine_13_1*tmp_41 + p_affine_13_2*tmp_40;
      real_t tmp_214 = tmp_104*(3.0*tmp_102*tmp_103*tmp_7 - tmp_102*tmp_45 - tmp_103*tmp_213) + tmp_112*(3.0*tmp_110*tmp_111*tmp_7 - tmp_110*tmp_45 - tmp_111*tmp_213) + tmp_120*(3.0*tmp_118*tmp_119*tmp_7 - tmp_118*tmp_45 - tmp_119*tmp_213) + tmp_128*(3.0*tmp_126*tmp_127*tmp_7 - tmp_126*tmp_45 - tmp_127*tmp_213) + tmp_136*(3.0*tmp_134*tmp_135*tmp_7 - tmp_134*tmp_45 - tmp_135*tmp_213) + tmp_144*(3.0*tmp_142*tmp_143*tmp_7 - tmp_142*tmp_45 - tmp_143*tmp_213) + tmp_152*(3.0*tmp_150*tmp_151*tmp_7 - tmp_150*tmp_45 - tmp_151*tmp_213) + tmp_160*(3.0*tmp_158*tmp_159*tmp_7 - tmp_158*tmp_45 - tmp_159*tmp_213) + tmp_168*(3.0*tmp_166*tmp_167*tmp_7 - tmp_166*tmp_45 - tmp_167*tmp_213) + tmp_176*(3.0*tmp_174*tmp_175*tmp_7 - tmp_174*tmp_45 - tmp_175*tmp_213) + tmp_184*(3.0*tmp_182*tmp_183*tmp_7 - tmp_182*tmp_45 - tmp_183*tmp_213) + tmp_192*(3.0*tmp_190*tmp_191*tmp_7 - tmp_190*tmp_45 - tmp_191*tmp_213) + tmp_200*(3.0*tmp_198*tmp_199*tmp_7 - tmp_198*tmp_45 - tmp_199*tmp_213) + tmp_208*(3.0*tmp_206*tmp_207*tmp_7 - tmp_206*tmp_45 - tmp_207*tmp_213) + tmp_48*(-tmp_213*tmp_44 + 3.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_45) + tmp_56*(-tmp_213*tmp_55 - tmp_45*tmp_54 + 3.0*tmp_54*tmp_55*tmp_7) + tmp_64*(-tmp_213*tmp_63 - tmp_45*tmp_62 + 3.0*tmp_62*tmp_63*tmp_7) + tmp_72*(-tmp_213*tmp_71 - tmp_45*tmp_70 + 3.0*tmp_7*tmp_70*tmp_71) + tmp_80*(-tmp_213*tmp_79 - tmp_45*tmp_78 + 3.0*tmp_7*tmp_78*tmp_79) + tmp_88*(-tmp_213*tmp_87 - tmp_45*tmp_86 + 3.0*tmp_7*tmp_86*tmp_87) + tmp_96*(-tmp_213*tmp_95 - tmp_45*tmp_94 + 3.0*tmp_7*tmp_94*tmp_95);
      real_t tmp_215 = 2*tmp_209;
      real_t tmp_216 = tmp_104*(3.0*tmp_100*tmp_101*tmp_7 - tmp_100*tmp_211 - tmp_101*tmp_209) + tmp_112*(3.0*tmp_108*tmp_109*tmp_7 - tmp_108*tmp_211 - tmp_109*tmp_209) + tmp_120*(3.0*tmp_116*tmp_117*tmp_7 - tmp_116*tmp_211 - tmp_117*tmp_209) + tmp_128*(3.0*tmp_124*tmp_125*tmp_7 - tmp_124*tmp_211 - tmp_125*tmp_209) + tmp_136*(3.0*tmp_132*tmp_133*tmp_7 - tmp_132*tmp_211 - tmp_133*tmp_209) + tmp_144*(3.0*tmp_140*tmp_141*tmp_7 - tmp_140*tmp_211 - tmp_141*tmp_209) + tmp_152*(3.0*tmp_148*tmp_149*tmp_7 - tmp_148*tmp_211 - tmp_149*tmp_209) + tmp_160*(3.0*tmp_156*tmp_157*tmp_7 - tmp_156*tmp_211 - tmp_157*tmp_209) + tmp_168*(3.0*tmp_164*tmp_165*tmp_7 - tmp_164*tmp_211 - tmp_165*tmp_209) + tmp_176*(3.0*tmp_172*tmp_173*tmp_7 - tmp_172*tmp_211 - tmp_173*tmp_209) + tmp_184*(3.0*tmp_180*tmp_181*tmp_7 - tmp_180*tmp_211 - tmp_181*tmp_209) + tmp_192*(3.0*tmp_188*tmp_189*tmp_7 - tmp_188*tmp_211 - tmp_189*tmp_209) + tmp_200*(3.0*tmp_196*tmp_197*tmp_7 - tmp_196*tmp_211 - tmp_197*tmp_209) + tmp_208*(3.0*tmp_204*tmp_205*tmp_7 - tmp_204*tmp_211 - tmp_205*tmp_209) + tmp_48*(-tmp_209*tmp_39 - tmp_211*tmp_35 + 3.0*tmp_35*tmp_39*tmp_7) + tmp_56*(-tmp_209*tmp_53 - tmp_211*tmp_52 + 3.0*tmp_52*tmp_53*tmp_7) + tmp_64*(-tmp_209*tmp_61 - tmp_211*tmp_60 + 3.0*tmp_60*tmp_61*tmp_7) + tmp_72*(-tmp_209*tmp_69 - tmp_211*tmp_68 + 3.0*tmp_68*tmp_69*tmp_7) + tmp_80*(-tmp_209*tmp_77 - tmp_211*tmp_76 + 3.0*tmp_7*tmp_76*tmp_77) + tmp_88*(-tmp_209*tmp_85 - tmp_211*tmp_84 + 3.0*tmp_7*tmp_84*tmp_85) + tmp_96*(-tmp_209*tmp_93 - tmp_211*tmp_92 + 3.0*tmp_7*tmp_92*tmp_93);
      real_t tmp_217 = tmp_104*(3.0*tmp_100*tmp_102*tmp_7 - tmp_100*tmp_213 - tmp_102*tmp_209) + tmp_112*(3.0*tmp_108*tmp_110*tmp_7 - tmp_108*tmp_213 - tmp_110*tmp_209) + tmp_120*(3.0*tmp_116*tmp_118*tmp_7 - tmp_116*tmp_213 - tmp_118*tmp_209) + tmp_128*(3.0*tmp_124*tmp_126*tmp_7 - tmp_124*tmp_213 - tmp_126*tmp_209) + tmp_136*(3.0*tmp_132*tmp_134*tmp_7 - tmp_132*tmp_213 - tmp_134*tmp_209) + tmp_144*(3.0*tmp_140*tmp_142*tmp_7 - tmp_140*tmp_213 - tmp_142*tmp_209) + tmp_152*(3.0*tmp_148*tmp_150*tmp_7 - tmp_148*tmp_213 - tmp_150*tmp_209) + tmp_160*(3.0*tmp_156*tmp_158*tmp_7 - tmp_156*tmp_213 - tmp_158*tmp_209) + tmp_168*(3.0*tmp_164*tmp_166*tmp_7 - tmp_164*tmp_213 - tmp_166*tmp_209) + tmp_176*(3.0*tmp_172*tmp_174*tmp_7 - tmp_172*tmp_213 - tmp_174*tmp_209) + tmp_184*(3.0*tmp_180*tmp_182*tmp_7 - tmp_180*tmp_213 - tmp_182*tmp_209) + tmp_192*(3.0*tmp_188*tmp_190*tmp_7 - tmp_188*tmp_213 - tmp_190*tmp_209) + tmp_200*(3.0*tmp_196*tmp_198*tmp_7 - tmp_196*tmp_213 - tmp_198*tmp_209) + tmp_208*(3.0*tmp_204*tmp_206*tmp_7 - tmp_204*tmp_213 - tmp_206*tmp_209) + tmp_48*(-tmp_209*tmp_43 - tmp_213*tmp_35 + 3.0*tmp_35*tmp_43*tmp_7) + tmp_56*(-tmp_209*tmp_54 - tmp_213*tmp_52 + 3.0*tmp_52*tmp_54*tmp_7) + tmp_64*(-tmp_209*tmp_62 - tmp_213*tmp_60 + 3.0*tmp_60*tmp_62*tmp_7) + tmp_72*(-tmp_209*tmp_70 - tmp_213*tmp_68 + 3.0*tmp_68*tmp_7*tmp_70) + tmp_80*(-tmp_209*tmp_78 - tmp_213*tmp_76 + 3.0*tmp_7*tmp_76*tmp_78) + tmp_88*(-tmp_209*tmp_86 - tmp_213*tmp_84 + 3.0*tmp_7*tmp_84*tmp_86) + tmp_96*(-tmp_209*tmp_94 - tmp_213*tmp_92 + 3.0*tmp_7*tmp_92*tmp_94);
      real_t tmp_218 = 2*tmp_211;
      real_t tmp_219 = tmp_104*(3.0*tmp_101*tmp_102*tmp_7 - tmp_101*tmp_213 - tmp_102*tmp_211) + tmp_112*(3.0*tmp_109*tmp_110*tmp_7 - tmp_109*tmp_213 - tmp_110*tmp_211) + tmp_120*(3.0*tmp_117*tmp_118*tmp_7 - tmp_117*tmp_213 - tmp_118*tmp_211) + tmp_128*(3.0*tmp_125*tmp_126*tmp_7 - tmp_125*tmp_213 - tmp_126*tmp_211) + tmp_136*(3.0*tmp_133*tmp_134*tmp_7 - tmp_133*tmp_213 - tmp_134*tmp_211) + tmp_144*(3.0*tmp_141*tmp_142*tmp_7 - tmp_141*tmp_213 - tmp_142*tmp_211) + tmp_152*(3.0*tmp_149*tmp_150*tmp_7 - tmp_149*tmp_213 - tmp_150*tmp_211) + tmp_160*(3.0*tmp_157*tmp_158*tmp_7 - tmp_157*tmp_213 - tmp_158*tmp_211) + tmp_168*(3.0*tmp_165*tmp_166*tmp_7 - tmp_165*tmp_213 - tmp_166*tmp_211) + tmp_176*(3.0*tmp_173*tmp_174*tmp_7 - tmp_173*tmp_213 - tmp_174*tmp_211) + tmp_184*(3.0*tmp_181*tmp_182*tmp_7 - tmp_181*tmp_213 - tmp_182*tmp_211) + tmp_192*(3.0*tmp_189*tmp_190*tmp_7 - tmp_189*tmp_213 - tmp_190*tmp_211) + tmp_200*(3.0*tmp_197*tmp_198*tmp_7 - tmp_197*tmp_213 - tmp_198*tmp_211) + tmp_208*(3.0*tmp_205*tmp_206*tmp_7 - tmp_205*tmp_213 - tmp_206*tmp_211) + tmp_48*(-tmp_211*tmp_43 - tmp_213*tmp_39 + 3.0*tmp_39*tmp_43*tmp_7) + tmp_56*(-tmp_211*tmp_54 - tmp_213*tmp_53 + 3.0*tmp_53*tmp_54*tmp_7) + tmp_64*(-tmp_211*tmp_62 - tmp_213*tmp_61 + 3.0*tmp_61*tmp_62*tmp_7) + tmp_72*(-tmp_211*tmp_70 - tmp_213*tmp_69 + 3.0*tmp_69*tmp_7*tmp_70) + tmp_80*(-tmp_211*tmp_78 - tmp_213*tmp_77 + 3.0*tmp_7*tmp_77*tmp_78) + tmp_88*(-tmp_211*tmp_86 - tmp_213*tmp_85 + 3.0*tmp_7*tmp_85*tmp_86) + tmp_96*(-tmp_211*tmp_94 - tmp_213*tmp_93 + 3.0*tmp_7*tmp_93*tmp_94);
      real_t tmp_220 = 2*tmp_213;
      real_t a_0_0 = tmp_104*(3.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_46) + tmp_112*(3.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_46) + tmp_120*(3.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_46) + tmp_128*(3.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_46) + tmp_136*(3.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_46) + tmp_144*(3.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_46) + tmp_152*(3.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_46) + tmp_160*(3.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_46) + tmp_168*(3.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_46) + tmp_176*(3.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_46) + tmp_184*(3.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_46) + tmp_192*(3.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_46) + tmp_200*(3.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_46) + tmp_208*(3.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_46) + tmp_48*(3.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_46) + tmp_56*(-tmp_46*tmp_55 + 3.0*(tmp_55*tmp_55)*tmp_7) + tmp_64*(-tmp_46*tmp_63 + 3.0*(tmp_63*tmp_63)*tmp_7) + tmp_72*(-tmp_46*tmp_71 + 3.0*tmp_7*(tmp_71*tmp_71)) + tmp_80*(-tmp_46*tmp_79 + 3.0*tmp_7*(tmp_79*tmp_79)) + tmp_88*(-tmp_46*tmp_87 + 3.0*tmp_7*(tmp_87*tmp_87)) + tmp_96*(-tmp_46*tmp_95 + 3.0*tmp_7*(tmp_95*tmp_95));
      real_t a_0_1 = tmp_210;
      real_t a_0_2 = tmp_212;
      real_t a_0_3 = tmp_214;
      real_t a_1_0 = tmp_210;
      real_t a_1_1 = tmp_104*(3.0*(tmp_100*tmp_100)*tmp_7 - tmp_100*tmp_215) + tmp_112*(3.0*(tmp_108*tmp_108)*tmp_7 - tmp_108*tmp_215) + tmp_120*(3.0*(tmp_116*tmp_116)*tmp_7 - tmp_116*tmp_215) + tmp_128*(3.0*(tmp_124*tmp_124)*tmp_7 - tmp_124*tmp_215) + tmp_136*(3.0*(tmp_132*tmp_132)*tmp_7 - tmp_132*tmp_215) + tmp_144*(3.0*(tmp_140*tmp_140)*tmp_7 - tmp_140*tmp_215) + tmp_152*(3.0*(tmp_148*tmp_148)*tmp_7 - tmp_148*tmp_215) + tmp_160*(3.0*(tmp_156*tmp_156)*tmp_7 - tmp_156*tmp_215) + tmp_168*(3.0*(tmp_164*tmp_164)*tmp_7 - tmp_164*tmp_215) + tmp_176*(3.0*(tmp_172*tmp_172)*tmp_7 - tmp_172*tmp_215) + tmp_184*(3.0*(tmp_180*tmp_180)*tmp_7 - tmp_180*tmp_215) + tmp_192*(3.0*(tmp_188*tmp_188)*tmp_7 - tmp_188*tmp_215) + tmp_200*(3.0*(tmp_196*tmp_196)*tmp_7 - tmp_196*tmp_215) + tmp_208*(3.0*(tmp_204*tmp_204)*tmp_7 - tmp_204*tmp_215) + tmp_48*(-tmp_215*tmp_35 + 3.0*(tmp_35*tmp_35)*tmp_7) + tmp_56*(-tmp_215*tmp_52 + 3.0*(tmp_52*tmp_52)*tmp_7) + tmp_64*(-tmp_215*tmp_60 + 3.0*(tmp_60*tmp_60)*tmp_7) + tmp_72*(-tmp_215*tmp_68 + 3.0*(tmp_68*tmp_68)*tmp_7) + tmp_80*(-tmp_215*tmp_76 + 3.0*tmp_7*(tmp_76*tmp_76)) + tmp_88*(-tmp_215*tmp_84 + 3.0*tmp_7*(tmp_84*tmp_84)) + tmp_96*(-tmp_215*tmp_92 + 3.0*tmp_7*(tmp_92*tmp_92));
      real_t a_1_2 = tmp_216;
      real_t a_1_3 = tmp_217;
      real_t a_2_0 = tmp_212;
      real_t a_2_1 = tmp_216;
      real_t a_2_2 = tmp_104*(3.0*(tmp_101*tmp_101)*tmp_7 - tmp_101*tmp_218) + tmp_112*(3.0*(tmp_109*tmp_109)*tmp_7 - tmp_109*tmp_218) + tmp_120*(3.0*(tmp_117*tmp_117)*tmp_7 - tmp_117*tmp_218) + tmp_128*(3.0*(tmp_125*tmp_125)*tmp_7 - tmp_125*tmp_218) + tmp_136*(3.0*(tmp_133*tmp_133)*tmp_7 - tmp_133*tmp_218) + tmp_144*(3.0*(tmp_141*tmp_141)*tmp_7 - tmp_141*tmp_218) + tmp_152*(3.0*(tmp_149*tmp_149)*tmp_7 - tmp_149*tmp_218) + tmp_160*(3.0*(tmp_157*tmp_157)*tmp_7 - tmp_157*tmp_218) + tmp_168*(3.0*(tmp_165*tmp_165)*tmp_7 - tmp_165*tmp_218) + tmp_176*(3.0*(tmp_173*tmp_173)*tmp_7 - tmp_173*tmp_218) + tmp_184*(3.0*(tmp_181*tmp_181)*tmp_7 - tmp_181*tmp_218) + tmp_192*(3.0*(tmp_189*tmp_189)*tmp_7 - tmp_189*tmp_218) + tmp_200*(3.0*(tmp_197*tmp_197)*tmp_7 - tmp_197*tmp_218) + tmp_208*(3.0*(tmp_205*tmp_205)*tmp_7 - tmp_205*tmp_218) + tmp_48*(-tmp_218*tmp_39 + 3.0*(tmp_39*tmp_39)*tmp_7) + tmp_56*(-tmp_218*tmp_53 + 3.0*(tmp_53*tmp_53)*tmp_7) + tmp_64*(-tmp_218*tmp_61 + 3.0*(tmp_61*tmp_61)*tmp_7) + tmp_72*(-tmp_218*tmp_69 + 3.0*(tmp_69*tmp_69)*tmp_7) + tmp_80*(-tmp_218*tmp_77 + 3.0*tmp_7*(tmp_77*tmp_77)) + tmp_88*(-tmp_218*tmp_85 + 3.0*tmp_7*(tmp_85*tmp_85)) + tmp_96*(-tmp_218*tmp_93 + 3.0*tmp_7*(tmp_93*tmp_93));
      real_t a_2_3 = tmp_219;
      real_t a_3_0 = tmp_214;
      real_t a_3_1 = tmp_217;
      real_t a_3_2 = tmp_219;
      real_t a_3_3 = tmp_104*(3.0*(tmp_102*tmp_102)*tmp_7 - tmp_102*tmp_220) + tmp_112*(3.0*(tmp_110*tmp_110)*tmp_7 - tmp_110*tmp_220) + tmp_120*(3.0*(tmp_118*tmp_118)*tmp_7 - tmp_118*tmp_220) + tmp_128*(3.0*(tmp_126*tmp_126)*tmp_7 - tmp_126*tmp_220) + tmp_136*(3.0*(tmp_134*tmp_134)*tmp_7 - tmp_134*tmp_220) + tmp_144*(3.0*(tmp_142*tmp_142)*tmp_7 - tmp_142*tmp_220) + tmp_152*(3.0*(tmp_150*tmp_150)*tmp_7 - tmp_150*tmp_220) + tmp_160*(3.0*(tmp_158*tmp_158)*tmp_7 - tmp_158*tmp_220) + tmp_168*(3.0*(tmp_166*tmp_166)*tmp_7 - tmp_166*tmp_220) + tmp_176*(3.0*(tmp_174*tmp_174)*tmp_7 - tmp_174*tmp_220) + tmp_184*(3.0*(tmp_182*tmp_182)*tmp_7 - tmp_182*tmp_220) + tmp_192*(3.0*(tmp_190*tmp_190)*tmp_7 - tmp_190*tmp_220) + tmp_200*(3.0*(tmp_198*tmp_198)*tmp_7 - tmp_198*tmp_220) + tmp_208*(3.0*(tmp_206*tmp_206)*tmp_7 - tmp_206*tmp_220) + tmp_48*(-tmp_220*tmp_43 + 3.0*(tmp_43*tmp_43)*tmp_7) + tmp_56*(-tmp_220*tmp_54 + 3.0*(tmp_54*tmp_54)*tmp_7) + tmp_64*(-tmp_220*tmp_62 + 3.0*(tmp_62*tmp_62)*tmp_7) + tmp_72*(-tmp_220*tmp_70 + 3.0*tmp_7*(tmp_70*tmp_70)) + tmp_80*(-tmp_220*tmp_78 + 3.0*tmp_7*(tmp_78*tmp_78)) + tmp_88*(-tmp_220*tmp_86 + 3.0*tmp_7*(tmp_86*tmp_86)) + tmp_96*(-tmp_220*tmp_94 + 3.0*tmp_7*(tmp_94*tmp_94));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;

};




class EGVectorLaplaceFormNitscheBC_P1E_2 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_P1E_2()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_10*tmp_16 + tmp_15*tmp_6 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_10*tmp_20 + tmp_19*tmp_6 + tmp_21*tmp_7;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_10*tmp_24 + tmp_23*tmp_6 + tmp_25*tmp_7;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_1_0 = 0.1666666666666668*tmp_41;
      real_t a_2_0 = 0.1666666666666668*tmp_42;
      real_t a_3_0 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_11 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_12 = tmp_11*tmp_9;
      real_t tmp_13 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_13*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_11*tmp_13;
      real_t tmp_18 = tmp_0*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_0*tmp_6*tmp_7 + tmp_10*tmp_12 - tmp_10*tmp_16 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_11*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_12 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(-tmp_10*tmp_7 + tmp_13*tmp_8);
      real_t tmp_35 = tmp_19*(-tmp_0*tmp_8 + tmp_10*tmp_11);
      real_t tmp_36 = tmp_19*(tmp_0*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(tmp_10*tmp_9 - tmp_13*tmp_6);
      real_t tmp_39 = tmp_19*(tmp_0*tmp_6 - tmp_10*tmp_14);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_11*(tmp_41 - 1.0/4.0) + tmp_14*(tmp_37 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_11*tmp_40 + tmp_14*tmp_36) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_11*tmp_39 + tmp_14*tmp_35) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_11*tmp_38 + tmp_14*tmp_34);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_11*(tmp_55 - 1.0/4.0) + tmp_14*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_11*(tmp_64 - 1.0/4.0) + tmp_14*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_11*(tmp_73 - 1.0/4.0) + tmp_14*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_11*(tmp_82 - 1.0/4.0) + tmp_14*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_11*(tmp_91 - 1.0/4.0) + tmp_14*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_11*(tmp_100 - 1.0/4.0) + tmp_14*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_11*(tmp_109 - 1.0/4.0) + tmp_14*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_11*(tmp_118 - 1.0/4.0) + tmp_14*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_11*(tmp_127 - 1.0/4.0) + tmp_14*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_11*(tmp_136 - 1.0/4.0) + tmp_14*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_11*(tmp_145 - 1.0/4.0) + tmp_14*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_11*(tmp_154 - 1.0/4.0) + tmp_14*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_11*(tmp_163 - 1.0/4.0) + tmp_14*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_11*(tmp_172 - 1.0/4.0) + tmp_14*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_11*(tmp_181 - 1.0/4.0) + tmp_14*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_11*(tmp_190 - 1.0/4.0) + tmp_14*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_11*(tmp_199 - 1.0/4.0) + tmp_14*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_11*(tmp_208 - 1.0/4.0) + tmp_14*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_11*(tmp_217 - 1.0/4.0) + tmp_14*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_11*(tmp_226 - 1.0/4.0) + tmp_14*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_26 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_27 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_28 = tmp_26*tmp_27;
      real_t tmp_29 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_30 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_31 = tmp_29*tmp_30;
      real_t tmp_32 = tmp_28 - tmp_31;
      real_t tmp_33 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_34 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_35 = tmp_30*tmp_34;
      real_t tmp_36 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_37 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_38 = tmp_27*tmp_37;
      real_t tmp_39 = tmp_26*tmp_34;
      real_t tmp_40 = 1.0 / (tmp_25*tmp_28 - tmp_25*tmp_31 + tmp_29*tmp_36*tmp_37 + tmp_33*tmp_35 - tmp_33*tmp_38 - tmp_36*tmp_39);
      real_t tmp_41 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_42 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_43 = -tmp_42;
      real_t tmp_44 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_45 = 0.031405749086161582*tmp_43 + 0.93718850182767688*tmp_44;
      real_t tmp_46 = tmp_40*(tmp_41 + tmp_45);
      real_t tmp_47 = tmp_29*tmp_37 - tmp_39;
      real_t tmp_48 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_49 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_50 = -tmp_49;
      real_t tmp_51 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_52 = 0.031405749086161582*tmp_50 + 0.93718850182767688*tmp_51;
      real_t tmp_53 = tmp_40*(tmp_48 + tmp_52);
      real_t tmp_54 = tmp_35 - tmp_38;
      real_t tmp_55 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_56 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_57 = -tmp_56;
      real_t tmp_58 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_59 = 0.031405749086161582*tmp_57 + 0.93718850182767688*tmp_58;
      real_t tmp_60 = tmp_40*(tmp_55 + tmp_59);
      real_t tmp_61 = -tmp_27*tmp_33 + tmp_29*tmp_36;
      real_t tmp_62 = -tmp_25*tmp_29 + tmp_33*tmp_34;
      real_t tmp_63 = tmp_25*tmp_27 - tmp_34*tmp_36;
      real_t tmp_64 = -tmp_26*tmp_36 + tmp_30*tmp_33;
      real_t tmp_65 = tmp_25*tmp_26 - tmp_33*tmp_37;
      real_t tmp_66 = -tmp_25*tmp_30 + tmp_36*tmp_37;
      real_t tmp_67 = tmp_25*(tmp_32*tmp_46 + tmp_47*tmp_53 + tmp_54*tmp_60 - 1.0/4.0) + tmp_34*(tmp_46*tmp_64 + tmp_53*tmp_65 + tmp_60*tmp_66 - 1.0/4.0) + tmp_37*(tmp_46*tmp_61 + tmp_53*tmp_62 + tmp_60*tmp_63 - 1.0/4.0);
      real_t tmp_68 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_69 = tmp_45 + tmp_68;
      real_t tmp_70 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_71 = tmp_52 + tmp_70;
      real_t tmp_72 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_73 = tmp_59 + tmp_72;
      real_t tmp_74 = tmp_17*tmp_73 + tmp_20*tmp_71 + tmp_23*tmp_69;
      real_t tmp_75 = tmp_16*tmp_73 + tmp_19*tmp_71 + tmp_22*tmp_69;
      real_t tmp_76 = tmp_15*tmp_73 + tmp_18*tmp_71 + tmp_21*tmp_69;
      real_t tmp_77 = -tmp_74 - tmp_75 - tmp_76 + 1;
      real_t tmp_78 = tmp_25*tmp_40;
      real_t tmp_79 = tmp_37*tmp_40;
      real_t tmp_80 = tmp_34*tmp_40;
      real_t tmp_81 = 0.5*p_affine_13_0*(tmp_54*tmp_78 + tmp_63*tmp_79 + tmp_66*tmp_80) + 0.5*p_affine_13_1*(tmp_47*tmp_78 + tmp_62*tmp_79 + tmp_65*tmp_80) + 0.5*p_affine_13_2*(tmp_32*tmp_78 + tmp_61*tmp_79 + tmp_64*tmp_80);
      real_t tmp_82 = (std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)*std::abs(tmp_42*tmp_51 - tmp_44*tmp_49)) + (std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)*std::abs(tmp_42*tmp_58 - tmp_44*tmp_56)) + (std::abs(tmp_49*tmp_58 - tmp_51*tmp_56)*std::abs(tmp_49*tmp_58 - tmp_51*tmp_56));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_67*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_43 + 0.60796128279561268*tmp_44;
      real_t tmp_88 = tmp_40*(tmp_41 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_50 + 0.60796128279561268*tmp_51;
      real_t tmp_90 = tmp_40*(tmp_48 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_57 + 0.60796128279561268*tmp_58;
      real_t tmp_92 = tmp_40*(tmp_55 + tmp_91);
      real_t tmp_93 = tmp_25*(tmp_32*tmp_88 + tmp_47*tmp_90 + tmp_54*tmp_92 - 1.0/4.0) + tmp_34*(tmp_64*tmp_88 + tmp_65*tmp_90 + tmp_66*tmp_92 - 1.0/4.0) + tmp_37*(tmp_61*tmp_88 + tmp_62*tmp_90 + tmp_63*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_68 + tmp_87;
      real_t tmp_95 = tmp_70 + tmp_89;
      real_t tmp_96 = tmp_72 + tmp_91;
      real_t tmp_97 = tmp_17*tmp_96 + tmp_20*tmp_95 + tmp_23*tmp_94;
      real_t tmp_98 = tmp_16*tmp_96 + tmp_19*tmp_95 + tmp_22*tmp_94;
      real_t tmp_99 = tmp_15*tmp_96 + tmp_18*tmp_95 + tmp_21*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_104 = tmp_40*(tmp_103 + tmp_41);
      real_t tmp_105 = 0.37605877282253791*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_106 = tmp_40*(tmp_105 + tmp_48);
      real_t tmp_107 = 0.37605877282253791*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_108 = tmp_40*(tmp_107 + tmp_55);
      real_t tmp_109 = tmp_25*(tmp_104*tmp_32 + tmp_106*tmp_47 + tmp_108*tmp_54 - 1.0/4.0) + tmp_34*(tmp_104*tmp_64 + tmp_106*tmp_65 + tmp_108*tmp_66 - 1.0/4.0) + tmp_37*(tmp_104*tmp_61 + tmp_106*tmp_62 + tmp_108*tmp_63 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_68;
      real_t tmp_111 = tmp_105 + tmp_70;
      real_t tmp_112 = tmp_107 + tmp_72;
      real_t tmp_113 = tmp_110*tmp_23 + tmp_111*tmp_20 + tmp_112*tmp_17;
      real_t tmp_114 = tmp_110*tmp_22 + tmp_111*tmp_19 + tmp_112*tmp_16;
      real_t tmp_115 = tmp_110*tmp_21 + tmp_111*tmp_18 + tmp_112*tmp_15;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_120 = tmp_40*(tmp_119 + tmp_41);
      real_t tmp_121 = 0.78764240869137092*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_122 = tmp_40*(tmp_121 + tmp_48);
      real_t tmp_123 = 0.78764240869137092*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_124 = tmp_40*(tmp_123 + tmp_55);
      real_t tmp_125 = tmp_25*(tmp_120*tmp_32 + tmp_122*tmp_47 + tmp_124*tmp_54 - 1.0/4.0) + tmp_34*(tmp_120*tmp_64 + tmp_122*tmp_65 + tmp_124*tmp_66 - 1.0/4.0) + tmp_37*(tmp_120*tmp_61 + tmp_122*tmp_62 + tmp_124*tmp_63 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_68;
      real_t tmp_127 = tmp_121 + tmp_70;
      real_t tmp_128 = tmp_123 + tmp_72;
      real_t tmp_129 = tmp_126*tmp_23 + tmp_127*tmp_20 + tmp_128*tmp_17;
      real_t tmp_130 = tmp_126*tmp_22 + tmp_127*tmp_19 + tmp_128*tmp_16;
      real_t tmp_131 = tmp_126*tmp_21 + tmp_127*tmp_18 + tmp_128*tmp_15;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_136 = tmp_40*(tmp_135 + tmp_41);
      real_t tmp_137 = 0.58463275527740355*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_138 = tmp_40*(tmp_137 + tmp_48);
      real_t tmp_139 = 0.58463275527740355*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_140 = tmp_40*(tmp_139 + tmp_55);
      real_t tmp_141 = tmp_25*(tmp_136*tmp_32 + tmp_138*tmp_47 + tmp_140*tmp_54 - 1.0/4.0) + tmp_34*(tmp_136*tmp_64 + tmp_138*tmp_65 + tmp_140*tmp_66 - 1.0/4.0) + tmp_37*(tmp_136*tmp_61 + tmp_138*tmp_62 + tmp_140*tmp_63 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_68;
      real_t tmp_143 = tmp_137 + tmp_70;
      real_t tmp_144 = tmp_139 + tmp_72;
      real_t tmp_145 = tmp_142*tmp_23 + tmp_143*tmp_20 + tmp_144*tmp_17;
      real_t tmp_146 = tmp_142*tmp_22 + tmp_143*tmp_19 + tmp_144*tmp_16;
      real_t tmp_147 = tmp_142*tmp_21 + tmp_143*tmp_18 + tmp_144*tmp_15;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_152 = tmp_40*(tmp_151 + tmp_41);
      real_t tmp_153 = 0.041227165399737475*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_154 = tmp_40*(tmp_153 + tmp_48);
      real_t tmp_155 = 0.041227165399737475*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_156 = tmp_40*(tmp_155 + tmp_55);
      real_t tmp_157 = tmp_25*(tmp_152*tmp_32 + tmp_154*tmp_47 + tmp_156*tmp_54 - 1.0/4.0) + tmp_34*(tmp_152*tmp_64 + tmp_154*tmp_65 + tmp_156*tmp_66 - 1.0/4.0) + tmp_37*(tmp_152*tmp_61 + tmp_154*tmp_62 + tmp_156*tmp_63 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_68;
      real_t tmp_159 = tmp_153 + tmp_70;
      real_t tmp_160 = tmp_155 + tmp_72;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_168 = tmp_40*(tmp_167 + tmp_41);
      real_t tmp_169 = 0.039308471900058539*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_170 = tmp_40*(tmp_169 + tmp_48);
      real_t tmp_171 = 0.039308471900058539*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_172 = tmp_40*(tmp_171 + tmp_55);
      real_t tmp_173 = tmp_25*(tmp_168*tmp_32 + tmp_170*tmp_47 + tmp_172*tmp_54 - 1.0/4.0) + tmp_34*(tmp_168*tmp_64 + tmp_170*tmp_65 + tmp_172*tmp_66 - 1.0/4.0) + tmp_37*(tmp_168*tmp_61 + tmp_170*tmp_62 + tmp_172*tmp_63 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_68;
      real_t tmp_175 = tmp_169 + tmp_70;
      real_t tmp_176 = tmp_171 + tmp_72;
      real_t tmp_177 = tmp_17*tmp_176 + tmp_174*tmp_23 + tmp_175*tmp_20;
      real_t tmp_178 = tmp_16*tmp_176 + tmp_174*tmp_22 + tmp_175*tmp_19;
      real_t tmp_179 = tmp_15*tmp_176 + tmp_174*tmp_21 + tmp_175*tmp_18;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_184 = tmp_40*(tmp_183 + tmp_41);
      real_t tmp_185 = 0.78764240869137092*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_186 = tmp_40*(tmp_185 + tmp_48);
      real_t tmp_187 = 0.78764240869137092*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_188 = tmp_40*(tmp_187 + tmp_55);
      real_t tmp_189 = tmp_25*(tmp_184*tmp_32 + tmp_186*tmp_47 + tmp_188*tmp_54 - 1.0/4.0) + tmp_34*(tmp_184*tmp_64 + tmp_186*tmp_65 + tmp_188*tmp_66 - 1.0/4.0) + tmp_37*(tmp_184*tmp_61 + tmp_186*tmp_62 + tmp_188*tmp_63 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_68;
      real_t tmp_191 = tmp_185 + tmp_70;
      real_t tmp_192 = tmp_187 + tmp_72;
      real_t tmp_193 = tmp_17*tmp_192 + tmp_190*tmp_23 + tmp_191*tmp_20;
      real_t tmp_194 = tmp_16*tmp_192 + tmp_19*tmp_191 + tmp_190*tmp_22;
      real_t tmp_195 = tmp_15*tmp_192 + tmp_18*tmp_191 + tmp_190*tmp_21;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_43 + 0.039308471900058539*tmp_44;
      real_t tmp_200 = tmp_40*(tmp_199 + tmp_41);
      real_t tmp_201 = 0.58463275527740355*tmp_50 + 0.039308471900058539*tmp_51;
      real_t tmp_202 = tmp_40*(tmp_201 + tmp_48);
      real_t tmp_203 = 0.58463275527740355*tmp_57 + 0.039308471900058539*tmp_58;
      real_t tmp_204 = tmp_40*(tmp_203 + tmp_55);
      real_t tmp_205 = tmp_25*(tmp_200*tmp_32 + tmp_202*tmp_47 + tmp_204*tmp_54 - 1.0/4.0) + tmp_34*(tmp_200*tmp_64 + tmp_202*tmp_65 + tmp_204*tmp_66 - 1.0/4.0) + tmp_37*(tmp_200*tmp_61 + tmp_202*tmp_62 + tmp_204*tmp_63 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_68;
      real_t tmp_207 = tmp_201 + tmp_70;
      real_t tmp_208 = tmp_203 + tmp_72;
      real_t tmp_209 = tmp_17*tmp_208 + tmp_20*tmp_207 + tmp_206*tmp_23;
      real_t tmp_210 = tmp_16*tmp_208 + tmp_19*tmp_207 + tmp_206*tmp_22;
      real_t tmp_211 = tmp_15*tmp_208 + tmp_18*tmp_207 + tmp_206*tmp_21;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_43 + 0.78764240869137092*tmp_44;
      real_t tmp_216 = tmp_40*(tmp_215 + tmp_41);
      real_t tmp_217 = 0.1711304259088916*tmp_50 + 0.78764240869137092*tmp_51;
      real_t tmp_218 = tmp_40*(tmp_217 + tmp_48);
      real_t tmp_219 = 0.1711304259088916*tmp_57 + 0.78764240869137092*tmp_58;
      real_t tmp_220 = tmp_40*(tmp_219 + tmp_55);
      real_t tmp_221 = tmp_25*(tmp_216*tmp_32 + tmp_218*tmp_47 + tmp_220*tmp_54 - 1.0/4.0) + tmp_34*(tmp_216*tmp_64 + tmp_218*tmp_65 + tmp_220*tmp_66 - 1.0/4.0) + tmp_37*(tmp_216*tmp_61 + tmp_218*tmp_62 + tmp_220*tmp_63 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_68;
      real_t tmp_223 = tmp_217 + tmp_70;
      real_t tmp_224 = tmp_219 + tmp_72;
      real_t tmp_225 = tmp_17*tmp_224 + tmp_20*tmp_223 + tmp_222*tmp_23;
      real_t tmp_226 = tmp_16*tmp_224 + tmp_19*tmp_223 + tmp_22*tmp_222;
      real_t tmp_227 = tmp_15*tmp_224 + tmp_18*tmp_223 + tmp_21*tmp_222;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_43 + 0.58463275527740355*tmp_44;
      real_t tmp_232 = tmp_40*(tmp_231 + tmp_41);
      real_t tmp_233 = 0.37605877282253791*tmp_50 + 0.58463275527740355*tmp_51;
      real_t tmp_234 = tmp_40*(tmp_233 + tmp_48);
      real_t tmp_235 = 0.37605877282253791*tmp_57 + 0.58463275527740355*tmp_58;
      real_t tmp_236 = tmp_40*(tmp_235 + tmp_55);
      real_t tmp_237 = tmp_25*(tmp_232*tmp_32 + tmp_234*tmp_47 + tmp_236*tmp_54 - 1.0/4.0) + tmp_34*(tmp_232*tmp_64 + tmp_234*tmp_65 + tmp_236*tmp_66 - 1.0/4.0) + tmp_37*(tmp_232*tmp_61 + tmp_234*tmp_62 + tmp_236*tmp_63 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_68;
      real_t tmp_239 = tmp_233 + tmp_70;
      real_t tmp_240 = tmp_235 + tmp_72;
      real_t tmp_241 = tmp_17*tmp_240 + tmp_20*tmp_239 + tmp_23*tmp_238;
      real_t tmp_242 = tmp_16*tmp_240 + tmp_19*tmp_239 + tmp_22*tmp_238;
      real_t tmp_243 = tmp_15*tmp_240 + tmp_18*tmp_239 + tmp_21*tmp_238;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_43 + 0.1711304259088916*tmp_44;
      real_t tmp_248 = tmp_40*(tmp_247 + tmp_41);
      real_t tmp_249 = 0.041227165399737475*tmp_50 + 0.1711304259088916*tmp_51;
      real_t tmp_250 = tmp_40*(tmp_249 + tmp_48);
      real_t tmp_251 = 0.041227165399737475*tmp_57 + 0.1711304259088916*tmp_58;
      real_t tmp_252 = tmp_40*(tmp_251 + tmp_55);
      real_t tmp_253 = tmp_25*(tmp_248*tmp_32 + tmp_250*tmp_47 + tmp_252*tmp_54 - 1.0/4.0) + tmp_34*(tmp_248*tmp_64 + tmp_250*tmp_65 + tmp_252*tmp_66 - 1.0/4.0) + tmp_37*(tmp_248*tmp_61 + tmp_250*tmp_62 + tmp_252*tmp_63 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_68;
      real_t tmp_255 = tmp_249 + tmp_70;
      real_t tmp_256 = tmp_251 + tmp_72;
      real_t tmp_257 = tmp_17*tmp_256 + tmp_20*tmp_255 + tmp_23*tmp_254;
      real_t tmp_258 = tmp_16*tmp_256 + tmp_19*tmp_255 + tmp_22*tmp_254;
      real_t tmp_259 = tmp_15*tmp_256 + tmp_18*tmp_255 + tmp_21*tmp_254;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_43 + 0.19107600050469298*tmp_44;
      real_t tmp_264 = tmp_40*(tmp_263 + tmp_41);
      real_t tmp_265 = 0.40446199974765351*tmp_50 + 0.19107600050469298*tmp_51;
      real_t tmp_266 = tmp_40*(tmp_265 + tmp_48);
      real_t tmp_267 = 0.40446199974765351*tmp_57 + 0.19107600050469298*tmp_58;
      real_t tmp_268 = tmp_40*(tmp_267 + tmp_55);
      real_t tmp_269 = tmp_25*(tmp_264*tmp_32 + tmp_266*tmp_47 + tmp_268*tmp_54 - 1.0/4.0) + tmp_34*(tmp_264*tmp_64 + tmp_266*tmp_65 + tmp_268*tmp_66 - 1.0/4.0) + tmp_37*(tmp_264*tmp_61 + tmp_266*tmp_62 + tmp_268*tmp_63 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_68;
      real_t tmp_271 = tmp_265 + tmp_70;
      real_t tmp_272 = tmp_267 + tmp_72;
      real_t tmp_273 = tmp_17*tmp_272 + tmp_20*tmp_271 + tmp_23*tmp_270;
      real_t tmp_274 = tmp_16*tmp_272 + tmp_19*tmp_271 + tmp_22*tmp_270;
      real_t tmp_275 = tmp_15*tmp_272 + tmp_18*tmp_271 + tmp_21*tmp_270;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_43 + 0.37605877282253791*tmp_44;
      real_t tmp_280 = tmp_40*(tmp_279 + tmp_41);
      real_t tmp_281 = 0.039308471900058539*tmp_50 + 0.37605877282253791*tmp_51;
      real_t tmp_282 = tmp_40*(tmp_281 + tmp_48);
      real_t tmp_283 = 0.039308471900058539*tmp_57 + 0.37605877282253791*tmp_58;
      real_t tmp_284 = tmp_40*(tmp_283 + tmp_55);
      real_t tmp_285 = tmp_25*(tmp_280*tmp_32 + tmp_282*tmp_47 + tmp_284*tmp_54 - 1.0/4.0) + tmp_34*(tmp_280*tmp_64 + tmp_282*tmp_65 + tmp_284*tmp_66 - 1.0/4.0) + tmp_37*(tmp_280*tmp_61 + tmp_282*tmp_62 + tmp_284*tmp_63 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_68;
      real_t tmp_287 = tmp_281 + tmp_70;
      real_t tmp_288 = tmp_283 + tmp_72;
      real_t tmp_289 = tmp_17*tmp_288 + tmp_20*tmp_287 + tmp_23*tmp_286;
      real_t tmp_290 = tmp_16*tmp_288 + tmp_19*tmp_287 + tmp_22*tmp_286;
      real_t tmp_291 = tmp_15*tmp_288 + tmp_18*tmp_287 + tmp_21*tmp_286;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_296 = tmp_40*(tmp_295 + tmp_41);
      real_t tmp_297 = 0.93718850182767688*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_298 = tmp_40*(tmp_297 + tmp_48);
      real_t tmp_299 = 0.93718850182767688*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_300 = tmp_40*(tmp_299 + tmp_55);
      real_t tmp_301 = tmp_25*(tmp_296*tmp_32 + tmp_298*tmp_47 + tmp_300*tmp_54 - 1.0/4.0) + tmp_34*(tmp_296*tmp_64 + tmp_298*tmp_65 + tmp_300*tmp_66 - 1.0/4.0) + tmp_37*(tmp_296*tmp_61 + tmp_298*tmp_62 + tmp_300*tmp_63 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_68;
      real_t tmp_303 = tmp_297 + tmp_70;
      real_t tmp_304 = tmp_299 + tmp_72;
      real_t tmp_305 = tmp_17*tmp_304 + tmp_20*tmp_303 + tmp_23*tmp_302;
      real_t tmp_306 = tmp_16*tmp_304 + tmp_19*tmp_303 + tmp_22*tmp_302;
      real_t tmp_307 = tmp_15*tmp_304 + tmp_18*tmp_303 + tmp_21*tmp_302;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_312 = tmp_40*(tmp_311 + tmp_41);
      real_t tmp_313 = 0.60796128279561268*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_314 = tmp_40*(tmp_313 + tmp_48);
      real_t tmp_315 = 0.60796128279561268*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_316 = tmp_40*(tmp_315 + tmp_55);
      real_t tmp_317 = tmp_25*(tmp_312*tmp_32 + tmp_314*tmp_47 + tmp_316*tmp_54 - 1.0/4.0) + tmp_34*(tmp_312*tmp_64 + tmp_314*tmp_65 + tmp_316*tmp_66 - 1.0/4.0) + tmp_37*(tmp_312*tmp_61 + tmp_314*tmp_62 + tmp_316*tmp_63 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_68;
      real_t tmp_319 = tmp_313 + tmp_70;
      real_t tmp_320 = tmp_315 + tmp_72;
      real_t tmp_321 = tmp_17*tmp_320 + tmp_20*tmp_319 + tmp_23*tmp_318;
      real_t tmp_322 = tmp_16*tmp_320 + tmp_19*tmp_319 + tmp_22*tmp_318;
      real_t tmp_323 = tmp_15*tmp_320 + tmp_18*tmp_319 + tmp_21*tmp_318;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_328 = tmp_40*(tmp_327 + tmp_41);
      real_t tmp_329 = 0.19107600050469298*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_330 = tmp_40*(tmp_329 + tmp_48);
      real_t tmp_331 = 0.19107600050469298*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_332 = tmp_40*(tmp_331 + tmp_55);
      real_t tmp_333 = tmp_25*(tmp_32*tmp_328 + tmp_330*tmp_47 + tmp_332*tmp_54 - 1.0/4.0) + tmp_34*(tmp_328*tmp_64 + tmp_330*tmp_65 + tmp_332*tmp_66 - 1.0/4.0) + tmp_37*(tmp_328*tmp_61 + tmp_330*tmp_62 + tmp_332*tmp_63 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_68;
      real_t tmp_335 = tmp_329 + tmp_70;
      real_t tmp_336 = tmp_331 + tmp_72;
      real_t tmp_337 = tmp_17*tmp_336 + tmp_20*tmp_335 + tmp_23*tmp_334;
      real_t tmp_338 = tmp_16*tmp_336 + tmp_19*tmp_335 + tmp_22*tmp_334;
      real_t tmp_339 = tmp_15*tmp_336 + tmp_18*tmp_335 + tmp_21*tmp_334;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_43 + 0.031405749086161582*tmp_44;
      real_t tmp_344 = tmp_40*(tmp_343 + tmp_41);
      real_t tmp_345 = 0.031405749086161582*tmp_50 + 0.031405749086161582*tmp_51;
      real_t tmp_346 = tmp_40*(tmp_345 + tmp_48);
      real_t tmp_347 = 0.031405749086161582*tmp_57 + 0.031405749086161582*tmp_58;
      real_t tmp_348 = tmp_40*(tmp_347 + tmp_55);
      real_t tmp_349 = tmp_25*(tmp_32*tmp_344 + tmp_346*tmp_47 + tmp_348*tmp_54 - 1.0/4.0) + tmp_34*(tmp_344*tmp_64 + tmp_346*tmp_65 + tmp_348*tmp_66 - 1.0/4.0) + tmp_37*(tmp_344*tmp_61 + tmp_346*tmp_62 + tmp_348*tmp_63 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_68;
      real_t tmp_351 = tmp_345 + tmp_70;
      real_t tmp_352 = tmp_347 + tmp_72;
      real_t tmp_353 = tmp_17*tmp_352 + tmp_20*tmp_351 + tmp_23*tmp_350;
      real_t tmp_354 = tmp_16*tmp_352 + tmp_19*tmp_351 + tmp_22*tmp_350;
      real_t tmp_355 = tmp_15*tmp_352 + tmp_18*tmp_351 + tmp_21*tmp_350;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_43 + 0.19601935860219369*tmp_44;
      real_t tmp_360 = tmp_40*(tmp_359 + tmp_41);
      real_t tmp_361 = 0.19601935860219369*tmp_50 + 0.19601935860219369*tmp_51;
      real_t tmp_362 = tmp_40*(tmp_361 + tmp_48);
      real_t tmp_363 = 0.19601935860219369*tmp_57 + 0.19601935860219369*tmp_58;
      real_t tmp_364 = tmp_40*(tmp_363 + tmp_55);
      real_t tmp_365 = tmp_25*(tmp_32*tmp_360 + tmp_362*tmp_47 + tmp_364*tmp_54 - 1.0/4.0) + tmp_34*(tmp_360*tmp_64 + tmp_362*tmp_65 + tmp_364*tmp_66 - 1.0/4.0) + tmp_37*(tmp_360*tmp_61 + tmp_362*tmp_62 + tmp_364*tmp_63 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_68;
      real_t tmp_367 = tmp_361 + tmp_70;
      real_t tmp_368 = tmp_363 + tmp_72;
      real_t tmp_369 = tmp_17*tmp_368 + tmp_20*tmp_367 + tmp_23*tmp_366;
      real_t tmp_370 = tmp_16*tmp_368 + tmp_19*tmp_367 + tmp_22*tmp_366;
      real_t tmp_371 = tmp_15*tmp_368 + tmp_18*tmp_367 + tmp_21*tmp_366;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_43 + 0.40446199974765351*tmp_44;
      real_t tmp_376 = tmp_40*(tmp_375 + tmp_41);
      real_t tmp_377 = 0.40446199974765351*tmp_50 + 0.40446199974765351*tmp_51;
      real_t tmp_378 = tmp_40*(tmp_377 + tmp_48);
      real_t tmp_379 = 0.40446199974765351*tmp_57 + 0.40446199974765351*tmp_58;
      real_t tmp_380 = tmp_40*(tmp_379 + tmp_55);
      real_t tmp_381 = tmp_25*(tmp_32*tmp_376 + tmp_378*tmp_47 + tmp_380*tmp_54 - 1.0/4.0) + tmp_34*(tmp_376*tmp_64 + tmp_378*tmp_65 + tmp_380*tmp_66 - 1.0/4.0) + tmp_37*(tmp_376*tmp_61 + tmp_378*tmp_62 + tmp_380*tmp_63 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_68;
      real_t tmp_383 = tmp_377 + tmp_70;
      real_t tmp_384 = tmp_379 + tmp_72;
      real_t tmp_385 = tmp_17*tmp_384 + tmp_20*tmp_383 + tmp_23*tmp_382;
      real_t tmp_386 = tmp_16*tmp_384 + tmp_19*tmp_383 + tmp_22*tmp_382;
      real_t tmp_387 = tmp_15*tmp_384 + tmp_18*tmp_383 + tmp_21*tmp_382;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_43 + 0.041227165399737475*tmp_44;
      real_t tmp_392 = tmp_40*(tmp_391 + tmp_41);
      real_t tmp_393 = 0.1711304259088916*tmp_50 + 0.041227165399737475*tmp_51;
      real_t tmp_394 = tmp_40*(tmp_393 + tmp_48);
      real_t tmp_395 = 0.1711304259088916*tmp_57 + 0.041227165399737475*tmp_58;
      real_t tmp_396 = tmp_40*(tmp_395 + tmp_55);
      real_t tmp_397 = tmp_25*(tmp_32*tmp_392 + tmp_394*tmp_47 + tmp_396*tmp_54 - 1.0/4.0) + tmp_34*(tmp_392*tmp_64 + tmp_394*tmp_65 + tmp_396*tmp_66 - 1.0/4.0) + tmp_37*(tmp_392*tmp_61 + tmp_394*tmp_62 + tmp_396*tmp_63 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_68;
      real_t tmp_399 = tmp_393 + tmp_70;
      real_t tmp_400 = tmp_395 + tmp_72;
      real_t tmp_401 = tmp_17*tmp_400 + tmp_20*tmp_399 + tmp_23*tmp_398;
      real_t tmp_402 = tmp_16*tmp_400 + tmp_19*tmp_399 + tmp_22*tmp_398;
      real_t tmp_403 = tmp_15*tmp_400 + tmp_18*tmp_399 + tmp_21*tmp_398;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_408 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_409 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 - tmp_100*tmp_81 + 0.5*tmp_24*tmp_93) + tmp_118*(0.5*tmp_109*tmp_24 - tmp_116*tmp_117 - tmp_116*tmp_81) + tmp_134*(0.5*tmp_125*tmp_24 - tmp_132*tmp_133 - tmp_132*tmp_81) + tmp_150*(0.5*tmp_141*tmp_24 - tmp_148*tmp_149 - tmp_148*tmp_81) + tmp_166*(0.5*tmp_157*tmp_24 - tmp_164*tmp_165 - tmp_164*tmp_81) + tmp_182*(0.5*tmp_173*tmp_24 - tmp_180*tmp_181 - tmp_180*tmp_81) + tmp_198*(0.5*tmp_189*tmp_24 - tmp_196*tmp_197 - tmp_196*tmp_81) + tmp_214*(0.5*tmp_205*tmp_24 - tmp_212*tmp_213 - tmp_212*tmp_81) + tmp_230*(0.5*tmp_221*tmp_24 - tmp_228*tmp_229 - tmp_228*tmp_81) + tmp_246*(0.5*tmp_237*tmp_24 - tmp_244*tmp_245 - tmp_244*tmp_81) + tmp_262*(0.5*tmp_24*tmp_253 - tmp_260*tmp_261 - tmp_260*tmp_81) + tmp_278*(0.5*tmp_24*tmp_269 - tmp_276*tmp_277 - tmp_276*tmp_81) + tmp_294*(0.5*tmp_24*tmp_285 - tmp_292*tmp_293 - tmp_292*tmp_81) + tmp_310*(0.5*tmp_24*tmp_301 - tmp_308*tmp_309 - tmp_308*tmp_81) + tmp_326*(0.5*tmp_24*tmp_317 - tmp_324*tmp_325 - tmp_324*tmp_81) + tmp_342*(0.5*tmp_24*tmp_333 - tmp_340*tmp_341 - tmp_340*tmp_81) + tmp_358*(0.5*tmp_24*tmp_349 - tmp_356*tmp_357 - tmp_356*tmp_81) + tmp_374*(0.5*tmp_24*tmp_365 - tmp_372*tmp_373 - tmp_372*tmp_81) + tmp_390*(0.5*tmp_24*tmp_381 - tmp_388*tmp_389 - tmp_388*tmp_81) + tmp_406*(0.5*tmp_24*tmp_397 - tmp_404*tmp_405 - tmp_404*tmp_81) + tmp_86*(0.5*tmp_24*tmp_67 - tmp_77*tmp_81 - tmp_77*tmp_84);
      real_t a_1_0 = tmp_102*(-tmp_101*tmp_97 + 0.5*tmp_407*tmp_93 - tmp_81*tmp_97) + tmp_118*(0.5*tmp_109*tmp_407 - tmp_113*tmp_117 - tmp_113*tmp_81) + tmp_134*(0.5*tmp_125*tmp_407 - tmp_129*tmp_133 - tmp_129*tmp_81) + tmp_150*(0.5*tmp_141*tmp_407 - tmp_145*tmp_149 - tmp_145*tmp_81) + tmp_166*(0.5*tmp_157*tmp_407 - tmp_161*tmp_165 - tmp_161*tmp_81) + tmp_182*(0.5*tmp_173*tmp_407 - tmp_177*tmp_181 - tmp_177*tmp_81) + tmp_198*(0.5*tmp_189*tmp_407 - tmp_193*tmp_197 - tmp_193*tmp_81) + tmp_214*(0.5*tmp_205*tmp_407 - tmp_209*tmp_213 - tmp_209*tmp_81) + tmp_230*(0.5*tmp_221*tmp_407 - tmp_225*tmp_229 - tmp_225*tmp_81) + tmp_246*(0.5*tmp_237*tmp_407 - tmp_241*tmp_245 - tmp_241*tmp_81) + tmp_262*(0.5*tmp_253*tmp_407 - tmp_257*tmp_261 - tmp_257*tmp_81) + tmp_278*(0.5*tmp_269*tmp_407 - tmp_273*tmp_277 - tmp_273*tmp_81) + tmp_294*(0.5*tmp_285*tmp_407 - tmp_289*tmp_293 - tmp_289*tmp_81) + tmp_310*(0.5*tmp_301*tmp_407 - tmp_305*tmp_309 - tmp_305*tmp_81) + tmp_326*(0.5*tmp_317*tmp_407 - tmp_321*tmp_325 - tmp_321*tmp_81) + tmp_342*(0.5*tmp_333*tmp_407 - tmp_337*tmp_341 - tmp_337*tmp_81) + tmp_358*(0.5*tmp_349*tmp_407 - tmp_353*tmp_357 - tmp_353*tmp_81) + tmp_374*(0.5*tmp_365*tmp_407 - tmp_369*tmp_373 - tmp_369*tmp_81) + tmp_390*(0.5*tmp_381*tmp_407 - tmp_385*tmp_389 - tmp_385*tmp_81) + tmp_406*(0.5*tmp_397*tmp_407 - tmp_401*tmp_405 - tmp_401*tmp_81) + tmp_86*(0.5*tmp_407*tmp_67 - tmp_74*tmp_81 - tmp_74*tmp_84);
      real_t a_2_0 = tmp_102*(-tmp_101*tmp_98 + 0.5*tmp_408*tmp_93 - tmp_81*tmp_98) + tmp_118*(0.5*tmp_109*tmp_408 - tmp_114*tmp_117 - tmp_114*tmp_81) + tmp_134*(0.5*tmp_125*tmp_408 - tmp_130*tmp_133 - tmp_130*tmp_81) + tmp_150*(0.5*tmp_141*tmp_408 - tmp_146*tmp_149 - tmp_146*tmp_81) + tmp_166*(0.5*tmp_157*tmp_408 - tmp_162*tmp_165 - tmp_162*tmp_81) + tmp_182*(0.5*tmp_173*tmp_408 - tmp_178*tmp_181 - tmp_178*tmp_81) + tmp_198*(0.5*tmp_189*tmp_408 - tmp_194*tmp_197 - tmp_194*tmp_81) + tmp_214*(0.5*tmp_205*tmp_408 - tmp_210*tmp_213 - tmp_210*tmp_81) + tmp_230*(0.5*tmp_221*tmp_408 - tmp_226*tmp_229 - tmp_226*tmp_81) + tmp_246*(0.5*tmp_237*tmp_408 - tmp_242*tmp_245 - tmp_242*tmp_81) + tmp_262*(0.5*tmp_253*tmp_408 - tmp_258*tmp_261 - tmp_258*tmp_81) + tmp_278*(0.5*tmp_269*tmp_408 - tmp_274*tmp_277 - tmp_274*tmp_81) + tmp_294*(0.5*tmp_285*tmp_408 - tmp_290*tmp_293 - tmp_290*tmp_81) + tmp_310*(0.5*tmp_301*tmp_408 - tmp_306*tmp_309 - tmp_306*tmp_81) + tmp_326*(0.5*tmp_317*tmp_408 - tmp_322*tmp_325 - tmp_322*tmp_81) + tmp_342*(0.5*tmp_333*tmp_408 - tmp_338*tmp_341 - tmp_338*tmp_81) + tmp_358*(0.5*tmp_349*tmp_408 - tmp_354*tmp_357 - tmp_354*tmp_81) + tmp_374*(0.5*tmp_365*tmp_408 - tmp_370*tmp_373 - tmp_370*tmp_81) + tmp_390*(0.5*tmp_381*tmp_408 - tmp_386*tmp_389 - tmp_386*tmp_81) + tmp_406*(0.5*tmp_397*tmp_408 - tmp_402*tmp_405 - tmp_402*tmp_81) + tmp_86*(0.5*tmp_408*tmp_67 - tmp_75*tmp_81 - tmp_75*tmp_84);
      real_t a_3_0 = tmp_102*(-tmp_101*tmp_99 + 0.5*tmp_409*tmp_93 - tmp_81*tmp_99) + tmp_118*(0.5*tmp_109*tmp_409 - tmp_115*tmp_117 - tmp_115*tmp_81) + tmp_134*(0.5*tmp_125*tmp_409 - tmp_131*tmp_133 - tmp_131*tmp_81) + tmp_150*(0.5*tmp_141*tmp_409 - tmp_147*tmp_149 - tmp_147*tmp_81) + tmp_166*(0.5*tmp_157*tmp_409 - tmp_163*tmp_165 - tmp_163*tmp_81) + tmp_182*(0.5*tmp_173*tmp_409 - tmp_179*tmp_181 - tmp_179*tmp_81) + tmp_198*(0.5*tmp_189*tmp_409 - tmp_195*tmp_197 - tmp_195*tmp_81) + tmp_214*(0.5*tmp_205*tmp_409 - tmp_211*tmp_213 - tmp_211*tmp_81) + tmp_230*(0.5*tmp_221*tmp_409 - tmp_227*tmp_229 - tmp_227*tmp_81) + tmp_246*(0.5*tmp_237*tmp_409 - tmp_243*tmp_245 - tmp_243*tmp_81) + tmp_262*(0.5*tmp_253*tmp_409 - tmp_259*tmp_261 - tmp_259*tmp_81) + tmp_278*(0.5*tmp_269*tmp_409 - tmp_275*tmp_277 - tmp_275*tmp_81) + tmp_294*(0.5*tmp_285*tmp_409 - tmp_291*tmp_293 - tmp_291*tmp_81) + tmp_310*(0.5*tmp_301*tmp_409 - tmp_307*tmp_309 - tmp_307*tmp_81) + tmp_326*(0.5*tmp_317*tmp_409 - tmp_323*tmp_325 - tmp_323*tmp_81) + tmp_342*(0.5*tmp_333*tmp_409 - tmp_339*tmp_341 - tmp_339*tmp_81) + tmp_358*(0.5*tmp_349*tmp_409 - tmp_355*tmp_357 - tmp_355*tmp_81) + tmp_374*(0.5*tmp_365*tmp_409 - tmp_371*tmp_373 - tmp_371*tmp_81) + tmp_390*(0.5*tmp_381*tmp_409 - tmp_387*tmp_389 - tmp_387*tmp_81) + tmp_406*(0.5*tmp_397*tmp_409 - tmp_403*tmp_405 - tmp_403*tmp_81) + tmp_86*(0.5*tmp_409*tmp_67 - tmp_76*tmp_81 - tmp_76*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_1*(tmp_41 - 1.0/4.0) + tmp_4*(tmp_40 - 1.0/4.0) + tmp_7*(tmp_42 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_1*tmp_16 + tmp_15*tmp_7 + tmp_17*tmp_4) + p_affine_13_1*(tmp_1*tmp_19 + tmp_18*tmp_7 + tmp_20*tmp_4) + p_affine_13_2*(tmp_1*tmp_22 + tmp_21*tmp_7 + tmp_23*tmp_4);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_1*(tmp_54 - 1.0/4.0) + tmp_4*(tmp_53 - 1.0/4.0) + tmp_7*(tmp_55 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_1*(tmp_63 - 1.0/4.0) + tmp_4*(tmp_62 - 1.0/4.0) + tmp_7*(tmp_64 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_1*(tmp_72 - 1.0/4.0) + tmp_4*(tmp_71 - 1.0/4.0) + tmp_7*(tmp_73 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_1*(tmp_81 - 1.0/4.0) + tmp_4*(tmp_80 - 1.0/4.0) + tmp_7*(tmp_82 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_1*(tmp_90 - 1.0/4.0) + tmp_4*(tmp_89 - 1.0/4.0) + tmp_7*(tmp_91 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_1*(tmp_99 - 1.0/4.0) + tmp_4*(tmp_98 - 1.0/4.0) + tmp_7*(tmp_100 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_1*(tmp_108 - 1.0/4.0) + tmp_4*(tmp_107 - 1.0/4.0) + tmp_7*(tmp_109 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_1*(tmp_117 - 1.0/4.0) + tmp_4*(tmp_116 - 1.0/4.0) + tmp_7*(tmp_118 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_1*(tmp_126 - 1.0/4.0) + tmp_4*(tmp_125 - 1.0/4.0) + tmp_7*(tmp_127 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_1*(tmp_135 - 1.0/4.0) + tmp_4*(tmp_134 - 1.0/4.0) + tmp_7*(tmp_136 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_1*(tmp_144 - 1.0/4.0) + tmp_4*(tmp_143 - 1.0/4.0) + tmp_7*(tmp_145 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_1*(tmp_153 - 1.0/4.0) + tmp_4*(tmp_152 - 1.0/4.0) + tmp_7*(tmp_154 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_1*(tmp_162 - 1.0/4.0) + tmp_4*(tmp_161 - 1.0/4.0) + tmp_7*(tmp_163 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_1*(tmp_171 - 1.0/4.0) + tmp_4*(tmp_170 - 1.0/4.0) + tmp_7*(tmp_172 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_1*(tmp_180 - 1.0/4.0) + tmp_4*(tmp_179 - 1.0/4.0) + tmp_7*(tmp_181 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_1*(tmp_189 - 1.0/4.0) + tmp_4*(tmp_188 - 1.0/4.0) + tmp_7*(tmp_190 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_1*(tmp_198 - 1.0/4.0) + tmp_4*(tmp_197 - 1.0/4.0) + tmp_7*(tmp_199 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_1*(tmp_207 - 1.0/4.0) + tmp_4*(tmp_206 - 1.0/4.0) + tmp_7*(tmp_208 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_1*(tmp_216 - 1.0/4.0) + tmp_4*(tmp_215 - 1.0/4.0) + tmp_7*(tmp_217 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_1*(tmp_225 - 1.0/4.0) + tmp_4*(tmp_224 - 1.0/4.0) + tmp_7*(tmp_226 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_1_0 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_2_0 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_3_0 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_EP1_0 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_EP1_0()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_4*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = tmp_0*tmp_8 + tmp_4*tmp_7;
      real_t tmp_10 = tmp_1*tmp_6;
      real_t tmp_11 = tmp_5*tmp_6;
      real_t tmp_12 = tmp_11*tmp_4 + tmp_2*tmp_6;
      real_t tmp_13 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_14 = tmp_13*(tmp_12*(-tmp_10 - tmp_11) + tmp_9*(-tmp_7 - tmp_8));
      real_t tmp_15 = tmp_13*(tmp_10*tmp_12 + tmp_8*tmp_9);
      real_t tmp_16 = tmp_13*(tmp_11*tmp_12 + tmp_7*tmp_9);
      real_t a_0_0 = 0.5*tmp_14;
      real_t a_0_1 = 0.5*tmp_15;
      real_t a_0_2 = 0.5*tmp_16;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_3 = 0.046910077030668018*tmp_1 + tmp_2;
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_0*tmp_5;
      real_t tmp_7 = -tmp_4;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = 1.0 / (tmp_6 + tmp_7*tmp_8);
      real_t tmp_10 = tmp_4*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_11 + tmp_12;
      real_t tmp_14 = tmp_5*tmp_9;
      real_t tmp_15 = tmp_10*tmp_3 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_0*tmp_9;
      real_t tmp_17 = tmp_8*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_3;
      real_t tmp_19 = tmp_0*(tmp_15 - 1.0/3.0) + tmp_7*(tmp_18 - 1.0/3.0);
      real_t tmp_20 = 0.5*p_affine_10_0*(-tmp_14 - tmp_17) + 0.5*p_affine_10_1*(-tmp_10 - tmp_16);
      real_t tmp_21 = -tmp_15 - tmp_18 + 1;
      real_t tmp_22 = 0.5*p_affine_10_0*(tmp_17*tmp_7 + tmp_6*tmp_9) + 0.5*p_affine_10_1*(tmp_0*tmp_10 + tmp_16*tmp_7);
      real_t tmp_23 = std::abs(std::pow((tmp_1*tmp_1) + (tmp_11*tmp_11), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_1 + tmp_2;
      real_t tmp_27 = 0.23076534494715845*tmp_11 + tmp_12;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = tmp_0*(tmp_28 - 1.0/3.0) + tmp_7*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_1 + tmp_2;
      real_t tmp_34 = 0.5*tmp_11 + tmp_12;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_14*tmp_34;
      real_t tmp_36 = tmp_16*tmp_33 + tmp_17*tmp_34;
      real_t tmp_37 = tmp_0*(tmp_35 - 1.0/3.0) + tmp_7*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_1 + tmp_2;
      real_t tmp_41 = 0.7692346550528415*tmp_11 + tmp_12;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_14*tmp_41;
      real_t tmp_43 = tmp_16*tmp_40 + tmp_17*tmp_41;
      real_t tmp_44 = tmp_0*(tmp_42 - 1.0/3.0) + tmp_7*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_1 + tmp_2;
      real_t tmp_48 = 0.95308992296933193*tmp_11 + tmp_12;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_14*tmp_48;
      real_t tmp_50 = tmp_16*tmp_47 + tmp_17*tmp_48;
      real_t tmp_51 = tmp_0*(tmp_49 - 1.0/3.0) + tmp_7*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = 0.5*p_affine_10_0*tmp_14 + 0.5*p_affine_10_1*tmp_10;
      real_t tmp_55 = 0.5*p_affine_10_0*tmp_17 + 0.5*p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_25*(-tmp_19*tmp_20 + 3*tmp_19*tmp_21*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_20*tmp_30 - tmp_22*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_20*tmp_37 - tmp_22*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_20*tmp_44 - tmp_22*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_20*tmp_51 - tmp_22*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_0_1 = tmp_25*(3*tmp_15*tmp_19*tmp_24 - tmp_15*tmp_22 - tmp_19*tmp_54) + tmp_32*(-tmp_22*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_22*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_22*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_22*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_0_2 = tmp_25*(3*tmp_18*tmp_19*tmp_24 - tmp_18*tmp_22 - tmp_19*tmp_55) + tmp_32*(-tmp_22*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_22*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_22*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_22*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1;
      real_t tmp_2 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_3 = p_affine_6_1 + 0.046910077030668018*tmp_2;
      real_t tmp_4 = tmp_1 + tmp_3;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_0*tmp_5;
      real_t tmp_7 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_8 = -tmp_7;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = 1.0 / (tmp_6 + tmp_8*tmp_9);
      real_t tmp_11 = tmp_10*tmp_7;
      real_t tmp_12 = -p_affine_0_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_10*(tmp_12 + tmp_14);
      real_t tmp_16 = tmp_0*tmp_10;
      real_t tmp_17 = tmp_0*(tmp_11*tmp_4 + tmp_15*tmp_5 - 1.0/3.0) + tmp_8*(tmp_15*tmp_9 + tmp_16*tmp_4 - 1.0/3.0);
      real_t tmp_18 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_19 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_20 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_21 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_22 = 1.0 / (tmp_18*tmp_19 - tmp_20*tmp_21);
      real_t tmp_23 = tmp_18*tmp_22;
      real_t tmp_24 = tmp_21*tmp_22;
      real_t tmp_25 = tmp_19*tmp_22;
      real_t tmp_26 = tmp_20*tmp_22;
      real_t tmp_27 = 0.5*p_affine_10_0*(-tmp_23 - tmp_24) + 0.5*p_affine_10_1*(-tmp_25 - tmp_26);
      real_t tmp_28 = tmp_10*tmp_8;
      real_t tmp_29 = p_affine_10_0*(tmp_10*tmp_6 + tmp_28*tmp_9) + p_affine_10_1*(tmp_0*tmp_11 + tmp_0*tmp_28);
      real_t tmp_30 = -p_affine_3_1;
      real_t tmp_31 = tmp_3 + tmp_30;
      real_t tmp_32 = -p_affine_3_0;
      real_t tmp_33 = tmp_14 + tmp_32;
      real_t tmp_34 = tmp_23*tmp_33 + tmp_26*tmp_31;
      real_t tmp_35 = tmp_24*tmp_33 + tmp_25*tmp_31;
      real_t tmp_36 = -tmp_34 - tmp_35 + 1;
      real_t tmp_37 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_2*tmp_2), 1.0/2.0));
      real_t tmp_38 = 3/tmp_37;
      real_t tmp_39 = tmp_17*tmp_38;
      real_t tmp_40 = 0.11846344252809471*tmp_37;
      real_t tmp_41 = p_affine_6_1 + 0.23076534494715845*tmp_2;
      real_t tmp_42 = tmp_1 + tmp_41;
      real_t tmp_43 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_44 = tmp_10*(tmp_12 + tmp_43);
      real_t tmp_45 = tmp_0*(tmp_11*tmp_42 + tmp_44*tmp_5 - 1.0/3.0) + tmp_8*(tmp_16*tmp_42 + tmp_44*tmp_9 - 1.0/3.0);
      real_t tmp_46 = tmp_30 + tmp_41;
      real_t tmp_47 = tmp_32 + tmp_43;
      real_t tmp_48 = tmp_23*tmp_47 + tmp_26*tmp_46;
      real_t tmp_49 = tmp_24*tmp_47 + tmp_25*tmp_46;
      real_t tmp_50 = -tmp_48 - tmp_49 + 1;
      real_t tmp_51 = tmp_38*tmp_45;
      real_t tmp_52 = 0.2393143352496831*tmp_37;
      real_t tmp_53 = p_affine_6_1 + 0.5*tmp_2;
      real_t tmp_54 = tmp_1 + tmp_53;
      real_t tmp_55 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_56 = tmp_10*(tmp_12 + tmp_55);
      real_t tmp_57 = tmp_0*(tmp_11*tmp_54 + tmp_5*tmp_56 - 1.0/3.0) + tmp_8*(tmp_16*tmp_54 + tmp_56*tmp_9 - 1.0/3.0);
      real_t tmp_58 = tmp_30 + tmp_53;
      real_t tmp_59 = tmp_32 + tmp_55;
      real_t tmp_60 = tmp_23*tmp_59 + tmp_26*tmp_58;
      real_t tmp_61 = tmp_24*tmp_59 + tmp_25*tmp_58;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_38*tmp_57;
      real_t tmp_64 = 0.2844444444444445*tmp_37;
      real_t tmp_65 = p_affine_6_1 + 0.7692346550528415*tmp_2;
      real_t tmp_66 = tmp_1 + tmp_65;
      real_t tmp_67 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_68 = tmp_10*(tmp_12 + tmp_67);
      real_t tmp_69 = tmp_0*(tmp_11*tmp_66 + tmp_5*tmp_68 - 1.0/3.0) + tmp_8*(tmp_16*tmp_66 + tmp_68*tmp_9 - 1.0/3.0);
      real_t tmp_70 = tmp_30 + tmp_65;
      real_t tmp_71 = tmp_32 + tmp_67;
      real_t tmp_72 = tmp_23*tmp_71 + tmp_26*tmp_70;
      real_t tmp_73 = tmp_24*tmp_71 + tmp_25*tmp_70;
      real_t tmp_74 = -tmp_72 - tmp_73 + 1;
      real_t tmp_75 = tmp_38*tmp_69;
      real_t tmp_76 = 0.2393143352496831*tmp_37;
      real_t tmp_77 = p_affine_6_1 + 0.95308992296933193*tmp_2;
      real_t tmp_78 = tmp_1 + tmp_77;
      real_t tmp_79 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_80 = tmp_10*(tmp_12 + tmp_79);
      real_t tmp_81 = tmp_0*(tmp_11*tmp_78 + tmp_5*tmp_80 - 1.0/3.0) + tmp_8*(tmp_16*tmp_78 + tmp_80*tmp_9 - 1.0/3.0);
      real_t tmp_82 = tmp_30 + tmp_77;
      real_t tmp_83 = tmp_32 + tmp_79;
      real_t tmp_84 = tmp_23*tmp_83 + tmp_26*tmp_82;
      real_t tmp_85 = tmp_24*tmp_83 + tmp_25*tmp_82;
      real_t tmp_86 = -tmp_84 - tmp_85 + 1;
      real_t tmp_87 = tmp_38*tmp_81;
      real_t tmp_88 = 0.11846344252809471*tmp_37;
      real_t tmp_89 = 0.5*p_affine_10_0*tmp_23 + 0.5*p_affine_10_1*tmp_26;
      real_t tmp_90 = 0.5*p_affine_10_0*tmp_24 + 0.5*p_affine_10_1*tmp_25;
      real_t a_0_0 = tmp_40*(-tmp_17*tmp_27 + 0.5*tmp_29*tmp_36 - tmp_36*tmp_39) + tmp_52*(-tmp_27*tmp_45 + 0.5*tmp_29*tmp_50 - tmp_50*tmp_51) + tmp_64*(-tmp_27*tmp_57 + 0.5*tmp_29*tmp_62 - tmp_62*tmp_63) + tmp_76*(-tmp_27*tmp_69 + 0.5*tmp_29*tmp_74 - tmp_74*tmp_75) + tmp_88*(-tmp_27*tmp_81 + 0.5*tmp_29*tmp_86 - tmp_86*tmp_87);
      real_t a_0_1 = tmp_40*(-tmp_17*tmp_89 + 0.5*tmp_29*tmp_34 - tmp_34*tmp_39) + tmp_52*(0.5*tmp_29*tmp_48 - tmp_45*tmp_89 - tmp_48*tmp_51) + tmp_64*(0.5*tmp_29*tmp_60 - tmp_57*tmp_89 - tmp_60*tmp_63) + tmp_76*(0.5*tmp_29*tmp_72 - tmp_69*tmp_89 - tmp_72*tmp_75) + tmp_88*(0.5*tmp_29*tmp_84 - tmp_81*tmp_89 - tmp_84*tmp_87);
      real_t a_0_2 = tmp_40*(-tmp_17*tmp_90 + 0.5*tmp_29*tmp_35 - tmp_35*tmp_39) + tmp_52*(0.5*tmp_29*tmp_49 - tmp_45*tmp_90 - tmp_49*tmp_51) + tmp_64*(0.5*tmp_29*tmp_61 - tmp_57*tmp_90 - tmp_61*tmp_63) + tmp_76*(0.5*tmp_29*tmp_73 - tmp_69*tmp_90 - tmp_73*tmp_75) + tmp_88*(0.5*tmp_29*tmp_85 - tmp_81*tmp_90 - tmp_85*tmp_87);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_4*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_5*tmp_6;
      real_t tmp_9 = tmp_1*tmp_6;
      real_t tmp_10 = tmp_3*tmp_6;
      real_t tmp_11 = p_affine_10_0*(-tmp_7 - tmp_8) + p_affine_10_1*(-tmp_10 - tmp_9);
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_14 = 0.046910077030668018*tmp_12 + tmp_13;
      real_t tmp_15 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_16 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_17 = 0.046910077030668018*tmp_15 + tmp_16;
      real_t tmp_18 = tmp_10*tmp_14 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*tmp_9 + tmp_17*tmp_8;
      real_t tmp_20 = tmp_1*(tmp_18 - 1.0/3.0) + tmp_4*(tmp_19 - 1.0/3.0);
      real_t tmp_21 = p_affine_10_0*(tmp_2*tmp_6 + tmp_4*tmp_8) + p_affine_10_1*(tmp_1*tmp_10 + tmp_4*tmp_9);
      real_t tmp_22 = -tmp_18 - tmp_19 + 1;
      real_t tmp_23 = std::abs(std::pow((tmp_12*tmp_12) + (tmp_15*tmp_15), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_12 + tmp_13;
      real_t tmp_27 = 0.23076534494715845*tmp_15 + tmp_16;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_27*tmp_7;
      real_t tmp_29 = tmp_26*tmp_9 + tmp_27*tmp_8;
      real_t tmp_30 = tmp_1*(tmp_28 - 1.0/3.0) + tmp_4*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_12 + tmp_13;
      real_t tmp_34 = 0.5*tmp_15 + tmp_16;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_34*tmp_7;
      real_t tmp_36 = tmp_33*tmp_9 + tmp_34*tmp_8;
      real_t tmp_37 = tmp_1*(tmp_35 - 1.0/3.0) + tmp_4*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_12 + tmp_13;
      real_t tmp_41 = 0.7692346550528415*tmp_15 + tmp_16;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_41*tmp_7;
      real_t tmp_43 = tmp_40*tmp_9 + tmp_41*tmp_8;
      real_t tmp_44 = tmp_1*(tmp_42 - 1.0/3.0) + tmp_4*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_12 + tmp_13;
      real_t tmp_48 = 0.95308992296933193*tmp_15 + tmp_16;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_48*tmp_7;
      real_t tmp_50 = tmp_47*tmp_9 + tmp_48*tmp_8;
      real_t tmp_51 = tmp_1*(tmp_49 - 1.0/3.0) + tmp_4*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = p_affine_10_0*tmp_7 + p_affine_10_1*tmp_10;
      real_t tmp_55 = p_affine_10_0*tmp_8 + p_affine_10_1*tmp_9;
      real_t a_0_0 = tmp_25*(-tmp_11*tmp_20 + 3*tmp_20*tmp_22*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_11*tmp_30 - tmp_21*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_11*tmp_37 - tmp_21*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_11*tmp_44 - tmp_21*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_11*tmp_51 - tmp_21*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_0_1 = tmp_25*(3*tmp_18*tmp_20*tmp_24 - tmp_18*tmp_21 - tmp_20*tmp_54) + tmp_32*(-tmp_21*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_21*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_21*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_21*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_0_2 = tmp_25*(3*tmp_19*tmp_20*tmp_24 - tmp_19*tmp_21 - tmp_20*tmp_55) + tmp_32*(-tmp_21*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_21*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_21*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_21*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_0*tmp_17 + tmp_11*tmp_15 + tmp_16*tmp_3;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_0*tmp_21 + tmp_11*tmp_19 + tmp_20*tmp_3;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_0*tmp_25 + tmp_11*tmp_23 + tmp_24*tmp_3;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_0_1 = 0.1666666666666668*tmp_41;
      real_t a_0_2 = 0.1666666666666668*tmp_42;
      real_t a_0_3 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_13 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_13*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_10*tmp_13;
      real_t tmp_18 = tmp_12*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_0*tmp_11 - tmp_0*tmp_16 + tmp_12*tmp_6*tmp_7 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_10*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_11 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(-tmp_0*tmp_7 + tmp_13*tmp_8);
      real_t tmp_35 = tmp_19*(tmp_0*tmp_10 - tmp_12*tmp_8);
      real_t tmp_36 = tmp_19*(tmp_12*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(tmp_0*tmp_9 - tmp_13*tmp_6);
      real_t tmp_39 = tmp_19*(-tmp_0*tmp_14 + tmp_12*tmp_6);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_6*(tmp_37 - 1.0/4.0) + tmp_8*(tmp_41 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_36*tmp_6 + tmp_40*tmp_8) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_35*tmp_6 + tmp_39*tmp_8) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_34*tmp_6 + tmp_38*tmp_8);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_6*(tmp_54 - 1.0/4.0) + tmp_8*(tmp_55 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_6*(tmp_63 - 1.0/4.0) + tmp_8*(tmp_64 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_6*(tmp_72 - 1.0/4.0) + tmp_8*(tmp_73 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_6*(tmp_81 - 1.0/4.0) + tmp_8*(tmp_82 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_6*(tmp_90 - 1.0/4.0) + tmp_8*(tmp_91 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_6*(tmp_99 - 1.0/4.0) + tmp_8*(tmp_100 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_6*(tmp_108 - 1.0/4.0) + tmp_8*(tmp_109 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_6*(tmp_117 - 1.0/4.0) + tmp_8*(tmp_118 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_6*(tmp_126 - 1.0/4.0) + tmp_8*(tmp_127 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_6*(tmp_135 - 1.0/4.0) + tmp_8*(tmp_136 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_6*(tmp_144 - 1.0/4.0) + tmp_8*(tmp_145 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_6*(tmp_153 - 1.0/4.0) + tmp_8*(tmp_154 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_6*(tmp_162 - 1.0/4.0) + tmp_8*(tmp_163 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_6*(tmp_171 - 1.0/4.0) + tmp_8*(tmp_172 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_6*(tmp_180 - 1.0/4.0) + tmp_8*(tmp_181 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_6*(tmp_189 - 1.0/4.0) + tmp_8*(tmp_190 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_6*(tmp_198 - 1.0/4.0) + tmp_8*(tmp_199 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_6*(tmp_207 - 1.0/4.0) + tmp_8*(tmp_208 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_6*(tmp_216 - 1.0/4.0) + tmp_8*(tmp_217 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_6*(tmp_225 - 1.0/4.0) + tmp_8*(tmp_226 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_37 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_38 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_39 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_40 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_41 = tmp_11 - tmp_14;
      real_t tmp_42 = tmp_0*(tmp_21*tmp_5 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0) + tmp_1*(tmp_21*tmp_36 + tmp_28*tmp_37 + tmp_35*tmp_38 - 1.0/4.0) + tmp_3*(tmp_21*tmp_39 + tmp_28*tmp_40 + tmp_35*tmp_41 - 1.0/4.0);
      real_t tmp_43 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_44 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_45 = tmp_43*tmp_44;
      real_t tmp_46 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_48 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_49 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_50 = tmp_46*tmp_49;
      real_t tmp_51 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_52 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_53 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_54 = tmp_49*tmp_51;
      real_t tmp_55 = tmp_43*tmp_52;
      real_t tmp_56 = tmp_47*tmp_53;
      real_t tmp_57 = 1.0 / (-tmp_44*tmp_54 + tmp_45*tmp_53 - tmp_46*tmp_56 + tmp_47*tmp_51*tmp_52 + tmp_48*tmp_50 - tmp_48*tmp_55);
      real_t tmp_58 = tmp_57*(tmp_45 - tmp_46*tmp_47);
      real_t tmp_59 = tmp_57*(-tmp_43*tmp_48 + tmp_47*tmp_51);
      real_t tmp_60 = tmp_57*(-tmp_44*tmp_51 + tmp_46*tmp_48);
      real_t tmp_61 = tmp_57*(-tmp_44*tmp_49 + tmp_47*tmp_52);
      real_t tmp_62 = tmp_57*(tmp_48*tmp_49 - tmp_56);
      real_t tmp_63 = tmp_57*(tmp_44*tmp_53 - tmp_48*tmp_52);
      real_t tmp_64 = tmp_57*(tmp_50 - tmp_55);
      real_t tmp_65 = tmp_57*(tmp_43*tmp_53 - tmp_54);
      real_t tmp_66 = tmp_57*(-tmp_46*tmp_53 + tmp_51*tmp_52);
      real_t tmp_67 = 0.5*p_affine_13_0*(-tmp_58 - tmp_59 - tmp_60) + 0.5*p_affine_13_1*(-tmp_61 - tmp_62 - tmp_63) + 0.5*p_affine_13_2*(-tmp_64 - tmp_65 - tmp_66);
      real_t tmp_68 = tmp_0*tmp_15;
      real_t tmp_69 = tmp_1*tmp_15;
      real_t tmp_70 = tmp_15*tmp_3;
      real_t tmp_71 = p_affine_13_0*(tmp_29*tmp_68 + tmp_38*tmp_69 + tmp_41*tmp_70) + p_affine_13_1*(tmp_22*tmp_68 + tmp_37*tmp_69 + tmp_40*tmp_70) + p_affine_13_2*(tmp_36*tmp_69 + tmp_39*tmp_70 + tmp_5*tmp_68);
      real_t tmp_72 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_73 = tmp_19 + tmp_72;
      real_t tmp_74 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_75 = tmp_26 + tmp_74;
      real_t tmp_76 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_77 = tmp_33 + tmp_76;
      real_t tmp_78 = tmp_60*tmp_77 + tmp_63*tmp_75 + tmp_66*tmp_73;
      real_t tmp_79 = tmp_59*tmp_77 + tmp_62*tmp_75 + tmp_65*tmp_73;
      real_t tmp_80 = tmp_58*tmp_77 + tmp_61*tmp_75 + tmp_64*tmp_73;
      real_t tmp_81 = -tmp_78 - tmp_79 - tmp_80 + 1;
      real_t tmp_82 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_42*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_88 = tmp_15*(tmp_20 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_90 = tmp_15*(tmp_27 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_92 = tmp_15*(tmp_34 + tmp_91);
      real_t tmp_93 = tmp_0*(tmp_22*tmp_90 + tmp_29*tmp_92 + tmp_5*tmp_88 - 1.0/4.0) + tmp_1*(tmp_36*tmp_88 + tmp_37*tmp_90 + tmp_38*tmp_92 - 1.0/4.0) + tmp_3*(tmp_39*tmp_88 + tmp_40*tmp_90 + tmp_41*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_72 + tmp_87;
      real_t tmp_95 = tmp_74 + tmp_89;
      real_t tmp_96 = tmp_76 + tmp_91;
      real_t tmp_97 = tmp_60*tmp_96 + tmp_63*tmp_95 + tmp_66*tmp_94;
      real_t tmp_98 = tmp_59*tmp_96 + tmp_62*tmp_95 + tmp_65*tmp_94;
      real_t tmp_99 = tmp_58*tmp_96 + tmp_61*tmp_95 + tmp_64*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_104 = tmp_15*(tmp_103 + tmp_20);
      real_t tmp_105 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_106 = tmp_15*(tmp_105 + tmp_27);
      real_t tmp_107 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_108 = tmp_15*(tmp_107 + tmp_34);
      real_t tmp_109 = tmp_0*(tmp_104*tmp_5 + tmp_106*tmp_22 + tmp_108*tmp_29 - 1.0/4.0) + tmp_1*(tmp_104*tmp_36 + tmp_106*tmp_37 + tmp_108*tmp_38 - 1.0/4.0) + tmp_3*(tmp_104*tmp_39 + tmp_106*tmp_40 + tmp_108*tmp_41 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_72;
      real_t tmp_111 = tmp_105 + tmp_74;
      real_t tmp_112 = tmp_107 + tmp_76;
      real_t tmp_113 = tmp_110*tmp_66 + tmp_111*tmp_63 + tmp_112*tmp_60;
      real_t tmp_114 = tmp_110*tmp_65 + tmp_111*tmp_62 + tmp_112*tmp_59;
      real_t tmp_115 = tmp_110*tmp_64 + tmp_111*tmp_61 + tmp_112*tmp_58;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_120 = tmp_15*(tmp_119 + tmp_20);
      real_t tmp_121 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_122 = tmp_15*(tmp_121 + tmp_27);
      real_t tmp_123 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_124 = tmp_15*(tmp_123 + tmp_34);
      real_t tmp_125 = tmp_0*(tmp_120*tmp_5 + tmp_122*tmp_22 + tmp_124*tmp_29 - 1.0/4.0) + tmp_1*(tmp_120*tmp_36 + tmp_122*tmp_37 + tmp_124*tmp_38 - 1.0/4.0) + tmp_3*(tmp_120*tmp_39 + tmp_122*tmp_40 + tmp_124*tmp_41 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_72;
      real_t tmp_127 = tmp_121 + tmp_74;
      real_t tmp_128 = tmp_123 + tmp_76;
      real_t tmp_129 = tmp_126*tmp_66 + tmp_127*tmp_63 + tmp_128*tmp_60;
      real_t tmp_130 = tmp_126*tmp_65 + tmp_127*tmp_62 + tmp_128*tmp_59;
      real_t tmp_131 = tmp_126*tmp_64 + tmp_127*tmp_61 + tmp_128*tmp_58;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_20);
      real_t tmp_137 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_27);
      real_t tmp_139 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_140 = tmp_15*(tmp_139 + tmp_34);
      real_t tmp_141 = tmp_0*(tmp_136*tmp_5 + tmp_138*tmp_22 + tmp_140*tmp_29 - 1.0/4.0) + tmp_1*(tmp_136*tmp_36 + tmp_138*tmp_37 + tmp_140*tmp_38 - 1.0/4.0) + tmp_3*(tmp_136*tmp_39 + tmp_138*tmp_40 + tmp_140*tmp_41 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_72;
      real_t tmp_143 = tmp_137 + tmp_74;
      real_t tmp_144 = tmp_139 + tmp_76;
      real_t tmp_145 = tmp_142*tmp_66 + tmp_143*tmp_63 + tmp_144*tmp_60;
      real_t tmp_146 = tmp_142*tmp_65 + tmp_143*tmp_62 + tmp_144*tmp_59;
      real_t tmp_147 = tmp_142*tmp_64 + tmp_143*tmp_61 + tmp_144*tmp_58;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_20);
      real_t tmp_153 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_154 = tmp_15*(tmp_153 + tmp_27);
      real_t tmp_155 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_156 = tmp_15*(tmp_155 + tmp_34);
      real_t tmp_157 = tmp_0*(tmp_152*tmp_5 + tmp_154*tmp_22 + tmp_156*tmp_29 - 1.0/4.0) + tmp_1*(tmp_152*tmp_36 + tmp_154*tmp_37 + tmp_156*tmp_38 - 1.0/4.0) + tmp_3*(tmp_152*tmp_39 + tmp_154*tmp_40 + tmp_156*tmp_41 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_72;
      real_t tmp_159 = tmp_153 + tmp_74;
      real_t tmp_160 = tmp_155 + tmp_76;
      real_t tmp_161 = tmp_158*tmp_66 + tmp_159*tmp_63 + tmp_160*tmp_60;
      real_t tmp_162 = tmp_158*tmp_65 + tmp_159*tmp_62 + tmp_160*tmp_59;
      real_t tmp_163 = tmp_158*tmp_64 + tmp_159*tmp_61 + tmp_160*tmp_58;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_168 = tmp_15*(tmp_167 + tmp_20);
      real_t tmp_169 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_170 = tmp_15*(tmp_169 + tmp_27);
      real_t tmp_171 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_172 = tmp_15*(tmp_171 + tmp_34);
      real_t tmp_173 = tmp_0*(tmp_168*tmp_5 + tmp_170*tmp_22 + tmp_172*tmp_29 - 1.0/4.0) + tmp_1*(tmp_168*tmp_36 + tmp_170*tmp_37 + tmp_172*tmp_38 - 1.0/4.0) + tmp_3*(tmp_168*tmp_39 + tmp_170*tmp_40 + tmp_172*tmp_41 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_72;
      real_t tmp_175 = tmp_169 + tmp_74;
      real_t tmp_176 = tmp_171 + tmp_76;
      real_t tmp_177 = tmp_174*tmp_66 + tmp_175*tmp_63 + tmp_176*tmp_60;
      real_t tmp_178 = tmp_174*tmp_65 + tmp_175*tmp_62 + tmp_176*tmp_59;
      real_t tmp_179 = tmp_174*tmp_64 + tmp_175*tmp_61 + tmp_176*tmp_58;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_184 = tmp_15*(tmp_183 + tmp_20);
      real_t tmp_185 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_27);
      real_t tmp_187 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_34);
      real_t tmp_189 = tmp_0*(tmp_184*tmp_5 + tmp_186*tmp_22 + tmp_188*tmp_29 - 1.0/4.0) + tmp_1*(tmp_184*tmp_36 + tmp_186*tmp_37 + tmp_188*tmp_38 - 1.0/4.0) + tmp_3*(tmp_184*tmp_39 + tmp_186*tmp_40 + tmp_188*tmp_41 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_72;
      real_t tmp_191 = tmp_185 + tmp_74;
      real_t tmp_192 = tmp_187 + tmp_76;
      real_t tmp_193 = tmp_190*tmp_66 + tmp_191*tmp_63 + tmp_192*tmp_60;
      real_t tmp_194 = tmp_190*tmp_65 + tmp_191*tmp_62 + tmp_192*tmp_59;
      real_t tmp_195 = tmp_190*tmp_64 + tmp_191*tmp_61 + tmp_192*tmp_58;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_20);
      real_t tmp_201 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_27);
      real_t tmp_203 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_34);
      real_t tmp_205 = tmp_0*(tmp_200*tmp_5 + tmp_202*tmp_22 + tmp_204*tmp_29 - 1.0/4.0) + tmp_1*(tmp_200*tmp_36 + tmp_202*tmp_37 + tmp_204*tmp_38 - 1.0/4.0) + tmp_3*(tmp_200*tmp_39 + tmp_202*tmp_40 + tmp_204*tmp_41 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_72;
      real_t tmp_207 = tmp_201 + tmp_74;
      real_t tmp_208 = tmp_203 + tmp_76;
      real_t tmp_209 = tmp_206*tmp_66 + tmp_207*tmp_63 + tmp_208*tmp_60;
      real_t tmp_210 = tmp_206*tmp_65 + tmp_207*tmp_62 + tmp_208*tmp_59;
      real_t tmp_211 = tmp_206*tmp_64 + tmp_207*tmp_61 + tmp_208*tmp_58;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_216 = tmp_15*(tmp_20 + tmp_215);
      real_t tmp_217 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_218 = tmp_15*(tmp_217 + tmp_27);
      real_t tmp_219 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_34);
      real_t tmp_221 = tmp_0*(tmp_216*tmp_5 + tmp_218*tmp_22 + tmp_220*tmp_29 - 1.0/4.0) + tmp_1*(tmp_216*tmp_36 + tmp_218*tmp_37 + tmp_220*tmp_38 - 1.0/4.0) + tmp_3*(tmp_216*tmp_39 + tmp_218*tmp_40 + tmp_220*tmp_41 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_72;
      real_t tmp_223 = tmp_217 + tmp_74;
      real_t tmp_224 = tmp_219 + tmp_76;
      real_t tmp_225 = tmp_222*tmp_66 + tmp_223*tmp_63 + tmp_224*tmp_60;
      real_t tmp_226 = tmp_222*tmp_65 + tmp_223*tmp_62 + tmp_224*tmp_59;
      real_t tmp_227 = tmp_222*tmp_64 + tmp_223*tmp_61 + tmp_224*tmp_58;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_232 = tmp_15*(tmp_20 + tmp_231);
      real_t tmp_233 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_234 = tmp_15*(tmp_233 + tmp_27);
      real_t tmp_235 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_236 = tmp_15*(tmp_235 + tmp_34);
      real_t tmp_237 = tmp_0*(tmp_22*tmp_234 + tmp_232*tmp_5 + tmp_236*tmp_29 - 1.0/4.0) + tmp_1*(tmp_232*tmp_36 + tmp_234*tmp_37 + tmp_236*tmp_38 - 1.0/4.0) + tmp_3*(tmp_232*tmp_39 + tmp_234*tmp_40 + tmp_236*tmp_41 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_72;
      real_t tmp_239 = tmp_233 + tmp_74;
      real_t tmp_240 = tmp_235 + tmp_76;
      real_t tmp_241 = tmp_238*tmp_66 + tmp_239*tmp_63 + tmp_240*tmp_60;
      real_t tmp_242 = tmp_238*tmp_65 + tmp_239*tmp_62 + tmp_240*tmp_59;
      real_t tmp_243 = tmp_238*tmp_64 + tmp_239*tmp_61 + tmp_240*tmp_58;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_248 = tmp_15*(tmp_20 + tmp_247);
      real_t tmp_249 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_250 = tmp_15*(tmp_249 + tmp_27);
      real_t tmp_251 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_252 = tmp_15*(tmp_251 + tmp_34);
      real_t tmp_253 = tmp_0*(tmp_22*tmp_250 + tmp_248*tmp_5 + tmp_252*tmp_29 - 1.0/4.0) + tmp_1*(tmp_248*tmp_36 + tmp_250*tmp_37 + tmp_252*tmp_38 - 1.0/4.0) + tmp_3*(tmp_248*tmp_39 + tmp_250*tmp_40 + tmp_252*tmp_41 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_72;
      real_t tmp_255 = tmp_249 + tmp_74;
      real_t tmp_256 = tmp_251 + tmp_76;
      real_t tmp_257 = tmp_254*tmp_66 + tmp_255*tmp_63 + tmp_256*tmp_60;
      real_t tmp_258 = tmp_254*tmp_65 + tmp_255*tmp_62 + tmp_256*tmp_59;
      real_t tmp_259 = tmp_254*tmp_64 + tmp_255*tmp_61 + tmp_256*tmp_58;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_264 = tmp_15*(tmp_20 + tmp_263);
      real_t tmp_265 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_27);
      real_t tmp_267 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_268 = tmp_15*(tmp_267 + tmp_34);
      real_t tmp_269 = tmp_0*(tmp_22*tmp_266 + tmp_264*tmp_5 + tmp_268*tmp_29 - 1.0/4.0) + tmp_1*(tmp_264*tmp_36 + tmp_266*tmp_37 + tmp_268*tmp_38 - 1.0/4.0) + tmp_3*(tmp_264*tmp_39 + tmp_266*tmp_40 + tmp_268*tmp_41 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_72;
      real_t tmp_271 = tmp_265 + tmp_74;
      real_t tmp_272 = tmp_267 + tmp_76;
      real_t tmp_273 = tmp_270*tmp_66 + tmp_271*tmp_63 + tmp_272*tmp_60;
      real_t tmp_274 = tmp_270*tmp_65 + tmp_271*tmp_62 + tmp_272*tmp_59;
      real_t tmp_275 = tmp_270*tmp_64 + tmp_271*tmp_61 + tmp_272*tmp_58;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_280 = tmp_15*(tmp_20 + tmp_279);
      real_t tmp_281 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_282 = tmp_15*(tmp_27 + tmp_281);
      real_t tmp_283 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_284 = tmp_15*(tmp_283 + tmp_34);
      real_t tmp_285 = tmp_0*(tmp_22*tmp_282 + tmp_280*tmp_5 + tmp_284*tmp_29 - 1.0/4.0) + tmp_1*(tmp_280*tmp_36 + tmp_282*tmp_37 + tmp_284*tmp_38 - 1.0/4.0) + tmp_3*(tmp_280*tmp_39 + tmp_282*tmp_40 + tmp_284*tmp_41 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_72;
      real_t tmp_287 = tmp_281 + tmp_74;
      real_t tmp_288 = tmp_283 + tmp_76;
      real_t tmp_289 = tmp_286*tmp_66 + tmp_287*tmp_63 + tmp_288*tmp_60;
      real_t tmp_290 = tmp_286*tmp_65 + tmp_287*tmp_62 + tmp_288*tmp_59;
      real_t tmp_291 = tmp_286*tmp_64 + tmp_287*tmp_61 + tmp_288*tmp_58;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_296 = tmp_15*(tmp_20 + tmp_295);
      real_t tmp_297 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_298 = tmp_15*(tmp_27 + tmp_297);
      real_t tmp_299 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_300 = tmp_15*(tmp_299 + tmp_34);
      real_t tmp_301 = tmp_0*(tmp_22*tmp_298 + tmp_29*tmp_300 + tmp_296*tmp_5 - 1.0/4.0) + tmp_1*(tmp_296*tmp_36 + tmp_298*tmp_37 + tmp_300*tmp_38 - 1.0/4.0) + tmp_3*(tmp_296*tmp_39 + tmp_298*tmp_40 + tmp_300*tmp_41 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_72;
      real_t tmp_303 = tmp_297 + tmp_74;
      real_t tmp_304 = tmp_299 + tmp_76;
      real_t tmp_305 = tmp_302*tmp_66 + tmp_303*tmp_63 + tmp_304*tmp_60;
      real_t tmp_306 = tmp_302*tmp_65 + tmp_303*tmp_62 + tmp_304*tmp_59;
      real_t tmp_307 = tmp_302*tmp_64 + tmp_303*tmp_61 + tmp_304*tmp_58;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_312 = tmp_15*(tmp_20 + tmp_311);
      real_t tmp_313 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_314 = tmp_15*(tmp_27 + tmp_313);
      real_t tmp_315 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_316 = tmp_15*(tmp_315 + tmp_34);
      real_t tmp_317 = tmp_0*(tmp_22*tmp_314 + tmp_29*tmp_316 + tmp_312*tmp_5 - 1.0/4.0) + tmp_1*(tmp_312*tmp_36 + tmp_314*tmp_37 + tmp_316*tmp_38 - 1.0/4.0) + tmp_3*(tmp_312*tmp_39 + tmp_314*tmp_40 + tmp_316*tmp_41 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_72;
      real_t tmp_319 = tmp_313 + tmp_74;
      real_t tmp_320 = tmp_315 + tmp_76;
      real_t tmp_321 = tmp_318*tmp_66 + tmp_319*tmp_63 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_318*tmp_65 + tmp_319*tmp_62 + tmp_320*tmp_59;
      real_t tmp_323 = tmp_318*tmp_64 + tmp_319*tmp_61 + tmp_320*tmp_58;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_328 = tmp_15*(tmp_20 + tmp_327);
      real_t tmp_329 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_330 = tmp_15*(tmp_27 + tmp_329);
      real_t tmp_331 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_332 = tmp_15*(tmp_331 + tmp_34);
      real_t tmp_333 = tmp_0*(tmp_22*tmp_330 + tmp_29*tmp_332 + tmp_328*tmp_5 - 1.0/4.0) + tmp_1*(tmp_328*tmp_36 + tmp_330*tmp_37 + tmp_332*tmp_38 - 1.0/4.0) + tmp_3*(tmp_328*tmp_39 + tmp_330*tmp_40 + tmp_332*tmp_41 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_72;
      real_t tmp_335 = tmp_329 + tmp_74;
      real_t tmp_336 = tmp_331 + tmp_76;
      real_t tmp_337 = tmp_334*tmp_66 + tmp_335*tmp_63 + tmp_336*tmp_60;
      real_t tmp_338 = tmp_334*tmp_65 + tmp_335*tmp_62 + tmp_336*tmp_59;
      real_t tmp_339 = tmp_334*tmp_64 + tmp_335*tmp_61 + tmp_336*tmp_58;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_344 = tmp_15*(tmp_20 + tmp_343);
      real_t tmp_345 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_346 = tmp_15*(tmp_27 + tmp_345);
      real_t tmp_347 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_348 = tmp_15*(tmp_34 + tmp_347);
      real_t tmp_349 = tmp_0*(tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_5 - 1.0/4.0) + tmp_1*(tmp_344*tmp_36 + tmp_346*tmp_37 + tmp_348*tmp_38 - 1.0/4.0) + tmp_3*(tmp_344*tmp_39 + tmp_346*tmp_40 + tmp_348*tmp_41 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_72;
      real_t tmp_351 = tmp_345 + tmp_74;
      real_t tmp_352 = tmp_347 + tmp_76;
      real_t tmp_353 = tmp_350*tmp_66 + tmp_351*tmp_63 + tmp_352*tmp_60;
      real_t tmp_354 = tmp_350*tmp_65 + tmp_351*tmp_62 + tmp_352*tmp_59;
      real_t tmp_355 = tmp_350*tmp_64 + tmp_351*tmp_61 + tmp_352*tmp_58;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_360 = tmp_15*(tmp_20 + tmp_359);
      real_t tmp_361 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_362 = tmp_15*(tmp_27 + tmp_361);
      real_t tmp_363 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_364 = tmp_15*(tmp_34 + tmp_363);
      real_t tmp_365 = tmp_0*(tmp_22*tmp_362 + tmp_29*tmp_364 + tmp_360*tmp_5 - 1.0/4.0) + tmp_1*(tmp_36*tmp_360 + tmp_362*tmp_37 + tmp_364*tmp_38 - 1.0/4.0) + tmp_3*(tmp_360*tmp_39 + tmp_362*tmp_40 + tmp_364*tmp_41 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_72;
      real_t tmp_367 = tmp_361 + tmp_74;
      real_t tmp_368 = tmp_363 + tmp_76;
      real_t tmp_369 = tmp_366*tmp_66 + tmp_367*tmp_63 + tmp_368*tmp_60;
      real_t tmp_370 = tmp_366*tmp_65 + tmp_367*tmp_62 + tmp_368*tmp_59;
      real_t tmp_371 = tmp_366*tmp_64 + tmp_367*tmp_61 + tmp_368*tmp_58;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_0*(tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_5 - 1.0/4.0) + tmp_1*(tmp_36*tmp_376 + tmp_37*tmp_378 + tmp_38*tmp_380 - 1.0/4.0) + tmp_3*(tmp_376*tmp_39 + tmp_378*tmp_40 + tmp_380*tmp_41 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_72;
      real_t tmp_383 = tmp_377 + tmp_74;
      real_t tmp_384 = tmp_379 + tmp_76;
      real_t tmp_385 = tmp_382*tmp_66 + tmp_383*tmp_63 + tmp_384*tmp_60;
      real_t tmp_386 = tmp_382*tmp_65 + tmp_383*tmp_62 + tmp_384*tmp_59;
      real_t tmp_387 = tmp_382*tmp_64 + tmp_383*tmp_61 + tmp_384*tmp_58;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_392 = tmp_15*(tmp_20 + tmp_391);
      real_t tmp_393 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_394 = tmp_15*(tmp_27 + tmp_393);
      real_t tmp_395 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_396 = tmp_15*(tmp_34 + tmp_395);
      real_t tmp_397 = tmp_0*(tmp_22*tmp_394 + tmp_29*tmp_396 + tmp_392*tmp_5 - 1.0/4.0) + tmp_1*(tmp_36*tmp_392 + tmp_37*tmp_394 + tmp_38*tmp_396 - 1.0/4.0) + tmp_3*(tmp_39*tmp_392 + tmp_394*tmp_40 + tmp_396*tmp_41 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_72;
      real_t tmp_399 = tmp_393 + tmp_74;
      real_t tmp_400 = tmp_395 + tmp_76;
      real_t tmp_401 = tmp_398*tmp_66 + tmp_399*tmp_63 + tmp_400*tmp_60;
      real_t tmp_402 = tmp_398*tmp_65 + tmp_399*tmp_62 + tmp_400*tmp_59;
      real_t tmp_403 = tmp_398*tmp_64 + tmp_399*tmp_61 + tmp_400*tmp_58;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_408 = 0.5*p_affine_13_0*tmp_59 + 0.5*p_affine_13_1*tmp_62 + 0.5*p_affine_13_2*tmp_65;
      real_t tmp_409 = 0.5*p_affine_13_0*tmp_58 + 0.5*p_affine_13_1*tmp_61 + 0.5*p_affine_13_2*tmp_64;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 + 0.5*tmp_100*tmp_71 - tmp_67*tmp_93) + tmp_118*(-tmp_109*tmp_67 - tmp_116*tmp_117 + 0.5*tmp_116*tmp_71) + tmp_134*(-tmp_125*tmp_67 - tmp_132*tmp_133 + 0.5*tmp_132*tmp_71) + tmp_150*(-tmp_141*tmp_67 - tmp_148*tmp_149 + 0.5*tmp_148*tmp_71) + tmp_166*(-tmp_157*tmp_67 - tmp_164*tmp_165 + 0.5*tmp_164*tmp_71) + tmp_182*(-tmp_173*tmp_67 - tmp_180*tmp_181 + 0.5*tmp_180*tmp_71) + tmp_198*(-tmp_189*tmp_67 - tmp_196*tmp_197 + 0.5*tmp_196*tmp_71) + tmp_214*(-tmp_205*tmp_67 - tmp_212*tmp_213 + 0.5*tmp_212*tmp_71) + tmp_230*(-tmp_221*tmp_67 - tmp_228*tmp_229 + 0.5*tmp_228*tmp_71) + tmp_246*(-tmp_237*tmp_67 - tmp_244*tmp_245 + 0.5*tmp_244*tmp_71) + tmp_262*(-tmp_253*tmp_67 - tmp_260*tmp_261 + 0.5*tmp_260*tmp_71) + tmp_278*(-tmp_269*tmp_67 - tmp_276*tmp_277 + 0.5*tmp_276*tmp_71) + tmp_294*(-tmp_285*tmp_67 - tmp_292*tmp_293 + 0.5*tmp_292*tmp_71) + tmp_310*(-tmp_301*tmp_67 - tmp_308*tmp_309 + 0.5*tmp_308*tmp_71) + tmp_326*(-tmp_317*tmp_67 - tmp_324*tmp_325 + 0.5*tmp_324*tmp_71) + tmp_342*(-tmp_333*tmp_67 - tmp_340*tmp_341 + 0.5*tmp_340*tmp_71) + tmp_358*(-tmp_349*tmp_67 - tmp_356*tmp_357 + 0.5*tmp_356*tmp_71) + tmp_374*(-tmp_365*tmp_67 - tmp_372*tmp_373 + 0.5*tmp_372*tmp_71) + tmp_390*(-tmp_381*tmp_67 - tmp_388*tmp_389 + 0.5*tmp_388*tmp_71) + tmp_406*(-tmp_397*tmp_67 - tmp_404*tmp_405 + 0.5*tmp_404*tmp_71) + tmp_86*(-tmp_42*tmp_67 + 0.5*tmp_71*tmp_81 - tmp_81*tmp_84);
      real_t a_0_1 = tmp_102*(-tmp_101*tmp_97 - tmp_407*tmp_93 + 0.5*tmp_71*tmp_97) + tmp_118*(-tmp_109*tmp_407 - tmp_113*tmp_117 + 0.5*tmp_113*tmp_71) + tmp_134*(-tmp_125*tmp_407 - tmp_129*tmp_133 + 0.5*tmp_129*tmp_71) + tmp_150*(-tmp_141*tmp_407 - tmp_145*tmp_149 + 0.5*tmp_145*tmp_71) + tmp_166*(-tmp_157*tmp_407 - tmp_161*tmp_165 + 0.5*tmp_161*tmp_71) + tmp_182*(-tmp_173*tmp_407 - tmp_177*tmp_181 + 0.5*tmp_177*tmp_71) + tmp_198*(-tmp_189*tmp_407 - tmp_193*tmp_197 + 0.5*tmp_193*tmp_71) + tmp_214*(-tmp_205*tmp_407 - tmp_209*tmp_213 + 0.5*tmp_209*tmp_71) + tmp_230*(-tmp_221*tmp_407 - tmp_225*tmp_229 + 0.5*tmp_225*tmp_71) + tmp_246*(-tmp_237*tmp_407 - tmp_241*tmp_245 + 0.5*tmp_241*tmp_71) + tmp_262*(-tmp_253*tmp_407 - tmp_257*tmp_261 + 0.5*tmp_257*tmp_71) + tmp_278*(-tmp_269*tmp_407 - tmp_273*tmp_277 + 0.5*tmp_273*tmp_71) + tmp_294*(-tmp_285*tmp_407 - tmp_289*tmp_293 + 0.5*tmp_289*tmp_71) + tmp_310*(-tmp_301*tmp_407 - tmp_305*tmp_309 + 0.5*tmp_305*tmp_71) + tmp_326*(-tmp_317*tmp_407 - tmp_321*tmp_325 + 0.5*tmp_321*tmp_71) + tmp_342*(-tmp_333*tmp_407 - tmp_337*tmp_341 + 0.5*tmp_337*tmp_71) + tmp_358*(-tmp_349*tmp_407 - tmp_353*tmp_357 + 0.5*tmp_353*tmp_71) + tmp_374*(-tmp_365*tmp_407 - tmp_369*tmp_373 + 0.5*tmp_369*tmp_71) + tmp_390*(-tmp_381*tmp_407 - tmp_385*tmp_389 + 0.5*tmp_385*tmp_71) + tmp_406*(-tmp_397*tmp_407 - tmp_401*tmp_405 + 0.5*tmp_401*tmp_71) + tmp_86*(-tmp_407*tmp_42 + 0.5*tmp_71*tmp_78 - tmp_78*tmp_84);
      real_t a_0_2 = tmp_102*(-tmp_101*tmp_98 - tmp_408*tmp_93 + 0.5*tmp_71*tmp_98) + tmp_118*(-tmp_109*tmp_408 - tmp_114*tmp_117 + 0.5*tmp_114*tmp_71) + tmp_134*(-tmp_125*tmp_408 - tmp_130*tmp_133 + 0.5*tmp_130*tmp_71) + tmp_150*(-tmp_141*tmp_408 - tmp_146*tmp_149 + 0.5*tmp_146*tmp_71) + tmp_166*(-tmp_157*tmp_408 - tmp_162*tmp_165 + 0.5*tmp_162*tmp_71) + tmp_182*(-tmp_173*tmp_408 - tmp_178*tmp_181 + 0.5*tmp_178*tmp_71) + tmp_198*(-tmp_189*tmp_408 - tmp_194*tmp_197 + 0.5*tmp_194*tmp_71) + tmp_214*(-tmp_205*tmp_408 - tmp_210*tmp_213 + 0.5*tmp_210*tmp_71) + tmp_230*(-tmp_221*tmp_408 - tmp_226*tmp_229 + 0.5*tmp_226*tmp_71) + tmp_246*(-tmp_237*tmp_408 - tmp_242*tmp_245 + 0.5*tmp_242*tmp_71) + tmp_262*(-tmp_253*tmp_408 - tmp_258*tmp_261 + 0.5*tmp_258*tmp_71) + tmp_278*(-tmp_269*tmp_408 - tmp_274*tmp_277 + 0.5*tmp_274*tmp_71) + tmp_294*(-tmp_285*tmp_408 - tmp_290*tmp_293 + 0.5*tmp_290*tmp_71) + tmp_310*(-tmp_301*tmp_408 - tmp_306*tmp_309 + 0.5*tmp_306*tmp_71) + tmp_326*(-tmp_317*tmp_408 - tmp_322*tmp_325 + 0.5*tmp_322*tmp_71) + tmp_342*(-tmp_333*tmp_408 - tmp_338*tmp_341 + 0.5*tmp_338*tmp_71) + tmp_358*(-tmp_349*tmp_408 - tmp_354*tmp_357 + 0.5*tmp_354*tmp_71) + tmp_374*(-tmp_365*tmp_408 - tmp_370*tmp_373 + 0.5*tmp_370*tmp_71) + tmp_390*(-tmp_381*tmp_408 - tmp_386*tmp_389 + 0.5*tmp_386*tmp_71) + tmp_406*(-tmp_397*tmp_408 - tmp_402*tmp_405 + 0.5*tmp_402*tmp_71) + tmp_86*(-tmp_408*tmp_42 + 0.5*tmp_71*tmp_79 - tmp_79*tmp_84);
      real_t a_0_3 = tmp_102*(-tmp_101*tmp_99 - tmp_409*tmp_93 + 0.5*tmp_71*tmp_99) + tmp_118*(-tmp_109*tmp_409 - tmp_115*tmp_117 + 0.5*tmp_115*tmp_71) + tmp_134*(-tmp_125*tmp_409 - tmp_131*tmp_133 + 0.5*tmp_131*tmp_71) + tmp_150*(-tmp_141*tmp_409 - tmp_147*tmp_149 + 0.5*tmp_147*tmp_71) + tmp_166*(-tmp_157*tmp_409 - tmp_163*tmp_165 + 0.5*tmp_163*tmp_71) + tmp_182*(-tmp_173*tmp_409 - tmp_179*tmp_181 + 0.5*tmp_179*tmp_71) + tmp_198*(-tmp_189*tmp_409 - tmp_195*tmp_197 + 0.5*tmp_195*tmp_71) + tmp_214*(-tmp_205*tmp_409 - tmp_211*tmp_213 + 0.5*tmp_211*tmp_71) + tmp_230*(-tmp_221*tmp_409 - tmp_227*tmp_229 + 0.5*tmp_227*tmp_71) + tmp_246*(-tmp_237*tmp_409 - tmp_243*tmp_245 + 0.5*tmp_243*tmp_71) + tmp_262*(-tmp_253*tmp_409 - tmp_259*tmp_261 + 0.5*tmp_259*tmp_71) + tmp_278*(-tmp_269*tmp_409 - tmp_275*tmp_277 + 0.5*tmp_275*tmp_71) + tmp_294*(-tmp_285*tmp_409 - tmp_291*tmp_293 + 0.5*tmp_291*tmp_71) + tmp_310*(-tmp_301*tmp_409 - tmp_307*tmp_309 + 0.5*tmp_307*tmp_71) + tmp_326*(-tmp_317*tmp_409 - tmp_323*tmp_325 + 0.5*tmp_323*tmp_71) + tmp_342*(-tmp_333*tmp_409 - tmp_339*tmp_341 + 0.5*tmp_339*tmp_71) + tmp_358*(-tmp_349*tmp_409 - tmp_355*tmp_357 + 0.5*tmp_355*tmp_71) + tmp_374*(-tmp_365*tmp_409 - tmp_371*tmp_373 + 0.5*tmp_371*tmp_71) + tmp_390*(-tmp_381*tmp_409 - tmp_387*tmp_389 + 0.5*tmp_387*tmp_71) + tmp_406*(-tmp_397*tmp_409 - tmp_403*tmp_405 + 0.5*tmp_403*tmp_71) + tmp_86*(-tmp_409*tmp_42 + 0.5*tmp_71*tmp_80 - tmp_80*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_11*(tmp_42 - 1.0/4.0) + tmp_6*(tmp_40 - 1.0/4.0) + tmp_9*(tmp_41 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_11*tmp_15 + tmp_16*tmp_9 + tmp_17*tmp_6) + p_affine_13_1*(tmp_11*tmp_18 + tmp_19*tmp_9 + tmp_20*tmp_6) + p_affine_13_2*(tmp_11*tmp_21 + tmp_22*tmp_9 + tmp_23*tmp_6);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_11*(tmp_55 - 1.0/4.0) + tmp_6*(tmp_53 - 1.0/4.0) + tmp_9*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_11*(tmp_64 - 1.0/4.0) + tmp_6*(tmp_62 - 1.0/4.0) + tmp_9*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_11*(tmp_73 - 1.0/4.0) + tmp_6*(tmp_71 - 1.0/4.0) + tmp_9*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_11*(tmp_82 - 1.0/4.0) + tmp_6*(tmp_80 - 1.0/4.0) + tmp_9*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_11*(tmp_91 - 1.0/4.0) + tmp_6*(tmp_89 - 1.0/4.0) + tmp_9*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_11*(tmp_100 - 1.0/4.0) + tmp_6*(tmp_98 - 1.0/4.0) + tmp_9*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_11*(tmp_109 - 1.0/4.0) + tmp_6*(tmp_107 - 1.0/4.0) + tmp_9*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_11*(tmp_118 - 1.0/4.0) + tmp_6*(tmp_116 - 1.0/4.0) + tmp_9*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_11*(tmp_127 - 1.0/4.0) + tmp_6*(tmp_125 - 1.0/4.0) + tmp_9*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_11*(tmp_136 - 1.0/4.0) + tmp_6*(tmp_134 - 1.0/4.0) + tmp_9*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_11*(tmp_145 - 1.0/4.0) + tmp_6*(tmp_143 - 1.0/4.0) + tmp_9*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_11*(tmp_154 - 1.0/4.0) + tmp_6*(tmp_152 - 1.0/4.0) + tmp_9*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_11*(tmp_163 - 1.0/4.0) + tmp_6*(tmp_161 - 1.0/4.0) + tmp_9*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_11*(tmp_172 - 1.0/4.0) + tmp_6*(tmp_170 - 1.0/4.0) + tmp_9*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_11*(tmp_181 - 1.0/4.0) + tmp_6*(tmp_179 - 1.0/4.0) + tmp_9*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_11*(tmp_190 - 1.0/4.0) + tmp_6*(tmp_188 - 1.0/4.0) + tmp_9*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_11*(tmp_199 - 1.0/4.0) + tmp_6*(tmp_197 - 1.0/4.0) + tmp_9*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_11*(tmp_208 - 1.0/4.0) + tmp_6*(tmp_206 - 1.0/4.0) + tmp_9*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_11*(tmp_217 - 1.0/4.0) + tmp_6*(tmp_215 - 1.0/4.0) + tmp_9*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_11*(tmp_226 - 1.0/4.0) + tmp_6*(tmp_224 - 1.0/4.0) + tmp_9*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_EP1_1 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_EP1_1()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = -tmp_4;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_3*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = tmp_2*tmp_6 + tmp_5*tmp_8;
      real_t tmp_10 = tmp_1*tmp_6;
      real_t tmp_11 = tmp_4*tmp_6;
      real_t tmp_12 = tmp_1*tmp_11 + tmp_10*tmp_5;
      real_t tmp_13 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_14 = tmp_13*(tmp_12*(-tmp_10 - tmp_11) + tmp_9*(-tmp_7 - tmp_8));
      real_t tmp_15 = tmp_13*(tmp_10*tmp_12 + tmp_8*tmp_9);
      real_t tmp_16 = tmp_13*(tmp_11*tmp_12 + tmp_7*tmp_9);
      real_t a_0_0 = 0.5*tmp_14;
      real_t a_0_1 = 0.5*tmp_15;
      real_t a_0_2 = 0.5*tmp_16;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_4 = 0.046910077030668018*tmp_2 + tmp_3;
      real_t tmp_5 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_8 = tmp_6*tmp_7;
      real_t tmp_9 = 1.0 / (tmp_1*tmp_5 + tmp_8);
      real_t tmp_10 = tmp_5*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = 0.046910077030668018*tmp_11 + tmp_12;
      real_t tmp_14 = tmp_7*tmp_9;
      real_t tmp_15 = tmp_10*tmp_4 + tmp_13*tmp_14;
      real_t tmp_16 = tmp_6*tmp_9;
      real_t tmp_17 = tmp_0*tmp_9;
      real_t tmp_18 = tmp_13*tmp_17 + tmp_16*tmp_4;
      real_t tmp_19 = tmp_1*(tmp_15 - 1.0/3.0) + tmp_7*(tmp_18 - 1.0/3.0);
      real_t tmp_20 = 0.5*p_affine_10_0*(-tmp_14 - tmp_17) + 0.5*p_affine_10_1*(-tmp_10 - tmp_16);
      real_t tmp_21 = -tmp_15 - tmp_18 + 1;
      real_t tmp_22 = 0.5*p_affine_10_0*(tmp_1*tmp_14 + tmp_17*tmp_7) + 0.5*p_affine_10_1*(tmp_1*tmp_10 + tmp_8*tmp_9);
      real_t tmp_23 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_2*tmp_2), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_2 + tmp_3;
      real_t tmp_27 = 0.23076534494715845*tmp_11 + tmp_12;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_14*tmp_27;
      real_t tmp_29 = tmp_16*tmp_26 + tmp_17*tmp_27;
      real_t tmp_30 = tmp_1*(tmp_28 - 1.0/3.0) + tmp_7*(tmp_29 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_2 + tmp_3;
      real_t tmp_34 = 0.5*tmp_11 + tmp_12;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_14*tmp_34;
      real_t tmp_36 = tmp_16*tmp_33 + tmp_17*tmp_34;
      real_t tmp_37 = tmp_1*(tmp_35 - 1.0/3.0) + tmp_7*(tmp_36 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_2 + tmp_3;
      real_t tmp_41 = 0.7692346550528415*tmp_11 + tmp_12;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_14*tmp_41;
      real_t tmp_43 = tmp_16*tmp_40 + tmp_17*tmp_41;
      real_t tmp_44 = tmp_1*(tmp_42 - 1.0/3.0) + tmp_7*(tmp_43 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_2 + tmp_3;
      real_t tmp_48 = 0.95308992296933193*tmp_11 + tmp_12;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_14*tmp_48;
      real_t tmp_50 = tmp_16*tmp_47 + tmp_17*tmp_48;
      real_t tmp_51 = tmp_1*(tmp_49 - 1.0/3.0) + tmp_7*(tmp_50 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = 0.5*p_affine_10_0*tmp_14 + 0.5*p_affine_10_1*tmp_10;
      real_t tmp_55 = 0.5*p_affine_10_0*tmp_17 + 0.5*p_affine_10_1*tmp_16;
      real_t a_0_0 = tmp_25*(-tmp_19*tmp_20 + 3*tmp_19*tmp_21*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_20*tmp_30 - tmp_22*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_20*tmp_37 - tmp_22*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_20*tmp_44 - tmp_22*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_20*tmp_51 - tmp_22*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_0_1 = tmp_25*(3*tmp_15*tmp_19*tmp_24 - tmp_15*tmp_22 - tmp_19*tmp_54) + tmp_32*(-tmp_22*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_22*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_22*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_22*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_0_2 = tmp_25*(3*tmp_18*tmp_19*tmp_24 - tmp_18*tmp_22 - tmp_19*tmp_55) + tmp_32*(-tmp_22*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_22*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_22*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_22*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = -p_affine_0_1;
      real_t tmp_3 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_4 = p_affine_6_1 + 0.046910077030668018*tmp_3;
      real_t tmp_5 = tmp_2 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_8 = tmp_6*tmp_7;
      real_t tmp_9 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_10 = 1.0 / (tmp_1*tmp_9 + tmp_8);
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = -p_affine_0_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_12 + tmp_14;
      real_t tmp_16 = tmp_10*tmp_7;
      real_t tmp_17 = tmp_10*tmp_6;
      real_t tmp_18 = tmp_0*tmp_10;
      real_t tmp_19 = tmp_1*(tmp_11*tmp_5 + tmp_15*tmp_16 - 1.0/3.0) + tmp_7*(tmp_15*tmp_18 + tmp_17*tmp_5 - 1.0/3.0);
      real_t tmp_20 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_21 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_22 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_23 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_24 = 1.0 / (tmp_20*tmp_21 - tmp_22*tmp_23);
      real_t tmp_25 = tmp_20*tmp_24;
      real_t tmp_26 = tmp_23*tmp_24;
      real_t tmp_27 = tmp_21*tmp_24;
      real_t tmp_28 = tmp_22*tmp_24;
      real_t tmp_29 = 0.5*p_affine_10_0*(-tmp_25 - tmp_26) + 0.5*p_affine_10_1*(-tmp_27 - tmp_28);
      real_t tmp_30 = p_affine_10_0*(tmp_0*tmp_16 + tmp_1*tmp_16) + p_affine_10_1*(tmp_1*tmp_11 + tmp_10*tmp_8);
      real_t tmp_31 = -p_affine_3_1;
      real_t tmp_32 = tmp_31 + tmp_4;
      real_t tmp_33 = -p_affine_3_0;
      real_t tmp_34 = tmp_14 + tmp_33;
      real_t tmp_35 = tmp_25*tmp_34 + tmp_28*tmp_32;
      real_t tmp_36 = tmp_26*tmp_34 + tmp_27*tmp_32;
      real_t tmp_37 = -tmp_35 - tmp_36 + 1;
      real_t tmp_38 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_3*tmp_3), 1.0/2.0));
      real_t tmp_39 = 3/tmp_38;
      real_t tmp_40 = tmp_19*tmp_39;
      real_t tmp_41 = 0.11846344252809471*tmp_38;
      real_t tmp_42 = p_affine_6_1 + 0.23076534494715845*tmp_3;
      real_t tmp_43 = tmp_2 + tmp_42;
      real_t tmp_44 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_45 = tmp_12 + tmp_44;
      real_t tmp_46 = tmp_1*(tmp_11*tmp_43 + tmp_16*tmp_45 - 1.0/3.0) + tmp_7*(tmp_17*tmp_43 + tmp_18*tmp_45 - 1.0/3.0);
      real_t tmp_47 = tmp_31 + tmp_42;
      real_t tmp_48 = tmp_33 + tmp_44;
      real_t tmp_49 = tmp_25*tmp_48 + tmp_28*tmp_47;
      real_t tmp_50 = tmp_26*tmp_48 + tmp_27*tmp_47;
      real_t tmp_51 = -tmp_49 - tmp_50 + 1;
      real_t tmp_52 = tmp_39*tmp_46;
      real_t tmp_53 = 0.2393143352496831*tmp_38;
      real_t tmp_54 = p_affine_6_1 + 0.5*tmp_3;
      real_t tmp_55 = tmp_2 + tmp_54;
      real_t tmp_56 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_57 = tmp_12 + tmp_56;
      real_t tmp_58 = tmp_1*(tmp_11*tmp_55 + tmp_16*tmp_57 - 1.0/3.0) + tmp_7*(tmp_17*tmp_55 + tmp_18*tmp_57 - 1.0/3.0);
      real_t tmp_59 = tmp_31 + tmp_54;
      real_t tmp_60 = tmp_33 + tmp_56;
      real_t tmp_61 = tmp_25*tmp_60 + tmp_28*tmp_59;
      real_t tmp_62 = tmp_26*tmp_60 + tmp_27*tmp_59;
      real_t tmp_63 = -tmp_61 - tmp_62 + 1;
      real_t tmp_64 = tmp_39*tmp_58;
      real_t tmp_65 = 0.2844444444444445*tmp_38;
      real_t tmp_66 = p_affine_6_1 + 0.7692346550528415*tmp_3;
      real_t tmp_67 = tmp_2 + tmp_66;
      real_t tmp_68 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_69 = tmp_12 + tmp_68;
      real_t tmp_70 = tmp_1*(tmp_11*tmp_67 + tmp_16*tmp_69 - 1.0/3.0) + tmp_7*(tmp_17*tmp_67 + tmp_18*tmp_69 - 1.0/3.0);
      real_t tmp_71 = tmp_31 + tmp_66;
      real_t tmp_72 = tmp_33 + tmp_68;
      real_t tmp_73 = tmp_25*tmp_72 + tmp_28*tmp_71;
      real_t tmp_74 = tmp_26*tmp_72 + tmp_27*tmp_71;
      real_t tmp_75 = -tmp_73 - tmp_74 + 1;
      real_t tmp_76 = tmp_39*tmp_70;
      real_t tmp_77 = 0.2393143352496831*tmp_38;
      real_t tmp_78 = p_affine_6_1 + 0.95308992296933193*tmp_3;
      real_t tmp_79 = tmp_2 + tmp_78;
      real_t tmp_80 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_81 = tmp_12 + tmp_80;
      real_t tmp_82 = tmp_1*(tmp_11*tmp_79 + tmp_16*tmp_81 - 1.0/3.0) + tmp_7*(tmp_17*tmp_79 + tmp_18*tmp_81 - 1.0/3.0);
      real_t tmp_83 = tmp_31 + tmp_78;
      real_t tmp_84 = tmp_33 + tmp_80;
      real_t tmp_85 = tmp_25*tmp_84 + tmp_28*tmp_83;
      real_t tmp_86 = tmp_26*tmp_84 + tmp_27*tmp_83;
      real_t tmp_87 = -tmp_85 - tmp_86 + 1;
      real_t tmp_88 = tmp_39*tmp_82;
      real_t tmp_89 = 0.11846344252809471*tmp_38;
      real_t tmp_90 = 0.5*p_affine_10_0*tmp_25 + 0.5*p_affine_10_1*tmp_28;
      real_t tmp_91 = 0.5*p_affine_10_0*tmp_26 + 0.5*p_affine_10_1*tmp_27;
      real_t a_0_0 = tmp_41*(-tmp_19*tmp_29 + 0.5*tmp_30*tmp_37 - tmp_37*tmp_40) + tmp_53*(-tmp_29*tmp_46 + 0.5*tmp_30*tmp_51 - tmp_51*tmp_52) + tmp_65*(-tmp_29*tmp_58 + 0.5*tmp_30*tmp_63 - tmp_63*tmp_64) + tmp_77*(-tmp_29*tmp_70 + 0.5*tmp_30*tmp_75 - tmp_75*tmp_76) + tmp_89*(-tmp_29*tmp_82 + 0.5*tmp_30*tmp_87 - tmp_87*tmp_88);
      real_t a_0_1 = tmp_41*(-tmp_19*tmp_90 + 0.5*tmp_30*tmp_35 - tmp_35*tmp_40) + tmp_53*(0.5*tmp_30*tmp_49 - tmp_46*tmp_90 - tmp_49*tmp_52) + tmp_65*(0.5*tmp_30*tmp_61 - tmp_58*tmp_90 - tmp_61*tmp_64) + tmp_77*(0.5*tmp_30*tmp_73 - tmp_70*tmp_90 - tmp_73*tmp_76) + tmp_89*(0.5*tmp_30*tmp_85 - tmp_82*tmp_90 - tmp_85*tmp_88);
      real_t a_0_2 = tmp_41*(-tmp_19*tmp_91 + 0.5*tmp_30*tmp_36 - tmp_36*tmp_40) + tmp_53*(0.5*tmp_30*tmp_50 - tmp_46*tmp_91 - tmp_50*tmp_52) + tmp_65*(0.5*tmp_30*tmp_62 - tmp_58*tmp_91 - tmp_62*tmp_64) + tmp_77*(0.5*tmp_30*tmp_74 - tmp_70*tmp_91 - tmp_74*tmp_76) + tmp_89*(0.5*tmp_30*tmp_86 - tmp_82*tmp_91 - tmp_86*tmp_88);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = -tmp_4;
      real_t tmp_6 = 1.0 / (tmp_2 + tmp_3*tmp_5);
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_4*tmp_6;
      real_t tmp_9 = tmp_1*tmp_6;
      real_t tmp_10 = tmp_3*tmp_6;
      real_t tmp_11 = p_affine_10_0*(-tmp_7 - tmp_8) + p_affine_10_1*(-tmp_10 - tmp_9);
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_14 = 0.046910077030668018*tmp_12 + tmp_13;
      real_t tmp_15 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_16 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_17 = 0.046910077030668018*tmp_15 + tmp_16;
      real_t tmp_18 = tmp_10*tmp_14 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*tmp_9 + tmp_17*tmp_8;
      real_t tmp_20 = tmp_0*(tmp_19 - 1.0/3.0) + tmp_5*(tmp_18 - 1.0/3.0);
      real_t tmp_21 = p_affine_10_0*(tmp_0*tmp_8 + tmp_5*tmp_7) + p_affine_10_1*(tmp_10*tmp_5 + tmp_2*tmp_6);
      real_t tmp_22 = -tmp_18 - tmp_19 + 1;
      real_t tmp_23 = std::abs(std::pow((tmp_12*tmp_12) + (tmp_15*tmp_15), 1.0/2.0));
      real_t tmp_24 = 1.0 / (tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_23;
      real_t tmp_26 = 0.23076534494715845*tmp_12 + tmp_13;
      real_t tmp_27 = 0.23076534494715845*tmp_15 + tmp_16;
      real_t tmp_28 = tmp_10*tmp_26 + tmp_27*tmp_7;
      real_t tmp_29 = tmp_26*tmp_9 + tmp_27*tmp_8;
      real_t tmp_30 = tmp_0*(tmp_29 - 1.0/3.0) + tmp_5*(tmp_28 - 1.0/3.0);
      real_t tmp_31 = -tmp_28 - tmp_29 + 1;
      real_t tmp_32 = 0.2393143352496831*tmp_23;
      real_t tmp_33 = 0.5*tmp_12 + tmp_13;
      real_t tmp_34 = 0.5*tmp_15 + tmp_16;
      real_t tmp_35 = tmp_10*tmp_33 + tmp_34*tmp_7;
      real_t tmp_36 = tmp_33*tmp_9 + tmp_34*tmp_8;
      real_t tmp_37 = tmp_0*(tmp_36 - 1.0/3.0) + tmp_5*(tmp_35 - 1.0/3.0);
      real_t tmp_38 = -tmp_35 - tmp_36 + 1;
      real_t tmp_39 = 0.2844444444444445*tmp_23;
      real_t tmp_40 = 0.7692346550528415*tmp_12 + tmp_13;
      real_t tmp_41 = 0.7692346550528415*tmp_15 + tmp_16;
      real_t tmp_42 = tmp_10*tmp_40 + tmp_41*tmp_7;
      real_t tmp_43 = tmp_40*tmp_9 + tmp_41*tmp_8;
      real_t tmp_44 = tmp_0*(tmp_43 - 1.0/3.0) + tmp_5*(tmp_42 - 1.0/3.0);
      real_t tmp_45 = -tmp_42 - tmp_43 + 1;
      real_t tmp_46 = 0.2393143352496831*tmp_23;
      real_t tmp_47 = 0.95308992296933193*tmp_12 + tmp_13;
      real_t tmp_48 = 0.95308992296933193*tmp_15 + tmp_16;
      real_t tmp_49 = tmp_10*tmp_47 + tmp_48*tmp_7;
      real_t tmp_50 = tmp_47*tmp_9 + tmp_48*tmp_8;
      real_t tmp_51 = tmp_0*(tmp_50 - 1.0/3.0) + tmp_5*(tmp_49 - 1.0/3.0);
      real_t tmp_52 = -tmp_49 - tmp_50 + 1;
      real_t tmp_53 = 0.11846344252809471*tmp_23;
      real_t tmp_54 = p_affine_10_0*tmp_7 + p_affine_10_1*tmp_10;
      real_t tmp_55 = p_affine_10_0*tmp_8 + p_affine_10_1*tmp_9;
      real_t a_0_0 = tmp_25*(-tmp_11*tmp_20 + 3*tmp_20*tmp_22*tmp_24 - tmp_21*tmp_22) + tmp_32*(-tmp_11*tmp_30 - tmp_21*tmp_31 + 3*tmp_24*tmp_30*tmp_31) + tmp_39*(-tmp_11*tmp_37 - tmp_21*tmp_38 + 3*tmp_24*tmp_37*tmp_38) + tmp_46*(-tmp_11*tmp_44 - tmp_21*tmp_45 + 3*tmp_24*tmp_44*tmp_45) + tmp_53*(-tmp_11*tmp_51 - tmp_21*tmp_52 + 3*tmp_24*tmp_51*tmp_52);
      real_t a_0_1 = tmp_25*(3*tmp_18*tmp_20*tmp_24 - tmp_18*tmp_21 - tmp_20*tmp_54) + tmp_32*(-tmp_21*tmp_28 + 3*tmp_24*tmp_28*tmp_30 - tmp_30*tmp_54) + tmp_39*(-tmp_21*tmp_35 + 3*tmp_24*tmp_35*tmp_37 - tmp_37*tmp_54) + tmp_46*(-tmp_21*tmp_42 + 3*tmp_24*tmp_42*tmp_44 - tmp_44*tmp_54) + tmp_53*(-tmp_21*tmp_49 + 3*tmp_24*tmp_49*tmp_51 - tmp_51*tmp_54);
      real_t a_0_2 = tmp_25*(3*tmp_19*tmp_20*tmp_24 - tmp_19*tmp_21 - tmp_20*tmp_55) + tmp_32*(-tmp_21*tmp_29 + 3*tmp_24*tmp_29*tmp_30 - tmp_30*tmp_55) + tmp_39*(-tmp_21*tmp_36 + 3*tmp_24*tmp_36*tmp_37 - tmp_37*tmp_55) + tmp_46*(-tmp_21*tmp_43 + 3*tmp_24*tmp_43*tmp_44 - tmp_44*tmp_55) + tmp_53*(-tmp_21*tmp_50 + 3*tmp_24*tmp_50*tmp_51 - tmp_51*tmp_55);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_1*tmp_16 + tmp_15*tmp_8 + tmp_17*tmp_4;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_1*tmp_20 + tmp_19*tmp_8 + tmp_21*tmp_4;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_1*tmp_24 + tmp_23*tmp_8 + tmp_25*tmp_4;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_0_1 = 0.1666666666666668*tmp_41;
      real_t a_0_2 = 0.1666666666666668*tmp_42;
      real_t a_0_3 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_11 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_12 = tmp_11*tmp_9;
      real_t tmp_13 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_0*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_0*tmp_11;
      real_t tmp_18 = tmp_13*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_10*tmp_12 - tmp_10*tmp_16 + tmp_13*tmp_6*tmp_7 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_11*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_12 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(tmp_0*tmp_8 - tmp_10*tmp_7);
      real_t tmp_35 = tmp_19*(tmp_10*tmp_11 - tmp_13*tmp_8);
      real_t tmp_36 = tmp_19*(tmp_13*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(-tmp_0*tmp_6 + tmp_10*tmp_9);
      real_t tmp_39 = tmp_19*(-tmp_10*tmp_14 + tmp_13*tmp_6);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_7*(tmp_41 - 1.0/4.0) + tmp_9*(tmp_37 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_36*tmp_9 + tmp_40*tmp_7) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_35*tmp_9 + tmp_39*tmp_7) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_34*tmp_9 + tmp_38*tmp_7);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_7*(tmp_55 - 1.0/4.0) + tmp_9*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_7*(tmp_64 - 1.0/4.0) + tmp_9*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_7*(tmp_73 - 1.0/4.0) + tmp_9*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_7*(tmp_82 - 1.0/4.0) + tmp_9*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_7*(tmp_91 - 1.0/4.0) + tmp_9*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_7*(tmp_100 - 1.0/4.0) + tmp_9*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_7*(tmp_109 - 1.0/4.0) + tmp_9*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_7*(tmp_118 - 1.0/4.0) + tmp_9*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_7*(tmp_127 - 1.0/4.0) + tmp_9*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_7*(tmp_136 - 1.0/4.0) + tmp_9*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_7*(tmp_145 - 1.0/4.0) + tmp_9*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_7*(tmp_154 - 1.0/4.0) + tmp_9*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_7*(tmp_163 - 1.0/4.0) + tmp_9*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_7*(tmp_172 - 1.0/4.0) + tmp_9*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_7*(tmp_181 - 1.0/4.0) + tmp_9*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_7*(tmp_190 - 1.0/4.0) + tmp_9*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_7*(tmp_199 - 1.0/4.0) + tmp_9*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_7*(tmp_208 - 1.0/4.0) + tmp_9*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_7*(tmp_217 - 1.0/4.0) + tmp_9*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_7*(tmp_226 - 1.0/4.0) + tmp_9*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_8;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_37 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_38 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_39 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_40 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_41 = tmp_11 - tmp_14;
      real_t tmp_42 = tmp_0*(tmp_21*tmp_5 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0) + tmp_2*(tmp_21*tmp_39 + tmp_28*tmp_40 + tmp_35*tmp_41 - 1.0/4.0) + tmp_4*(tmp_21*tmp_36 + tmp_28*tmp_37 + tmp_35*tmp_38 - 1.0/4.0);
      real_t tmp_43 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_44 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_45 = tmp_43*tmp_44;
      real_t tmp_46 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_48 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_49 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_50 = tmp_46*tmp_49;
      real_t tmp_51 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_52 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_53 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_54 = tmp_49*tmp_51;
      real_t tmp_55 = tmp_43*tmp_52;
      real_t tmp_56 = tmp_47*tmp_53;
      real_t tmp_57 = 1.0 / (-tmp_44*tmp_54 + tmp_45*tmp_53 - tmp_46*tmp_56 + tmp_47*tmp_51*tmp_52 + tmp_48*tmp_50 - tmp_48*tmp_55);
      real_t tmp_58 = tmp_57*(tmp_45 - tmp_46*tmp_47);
      real_t tmp_59 = tmp_57*(-tmp_43*tmp_48 + tmp_47*tmp_51);
      real_t tmp_60 = tmp_57*(-tmp_44*tmp_51 + tmp_46*tmp_48);
      real_t tmp_61 = tmp_57*(-tmp_44*tmp_49 + tmp_47*tmp_52);
      real_t tmp_62 = tmp_57*(tmp_48*tmp_49 - tmp_56);
      real_t tmp_63 = tmp_57*(tmp_44*tmp_53 - tmp_48*tmp_52);
      real_t tmp_64 = tmp_57*(tmp_50 - tmp_55);
      real_t tmp_65 = tmp_57*(tmp_43*tmp_53 - tmp_54);
      real_t tmp_66 = tmp_57*(-tmp_46*tmp_53 + tmp_51*tmp_52);
      real_t tmp_67 = 0.5*p_affine_13_0*(-tmp_58 - tmp_59 - tmp_60) + 0.5*p_affine_13_1*(-tmp_61 - tmp_62 - tmp_63) + 0.5*p_affine_13_2*(-tmp_64 - tmp_65 - tmp_66);
      real_t tmp_68 = tmp_0*tmp_15;
      real_t tmp_69 = tmp_15*tmp_4;
      real_t tmp_70 = tmp_15*tmp_2;
      real_t tmp_71 = p_affine_13_0*(tmp_29*tmp_68 + tmp_38*tmp_69 + tmp_41*tmp_70) + p_affine_13_1*(tmp_22*tmp_68 + tmp_37*tmp_69 + tmp_40*tmp_70) + p_affine_13_2*(tmp_36*tmp_69 + tmp_39*tmp_70 + tmp_5*tmp_68);
      real_t tmp_72 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_73 = tmp_19 + tmp_72;
      real_t tmp_74 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_75 = tmp_26 + tmp_74;
      real_t tmp_76 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_77 = tmp_33 + tmp_76;
      real_t tmp_78 = tmp_60*tmp_77 + tmp_63*tmp_75 + tmp_66*tmp_73;
      real_t tmp_79 = tmp_59*tmp_77 + tmp_62*tmp_75 + tmp_65*tmp_73;
      real_t tmp_80 = tmp_58*tmp_77 + tmp_61*tmp_75 + tmp_64*tmp_73;
      real_t tmp_81 = -tmp_78 - tmp_79 - tmp_80 + 1;
      real_t tmp_82 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_42*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_88 = tmp_15*(tmp_20 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_90 = tmp_15*(tmp_27 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_92 = tmp_15*(tmp_34 + tmp_91);
      real_t tmp_93 = tmp_0*(tmp_22*tmp_90 + tmp_29*tmp_92 + tmp_5*tmp_88 - 1.0/4.0) + tmp_2*(tmp_39*tmp_88 + tmp_40*tmp_90 + tmp_41*tmp_92 - 1.0/4.0) + tmp_4*(tmp_36*tmp_88 + tmp_37*tmp_90 + tmp_38*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_72 + tmp_87;
      real_t tmp_95 = tmp_74 + tmp_89;
      real_t tmp_96 = tmp_76 + tmp_91;
      real_t tmp_97 = tmp_60*tmp_96 + tmp_63*tmp_95 + tmp_66*tmp_94;
      real_t tmp_98 = tmp_59*tmp_96 + tmp_62*tmp_95 + tmp_65*tmp_94;
      real_t tmp_99 = tmp_58*tmp_96 + tmp_61*tmp_95 + tmp_64*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_104 = tmp_15*(tmp_103 + tmp_20);
      real_t tmp_105 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_106 = tmp_15*(tmp_105 + tmp_27);
      real_t tmp_107 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_108 = tmp_15*(tmp_107 + tmp_34);
      real_t tmp_109 = tmp_0*(tmp_104*tmp_5 + tmp_106*tmp_22 + tmp_108*tmp_29 - 1.0/4.0) + tmp_2*(tmp_104*tmp_39 + tmp_106*tmp_40 + tmp_108*tmp_41 - 1.0/4.0) + tmp_4*(tmp_104*tmp_36 + tmp_106*tmp_37 + tmp_108*tmp_38 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_72;
      real_t tmp_111 = tmp_105 + tmp_74;
      real_t tmp_112 = tmp_107 + tmp_76;
      real_t tmp_113 = tmp_110*tmp_66 + tmp_111*tmp_63 + tmp_112*tmp_60;
      real_t tmp_114 = tmp_110*tmp_65 + tmp_111*tmp_62 + tmp_112*tmp_59;
      real_t tmp_115 = tmp_110*tmp_64 + tmp_111*tmp_61 + tmp_112*tmp_58;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_120 = tmp_15*(tmp_119 + tmp_20);
      real_t tmp_121 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_122 = tmp_15*(tmp_121 + tmp_27);
      real_t tmp_123 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_124 = tmp_15*(tmp_123 + tmp_34);
      real_t tmp_125 = tmp_0*(tmp_120*tmp_5 + tmp_122*tmp_22 + tmp_124*tmp_29 - 1.0/4.0) + tmp_2*(tmp_120*tmp_39 + tmp_122*tmp_40 + tmp_124*tmp_41 - 1.0/4.0) + tmp_4*(tmp_120*tmp_36 + tmp_122*tmp_37 + tmp_124*tmp_38 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_72;
      real_t tmp_127 = tmp_121 + tmp_74;
      real_t tmp_128 = tmp_123 + tmp_76;
      real_t tmp_129 = tmp_126*tmp_66 + tmp_127*tmp_63 + tmp_128*tmp_60;
      real_t tmp_130 = tmp_126*tmp_65 + tmp_127*tmp_62 + tmp_128*tmp_59;
      real_t tmp_131 = tmp_126*tmp_64 + tmp_127*tmp_61 + tmp_128*tmp_58;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_20);
      real_t tmp_137 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_27);
      real_t tmp_139 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_140 = tmp_15*(tmp_139 + tmp_34);
      real_t tmp_141 = tmp_0*(tmp_136*tmp_5 + tmp_138*tmp_22 + tmp_140*tmp_29 - 1.0/4.0) + tmp_2*(tmp_136*tmp_39 + tmp_138*tmp_40 + tmp_140*tmp_41 - 1.0/4.0) + tmp_4*(tmp_136*tmp_36 + tmp_138*tmp_37 + tmp_140*tmp_38 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_72;
      real_t tmp_143 = tmp_137 + tmp_74;
      real_t tmp_144 = tmp_139 + tmp_76;
      real_t tmp_145 = tmp_142*tmp_66 + tmp_143*tmp_63 + tmp_144*tmp_60;
      real_t tmp_146 = tmp_142*tmp_65 + tmp_143*tmp_62 + tmp_144*tmp_59;
      real_t tmp_147 = tmp_142*tmp_64 + tmp_143*tmp_61 + tmp_144*tmp_58;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_20);
      real_t tmp_153 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_154 = tmp_15*(tmp_153 + tmp_27);
      real_t tmp_155 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_156 = tmp_15*(tmp_155 + tmp_34);
      real_t tmp_157 = tmp_0*(tmp_152*tmp_5 + tmp_154*tmp_22 + tmp_156*tmp_29 - 1.0/4.0) + tmp_2*(tmp_152*tmp_39 + tmp_154*tmp_40 + tmp_156*tmp_41 - 1.0/4.0) + tmp_4*(tmp_152*tmp_36 + tmp_154*tmp_37 + tmp_156*tmp_38 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_72;
      real_t tmp_159 = tmp_153 + tmp_74;
      real_t tmp_160 = tmp_155 + tmp_76;
      real_t tmp_161 = tmp_158*tmp_66 + tmp_159*tmp_63 + tmp_160*tmp_60;
      real_t tmp_162 = tmp_158*tmp_65 + tmp_159*tmp_62 + tmp_160*tmp_59;
      real_t tmp_163 = tmp_158*tmp_64 + tmp_159*tmp_61 + tmp_160*tmp_58;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_168 = tmp_15*(tmp_167 + tmp_20);
      real_t tmp_169 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_170 = tmp_15*(tmp_169 + tmp_27);
      real_t tmp_171 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_172 = tmp_15*(tmp_171 + tmp_34);
      real_t tmp_173 = tmp_0*(tmp_168*tmp_5 + tmp_170*tmp_22 + tmp_172*tmp_29 - 1.0/4.0) + tmp_2*(tmp_168*tmp_39 + tmp_170*tmp_40 + tmp_172*tmp_41 - 1.0/4.0) + tmp_4*(tmp_168*tmp_36 + tmp_170*tmp_37 + tmp_172*tmp_38 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_72;
      real_t tmp_175 = tmp_169 + tmp_74;
      real_t tmp_176 = tmp_171 + tmp_76;
      real_t tmp_177 = tmp_174*tmp_66 + tmp_175*tmp_63 + tmp_176*tmp_60;
      real_t tmp_178 = tmp_174*tmp_65 + tmp_175*tmp_62 + tmp_176*tmp_59;
      real_t tmp_179 = tmp_174*tmp_64 + tmp_175*tmp_61 + tmp_176*tmp_58;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_184 = tmp_15*(tmp_183 + tmp_20);
      real_t tmp_185 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_27);
      real_t tmp_187 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_34);
      real_t tmp_189 = tmp_0*(tmp_184*tmp_5 + tmp_186*tmp_22 + tmp_188*tmp_29 - 1.0/4.0) + tmp_2*(tmp_184*tmp_39 + tmp_186*tmp_40 + tmp_188*tmp_41 - 1.0/4.0) + tmp_4*(tmp_184*tmp_36 + tmp_186*tmp_37 + tmp_188*tmp_38 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_72;
      real_t tmp_191 = tmp_185 + tmp_74;
      real_t tmp_192 = tmp_187 + tmp_76;
      real_t tmp_193 = tmp_190*tmp_66 + tmp_191*tmp_63 + tmp_192*tmp_60;
      real_t tmp_194 = tmp_190*tmp_65 + tmp_191*tmp_62 + tmp_192*tmp_59;
      real_t tmp_195 = tmp_190*tmp_64 + tmp_191*tmp_61 + tmp_192*tmp_58;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_20);
      real_t tmp_201 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_27);
      real_t tmp_203 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_34);
      real_t tmp_205 = tmp_0*(tmp_200*tmp_5 + tmp_202*tmp_22 + tmp_204*tmp_29 - 1.0/4.0) + tmp_2*(tmp_200*tmp_39 + tmp_202*tmp_40 + tmp_204*tmp_41 - 1.0/4.0) + tmp_4*(tmp_200*tmp_36 + tmp_202*tmp_37 + tmp_204*tmp_38 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_72;
      real_t tmp_207 = tmp_201 + tmp_74;
      real_t tmp_208 = tmp_203 + tmp_76;
      real_t tmp_209 = tmp_206*tmp_66 + tmp_207*tmp_63 + tmp_208*tmp_60;
      real_t tmp_210 = tmp_206*tmp_65 + tmp_207*tmp_62 + tmp_208*tmp_59;
      real_t tmp_211 = tmp_206*tmp_64 + tmp_207*tmp_61 + tmp_208*tmp_58;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_216 = tmp_15*(tmp_20 + tmp_215);
      real_t tmp_217 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_218 = tmp_15*(tmp_217 + tmp_27);
      real_t tmp_219 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_34);
      real_t tmp_221 = tmp_0*(tmp_216*tmp_5 + tmp_218*tmp_22 + tmp_220*tmp_29 - 1.0/4.0) + tmp_2*(tmp_216*tmp_39 + tmp_218*tmp_40 + tmp_220*tmp_41 - 1.0/4.0) + tmp_4*(tmp_216*tmp_36 + tmp_218*tmp_37 + tmp_220*tmp_38 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_72;
      real_t tmp_223 = tmp_217 + tmp_74;
      real_t tmp_224 = tmp_219 + tmp_76;
      real_t tmp_225 = tmp_222*tmp_66 + tmp_223*tmp_63 + tmp_224*tmp_60;
      real_t tmp_226 = tmp_222*tmp_65 + tmp_223*tmp_62 + tmp_224*tmp_59;
      real_t tmp_227 = tmp_222*tmp_64 + tmp_223*tmp_61 + tmp_224*tmp_58;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_232 = tmp_15*(tmp_20 + tmp_231);
      real_t tmp_233 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_234 = tmp_15*(tmp_233 + tmp_27);
      real_t tmp_235 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_236 = tmp_15*(tmp_235 + tmp_34);
      real_t tmp_237 = tmp_0*(tmp_22*tmp_234 + tmp_232*tmp_5 + tmp_236*tmp_29 - 1.0/4.0) + tmp_2*(tmp_232*tmp_39 + tmp_234*tmp_40 + tmp_236*tmp_41 - 1.0/4.0) + tmp_4*(tmp_232*tmp_36 + tmp_234*tmp_37 + tmp_236*tmp_38 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_72;
      real_t tmp_239 = tmp_233 + tmp_74;
      real_t tmp_240 = tmp_235 + tmp_76;
      real_t tmp_241 = tmp_238*tmp_66 + tmp_239*tmp_63 + tmp_240*tmp_60;
      real_t tmp_242 = tmp_238*tmp_65 + tmp_239*tmp_62 + tmp_240*tmp_59;
      real_t tmp_243 = tmp_238*tmp_64 + tmp_239*tmp_61 + tmp_240*tmp_58;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_248 = tmp_15*(tmp_20 + tmp_247);
      real_t tmp_249 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_250 = tmp_15*(tmp_249 + tmp_27);
      real_t tmp_251 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_252 = tmp_15*(tmp_251 + tmp_34);
      real_t tmp_253 = tmp_0*(tmp_22*tmp_250 + tmp_248*tmp_5 + tmp_252*tmp_29 - 1.0/4.0) + tmp_2*(tmp_248*tmp_39 + tmp_250*tmp_40 + tmp_252*tmp_41 - 1.0/4.0) + tmp_4*(tmp_248*tmp_36 + tmp_250*tmp_37 + tmp_252*tmp_38 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_72;
      real_t tmp_255 = tmp_249 + tmp_74;
      real_t tmp_256 = tmp_251 + tmp_76;
      real_t tmp_257 = tmp_254*tmp_66 + tmp_255*tmp_63 + tmp_256*tmp_60;
      real_t tmp_258 = tmp_254*tmp_65 + tmp_255*tmp_62 + tmp_256*tmp_59;
      real_t tmp_259 = tmp_254*tmp_64 + tmp_255*tmp_61 + tmp_256*tmp_58;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_264 = tmp_15*(tmp_20 + tmp_263);
      real_t tmp_265 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_27);
      real_t tmp_267 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_268 = tmp_15*(tmp_267 + tmp_34);
      real_t tmp_269 = tmp_0*(tmp_22*tmp_266 + tmp_264*tmp_5 + tmp_268*tmp_29 - 1.0/4.0) + tmp_2*(tmp_264*tmp_39 + tmp_266*tmp_40 + tmp_268*tmp_41 - 1.0/4.0) + tmp_4*(tmp_264*tmp_36 + tmp_266*tmp_37 + tmp_268*tmp_38 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_72;
      real_t tmp_271 = tmp_265 + tmp_74;
      real_t tmp_272 = tmp_267 + tmp_76;
      real_t tmp_273 = tmp_270*tmp_66 + tmp_271*tmp_63 + tmp_272*tmp_60;
      real_t tmp_274 = tmp_270*tmp_65 + tmp_271*tmp_62 + tmp_272*tmp_59;
      real_t tmp_275 = tmp_270*tmp_64 + tmp_271*tmp_61 + tmp_272*tmp_58;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_280 = tmp_15*(tmp_20 + tmp_279);
      real_t tmp_281 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_282 = tmp_15*(tmp_27 + tmp_281);
      real_t tmp_283 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_284 = tmp_15*(tmp_283 + tmp_34);
      real_t tmp_285 = tmp_0*(tmp_22*tmp_282 + tmp_280*tmp_5 + tmp_284*tmp_29 - 1.0/4.0) + tmp_2*(tmp_280*tmp_39 + tmp_282*tmp_40 + tmp_284*tmp_41 - 1.0/4.0) + tmp_4*(tmp_280*tmp_36 + tmp_282*tmp_37 + tmp_284*tmp_38 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_72;
      real_t tmp_287 = tmp_281 + tmp_74;
      real_t tmp_288 = tmp_283 + tmp_76;
      real_t tmp_289 = tmp_286*tmp_66 + tmp_287*tmp_63 + tmp_288*tmp_60;
      real_t tmp_290 = tmp_286*tmp_65 + tmp_287*tmp_62 + tmp_288*tmp_59;
      real_t tmp_291 = tmp_286*tmp_64 + tmp_287*tmp_61 + tmp_288*tmp_58;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_296 = tmp_15*(tmp_20 + tmp_295);
      real_t tmp_297 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_298 = tmp_15*(tmp_27 + tmp_297);
      real_t tmp_299 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_300 = tmp_15*(tmp_299 + tmp_34);
      real_t tmp_301 = tmp_0*(tmp_22*tmp_298 + tmp_29*tmp_300 + tmp_296*tmp_5 - 1.0/4.0) + tmp_2*(tmp_296*tmp_39 + tmp_298*tmp_40 + tmp_300*tmp_41 - 1.0/4.0) + tmp_4*(tmp_296*tmp_36 + tmp_298*tmp_37 + tmp_300*tmp_38 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_72;
      real_t tmp_303 = tmp_297 + tmp_74;
      real_t tmp_304 = tmp_299 + tmp_76;
      real_t tmp_305 = tmp_302*tmp_66 + tmp_303*tmp_63 + tmp_304*tmp_60;
      real_t tmp_306 = tmp_302*tmp_65 + tmp_303*tmp_62 + tmp_304*tmp_59;
      real_t tmp_307 = tmp_302*tmp_64 + tmp_303*tmp_61 + tmp_304*tmp_58;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_312 = tmp_15*(tmp_20 + tmp_311);
      real_t tmp_313 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_314 = tmp_15*(tmp_27 + tmp_313);
      real_t tmp_315 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_316 = tmp_15*(tmp_315 + tmp_34);
      real_t tmp_317 = tmp_0*(tmp_22*tmp_314 + tmp_29*tmp_316 + tmp_312*tmp_5 - 1.0/4.0) + tmp_2*(tmp_312*tmp_39 + tmp_314*tmp_40 + tmp_316*tmp_41 - 1.0/4.0) + tmp_4*(tmp_312*tmp_36 + tmp_314*tmp_37 + tmp_316*tmp_38 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_72;
      real_t tmp_319 = tmp_313 + tmp_74;
      real_t tmp_320 = tmp_315 + tmp_76;
      real_t tmp_321 = tmp_318*tmp_66 + tmp_319*tmp_63 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_318*tmp_65 + tmp_319*tmp_62 + tmp_320*tmp_59;
      real_t tmp_323 = tmp_318*tmp_64 + tmp_319*tmp_61 + tmp_320*tmp_58;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_328 = tmp_15*(tmp_20 + tmp_327);
      real_t tmp_329 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_330 = tmp_15*(tmp_27 + tmp_329);
      real_t tmp_331 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_332 = tmp_15*(tmp_331 + tmp_34);
      real_t tmp_333 = tmp_0*(tmp_22*tmp_330 + tmp_29*tmp_332 + tmp_328*tmp_5 - 1.0/4.0) + tmp_2*(tmp_328*tmp_39 + tmp_330*tmp_40 + tmp_332*tmp_41 - 1.0/4.0) + tmp_4*(tmp_328*tmp_36 + tmp_330*tmp_37 + tmp_332*tmp_38 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_72;
      real_t tmp_335 = tmp_329 + tmp_74;
      real_t tmp_336 = tmp_331 + tmp_76;
      real_t tmp_337 = tmp_334*tmp_66 + tmp_335*tmp_63 + tmp_336*tmp_60;
      real_t tmp_338 = tmp_334*tmp_65 + tmp_335*tmp_62 + tmp_336*tmp_59;
      real_t tmp_339 = tmp_334*tmp_64 + tmp_335*tmp_61 + tmp_336*tmp_58;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_344 = tmp_15*(tmp_20 + tmp_343);
      real_t tmp_345 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_346 = tmp_15*(tmp_27 + tmp_345);
      real_t tmp_347 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_348 = tmp_15*(tmp_34 + tmp_347);
      real_t tmp_349 = tmp_0*(tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_5 - 1.0/4.0) + tmp_2*(tmp_344*tmp_39 + tmp_346*tmp_40 + tmp_348*tmp_41 - 1.0/4.0) + tmp_4*(tmp_344*tmp_36 + tmp_346*tmp_37 + tmp_348*tmp_38 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_72;
      real_t tmp_351 = tmp_345 + tmp_74;
      real_t tmp_352 = tmp_347 + tmp_76;
      real_t tmp_353 = tmp_350*tmp_66 + tmp_351*tmp_63 + tmp_352*tmp_60;
      real_t tmp_354 = tmp_350*tmp_65 + tmp_351*tmp_62 + tmp_352*tmp_59;
      real_t tmp_355 = tmp_350*tmp_64 + tmp_351*tmp_61 + tmp_352*tmp_58;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_360 = tmp_15*(tmp_20 + tmp_359);
      real_t tmp_361 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_362 = tmp_15*(tmp_27 + tmp_361);
      real_t tmp_363 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_364 = tmp_15*(tmp_34 + tmp_363);
      real_t tmp_365 = tmp_0*(tmp_22*tmp_362 + tmp_29*tmp_364 + tmp_360*tmp_5 - 1.0/4.0) + tmp_2*(tmp_360*tmp_39 + tmp_362*tmp_40 + tmp_364*tmp_41 - 1.0/4.0) + tmp_4*(tmp_36*tmp_360 + tmp_362*tmp_37 + tmp_364*tmp_38 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_72;
      real_t tmp_367 = tmp_361 + tmp_74;
      real_t tmp_368 = tmp_363 + tmp_76;
      real_t tmp_369 = tmp_366*tmp_66 + tmp_367*tmp_63 + tmp_368*tmp_60;
      real_t tmp_370 = tmp_366*tmp_65 + tmp_367*tmp_62 + tmp_368*tmp_59;
      real_t tmp_371 = tmp_366*tmp_64 + tmp_367*tmp_61 + tmp_368*tmp_58;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_0*(tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_5 - 1.0/4.0) + tmp_2*(tmp_376*tmp_39 + tmp_378*tmp_40 + tmp_380*tmp_41 - 1.0/4.0) + tmp_4*(tmp_36*tmp_376 + tmp_37*tmp_378 + tmp_38*tmp_380 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_72;
      real_t tmp_383 = tmp_377 + tmp_74;
      real_t tmp_384 = tmp_379 + tmp_76;
      real_t tmp_385 = tmp_382*tmp_66 + tmp_383*tmp_63 + tmp_384*tmp_60;
      real_t tmp_386 = tmp_382*tmp_65 + tmp_383*tmp_62 + tmp_384*tmp_59;
      real_t tmp_387 = tmp_382*tmp_64 + tmp_383*tmp_61 + tmp_384*tmp_58;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_392 = tmp_15*(tmp_20 + tmp_391);
      real_t tmp_393 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_394 = tmp_15*(tmp_27 + tmp_393);
      real_t tmp_395 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_396 = tmp_15*(tmp_34 + tmp_395);
      real_t tmp_397 = tmp_0*(tmp_22*tmp_394 + tmp_29*tmp_396 + tmp_392*tmp_5 - 1.0/4.0) + tmp_2*(tmp_39*tmp_392 + tmp_394*tmp_40 + tmp_396*tmp_41 - 1.0/4.0) + tmp_4*(tmp_36*tmp_392 + tmp_37*tmp_394 + tmp_38*tmp_396 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_72;
      real_t tmp_399 = tmp_393 + tmp_74;
      real_t tmp_400 = tmp_395 + tmp_76;
      real_t tmp_401 = tmp_398*tmp_66 + tmp_399*tmp_63 + tmp_400*tmp_60;
      real_t tmp_402 = tmp_398*tmp_65 + tmp_399*tmp_62 + tmp_400*tmp_59;
      real_t tmp_403 = tmp_398*tmp_64 + tmp_399*tmp_61 + tmp_400*tmp_58;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_408 = 0.5*p_affine_13_0*tmp_59 + 0.5*p_affine_13_1*tmp_62 + 0.5*p_affine_13_2*tmp_65;
      real_t tmp_409 = 0.5*p_affine_13_0*tmp_58 + 0.5*p_affine_13_1*tmp_61 + 0.5*p_affine_13_2*tmp_64;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 + 0.5*tmp_100*tmp_71 - tmp_67*tmp_93) + tmp_118*(-tmp_109*tmp_67 - tmp_116*tmp_117 + 0.5*tmp_116*tmp_71) + tmp_134*(-tmp_125*tmp_67 - tmp_132*tmp_133 + 0.5*tmp_132*tmp_71) + tmp_150*(-tmp_141*tmp_67 - tmp_148*tmp_149 + 0.5*tmp_148*tmp_71) + tmp_166*(-tmp_157*tmp_67 - tmp_164*tmp_165 + 0.5*tmp_164*tmp_71) + tmp_182*(-tmp_173*tmp_67 - tmp_180*tmp_181 + 0.5*tmp_180*tmp_71) + tmp_198*(-tmp_189*tmp_67 - tmp_196*tmp_197 + 0.5*tmp_196*tmp_71) + tmp_214*(-tmp_205*tmp_67 - tmp_212*tmp_213 + 0.5*tmp_212*tmp_71) + tmp_230*(-tmp_221*tmp_67 - tmp_228*tmp_229 + 0.5*tmp_228*tmp_71) + tmp_246*(-tmp_237*tmp_67 - tmp_244*tmp_245 + 0.5*tmp_244*tmp_71) + tmp_262*(-tmp_253*tmp_67 - tmp_260*tmp_261 + 0.5*tmp_260*tmp_71) + tmp_278*(-tmp_269*tmp_67 - tmp_276*tmp_277 + 0.5*tmp_276*tmp_71) + tmp_294*(-tmp_285*tmp_67 - tmp_292*tmp_293 + 0.5*tmp_292*tmp_71) + tmp_310*(-tmp_301*tmp_67 - tmp_308*tmp_309 + 0.5*tmp_308*tmp_71) + tmp_326*(-tmp_317*tmp_67 - tmp_324*tmp_325 + 0.5*tmp_324*tmp_71) + tmp_342*(-tmp_333*tmp_67 - tmp_340*tmp_341 + 0.5*tmp_340*tmp_71) + tmp_358*(-tmp_349*tmp_67 - tmp_356*tmp_357 + 0.5*tmp_356*tmp_71) + tmp_374*(-tmp_365*tmp_67 - tmp_372*tmp_373 + 0.5*tmp_372*tmp_71) + tmp_390*(-tmp_381*tmp_67 - tmp_388*tmp_389 + 0.5*tmp_388*tmp_71) + tmp_406*(-tmp_397*tmp_67 - tmp_404*tmp_405 + 0.5*tmp_404*tmp_71) + tmp_86*(-tmp_42*tmp_67 + 0.5*tmp_71*tmp_81 - tmp_81*tmp_84);
      real_t a_0_1 = tmp_102*(-tmp_101*tmp_97 - tmp_407*tmp_93 + 0.5*tmp_71*tmp_97) + tmp_118*(-tmp_109*tmp_407 - tmp_113*tmp_117 + 0.5*tmp_113*tmp_71) + tmp_134*(-tmp_125*tmp_407 - tmp_129*tmp_133 + 0.5*tmp_129*tmp_71) + tmp_150*(-tmp_141*tmp_407 - tmp_145*tmp_149 + 0.5*tmp_145*tmp_71) + tmp_166*(-tmp_157*tmp_407 - tmp_161*tmp_165 + 0.5*tmp_161*tmp_71) + tmp_182*(-tmp_173*tmp_407 - tmp_177*tmp_181 + 0.5*tmp_177*tmp_71) + tmp_198*(-tmp_189*tmp_407 - tmp_193*tmp_197 + 0.5*tmp_193*tmp_71) + tmp_214*(-tmp_205*tmp_407 - tmp_209*tmp_213 + 0.5*tmp_209*tmp_71) + tmp_230*(-tmp_221*tmp_407 - tmp_225*tmp_229 + 0.5*tmp_225*tmp_71) + tmp_246*(-tmp_237*tmp_407 - tmp_241*tmp_245 + 0.5*tmp_241*tmp_71) + tmp_262*(-tmp_253*tmp_407 - tmp_257*tmp_261 + 0.5*tmp_257*tmp_71) + tmp_278*(-tmp_269*tmp_407 - tmp_273*tmp_277 + 0.5*tmp_273*tmp_71) + tmp_294*(-tmp_285*tmp_407 - tmp_289*tmp_293 + 0.5*tmp_289*tmp_71) + tmp_310*(-tmp_301*tmp_407 - tmp_305*tmp_309 + 0.5*tmp_305*tmp_71) + tmp_326*(-tmp_317*tmp_407 - tmp_321*tmp_325 + 0.5*tmp_321*tmp_71) + tmp_342*(-tmp_333*tmp_407 - tmp_337*tmp_341 + 0.5*tmp_337*tmp_71) + tmp_358*(-tmp_349*tmp_407 - tmp_353*tmp_357 + 0.5*tmp_353*tmp_71) + tmp_374*(-tmp_365*tmp_407 - tmp_369*tmp_373 + 0.5*tmp_369*tmp_71) + tmp_390*(-tmp_381*tmp_407 - tmp_385*tmp_389 + 0.5*tmp_385*tmp_71) + tmp_406*(-tmp_397*tmp_407 - tmp_401*tmp_405 + 0.5*tmp_401*tmp_71) + tmp_86*(-tmp_407*tmp_42 + 0.5*tmp_71*tmp_78 - tmp_78*tmp_84);
      real_t a_0_2 = tmp_102*(-tmp_101*tmp_98 - tmp_408*tmp_93 + 0.5*tmp_71*tmp_98) + tmp_118*(-tmp_109*tmp_408 - tmp_114*tmp_117 + 0.5*tmp_114*tmp_71) + tmp_134*(-tmp_125*tmp_408 - tmp_130*tmp_133 + 0.5*tmp_130*tmp_71) + tmp_150*(-tmp_141*tmp_408 - tmp_146*tmp_149 + 0.5*tmp_146*tmp_71) + tmp_166*(-tmp_157*tmp_408 - tmp_162*tmp_165 + 0.5*tmp_162*tmp_71) + tmp_182*(-tmp_173*tmp_408 - tmp_178*tmp_181 + 0.5*tmp_178*tmp_71) + tmp_198*(-tmp_189*tmp_408 - tmp_194*tmp_197 + 0.5*tmp_194*tmp_71) + tmp_214*(-tmp_205*tmp_408 - tmp_210*tmp_213 + 0.5*tmp_210*tmp_71) + tmp_230*(-tmp_221*tmp_408 - tmp_226*tmp_229 + 0.5*tmp_226*tmp_71) + tmp_246*(-tmp_237*tmp_408 - tmp_242*tmp_245 + 0.5*tmp_242*tmp_71) + tmp_262*(-tmp_253*tmp_408 - tmp_258*tmp_261 + 0.5*tmp_258*tmp_71) + tmp_278*(-tmp_269*tmp_408 - tmp_274*tmp_277 + 0.5*tmp_274*tmp_71) + tmp_294*(-tmp_285*tmp_408 - tmp_290*tmp_293 + 0.5*tmp_290*tmp_71) + tmp_310*(-tmp_301*tmp_408 - tmp_306*tmp_309 + 0.5*tmp_306*tmp_71) + tmp_326*(-tmp_317*tmp_408 - tmp_322*tmp_325 + 0.5*tmp_322*tmp_71) + tmp_342*(-tmp_333*tmp_408 - tmp_338*tmp_341 + 0.5*tmp_338*tmp_71) + tmp_358*(-tmp_349*tmp_408 - tmp_354*tmp_357 + 0.5*tmp_354*tmp_71) + tmp_374*(-tmp_365*tmp_408 - tmp_370*tmp_373 + 0.5*tmp_370*tmp_71) + tmp_390*(-tmp_381*tmp_408 - tmp_386*tmp_389 + 0.5*tmp_386*tmp_71) + tmp_406*(-tmp_397*tmp_408 - tmp_402*tmp_405 + 0.5*tmp_402*tmp_71) + tmp_86*(-tmp_408*tmp_42 + 0.5*tmp_71*tmp_79 - tmp_79*tmp_84);
      real_t a_0_3 = tmp_102*(-tmp_101*tmp_99 - tmp_409*tmp_93 + 0.5*tmp_71*tmp_99) + tmp_118*(-tmp_109*tmp_409 - tmp_115*tmp_117 + 0.5*tmp_115*tmp_71) + tmp_134*(-tmp_125*tmp_409 - tmp_131*tmp_133 + 0.5*tmp_131*tmp_71) + tmp_150*(-tmp_141*tmp_409 - tmp_147*tmp_149 + 0.5*tmp_147*tmp_71) + tmp_166*(-tmp_157*tmp_409 - tmp_163*tmp_165 + 0.5*tmp_163*tmp_71) + tmp_182*(-tmp_173*tmp_409 - tmp_179*tmp_181 + 0.5*tmp_179*tmp_71) + tmp_198*(-tmp_189*tmp_409 - tmp_195*tmp_197 + 0.5*tmp_195*tmp_71) + tmp_214*(-tmp_205*tmp_409 - tmp_211*tmp_213 + 0.5*tmp_211*tmp_71) + tmp_230*(-tmp_221*tmp_409 - tmp_227*tmp_229 + 0.5*tmp_227*tmp_71) + tmp_246*(-tmp_237*tmp_409 - tmp_243*tmp_245 + 0.5*tmp_243*tmp_71) + tmp_262*(-tmp_253*tmp_409 - tmp_259*tmp_261 + 0.5*tmp_259*tmp_71) + tmp_278*(-tmp_269*tmp_409 - tmp_275*tmp_277 + 0.5*tmp_275*tmp_71) + tmp_294*(-tmp_285*tmp_409 - tmp_291*tmp_293 + 0.5*tmp_291*tmp_71) + tmp_310*(-tmp_301*tmp_409 - tmp_307*tmp_309 + 0.5*tmp_307*tmp_71) + tmp_326*(-tmp_317*tmp_409 - tmp_323*tmp_325 + 0.5*tmp_323*tmp_71) + tmp_342*(-tmp_333*tmp_409 - tmp_339*tmp_341 + 0.5*tmp_339*tmp_71) + tmp_358*(-tmp_349*tmp_409 - tmp_355*tmp_357 + 0.5*tmp_355*tmp_71) + tmp_374*(-tmp_365*tmp_409 - tmp_371*tmp_373 + 0.5*tmp_371*tmp_71) + tmp_390*(-tmp_381*tmp_409 - tmp_387*tmp_389 + 0.5*tmp_387*tmp_71) + tmp_406*(-tmp_397*tmp_409 - tmp_403*tmp_405 + 0.5*tmp_403*tmp_71) + tmp_86*(-tmp_409*tmp_42 + 0.5*tmp_71*tmp_80 - tmp_80*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_0*(tmp_40 - 1.0/4.0) + tmp_10*(tmp_42 - 1.0/4.0) + tmp_3*(tmp_41 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_0*tmp_17 + tmp_10*tmp_15 + tmp_16*tmp_3) + p_affine_13_1*(tmp_0*tmp_20 + tmp_10*tmp_18 + tmp_19*tmp_3) + p_affine_13_2*(tmp_0*tmp_23 + tmp_10*tmp_21 + tmp_22*tmp_3);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_10*(tmp_55 - 1.0/4.0) + tmp_3*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_10*(tmp_64 - 1.0/4.0) + tmp_3*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_10*(tmp_73 - 1.0/4.0) + tmp_3*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_10*(tmp_82 - 1.0/4.0) + tmp_3*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_10*(tmp_91 - 1.0/4.0) + tmp_3*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_10*(tmp_100 - 1.0/4.0) + tmp_3*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_10*(tmp_109 - 1.0/4.0) + tmp_3*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_10*(tmp_118 - 1.0/4.0) + tmp_3*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_10*(tmp_127 - 1.0/4.0) + tmp_3*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_10*(tmp_136 - 1.0/4.0) + tmp_3*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_10*(tmp_145 - 1.0/4.0) + tmp_3*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_10*(tmp_154 - 1.0/4.0) + tmp_3*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_10*(tmp_163 - 1.0/4.0) + tmp_3*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_10*(tmp_172 - 1.0/4.0) + tmp_3*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_10*(tmp_181 - 1.0/4.0) + tmp_3*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_10*(tmp_190 - 1.0/4.0) + tmp_3*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_10*(tmp_199 - 1.0/4.0) + tmp_3*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_10*(tmp_208 - 1.0/4.0) + tmp_3*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_10*(tmp_217 - 1.0/4.0) + tmp_3*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_10*(tmp_226 - 1.0/4.0) + tmp_3*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_EP1_2 : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_EP1_2()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_0*tmp_8;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_12 - tmp_13*tmp_7 + tmp_2*tmp_6 - tmp_5*tmp_6 + tmp_7*tmp_9);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_11*tmp_4 - tmp_12);
      real_t tmp_17 = tmp_14*(-tmp_13 + tmp_9);
      real_t tmp_18 = tmp_10*tmp_16 + tmp_15*tmp_6 + tmp_17*tmp_7;
      real_t tmp_19 = tmp_14*(-tmp_0*tmp_10 + tmp_3*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_0*tmp_6 - tmp_11*tmp_7);
      real_t tmp_21 = tmp_14*(tmp_10*tmp_11 - tmp_3*tmp_6);
      real_t tmp_22 = tmp_10*tmp_20 + tmp_19*tmp_6 + tmp_21*tmp_7;
      real_t tmp_23 = tmp_14*(-tmp_1*tmp_7 + tmp_10*tmp_4);
      real_t tmp_24 = tmp_14*(-tmp_4*tmp_6 + tmp_7*tmp_8);
      real_t tmp_25 = tmp_14*(tmp_1*tmp_6 - tmp_10*tmp_8);
      real_t tmp_26 = tmp_10*tmp_24 + tmp_23*tmp_6 + tmp_25*tmp_7;
      real_t tmp_27 = p_affine_0_0*p_affine_1_1;
      real_t tmp_28 = p_affine_0_0*p_affine_1_2;
      real_t tmp_29 = p_affine_2_1*p_affine_3_2;
      real_t tmp_30 = p_affine_0_1*p_affine_1_0;
      real_t tmp_31 = p_affine_0_1*p_affine_1_2;
      real_t tmp_32 = p_affine_2_2*p_affine_3_0;
      real_t tmp_33 = p_affine_0_2*p_affine_1_0;
      real_t tmp_34 = p_affine_0_2*p_affine_1_1;
      real_t tmp_35 = p_affine_2_0*p_affine_3_1;
      real_t tmp_36 = p_affine_2_2*p_affine_3_1;
      real_t tmp_37 = p_affine_2_0*p_affine_3_2;
      real_t tmp_38 = p_affine_2_1*p_affine_3_0;
      real_t tmp_39 = std::abs(p_affine_0_0*tmp_29 - p_affine_0_0*tmp_36 + p_affine_0_1*tmp_32 - p_affine_0_1*tmp_37 + p_affine_0_2*tmp_35 - p_affine_0_2*tmp_38 - p_affine_1_0*tmp_29 + p_affine_1_0*tmp_36 - p_affine_1_1*tmp_32 + p_affine_1_1*tmp_37 - p_affine_1_2*tmp_35 + p_affine_1_2*tmp_38 + p_affine_2_0*tmp_31 - p_affine_2_0*tmp_34 - p_affine_2_1*tmp_28 + p_affine_2_1*tmp_33 + p_affine_2_2*tmp_27 - p_affine_2_2*tmp_30 - p_affine_3_0*tmp_31 + p_affine_3_0*tmp_34 + p_affine_3_1*tmp_28 - p_affine_3_1*tmp_33 - p_affine_3_2*tmp_27 + p_affine_3_2*tmp_30);
      real_t tmp_40 = tmp_39*(tmp_18*(-tmp_15 - tmp_16 - tmp_17) + tmp_22*(-tmp_19 - tmp_20 - tmp_21) + tmp_26*(-tmp_23 - tmp_24 - tmp_25));
      real_t tmp_41 = tmp_39*(tmp_17*tmp_18 + tmp_21*tmp_22 + tmp_25*tmp_26);
      real_t tmp_42 = tmp_39*(tmp_16*tmp_18 + tmp_20*tmp_22 + tmp_24*tmp_26);
      real_t tmp_43 = tmp_39*(tmp_15*tmp_18 + tmp_19*tmp_22 + tmp_23*tmp_26);
      real_t a_0_0 = 0.1666666666666668*tmp_40;
      real_t a_0_1 = 0.1666666666666668*tmp_41;
      real_t a_0_2 = 0.1666666666666668*tmp_42;
      real_t a_0_3 = 0.1666666666666668*tmp_43;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_1 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_2 = -tmp_1;
      real_t tmp_3 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_4 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_5 = 0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_3 + tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_7 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_8 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_11 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_12 = tmp_11*tmp_9;
      real_t tmp_13 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_14 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_15 = tmp_13*tmp_14;
      real_t tmp_16 = tmp_14*tmp_7;
      real_t tmp_17 = tmp_11*tmp_13;
      real_t tmp_18 = tmp_0*tmp_9;
      real_t tmp_19 = 1.0 / (tmp_0*tmp_6*tmp_7 + tmp_10*tmp_12 - tmp_10*tmp_16 + tmp_15*tmp_8 - tmp_17*tmp_6 - tmp_18*tmp_8);
      real_t tmp_20 = tmp_19*(tmp_6*tmp_7 - tmp_8*tmp_9);
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24;
      real_t tmp_26 = tmp_19*(-tmp_11*tmp_6 + tmp_14*tmp_8);
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = 0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30;
      real_t tmp_32 = tmp_19*(tmp_12 - tmp_16);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_25*tmp_26 + tmp_31*tmp_32;
      real_t tmp_34 = tmp_19*(-tmp_10*tmp_7 + tmp_13*tmp_8);
      real_t tmp_35 = tmp_19*(-tmp_0*tmp_8 + tmp_10*tmp_11);
      real_t tmp_36 = tmp_19*(tmp_0*tmp_7 - tmp_17);
      real_t tmp_37 = tmp_25*tmp_35 + tmp_31*tmp_36 + tmp_34*tmp_5;
      real_t tmp_38 = tmp_19*(tmp_10*tmp_9 - tmp_13*tmp_6);
      real_t tmp_39 = tmp_19*(tmp_0*tmp_6 - tmp_10*tmp_14);
      real_t tmp_40 = tmp_19*(tmp_15 - tmp_18);
      real_t tmp_41 = tmp_25*tmp_39 + tmp_31*tmp_40 + tmp_38*tmp_5;
      real_t tmp_42 = tmp_0*(tmp_33 - 1.0/4.0) + tmp_11*(tmp_41 - 1.0/4.0) + tmp_14*(tmp_37 - 1.0/4.0);
      real_t tmp_43 = 0.5*p_affine_13_0*(-tmp_32 - tmp_36 - tmp_40) + 0.5*p_affine_13_1*(-tmp_26 - tmp_35 - tmp_39) + 0.5*p_affine_13_2*(-tmp_20 - tmp_34 - tmp_38);
      real_t tmp_44 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_45 = 0.5*p_affine_13_0*(tmp_0*tmp_32 + tmp_11*tmp_40 + tmp_14*tmp_36) + 0.5*p_affine_13_1*(tmp_0*tmp_26 + tmp_11*tmp_39 + tmp_14*tmp_35) + 0.5*p_affine_13_2*(tmp_0*tmp_20 + tmp_11*tmp_38 + tmp_14*tmp_34);
      real_t tmp_46 = (std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)*std::abs(tmp_1*tmp_23 - tmp_21*tmp_3)) + (std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)*std::abs(tmp_1*tmp_29 - tmp_27*tmp_3)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_3 + tmp_4;
      real_t tmp_51 = 0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24;
      real_t tmp_52 = 0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30;
      real_t tmp_53 = tmp_20*tmp_50 + tmp_26*tmp_51 + tmp_32*tmp_52;
      real_t tmp_54 = tmp_34*tmp_50 + tmp_35*tmp_51 + tmp_36*tmp_52;
      real_t tmp_55 = tmp_38*tmp_50 + tmp_39*tmp_51 + tmp_40*tmp_52;
      real_t tmp_56 = tmp_0*(tmp_53 - 1.0/4.0) + tmp_11*(tmp_55 - 1.0/4.0) + tmp_14*(tmp_54 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_60 = 0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_61 = 0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_26*tmp_60 + tmp_32*tmp_61;
      real_t tmp_63 = tmp_34*tmp_59 + tmp_35*tmp_60 + tmp_36*tmp_61;
      real_t tmp_64 = tmp_38*tmp_59 + tmp_39*tmp_60 + tmp_40*tmp_61;
      real_t tmp_65 = tmp_0*(tmp_62 - 1.0/4.0) + tmp_11*(tmp_64 - 1.0/4.0) + tmp_14*(tmp_63 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_69 = 0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_70 = 0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_71 = tmp_20*tmp_68 + tmp_26*tmp_69 + tmp_32*tmp_70;
      real_t tmp_72 = tmp_34*tmp_68 + tmp_35*tmp_69 + tmp_36*tmp_70;
      real_t tmp_73 = tmp_38*tmp_68 + tmp_39*tmp_69 + tmp_40*tmp_70;
      real_t tmp_74 = tmp_0*(tmp_71 - 1.0/4.0) + tmp_11*(tmp_73 - 1.0/4.0) + tmp_14*(tmp_72 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_78 = 0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_79 = 0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_80 = tmp_20*tmp_77 + tmp_26*tmp_78 + tmp_32*tmp_79;
      real_t tmp_81 = tmp_34*tmp_77 + tmp_35*tmp_78 + tmp_36*tmp_79;
      real_t tmp_82 = tmp_38*tmp_77 + tmp_39*tmp_78 + tmp_40*tmp_79;
      real_t tmp_83 = tmp_0*(tmp_80 - 1.0/4.0) + tmp_11*(tmp_82 - 1.0/4.0) + tmp_14*(tmp_81 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_87 = 0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_88 = 0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_89 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_32*tmp_88;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = tmp_0*(tmp_89 - 1.0/4.0) + tmp_11*(tmp_91 - 1.0/4.0) + tmp_14*(tmp_90 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_96 = 0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_97 = 0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_98 = tmp_20*tmp_95 + tmp_26*tmp_96 + tmp_32*tmp_97;
      real_t tmp_99 = tmp_34*tmp_95 + tmp_35*tmp_96 + tmp_36*tmp_97;
      real_t tmp_100 = tmp_38*tmp_95 + tmp_39*tmp_96 + tmp_40*tmp_97;
      real_t tmp_101 = tmp_0*(tmp_98 - 1.0/4.0) + tmp_11*(tmp_100 - 1.0/4.0) + tmp_14*(tmp_99 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_105 = 0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_106 = 0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_26 + tmp_106*tmp_32;
      real_t tmp_108 = tmp_104*tmp_34 + tmp_105*tmp_35 + tmp_106*tmp_36;
      real_t tmp_109 = tmp_104*tmp_38 + tmp_105*tmp_39 + tmp_106*tmp_40;
      real_t tmp_110 = tmp_0*(tmp_107 - 1.0/4.0) + tmp_11*(tmp_109 - 1.0/4.0) + tmp_14*(tmp_108 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_3 + tmp_4;
      real_t tmp_114 = 0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24;
      real_t tmp_115 = 0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30;
      real_t tmp_116 = tmp_113*tmp_20 + tmp_114*tmp_26 + tmp_115*tmp_32;
      real_t tmp_117 = tmp_113*tmp_34 + tmp_114*tmp_35 + tmp_115*tmp_36;
      real_t tmp_118 = tmp_113*tmp_38 + tmp_114*tmp_39 + tmp_115*tmp_40;
      real_t tmp_119 = tmp_0*(tmp_116 - 1.0/4.0) + tmp_11*(tmp_118 - 1.0/4.0) + tmp_14*(tmp_117 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_3 + tmp_4;
      real_t tmp_123 = 0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24;
      real_t tmp_124 = 0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30;
      real_t tmp_125 = tmp_122*tmp_20 + tmp_123*tmp_26 + tmp_124*tmp_32;
      real_t tmp_126 = tmp_122*tmp_34 + tmp_123*tmp_35 + tmp_124*tmp_36;
      real_t tmp_127 = tmp_122*tmp_38 + tmp_123*tmp_39 + tmp_124*tmp_40;
      real_t tmp_128 = tmp_0*(tmp_125 - 1.0/4.0) + tmp_11*(tmp_127 - 1.0/4.0) + tmp_14*(tmp_126 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_3 + tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24;
      real_t tmp_133 = 0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30;
      real_t tmp_134 = tmp_131*tmp_20 + tmp_132*tmp_26 + tmp_133*tmp_32;
      real_t tmp_135 = tmp_131*tmp_34 + tmp_132*tmp_35 + tmp_133*tmp_36;
      real_t tmp_136 = tmp_131*tmp_38 + tmp_132*tmp_39 + tmp_133*tmp_40;
      real_t tmp_137 = tmp_0*(tmp_134 - 1.0/4.0) + tmp_11*(tmp_136 - 1.0/4.0) + tmp_14*(tmp_135 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_3 + tmp_4;
      real_t tmp_141 = 0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24;
      real_t tmp_142 = 0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30;
      real_t tmp_143 = tmp_140*tmp_20 + tmp_141*tmp_26 + tmp_142*tmp_32;
      real_t tmp_144 = tmp_140*tmp_34 + tmp_141*tmp_35 + tmp_142*tmp_36;
      real_t tmp_145 = tmp_140*tmp_38 + tmp_141*tmp_39 + tmp_142*tmp_40;
      real_t tmp_146 = tmp_0*(tmp_143 - 1.0/4.0) + tmp_11*(tmp_145 - 1.0/4.0) + tmp_14*(tmp_144 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_3 + tmp_4;
      real_t tmp_150 = 0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24;
      real_t tmp_151 = 0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30;
      real_t tmp_152 = tmp_149*tmp_20 + tmp_150*tmp_26 + tmp_151*tmp_32;
      real_t tmp_153 = tmp_149*tmp_34 + tmp_150*tmp_35 + tmp_151*tmp_36;
      real_t tmp_154 = tmp_149*tmp_38 + tmp_150*tmp_39 + tmp_151*tmp_40;
      real_t tmp_155 = tmp_0*(tmp_152 - 1.0/4.0) + tmp_11*(tmp_154 - 1.0/4.0) + tmp_14*(tmp_153 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_3 + tmp_4;
      real_t tmp_159 = 0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24;
      real_t tmp_160 = 0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30;
      real_t tmp_161 = tmp_158*tmp_20 + tmp_159*tmp_26 + tmp_160*tmp_32;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = tmp_0*(tmp_161 - 1.0/4.0) + tmp_11*(tmp_163 - 1.0/4.0) + tmp_14*(tmp_162 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_168 = 0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_169 = 0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_170 = tmp_167*tmp_20 + tmp_168*tmp_26 + tmp_169*tmp_32;
      real_t tmp_171 = tmp_167*tmp_34 + tmp_168*tmp_35 + tmp_169*tmp_36;
      real_t tmp_172 = tmp_167*tmp_38 + tmp_168*tmp_39 + tmp_169*tmp_40;
      real_t tmp_173 = tmp_0*(tmp_170 - 1.0/4.0) + tmp_11*(tmp_172 - 1.0/4.0) + tmp_14*(tmp_171 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_177 = 0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_178 = 0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_179 = tmp_176*tmp_20 + tmp_177*tmp_26 + tmp_178*tmp_32;
      real_t tmp_180 = tmp_176*tmp_34 + tmp_177*tmp_35 + tmp_178*tmp_36;
      real_t tmp_181 = tmp_176*tmp_38 + tmp_177*tmp_39 + tmp_178*tmp_40;
      real_t tmp_182 = tmp_0*(tmp_179 - 1.0/4.0) + tmp_11*(tmp_181 - 1.0/4.0) + tmp_14*(tmp_180 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_186 = 0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_187 = 0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_188 = tmp_185*tmp_20 + tmp_186*tmp_26 + tmp_187*tmp_32;
      real_t tmp_189 = tmp_185*tmp_34 + tmp_186*tmp_35 + tmp_187*tmp_36;
      real_t tmp_190 = tmp_185*tmp_38 + tmp_186*tmp_39 + tmp_187*tmp_40;
      real_t tmp_191 = tmp_0*(tmp_188 - 1.0/4.0) + tmp_11*(tmp_190 - 1.0/4.0) + tmp_14*(tmp_189 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_3 + tmp_4;
      real_t tmp_195 = 0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24;
      real_t tmp_196 = 0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30;
      real_t tmp_197 = tmp_194*tmp_20 + tmp_195*tmp_26 + tmp_196*tmp_32;
      real_t tmp_198 = tmp_194*tmp_34 + tmp_195*tmp_35 + tmp_196*tmp_36;
      real_t tmp_199 = tmp_194*tmp_38 + tmp_195*tmp_39 + tmp_196*tmp_40;
      real_t tmp_200 = tmp_0*(tmp_197 - 1.0/4.0) + tmp_11*(tmp_199 - 1.0/4.0) + tmp_14*(tmp_198 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_3 + tmp_4;
      real_t tmp_204 = 0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24;
      real_t tmp_205 = 0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30;
      real_t tmp_206 = tmp_20*tmp_203 + tmp_204*tmp_26 + tmp_205*tmp_32;
      real_t tmp_207 = tmp_203*tmp_34 + tmp_204*tmp_35 + tmp_205*tmp_36;
      real_t tmp_208 = tmp_203*tmp_38 + tmp_204*tmp_39 + tmp_205*tmp_40;
      real_t tmp_209 = tmp_0*(tmp_206 - 1.0/4.0) + tmp_11*(tmp_208 - 1.0/4.0) + tmp_14*(tmp_207 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_3 + tmp_4;
      real_t tmp_213 = 0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24;
      real_t tmp_214 = 0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30;
      real_t tmp_215 = tmp_20*tmp_212 + tmp_213*tmp_26 + tmp_214*tmp_32;
      real_t tmp_216 = tmp_212*tmp_34 + tmp_213*tmp_35 + tmp_214*tmp_36;
      real_t tmp_217 = tmp_212*tmp_38 + tmp_213*tmp_39 + tmp_214*tmp_40;
      real_t tmp_218 = tmp_0*(tmp_215 - 1.0/4.0) + tmp_11*(tmp_217 - 1.0/4.0) + tmp_14*(tmp_216 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_3 + tmp_4;
      real_t tmp_222 = 0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24;
      real_t tmp_223 = 0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30;
      real_t tmp_224 = tmp_20*tmp_221 + tmp_222*tmp_26 + tmp_223*tmp_32;
      real_t tmp_225 = tmp_221*tmp_34 + tmp_222*tmp_35 + tmp_223*tmp_36;
      real_t tmp_226 = tmp_221*tmp_38 + tmp_222*tmp_39 + tmp_223*tmp_40;
      real_t tmp_227 = tmp_0*(tmp_224 - 1.0/4.0) + tmp_11*(tmp_226 - 1.0/4.0) + tmp_14*(tmp_225 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = 0.5*p_affine_13_0*tmp_32 + 0.5*p_affine_13_1*tmp_26 + 0.5*p_affine_13_2*tmp_20;
      real_t tmp_231 = 0.5*p_affine_13_0*tmp_36 + 0.5*p_affine_13_1*tmp_35 + 0.5*p_affine_13_2*tmp_34;
      real_t tmp_232 = 0.5*p_affine_13_0*tmp_40 + 0.5*p_affine_13_1*tmp_39 + 0.5*p_affine_13_2*tmp_38;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_43 - tmp_102*tmp_45) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_43 - tmp_111*tmp_45) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_43 - tmp_120*tmp_45) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_43 - tmp_129*tmp_45) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_43 - tmp_138*tmp_45) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_43 - tmp_147*tmp_45) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_43 - tmp_156*tmp_45) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_43 - tmp_165*tmp_45) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_43 - tmp_174*tmp_45) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_43 - tmp_183*tmp_45) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_43 - tmp_192*tmp_45) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_43 - tmp_201*tmp_45) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_43 - tmp_210*tmp_45) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_43 - tmp_219*tmp_45) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_43 - tmp_228*tmp_45) + tmp_49*(-tmp_42*tmp_43 + 3.0*tmp_42*tmp_44*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_43*tmp_56 - tmp_45*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_43*tmp_65 - tmp_45*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_43*tmp_74 - tmp_45*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_43*tmp_83 - tmp_45*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_43*tmp_92 - tmp_45*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_45*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_45 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_45 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_45 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_45 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_45 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_45 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_45 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_45 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_45 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_45 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_45 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_45 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_45 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_45 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_42 + 3.0*tmp_33*tmp_42*tmp_47 - tmp_33*tmp_45) + tmp_58*(-tmp_230*tmp_56 - tmp_45*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_45*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_45*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_45*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_45*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_45*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_45 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_45 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_45 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_45 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_45 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_45 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_45 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_45 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_45 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_45 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_45 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_45 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_45 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_45 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_42 + 3.0*tmp_37*tmp_42*tmp_47 - tmp_37*tmp_45) + tmp_58*(-tmp_231*tmp_56 - tmp_45*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_45*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_45*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_45*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_45*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_45 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_45 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_45 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_45 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_45 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_45 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_45 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_45 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_45 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_45 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_45 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_45 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_45 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_45 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_45 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_42 + 3.0*tmp_41*tmp_42*tmp_47 - tmp_41*tmp_45) + tmp_58*(-tmp_232*tmp_56 - tmp_45*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_45*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_45*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_45*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_45*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_7*tmp_9;
      real_t tmp_14 = tmp_0*tmp_4;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_2 - tmp_1*tmp_13 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_8;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = -tmp_2*tmp_6 + tmp_3*tmp_9;
      real_t tmp_37 = -tmp_0*tmp_3 + tmp_6*tmp_7;
      real_t tmp_38 = tmp_0*tmp_2 - tmp_13;
      real_t tmp_39 = -tmp_1*tmp_9 + tmp_4*tmp_6;
      real_t tmp_40 = tmp_0*tmp_1 - tmp_10*tmp_6;
      real_t tmp_41 = tmp_11 - tmp_14;
      real_t tmp_42 = tmp_0*(tmp_21*tmp_5 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0) + tmp_10*(tmp_21*tmp_36 + tmp_28*tmp_37 + tmp_35*tmp_38 - 1.0/4.0) + tmp_7*(tmp_21*tmp_39 + tmp_28*tmp_40 + tmp_35*tmp_41 - 1.0/4.0);
      real_t tmp_43 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_44 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_45 = tmp_43*tmp_44;
      real_t tmp_46 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_48 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_49 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_50 = tmp_46*tmp_49;
      real_t tmp_51 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_52 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_53 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_54 = tmp_49*tmp_51;
      real_t tmp_55 = tmp_43*tmp_52;
      real_t tmp_56 = tmp_47*tmp_53;
      real_t tmp_57 = 1.0 / (-tmp_44*tmp_54 + tmp_45*tmp_53 - tmp_46*tmp_56 + tmp_47*tmp_51*tmp_52 + tmp_48*tmp_50 - tmp_48*tmp_55);
      real_t tmp_58 = tmp_57*(tmp_45 - tmp_46*tmp_47);
      real_t tmp_59 = tmp_57*(-tmp_43*tmp_48 + tmp_47*tmp_51);
      real_t tmp_60 = tmp_57*(-tmp_44*tmp_51 + tmp_46*tmp_48);
      real_t tmp_61 = tmp_57*(-tmp_44*tmp_49 + tmp_47*tmp_52);
      real_t tmp_62 = tmp_57*(tmp_48*tmp_49 - tmp_56);
      real_t tmp_63 = tmp_57*(tmp_44*tmp_53 - tmp_48*tmp_52);
      real_t tmp_64 = tmp_57*(tmp_50 - tmp_55);
      real_t tmp_65 = tmp_57*(tmp_43*tmp_53 - tmp_54);
      real_t tmp_66 = tmp_57*(-tmp_46*tmp_53 + tmp_51*tmp_52);
      real_t tmp_67 = 0.5*p_affine_13_0*(-tmp_58 - tmp_59 - tmp_60) + 0.5*p_affine_13_1*(-tmp_61 - tmp_62 - tmp_63) + 0.5*p_affine_13_2*(-tmp_64 - tmp_65 - tmp_66);
      real_t tmp_68 = tmp_0*tmp_15;
      real_t tmp_69 = tmp_10*tmp_15;
      real_t tmp_70 = tmp_15*tmp_7;
      real_t tmp_71 = p_affine_13_0*(tmp_29*tmp_68 + tmp_38*tmp_69 + tmp_41*tmp_70) + p_affine_13_1*(tmp_22*tmp_68 + tmp_37*tmp_69 + tmp_40*tmp_70) + p_affine_13_2*(tmp_36*tmp_69 + tmp_39*tmp_70 + tmp_5*tmp_68);
      real_t tmp_72 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_73 = tmp_19 + tmp_72;
      real_t tmp_74 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_75 = tmp_26 + tmp_74;
      real_t tmp_76 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_77 = tmp_33 + tmp_76;
      real_t tmp_78 = tmp_60*tmp_77 + tmp_63*tmp_75 + tmp_66*tmp_73;
      real_t tmp_79 = tmp_59*tmp_77 + tmp_62*tmp_75 + tmp_65*tmp_73;
      real_t tmp_80 = tmp_58*tmp_77 + tmp_61*tmp_75 + tmp_64*tmp_73;
      real_t tmp_81 = -tmp_78 - tmp_79 - tmp_80 + 1;
      real_t tmp_82 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_83 = 3.0*std::pow(tmp_82, -0.25);
      real_t tmp_84 = tmp_42*tmp_83;
      real_t tmp_85 = 1.0*std::pow(tmp_82, 1.0/2.0);
      real_t tmp_86 = 0.0068572537431980923*tmp_85;
      real_t tmp_87 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_88 = tmp_15*(tmp_20 + tmp_87);
      real_t tmp_89 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_90 = tmp_15*(tmp_27 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_92 = tmp_15*(tmp_34 + tmp_91);
      real_t tmp_93 = tmp_0*(tmp_22*tmp_90 + tmp_29*tmp_92 + tmp_5*tmp_88 - 1.0/4.0) + tmp_10*(tmp_36*tmp_88 + tmp_37*tmp_90 + tmp_38*tmp_92 - 1.0/4.0) + tmp_7*(tmp_39*tmp_88 + tmp_40*tmp_90 + tmp_41*tmp_92 - 1.0/4.0);
      real_t tmp_94 = tmp_72 + tmp_87;
      real_t tmp_95 = tmp_74 + tmp_89;
      real_t tmp_96 = tmp_76 + tmp_91;
      real_t tmp_97 = tmp_60*tmp_96 + tmp_63*tmp_95 + tmp_66*tmp_94;
      real_t tmp_98 = tmp_59*tmp_96 + tmp_62*tmp_95 + tmp_65*tmp_94;
      real_t tmp_99 = tmp_58*tmp_96 + tmp_61*tmp_95 + tmp_64*tmp_94;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_83*tmp_93;
      real_t tmp_102 = 0.037198804536718075*tmp_85;
      real_t tmp_103 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_104 = tmp_15*(tmp_103 + tmp_20);
      real_t tmp_105 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_106 = tmp_15*(tmp_105 + tmp_27);
      real_t tmp_107 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_108 = tmp_15*(tmp_107 + tmp_34);
      real_t tmp_109 = tmp_0*(tmp_104*tmp_5 + tmp_106*tmp_22 + tmp_108*tmp_29 - 1.0/4.0) + tmp_10*(tmp_104*tmp_36 + tmp_106*tmp_37 + tmp_108*tmp_38 - 1.0/4.0) + tmp_7*(tmp_104*tmp_39 + tmp_106*tmp_40 + tmp_108*tmp_41 - 1.0/4.0);
      real_t tmp_110 = tmp_103 + tmp_72;
      real_t tmp_111 = tmp_105 + tmp_74;
      real_t tmp_112 = tmp_107 + tmp_76;
      real_t tmp_113 = tmp_110*tmp_66 + tmp_111*tmp_63 + tmp_112*tmp_60;
      real_t tmp_114 = tmp_110*tmp_65 + tmp_111*tmp_62 + tmp_112*tmp_59;
      real_t tmp_115 = tmp_110*tmp_64 + tmp_111*tmp_61 + tmp_112*tmp_58;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_109*tmp_83;
      real_t tmp_118 = 0.020848748529055869*tmp_85;
      real_t tmp_119 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_120 = tmp_15*(tmp_119 + tmp_20);
      real_t tmp_121 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_122 = tmp_15*(tmp_121 + tmp_27);
      real_t tmp_123 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_124 = tmp_15*(tmp_123 + tmp_34);
      real_t tmp_125 = tmp_0*(tmp_120*tmp_5 + tmp_122*tmp_22 + tmp_124*tmp_29 - 1.0/4.0) + tmp_10*(tmp_120*tmp_36 + tmp_122*tmp_37 + tmp_124*tmp_38 - 1.0/4.0) + tmp_7*(tmp_120*tmp_39 + tmp_122*tmp_40 + tmp_124*tmp_41 - 1.0/4.0);
      real_t tmp_126 = tmp_119 + tmp_72;
      real_t tmp_127 = tmp_121 + tmp_74;
      real_t tmp_128 = tmp_123 + tmp_76;
      real_t tmp_129 = tmp_126*tmp_66 + tmp_127*tmp_63 + tmp_128*tmp_60;
      real_t tmp_130 = tmp_126*tmp_65 + tmp_127*tmp_62 + tmp_128*tmp_59;
      real_t tmp_131 = tmp_126*tmp_64 + tmp_127*tmp_61 + tmp_128*tmp_58;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = tmp_125*tmp_83;
      real_t tmp_134 = 0.019202922745021479*tmp_85;
      real_t tmp_135 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_20);
      real_t tmp_137 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_27);
      real_t tmp_139 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_140 = tmp_15*(tmp_139 + tmp_34);
      real_t tmp_141 = tmp_0*(tmp_136*tmp_5 + tmp_138*tmp_22 + tmp_140*tmp_29 - 1.0/4.0) + tmp_10*(tmp_136*tmp_36 + tmp_138*tmp_37 + tmp_140*tmp_38 - 1.0/4.0) + tmp_7*(tmp_136*tmp_39 + tmp_138*tmp_40 + tmp_140*tmp_41 - 1.0/4.0);
      real_t tmp_142 = tmp_135 + tmp_72;
      real_t tmp_143 = tmp_137 + tmp_74;
      real_t tmp_144 = tmp_139 + tmp_76;
      real_t tmp_145 = tmp_142*tmp_66 + tmp_143*tmp_63 + tmp_144*tmp_60;
      real_t tmp_146 = tmp_142*tmp_65 + tmp_143*tmp_62 + tmp_144*tmp_59;
      real_t tmp_147 = tmp_142*tmp_64 + tmp_143*tmp_61 + tmp_144*tmp_58;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = tmp_141*tmp_83;
      real_t tmp_150 = 0.020848748529055869*tmp_85;
      real_t tmp_151 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_20);
      real_t tmp_153 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_154 = tmp_15*(tmp_153 + tmp_27);
      real_t tmp_155 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_156 = tmp_15*(tmp_155 + tmp_34);
      real_t tmp_157 = tmp_0*(tmp_152*tmp_5 + tmp_154*tmp_22 + tmp_156*tmp_29 - 1.0/4.0) + tmp_10*(tmp_152*tmp_36 + tmp_154*tmp_37 + tmp_156*tmp_38 - 1.0/4.0) + tmp_7*(tmp_152*tmp_39 + tmp_154*tmp_40 + tmp_156*tmp_41 - 1.0/4.0);
      real_t tmp_158 = tmp_151 + tmp_72;
      real_t tmp_159 = tmp_153 + tmp_74;
      real_t tmp_160 = tmp_155 + tmp_76;
      real_t tmp_161 = tmp_158*tmp_66 + tmp_159*tmp_63 + tmp_160*tmp_60;
      real_t tmp_162 = tmp_158*tmp_65 + tmp_159*tmp_62 + tmp_160*tmp_59;
      real_t tmp_163 = tmp_158*tmp_64 + tmp_159*tmp_61 + tmp_160*tmp_58;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = tmp_157*tmp_83;
      real_t tmp_166 = 0.019202922745021479*tmp_85;
      real_t tmp_167 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_168 = tmp_15*(tmp_167 + tmp_20);
      real_t tmp_169 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_170 = tmp_15*(tmp_169 + tmp_27);
      real_t tmp_171 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_172 = tmp_15*(tmp_171 + tmp_34);
      real_t tmp_173 = tmp_0*(tmp_168*tmp_5 + tmp_170*tmp_22 + tmp_172*tmp_29 - 1.0/4.0) + tmp_10*(tmp_168*tmp_36 + tmp_170*tmp_37 + tmp_172*tmp_38 - 1.0/4.0) + tmp_7*(tmp_168*tmp_39 + tmp_170*tmp_40 + tmp_172*tmp_41 - 1.0/4.0);
      real_t tmp_174 = tmp_167 + tmp_72;
      real_t tmp_175 = tmp_169 + tmp_74;
      real_t tmp_176 = tmp_171 + tmp_76;
      real_t tmp_177 = tmp_174*tmp_66 + tmp_175*tmp_63 + tmp_176*tmp_60;
      real_t tmp_178 = tmp_174*tmp_65 + tmp_175*tmp_62 + tmp_176*tmp_59;
      real_t tmp_179 = tmp_174*tmp_64 + tmp_175*tmp_61 + tmp_176*tmp_58;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = tmp_173*tmp_83;
      real_t tmp_182 = 0.020848748529055869*tmp_85;
      real_t tmp_183 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_184 = tmp_15*(tmp_183 + tmp_20);
      real_t tmp_185 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_27);
      real_t tmp_187 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_34);
      real_t tmp_189 = tmp_0*(tmp_184*tmp_5 + tmp_186*tmp_22 + tmp_188*tmp_29 - 1.0/4.0) + tmp_10*(tmp_184*tmp_36 + tmp_186*tmp_37 + tmp_188*tmp_38 - 1.0/4.0) + tmp_7*(tmp_184*tmp_39 + tmp_186*tmp_40 + tmp_188*tmp_41 - 1.0/4.0);
      real_t tmp_190 = tmp_183 + tmp_72;
      real_t tmp_191 = tmp_185 + tmp_74;
      real_t tmp_192 = tmp_187 + tmp_76;
      real_t tmp_193 = tmp_190*tmp_66 + tmp_191*tmp_63 + tmp_192*tmp_60;
      real_t tmp_194 = tmp_190*tmp_65 + tmp_191*tmp_62 + tmp_192*tmp_59;
      real_t tmp_195 = tmp_190*tmp_64 + tmp_191*tmp_61 + tmp_192*tmp_58;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = tmp_189*tmp_83;
      real_t tmp_198 = 0.019202922745021479*tmp_85;
      real_t tmp_199 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_20);
      real_t tmp_201 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_27);
      real_t tmp_203 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_34);
      real_t tmp_205 = tmp_0*(tmp_200*tmp_5 + tmp_202*tmp_22 + tmp_204*tmp_29 - 1.0/4.0) + tmp_10*(tmp_200*tmp_36 + tmp_202*tmp_37 + tmp_204*tmp_38 - 1.0/4.0) + tmp_7*(tmp_200*tmp_39 + tmp_202*tmp_40 + tmp_204*tmp_41 - 1.0/4.0);
      real_t tmp_206 = tmp_199 + tmp_72;
      real_t tmp_207 = tmp_201 + tmp_74;
      real_t tmp_208 = tmp_203 + tmp_76;
      real_t tmp_209 = tmp_206*tmp_66 + tmp_207*tmp_63 + tmp_208*tmp_60;
      real_t tmp_210 = tmp_206*tmp_65 + tmp_207*tmp_62 + tmp_208*tmp_59;
      real_t tmp_211 = tmp_206*tmp_64 + tmp_207*tmp_61 + tmp_208*tmp_58;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = tmp_205*tmp_83;
      real_t tmp_214 = 0.020848748529055869*tmp_85;
      real_t tmp_215 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_216 = tmp_15*(tmp_20 + tmp_215);
      real_t tmp_217 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_218 = tmp_15*(tmp_217 + tmp_27);
      real_t tmp_219 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_34);
      real_t tmp_221 = tmp_0*(tmp_216*tmp_5 + tmp_218*tmp_22 + tmp_220*tmp_29 - 1.0/4.0) + tmp_10*(tmp_216*tmp_36 + tmp_218*tmp_37 + tmp_220*tmp_38 - 1.0/4.0) + tmp_7*(tmp_216*tmp_39 + tmp_218*tmp_40 + tmp_220*tmp_41 - 1.0/4.0);
      real_t tmp_222 = tmp_215 + tmp_72;
      real_t tmp_223 = tmp_217 + tmp_74;
      real_t tmp_224 = tmp_219 + tmp_76;
      real_t tmp_225 = tmp_222*tmp_66 + tmp_223*tmp_63 + tmp_224*tmp_60;
      real_t tmp_226 = tmp_222*tmp_65 + tmp_223*tmp_62 + tmp_224*tmp_59;
      real_t tmp_227 = tmp_222*tmp_64 + tmp_223*tmp_61 + tmp_224*tmp_58;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_221*tmp_83;
      real_t tmp_230 = 0.019202922745021479*tmp_85;
      real_t tmp_231 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_232 = tmp_15*(tmp_20 + tmp_231);
      real_t tmp_233 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_234 = tmp_15*(tmp_233 + tmp_27);
      real_t tmp_235 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_236 = tmp_15*(tmp_235 + tmp_34);
      real_t tmp_237 = tmp_0*(tmp_22*tmp_234 + tmp_232*tmp_5 + tmp_236*tmp_29 - 1.0/4.0) + tmp_10*(tmp_232*tmp_36 + tmp_234*tmp_37 + tmp_236*tmp_38 - 1.0/4.0) + tmp_7*(tmp_232*tmp_39 + tmp_234*tmp_40 + tmp_236*tmp_41 - 1.0/4.0);
      real_t tmp_238 = tmp_231 + tmp_72;
      real_t tmp_239 = tmp_233 + tmp_74;
      real_t tmp_240 = tmp_235 + tmp_76;
      real_t tmp_241 = tmp_238*tmp_66 + tmp_239*tmp_63 + tmp_240*tmp_60;
      real_t tmp_242 = tmp_238*tmp_65 + tmp_239*tmp_62 + tmp_240*tmp_59;
      real_t tmp_243 = tmp_238*tmp_64 + tmp_239*tmp_61 + tmp_240*tmp_58;
      real_t tmp_244 = -tmp_241 - tmp_242 - tmp_243 + 1;
      real_t tmp_245 = tmp_237*tmp_83;
      real_t tmp_246 = 0.020848748529055869*tmp_85;
      real_t tmp_247 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_248 = tmp_15*(tmp_20 + tmp_247);
      real_t tmp_249 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_250 = tmp_15*(tmp_249 + tmp_27);
      real_t tmp_251 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_252 = tmp_15*(tmp_251 + tmp_34);
      real_t tmp_253 = tmp_0*(tmp_22*tmp_250 + tmp_248*tmp_5 + tmp_252*tmp_29 - 1.0/4.0) + tmp_10*(tmp_248*tmp_36 + tmp_250*tmp_37 + tmp_252*tmp_38 - 1.0/4.0) + tmp_7*(tmp_248*tmp_39 + tmp_250*tmp_40 + tmp_252*tmp_41 - 1.0/4.0);
      real_t tmp_254 = tmp_247 + tmp_72;
      real_t tmp_255 = tmp_249 + tmp_74;
      real_t tmp_256 = tmp_251 + tmp_76;
      real_t tmp_257 = tmp_254*tmp_66 + tmp_255*tmp_63 + tmp_256*tmp_60;
      real_t tmp_258 = tmp_254*tmp_65 + tmp_255*tmp_62 + tmp_256*tmp_59;
      real_t tmp_259 = tmp_254*tmp_64 + tmp_255*tmp_61 + tmp_256*tmp_58;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_253*tmp_83;
      real_t tmp_262 = 0.019202922745021479*tmp_85;
      real_t tmp_263 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_264 = tmp_15*(tmp_20 + tmp_263);
      real_t tmp_265 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_27);
      real_t tmp_267 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_268 = tmp_15*(tmp_267 + tmp_34);
      real_t tmp_269 = tmp_0*(tmp_22*tmp_266 + tmp_264*tmp_5 + tmp_268*tmp_29 - 1.0/4.0) + tmp_10*(tmp_264*tmp_36 + tmp_266*tmp_37 + tmp_268*tmp_38 - 1.0/4.0) + tmp_7*(tmp_264*tmp_39 + tmp_266*tmp_40 + tmp_268*tmp_41 - 1.0/4.0);
      real_t tmp_270 = tmp_263 + tmp_72;
      real_t tmp_271 = tmp_265 + tmp_74;
      real_t tmp_272 = tmp_267 + tmp_76;
      real_t tmp_273 = tmp_270*tmp_66 + tmp_271*tmp_63 + tmp_272*tmp_60;
      real_t tmp_274 = tmp_270*tmp_65 + tmp_271*tmp_62 + tmp_272*tmp_59;
      real_t tmp_275 = tmp_270*tmp_64 + tmp_271*tmp_61 + tmp_272*tmp_58;
      real_t tmp_276 = -tmp_273 - tmp_274 - tmp_275 + 1;
      real_t tmp_277 = tmp_269*tmp_83;
      real_t tmp_278 = 0.042507265838595799*tmp_85;
      real_t tmp_279 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_280 = tmp_15*(tmp_20 + tmp_279);
      real_t tmp_281 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_282 = tmp_15*(tmp_27 + tmp_281);
      real_t tmp_283 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_284 = tmp_15*(tmp_283 + tmp_34);
      real_t tmp_285 = tmp_0*(tmp_22*tmp_282 + tmp_280*tmp_5 + tmp_284*tmp_29 - 1.0/4.0) + tmp_10*(tmp_280*tmp_36 + tmp_282*tmp_37 + tmp_284*tmp_38 - 1.0/4.0) + tmp_7*(tmp_280*tmp_39 + tmp_282*tmp_40 + tmp_284*tmp_41 - 1.0/4.0);
      real_t tmp_286 = tmp_279 + tmp_72;
      real_t tmp_287 = tmp_281 + tmp_74;
      real_t tmp_288 = tmp_283 + tmp_76;
      real_t tmp_289 = tmp_286*tmp_66 + tmp_287*tmp_63 + tmp_288*tmp_60;
      real_t tmp_290 = tmp_286*tmp_65 + tmp_287*tmp_62 + tmp_288*tmp_59;
      real_t tmp_291 = tmp_286*tmp_64 + tmp_287*tmp_61 + tmp_288*tmp_58;
      real_t tmp_292 = -tmp_289 - tmp_290 - tmp_291 + 1;
      real_t tmp_293 = tmp_285*tmp_83;
      real_t tmp_294 = 0.020848748529055869*tmp_85;
      real_t tmp_295 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_296 = tmp_15*(tmp_20 + tmp_295);
      real_t tmp_297 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_298 = tmp_15*(tmp_27 + tmp_297);
      real_t tmp_299 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_300 = tmp_15*(tmp_299 + tmp_34);
      real_t tmp_301 = tmp_0*(tmp_22*tmp_298 + tmp_29*tmp_300 + tmp_296*tmp_5 - 1.0/4.0) + tmp_10*(tmp_296*tmp_36 + tmp_298*tmp_37 + tmp_300*tmp_38 - 1.0/4.0) + tmp_7*(tmp_296*tmp_39 + tmp_298*tmp_40 + tmp_300*tmp_41 - 1.0/4.0);
      real_t tmp_302 = tmp_295 + tmp_72;
      real_t tmp_303 = tmp_297 + tmp_74;
      real_t tmp_304 = tmp_299 + tmp_76;
      real_t tmp_305 = tmp_302*tmp_66 + tmp_303*tmp_63 + tmp_304*tmp_60;
      real_t tmp_306 = tmp_302*tmp_65 + tmp_303*tmp_62 + tmp_304*tmp_59;
      real_t tmp_307 = tmp_302*tmp_64 + tmp_303*tmp_61 + tmp_304*tmp_58;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_301*tmp_83;
      real_t tmp_310 = 0.0068572537431980923*tmp_85;
      real_t tmp_311 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_312 = tmp_15*(tmp_20 + tmp_311);
      real_t tmp_313 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_314 = tmp_15*(tmp_27 + tmp_313);
      real_t tmp_315 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_316 = tmp_15*(tmp_315 + tmp_34);
      real_t tmp_317 = tmp_0*(tmp_22*tmp_314 + tmp_29*tmp_316 + tmp_312*tmp_5 - 1.0/4.0) + tmp_10*(tmp_312*tmp_36 + tmp_314*tmp_37 + tmp_316*tmp_38 - 1.0/4.0) + tmp_7*(tmp_312*tmp_39 + tmp_314*tmp_40 + tmp_316*tmp_41 - 1.0/4.0);
      real_t tmp_318 = tmp_311 + tmp_72;
      real_t tmp_319 = tmp_313 + tmp_74;
      real_t tmp_320 = tmp_315 + tmp_76;
      real_t tmp_321 = tmp_318*tmp_66 + tmp_319*tmp_63 + tmp_320*tmp_60;
      real_t tmp_322 = tmp_318*tmp_65 + tmp_319*tmp_62 + tmp_320*tmp_59;
      real_t tmp_323 = tmp_318*tmp_64 + tmp_319*tmp_61 + tmp_320*tmp_58;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = tmp_317*tmp_83;
      real_t tmp_326 = 0.037198804536718075*tmp_85;
      real_t tmp_327 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_328 = tmp_15*(tmp_20 + tmp_327);
      real_t tmp_329 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_330 = tmp_15*(tmp_27 + tmp_329);
      real_t tmp_331 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_332 = tmp_15*(tmp_331 + tmp_34);
      real_t tmp_333 = tmp_0*(tmp_22*tmp_330 + tmp_29*tmp_332 + tmp_328*tmp_5 - 1.0/4.0) + tmp_10*(tmp_328*tmp_36 + tmp_330*tmp_37 + tmp_332*tmp_38 - 1.0/4.0) + tmp_7*(tmp_328*tmp_39 + tmp_330*tmp_40 + tmp_332*tmp_41 - 1.0/4.0);
      real_t tmp_334 = tmp_327 + tmp_72;
      real_t tmp_335 = tmp_329 + tmp_74;
      real_t tmp_336 = tmp_331 + tmp_76;
      real_t tmp_337 = tmp_334*tmp_66 + tmp_335*tmp_63 + tmp_336*tmp_60;
      real_t tmp_338 = tmp_334*tmp_65 + tmp_335*tmp_62 + tmp_336*tmp_59;
      real_t tmp_339 = tmp_334*tmp_64 + tmp_335*tmp_61 + tmp_336*tmp_58;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_83;
      real_t tmp_342 = 0.042507265838595799*tmp_85;
      real_t tmp_343 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_344 = tmp_15*(tmp_20 + tmp_343);
      real_t tmp_345 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_346 = tmp_15*(tmp_27 + tmp_345);
      real_t tmp_347 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_348 = tmp_15*(tmp_34 + tmp_347);
      real_t tmp_349 = tmp_0*(tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_5 - 1.0/4.0) + tmp_10*(tmp_344*tmp_36 + tmp_346*tmp_37 + tmp_348*tmp_38 - 1.0/4.0) + tmp_7*(tmp_344*tmp_39 + tmp_346*tmp_40 + tmp_348*tmp_41 - 1.0/4.0);
      real_t tmp_350 = tmp_343 + tmp_72;
      real_t tmp_351 = tmp_345 + tmp_74;
      real_t tmp_352 = tmp_347 + tmp_76;
      real_t tmp_353 = tmp_350*tmp_66 + tmp_351*tmp_63 + tmp_352*tmp_60;
      real_t tmp_354 = tmp_350*tmp_65 + tmp_351*tmp_62 + tmp_352*tmp_59;
      real_t tmp_355 = tmp_350*tmp_64 + tmp_351*tmp_61 + tmp_352*tmp_58;
      real_t tmp_356 = -tmp_353 - tmp_354 - tmp_355 + 1;
      real_t tmp_357 = tmp_349*tmp_83;
      real_t tmp_358 = 0.0068572537431980923*tmp_85;
      real_t tmp_359 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_360 = tmp_15*(tmp_20 + tmp_359);
      real_t tmp_361 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_362 = tmp_15*(tmp_27 + tmp_361);
      real_t tmp_363 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_364 = tmp_15*(tmp_34 + tmp_363);
      real_t tmp_365 = tmp_0*(tmp_22*tmp_362 + tmp_29*tmp_364 + tmp_360*tmp_5 - 1.0/4.0) + tmp_10*(tmp_36*tmp_360 + tmp_362*tmp_37 + tmp_364*tmp_38 - 1.0/4.0) + tmp_7*(tmp_360*tmp_39 + tmp_362*tmp_40 + tmp_364*tmp_41 - 1.0/4.0);
      real_t tmp_366 = tmp_359 + tmp_72;
      real_t tmp_367 = tmp_361 + tmp_74;
      real_t tmp_368 = tmp_363 + tmp_76;
      real_t tmp_369 = tmp_366*tmp_66 + tmp_367*tmp_63 + tmp_368*tmp_60;
      real_t tmp_370 = tmp_366*tmp_65 + tmp_367*tmp_62 + tmp_368*tmp_59;
      real_t tmp_371 = tmp_366*tmp_64 + tmp_367*tmp_61 + tmp_368*tmp_58;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_365*tmp_83;
      real_t tmp_374 = 0.037198804536718075*tmp_85;
      real_t tmp_375 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_0*(tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_5 - 1.0/4.0) + tmp_10*(tmp_36*tmp_376 + tmp_37*tmp_378 + tmp_38*tmp_380 - 1.0/4.0) + tmp_7*(tmp_376*tmp_39 + tmp_378*tmp_40 + tmp_380*tmp_41 - 1.0/4.0);
      real_t tmp_382 = tmp_375 + tmp_72;
      real_t tmp_383 = tmp_377 + tmp_74;
      real_t tmp_384 = tmp_379 + tmp_76;
      real_t tmp_385 = tmp_382*tmp_66 + tmp_383*tmp_63 + tmp_384*tmp_60;
      real_t tmp_386 = tmp_382*tmp_65 + tmp_383*tmp_62 + tmp_384*tmp_59;
      real_t tmp_387 = tmp_382*tmp_64 + tmp_383*tmp_61 + tmp_384*tmp_58;
      real_t tmp_388 = -tmp_385 - tmp_386 - tmp_387 + 1;
      real_t tmp_389 = tmp_381*tmp_83;
      real_t tmp_390 = 0.042507265838595799*tmp_85;
      real_t tmp_391 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_392 = tmp_15*(tmp_20 + tmp_391);
      real_t tmp_393 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_394 = tmp_15*(tmp_27 + tmp_393);
      real_t tmp_395 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_396 = tmp_15*(tmp_34 + tmp_395);
      real_t tmp_397 = tmp_0*(tmp_22*tmp_394 + tmp_29*tmp_396 + tmp_392*tmp_5 - 1.0/4.0) + tmp_10*(tmp_36*tmp_392 + tmp_37*tmp_394 + tmp_38*tmp_396 - 1.0/4.0) + tmp_7*(tmp_39*tmp_392 + tmp_394*tmp_40 + tmp_396*tmp_41 - 1.0/4.0);
      real_t tmp_398 = tmp_391 + tmp_72;
      real_t tmp_399 = tmp_393 + tmp_74;
      real_t tmp_400 = tmp_395 + tmp_76;
      real_t tmp_401 = tmp_398*tmp_66 + tmp_399*tmp_63 + tmp_400*tmp_60;
      real_t tmp_402 = tmp_398*tmp_65 + tmp_399*tmp_62 + tmp_400*tmp_59;
      real_t tmp_403 = tmp_398*tmp_64 + tmp_399*tmp_61 + tmp_400*tmp_58;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_397*tmp_83;
      real_t tmp_406 = 0.019202922745021479*tmp_85;
      real_t tmp_407 = 0.5*p_affine_13_0*tmp_60 + 0.5*p_affine_13_1*tmp_63 + 0.5*p_affine_13_2*tmp_66;
      real_t tmp_408 = 0.5*p_affine_13_0*tmp_59 + 0.5*p_affine_13_1*tmp_62 + 0.5*p_affine_13_2*tmp_65;
      real_t tmp_409 = 0.5*p_affine_13_0*tmp_58 + 0.5*p_affine_13_1*tmp_61 + 0.5*p_affine_13_2*tmp_64;
      real_t a_0_0 = tmp_102*(-tmp_100*tmp_101 + 0.5*tmp_100*tmp_71 - tmp_67*tmp_93) + tmp_118*(-tmp_109*tmp_67 - tmp_116*tmp_117 + 0.5*tmp_116*tmp_71) + tmp_134*(-tmp_125*tmp_67 - tmp_132*tmp_133 + 0.5*tmp_132*tmp_71) + tmp_150*(-tmp_141*tmp_67 - tmp_148*tmp_149 + 0.5*tmp_148*tmp_71) + tmp_166*(-tmp_157*tmp_67 - tmp_164*tmp_165 + 0.5*tmp_164*tmp_71) + tmp_182*(-tmp_173*tmp_67 - tmp_180*tmp_181 + 0.5*tmp_180*tmp_71) + tmp_198*(-tmp_189*tmp_67 - tmp_196*tmp_197 + 0.5*tmp_196*tmp_71) + tmp_214*(-tmp_205*tmp_67 - tmp_212*tmp_213 + 0.5*tmp_212*tmp_71) + tmp_230*(-tmp_221*tmp_67 - tmp_228*tmp_229 + 0.5*tmp_228*tmp_71) + tmp_246*(-tmp_237*tmp_67 - tmp_244*tmp_245 + 0.5*tmp_244*tmp_71) + tmp_262*(-tmp_253*tmp_67 - tmp_260*tmp_261 + 0.5*tmp_260*tmp_71) + tmp_278*(-tmp_269*tmp_67 - tmp_276*tmp_277 + 0.5*tmp_276*tmp_71) + tmp_294*(-tmp_285*tmp_67 - tmp_292*tmp_293 + 0.5*tmp_292*tmp_71) + tmp_310*(-tmp_301*tmp_67 - tmp_308*tmp_309 + 0.5*tmp_308*tmp_71) + tmp_326*(-tmp_317*tmp_67 - tmp_324*tmp_325 + 0.5*tmp_324*tmp_71) + tmp_342*(-tmp_333*tmp_67 - tmp_340*tmp_341 + 0.5*tmp_340*tmp_71) + tmp_358*(-tmp_349*tmp_67 - tmp_356*tmp_357 + 0.5*tmp_356*tmp_71) + tmp_374*(-tmp_365*tmp_67 - tmp_372*tmp_373 + 0.5*tmp_372*tmp_71) + tmp_390*(-tmp_381*tmp_67 - tmp_388*tmp_389 + 0.5*tmp_388*tmp_71) + tmp_406*(-tmp_397*tmp_67 - tmp_404*tmp_405 + 0.5*tmp_404*tmp_71) + tmp_86*(-tmp_42*tmp_67 + 0.5*tmp_71*tmp_81 - tmp_81*tmp_84);
      real_t a_0_1 = tmp_102*(-tmp_101*tmp_97 - tmp_407*tmp_93 + 0.5*tmp_71*tmp_97) + tmp_118*(-tmp_109*tmp_407 - tmp_113*tmp_117 + 0.5*tmp_113*tmp_71) + tmp_134*(-tmp_125*tmp_407 - tmp_129*tmp_133 + 0.5*tmp_129*tmp_71) + tmp_150*(-tmp_141*tmp_407 - tmp_145*tmp_149 + 0.5*tmp_145*tmp_71) + tmp_166*(-tmp_157*tmp_407 - tmp_161*tmp_165 + 0.5*tmp_161*tmp_71) + tmp_182*(-tmp_173*tmp_407 - tmp_177*tmp_181 + 0.5*tmp_177*tmp_71) + tmp_198*(-tmp_189*tmp_407 - tmp_193*tmp_197 + 0.5*tmp_193*tmp_71) + tmp_214*(-tmp_205*tmp_407 - tmp_209*tmp_213 + 0.5*tmp_209*tmp_71) + tmp_230*(-tmp_221*tmp_407 - tmp_225*tmp_229 + 0.5*tmp_225*tmp_71) + tmp_246*(-tmp_237*tmp_407 - tmp_241*tmp_245 + 0.5*tmp_241*tmp_71) + tmp_262*(-tmp_253*tmp_407 - tmp_257*tmp_261 + 0.5*tmp_257*tmp_71) + tmp_278*(-tmp_269*tmp_407 - tmp_273*tmp_277 + 0.5*tmp_273*tmp_71) + tmp_294*(-tmp_285*tmp_407 - tmp_289*tmp_293 + 0.5*tmp_289*tmp_71) + tmp_310*(-tmp_301*tmp_407 - tmp_305*tmp_309 + 0.5*tmp_305*tmp_71) + tmp_326*(-tmp_317*tmp_407 - tmp_321*tmp_325 + 0.5*tmp_321*tmp_71) + tmp_342*(-tmp_333*tmp_407 - tmp_337*tmp_341 + 0.5*tmp_337*tmp_71) + tmp_358*(-tmp_349*tmp_407 - tmp_353*tmp_357 + 0.5*tmp_353*tmp_71) + tmp_374*(-tmp_365*tmp_407 - tmp_369*tmp_373 + 0.5*tmp_369*tmp_71) + tmp_390*(-tmp_381*tmp_407 - tmp_385*tmp_389 + 0.5*tmp_385*tmp_71) + tmp_406*(-tmp_397*tmp_407 - tmp_401*tmp_405 + 0.5*tmp_401*tmp_71) + tmp_86*(-tmp_407*tmp_42 + 0.5*tmp_71*tmp_78 - tmp_78*tmp_84);
      real_t a_0_2 = tmp_102*(-tmp_101*tmp_98 - tmp_408*tmp_93 + 0.5*tmp_71*tmp_98) + tmp_118*(-tmp_109*tmp_408 - tmp_114*tmp_117 + 0.5*tmp_114*tmp_71) + tmp_134*(-tmp_125*tmp_408 - tmp_130*tmp_133 + 0.5*tmp_130*tmp_71) + tmp_150*(-tmp_141*tmp_408 - tmp_146*tmp_149 + 0.5*tmp_146*tmp_71) + tmp_166*(-tmp_157*tmp_408 - tmp_162*tmp_165 + 0.5*tmp_162*tmp_71) + tmp_182*(-tmp_173*tmp_408 - tmp_178*tmp_181 + 0.5*tmp_178*tmp_71) + tmp_198*(-tmp_189*tmp_408 - tmp_194*tmp_197 + 0.5*tmp_194*tmp_71) + tmp_214*(-tmp_205*tmp_408 - tmp_210*tmp_213 + 0.5*tmp_210*tmp_71) + tmp_230*(-tmp_221*tmp_408 - tmp_226*tmp_229 + 0.5*tmp_226*tmp_71) + tmp_246*(-tmp_237*tmp_408 - tmp_242*tmp_245 + 0.5*tmp_242*tmp_71) + tmp_262*(-tmp_253*tmp_408 - tmp_258*tmp_261 + 0.5*tmp_258*tmp_71) + tmp_278*(-tmp_269*tmp_408 - tmp_274*tmp_277 + 0.5*tmp_274*tmp_71) + tmp_294*(-tmp_285*tmp_408 - tmp_290*tmp_293 + 0.5*tmp_290*tmp_71) + tmp_310*(-tmp_301*tmp_408 - tmp_306*tmp_309 + 0.5*tmp_306*tmp_71) + tmp_326*(-tmp_317*tmp_408 - tmp_322*tmp_325 + 0.5*tmp_322*tmp_71) + tmp_342*(-tmp_333*tmp_408 - tmp_338*tmp_341 + 0.5*tmp_338*tmp_71) + tmp_358*(-tmp_349*tmp_408 - tmp_354*tmp_357 + 0.5*tmp_354*tmp_71) + tmp_374*(-tmp_365*tmp_408 - tmp_370*tmp_373 + 0.5*tmp_370*tmp_71) + tmp_390*(-tmp_381*tmp_408 - tmp_386*tmp_389 + 0.5*tmp_386*tmp_71) + tmp_406*(-tmp_397*tmp_408 - tmp_402*tmp_405 + 0.5*tmp_402*tmp_71) + tmp_86*(-tmp_408*tmp_42 + 0.5*tmp_71*tmp_79 - tmp_79*tmp_84);
      real_t a_0_3 = tmp_102*(-tmp_101*tmp_99 - tmp_409*tmp_93 + 0.5*tmp_71*tmp_99) + tmp_118*(-tmp_109*tmp_409 - tmp_115*tmp_117 + 0.5*tmp_115*tmp_71) + tmp_134*(-tmp_125*tmp_409 - tmp_131*tmp_133 + 0.5*tmp_131*tmp_71) + tmp_150*(-tmp_141*tmp_409 - tmp_147*tmp_149 + 0.5*tmp_147*tmp_71) + tmp_166*(-tmp_157*tmp_409 - tmp_163*tmp_165 + 0.5*tmp_163*tmp_71) + tmp_182*(-tmp_173*tmp_409 - tmp_179*tmp_181 + 0.5*tmp_179*tmp_71) + tmp_198*(-tmp_189*tmp_409 - tmp_195*tmp_197 + 0.5*tmp_195*tmp_71) + tmp_214*(-tmp_205*tmp_409 - tmp_211*tmp_213 + 0.5*tmp_211*tmp_71) + tmp_230*(-tmp_221*tmp_409 - tmp_227*tmp_229 + 0.5*tmp_227*tmp_71) + tmp_246*(-tmp_237*tmp_409 - tmp_243*tmp_245 + 0.5*tmp_243*tmp_71) + tmp_262*(-tmp_253*tmp_409 - tmp_259*tmp_261 + 0.5*tmp_259*tmp_71) + tmp_278*(-tmp_269*tmp_409 - tmp_275*tmp_277 + 0.5*tmp_275*tmp_71) + tmp_294*(-tmp_285*tmp_409 - tmp_291*tmp_293 + 0.5*tmp_291*tmp_71) + tmp_310*(-tmp_301*tmp_409 - tmp_307*tmp_309 + 0.5*tmp_307*tmp_71) + tmp_326*(-tmp_317*tmp_409 - tmp_323*tmp_325 + 0.5*tmp_323*tmp_71) + tmp_342*(-tmp_333*tmp_409 - tmp_339*tmp_341 + 0.5*tmp_339*tmp_71) + tmp_358*(-tmp_349*tmp_409 - tmp_355*tmp_357 + 0.5*tmp_355*tmp_71) + tmp_374*(-tmp_365*tmp_409 - tmp_371*tmp_373 + 0.5*tmp_371*tmp_71) + tmp_390*(-tmp_381*tmp_409 - tmp_387*tmp_389 + 0.5*tmp_387*tmp_71) + tmp_406*(-tmp_397*tmp_409 - tmp_403*tmp_405 + 0.5*tmp_403*tmp_71) + tmp_86*(-tmp_409*tmp_42 + 0.5*tmp_71*tmp_80 - tmp_80*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_3*tmp_7;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = 1.0 / (tmp_10*tmp_4*tmp_9 + tmp_11*tmp_2 - tmp_11*tmp_5 - tmp_12*tmp_6 - tmp_13*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = tmp_14*(tmp_2 - tmp_5);
      real_t tmp_16 = tmp_14*(tmp_10*tmp_4 - tmp_13);
      real_t tmp_17 = tmp_14*(-tmp_12 + tmp_8);
      real_t tmp_18 = tmp_14*(-tmp_1*tmp_6 + tmp_4*tmp_9);
      real_t tmp_19 = tmp_14*(-tmp_11*tmp_4 + tmp_6*tmp_7);
      real_t tmp_20 = tmp_14*(tmp_1*tmp_11 - tmp_7*tmp_9);
      real_t tmp_21 = tmp_14*(-tmp_0*tmp_9 + tmp_3*tmp_6);
      real_t tmp_22 = tmp_14*(tmp_0*tmp_11 - tmp_10*tmp_6);
      real_t tmp_23 = tmp_14*(tmp_10*tmp_9 - tmp_11*tmp_3);
      real_t tmp_24 = p_affine_13_0*(-tmp_15 - tmp_16 - tmp_17) + p_affine_13_1*(-tmp_18 - tmp_19 - tmp_20) + p_affine_13_2*(-tmp_21 - tmp_22 - tmp_23);
      real_t tmp_25 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_28 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_29 = 0.031405749086161582*tmp_26 + 0.93718850182767688*tmp_27 + tmp_28;
      real_t tmp_30 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_33 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_34 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32 + tmp_33;
      real_t tmp_35 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_36 = -tmp_35;
      real_t tmp_37 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_38 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_39 = 0.031405749086161582*tmp_36 + 0.93718850182767688*tmp_37 + tmp_38;
      real_t tmp_40 = tmp_17*tmp_39 + tmp_20*tmp_34 + tmp_23*tmp_29;
      real_t tmp_41 = tmp_16*tmp_39 + tmp_19*tmp_34 + tmp_22*tmp_29;
      real_t tmp_42 = tmp_15*tmp_39 + tmp_18*tmp_34 + tmp_21*tmp_29;
      real_t tmp_43 = tmp_1*(tmp_41 - 1.0/4.0) + tmp_4*(tmp_40 - 1.0/4.0) + tmp_7*(tmp_42 - 1.0/4.0);
      real_t tmp_44 = p_affine_13_0*(tmp_1*tmp_16 + tmp_15*tmp_7 + tmp_17*tmp_4) + p_affine_13_1*(tmp_1*tmp_19 + tmp_18*tmp_7 + tmp_20*tmp_4) + p_affine_13_2*(tmp_1*tmp_22 + tmp_21*tmp_7 + tmp_23*tmp_4);
      real_t tmp_45 = -tmp_40 - tmp_41 - tmp_42 + 1;
      real_t tmp_46 = (std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)*std::abs(tmp_25*tmp_32 - tmp_27*tmp_30)) + (std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)*std::abs(tmp_25*tmp_37 - tmp_27*tmp_35)) + (std::abs(tmp_30*tmp_37 - tmp_32*tmp_35)*std::abs(tmp_30*tmp_37 - tmp_32*tmp_35));
      real_t tmp_47 = std::pow(tmp_46, -0.25);
      real_t tmp_48 = 1.0*std::pow(tmp_46, 1.0/2.0);
      real_t tmp_49 = 0.0068572537431980923*tmp_48;
      real_t tmp_50 = 0.19601935860219369*tmp_26 + 0.60796128279561268*tmp_27 + tmp_28;
      real_t tmp_51 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32 + tmp_33;
      real_t tmp_52 = 0.19601935860219369*tmp_36 + 0.60796128279561268*tmp_37 + tmp_38;
      real_t tmp_53 = tmp_17*tmp_52 + tmp_20*tmp_51 + tmp_23*tmp_50;
      real_t tmp_54 = tmp_16*tmp_52 + tmp_19*tmp_51 + tmp_22*tmp_50;
      real_t tmp_55 = tmp_15*tmp_52 + tmp_18*tmp_51 + tmp_21*tmp_50;
      real_t tmp_56 = tmp_1*(tmp_54 - 1.0/4.0) + tmp_4*(tmp_53 - 1.0/4.0) + tmp_7*(tmp_55 - 1.0/4.0);
      real_t tmp_57 = -tmp_53 - tmp_54 - tmp_55 + 1;
      real_t tmp_58 = 0.037198804536718075*tmp_48;
      real_t tmp_59 = 0.37605877282253791*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_60 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_61 = 0.37605877282253791*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_62 = tmp_17*tmp_61 + tmp_20*tmp_60 + tmp_23*tmp_59;
      real_t tmp_63 = tmp_16*tmp_61 + tmp_19*tmp_60 + tmp_22*tmp_59;
      real_t tmp_64 = tmp_15*tmp_61 + tmp_18*tmp_60 + tmp_21*tmp_59;
      real_t tmp_65 = tmp_1*(tmp_63 - 1.0/4.0) + tmp_4*(tmp_62 - 1.0/4.0) + tmp_7*(tmp_64 - 1.0/4.0);
      real_t tmp_66 = -tmp_62 - tmp_63 - tmp_64 + 1;
      real_t tmp_67 = 0.020848748529055869*tmp_48;
      real_t tmp_68 = 0.78764240869137092*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_69 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_70 = 0.78764240869137092*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_71 = tmp_17*tmp_70 + tmp_20*tmp_69 + tmp_23*tmp_68;
      real_t tmp_72 = tmp_16*tmp_70 + tmp_19*tmp_69 + tmp_22*tmp_68;
      real_t tmp_73 = tmp_15*tmp_70 + tmp_18*tmp_69 + tmp_21*tmp_68;
      real_t tmp_74 = tmp_1*(tmp_72 - 1.0/4.0) + tmp_4*(tmp_71 - 1.0/4.0) + tmp_7*(tmp_73 - 1.0/4.0);
      real_t tmp_75 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_48;
      real_t tmp_77 = 0.58463275527740355*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_78 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_79 = 0.58463275527740355*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_80 = tmp_17*tmp_79 + tmp_20*tmp_78 + tmp_23*tmp_77;
      real_t tmp_81 = tmp_16*tmp_79 + tmp_19*tmp_78 + tmp_22*tmp_77;
      real_t tmp_82 = tmp_15*tmp_79 + tmp_18*tmp_78 + tmp_21*tmp_77;
      real_t tmp_83 = tmp_1*(tmp_81 - 1.0/4.0) + tmp_4*(tmp_80 - 1.0/4.0) + tmp_7*(tmp_82 - 1.0/4.0);
      real_t tmp_84 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_48;
      real_t tmp_86 = 0.041227165399737475*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_87 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_88 = 0.041227165399737475*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_89 = tmp_17*tmp_88 + tmp_20*tmp_87 + tmp_23*tmp_86;
      real_t tmp_90 = tmp_16*tmp_88 + tmp_19*tmp_87 + tmp_22*tmp_86;
      real_t tmp_91 = tmp_15*tmp_88 + tmp_18*tmp_87 + tmp_21*tmp_86;
      real_t tmp_92 = tmp_1*(tmp_90 - 1.0/4.0) + tmp_4*(tmp_89 - 1.0/4.0) + tmp_7*(tmp_91 - 1.0/4.0);
      real_t tmp_93 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_94 = 0.019202922745021479*tmp_48;
      real_t tmp_95 = 0.039308471900058539*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_96 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_97 = 0.039308471900058539*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_98 = tmp_17*tmp_97 + tmp_20*tmp_96 + tmp_23*tmp_95;
      real_t tmp_99 = tmp_16*tmp_97 + tmp_19*tmp_96 + tmp_22*tmp_95;
      real_t tmp_100 = tmp_15*tmp_97 + tmp_18*tmp_96 + tmp_21*tmp_95;
      real_t tmp_101 = tmp_1*(tmp_99 - 1.0/4.0) + tmp_4*(tmp_98 - 1.0/4.0) + tmp_7*(tmp_100 - 1.0/4.0);
      real_t tmp_102 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_103 = 0.020848748529055869*tmp_48;
      real_t tmp_104 = 0.78764240869137092*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_105 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_106 = 0.78764240869137092*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_107 = tmp_104*tmp_23 + tmp_105*tmp_20 + tmp_106*tmp_17;
      real_t tmp_108 = tmp_104*tmp_22 + tmp_105*tmp_19 + tmp_106*tmp_16;
      real_t tmp_109 = tmp_104*tmp_21 + tmp_105*tmp_18 + tmp_106*tmp_15;
      real_t tmp_110 = tmp_1*(tmp_108 - 1.0/4.0) + tmp_4*(tmp_107 - 1.0/4.0) + tmp_7*(tmp_109 - 1.0/4.0);
      real_t tmp_111 = -tmp_107 - tmp_108 - tmp_109 + 1;
      real_t tmp_112 = 0.019202922745021479*tmp_48;
      real_t tmp_113 = 0.58463275527740355*tmp_26 + 0.039308471900058539*tmp_27 + tmp_28;
      real_t tmp_114 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32 + tmp_33;
      real_t tmp_115 = 0.58463275527740355*tmp_36 + 0.039308471900058539*tmp_37 + tmp_38;
      real_t tmp_116 = tmp_113*tmp_23 + tmp_114*tmp_20 + tmp_115*tmp_17;
      real_t tmp_117 = tmp_113*tmp_22 + tmp_114*tmp_19 + tmp_115*tmp_16;
      real_t tmp_118 = tmp_113*tmp_21 + tmp_114*tmp_18 + tmp_115*tmp_15;
      real_t tmp_119 = tmp_1*(tmp_117 - 1.0/4.0) + tmp_4*(tmp_116 - 1.0/4.0) + tmp_7*(tmp_118 - 1.0/4.0);
      real_t tmp_120 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_121 = 0.020848748529055869*tmp_48;
      real_t tmp_122 = 0.1711304259088916*tmp_26 + 0.78764240869137092*tmp_27 + tmp_28;
      real_t tmp_123 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32 + tmp_33;
      real_t tmp_124 = 0.1711304259088916*tmp_36 + 0.78764240869137092*tmp_37 + tmp_38;
      real_t tmp_125 = tmp_122*tmp_23 + tmp_123*tmp_20 + tmp_124*tmp_17;
      real_t tmp_126 = tmp_122*tmp_22 + tmp_123*tmp_19 + tmp_124*tmp_16;
      real_t tmp_127 = tmp_122*tmp_21 + tmp_123*tmp_18 + tmp_124*tmp_15;
      real_t tmp_128 = tmp_1*(tmp_126 - 1.0/4.0) + tmp_4*(tmp_125 - 1.0/4.0) + tmp_7*(tmp_127 - 1.0/4.0);
      real_t tmp_129 = -tmp_125 - tmp_126 - tmp_127 + 1;
      real_t tmp_130 = 0.019202922745021479*tmp_48;
      real_t tmp_131 = 0.37605877282253791*tmp_26 + 0.58463275527740355*tmp_27 + tmp_28;
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32 + tmp_33;
      real_t tmp_133 = 0.37605877282253791*tmp_36 + 0.58463275527740355*tmp_37 + tmp_38;
      real_t tmp_134 = tmp_131*tmp_23 + tmp_132*tmp_20 + tmp_133*tmp_17;
      real_t tmp_135 = tmp_131*tmp_22 + tmp_132*tmp_19 + tmp_133*tmp_16;
      real_t tmp_136 = tmp_131*tmp_21 + tmp_132*tmp_18 + tmp_133*tmp_15;
      real_t tmp_137 = tmp_1*(tmp_135 - 1.0/4.0) + tmp_4*(tmp_134 - 1.0/4.0) + tmp_7*(tmp_136 - 1.0/4.0);
      real_t tmp_138 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_48;
      real_t tmp_140 = 0.041227165399737475*tmp_26 + 0.1711304259088916*tmp_27 + tmp_28;
      real_t tmp_141 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32 + tmp_33;
      real_t tmp_142 = 0.041227165399737475*tmp_36 + 0.1711304259088916*tmp_37 + tmp_38;
      real_t tmp_143 = tmp_140*tmp_23 + tmp_141*tmp_20 + tmp_142*tmp_17;
      real_t tmp_144 = tmp_140*tmp_22 + tmp_141*tmp_19 + tmp_142*tmp_16;
      real_t tmp_145 = tmp_140*tmp_21 + tmp_141*tmp_18 + tmp_142*tmp_15;
      real_t tmp_146 = tmp_1*(tmp_144 - 1.0/4.0) + tmp_4*(tmp_143 - 1.0/4.0) + tmp_7*(tmp_145 - 1.0/4.0);
      real_t tmp_147 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_148 = 0.019202922745021479*tmp_48;
      real_t tmp_149 = 0.40446199974765351*tmp_26 + 0.19107600050469298*tmp_27 + tmp_28;
      real_t tmp_150 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32 + tmp_33;
      real_t tmp_151 = 0.40446199974765351*tmp_36 + 0.19107600050469298*tmp_37 + tmp_38;
      real_t tmp_152 = tmp_149*tmp_23 + tmp_150*tmp_20 + tmp_151*tmp_17;
      real_t tmp_153 = tmp_149*tmp_22 + tmp_150*tmp_19 + tmp_151*tmp_16;
      real_t tmp_154 = tmp_149*tmp_21 + tmp_15*tmp_151 + tmp_150*tmp_18;
      real_t tmp_155 = tmp_1*(tmp_153 - 1.0/4.0) + tmp_4*(tmp_152 - 1.0/4.0) + tmp_7*(tmp_154 - 1.0/4.0);
      real_t tmp_156 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_157 = 0.042507265838595799*tmp_48;
      real_t tmp_158 = 0.039308471900058539*tmp_26 + 0.37605877282253791*tmp_27 + tmp_28;
      real_t tmp_159 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32 + tmp_33;
      real_t tmp_160 = 0.039308471900058539*tmp_36 + 0.37605877282253791*tmp_37 + tmp_38;
      real_t tmp_161 = tmp_158*tmp_23 + tmp_159*tmp_20 + tmp_160*tmp_17;
      real_t tmp_162 = tmp_158*tmp_22 + tmp_159*tmp_19 + tmp_16*tmp_160;
      real_t tmp_163 = tmp_15*tmp_160 + tmp_158*tmp_21 + tmp_159*tmp_18;
      real_t tmp_164 = tmp_1*(tmp_162 - 1.0/4.0) + tmp_4*(tmp_161 - 1.0/4.0) + tmp_7*(tmp_163 - 1.0/4.0);
      real_t tmp_165 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_166 = 0.020848748529055869*tmp_48;
      real_t tmp_167 = 0.93718850182767688*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_168 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_169 = 0.93718850182767688*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_170 = tmp_167*tmp_23 + tmp_168*tmp_20 + tmp_169*tmp_17;
      real_t tmp_171 = tmp_16*tmp_169 + tmp_167*tmp_22 + tmp_168*tmp_19;
      real_t tmp_172 = tmp_15*tmp_169 + tmp_167*tmp_21 + tmp_168*tmp_18;
      real_t tmp_173 = tmp_1*(tmp_171 - 1.0/4.0) + tmp_4*(tmp_170 - 1.0/4.0) + tmp_7*(tmp_172 - 1.0/4.0);
      real_t tmp_174 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_175 = 0.0068572537431980923*tmp_48;
      real_t tmp_176 = 0.60796128279561268*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_177 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_178 = 0.60796128279561268*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_179 = tmp_17*tmp_178 + tmp_176*tmp_23 + tmp_177*tmp_20;
      real_t tmp_180 = tmp_16*tmp_178 + tmp_176*tmp_22 + tmp_177*tmp_19;
      real_t tmp_181 = tmp_15*tmp_178 + tmp_176*tmp_21 + tmp_177*tmp_18;
      real_t tmp_182 = tmp_1*(tmp_180 - 1.0/4.0) + tmp_4*(tmp_179 - 1.0/4.0) + tmp_7*(tmp_181 - 1.0/4.0);
      real_t tmp_183 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_184 = 0.037198804536718075*tmp_48;
      real_t tmp_185 = 0.19107600050469298*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_186 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_187 = 0.19107600050469298*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_188 = tmp_17*tmp_187 + tmp_185*tmp_23 + tmp_186*tmp_20;
      real_t tmp_189 = tmp_16*tmp_187 + tmp_185*tmp_22 + tmp_186*tmp_19;
      real_t tmp_190 = tmp_15*tmp_187 + tmp_18*tmp_186 + tmp_185*tmp_21;
      real_t tmp_191 = tmp_1*(tmp_189 - 1.0/4.0) + tmp_4*(tmp_188 - 1.0/4.0) + tmp_7*(tmp_190 - 1.0/4.0);
      real_t tmp_192 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_193 = 0.042507265838595799*tmp_48;
      real_t tmp_194 = 0.031405749086161582*tmp_26 + 0.031405749086161582*tmp_27 + tmp_28;
      real_t tmp_195 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32 + tmp_33;
      real_t tmp_196 = 0.031405749086161582*tmp_36 + 0.031405749086161582*tmp_37 + tmp_38;
      real_t tmp_197 = tmp_17*tmp_196 + tmp_194*tmp_23 + tmp_195*tmp_20;
      real_t tmp_198 = tmp_16*tmp_196 + tmp_19*tmp_195 + tmp_194*tmp_22;
      real_t tmp_199 = tmp_15*tmp_196 + tmp_18*tmp_195 + tmp_194*tmp_21;
      real_t tmp_200 = tmp_1*(tmp_198 - 1.0/4.0) + tmp_4*(tmp_197 - 1.0/4.0) + tmp_7*(tmp_199 - 1.0/4.0);
      real_t tmp_201 = -tmp_197 - tmp_198 - tmp_199 + 1;
      real_t tmp_202 = 0.0068572537431980923*tmp_48;
      real_t tmp_203 = 0.19601935860219369*tmp_26 + 0.19601935860219369*tmp_27 + tmp_28;
      real_t tmp_204 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32 + tmp_33;
      real_t tmp_205 = 0.19601935860219369*tmp_36 + 0.19601935860219369*tmp_37 + tmp_38;
      real_t tmp_206 = tmp_17*tmp_205 + tmp_20*tmp_204 + tmp_203*tmp_23;
      real_t tmp_207 = tmp_16*tmp_205 + tmp_19*tmp_204 + tmp_203*tmp_22;
      real_t tmp_208 = tmp_15*tmp_205 + tmp_18*tmp_204 + tmp_203*tmp_21;
      real_t tmp_209 = tmp_1*(tmp_207 - 1.0/4.0) + tmp_4*(tmp_206 - 1.0/4.0) + tmp_7*(tmp_208 - 1.0/4.0);
      real_t tmp_210 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_211 = 0.037198804536718075*tmp_48;
      real_t tmp_212 = 0.40446199974765351*tmp_26 + 0.40446199974765351*tmp_27 + tmp_28;
      real_t tmp_213 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32 + tmp_33;
      real_t tmp_214 = 0.40446199974765351*tmp_36 + 0.40446199974765351*tmp_37 + tmp_38;
      real_t tmp_215 = tmp_17*tmp_214 + tmp_20*tmp_213 + tmp_212*tmp_23;
      real_t tmp_216 = tmp_16*tmp_214 + tmp_19*tmp_213 + tmp_212*tmp_22;
      real_t tmp_217 = tmp_15*tmp_214 + tmp_18*tmp_213 + tmp_21*tmp_212;
      real_t tmp_218 = tmp_1*(tmp_216 - 1.0/4.0) + tmp_4*(tmp_215 - 1.0/4.0) + tmp_7*(tmp_217 - 1.0/4.0);
      real_t tmp_219 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_220 = 0.042507265838595799*tmp_48;
      real_t tmp_221 = 0.1711304259088916*tmp_26 + 0.041227165399737475*tmp_27 + tmp_28;
      real_t tmp_222 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32 + tmp_33;
      real_t tmp_223 = 0.1711304259088916*tmp_36 + 0.041227165399737475*tmp_37 + tmp_38;
      real_t tmp_224 = tmp_17*tmp_223 + tmp_20*tmp_222 + tmp_221*tmp_23;
      real_t tmp_225 = tmp_16*tmp_223 + tmp_19*tmp_222 + tmp_22*tmp_221;
      real_t tmp_226 = tmp_15*tmp_223 + tmp_18*tmp_222 + tmp_21*tmp_221;
      real_t tmp_227 = tmp_1*(tmp_225 - 1.0/4.0) + tmp_4*(tmp_224 - 1.0/4.0) + tmp_7*(tmp_226 - 1.0/4.0);
      real_t tmp_228 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_229 = 0.019202922745021479*tmp_48;
      real_t tmp_230 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_20 + p_affine_13_2*tmp_23;
      real_t tmp_231 = p_affine_13_0*tmp_16 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_22;
      real_t tmp_232 = p_affine_13_0*tmp_15 + p_affine_13_1*tmp_18 + p_affine_13_2*tmp_21;
      real_t a_0_0 = tmp_103*(3.0*tmp_101*tmp_102*tmp_47 - tmp_101*tmp_24 - tmp_102*tmp_44) + tmp_112*(3.0*tmp_110*tmp_111*tmp_47 - tmp_110*tmp_24 - tmp_111*tmp_44) + tmp_121*(3.0*tmp_119*tmp_120*tmp_47 - tmp_119*tmp_24 - tmp_120*tmp_44) + tmp_130*(3.0*tmp_128*tmp_129*tmp_47 - tmp_128*tmp_24 - tmp_129*tmp_44) + tmp_139*(3.0*tmp_137*tmp_138*tmp_47 - tmp_137*tmp_24 - tmp_138*tmp_44) + tmp_148*(3.0*tmp_146*tmp_147*tmp_47 - tmp_146*tmp_24 - tmp_147*tmp_44) + tmp_157*(3.0*tmp_155*tmp_156*tmp_47 - tmp_155*tmp_24 - tmp_156*tmp_44) + tmp_166*(3.0*tmp_164*tmp_165*tmp_47 - tmp_164*tmp_24 - tmp_165*tmp_44) + tmp_175*(3.0*tmp_173*tmp_174*tmp_47 - tmp_173*tmp_24 - tmp_174*tmp_44) + tmp_184*(3.0*tmp_182*tmp_183*tmp_47 - tmp_182*tmp_24 - tmp_183*tmp_44) + tmp_193*(3.0*tmp_191*tmp_192*tmp_47 - tmp_191*tmp_24 - tmp_192*tmp_44) + tmp_202*(3.0*tmp_200*tmp_201*tmp_47 - tmp_200*tmp_24 - tmp_201*tmp_44) + tmp_211*(3.0*tmp_209*tmp_210*tmp_47 - tmp_209*tmp_24 - tmp_210*tmp_44) + tmp_220*(3.0*tmp_218*tmp_219*tmp_47 - tmp_218*tmp_24 - tmp_219*tmp_44) + tmp_229*(3.0*tmp_227*tmp_228*tmp_47 - tmp_227*tmp_24 - tmp_228*tmp_44) + tmp_49*(-tmp_24*tmp_43 + 3.0*tmp_43*tmp_45*tmp_47 - tmp_44*tmp_45) + tmp_58*(-tmp_24*tmp_56 - tmp_44*tmp_57 + 3.0*tmp_47*tmp_56*tmp_57) + tmp_67*(-tmp_24*tmp_65 - tmp_44*tmp_66 + 3.0*tmp_47*tmp_65*tmp_66) + tmp_76*(-tmp_24*tmp_74 - tmp_44*tmp_75 + 3.0*tmp_47*tmp_74*tmp_75) + tmp_85*(-tmp_24*tmp_83 - tmp_44*tmp_84 + 3.0*tmp_47*tmp_83*tmp_84) + tmp_94*(-tmp_24*tmp_92 - tmp_44*tmp_93 + 3.0*tmp_47*tmp_92*tmp_93);
      real_t a_0_1 = tmp_103*(-tmp_101*tmp_230 + 3.0*tmp_101*tmp_47*tmp_98 - tmp_44*tmp_98) + tmp_112*(3.0*tmp_107*tmp_110*tmp_47 - tmp_107*tmp_44 - tmp_110*tmp_230) + tmp_121*(3.0*tmp_116*tmp_119*tmp_47 - tmp_116*tmp_44 - tmp_119*tmp_230) + tmp_130*(3.0*tmp_125*tmp_128*tmp_47 - tmp_125*tmp_44 - tmp_128*tmp_230) + tmp_139*(3.0*tmp_134*tmp_137*tmp_47 - tmp_134*tmp_44 - tmp_137*tmp_230) + tmp_148*(3.0*tmp_143*tmp_146*tmp_47 - tmp_143*tmp_44 - tmp_146*tmp_230) + tmp_157*(3.0*tmp_152*tmp_155*tmp_47 - tmp_152*tmp_44 - tmp_155*tmp_230) + tmp_166*(3.0*tmp_161*tmp_164*tmp_47 - tmp_161*tmp_44 - tmp_164*tmp_230) + tmp_175*(3.0*tmp_170*tmp_173*tmp_47 - tmp_170*tmp_44 - tmp_173*tmp_230) + tmp_184*(3.0*tmp_179*tmp_182*tmp_47 - tmp_179*tmp_44 - tmp_182*tmp_230) + tmp_193*(3.0*tmp_188*tmp_191*tmp_47 - tmp_188*tmp_44 - tmp_191*tmp_230) + tmp_202*(3.0*tmp_197*tmp_200*tmp_47 - tmp_197*tmp_44 - tmp_200*tmp_230) + tmp_211*(3.0*tmp_206*tmp_209*tmp_47 - tmp_206*tmp_44 - tmp_209*tmp_230) + tmp_220*(3.0*tmp_215*tmp_218*tmp_47 - tmp_215*tmp_44 - tmp_218*tmp_230) + tmp_229*(3.0*tmp_224*tmp_227*tmp_47 - tmp_224*tmp_44 - tmp_227*tmp_230) + tmp_49*(-tmp_230*tmp_43 + 3.0*tmp_40*tmp_43*tmp_47 - tmp_40*tmp_44) + tmp_58*(-tmp_230*tmp_56 - tmp_44*tmp_53 + 3.0*tmp_47*tmp_53*tmp_56) + tmp_67*(-tmp_230*tmp_65 - tmp_44*tmp_62 + 3.0*tmp_47*tmp_62*tmp_65) + tmp_76*(-tmp_230*tmp_74 - tmp_44*tmp_71 + 3.0*tmp_47*tmp_71*tmp_74) + tmp_85*(-tmp_230*tmp_83 - tmp_44*tmp_80 + 3.0*tmp_47*tmp_80*tmp_83) + tmp_94*(-tmp_230*tmp_92 - tmp_44*tmp_89 + 3.0*tmp_47*tmp_89*tmp_92);
      real_t a_0_2 = tmp_103*(-tmp_101*tmp_231 + 3.0*tmp_101*tmp_47*tmp_99 - tmp_44*tmp_99) + tmp_112*(3.0*tmp_108*tmp_110*tmp_47 - tmp_108*tmp_44 - tmp_110*tmp_231) + tmp_121*(3.0*tmp_117*tmp_119*tmp_47 - tmp_117*tmp_44 - tmp_119*tmp_231) + tmp_130*(3.0*tmp_126*tmp_128*tmp_47 - tmp_126*tmp_44 - tmp_128*tmp_231) + tmp_139*(3.0*tmp_135*tmp_137*tmp_47 - tmp_135*tmp_44 - tmp_137*tmp_231) + tmp_148*(3.0*tmp_144*tmp_146*tmp_47 - tmp_144*tmp_44 - tmp_146*tmp_231) + tmp_157*(3.0*tmp_153*tmp_155*tmp_47 - tmp_153*tmp_44 - tmp_155*tmp_231) + tmp_166*(3.0*tmp_162*tmp_164*tmp_47 - tmp_162*tmp_44 - tmp_164*tmp_231) + tmp_175*(3.0*tmp_171*tmp_173*tmp_47 - tmp_171*tmp_44 - tmp_173*tmp_231) + tmp_184*(3.0*tmp_180*tmp_182*tmp_47 - tmp_180*tmp_44 - tmp_182*tmp_231) + tmp_193*(3.0*tmp_189*tmp_191*tmp_47 - tmp_189*tmp_44 - tmp_191*tmp_231) + tmp_202*(3.0*tmp_198*tmp_200*tmp_47 - tmp_198*tmp_44 - tmp_200*tmp_231) + tmp_211*(3.0*tmp_207*tmp_209*tmp_47 - tmp_207*tmp_44 - tmp_209*tmp_231) + tmp_220*(3.0*tmp_216*tmp_218*tmp_47 - tmp_216*tmp_44 - tmp_218*tmp_231) + tmp_229*(3.0*tmp_225*tmp_227*tmp_47 - tmp_225*tmp_44 - tmp_227*tmp_231) + tmp_49*(-tmp_231*tmp_43 + 3.0*tmp_41*tmp_43*tmp_47 - tmp_41*tmp_44) + tmp_58*(-tmp_231*tmp_56 - tmp_44*tmp_54 + 3.0*tmp_47*tmp_54*tmp_56) + tmp_67*(-tmp_231*tmp_65 - tmp_44*tmp_63 + 3.0*tmp_47*tmp_63*tmp_65) + tmp_76*(-tmp_231*tmp_74 - tmp_44*tmp_72 + 3.0*tmp_47*tmp_72*tmp_74) + tmp_85*(-tmp_231*tmp_83 - tmp_44*tmp_81 + 3.0*tmp_47*tmp_81*tmp_83) + tmp_94*(-tmp_231*tmp_92 - tmp_44*tmp_90 + 3.0*tmp_47*tmp_90*tmp_92);
      real_t a_0_3 = tmp_103*(3.0*tmp_100*tmp_101*tmp_47 - tmp_100*tmp_44 - tmp_101*tmp_232) + tmp_112*(3.0*tmp_109*tmp_110*tmp_47 - tmp_109*tmp_44 - tmp_110*tmp_232) + tmp_121*(3.0*tmp_118*tmp_119*tmp_47 - tmp_118*tmp_44 - tmp_119*tmp_232) + tmp_130*(3.0*tmp_127*tmp_128*tmp_47 - tmp_127*tmp_44 - tmp_128*tmp_232) + tmp_139*(3.0*tmp_136*tmp_137*tmp_47 - tmp_136*tmp_44 - tmp_137*tmp_232) + tmp_148*(3.0*tmp_145*tmp_146*tmp_47 - tmp_145*tmp_44 - tmp_146*tmp_232) + tmp_157*(3.0*tmp_154*tmp_155*tmp_47 - tmp_154*tmp_44 - tmp_155*tmp_232) + tmp_166*(3.0*tmp_163*tmp_164*tmp_47 - tmp_163*tmp_44 - tmp_164*tmp_232) + tmp_175*(3.0*tmp_172*tmp_173*tmp_47 - tmp_172*tmp_44 - tmp_173*tmp_232) + tmp_184*(3.0*tmp_181*tmp_182*tmp_47 - tmp_181*tmp_44 - tmp_182*tmp_232) + tmp_193*(3.0*tmp_190*tmp_191*tmp_47 - tmp_190*tmp_44 - tmp_191*tmp_232) + tmp_202*(3.0*tmp_199*tmp_200*tmp_47 - tmp_199*tmp_44 - tmp_200*tmp_232) + tmp_211*(3.0*tmp_208*tmp_209*tmp_47 - tmp_208*tmp_44 - tmp_209*tmp_232) + tmp_220*(3.0*tmp_217*tmp_218*tmp_47 - tmp_217*tmp_44 - tmp_218*tmp_232) + tmp_229*(3.0*tmp_226*tmp_227*tmp_47 - tmp_226*tmp_44 - tmp_227*tmp_232) + tmp_49*(-tmp_232*tmp_43 + 3.0*tmp_42*tmp_43*tmp_47 - tmp_42*tmp_44) + tmp_58*(-tmp_232*tmp_56 - tmp_44*tmp_55 + 3.0*tmp_47*tmp_55*tmp_56) + tmp_67*(-tmp_232*tmp_65 - tmp_44*tmp_64 + 3.0*tmp_47*tmp_64*tmp_65) + tmp_76*(-tmp_232*tmp_74 - tmp_44*tmp_73 + 3.0*tmp_47*tmp_73*tmp_74) + tmp_85*(-tmp_232*tmp_83 - tmp_44*tmp_82 + 3.0*tmp_47*tmp_82*tmp_83) + tmp_94*(-tmp_232*tmp_92 - tmp_44*tmp_91 + 3.0*tmp_47*tmp_91*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:



};




class EGVectorLaplaceFormNitscheBC_EE : public hyteg::dg::DGForm
{

 public:
    EGVectorLaplaceFormNitscheBC_EE()
: callback_Scalar_Variable_Coefficient_2D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g0 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g0( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g0( Point3D( {in_0, in_1, 0} ) );
}
void Scalar_Variable_Coefficient_2D_g1( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g1( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_2*tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_4);
      real_t tmp_8 = tmp_2*tmp_7;
      real_t tmp_9 = tmp_4*tmp_7;
      real_t tmp_10 = tmp_5*tmp_7;
      real_t tmp_11 = tmp_6*tmp_7;
      real_t tmp_12 = (((tmp_0*tmp_11 + tmp_9)*(tmp_0*tmp_11 + tmp_9)) + ((tmp_0*tmp_8 + tmp_1*tmp_8)*(tmp_0*tmp_8 + tmp_1*tmp_8)) + ((tmp_1*tmp_10 + tmp_9)*(tmp_1*tmp_10 + tmp_9)) + ((tmp_10*tmp_3 + tmp_11*tmp_3)*(tmp_10*tmp_3 + tmp_11*tmp_3)))*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = 0.5*tmp_12;
      elMat( 0, 0) = a_0_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_3*tmp_5;
      real_t tmp_7 = -tmp_4;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = -tmp_8;
      real_t tmp_10 = 1.0 / (tmp_6 - tmp_7*tmp_9);
      real_t tmp_11 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_12 = tmp_10*(0.046910077030668018*tmp_1 + tmp_11);
      real_t tmp_13 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_14 = tmp_10*(0.046910077030668018*tmp_0 + tmp_13);
      real_t tmp_15 = tmp_12*tmp_4 + tmp_14*tmp_5 - 1.0/3.0;
      real_t tmp_16 = tmp_12*tmp_3 + tmp_14*tmp_8 - 1.0/3.0;
      real_t tmp_17 = tmp_15*tmp_3 + tmp_16*tmp_7;
      real_t tmp_18 = tmp_10*tmp_6;
      real_t tmp_19 = tmp_10*tmp_7;
      real_t tmp_20 = tmp_10*tmp_4;
      real_t tmp_21 = 1.0*p_affine_10_0*(tmp_18 + tmp_19*tmp_8) + 1.0*p_affine_10_1*(tmp_19*tmp_3 + tmp_20*tmp_3);
      real_t tmp_22 = tmp_15*tmp_9 + tmp_16*tmp_5;
      real_t tmp_23 = tmp_10*tmp_5;
      real_t tmp_24 = 1.0*p_affine_10_0*(tmp_23*tmp_8 + tmp_23*tmp_9) + 1.0*p_affine_10_1*(tmp_18 + tmp_20*tmp_9);
      real_t tmp_25 = 1.0 / (tmp_2);
      real_t tmp_26 = 0.23076534494715845*tmp_1 + tmp_11;
      real_t tmp_27 = 0.23076534494715845*tmp_0 + tmp_13;
      real_t tmp_28 = tmp_20*tmp_26 + tmp_23*tmp_27 - 1.0/3.0;
      real_t tmp_29 = tmp_10*tmp_3;
      real_t tmp_30 = tmp_10*tmp_8;
      real_t tmp_31 = tmp_26*tmp_29 + tmp_27*tmp_30 - 1.0/3.0;
      real_t tmp_32 = tmp_28*tmp_3 + tmp_31*tmp_7;
      real_t tmp_33 = tmp_28*tmp_9 + tmp_31*tmp_5;
      real_t tmp_34 = 0.5*tmp_1 + tmp_11;
      real_t tmp_35 = 0.5*tmp_0 + tmp_13;
      real_t tmp_36 = tmp_20*tmp_34 + tmp_23*tmp_35 - 1.0/3.0;
      real_t tmp_37 = tmp_29*tmp_34 + tmp_30*tmp_35 - 1.0/3.0;
      real_t tmp_38 = tmp_3*tmp_36 + tmp_37*tmp_7;
      real_t tmp_39 = tmp_36*tmp_9 + tmp_37*tmp_5;
      real_t tmp_40 = 0.7692346550528415*tmp_1 + tmp_11;
      real_t tmp_41 = 0.7692346550528415*tmp_0 + tmp_13;
      real_t tmp_42 = tmp_20*tmp_40 + tmp_23*tmp_41 - 1.0/3.0;
      real_t tmp_43 = tmp_29*tmp_40 + tmp_30*tmp_41 - 1.0/3.0;
      real_t tmp_44 = tmp_3*tmp_42 + tmp_43*tmp_7;
      real_t tmp_45 = tmp_42*tmp_9 + tmp_43*tmp_5;
      real_t tmp_46 = 0.95308992296933193*tmp_1 + tmp_11;
      real_t tmp_47 = 0.95308992296933193*tmp_0 + tmp_13;
      real_t tmp_48 = tmp_20*tmp_46 + tmp_23*tmp_47 - 1.0/3.0;
      real_t tmp_49 = tmp_29*tmp_46 + tmp_30*tmp_47 - 1.0/3.0;
      real_t tmp_50 = tmp_3*tmp_48 + tmp_49*tmp_7;
      real_t tmp_51 = tmp_48*tmp_9 + tmp_49*tmp_5;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(-tmp_17*tmp_21 - tmp_22*tmp_24 + 3*tmp_25*((tmp_17*tmp_17) + (tmp_22*tmp_22))) + 0.2393143352496831*tmp_2*(-tmp_21*tmp_32 - tmp_24*tmp_33 + 3*tmp_25*((tmp_32*tmp_32) + (tmp_33*tmp_33))) + 0.2844444444444445*tmp_2*(-tmp_21*tmp_38 - tmp_24*tmp_39 + 3*tmp_25*((tmp_38*tmp_38) + (tmp_39*tmp_39))) + 0.2393143352496831*tmp_2*(-tmp_21*tmp_44 - tmp_24*tmp_45 + 3*tmp_25*((tmp_44*tmp_44) + (tmp_45*tmp_45))) + 0.11846344252809471*tmp_2*(-tmp_21*tmp_50 - tmp_24*tmp_51 + 3*tmp_25*((tmp_50*tmp_50) + (tmp_51*tmp_51)));
      elMat( 0, 0) = a_0_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_7 = -tmp_6;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = -tmp_8;
      real_t tmp_10 = 1.0 / (tmp_5 - tmp_7*tmp_9);
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_10*tmp_7;
      real_t tmp_13 = tmp_10*tmp_6;
      real_t tmp_14 = p_affine_10_0*(tmp_11 + tmp_12*tmp_8) + p_affine_10_1*(tmp_12*tmp_3 + tmp_13*tmp_3);
      real_t tmp_15 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_16 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_17 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_18 = tmp_15*tmp_17;
      real_t tmp_19 = -tmp_16;
      real_t tmp_20 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_21 = -tmp_20;
      real_t tmp_22 = 1.0 / (tmp_18 - tmp_19*tmp_21);
      real_t tmp_23 = -p_affine_3_1;
      real_t tmp_24 = p_affine_6_1 + 0.046910077030668018*tmp_1;
      real_t tmp_25 = tmp_22*(tmp_23 + tmp_24);
      real_t tmp_26 = -p_affine_3_0;
      real_t tmp_27 = p_affine_6_0 + 0.046910077030668018*tmp_0;
      real_t tmp_28 = tmp_22*(tmp_26 + tmp_27);
      real_t tmp_29 = tmp_16*tmp_25 + tmp_17*tmp_28 - 1.0/3.0;
      real_t tmp_30 = tmp_15*tmp_25 + tmp_20*tmp_28 - 1.0/3.0;
      real_t tmp_31 = tmp_15*tmp_29 + tmp_19*tmp_30;
      real_t tmp_32 = tmp_10*tmp_4;
      real_t tmp_33 = p_affine_10_0*(tmp_32*tmp_8 + tmp_32*tmp_9) + p_affine_10_1*(tmp_11 + tmp_13*tmp_9);
      real_t tmp_34 = tmp_17*tmp_30 + tmp_21*tmp_29;
      real_t tmp_35 = -p_affine_0_1;
      real_t tmp_36 = tmp_10*(tmp_24 + tmp_35);
      real_t tmp_37 = -p_affine_0_0;
      real_t tmp_38 = tmp_10*(tmp_27 + tmp_37);
      real_t tmp_39 = tmp_36*tmp_6 + tmp_38*tmp_4 - 1.0/3.0;
      real_t tmp_40 = tmp_3*tmp_36 + tmp_38*tmp_8 - 1.0/3.0;
      real_t tmp_41 = tmp_3*tmp_39 + tmp_40*tmp_7;
      real_t tmp_42 = tmp_18*tmp_22;
      real_t tmp_43 = tmp_19*tmp_22;
      real_t tmp_44 = tmp_16*tmp_22;
      real_t tmp_45 = 0.5*p_affine_10_0*(tmp_20*tmp_43 + tmp_42) + 0.5*p_affine_10_1*(tmp_15*tmp_43 + tmp_15*tmp_44);
      real_t tmp_46 = tmp_39*tmp_9 + tmp_4*tmp_40;
      real_t tmp_47 = tmp_17*tmp_22;
      real_t tmp_48 = 0.5*p_affine_10_0*(tmp_20*tmp_47 + tmp_21*tmp_47) + 0.5*p_affine_10_1*(tmp_21*tmp_44 + tmp_42);
      real_t tmp_49 = 3/tmp_2;
      real_t tmp_50 = p_affine_6_1 + 0.23076534494715845*tmp_1;
      real_t tmp_51 = tmp_23 + tmp_50;
      real_t tmp_52 = p_affine_6_0 + 0.23076534494715845*tmp_0;
      real_t tmp_53 = tmp_26 + tmp_52;
      real_t tmp_54 = tmp_44*tmp_51 + tmp_47*tmp_53 - 1.0/3.0;
      real_t tmp_55 = tmp_15*tmp_22;
      real_t tmp_56 = tmp_20*tmp_22;
      real_t tmp_57 = tmp_51*tmp_55 + tmp_53*tmp_56 - 1.0/3.0;
      real_t tmp_58 = tmp_15*tmp_54 + tmp_19*tmp_57;
      real_t tmp_59 = tmp_17*tmp_57 + tmp_21*tmp_54;
      real_t tmp_60 = tmp_35 + tmp_50;
      real_t tmp_61 = tmp_37 + tmp_52;
      real_t tmp_62 = tmp_13*tmp_60 + tmp_32*tmp_61 - 1.0/3.0;
      real_t tmp_63 = tmp_10*tmp_3;
      real_t tmp_64 = tmp_10*tmp_8;
      real_t tmp_65 = tmp_60*tmp_63 + tmp_61*tmp_64 - 1.0/3.0;
      real_t tmp_66 = tmp_3*tmp_62 + tmp_65*tmp_7;
      real_t tmp_67 = tmp_4*tmp_65 + tmp_62*tmp_9;
      real_t tmp_68 = p_affine_6_1 + 0.5*tmp_1;
      real_t tmp_69 = tmp_23 + tmp_68;
      real_t tmp_70 = p_affine_6_0 + 0.5*tmp_0;
      real_t tmp_71 = tmp_26 + tmp_70;
      real_t tmp_72 = tmp_44*tmp_69 + tmp_47*tmp_71 - 1.0/3.0;
      real_t tmp_73 = tmp_55*tmp_69 + tmp_56*tmp_71 - 1.0/3.0;
      real_t tmp_74 = tmp_15*tmp_72 + tmp_19*tmp_73;
      real_t tmp_75 = tmp_17*tmp_73 + tmp_21*tmp_72;
      real_t tmp_76 = tmp_35 + tmp_68;
      real_t tmp_77 = tmp_37 + tmp_70;
      real_t tmp_78 = tmp_13*tmp_76 + tmp_32*tmp_77 - 1.0/3.0;
      real_t tmp_79 = tmp_63*tmp_76 + tmp_64*tmp_77 - 1.0/3.0;
      real_t tmp_80 = tmp_3*tmp_78 + tmp_7*tmp_79;
      real_t tmp_81 = tmp_4*tmp_79 + tmp_78*tmp_9;
      real_t tmp_82 = p_affine_6_1 + 0.7692346550528415*tmp_1;
      real_t tmp_83 = tmp_23 + tmp_82;
      real_t tmp_84 = p_affine_6_0 + 0.7692346550528415*tmp_0;
      real_t tmp_85 = tmp_26 + tmp_84;
      real_t tmp_86 = tmp_44*tmp_83 + tmp_47*tmp_85 - 1.0/3.0;
      real_t tmp_87 = tmp_55*tmp_83 + tmp_56*tmp_85 - 1.0/3.0;
      real_t tmp_88 = tmp_15*tmp_86 + tmp_19*tmp_87;
      real_t tmp_89 = tmp_17*tmp_87 + tmp_21*tmp_86;
      real_t tmp_90 = tmp_35 + tmp_82;
      real_t tmp_91 = tmp_37 + tmp_84;
      real_t tmp_92 = tmp_13*tmp_90 + tmp_32*tmp_91 - 1.0/3.0;
      real_t tmp_93 = tmp_63*tmp_90 + tmp_64*tmp_91 - 1.0/3.0;
      real_t tmp_94 = tmp_3*tmp_92 + tmp_7*tmp_93;
      real_t tmp_95 = tmp_4*tmp_93 + tmp_9*tmp_92;
      real_t tmp_96 = p_affine_6_1 + 0.95308992296933193*tmp_1;
      real_t tmp_97 = tmp_23 + tmp_96;
      real_t tmp_98 = p_affine_6_0 + 0.95308992296933193*tmp_0;
      real_t tmp_99 = tmp_26 + tmp_98;
      real_t tmp_100 = tmp_44*tmp_97 + tmp_47*tmp_99 - 1.0/3.0;
      real_t tmp_101 = tmp_55*tmp_97 + tmp_56*tmp_99 - 1.0/3.0;
      real_t tmp_102 = tmp_100*tmp_15 + tmp_101*tmp_19;
      real_t tmp_103 = tmp_100*tmp_21 + tmp_101*tmp_17;
      real_t tmp_104 = tmp_35 + tmp_96;
      real_t tmp_105 = tmp_37 + tmp_98;
      real_t tmp_106 = tmp_104*tmp_13 + tmp_105*tmp_32 - 1.0/3.0;
      real_t tmp_107 = tmp_104*tmp_63 + tmp_105*tmp_64 - 1.0/3.0;
      real_t tmp_108 = tmp_106*tmp_3 + tmp_107*tmp_7;
      real_t tmp_109 = tmp_106*tmp_9 + tmp_107*tmp_4;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(0.5*tmp_102*tmp_14 + 0.5*tmp_103*tmp_33 - tmp_108*tmp_45 - tmp_109*tmp_48 - tmp_49*(tmp_102*tmp_108 + tmp_103*tmp_109)) + 0.11846344252809471*tmp_2*(0.5*tmp_14*tmp_31 + 0.5*tmp_33*tmp_34 - tmp_41*tmp_45 - tmp_46*tmp_48 - tmp_49*(tmp_31*tmp_41 + tmp_34*tmp_46)) + 0.2393143352496831*tmp_2*(0.5*tmp_14*tmp_58 + 0.5*tmp_33*tmp_59 - tmp_45*tmp_66 - tmp_48*tmp_67 - tmp_49*(tmp_58*tmp_66 + tmp_59*tmp_67)) + 0.2844444444444445*tmp_2*(0.5*tmp_14*tmp_74 + 0.5*tmp_33*tmp_75 - tmp_45*tmp_80 - tmp_48*tmp_81 - tmp_49*(tmp_74*tmp_80 + tmp_75*tmp_81)) + 0.2393143352496831*tmp_2*(0.5*tmp_14*tmp_88 + 0.5*tmp_33*tmp_89 - tmp_45*tmp_94 - tmp_48*tmp_95 - tmp_49*(tmp_88*tmp_94 + tmp_89*tmp_95));
      elMat( 0, 0) = a_0_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_5 = 0.046910077030668018*tmp_1 + tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_9 = -tmp_8;
      real_t tmp_10 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_11 = -tmp_10;
      real_t tmp_12 = 1.0 / (-tmp_11*tmp_9 + tmp_7);
      real_t tmp_13 = tmp_12*tmp_8;
      real_t tmp_14 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_15 = tmp_12*(0.046910077030668018*tmp_0 + tmp_14);
      real_t tmp_16 = tmp_13*tmp_5 + tmp_15*tmp_6 - 1.0/3.0;
      real_t tmp_17 = tmp_12*tmp_3;
      real_t tmp_18 = tmp_10*tmp_15 + tmp_17*tmp_5 - 1.0/3.0;
      real_t tmp_19 = tmp_16*tmp_3 + tmp_18*tmp_9;
      real_t tmp_20 = tmp_12*tmp_7;
      real_t tmp_21 = tmp_12*tmp_9;
      real_t tmp_22 = 2*p_affine_10_0*(tmp_10*tmp_21 + tmp_20) + 2*p_affine_10_1*(tmp_13*tmp_3 + tmp_21*tmp_3);
      real_t tmp_23 = tmp_11*tmp_16 + tmp_18*tmp_6;
      real_t tmp_24 = tmp_12*tmp_6;
      real_t tmp_25 = 2*p_affine_10_0*(tmp_10*tmp_24 + tmp_11*tmp_24) + 2*p_affine_10_1*(tmp_11*tmp_13 + tmp_20);
      real_t tmp_26 = 1.0 / (tmp_2);
      real_t tmp_27 = 0.23076534494715845*tmp_1 + tmp_4;
      real_t tmp_28 = 0.23076534494715845*tmp_0 + tmp_14;
      real_t tmp_29 = tmp_13*tmp_27 + tmp_24*tmp_28 - 1.0/3.0;
      real_t tmp_30 = tmp_10*tmp_12;
      real_t tmp_31 = tmp_17*tmp_27 + tmp_28*tmp_30 - 1.0/3.0;
      real_t tmp_32 = tmp_29*tmp_3 + tmp_31*tmp_9;
      real_t tmp_33 = tmp_11*tmp_29 + tmp_31*tmp_6;
      real_t tmp_34 = 0.5*tmp_1 + tmp_4;
      real_t tmp_35 = 0.5*tmp_0 + tmp_14;
      real_t tmp_36 = tmp_13*tmp_34 + tmp_24*tmp_35 - 1.0/3.0;
      real_t tmp_37 = tmp_17*tmp_34 + tmp_30*tmp_35 - 1.0/3.0;
      real_t tmp_38 = tmp_3*tmp_36 + tmp_37*tmp_9;
      real_t tmp_39 = tmp_11*tmp_36 + tmp_37*tmp_6;
      real_t tmp_40 = 0.7692346550528415*tmp_1 + tmp_4;
      real_t tmp_41 = 0.7692346550528415*tmp_0 + tmp_14;
      real_t tmp_42 = tmp_13*tmp_40 + tmp_24*tmp_41 - 1.0/3.0;
      real_t tmp_43 = tmp_17*tmp_40 + tmp_30*tmp_41 - 1.0/3.0;
      real_t tmp_44 = tmp_3*tmp_42 + tmp_43*tmp_9;
      real_t tmp_45 = tmp_11*tmp_42 + tmp_43*tmp_6;
      real_t tmp_46 = 0.95308992296933193*tmp_1 + tmp_4;
      real_t tmp_47 = 0.95308992296933193*tmp_0 + tmp_14;
      real_t tmp_48 = tmp_13*tmp_46 + tmp_24*tmp_47 - 1.0/3.0;
      real_t tmp_49 = tmp_17*tmp_46 + tmp_30*tmp_47 - 1.0/3.0;
      real_t tmp_50 = tmp_3*tmp_48 + tmp_49*tmp_9;
      real_t tmp_51 = tmp_11*tmp_48 + tmp_49*tmp_6;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(-tmp_19*tmp_22 - tmp_23*tmp_25 + 3*tmp_26*((tmp_19*tmp_19) + (tmp_23*tmp_23))) + 0.2393143352496831*tmp_2*(-tmp_22*tmp_32 - tmp_25*tmp_33 + 3*tmp_26*((tmp_32*tmp_32) + (tmp_33*tmp_33))) + 0.2844444444444445*tmp_2*(-tmp_22*tmp_38 - tmp_25*tmp_39 + 3*tmp_26*((tmp_38*tmp_38) + (tmp_39*tmp_39))) + 0.2393143352496831*tmp_2*(-tmp_22*tmp_44 - tmp_25*tmp_45 + 3*tmp_26*((tmp_44*tmp_44) + (tmp_45*tmp_45))) + 0.11846344252809471*tmp_2*(-tmp_22*tmp_50 - tmp_25*tmp_51 + 3*tmp_26*((tmp_50*tmp_50) + (tmp_51*tmp_51)));
      elMat( 0, 0) = a_0_0;
   }

    void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id9 = 0;
      Scalar_Variable_Coefficient_2D_g0( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id0 );
      Scalar_Variable_Coefficient_2D_g1( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id1 );
      Scalar_Variable_Coefficient_2D_g0( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id2 );
      Scalar_Variable_Coefficient_2D_g1( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id3 );
      Scalar_Variable_Coefficient_2D_g0( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id4 );
      Scalar_Variable_Coefficient_2D_g1( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id5 );
      Scalar_Variable_Coefficient_2D_g0( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id6 );
      Scalar_Variable_Coefficient_2D_g1( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id7 );
      Scalar_Variable_Coefficient_2D_g0( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id8 );
      Scalar_Variable_Coefficient_2D_g1( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id9 );
      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_6 = 0.046910077030668018*tmp_1 + tmp_5;
      real_t tmp_7 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_10 = -tmp_9;
      real_t tmp_11 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_12 = -tmp_11;
      real_t tmp_13 = 1.0 / (-tmp_10*tmp_12 + tmp_8);
      real_t tmp_14 = tmp_13*tmp_9;
      real_t tmp_15 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_16 = tmp_13*(0.046910077030668018*tmp_0 + tmp_15);
      real_t tmp_17 = tmp_14*tmp_6 + tmp_16*tmp_7 - 1.0/3.0;
      real_t tmp_18 = tmp_13*tmp_4;
      real_t tmp_19 = tmp_11*tmp_16 + tmp_18*tmp_6 - 1.0/3.0;
      real_t tmp_20 = tmp_13*tmp_8;
      real_t tmp_21 = tmp_10*tmp_13;
      real_t tmp_22 = p_affine_10_0*(tmp_11*tmp_21 + tmp_20) + p_affine_10_1*(tmp_14*tmp_4 + tmp_21*tmp_4);
      real_t tmp_23 = tmp_13*tmp_7;
      real_t tmp_24 = p_affine_10_0*(tmp_11*tmp_23 + tmp_12*tmp_23) + p_affine_10_1*(tmp_12*tmp_14 + tmp_20);
      real_t tmp_25 = 0.23076534494715845*tmp_1 + tmp_5;
      real_t tmp_26 = 0.23076534494715845*tmp_0 + tmp_15;
      real_t tmp_27 = tmp_14*tmp_25 + tmp_23*tmp_26 - 1.0/3.0;
      real_t tmp_28 = tmp_11*tmp_13;
      real_t tmp_29 = tmp_18*tmp_25 + tmp_26*tmp_28 - 1.0/3.0;
      real_t tmp_30 = 0.5*tmp_1 + tmp_5;
      real_t tmp_31 = 0.5*tmp_0 + tmp_15;
      real_t tmp_32 = tmp_14*tmp_30 + tmp_23*tmp_31 - 1.0/3.0;
      real_t tmp_33 = tmp_18*tmp_30 + tmp_28*tmp_31 - 1.0/3.0;
      real_t tmp_34 = 0.7692346550528415*tmp_1 + tmp_5;
      real_t tmp_35 = 0.7692346550528415*tmp_0 + tmp_15;
      real_t tmp_36 = tmp_14*tmp_34 + tmp_23*tmp_35 - 1.0/3.0;
      real_t tmp_37 = tmp_18*tmp_34 + tmp_28*tmp_35 - 1.0/3.0;
      real_t tmp_38 = 0.95308992296933193*tmp_1 + tmp_5;
      real_t tmp_39 = 0.95308992296933193*tmp_0 + tmp_15;
      real_t tmp_40 = tmp_14*tmp_38 + tmp_23*tmp_39 - 1.0/3.0;
      real_t tmp_41 = tmp_18*tmp_38 + tmp_28*tmp_39 - 1.0/3.0;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(Scalar_Variable_Coefficient_2D_g0_out0_id0*(-tmp_22 + 3*tmp_3*(tmp_10*tmp_19 + tmp_17*tmp_4)) + Scalar_Variable_Coefficient_2D_g1_out0_id1*(-tmp_24 + 3*tmp_3*(tmp_12*tmp_17 + tmp_19*tmp_7))) + 0.2393143352496831*tmp_2*(Scalar_Variable_Coefficient_2D_g0_out0_id2*(-tmp_22 + 3*tmp_3*(tmp_10*tmp_29 + tmp_27*tmp_4)) + Scalar_Variable_Coefficient_2D_g1_out0_id3*(-tmp_24 + 3*tmp_3*(tmp_12*tmp_27 + tmp_29*tmp_7))) + 0.2844444444444445*tmp_2*(Scalar_Variable_Coefficient_2D_g0_out0_id4*(-tmp_22 + 3*tmp_3*(tmp_10*tmp_33 + tmp_32*tmp_4)) + Scalar_Variable_Coefficient_2D_g1_out0_id5*(-tmp_24 + 3*tmp_3*(tmp_12*tmp_32 + tmp_33*tmp_7))) + 0.2393143352496831*tmp_2*(Scalar_Variable_Coefficient_2D_g0_out0_id6*(-tmp_22 + 3*tmp_3*(tmp_10*tmp_37 + tmp_36*tmp_4)) + Scalar_Variable_Coefficient_2D_g1_out0_id7*(-tmp_24 + 3*tmp_3*(tmp_12*tmp_36 + tmp_37*tmp_7))) + 0.11846344252809471*tmp_2*(Scalar_Variable_Coefficient_2D_g0_out0_id8*(-tmp_22 + 3*tmp_3*(tmp_10*tmp_41 + tmp_4*tmp_40)) + Scalar_Variable_Coefficient_2D_g1_out0_id9*(-tmp_24 + 3*tmp_3*(tmp_12*tmp_40 + tmp_41*tmp_7)));
      elMat( 0, 0) = a_0_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id20 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id21 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id22 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id23 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id24 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id25 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id26 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id27 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id28 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id29 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id30 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id31 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id32 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id33 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id34 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id35 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id36 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id37 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id38 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id39 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id40 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id41 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id42 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id43 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id44 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id45 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id46 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id47 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id48 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id49 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id50 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id51 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id52 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id53 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id54 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id55 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id56 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id57 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id58 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id59 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id60 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id61 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id62 = 0;
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id0 );
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id1 );
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id2 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id3 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id4 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id5 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id6 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id7 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id8 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id9 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id10 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id11 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id12 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id13 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id14 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id15 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id16 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id17 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id18 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id19 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id20 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id21 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id22 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id23 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id24 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id25 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id26 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id27 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id28 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id29 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id30 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id31 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id32 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id33 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id34 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id35 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id36 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id37 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id38 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id39 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id40 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id41 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id42 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id43 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id44 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id45 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id46 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id47 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id48 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id49 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id50 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id51 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id52 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id53 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id54 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id55 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id56 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id57 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id58 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id59 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id60 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id61 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id62 );
      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_13 = tmp_10*tmp_9 - tmp_11*tmp_12;
      real_t tmp_14 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_15 = tmp_12*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_10*tmp_18;
      real_t tmp_21 = tmp_14*tmp_17;
      real_t tmp_22 = tmp_12*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_16*tmp_9 + tmp_11*tmp_19 - tmp_11*tmp_22 + tmp_15*tmp_8 - tmp_20*tmp_8 - tmp_21*tmp_9);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_11*tmp_18 - tmp_14*tmp_9;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_15 - tmp_20;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_13*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34 - 1.0/4.0;
      real_t tmp_36 = -tmp_10*tmp_8 + tmp_11*tmp_17;
      real_t tmp_37 = -tmp_11*tmp_16 + tmp_14*tmp_8;
      real_t tmp_38 = tmp_10*tmp_16 - tmp_21;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_12*tmp_8 - tmp_17*tmp_9;
      real_t tmp_41 = tmp_16*tmp_9 - tmp_18*tmp_8;
      real_t tmp_42 = tmp_19 - tmp_22;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42 - 1.0/4.0;
      real_t tmp_44 = tmp_23*tmp_8;
      real_t tmp_45 = tmp_23*tmp_9;
      real_t tmp_46 = tmp_11*tmp_23;
      real_t tmp_47 = p_affine_13_0*(tmp_31*tmp_44 + tmp_38*tmp_45 + tmp_42*tmp_46) + p_affine_13_1*(tmp_27*tmp_44 + tmp_37*tmp_45 + tmp_41*tmp_46) + p_affine_13_2*(tmp_13*tmp_44 + tmp_36*tmp_45 + tmp_40*tmp_46);
      real_t tmp_48 = tmp_17*tmp_23;
      real_t tmp_49 = tmp_12*tmp_23;
      real_t tmp_50 = tmp_10*tmp_23;
      real_t tmp_51 = p_affine_13_0*(tmp_31*tmp_48 + tmp_38*tmp_49 + tmp_42*tmp_50) + p_affine_13_1*(tmp_27*tmp_48 + tmp_37*tmp_49 + tmp_41*tmp_50) + p_affine_13_2*(tmp_13*tmp_48 + tmp_36*tmp_49 + tmp_40*tmp_50);
      real_t tmp_52 = tmp_16*tmp_23;
      real_t tmp_53 = tmp_18*tmp_23;
      real_t tmp_54 = tmp_14*tmp_23;
      real_t tmp_55 = p_affine_13_0*(tmp_31*tmp_52 + tmp_38*tmp_53 + tmp_42*tmp_54) + p_affine_13_1*(tmp_27*tmp_52 + tmp_37*tmp_53 + tmp_41*tmp_54) + p_affine_13_2*(tmp_13*tmp_52 + tmp_36*tmp_53 + tmp_40*tmp_54);
      real_t tmp_56 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_57 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_58 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_59 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_60 = tmp_13*tmp_57 + tmp_27*tmp_58 + tmp_31*tmp_59 - 1.0/4.0;
      real_t tmp_61 = tmp_36*tmp_57 + tmp_37*tmp_58 + tmp_38*tmp_59 - 1.0/4.0;
      real_t tmp_62 = tmp_40*tmp_57 + tmp_41*tmp_58 + tmp_42*tmp_59 - 1.0/4.0;
      real_t tmp_63 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_64 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_65 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_66 = tmp_13*tmp_63 + tmp_27*tmp_64 + tmp_31*tmp_65 - 1.0/4.0;
      real_t tmp_67 = tmp_36*tmp_63 + tmp_37*tmp_64 + tmp_38*tmp_65 - 1.0/4.0;
      real_t tmp_68 = tmp_40*tmp_63 + tmp_41*tmp_64 + tmp_42*tmp_65 - 1.0/4.0;
      real_t tmp_69 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_70 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_71 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_72 = tmp_13*tmp_69 + tmp_27*tmp_70 + tmp_31*tmp_71 - 1.0/4.0;
      real_t tmp_73 = tmp_36*tmp_69 + tmp_37*tmp_70 + tmp_38*tmp_71 - 1.0/4.0;
      real_t tmp_74 = tmp_40*tmp_69 + tmp_41*tmp_70 + tmp_42*tmp_71 - 1.0/4.0;
      real_t tmp_75 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_76 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_77 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_78 = tmp_13*tmp_75 + tmp_27*tmp_76 + tmp_31*tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_36*tmp_75 + tmp_37*tmp_76 + tmp_38*tmp_77 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_75 + tmp_41*tmp_76 + tmp_42*tmp_77 - 1.0/4.0;
      real_t tmp_81 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_82 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_83 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_84 = tmp_13*tmp_81 + tmp_27*tmp_82 + tmp_31*tmp_83 - 1.0/4.0;
      real_t tmp_85 = tmp_36*tmp_81 + tmp_37*tmp_82 + tmp_38*tmp_83 - 1.0/4.0;
      real_t tmp_86 = tmp_40*tmp_81 + tmp_41*tmp_82 + tmp_42*tmp_83 - 1.0/4.0;
      real_t tmp_87 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_88 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_89 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_90 = tmp_13*tmp_87 + tmp_27*tmp_88 + tmp_31*tmp_89 - 1.0/4.0;
      real_t tmp_91 = tmp_36*tmp_87 + tmp_37*tmp_88 + tmp_38*tmp_89 - 1.0/4.0;
      real_t tmp_92 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89 - 1.0/4.0;
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_94 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_95 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_96 = tmp_13*tmp_93 + tmp_27*tmp_94 + tmp_31*tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_36*tmp_93 + tmp_37*tmp_94 + tmp_38*tmp_95 - 1.0/4.0;
      real_t tmp_98 = tmp_40*tmp_93 + tmp_41*tmp_94 + tmp_42*tmp_95 - 1.0/4.0;
      real_t tmp_99 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_101 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_102 = tmp_100*tmp_27 + tmp_101*tmp_31 + tmp_13*tmp_99 - 1.0/4.0;
      real_t tmp_103 = tmp_100*tmp_37 + tmp_101*tmp_38 + tmp_36*tmp_99 - 1.0/4.0;
      real_t tmp_104 = tmp_100*tmp_41 + tmp_101*tmp_42 + tmp_40*tmp_99 - 1.0/4.0;
      real_t tmp_105 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_106 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_107 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_108 = tmp_105*tmp_13 + tmp_106*tmp_27 + tmp_107*tmp_31 - 1.0/4.0;
      real_t tmp_109 = tmp_105*tmp_36 + tmp_106*tmp_37 + tmp_107*tmp_38 - 1.0/4.0;
      real_t tmp_110 = tmp_105*tmp_40 + tmp_106*tmp_41 + tmp_107*tmp_42 - 1.0/4.0;
      real_t tmp_111 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_112 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_113 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_114 = tmp_111*tmp_13 + tmp_112*tmp_27 + tmp_113*tmp_31 - 1.0/4.0;
      real_t tmp_115 = tmp_111*tmp_36 + tmp_112*tmp_37 + tmp_113*tmp_38 - 1.0/4.0;
      real_t tmp_116 = tmp_111*tmp_40 + tmp_112*tmp_41 + tmp_113*tmp_42 - 1.0/4.0;
      real_t tmp_117 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_118 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_119 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_120 = tmp_117*tmp_13 + tmp_118*tmp_27 + tmp_119*tmp_31 - 1.0/4.0;
      real_t tmp_121 = tmp_117*tmp_36 + tmp_118*tmp_37 + tmp_119*tmp_38 - 1.0/4.0;
      real_t tmp_122 = tmp_117*tmp_40 + tmp_118*tmp_41 + tmp_119*tmp_42 - 1.0/4.0;
      real_t tmp_123 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_124 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_125 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_126 = tmp_123*tmp_13 + tmp_124*tmp_27 + tmp_125*tmp_31 - 1.0/4.0;
      real_t tmp_127 = tmp_123*tmp_36 + tmp_124*tmp_37 + tmp_125*tmp_38 - 1.0/4.0;
      real_t tmp_128 = tmp_123*tmp_40 + tmp_124*tmp_41 + tmp_125*tmp_42 - 1.0/4.0;
      real_t tmp_129 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_130 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_131 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_132 = tmp_129*tmp_13 + tmp_130*tmp_27 + tmp_131*tmp_31 - 1.0/4.0;
      real_t tmp_133 = tmp_129*tmp_36 + tmp_130*tmp_37 + tmp_131*tmp_38 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42 - 1.0/4.0;
      real_t tmp_135 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_136 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_137 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_138 = tmp_13*tmp_135 + tmp_136*tmp_27 + tmp_137*tmp_31 - 1.0/4.0;
      real_t tmp_139 = tmp_135*tmp_36 + tmp_136*tmp_37 + tmp_137*tmp_38 - 1.0/4.0;
      real_t tmp_140 = tmp_135*tmp_40 + tmp_136*tmp_41 + tmp_137*tmp_42 - 1.0/4.0;
      real_t tmp_141 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_142 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_143 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_144 = tmp_13*tmp_141 + tmp_142*tmp_27 + tmp_143*tmp_31 - 1.0/4.0;
      real_t tmp_145 = tmp_141*tmp_36 + tmp_142*tmp_37 + tmp_143*tmp_38 - 1.0/4.0;
      real_t tmp_146 = tmp_141*tmp_40 + tmp_142*tmp_41 + tmp_143*tmp_42 - 1.0/4.0;
      real_t tmp_147 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_149 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_150 = tmp_13*tmp_147 + tmp_148*tmp_27 + tmp_149*tmp_31 - 1.0/4.0;
      real_t tmp_151 = tmp_147*tmp_36 + tmp_148*tmp_37 + tmp_149*tmp_38 - 1.0/4.0;
      real_t tmp_152 = tmp_147*tmp_40 + tmp_148*tmp_41 + tmp_149*tmp_42 - 1.0/4.0;
      real_t tmp_153 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_154 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_155 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_156 = tmp_13*tmp_153 + tmp_154*tmp_27 + tmp_155*tmp_31 - 1.0/4.0;
      real_t tmp_157 = tmp_153*tmp_36 + tmp_154*tmp_37 + tmp_155*tmp_38 - 1.0/4.0;
      real_t tmp_158 = tmp_153*tmp_40 + tmp_154*tmp_41 + tmp_155*tmp_42 - 1.0/4.0;
      real_t tmp_159 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_160 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_161 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_162 = tmp_13*tmp_159 + tmp_160*tmp_27 + tmp_161*tmp_31 - 1.0/4.0;
      real_t tmp_163 = tmp_159*tmp_36 + tmp_160*tmp_37 + tmp_161*tmp_38 - 1.0/4.0;
      real_t tmp_164 = tmp_159*tmp_40 + tmp_160*tmp_41 + tmp_161*tmp_42 - 1.0/4.0;
      real_t tmp_165 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_166 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_167 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_168 = tmp_13*tmp_165 + tmp_166*tmp_27 + tmp_167*tmp_31 - 1.0/4.0;
      real_t tmp_169 = tmp_165*tmp_36 + tmp_166*tmp_37 + tmp_167*tmp_38 - 1.0/4.0;
      real_t tmp_170 = tmp_165*tmp_40 + tmp_166*tmp_41 + tmp_167*tmp_42 - 1.0/4.0;
      real_t tmp_171 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_172 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_173 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_174 = tmp_13*tmp_171 + tmp_172*tmp_27 + tmp_173*tmp_31 - 1.0/4.0;
      real_t tmp_175 = tmp_171*tmp_36 + tmp_172*tmp_37 + tmp_173*tmp_38 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42 - 1.0/4.0;
      real_t a_0_0 = 0.0068572537431980923*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id0*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_43 + tmp_35*tmp_8 + tmp_39*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id1*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_43 + tmp_12*tmp_39 + tmp_17*tmp_35)) + Scalar_Variable_Coefficient_3D_g2_out0_id2*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_43 + tmp_16*tmp_35 + tmp_18*tmp_39))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id12*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_80 + tmp_78*tmp_8 + tmp_79*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id13*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_80 + tmp_12*tmp_79 + tmp_17*tmp_78)) + Scalar_Variable_Coefficient_3D_g2_out0_id14*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_80 + tmp_16*tmp_78 + tmp_18*tmp_79))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id15*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_86 + tmp_8*tmp_84 + tmp_85*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id16*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_86 + tmp_12*tmp_85 + tmp_17*tmp_84)) + Scalar_Variable_Coefficient_3D_g2_out0_id17*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_86 + tmp_16*tmp_84 + tmp_18*tmp_85))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id18*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_92 + tmp_8*tmp_90 + tmp_9*tmp_91)) + Scalar_Variable_Coefficient_3D_g1_out0_id19*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_92 + tmp_12*tmp_91 + tmp_17*tmp_90)) + Scalar_Variable_Coefficient_3D_g2_out0_id20*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_92 + tmp_16*tmp_90 + tmp_18*tmp_91))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id21*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_98 + tmp_8*tmp_96 + tmp_9*tmp_97)) + Scalar_Variable_Coefficient_3D_g1_out0_id22*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_98 + tmp_12*tmp_97 + tmp_17*tmp_96)) + Scalar_Variable_Coefficient_3D_g2_out0_id23*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_98 + tmp_16*tmp_96 + tmp_18*tmp_97))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id24*(-tmp_47 + 3.0*tmp_7*(tmp_102*tmp_8 + tmp_103*tmp_9 + tmp_104*tmp_11)) + Scalar_Variable_Coefficient_3D_g1_out0_id25*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_104 + tmp_102*tmp_17 + tmp_103*tmp_12)) + Scalar_Variable_Coefficient_3D_g2_out0_id26*(-tmp_55 + 3.0*tmp_7*(tmp_102*tmp_16 + tmp_103*tmp_18 + tmp_104*tmp_14))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id27*(-tmp_47 + 3.0*tmp_7*(tmp_108*tmp_8 + tmp_109*tmp_9 + tmp_11*tmp_110)) + Scalar_Variable_Coefficient_3D_g1_out0_id28*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_110 + tmp_108*tmp_17 + tmp_109*tmp_12)) + Scalar_Variable_Coefficient_3D_g2_out0_id29*(-tmp_55 + 3.0*tmp_7*(tmp_108*tmp_16 + tmp_109*tmp_18 + tmp_110*tmp_14))) + 0.037198804536718075*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id3*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_62 + tmp_60*tmp_8 + tmp_61*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id4*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_62 + tmp_12*tmp_61 + tmp_17*tmp_60)) + Scalar_Variable_Coefficient_3D_g2_out0_id5*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_62 + tmp_16*tmp_60 + tmp_18*tmp_61))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id30*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_116 + tmp_114*tmp_8 + tmp_115*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id31*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_116 + tmp_114*tmp_17 + tmp_115*tmp_12)) + Scalar_Variable_Coefficient_3D_g2_out0_id32*(-tmp_55 + 3.0*tmp_7*(tmp_114*tmp_16 + tmp_115*tmp_18 + tmp_116*tmp_14))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id33*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_122 + tmp_120*tmp_8 + tmp_121*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id34*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_122 + tmp_12*tmp_121 + tmp_120*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id35*(-tmp_55 + 3.0*tmp_7*(tmp_120*tmp_16 + tmp_121*tmp_18 + tmp_122*tmp_14))) + 0.042507265838595799*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id36*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_128 + tmp_126*tmp_8 + tmp_127*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id37*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_128 + tmp_12*tmp_127 + tmp_126*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id38*(-tmp_55 + 3.0*tmp_7*(tmp_126*tmp_16 + tmp_127*tmp_18 + tmp_128*tmp_14))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id39*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_134 + tmp_132*tmp_8 + tmp_133*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id40*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_134 + tmp_12*tmp_133 + tmp_132*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id41*(-tmp_55 + 3.0*tmp_7*(tmp_132*tmp_16 + tmp_133*tmp_18 + tmp_134*tmp_14))) + 0.0068572537431980923*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id42*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_140 + tmp_138*tmp_8 + tmp_139*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id43*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_140 + tmp_12*tmp_139 + tmp_138*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id44*(-tmp_55 + 3.0*tmp_7*(tmp_138*tmp_16 + tmp_139*tmp_18 + tmp_14*tmp_140))) + 0.037198804536718075*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id45*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_146 + tmp_144*tmp_8 + tmp_145*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id46*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_146 + tmp_12*tmp_145 + tmp_144*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id47*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_146 + tmp_144*tmp_16 + tmp_145*tmp_18))) + 0.042507265838595799*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id48*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_152 + tmp_150*tmp_8 + tmp_151*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id49*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_152 + tmp_12*tmp_151 + tmp_150*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id50*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_152 + tmp_150*tmp_16 + tmp_151*tmp_18))) + 0.0068572537431980923*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id51*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_158 + tmp_156*tmp_8 + tmp_157*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id52*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_158 + tmp_12*tmp_157 + tmp_156*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id53*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_158 + tmp_156*tmp_16 + tmp_157*tmp_18))) + 0.037198804536718075*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id54*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_164 + tmp_162*tmp_8 + tmp_163*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id55*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_164 + tmp_12*tmp_163 + tmp_162*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id56*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_164 + tmp_16*tmp_162 + tmp_163*tmp_18))) + 0.042507265838595799*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id57*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_170 + tmp_168*tmp_8 + tmp_169*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id58*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_170 + tmp_12*tmp_169 + tmp_168*tmp_17)) + Scalar_Variable_Coefficient_3D_g2_out0_id59*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_170 + tmp_16*tmp_168 + tmp_169*tmp_18))) + 0.020848748529055869*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id6*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_68 + tmp_66*tmp_8 + tmp_67*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id7*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_68 + tmp_12*tmp_67 + tmp_17*tmp_66)) + Scalar_Variable_Coefficient_3D_g2_out0_id8*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_68 + tmp_16*tmp_66 + tmp_18*tmp_67))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id60*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_176 + tmp_174*tmp_8 + tmp_175*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id61*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_176 + tmp_12*tmp_175 + tmp_17*tmp_174)) + Scalar_Variable_Coefficient_3D_g2_out0_id62*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_176 + tmp_16*tmp_174 + tmp_175*tmp_18))) + 0.019202922745021479*tmp_56*(Scalar_Variable_Coefficient_3D_g0_out0_id9*(-tmp_47 + 3.0*tmp_7*(tmp_11*tmp_74 + tmp_72*tmp_8 + tmp_73*tmp_9)) + Scalar_Variable_Coefficient_3D_g1_out0_id10*(-tmp_51 + 3.0*tmp_7*(tmp_10*tmp_74 + tmp_12*tmp_73 + tmp_17*tmp_72)) + Scalar_Variable_Coefficient_3D_g2_out0_id11*(-tmp_55 + 3.0*tmp_7*(tmp_14*tmp_74 + tmp_16*tmp_72 + tmp_18*tmp_73)));
      elMat( 0, 0) = a_0_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_4*tmp_7;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_7;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_8*tmp_9);
      real_t tmp_16 = tmp_15*tmp_7;
      real_t tmp_17 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_18 = tmp_0*tmp_15;
      real_t tmp_19 = -tmp_14 + tmp_9;
      real_t tmp_20 = tmp_15*tmp_3;
      real_t tmp_21 = -tmp_0*tmp_8 + tmp_11*tmp_3;
      real_t tmp_22 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_23 = tmp_0*tmp_10 - tmp_11*tmp_7;
      real_t tmp_24 = -tmp_1*tmp_11 + tmp_4*tmp_8;
      real_t tmp_25 = tmp_1*tmp_10 - tmp_12*tmp_8;
      real_t tmp_26 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_27 = tmp_12*tmp_15;
      real_t tmp_28 = tmp_15*tmp_4;
      real_t tmp_29 = tmp_1*tmp_15;
      real_t tmp_30 = tmp_10*tmp_15;
      real_t tmp_31 = tmp_11*tmp_15;
      real_t tmp_32 = tmp_15*tmp_8;
      real_t tmp_33 = p_affine_0_0*p_affine_1_1;
      real_t tmp_34 = p_affine_0_0*p_affine_1_2;
      real_t tmp_35 = p_affine_2_1*p_affine_3_2;
      real_t tmp_36 = p_affine_0_1*p_affine_1_0;
      real_t tmp_37 = p_affine_0_1*p_affine_1_2;
      real_t tmp_38 = p_affine_2_2*p_affine_3_0;
      real_t tmp_39 = p_affine_0_2*p_affine_1_0;
      real_t tmp_40 = p_affine_0_2*p_affine_1_1;
      real_t tmp_41 = p_affine_2_0*p_affine_3_1;
      real_t tmp_42 = p_affine_2_2*p_affine_3_1;
      real_t tmp_43 = p_affine_2_0*p_affine_3_2;
      real_t tmp_44 = p_affine_2_1*p_affine_3_0;
      real_t tmp_45 = (((tmp_16*tmp_21 + tmp_18*tmp_22 + tmp_20*tmp_23)*(tmp_16*tmp_21 + tmp_18*tmp_22 + tmp_20*tmp_23)) + ((tmp_16*tmp_24 + tmp_18*tmp_25 + tmp_20*tmp_26)*(tmp_16*tmp_24 + tmp_18*tmp_25 + tmp_20*tmp_26)) + ((tmp_16*tmp_6 + tmp_17*tmp_18 + tmp_19*tmp_20)*(tmp_16*tmp_6 + tmp_17*tmp_18 + tmp_19*tmp_20)) + ((tmp_17*tmp_28 + tmp_19*tmp_29 + tmp_27*tmp_6)*(tmp_17*tmp_28 + tmp_19*tmp_29 + tmp_27*tmp_6)) + ((tmp_17*tmp_31 + tmp_19*tmp_32 + tmp_30*tmp_6)*(tmp_17*tmp_31 + tmp_19*tmp_32 + tmp_30*tmp_6)) + ((tmp_21*tmp_27 + tmp_22*tmp_28 + tmp_23*tmp_29)*(tmp_21*tmp_27 + tmp_22*tmp_28 + tmp_23*tmp_29)) + ((tmp_21*tmp_30 + tmp_22*tmp_31 + tmp_23*tmp_32)*(tmp_21*tmp_30 + tmp_22*tmp_31 + tmp_23*tmp_32)) + ((tmp_24*tmp_27 + tmp_25*tmp_28 + tmp_26*tmp_29)*(tmp_24*tmp_27 + tmp_25*tmp_28 + tmp_26*tmp_29)) + ((tmp_24*tmp_30 + tmp_25*tmp_31 + tmp_26*tmp_32)*(tmp_24*tmp_30 + tmp_25*tmp_31 + tmp_26*tmp_32)))*std::abs(p_affine_0_0*tmp_35 - p_affine_0_0*tmp_42 + p_affine_0_1*tmp_38 - p_affine_0_1*tmp_43 + p_affine_0_2*tmp_41 - p_affine_0_2*tmp_44 - p_affine_1_0*tmp_35 + p_affine_1_0*tmp_42 - p_affine_1_1*tmp_38 + p_affine_1_1*tmp_43 - p_affine_1_2*tmp_41 + p_affine_1_2*tmp_44 + p_affine_2_0*tmp_37 - p_affine_2_0*tmp_40 - p_affine_2_1*tmp_34 + p_affine_2_1*tmp_39 + p_affine_2_2*tmp_33 - p_affine_2_2*tmp_36 - p_affine_3_0*tmp_37 + p_affine_3_0*tmp_40 + p_affine_3_1*tmp_34 - p_affine_3_1*tmp_39 - p_affine_3_2*tmp_33 + p_affine_3_2*tmp_36);
      real_t a_0_0 = 0.1666666666666668*tmp_45;
      elMat( 0, 0) = a_0_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_5*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_12 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_13 = tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_13 + tmp_0*tmp_9 + tmp_10*tmp_3 - tmp_10*tmp_6 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_14);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = tmp_12*tmp_4 - tmp_14;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_13 + tmp_9;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_7 + tmp_21*tmp_26 + tmp_27*tmp_32 - 1.0/4.0;
      real_t tmp_34 = -tmp_0*tmp_2 + tmp_11*tmp_4;
      real_t tmp_35 = tmp_0*tmp_8 - tmp_10*tmp_4;
      real_t tmp_36 = tmp_10*tmp_2 - tmp_11*tmp_8;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36 - 1.0/4.0;
      real_t tmp_38 = tmp_0*tmp_5 - tmp_1*tmp_11;
      real_t tmp_39 = -tmp_0*tmp_12 + tmp_1*tmp_10;
      real_t tmp_40 = -tmp_10*tmp_5 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40 - 1.0/4.0;
      real_t tmp_42 = tmp_0*tmp_33 + tmp_1*tmp_37 + tmp_4*tmp_41;
      real_t tmp_43 = tmp_0*tmp_15;
      real_t tmp_44 = tmp_1*tmp_15;
      real_t tmp_45 = tmp_15*tmp_4;
      real_t tmp_46 = 1.0*p_affine_13_0*(tmp_27*tmp_43 + tmp_36*tmp_44 + tmp_40*tmp_45) + 1.0*p_affine_13_1*(tmp_21*tmp_43 + tmp_35*tmp_44 + tmp_39*tmp_45) + 1.0*p_affine_13_2*(tmp_34*tmp_44 + tmp_38*tmp_45 + tmp_43*tmp_7);
      real_t tmp_47 = tmp_11*tmp_33 + tmp_2*tmp_41 + tmp_37*tmp_5;
      real_t tmp_48 = tmp_11*tmp_15;
      real_t tmp_49 = tmp_15*tmp_5;
      real_t tmp_50 = tmp_15*tmp_2;
      real_t tmp_51 = 1.0*p_affine_13_0*(tmp_27*tmp_48 + tmp_36*tmp_49 + tmp_40*tmp_50) + 1.0*p_affine_13_1*(tmp_21*tmp_48 + tmp_35*tmp_49 + tmp_39*tmp_50) + 1.0*p_affine_13_2*(tmp_34*tmp_49 + tmp_38*tmp_50 + tmp_48*tmp_7);
      real_t tmp_52 = tmp_10*tmp_33 + tmp_12*tmp_37 + tmp_41*tmp_8;
      real_t tmp_53 = tmp_10*tmp_15;
      real_t tmp_54 = tmp_12*tmp_15;
      real_t tmp_55 = tmp_15*tmp_8;
      real_t tmp_56 = 1.0*p_affine_13_0*(tmp_27*tmp_53 + tmp_36*tmp_54 + tmp_40*tmp_55) + 1.0*p_affine_13_1*(tmp_21*tmp_53 + tmp_35*tmp_54 + tmp_39*tmp_55) + 1.0*p_affine_13_2*(tmp_34*tmp_54 + tmp_38*tmp_55 + tmp_53*tmp_7);
      real_t tmp_57 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_58 = std::pow(tmp_57, -0.25);
      real_t tmp_59 = 1.0*std::pow(tmp_57, 1.0/2.0);
      real_t tmp_60 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_61 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_62 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_63 = tmp_21*tmp_61 + tmp_27*tmp_62 + tmp_60*tmp_7 - 1.0/4.0;
      real_t tmp_64 = tmp_34*tmp_60 + tmp_35*tmp_61 + tmp_36*tmp_62 - 1.0/4.0;
      real_t tmp_65 = tmp_38*tmp_60 + tmp_39*tmp_61 + tmp_40*tmp_62 - 1.0/4.0;
      real_t tmp_66 = tmp_0*tmp_63 + tmp_1*tmp_64 + tmp_4*tmp_65;
      real_t tmp_67 = tmp_11*tmp_63 + tmp_2*tmp_65 + tmp_5*tmp_64;
      real_t tmp_68 = tmp_10*tmp_63 + tmp_12*tmp_64 + tmp_65*tmp_8;
      real_t tmp_69 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_70 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_71 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_72 = tmp_21*tmp_70 + tmp_27*tmp_71 + tmp_69*tmp_7 - 1.0/4.0;
      real_t tmp_73 = tmp_34*tmp_69 + tmp_35*tmp_70 + tmp_36*tmp_71 - 1.0/4.0;
      real_t tmp_74 = tmp_38*tmp_69 + tmp_39*tmp_70 + tmp_40*tmp_71 - 1.0/4.0;
      real_t tmp_75 = tmp_0*tmp_72 + tmp_1*tmp_73 + tmp_4*tmp_74;
      real_t tmp_76 = tmp_11*tmp_72 + tmp_2*tmp_74 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_10*tmp_72 + tmp_12*tmp_73 + tmp_74*tmp_8;
      real_t tmp_78 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_7*tmp_78 - 1.0/4.0;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80 - 1.0/4.0;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80 - 1.0/4.0;
      real_t tmp_84 = tmp_0*tmp_81 + tmp_1*tmp_82 + tmp_4*tmp_83;
      real_t tmp_85 = tmp_11*tmp_81 + tmp_2*tmp_83 + tmp_5*tmp_82;
      real_t tmp_86 = tmp_10*tmp_81 + tmp_12*tmp_82 + tmp_8*tmp_83;
      real_t tmp_87 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_7*tmp_87 - 1.0/4.0;
      real_t tmp_91 = tmp_34*tmp_87 + tmp_35*tmp_88 + tmp_36*tmp_89 - 1.0/4.0;
      real_t tmp_92 = tmp_38*tmp_87 + tmp_39*tmp_88 + tmp_40*tmp_89 - 1.0/4.0;
      real_t tmp_93 = tmp_0*tmp_90 + tmp_1*tmp_91 + tmp_4*tmp_92;
      real_t tmp_94 = tmp_11*tmp_90 + tmp_2*tmp_92 + tmp_5*tmp_91;
      real_t tmp_95 = tmp_10*tmp_90 + tmp_12*tmp_91 + tmp_8*tmp_92;
      real_t tmp_96 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_97 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_98 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_99 = tmp_21*tmp_97 + tmp_27*tmp_98 + tmp_7*tmp_96 - 1.0/4.0;
      real_t tmp_100 = tmp_34*tmp_96 + tmp_35*tmp_97 + tmp_36*tmp_98 - 1.0/4.0;
      real_t tmp_101 = tmp_38*tmp_96 + tmp_39*tmp_97 + tmp_40*tmp_98 - 1.0/4.0;
      real_t tmp_102 = tmp_0*tmp_99 + tmp_1*tmp_100 + tmp_101*tmp_4;
      real_t tmp_103 = tmp_100*tmp_5 + tmp_101*tmp_2 + tmp_11*tmp_99;
      real_t tmp_104 = tmp_10*tmp_99 + tmp_100*tmp_12 + tmp_101*tmp_8;
      real_t tmp_105 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_106 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_107 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_108 = tmp_105*tmp_7 + tmp_106*tmp_21 + tmp_107*tmp_27 - 1.0/4.0;
      real_t tmp_109 = tmp_105*tmp_34 + tmp_106*tmp_35 + tmp_107*tmp_36 - 1.0/4.0;
      real_t tmp_110 = tmp_105*tmp_38 + tmp_106*tmp_39 + tmp_107*tmp_40 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_108 + tmp_1*tmp_109 + tmp_110*tmp_4;
      real_t tmp_112 = tmp_108*tmp_11 + tmp_109*tmp_5 + tmp_110*tmp_2;
      real_t tmp_113 = tmp_10*tmp_108 + tmp_109*tmp_12 + tmp_110*tmp_8;
      real_t tmp_114 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_115 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_116 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_117 = tmp_114*tmp_7 + tmp_115*tmp_21 + tmp_116*tmp_27 - 1.0/4.0;
      real_t tmp_118 = tmp_114*tmp_34 + tmp_115*tmp_35 + tmp_116*tmp_36 - 1.0/4.0;
      real_t tmp_119 = tmp_114*tmp_38 + tmp_115*tmp_39 + tmp_116*tmp_40 - 1.0/4.0;
      real_t tmp_120 = tmp_0*tmp_117 + tmp_1*tmp_118 + tmp_119*tmp_4;
      real_t tmp_121 = tmp_11*tmp_117 + tmp_118*tmp_5 + tmp_119*tmp_2;
      real_t tmp_122 = tmp_10*tmp_117 + tmp_118*tmp_12 + tmp_119*tmp_8;
      real_t tmp_123 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_124 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_125 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_126 = tmp_123*tmp_7 + tmp_124*tmp_21 + tmp_125*tmp_27 - 1.0/4.0;
      real_t tmp_127 = tmp_123*tmp_34 + tmp_124*tmp_35 + tmp_125*tmp_36 - 1.0/4.0;
      real_t tmp_128 = tmp_123*tmp_38 + tmp_124*tmp_39 + tmp_125*tmp_40 - 1.0/4.0;
      real_t tmp_129 = tmp_0*tmp_126 + tmp_1*tmp_127 + tmp_128*tmp_4;
      real_t tmp_130 = tmp_11*tmp_126 + tmp_127*tmp_5 + tmp_128*tmp_2;
      real_t tmp_131 = tmp_10*tmp_126 + tmp_12*tmp_127 + tmp_128*tmp_8;
      real_t tmp_132 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_133 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_135 = tmp_132*tmp_7 + tmp_133*tmp_21 + tmp_134*tmp_27 - 1.0/4.0;
      real_t tmp_136 = tmp_132*tmp_34 + tmp_133*tmp_35 + tmp_134*tmp_36 - 1.0/4.0;
      real_t tmp_137 = tmp_132*tmp_38 + tmp_133*tmp_39 + tmp_134*tmp_40 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_135 + tmp_1*tmp_136 + tmp_137*tmp_4;
      real_t tmp_139 = tmp_11*tmp_135 + tmp_136*tmp_5 + tmp_137*tmp_2;
      real_t tmp_140 = tmp_10*tmp_135 + tmp_12*tmp_136 + tmp_137*tmp_8;
      real_t tmp_141 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_142 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_143 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_144 = tmp_141*tmp_7 + tmp_142*tmp_21 + tmp_143*tmp_27 - 1.0/4.0;
      real_t tmp_145 = tmp_141*tmp_34 + tmp_142*tmp_35 + tmp_143*tmp_36 - 1.0/4.0;
      real_t tmp_146 = tmp_141*tmp_38 + tmp_142*tmp_39 + tmp_143*tmp_40 - 1.0/4.0;
      real_t tmp_147 = tmp_0*tmp_144 + tmp_1*tmp_145 + tmp_146*tmp_4;
      real_t tmp_148 = tmp_11*tmp_144 + tmp_145*tmp_5 + tmp_146*tmp_2;
      real_t tmp_149 = tmp_10*tmp_144 + tmp_12*tmp_145 + tmp_146*tmp_8;
      real_t tmp_150 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_7 + tmp_151*tmp_21 + tmp_152*tmp_27 - 1.0/4.0;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36 - 1.0/4.0;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40 - 1.0/4.0;
      real_t tmp_156 = tmp_0*tmp_153 + tmp_1*tmp_154 + tmp_155*tmp_4;
      real_t tmp_157 = tmp_11*tmp_153 + tmp_154*tmp_5 + tmp_155*tmp_2;
      real_t tmp_158 = tmp_10*tmp_153 + tmp_12*tmp_154 + tmp_155*tmp_8;
      real_t tmp_159 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_160 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_161 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_162 = tmp_159*tmp_7 + tmp_160*tmp_21 + tmp_161*tmp_27 - 1.0/4.0;
      real_t tmp_163 = tmp_159*tmp_34 + tmp_160*tmp_35 + tmp_161*tmp_36 - 1.0/4.0;
      real_t tmp_164 = tmp_159*tmp_38 + tmp_160*tmp_39 + tmp_161*tmp_40 - 1.0/4.0;
      real_t tmp_165 = tmp_0*tmp_162 + tmp_1*tmp_163 + tmp_164*tmp_4;
      real_t tmp_166 = tmp_11*tmp_162 + tmp_163*tmp_5 + tmp_164*tmp_2;
      real_t tmp_167 = tmp_10*tmp_162 + tmp_12*tmp_163 + tmp_164*tmp_8;
      real_t tmp_168 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_169 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_170 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_171 = tmp_168*tmp_7 + tmp_169*tmp_21 + tmp_170*tmp_27 - 1.0/4.0;
      real_t tmp_172 = tmp_168*tmp_34 + tmp_169*tmp_35 + tmp_170*tmp_36 - 1.0/4.0;
      real_t tmp_173 = tmp_168*tmp_38 + tmp_169*tmp_39 + tmp_170*tmp_40 - 1.0/4.0;
      real_t tmp_174 = tmp_0*tmp_171 + tmp_1*tmp_172 + tmp_173*tmp_4;
      real_t tmp_175 = tmp_11*tmp_171 + tmp_172*tmp_5 + tmp_173*tmp_2;
      real_t tmp_176 = tmp_10*tmp_171 + tmp_12*tmp_172 + tmp_173*tmp_8;
      real_t tmp_177 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_178 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_179 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_180 = tmp_177*tmp_7 + tmp_178*tmp_21 + tmp_179*tmp_27 - 1.0/4.0;
      real_t tmp_181 = tmp_177*tmp_34 + tmp_178*tmp_35 + tmp_179*tmp_36 - 1.0/4.0;
      real_t tmp_182 = tmp_177*tmp_38 + tmp_178*tmp_39 + tmp_179*tmp_40 - 1.0/4.0;
      real_t tmp_183 = tmp_0*tmp_180 + tmp_1*tmp_181 + tmp_182*tmp_4;
      real_t tmp_184 = tmp_11*tmp_180 + tmp_181*tmp_5 + tmp_182*tmp_2;
      real_t tmp_185 = tmp_10*tmp_180 + tmp_12*tmp_181 + tmp_182*tmp_8;
      real_t tmp_186 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_7 + tmp_187*tmp_21 + tmp_188*tmp_27 - 1.0/4.0;
      real_t tmp_190 = tmp_186*tmp_34 + tmp_187*tmp_35 + tmp_188*tmp_36 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_38 + tmp_187*tmp_39 + tmp_188*tmp_40 - 1.0/4.0;
      real_t tmp_192 = tmp_0*tmp_189 + tmp_1*tmp_190 + tmp_191*tmp_4;
      real_t tmp_193 = tmp_11*tmp_189 + tmp_190*tmp_5 + tmp_191*tmp_2;
      real_t tmp_194 = tmp_10*tmp_189 + tmp_12*tmp_190 + tmp_191*tmp_8;
      real_t tmp_195 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_196 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_197 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_198 = tmp_195*tmp_7 + tmp_196*tmp_21 + tmp_197*tmp_27 - 1.0/4.0;
      real_t tmp_199 = tmp_195*tmp_34 + tmp_196*tmp_35 + tmp_197*tmp_36 - 1.0/4.0;
      real_t tmp_200 = tmp_195*tmp_38 + tmp_196*tmp_39 + tmp_197*tmp_40 - 1.0/4.0;
      real_t tmp_201 = tmp_0*tmp_198 + tmp_1*tmp_199 + tmp_200*tmp_4;
      real_t tmp_202 = tmp_11*tmp_198 + tmp_199*tmp_5 + tmp_2*tmp_200;
      real_t tmp_203 = tmp_10*tmp_198 + tmp_12*tmp_199 + tmp_200*tmp_8;
      real_t tmp_204 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_205 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_206 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_207 = tmp_204*tmp_7 + tmp_205*tmp_21 + tmp_206*tmp_27 - 1.0/4.0;
      real_t tmp_208 = tmp_204*tmp_34 + tmp_205*tmp_35 + tmp_206*tmp_36 - 1.0/4.0;
      real_t tmp_209 = tmp_204*tmp_38 + tmp_205*tmp_39 + tmp_206*tmp_40 - 1.0/4.0;
      real_t tmp_210 = tmp_0*tmp_207 + tmp_1*tmp_208 + tmp_209*tmp_4;
      real_t tmp_211 = tmp_11*tmp_207 + tmp_2*tmp_209 + tmp_208*tmp_5;
      real_t tmp_212 = tmp_10*tmp_207 + tmp_12*tmp_208 + tmp_209*tmp_8;
      real_t tmp_213 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_7 + tmp_215*tmp_27 - 1.0/4.0;
      real_t tmp_217 = tmp_213*tmp_34 + tmp_214*tmp_35 + tmp_215*tmp_36 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_38 + tmp_214*tmp_39 + tmp_215*tmp_40 - 1.0/4.0;
      real_t tmp_219 = tmp_0*tmp_216 + tmp_1*tmp_217 + tmp_218*tmp_4;
      real_t tmp_220 = tmp_11*tmp_216 + tmp_2*tmp_218 + tmp_217*tmp_5;
      real_t tmp_221 = tmp_10*tmp_216 + tmp_12*tmp_217 + tmp_218*tmp_8;
      real_t tmp_222 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_223 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_224 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_225 = tmp_21*tmp_223 + tmp_222*tmp_7 + tmp_224*tmp_27 - 1.0/4.0;
      real_t tmp_226 = tmp_222*tmp_34 + tmp_223*tmp_35 + tmp_224*tmp_36 - 1.0/4.0;
      real_t tmp_227 = tmp_222*tmp_38 + tmp_223*tmp_39 + tmp_224*tmp_40 - 1.0/4.0;
      real_t tmp_228 = tmp_0*tmp_225 + tmp_1*tmp_226 + tmp_227*tmp_4;
      real_t tmp_229 = tmp_11*tmp_225 + tmp_2*tmp_227 + tmp_226*tmp_5;
      real_t tmp_230 = tmp_10*tmp_225 + tmp_12*tmp_226 + tmp_227*tmp_8;
      real_t tmp_231 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_232 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_233 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_234 = tmp_21*tmp_232 + tmp_231*tmp_7 + tmp_233*tmp_27 - 1.0/4.0;
      real_t tmp_235 = tmp_231*tmp_34 + tmp_232*tmp_35 + tmp_233*tmp_36 - 1.0/4.0;
      real_t tmp_236 = tmp_231*tmp_38 + tmp_232*tmp_39 + tmp_233*tmp_40 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_234 + tmp_1*tmp_235 + tmp_236*tmp_4;
      real_t tmp_238 = tmp_11*tmp_234 + tmp_2*tmp_236 + tmp_235*tmp_5;
      real_t tmp_239 = tmp_10*tmp_234 + tmp_12*tmp_235 + tmp_236*tmp_8;
      real_t a_0_0 = 0.019202922745021479*tmp_59*(-tmp_102*tmp_46 - tmp_103*tmp_51 - tmp_104*tmp_56 + 3.0*tmp_58*((tmp_102*tmp_102) + (tmp_103*tmp_103) + (tmp_104*tmp_104))) + 0.020848748529055869*tmp_59*(-tmp_111*tmp_46 - tmp_112*tmp_51 - tmp_113*tmp_56 + 3.0*tmp_58*((tmp_111*tmp_111) + (tmp_112*tmp_112) + (tmp_113*tmp_113))) + 0.019202922745021479*tmp_59*(-tmp_120*tmp_46 - tmp_121*tmp_51 - tmp_122*tmp_56 + 3.0*tmp_58*((tmp_120*tmp_120) + (tmp_121*tmp_121) + (tmp_122*tmp_122))) + 0.020848748529055869*tmp_59*(-tmp_129*tmp_46 - tmp_130*tmp_51 - tmp_131*tmp_56 + 3.0*tmp_58*((tmp_129*tmp_129) + (tmp_130*tmp_130) + (tmp_131*tmp_131))) + 0.019202922745021479*tmp_59*(-tmp_138*tmp_46 - tmp_139*tmp_51 - tmp_140*tmp_56 + 3.0*tmp_58*((tmp_138*tmp_138) + (tmp_139*tmp_139) + (tmp_140*tmp_140))) + 0.020848748529055869*tmp_59*(-tmp_147*tmp_46 - tmp_148*tmp_51 - tmp_149*tmp_56 + 3.0*tmp_58*((tmp_147*tmp_147) + (tmp_148*tmp_148) + (tmp_149*tmp_149))) + 0.019202922745021479*tmp_59*(-tmp_156*tmp_46 - tmp_157*tmp_51 - tmp_158*tmp_56 + 3.0*tmp_58*((tmp_156*tmp_156) + (tmp_157*tmp_157) + (tmp_158*tmp_158))) + 0.042507265838595799*tmp_59*(-tmp_165*tmp_46 - tmp_166*tmp_51 - tmp_167*tmp_56 + 3.0*tmp_58*((tmp_165*tmp_165) + (tmp_166*tmp_166) + (tmp_167*tmp_167))) + 0.020848748529055869*tmp_59*(-tmp_174*tmp_46 - tmp_175*tmp_51 - tmp_176*tmp_56 + 3.0*tmp_58*((tmp_174*tmp_174) + (tmp_175*tmp_175) + (tmp_176*tmp_176))) + 0.0068572537431980923*tmp_59*(-tmp_183*tmp_46 - tmp_184*tmp_51 - tmp_185*tmp_56 + 3.0*tmp_58*((tmp_183*tmp_183) + (tmp_184*tmp_184) + (tmp_185*tmp_185))) + 0.037198804536718075*tmp_59*(-tmp_192*tmp_46 - tmp_193*tmp_51 - tmp_194*tmp_56 + 3.0*tmp_58*((tmp_192*tmp_192) + (tmp_193*tmp_193) + (tmp_194*tmp_194))) + 0.042507265838595799*tmp_59*(-tmp_201*tmp_46 - tmp_202*tmp_51 - tmp_203*tmp_56 + 3.0*tmp_58*((tmp_201*tmp_201) + (tmp_202*tmp_202) + (tmp_203*tmp_203))) + 0.0068572537431980923*tmp_59*(-tmp_210*tmp_46 - tmp_211*tmp_51 - tmp_212*tmp_56 + 3.0*tmp_58*((tmp_210*tmp_210) + (tmp_211*tmp_211) + (tmp_212*tmp_212))) + 0.037198804536718075*tmp_59*(-tmp_219*tmp_46 - tmp_220*tmp_51 - tmp_221*tmp_56 + 3.0*tmp_58*((tmp_219*tmp_219) + (tmp_220*tmp_220) + (tmp_221*tmp_221))) + 0.042507265838595799*tmp_59*(-tmp_228*tmp_46 - tmp_229*tmp_51 - tmp_230*tmp_56 + 3.0*tmp_58*((tmp_228*tmp_228) + (tmp_229*tmp_229) + (tmp_230*tmp_230))) + 0.019202922745021479*tmp_59*(-tmp_237*tmp_46 - tmp_238*tmp_51 - tmp_239*tmp_56 + 3.0*tmp_58*((tmp_237*tmp_237) + (tmp_238*tmp_238) + (tmp_239*tmp_239))) + 0.0068572537431980923*tmp_59*(-tmp_42*tmp_46 - tmp_47*tmp_51 - tmp_52*tmp_56 + 3.0*tmp_58*((tmp_42*tmp_42) + (tmp_47*tmp_47) + (tmp_52*tmp_52))) + 0.037198804536718075*tmp_59*(-tmp_46*tmp_66 - tmp_51*tmp_67 - tmp_56*tmp_68 + 3.0*tmp_58*((tmp_66*tmp_66) + (tmp_67*tmp_67) + (tmp_68*tmp_68))) + 0.020848748529055869*tmp_59*(-tmp_46*tmp_75 - tmp_51*tmp_76 - tmp_56*tmp_77 + 3.0*tmp_58*((tmp_75*tmp_75) + (tmp_76*tmp_76) + (tmp_77*tmp_77))) + 0.019202922745021479*tmp_59*(-tmp_46*tmp_84 - tmp_51*tmp_85 - tmp_56*tmp_86 + 3.0*tmp_58*((tmp_84*tmp_84) + (tmp_85*tmp_85) + (tmp_86*tmp_86))) + 0.020848748529055869*tmp_59*(-tmp_46*tmp_93 - tmp_51*tmp_94 - tmp_56*tmp_95 + 3.0*tmp_58*((tmp_93*tmp_93) + (tmp_94*tmp_94) + (tmp_95*tmp_95)));
      elMat( 0, 0) = a_0_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_12 = tmp_11*tmp_4;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_9;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_12 - tmp_10*tmp_14 - tmp_13*tmp_8 + tmp_2*tmp_7 + tmp_3*tmp_8*tmp_9 - tmp_5*tmp_7);
      real_t tmp_16 = tmp_15*tmp_7;
      real_t tmp_17 = -tmp_13 + tmp_3*tmp_9;
      real_t tmp_18 = tmp_15*tmp_8;
      real_t tmp_19 = tmp_12 - tmp_14;
      real_t tmp_20 = tmp_10*tmp_15;
      real_t tmp_21 = -tmp_1*tmp_8 + tmp_10*tmp_4;
      real_t tmp_22 = tmp_1*tmp_7 - tmp_10*tmp_9;
      real_t tmp_23 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_24 = -tmp_0*tmp_10 + tmp_3*tmp_8;
      real_t tmp_25 = tmp_10*tmp_11 - tmp_3*tmp_7;
      real_t tmp_26 = tmp_0*tmp_7 - tmp_11*tmp_8;
      real_t tmp_27 = p_affine_13_0*(tmp_16*tmp_6 + tmp_17*tmp_18 + tmp_19*tmp_20) + p_affine_13_1*(tmp_16*tmp_21 + tmp_18*tmp_22 + tmp_20*tmp_23) + p_affine_13_2*(tmp_16*tmp_24 + tmp_18*tmp_25 + tmp_20*tmp_26);
      real_t tmp_28 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_29 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_30 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_31 = tmp_29*tmp_30;
      real_t tmp_32 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_33 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_34 = tmp_32*tmp_33;
      real_t tmp_35 = tmp_31 - tmp_34;
      real_t tmp_36 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_37 = tmp_33*tmp_36;
      real_t tmp_38 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_39 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_40 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_41 = tmp_30*tmp_40;
      real_t tmp_42 = tmp_29*tmp_36;
      real_t tmp_43 = 1.0 / (tmp_28*tmp_37 - tmp_28*tmp_41 + tmp_31*tmp_38 + tmp_32*tmp_39*tmp_40 - tmp_34*tmp_38 - tmp_39*tmp_42);
      real_t tmp_44 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_45 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_46 = -tmp_45;
      real_t tmp_47 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_48 = 0.031405749086161582*tmp_46 + 0.93718850182767688*tmp_47;
      real_t tmp_49 = tmp_43*(tmp_44 + tmp_48);
      real_t tmp_50 = tmp_32*tmp_40 - tmp_42;
      real_t tmp_51 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_52 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_53 = -tmp_52;
      real_t tmp_54 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_55 = 0.031405749086161582*tmp_53 + 0.93718850182767688*tmp_54;
      real_t tmp_56 = tmp_43*(tmp_51 + tmp_55);
      real_t tmp_57 = tmp_37 - tmp_41;
      real_t tmp_58 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_59 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_60 = -tmp_59;
      real_t tmp_61 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_62 = 0.031405749086161582*tmp_60 + 0.93718850182767688*tmp_61;
      real_t tmp_63 = tmp_43*(tmp_58 + tmp_62);
      real_t tmp_64 = tmp_35*tmp_49 + tmp_50*tmp_56 + tmp_57*tmp_63 - 1.0/4.0;
      real_t tmp_65 = -tmp_28*tmp_30 + tmp_32*tmp_39;
      real_t tmp_66 = tmp_28*tmp_36 - tmp_32*tmp_38;
      real_t tmp_67 = tmp_30*tmp_38 - tmp_36*tmp_39;
      real_t tmp_68 = tmp_49*tmp_65 + tmp_56*tmp_66 + tmp_63*tmp_67 - 1.0/4.0;
      real_t tmp_69 = tmp_28*tmp_33 - tmp_29*tmp_39;
      real_t tmp_70 = -tmp_28*tmp_40 + tmp_29*tmp_38;
      real_t tmp_71 = -tmp_33*tmp_38 + tmp_39*tmp_40;
      real_t tmp_72 = tmp_49*tmp_69 + tmp_56*tmp_70 + tmp_63*tmp_71 - 1.0/4.0;
      real_t tmp_73 = tmp_28*tmp_64 + tmp_29*tmp_68 + tmp_32*tmp_72;
      real_t tmp_74 = tmp_11*tmp_15;
      real_t tmp_75 = tmp_0*tmp_15;
      real_t tmp_76 = tmp_15*tmp_3;
      real_t tmp_77 = p_affine_13_0*(tmp_17*tmp_75 + tmp_19*tmp_76 + tmp_6*tmp_74) + p_affine_13_1*(tmp_21*tmp_74 + tmp_22*tmp_75 + tmp_23*tmp_76) + p_affine_13_2*(tmp_24*tmp_74 + tmp_25*tmp_75 + tmp_26*tmp_76);
      real_t tmp_78 = tmp_30*tmp_72 + tmp_33*tmp_68 + tmp_39*tmp_64;
      real_t tmp_79 = tmp_15*tmp_9;
      real_t tmp_80 = tmp_15*tmp_4;
      real_t tmp_81 = tmp_1*tmp_15;
      real_t tmp_82 = p_affine_13_0*(tmp_17*tmp_80 + tmp_19*tmp_81 + tmp_6*tmp_79) + p_affine_13_1*(tmp_21*tmp_79 + tmp_22*tmp_80 + tmp_23*tmp_81) + p_affine_13_2*(tmp_24*tmp_79 + tmp_25*tmp_80 + tmp_26*tmp_81);
      real_t tmp_83 = tmp_36*tmp_72 + tmp_38*tmp_64 + tmp_40*tmp_68;
      real_t tmp_84 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_85 = tmp_15*(tmp_48 + tmp_84);
      real_t tmp_86 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_87 = tmp_15*(tmp_55 + tmp_86);
      real_t tmp_88 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_89 = tmp_15*(tmp_62 + tmp_88);
      real_t tmp_90 = tmp_21*tmp_87 + tmp_24*tmp_85 + tmp_6*tmp_89 - 1.0/4.0;
      real_t tmp_91 = tmp_17*tmp_89 + tmp_22*tmp_87 + tmp_25*tmp_85 - 1.0/4.0;
      real_t tmp_92 = tmp_19*tmp_89 + tmp_23*tmp_87 + tmp_26*tmp_85 - 1.0/4.0;
      real_t tmp_93 = tmp_10*tmp_92 + tmp_7*tmp_90 + tmp_8*tmp_91;
      real_t tmp_94 = tmp_28*tmp_43;
      real_t tmp_95 = tmp_29*tmp_43;
      real_t tmp_96 = tmp_32*tmp_43;
      real_t tmp_97 = 0.5*p_affine_13_0*(tmp_57*tmp_94 + tmp_67*tmp_95 + tmp_71*tmp_96) + 0.5*p_affine_13_1*(tmp_50*tmp_94 + tmp_66*tmp_95 + tmp_70*tmp_96) + 0.5*p_affine_13_2*(tmp_35*tmp_94 + tmp_65*tmp_95 + tmp_69*tmp_96);
      real_t tmp_98 = tmp_0*tmp_91 + tmp_11*tmp_90 + tmp_3*tmp_92;
      real_t tmp_99 = tmp_39*tmp_43;
      real_t tmp_100 = tmp_33*tmp_43;
      real_t tmp_101 = tmp_30*tmp_43;
      real_t tmp_102 = 0.5*p_affine_13_0*(tmp_100*tmp_67 + tmp_101*tmp_71 + tmp_57*tmp_99) + 0.5*p_affine_13_1*(tmp_100*tmp_66 + tmp_101*tmp_70 + tmp_50*tmp_99) + 0.5*p_affine_13_2*(tmp_100*tmp_65 + tmp_101*tmp_69 + tmp_35*tmp_99);
      real_t tmp_103 = tmp_1*tmp_92 + tmp_4*tmp_91 + tmp_9*tmp_90;
      real_t tmp_104 = tmp_38*tmp_43;
      real_t tmp_105 = tmp_40*tmp_43;
      real_t tmp_106 = tmp_36*tmp_43;
      real_t tmp_107 = 0.5*p_affine_13_0*(tmp_104*tmp_57 + tmp_105*tmp_67 + tmp_106*tmp_71) + 0.5*p_affine_13_1*(tmp_104*tmp_50 + tmp_105*tmp_66 + tmp_106*tmp_70) + 0.5*p_affine_13_2*(tmp_104*tmp_35 + tmp_105*tmp_65 + tmp_106*tmp_69);
      real_t tmp_108 = (std::abs(tmp_45*tmp_54 - tmp_47*tmp_52)*std::abs(tmp_45*tmp_54 - tmp_47*tmp_52)) + (std::abs(tmp_45*tmp_61 - tmp_47*tmp_59)*std::abs(tmp_45*tmp_61 - tmp_47*tmp_59)) + (std::abs(tmp_52*tmp_61 - tmp_54*tmp_59)*std::abs(tmp_52*tmp_61 - tmp_54*tmp_59));
      real_t tmp_109 = 3.0*std::pow(tmp_108, -0.25);
      real_t tmp_110 = 1.0*std::pow(tmp_108, 1.0/2.0);
      real_t tmp_111 = 0.19601935860219369*tmp_46 + 0.60796128279561268*tmp_47;
      real_t tmp_112 = tmp_43*(tmp_111 + tmp_44);
      real_t tmp_113 = 0.19601935860219369*tmp_53 + 0.60796128279561268*tmp_54;
      real_t tmp_114 = tmp_43*(tmp_113 + tmp_51);
      real_t tmp_115 = 0.19601935860219369*tmp_60 + 0.60796128279561268*tmp_61;
      real_t tmp_116 = tmp_43*(tmp_115 + tmp_58);
      real_t tmp_117 = tmp_112*tmp_35 + tmp_114*tmp_50 + tmp_116*tmp_57 - 1.0/4.0;
      real_t tmp_118 = tmp_112*tmp_65 + tmp_114*tmp_66 + tmp_116*tmp_67 - 1.0/4.0;
      real_t tmp_119 = tmp_112*tmp_69 + tmp_114*tmp_70 + tmp_116*tmp_71 - 1.0/4.0;
      real_t tmp_120 = tmp_117*tmp_28 + tmp_118*tmp_29 + tmp_119*tmp_32;
      real_t tmp_121 = tmp_117*tmp_39 + tmp_118*tmp_33 + tmp_119*tmp_30;
      real_t tmp_122 = tmp_117*tmp_38 + tmp_118*tmp_40 + tmp_119*tmp_36;
      real_t tmp_123 = tmp_15*(tmp_111 + tmp_84);
      real_t tmp_124 = tmp_15*(tmp_113 + tmp_86);
      real_t tmp_125 = tmp_15*(tmp_115 + tmp_88);
      real_t tmp_126 = tmp_123*tmp_24 + tmp_124*tmp_21 + tmp_125*tmp_6 - 1.0/4.0;
      real_t tmp_127 = tmp_123*tmp_25 + tmp_124*tmp_22 + tmp_125*tmp_17 - 1.0/4.0;
      real_t tmp_128 = tmp_123*tmp_26 + tmp_124*tmp_23 + tmp_125*tmp_19 - 1.0/4.0;
      real_t tmp_129 = tmp_10*tmp_128 + tmp_126*tmp_7 + tmp_127*tmp_8;
      real_t tmp_130 = tmp_0*tmp_127 + tmp_11*tmp_126 + tmp_128*tmp_3;
      real_t tmp_131 = tmp_1*tmp_128 + tmp_126*tmp_9 + tmp_127*tmp_4;
      real_t tmp_132 = 0.37605877282253791*tmp_46 + 0.039308471900058539*tmp_47;
      real_t tmp_133 = tmp_43*(tmp_132 + tmp_44);
      real_t tmp_134 = 0.37605877282253791*tmp_53 + 0.039308471900058539*tmp_54;
      real_t tmp_135 = tmp_43*(tmp_134 + tmp_51);
      real_t tmp_136 = 0.37605877282253791*tmp_60 + 0.039308471900058539*tmp_61;
      real_t tmp_137 = tmp_43*(tmp_136 + tmp_58);
      real_t tmp_138 = tmp_133*tmp_35 + tmp_135*tmp_50 + tmp_137*tmp_57 - 1.0/4.0;
      real_t tmp_139 = tmp_133*tmp_65 + tmp_135*tmp_66 + tmp_137*tmp_67 - 1.0/4.0;
      real_t tmp_140 = tmp_133*tmp_69 + tmp_135*tmp_70 + tmp_137*tmp_71 - 1.0/4.0;
      real_t tmp_141 = tmp_138*tmp_28 + tmp_139*tmp_29 + tmp_140*tmp_32;
      real_t tmp_142 = tmp_138*tmp_39 + tmp_139*tmp_33 + tmp_140*tmp_30;
      real_t tmp_143 = tmp_138*tmp_38 + tmp_139*tmp_40 + tmp_140*tmp_36;
      real_t tmp_144 = tmp_15*(tmp_132 + tmp_84);
      real_t tmp_145 = tmp_15*(tmp_134 + tmp_86);
      real_t tmp_146 = tmp_15*(tmp_136 + tmp_88);
      real_t tmp_147 = tmp_144*tmp_24 + tmp_145*tmp_21 + tmp_146*tmp_6 - 1.0/4.0;
      real_t tmp_148 = tmp_144*tmp_25 + tmp_145*tmp_22 + tmp_146*tmp_17 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_26 + tmp_145*tmp_23 + tmp_146*tmp_19 - 1.0/4.0;
      real_t tmp_150 = tmp_10*tmp_149 + tmp_147*tmp_7 + tmp_148*tmp_8;
      real_t tmp_151 = tmp_0*tmp_148 + tmp_11*tmp_147 + tmp_149*tmp_3;
      real_t tmp_152 = tmp_1*tmp_149 + tmp_147*tmp_9 + tmp_148*tmp_4;
      real_t tmp_153 = 0.78764240869137092*tmp_46 + 0.1711304259088916*tmp_47;
      real_t tmp_154 = tmp_43*(tmp_153 + tmp_44);
      real_t tmp_155 = 0.78764240869137092*tmp_53 + 0.1711304259088916*tmp_54;
      real_t tmp_156 = tmp_43*(tmp_155 + tmp_51);
      real_t tmp_157 = 0.78764240869137092*tmp_60 + 0.1711304259088916*tmp_61;
      real_t tmp_158 = tmp_43*(tmp_157 + tmp_58);
      real_t tmp_159 = tmp_154*tmp_35 + tmp_156*tmp_50 + tmp_158*tmp_57 - 1.0/4.0;
      real_t tmp_160 = tmp_154*tmp_65 + tmp_156*tmp_66 + tmp_158*tmp_67 - 1.0/4.0;
      real_t tmp_161 = tmp_154*tmp_69 + tmp_156*tmp_70 + tmp_158*tmp_71 - 1.0/4.0;
      real_t tmp_162 = tmp_159*tmp_28 + tmp_160*tmp_29 + tmp_161*tmp_32;
      real_t tmp_163 = tmp_159*tmp_39 + tmp_160*tmp_33 + tmp_161*tmp_30;
      real_t tmp_164 = tmp_159*tmp_38 + tmp_160*tmp_40 + tmp_161*tmp_36;
      real_t tmp_165 = tmp_15*(tmp_153 + tmp_84);
      real_t tmp_166 = tmp_15*(tmp_155 + tmp_86);
      real_t tmp_167 = tmp_15*(tmp_157 + tmp_88);
      real_t tmp_168 = tmp_165*tmp_24 + tmp_166*tmp_21 + tmp_167*tmp_6 - 1.0/4.0;
      real_t tmp_169 = tmp_165*tmp_25 + tmp_166*tmp_22 + tmp_167*tmp_17 - 1.0/4.0;
      real_t tmp_170 = tmp_165*tmp_26 + tmp_166*tmp_23 + tmp_167*tmp_19 - 1.0/4.0;
      real_t tmp_171 = tmp_10*tmp_170 + tmp_168*tmp_7 + tmp_169*tmp_8;
      real_t tmp_172 = tmp_0*tmp_169 + tmp_11*tmp_168 + tmp_170*tmp_3;
      real_t tmp_173 = tmp_1*tmp_170 + tmp_168*tmp_9 + tmp_169*tmp_4;
      real_t tmp_174 = 0.58463275527740355*tmp_46 + 0.37605877282253791*tmp_47;
      real_t tmp_175 = tmp_43*(tmp_174 + tmp_44);
      real_t tmp_176 = 0.58463275527740355*tmp_53 + 0.37605877282253791*tmp_54;
      real_t tmp_177 = tmp_43*(tmp_176 + tmp_51);
      real_t tmp_178 = 0.58463275527740355*tmp_60 + 0.37605877282253791*tmp_61;
      real_t tmp_179 = tmp_43*(tmp_178 + tmp_58);
      real_t tmp_180 = tmp_175*tmp_35 + tmp_177*tmp_50 + tmp_179*tmp_57 - 1.0/4.0;
      real_t tmp_181 = tmp_175*tmp_65 + tmp_177*tmp_66 + tmp_179*tmp_67 - 1.0/4.0;
      real_t tmp_182 = tmp_175*tmp_69 + tmp_177*tmp_70 + tmp_179*tmp_71 - 1.0/4.0;
      real_t tmp_183 = tmp_180*tmp_28 + tmp_181*tmp_29 + tmp_182*tmp_32;
      real_t tmp_184 = tmp_180*tmp_39 + tmp_181*tmp_33 + tmp_182*tmp_30;
      real_t tmp_185 = tmp_180*tmp_38 + tmp_181*tmp_40 + tmp_182*tmp_36;
      real_t tmp_186 = tmp_15*(tmp_174 + tmp_84);
      real_t tmp_187 = tmp_15*(tmp_176 + tmp_86);
      real_t tmp_188 = tmp_15*(tmp_178 + tmp_88);
      real_t tmp_189 = tmp_186*tmp_24 + tmp_187*tmp_21 + tmp_188*tmp_6 - 1.0/4.0;
      real_t tmp_190 = tmp_17*tmp_188 + tmp_186*tmp_25 + tmp_187*tmp_22 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_26 + tmp_187*tmp_23 + tmp_188*tmp_19 - 1.0/4.0;
      real_t tmp_192 = tmp_10*tmp_191 + tmp_189*tmp_7 + tmp_190*tmp_8;
      real_t tmp_193 = tmp_0*tmp_190 + tmp_11*tmp_189 + tmp_191*tmp_3;
      real_t tmp_194 = tmp_1*tmp_191 + tmp_189*tmp_9 + tmp_190*tmp_4;
      real_t tmp_195 = 0.041227165399737475*tmp_46 + 0.78764240869137092*tmp_47;
      real_t tmp_196 = tmp_43*(tmp_195 + tmp_44);
      real_t tmp_197 = 0.041227165399737475*tmp_53 + 0.78764240869137092*tmp_54;
      real_t tmp_198 = tmp_43*(tmp_197 + tmp_51);
      real_t tmp_199 = 0.041227165399737475*tmp_60 + 0.78764240869137092*tmp_61;
      real_t tmp_200 = tmp_43*(tmp_199 + tmp_58);
      real_t tmp_201 = tmp_196*tmp_35 + tmp_198*tmp_50 + tmp_200*tmp_57 - 1.0/4.0;
      real_t tmp_202 = tmp_196*tmp_65 + tmp_198*tmp_66 + tmp_200*tmp_67 - 1.0/4.0;
      real_t tmp_203 = tmp_196*tmp_69 + tmp_198*tmp_70 + tmp_200*tmp_71 - 1.0/4.0;
      real_t tmp_204 = tmp_201*tmp_28 + tmp_202*tmp_29 + tmp_203*tmp_32;
      real_t tmp_205 = tmp_201*tmp_39 + tmp_202*tmp_33 + tmp_203*tmp_30;
      real_t tmp_206 = tmp_201*tmp_38 + tmp_202*tmp_40 + tmp_203*tmp_36;
      real_t tmp_207 = tmp_15*(tmp_195 + tmp_84);
      real_t tmp_208 = tmp_15*(tmp_197 + tmp_86);
      real_t tmp_209 = tmp_15*(tmp_199 + tmp_88);
      real_t tmp_210 = tmp_207*tmp_24 + tmp_208*tmp_21 + tmp_209*tmp_6 - 1.0/4.0;
      real_t tmp_211 = tmp_17*tmp_209 + tmp_207*tmp_25 + tmp_208*tmp_22 - 1.0/4.0;
      real_t tmp_212 = tmp_19*tmp_209 + tmp_207*tmp_26 + tmp_208*tmp_23 - 1.0/4.0;
      real_t tmp_213 = tmp_10*tmp_212 + tmp_210*tmp_7 + tmp_211*tmp_8;
      real_t tmp_214 = tmp_0*tmp_211 + tmp_11*tmp_210 + tmp_212*tmp_3;
      real_t tmp_215 = tmp_1*tmp_212 + tmp_210*tmp_9 + tmp_211*tmp_4;
      real_t tmp_216 = 0.039308471900058539*tmp_46 + 0.58463275527740355*tmp_47;
      real_t tmp_217 = tmp_43*(tmp_216 + tmp_44);
      real_t tmp_218 = 0.039308471900058539*tmp_53 + 0.58463275527740355*tmp_54;
      real_t tmp_219 = tmp_43*(tmp_218 + tmp_51);
      real_t tmp_220 = 0.039308471900058539*tmp_60 + 0.58463275527740355*tmp_61;
      real_t tmp_221 = tmp_43*(tmp_220 + tmp_58);
      real_t tmp_222 = tmp_217*tmp_35 + tmp_219*tmp_50 + tmp_221*tmp_57 - 1.0/4.0;
      real_t tmp_223 = tmp_217*tmp_65 + tmp_219*tmp_66 + tmp_221*tmp_67 - 1.0/4.0;
      real_t tmp_224 = tmp_217*tmp_69 + tmp_219*tmp_70 + tmp_221*tmp_71 - 1.0/4.0;
      real_t tmp_225 = tmp_222*tmp_28 + tmp_223*tmp_29 + tmp_224*tmp_32;
      real_t tmp_226 = tmp_222*tmp_39 + tmp_223*tmp_33 + tmp_224*tmp_30;
      real_t tmp_227 = tmp_222*tmp_38 + tmp_223*tmp_40 + tmp_224*tmp_36;
      real_t tmp_228 = tmp_15*(tmp_216 + tmp_84);
      real_t tmp_229 = tmp_15*(tmp_218 + tmp_86);
      real_t tmp_230 = tmp_15*(tmp_220 + tmp_88);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_24 + tmp_230*tmp_6 - 1.0/4.0;
      real_t tmp_232 = tmp_17*tmp_230 + tmp_22*tmp_229 + tmp_228*tmp_25 - 1.0/4.0;
      real_t tmp_233 = tmp_19*tmp_230 + tmp_228*tmp_26 + tmp_229*tmp_23 - 1.0/4.0;
      real_t tmp_234 = tmp_10*tmp_233 + tmp_231*tmp_7 + tmp_232*tmp_8;
      real_t tmp_235 = tmp_0*tmp_232 + tmp_11*tmp_231 + tmp_233*tmp_3;
      real_t tmp_236 = tmp_1*tmp_233 + tmp_231*tmp_9 + tmp_232*tmp_4;
      real_t tmp_237 = 0.78764240869137092*tmp_46 + 0.041227165399737475*tmp_47;
      real_t tmp_238 = tmp_43*(tmp_237 + tmp_44);
      real_t tmp_239 = 0.78764240869137092*tmp_53 + 0.041227165399737475*tmp_54;
      real_t tmp_240 = tmp_43*(tmp_239 + tmp_51);
      real_t tmp_241 = 0.78764240869137092*tmp_60 + 0.041227165399737475*tmp_61;
      real_t tmp_242 = tmp_43*(tmp_241 + tmp_58);
      real_t tmp_243 = tmp_238*tmp_35 + tmp_240*tmp_50 + tmp_242*tmp_57 - 1.0/4.0;
      real_t tmp_244 = tmp_238*tmp_65 + tmp_240*tmp_66 + tmp_242*tmp_67 - 1.0/4.0;
      real_t tmp_245 = tmp_238*tmp_69 + tmp_240*tmp_70 + tmp_242*tmp_71 - 1.0/4.0;
      real_t tmp_246 = tmp_243*tmp_28 + tmp_244*tmp_29 + tmp_245*tmp_32;
      real_t tmp_247 = tmp_243*tmp_39 + tmp_244*tmp_33 + tmp_245*tmp_30;
      real_t tmp_248 = tmp_243*tmp_38 + tmp_244*tmp_40 + tmp_245*tmp_36;
      real_t tmp_249 = tmp_15*(tmp_237 + tmp_84);
      real_t tmp_250 = tmp_15*(tmp_239 + tmp_86);
      real_t tmp_251 = tmp_15*(tmp_241 + tmp_88);
      real_t tmp_252 = tmp_21*tmp_250 + tmp_24*tmp_249 + tmp_251*tmp_6 - 1.0/4.0;
      real_t tmp_253 = tmp_17*tmp_251 + tmp_22*tmp_250 + tmp_249*tmp_25 - 1.0/4.0;
      real_t tmp_254 = tmp_19*tmp_251 + tmp_23*tmp_250 + tmp_249*tmp_26 - 1.0/4.0;
      real_t tmp_255 = tmp_10*tmp_254 + tmp_252*tmp_7 + tmp_253*tmp_8;
      real_t tmp_256 = tmp_0*tmp_253 + tmp_11*tmp_252 + tmp_254*tmp_3;
      real_t tmp_257 = tmp_1*tmp_254 + tmp_252*tmp_9 + tmp_253*tmp_4;
      real_t tmp_258 = 0.58463275527740355*tmp_46 + 0.039308471900058539*tmp_47;
      real_t tmp_259 = tmp_43*(tmp_258 + tmp_44);
      real_t tmp_260 = 0.58463275527740355*tmp_53 + 0.039308471900058539*tmp_54;
      real_t tmp_261 = tmp_43*(tmp_260 + tmp_51);
      real_t tmp_262 = 0.58463275527740355*tmp_60 + 0.039308471900058539*tmp_61;
      real_t tmp_263 = tmp_43*(tmp_262 + tmp_58);
      real_t tmp_264 = tmp_259*tmp_35 + tmp_261*tmp_50 + tmp_263*tmp_57 - 1.0/4.0;
      real_t tmp_265 = tmp_259*tmp_65 + tmp_261*tmp_66 + tmp_263*tmp_67 - 1.0/4.0;
      real_t tmp_266 = tmp_259*tmp_69 + tmp_261*tmp_70 + tmp_263*tmp_71 - 1.0/4.0;
      real_t tmp_267 = tmp_264*tmp_28 + tmp_265*tmp_29 + tmp_266*tmp_32;
      real_t tmp_268 = tmp_264*tmp_39 + tmp_265*tmp_33 + tmp_266*tmp_30;
      real_t tmp_269 = tmp_264*tmp_38 + tmp_265*tmp_40 + tmp_266*tmp_36;
      real_t tmp_270 = tmp_15*(tmp_258 + tmp_84);
      real_t tmp_271 = tmp_15*(tmp_260 + tmp_86);
      real_t tmp_272 = tmp_15*(tmp_262 + tmp_88);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_24*tmp_270 + tmp_272*tmp_6 - 1.0/4.0;
      real_t tmp_274 = tmp_17*tmp_272 + tmp_22*tmp_271 + tmp_25*tmp_270 - 1.0/4.0;
      real_t tmp_275 = tmp_19*tmp_272 + tmp_23*tmp_271 + tmp_26*tmp_270 - 1.0/4.0;
      real_t tmp_276 = tmp_10*tmp_275 + tmp_273*tmp_7 + tmp_274*tmp_8;
      real_t tmp_277 = tmp_0*tmp_274 + tmp_11*tmp_273 + tmp_275*tmp_3;
      real_t tmp_278 = tmp_1*tmp_275 + tmp_273*tmp_9 + tmp_274*tmp_4;
      real_t tmp_279 = 0.1711304259088916*tmp_46 + 0.78764240869137092*tmp_47;
      real_t tmp_280 = tmp_43*(tmp_279 + tmp_44);
      real_t tmp_281 = 0.1711304259088916*tmp_53 + 0.78764240869137092*tmp_54;
      real_t tmp_282 = tmp_43*(tmp_281 + tmp_51);
      real_t tmp_283 = 0.1711304259088916*tmp_60 + 0.78764240869137092*tmp_61;
      real_t tmp_284 = tmp_43*(tmp_283 + tmp_58);
      real_t tmp_285 = tmp_280*tmp_35 + tmp_282*tmp_50 + tmp_284*tmp_57 - 1.0/4.0;
      real_t tmp_286 = tmp_280*tmp_65 + tmp_282*tmp_66 + tmp_284*tmp_67 - 1.0/4.0;
      real_t tmp_287 = tmp_280*tmp_69 + tmp_282*tmp_70 + tmp_284*tmp_71 - 1.0/4.0;
      real_t tmp_288 = tmp_28*tmp_285 + tmp_286*tmp_29 + tmp_287*tmp_32;
      real_t tmp_289 = tmp_285*tmp_39 + tmp_286*tmp_33 + tmp_287*tmp_30;
      real_t tmp_290 = tmp_285*tmp_38 + tmp_286*tmp_40 + tmp_287*tmp_36;
      real_t tmp_291 = tmp_15*(tmp_279 + tmp_84);
      real_t tmp_292 = tmp_15*(tmp_281 + tmp_86);
      real_t tmp_293 = tmp_15*(tmp_283 + tmp_88);
      real_t tmp_294 = tmp_21*tmp_292 + tmp_24*tmp_291 + tmp_293*tmp_6 - 1.0/4.0;
      real_t tmp_295 = tmp_17*tmp_293 + tmp_22*tmp_292 + tmp_25*tmp_291 - 1.0/4.0;
      real_t tmp_296 = tmp_19*tmp_293 + tmp_23*tmp_292 + tmp_26*tmp_291 - 1.0/4.0;
      real_t tmp_297 = tmp_10*tmp_296 + tmp_294*tmp_7 + tmp_295*tmp_8;
      real_t tmp_298 = tmp_0*tmp_295 + tmp_11*tmp_294 + tmp_296*tmp_3;
      real_t tmp_299 = tmp_1*tmp_296 + tmp_294*tmp_9 + tmp_295*tmp_4;
      real_t tmp_300 = 0.37605877282253791*tmp_46 + 0.58463275527740355*tmp_47;
      real_t tmp_301 = tmp_43*(tmp_300 + tmp_44);
      real_t tmp_302 = 0.37605877282253791*tmp_53 + 0.58463275527740355*tmp_54;
      real_t tmp_303 = tmp_43*(tmp_302 + tmp_51);
      real_t tmp_304 = 0.37605877282253791*tmp_60 + 0.58463275527740355*tmp_61;
      real_t tmp_305 = tmp_43*(tmp_304 + tmp_58);
      real_t tmp_306 = tmp_301*tmp_35 + tmp_303*tmp_50 + tmp_305*tmp_57 - 1.0/4.0;
      real_t tmp_307 = tmp_301*tmp_65 + tmp_303*tmp_66 + tmp_305*tmp_67 - 1.0/4.0;
      real_t tmp_308 = tmp_301*tmp_69 + tmp_303*tmp_70 + tmp_305*tmp_71 - 1.0/4.0;
      real_t tmp_309 = tmp_28*tmp_306 + tmp_29*tmp_307 + tmp_308*tmp_32;
      real_t tmp_310 = tmp_30*tmp_308 + tmp_306*tmp_39 + tmp_307*tmp_33;
      real_t tmp_311 = tmp_306*tmp_38 + tmp_307*tmp_40 + tmp_308*tmp_36;
      real_t tmp_312 = tmp_15*(tmp_300 + tmp_84);
      real_t tmp_313 = tmp_15*(tmp_302 + tmp_86);
      real_t tmp_314 = tmp_15*(tmp_304 + tmp_88);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_24*tmp_312 + tmp_314*tmp_6 - 1.0/4.0;
      real_t tmp_316 = tmp_17*tmp_314 + tmp_22*tmp_313 + tmp_25*tmp_312 - 1.0/4.0;
      real_t tmp_317 = tmp_19*tmp_314 + tmp_23*tmp_313 + tmp_26*tmp_312 - 1.0/4.0;
      real_t tmp_318 = tmp_10*tmp_317 + tmp_315*tmp_7 + tmp_316*tmp_8;
      real_t tmp_319 = tmp_0*tmp_316 + tmp_11*tmp_315 + tmp_3*tmp_317;
      real_t tmp_320 = tmp_1*tmp_317 + tmp_315*tmp_9 + tmp_316*tmp_4;
      real_t tmp_321 = 0.041227165399737475*tmp_46 + 0.1711304259088916*tmp_47;
      real_t tmp_322 = tmp_43*(tmp_321 + tmp_44);
      real_t tmp_323 = 0.041227165399737475*tmp_53 + 0.1711304259088916*tmp_54;
      real_t tmp_324 = tmp_43*(tmp_323 + tmp_51);
      real_t tmp_325 = 0.041227165399737475*tmp_60 + 0.1711304259088916*tmp_61;
      real_t tmp_326 = tmp_43*(tmp_325 + tmp_58);
      real_t tmp_327 = tmp_322*tmp_35 + tmp_324*tmp_50 + tmp_326*tmp_57 - 1.0/4.0;
      real_t tmp_328 = tmp_322*tmp_65 + tmp_324*tmp_66 + tmp_326*tmp_67 - 1.0/4.0;
      real_t tmp_329 = tmp_322*tmp_69 + tmp_324*tmp_70 + tmp_326*tmp_71 - 1.0/4.0;
      real_t tmp_330 = tmp_28*tmp_327 + tmp_29*tmp_328 + tmp_32*tmp_329;
      real_t tmp_331 = tmp_30*tmp_329 + tmp_327*tmp_39 + tmp_328*tmp_33;
      real_t tmp_332 = tmp_327*tmp_38 + tmp_328*tmp_40 + tmp_329*tmp_36;
      real_t tmp_333 = tmp_15*(tmp_321 + tmp_84);
      real_t tmp_334 = tmp_15*(tmp_323 + tmp_86);
      real_t tmp_335 = tmp_15*(tmp_325 + tmp_88);
      real_t tmp_336 = tmp_21*tmp_334 + tmp_24*tmp_333 + tmp_335*tmp_6 - 1.0/4.0;
      real_t tmp_337 = tmp_17*tmp_335 + tmp_22*tmp_334 + tmp_25*tmp_333 - 1.0/4.0;
      real_t tmp_338 = tmp_19*tmp_335 + tmp_23*tmp_334 + tmp_26*tmp_333 - 1.0/4.0;
      real_t tmp_339 = tmp_10*tmp_338 + tmp_336*tmp_7 + tmp_337*tmp_8;
      real_t tmp_340 = tmp_0*tmp_337 + tmp_11*tmp_336 + tmp_3*tmp_338;
      real_t tmp_341 = tmp_1*tmp_338 + tmp_336*tmp_9 + tmp_337*tmp_4;
      real_t tmp_342 = 0.40446199974765351*tmp_46 + 0.19107600050469298*tmp_47;
      real_t tmp_343 = tmp_43*(tmp_342 + tmp_44);
      real_t tmp_344 = 0.40446199974765351*tmp_53 + 0.19107600050469298*tmp_54;
      real_t tmp_345 = tmp_43*(tmp_344 + tmp_51);
      real_t tmp_346 = 0.40446199974765351*tmp_60 + 0.19107600050469298*tmp_61;
      real_t tmp_347 = tmp_43*(tmp_346 + tmp_58);
      real_t tmp_348 = tmp_343*tmp_35 + tmp_345*tmp_50 + tmp_347*tmp_57 - 1.0/4.0;
      real_t tmp_349 = tmp_343*tmp_65 + tmp_345*tmp_66 + tmp_347*tmp_67 - 1.0/4.0;
      real_t tmp_350 = tmp_343*tmp_69 + tmp_345*tmp_70 + tmp_347*tmp_71 - 1.0/4.0;
      real_t tmp_351 = tmp_28*tmp_348 + tmp_29*tmp_349 + tmp_32*tmp_350;
      real_t tmp_352 = tmp_30*tmp_350 + tmp_33*tmp_349 + tmp_348*tmp_39;
      real_t tmp_353 = tmp_348*tmp_38 + tmp_349*tmp_40 + tmp_350*tmp_36;
      real_t tmp_354 = tmp_15*(tmp_342 + tmp_84);
      real_t tmp_355 = tmp_15*(tmp_344 + tmp_86);
      real_t tmp_356 = tmp_15*(tmp_346 + tmp_88);
      real_t tmp_357 = tmp_21*tmp_355 + tmp_24*tmp_354 + tmp_356*tmp_6 - 1.0/4.0;
      real_t tmp_358 = tmp_17*tmp_356 + tmp_22*tmp_355 + tmp_25*tmp_354 - 1.0/4.0;
      real_t tmp_359 = tmp_19*tmp_356 + tmp_23*tmp_355 + tmp_26*tmp_354 - 1.0/4.0;
      real_t tmp_360 = tmp_10*tmp_359 + tmp_357*tmp_7 + tmp_358*tmp_8;
      real_t tmp_361 = tmp_0*tmp_358 + tmp_11*tmp_357 + tmp_3*tmp_359;
      real_t tmp_362 = tmp_1*tmp_359 + tmp_357*tmp_9 + tmp_358*tmp_4;
      real_t tmp_363 = 0.039308471900058539*tmp_46 + 0.37605877282253791*tmp_47;
      real_t tmp_364 = tmp_43*(tmp_363 + tmp_44);
      real_t tmp_365 = 0.039308471900058539*tmp_53 + 0.37605877282253791*tmp_54;
      real_t tmp_366 = tmp_43*(tmp_365 + tmp_51);
      real_t tmp_367 = 0.039308471900058539*tmp_60 + 0.37605877282253791*tmp_61;
      real_t tmp_368 = tmp_43*(tmp_367 + tmp_58);
      real_t tmp_369 = tmp_35*tmp_364 + tmp_366*tmp_50 + tmp_368*tmp_57 - 1.0/4.0;
      real_t tmp_370 = tmp_364*tmp_65 + tmp_366*tmp_66 + tmp_368*tmp_67 - 1.0/4.0;
      real_t tmp_371 = tmp_364*tmp_69 + tmp_366*tmp_70 + tmp_368*tmp_71 - 1.0/4.0;
      real_t tmp_372 = tmp_28*tmp_369 + tmp_29*tmp_370 + tmp_32*tmp_371;
      real_t tmp_373 = tmp_30*tmp_371 + tmp_33*tmp_370 + tmp_369*tmp_39;
      real_t tmp_374 = tmp_36*tmp_371 + tmp_369*tmp_38 + tmp_370*tmp_40;
      real_t tmp_375 = tmp_15*(tmp_363 + tmp_84);
      real_t tmp_376 = tmp_15*(tmp_365 + tmp_86);
      real_t tmp_377 = tmp_15*(tmp_367 + tmp_88);
      real_t tmp_378 = tmp_21*tmp_376 + tmp_24*tmp_375 + tmp_377*tmp_6 - 1.0/4.0;
      real_t tmp_379 = tmp_17*tmp_377 + tmp_22*tmp_376 + tmp_25*tmp_375 - 1.0/4.0;
      real_t tmp_380 = tmp_19*tmp_377 + tmp_23*tmp_376 + tmp_26*tmp_375 - 1.0/4.0;
      real_t tmp_381 = tmp_10*tmp_380 + tmp_378*tmp_7 + tmp_379*tmp_8;
      real_t tmp_382 = tmp_0*tmp_379 + tmp_11*tmp_378 + tmp_3*tmp_380;
      real_t tmp_383 = tmp_1*tmp_380 + tmp_378*tmp_9 + tmp_379*tmp_4;
      real_t tmp_384 = 0.93718850182767688*tmp_46 + 0.031405749086161582*tmp_47;
      real_t tmp_385 = tmp_43*(tmp_384 + tmp_44);
      real_t tmp_386 = 0.93718850182767688*tmp_53 + 0.031405749086161582*tmp_54;
      real_t tmp_387 = tmp_43*(tmp_386 + tmp_51);
      real_t tmp_388 = 0.93718850182767688*tmp_60 + 0.031405749086161582*tmp_61;
      real_t tmp_389 = tmp_43*(tmp_388 + tmp_58);
      real_t tmp_390 = tmp_35*tmp_385 + tmp_387*tmp_50 + tmp_389*tmp_57 - 1.0/4.0;
      real_t tmp_391 = tmp_385*tmp_65 + tmp_387*tmp_66 + tmp_389*tmp_67 - 1.0/4.0;
      real_t tmp_392 = tmp_385*tmp_69 + tmp_387*tmp_70 + tmp_389*tmp_71 - 1.0/4.0;
      real_t tmp_393 = tmp_28*tmp_390 + tmp_29*tmp_391 + tmp_32*tmp_392;
      real_t tmp_394 = tmp_30*tmp_392 + tmp_33*tmp_391 + tmp_39*tmp_390;
      real_t tmp_395 = tmp_36*tmp_392 + tmp_38*tmp_390 + tmp_391*tmp_40;
      real_t tmp_396 = tmp_15*(tmp_384 + tmp_84);
      real_t tmp_397 = tmp_15*(tmp_386 + tmp_86);
      real_t tmp_398 = tmp_15*(tmp_388 + tmp_88);
      real_t tmp_399 = tmp_21*tmp_397 + tmp_24*tmp_396 + tmp_398*tmp_6 - 1.0/4.0;
      real_t tmp_400 = tmp_17*tmp_398 + tmp_22*tmp_397 + tmp_25*tmp_396 - 1.0/4.0;
      real_t tmp_401 = tmp_19*tmp_398 + tmp_23*tmp_397 + tmp_26*tmp_396 - 1.0/4.0;
      real_t tmp_402 = tmp_10*tmp_401 + tmp_399*tmp_7 + tmp_400*tmp_8;
      real_t tmp_403 = tmp_0*tmp_400 + tmp_11*tmp_399 + tmp_3*tmp_401;
      real_t tmp_404 = tmp_1*tmp_401 + tmp_399*tmp_9 + tmp_4*tmp_400;
      real_t tmp_405 = 0.60796128279561268*tmp_46 + 0.19601935860219369*tmp_47;
      real_t tmp_406 = tmp_43*(tmp_405 + tmp_44);
      real_t tmp_407 = 0.60796128279561268*tmp_53 + 0.19601935860219369*tmp_54;
      real_t tmp_408 = tmp_43*(tmp_407 + tmp_51);
      real_t tmp_409 = 0.60796128279561268*tmp_60 + 0.19601935860219369*tmp_61;
      real_t tmp_410 = tmp_43*(tmp_409 + tmp_58);
      real_t tmp_411 = tmp_35*tmp_406 + tmp_408*tmp_50 + tmp_410*tmp_57 - 1.0/4.0;
      real_t tmp_412 = tmp_406*tmp_65 + tmp_408*tmp_66 + tmp_410*tmp_67 - 1.0/4.0;
      real_t tmp_413 = tmp_406*tmp_69 + tmp_408*tmp_70 + tmp_410*tmp_71 - 1.0/4.0;
      real_t tmp_414 = tmp_28*tmp_411 + tmp_29*tmp_412 + tmp_32*tmp_413;
      real_t tmp_415 = tmp_30*tmp_413 + tmp_33*tmp_412 + tmp_39*tmp_411;
      real_t tmp_416 = tmp_36*tmp_413 + tmp_38*tmp_411 + tmp_40*tmp_412;
      real_t tmp_417 = tmp_15*(tmp_405 + tmp_84);
      real_t tmp_418 = tmp_15*(tmp_407 + tmp_86);
      real_t tmp_419 = tmp_15*(tmp_409 + tmp_88);
      real_t tmp_420 = tmp_21*tmp_418 + tmp_24*tmp_417 + tmp_419*tmp_6 - 1.0/4.0;
      real_t tmp_421 = tmp_17*tmp_419 + tmp_22*tmp_418 + tmp_25*tmp_417 - 1.0/4.0;
      real_t tmp_422 = tmp_19*tmp_419 + tmp_23*tmp_418 + tmp_26*tmp_417 - 1.0/4.0;
      real_t tmp_423 = tmp_10*tmp_422 + tmp_420*tmp_7 + tmp_421*tmp_8;
      real_t tmp_424 = tmp_0*tmp_421 + tmp_11*tmp_420 + tmp_3*tmp_422;
      real_t tmp_425 = tmp_1*tmp_422 + tmp_4*tmp_421 + tmp_420*tmp_9;
      real_t tmp_426 = 0.19107600050469298*tmp_46 + 0.40446199974765351*tmp_47;
      real_t tmp_427 = tmp_43*(tmp_426 + tmp_44);
      real_t tmp_428 = 0.19107600050469298*tmp_53 + 0.40446199974765351*tmp_54;
      real_t tmp_429 = tmp_43*(tmp_428 + tmp_51);
      real_t tmp_430 = 0.19107600050469298*tmp_60 + 0.40446199974765351*tmp_61;
      real_t tmp_431 = tmp_43*(tmp_430 + tmp_58);
      real_t tmp_432 = tmp_35*tmp_427 + tmp_429*tmp_50 + tmp_431*tmp_57 - 1.0/4.0;
      real_t tmp_433 = tmp_427*tmp_65 + tmp_429*tmp_66 + tmp_431*tmp_67 - 1.0/4.0;
      real_t tmp_434 = tmp_427*tmp_69 + tmp_429*tmp_70 + tmp_431*tmp_71 - 1.0/4.0;
      real_t tmp_435 = tmp_28*tmp_432 + tmp_29*tmp_433 + tmp_32*tmp_434;
      real_t tmp_436 = tmp_30*tmp_434 + tmp_33*tmp_433 + tmp_39*tmp_432;
      real_t tmp_437 = tmp_36*tmp_434 + tmp_38*tmp_432 + tmp_40*tmp_433;
      real_t tmp_438 = tmp_15*(tmp_426 + tmp_84);
      real_t tmp_439 = tmp_15*(tmp_428 + tmp_86);
      real_t tmp_440 = tmp_15*(tmp_430 + tmp_88);
      real_t tmp_441 = tmp_21*tmp_439 + tmp_24*tmp_438 + tmp_440*tmp_6 - 1.0/4.0;
      real_t tmp_442 = tmp_17*tmp_440 + tmp_22*tmp_439 + tmp_25*tmp_438 - 1.0/4.0;
      real_t tmp_443 = tmp_19*tmp_440 + tmp_23*tmp_439 + tmp_26*tmp_438 - 1.0/4.0;
      real_t tmp_444 = tmp_10*tmp_443 + tmp_441*tmp_7 + tmp_442*tmp_8;
      real_t tmp_445 = tmp_0*tmp_442 + tmp_11*tmp_441 + tmp_3*tmp_443;
      real_t tmp_446 = tmp_1*tmp_443 + tmp_4*tmp_442 + tmp_441*tmp_9;
      real_t tmp_447 = 0.031405749086161582*tmp_46 + 0.031405749086161582*tmp_47;
      real_t tmp_448 = tmp_43*(tmp_44 + tmp_447);
      real_t tmp_449 = 0.031405749086161582*tmp_53 + 0.031405749086161582*tmp_54;
      real_t tmp_450 = tmp_43*(tmp_449 + tmp_51);
      real_t tmp_451 = 0.031405749086161582*tmp_60 + 0.031405749086161582*tmp_61;
      real_t tmp_452 = tmp_43*(tmp_451 + tmp_58);
      real_t tmp_453 = tmp_35*tmp_448 + tmp_450*tmp_50 + tmp_452*tmp_57 - 1.0/4.0;
      real_t tmp_454 = tmp_448*tmp_65 + tmp_450*tmp_66 + tmp_452*tmp_67 - 1.0/4.0;
      real_t tmp_455 = tmp_448*tmp_69 + tmp_450*tmp_70 + tmp_452*tmp_71 - 1.0/4.0;
      real_t tmp_456 = tmp_28*tmp_453 + tmp_29*tmp_454 + tmp_32*tmp_455;
      real_t tmp_457 = tmp_30*tmp_455 + tmp_33*tmp_454 + tmp_39*tmp_453;
      real_t tmp_458 = tmp_36*tmp_455 + tmp_38*tmp_453 + tmp_40*tmp_454;
      real_t tmp_459 = tmp_15*(tmp_447 + tmp_84);
      real_t tmp_460 = tmp_15*(tmp_449 + tmp_86);
      real_t tmp_461 = tmp_15*(tmp_451 + tmp_88);
      real_t tmp_462 = tmp_21*tmp_460 + tmp_24*tmp_459 + tmp_461*tmp_6 - 1.0/4.0;
      real_t tmp_463 = tmp_17*tmp_461 + tmp_22*tmp_460 + tmp_25*tmp_459 - 1.0/4.0;
      real_t tmp_464 = tmp_19*tmp_461 + tmp_23*tmp_460 + tmp_26*tmp_459 - 1.0/4.0;
      real_t tmp_465 = tmp_10*tmp_464 + tmp_462*tmp_7 + tmp_463*tmp_8;
      real_t tmp_466 = tmp_0*tmp_463 + tmp_11*tmp_462 + tmp_3*tmp_464;
      real_t tmp_467 = tmp_1*tmp_464 + tmp_4*tmp_463 + tmp_462*tmp_9;
      real_t tmp_468 = 0.19601935860219369*tmp_46 + 0.19601935860219369*tmp_47;
      real_t tmp_469 = tmp_43*(tmp_44 + tmp_468);
      real_t tmp_470 = 0.19601935860219369*tmp_53 + 0.19601935860219369*tmp_54;
      real_t tmp_471 = tmp_43*(tmp_470 + tmp_51);
      real_t tmp_472 = 0.19601935860219369*tmp_60 + 0.19601935860219369*tmp_61;
      real_t tmp_473 = tmp_43*(tmp_472 + tmp_58);
      real_t tmp_474 = tmp_35*tmp_469 + tmp_471*tmp_50 + tmp_473*tmp_57 - 1.0/4.0;
      real_t tmp_475 = tmp_469*tmp_65 + tmp_471*tmp_66 + tmp_473*tmp_67 - 1.0/4.0;
      real_t tmp_476 = tmp_469*tmp_69 + tmp_471*tmp_70 + tmp_473*tmp_71 - 1.0/4.0;
      real_t tmp_477 = tmp_28*tmp_474 + tmp_29*tmp_475 + tmp_32*tmp_476;
      real_t tmp_478 = tmp_30*tmp_476 + tmp_33*tmp_475 + tmp_39*tmp_474;
      real_t tmp_479 = tmp_36*tmp_476 + tmp_38*tmp_474 + tmp_40*tmp_475;
      real_t tmp_480 = tmp_15*(tmp_468 + tmp_84);
      real_t tmp_481 = tmp_15*(tmp_470 + tmp_86);
      real_t tmp_482 = tmp_15*(tmp_472 + tmp_88);
      real_t tmp_483 = tmp_21*tmp_481 + tmp_24*tmp_480 + tmp_482*tmp_6 - 1.0/4.0;
      real_t tmp_484 = tmp_17*tmp_482 + tmp_22*tmp_481 + tmp_25*tmp_480 - 1.0/4.0;
      real_t tmp_485 = tmp_19*tmp_482 + tmp_23*tmp_481 + tmp_26*tmp_480 - 1.0/4.0;
      real_t tmp_486 = tmp_10*tmp_485 + tmp_483*tmp_7 + tmp_484*tmp_8;
      real_t tmp_487 = tmp_0*tmp_484 + tmp_11*tmp_483 + tmp_3*tmp_485;
      real_t tmp_488 = tmp_1*tmp_485 + tmp_4*tmp_484 + tmp_483*tmp_9;
      real_t tmp_489 = 0.40446199974765351*tmp_46 + 0.40446199974765351*tmp_47;
      real_t tmp_490 = tmp_43*(tmp_44 + tmp_489);
      real_t tmp_491 = 0.40446199974765351*tmp_53 + 0.40446199974765351*tmp_54;
      real_t tmp_492 = tmp_43*(tmp_491 + tmp_51);
      real_t tmp_493 = 0.40446199974765351*tmp_60 + 0.40446199974765351*tmp_61;
      real_t tmp_494 = tmp_43*(tmp_493 + tmp_58);
      real_t tmp_495 = tmp_35*tmp_490 + tmp_492*tmp_50 + tmp_494*tmp_57 - 1.0/4.0;
      real_t tmp_496 = tmp_490*tmp_65 + tmp_492*tmp_66 + tmp_494*tmp_67 - 1.0/4.0;
      real_t tmp_497 = tmp_490*tmp_69 + tmp_492*tmp_70 + tmp_494*tmp_71 - 1.0/4.0;
      real_t tmp_498 = tmp_28*tmp_495 + tmp_29*tmp_496 + tmp_32*tmp_497;
      real_t tmp_499 = tmp_30*tmp_497 + tmp_33*tmp_496 + tmp_39*tmp_495;
      real_t tmp_500 = tmp_36*tmp_497 + tmp_38*tmp_495 + tmp_40*tmp_496;
      real_t tmp_501 = tmp_15*(tmp_489 + tmp_84);
      real_t tmp_502 = tmp_15*(tmp_491 + tmp_86);
      real_t tmp_503 = tmp_15*(tmp_493 + tmp_88);
      real_t tmp_504 = tmp_21*tmp_502 + tmp_24*tmp_501 + tmp_503*tmp_6 - 1.0/4.0;
      real_t tmp_505 = tmp_17*tmp_503 + tmp_22*tmp_502 + tmp_25*tmp_501 - 1.0/4.0;
      real_t tmp_506 = tmp_19*tmp_503 + tmp_23*tmp_502 + tmp_26*tmp_501 - 1.0/4.0;
      real_t tmp_507 = tmp_10*tmp_506 + tmp_504*tmp_7 + tmp_505*tmp_8;
      real_t tmp_508 = tmp_0*tmp_505 + tmp_11*tmp_504 + tmp_3*tmp_506;
      real_t tmp_509 = tmp_1*tmp_506 + tmp_4*tmp_505 + tmp_504*tmp_9;
      real_t tmp_510 = 0.1711304259088916*tmp_46 + 0.041227165399737475*tmp_47;
      real_t tmp_511 = tmp_43*(tmp_44 + tmp_510);
      real_t tmp_512 = 0.1711304259088916*tmp_53 + 0.041227165399737475*tmp_54;
      real_t tmp_513 = tmp_43*(tmp_51 + tmp_512);
      real_t tmp_514 = 0.1711304259088916*tmp_60 + 0.041227165399737475*tmp_61;
      real_t tmp_515 = tmp_43*(tmp_514 + tmp_58);
      real_t tmp_516 = tmp_35*tmp_511 + tmp_50*tmp_513 + tmp_515*tmp_57 - 1.0/4.0;
      real_t tmp_517 = tmp_511*tmp_65 + tmp_513*tmp_66 + tmp_515*tmp_67 - 1.0/4.0;
      real_t tmp_518 = tmp_511*tmp_69 + tmp_513*tmp_70 + tmp_515*tmp_71 - 1.0/4.0;
      real_t tmp_519 = tmp_28*tmp_516 + tmp_29*tmp_517 + tmp_32*tmp_518;
      real_t tmp_520 = tmp_30*tmp_518 + tmp_33*tmp_517 + tmp_39*tmp_516;
      real_t tmp_521 = tmp_36*tmp_518 + tmp_38*tmp_516 + tmp_40*tmp_517;
      real_t tmp_522 = tmp_15*(tmp_510 + tmp_84);
      real_t tmp_523 = tmp_15*(tmp_512 + tmp_86);
      real_t tmp_524 = tmp_15*(tmp_514 + tmp_88);
      real_t tmp_525 = tmp_21*tmp_523 + tmp_24*tmp_522 + tmp_524*tmp_6 - 1.0/4.0;
      real_t tmp_526 = tmp_17*tmp_524 + tmp_22*tmp_523 + tmp_25*tmp_522 - 1.0/4.0;
      real_t tmp_527 = tmp_19*tmp_524 + tmp_23*tmp_523 + tmp_26*tmp_522 - 1.0/4.0;
      real_t tmp_528 = tmp_10*tmp_527 + tmp_525*tmp_7 + tmp_526*tmp_8;
      real_t tmp_529 = tmp_0*tmp_526 + tmp_11*tmp_525 + tmp_3*tmp_527;
      real_t tmp_530 = tmp_1*tmp_527 + tmp_4*tmp_526 + tmp_525*tmp_9;
      real_t a_0_0 = 0.037198804536718075*tmp_110*(-tmp_102*tmp_130 - tmp_107*tmp_131 - tmp_109*(tmp_120*tmp_129 + tmp_121*tmp_130 + tmp_122*tmp_131) + 0.5*tmp_120*tmp_27 + 0.5*tmp_121*tmp_77 + 0.5*tmp_122*tmp_82 - tmp_129*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_151 - tmp_107*tmp_152 - tmp_109*(tmp_141*tmp_150 + tmp_142*tmp_151 + tmp_143*tmp_152) + 0.5*tmp_141*tmp_27 + 0.5*tmp_142*tmp_77 + 0.5*tmp_143*tmp_82 - tmp_150*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_172 - tmp_107*tmp_173 - tmp_109*(tmp_162*tmp_171 + tmp_163*tmp_172 + tmp_164*tmp_173) + 0.5*tmp_162*tmp_27 + 0.5*tmp_163*tmp_77 + 0.5*tmp_164*tmp_82 - tmp_171*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_193 - tmp_107*tmp_194 - tmp_109*(tmp_183*tmp_192 + tmp_184*tmp_193 + tmp_185*tmp_194) + 0.5*tmp_183*tmp_27 + 0.5*tmp_184*tmp_77 + 0.5*tmp_185*tmp_82 - tmp_192*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_214 - tmp_107*tmp_215 - tmp_109*(tmp_204*tmp_213 + tmp_205*tmp_214 + tmp_206*tmp_215) + 0.5*tmp_204*tmp_27 + 0.5*tmp_205*tmp_77 + 0.5*tmp_206*tmp_82 - tmp_213*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_235 - tmp_107*tmp_236 - tmp_109*(tmp_225*tmp_234 + tmp_226*tmp_235 + tmp_227*tmp_236) + 0.5*tmp_225*tmp_27 + 0.5*tmp_226*tmp_77 + 0.5*tmp_227*tmp_82 - tmp_234*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_256 - tmp_107*tmp_257 - tmp_109*(tmp_246*tmp_255 + tmp_247*tmp_256 + tmp_248*tmp_257) + 0.5*tmp_246*tmp_27 + 0.5*tmp_247*tmp_77 + 0.5*tmp_248*tmp_82 - tmp_255*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_277 - tmp_107*tmp_278 - tmp_109*(tmp_267*tmp_276 + tmp_268*tmp_277 + tmp_269*tmp_278) + 0.5*tmp_267*tmp_27 + 0.5*tmp_268*tmp_77 + 0.5*tmp_269*tmp_82 - tmp_276*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_298 - tmp_107*tmp_299 - tmp_109*(tmp_288*tmp_297 + tmp_289*tmp_298 + tmp_290*tmp_299) + 0.5*tmp_27*tmp_288 + 0.5*tmp_289*tmp_77 + 0.5*tmp_290*tmp_82 - tmp_297*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_319 - tmp_107*tmp_320 - tmp_109*(tmp_309*tmp_318 + tmp_310*tmp_319 + tmp_311*tmp_320) + 0.5*tmp_27*tmp_309 + 0.5*tmp_310*tmp_77 + 0.5*tmp_311*tmp_82 - tmp_318*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_340 - tmp_107*tmp_341 - tmp_109*(tmp_330*tmp_339 + tmp_331*tmp_340 + tmp_332*tmp_341) + 0.5*tmp_27*tmp_330 + 0.5*tmp_331*tmp_77 + 0.5*tmp_332*tmp_82 - tmp_339*tmp_97) + 0.042507265838595799*tmp_110*(-tmp_102*tmp_361 - tmp_107*tmp_362 - tmp_109*(tmp_351*tmp_360 + tmp_352*tmp_361 + tmp_353*tmp_362) + 0.5*tmp_27*tmp_351 + 0.5*tmp_352*tmp_77 + 0.5*tmp_353*tmp_82 - tmp_360*tmp_97) + 0.020848748529055869*tmp_110*(-tmp_102*tmp_382 - tmp_107*tmp_383 - tmp_109*(tmp_372*tmp_381 + tmp_373*tmp_382 + tmp_374*tmp_383) + 0.5*tmp_27*tmp_372 + 0.5*tmp_373*tmp_77 + 0.5*tmp_374*tmp_82 - tmp_381*tmp_97) + 0.0068572537431980923*tmp_110*(-tmp_102*tmp_403 - tmp_107*tmp_404 - tmp_109*(tmp_393*tmp_402 + tmp_394*tmp_403 + tmp_395*tmp_404) + 0.5*tmp_27*tmp_393 + 0.5*tmp_394*tmp_77 + 0.5*tmp_395*tmp_82 - tmp_402*tmp_97) + 0.037198804536718075*tmp_110*(-tmp_102*tmp_424 - tmp_107*tmp_425 - tmp_109*(tmp_414*tmp_423 + tmp_415*tmp_424 + tmp_416*tmp_425) + 0.5*tmp_27*tmp_414 + 0.5*tmp_415*tmp_77 + 0.5*tmp_416*tmp_82 - tmp_423*tmp_97) + 0.042507265838595799*tmp_110*(-tmp_102*tmp_445 - tmp_107*tmp_446 - tmp_109*(tmp_435*tmp_444 + tmp_436*tmp_445 + tmp_437*tmp_446) + 0.5*tmp_27*tmp_435 + 0.5*tmp_436*tmp_77 + 0.5*tmp_437*tmp_82 - tmp_444*tmp_97) + 0.0068572537431980923*tmp_110*(-tmp_102*tmp_466 - tmp_107*tmp_467 - tmp_109*(tmp_456*tmp_465 + tmp_457*tmp_466 + tmp_458*tmp_467) + 0.5*tmp_27*tmp_456 + 0.5*tmp_457*tmp_77 + 0.5*tmp_458*tmp_82 - tmp_465*tmp_97) + 0.037198804536718075*tmp_110*(-tmp_102*tmp_487 - tmp_107*tmp_488 - tmp_109*(tmp_477*tmp_486 + tmp_478*tmp_487 + tmp_479*tmp_488) + 0.5*tmp_27*tmp_477 + 0.5*tmp_478*tmp_77 + 0.5*tmp_479*tmp_82 - tmp_486*tmp_97) + 0.042507265838595799*tmp_110*(-tmp_102*tmp_508 - tmp_107*tmp_509 - tmp_109*(tmp_498*tmp_507 + tmp_499*tmp_508 + tmp_500*tmp_509) + 0.5*tmp_27*tmp_498 + 0.5*tmp_499*tmp_77 + 0.5*tmp_500*tmp_82 - tmp_507*tmp_97) + 0.019202922745021479*tmp_110*(-tmp_102*tmp_529 - tmp_107*tmp_530 - tmp_109*(tmp_519*tmp_528 + tmp_520*tmp_529 + tmp_521*tmp_530) + 0.5*tmp_27*tmp_519 + 0.5*tmp_520*tmp_77 + 0.5*tmp_521*tmp_82 - tmp_528*tmp_97) + 0.0068572537431980923*tmp_110*(-tmp_102*tmp_98 - tmp_103*tmp_107 - tmp_109*(tmp_103*tmp_83 + tmp_73*tmp_93 + tmp_78*tmp_98) + 0.5*tmp_27*tmp_73 + 0.5*tmp_77*tmp_78 + 0.5*tmp_82*tmp_83 - tmp_93*tmp_97);
      elMat( 0, 0) = a_0_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32 - 1.0/4.0;
      real_t tmp_34 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_35 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_36 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36 - 1.0/4.0;
      real_t tmp_38 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_39 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_40 = tmp_11 - tmp_14;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40 - 1.0/4.0;
      real_t tmp_42 = tmp_0*tmp_33 + tmp_1*tmp_37 + tmp_3*tmp_41;
      real_t tmp_43 = tmp_0*tmp_15;
      real_t tmp_44 = tmp_1*tmp_15;
      real_t tmp_45 = tmp_15*tmp_3;
      real_t tmp_46 = 2*p_affine_13_0*(tmp_27*tmp_43 + tmp_36*tmp_44 + tmp_40*tmp_45) + 2*p_affine_13_1*(tmp_21*tmp_43 + tmp_35*tmp_44 + tmp_39*tmp_45) + 2*p_affine_13_2*(tmp_34*tmp_44 + tmp_38*tmp_45 + tmp_43*tmp_5);
      real_t tmp_47 = tmp_2*tmp_41 + tmp_33*tmp_9 + tmp_37*tmp_4;
      real_t tmp_48 = tmp_15*tmp_9;
      real_t tmp_49 = tmp_15*tmp_4;
      real_t tmp_50 = tmp_15*tmp_2;
      real_t tmp_51 = 2*p_affine_13_0*(tmp_27*tmp_48 + tmp_36*tmp_49 + tmp_40*tmp_50) + 2*p_affine_13_1*(tmp_21*tmp_48 + tmp_35*tmp_49 + tmp_39*tmp_50) + 2*p_affine_13_2*(tmp_34*tmp_49 + tmp_38*tmp_50 + tmp_48*tmp_5);
      real_t tmp_52 = tmp_10*tmp_37 + tmp_33*tmp_8 + tmp_41*tmp_6;
      real_t tmp_53 = tmp_15*tmp_8;
      real_t tmp_54 = tmp_10*tmp_15;
      real_t tmp_55 = tmp_15*tmp_6;
      real_t tmp_56 = 2*p_affine_13_0*(tmp_27*tmp_53 + tmp_36*tmp_54 + tmp_40*tmp_55) + 2*p_affine_13_1*(tmp_21*tmp_53 + tmp_35*tmp_54 + tmp_39*tmp_55) + 2*p_affine_13_2*(tmp_34*tmp_54 + tmp_38*tmp_55 + tmp_5*tmp_53);
      real_t tmp_57 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_58 = std::pow(tmp_57, -0.25);
      real_t tmp_59 = 1.0*std::pow(tmp_57, 1.0/2.0);
      real_t tmp_60 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_61 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_62 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_63 = tmp_21*tmp_61 + tmp_27*tmp_62 + tmp_5*tmp_60 - 1.0/4.0;
      real_t tmp_64 = tmp_34*tmp_60 + tmp_35*tmp_61 + tmp_36*tmp_62 - 1.0/4.0;
      real_t tmp_65 = tmp_38*tmp_60 + tmp_39*tmp_61 + tmp_40*tmp_62 - 1.0/4.0;
      real_t tmp_66 = tmp_0*tmp_63 + tmp_1*tmp_64 + tmp_3*tmp_65;
      real_t tmp_67 = tmp_2*tmp_65 + tmp_4*tmp_64 + tmp_63*tmp_9;
      real_t tmp_68 = tmp_10*tmp_64 + tmp_6*tmp_65 + tmp_63*tmp_8;
      real_t tmp_69 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_70 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_71 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_72 = tmp_21*tmp_70 + tmp_27*tmp_71 + tmp_5*tmp_69 - 1.0/4.0;
      real_t tmp_73 = tmp_34*tmp_69 + tmp_35*tmp_70 + tmp_36*tmp_71 - 1.0/4.0;
      real_t tmp_74 = tmp_38*tmp_69 + tmp_39*tmp_70 + tmp_40*tmp_71 - 1.0/4.0;
      real_t tmp_75 = tmp_0*tmp_72 + tmp_1*tmp_73 + tmp_3*tmp_74;
      real_t tmp_76 = tmp_2*tmp_74 + tmp_4*tmp_73 + tmp_72*tmp_9;
      real_t tmp_77 = tmp_10*tmp_73 + tmp_6*tmp_74 + tmp_72*tmp_8;
      real_t tmp_78 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_5*tmp_78 - 1.0/4.0;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80 - 1.0/4.0;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80 - 1.0/4.0;
      real_t tmp_84 = tmp_0*tmp_81 + tmp_1*tmp_82 + tmp_3*tmp_83;
      real_t tmp_85 = tmp_2*tmp_83 + tmp_4*tmp_82 + tmp_81*tmp_9;
      real_t tmp_86 = tmp_10*tmp_82 + tmp_6*tmp_83 + tmp_8*tmp_81;
      real_t tmp_87 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87 - 1.0/4.0;
      real_t tmp_91 = tmp_34*tmp_87 + tmp_35*tmp_88 + tmp_36*tmp_89 - 1.0/4.0;
      real_t tmp_92 = tmp_38*tmp_87 + tmp_39*tmp_88 + tmp_40*tmp_89 - 1.0/4.0;
      real_t tmp_93 = tmp_0*tmp_90 + tmp_1*tmp_91 + tmp_3*tmp_92;
      real_t tmp_94 = tmp_2*tmp_92 + tmp_4*tmp_91 + tmp_9*tmp_90;
      real_t tmp_95 = tmp_10*tmp_91 + tmp_6*tmp_92 + tmp_8*tmp_90;
      real_t tmp_96 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_97 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_98 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_99 = tmp_21*tmp_97 + tmp_27*tmp_98 + tmp_5*tmp_96 - 1.0/4.0;
      real_t tmp_100 = tmp_34*tmp_96 + tmp_35*tmp_97 + tmp_36*tmp_98 - 1.0/4.0;
      real_t tmp_101 = tmp_38*tmp_96 + tmp_39*tmp_97 + tmp_40*tmp_98 - 1.0/4.0;
      real_t tmp_102 = tmp_0*tmp_99 + tmp_1*tmp_100 + tmp_101*tmp_3;
      real_t tmp_103 = tmp_100*tmp_4 + tmp_101*tmp_2 + tmp_9*tmp_99;
      real_t tmp_104 = tmp_10*tmp_100 + tmp_101*tmp_6 + tmp_8*tmp_99;
      real_t tmp_105 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_106 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_107 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_108 = tmp_105*tmp_5 + tmp_106*tmp_21 + tmp_107*tmp_27 - 1.0/4.0;
      real_t tmp_109 = tmp_105*tmp_34 + tmp_106*tmp_35 + tmp_107*tmp_36 - 1.0/4.0;
      real_t tmp_110 = tmp_105*tmp_38 + tmp_106*tmp_39 + tmp_107*tmp_40 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_108 + tmp_1*tmp_109 + tmp_110*tmp_3;
      real_t tmp_112 = tmp_108*tmp_9 + tmp_109*tmp_4 + tmp_110*tmp_2;
      real_t tmp_113 = tmp_10*tmp_109 + tmp_108*tmp_8 + tmp_110*tmp_6;
      real_t tmp_114 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_115 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_116 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_117 = tmp_114*tmp_5 + tmp_115*tmp_21 + tmp_116*tmp_27 - 1.0/4.0;
      real_t tmp_118 = tmp_114*tmp_34 + tmp_115*tmp_35 + tmp_116*tmp_36 - 1.0/4.0;
      real_t tmp_119 = tmp_114*tmp_38 + tmp_115*tmp_39 + tmp_116*tmp_40 - 1.0/4.0;
      real_t tmp_120 = tmp_0*tmp_117 + tmp_1*tmp_118 + tmp_119*tmp_3;
      real_t tmp_121 = tmp_117*tmp_9 + tmp_118*tmp_4 + tmp_119*tmp_2;
      real_t tmp_122 = tmp_10*tmp_118 + tmp_117*tmp_8 + tmp_119*tmp_6;
      real_t tmp_123 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_124 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_125 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_126 = tmp_123*tmp_5 + tmp_124*tmp_21 + tmp_125*tmp_27 - 1.0/4.0;
      real_t tmp_127 = tmp_123*tmp_34 + tmp_124*tmp_35 + tmp_125*tmp_36 - 1.0/4.0;
      real_t tmp_128 = tmp_123*tmp_38 + tmp_124*tmp_39 + tmp_125*tmp_40 - 1.0/4.0;
      real_t tmp_129 = tmp_0*tmp_126 + tmp_1*tmp_127 + tmp_128*tmp_3;
      real_t tmp_130 = tmp_126*tmp_9 + tmp_127*tmp_4 + tmp_128*tmp_2;
      real_t tmp_131 = tmp_10*tmp_127 + tmp_126*tmp_8 + tmp_128*tmp_6;
      real_t tmp_132 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_133 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_135 = tmp_132*tmp_5 + tmp_133*tmp_21 + tmp_134*tmp_27 - 1.0/4.0;
      real_t tmp_136 = tmp_132*tmp_34 + tmp_133*tmp_35 + tmp_134*tmp_36 - 1.0/4.0;
      real_t tmp_137 = tmp_132*tmp_38 + tmp_133*tmp_39 + tmp_134*tmp_40 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_135 + tmp_1*tmp_136 + tmp_137*tmp_3;
      real_t tmp_139 = tmp_135*tmp_9 + tmp_136*tmp_4 + tmp_137*tmp_2;
      real_t tmp_140 = tmp_10*tmp_136 + tmp_135*tmp_8 + tmp_137*tmp_6;
      real_t tmp_141 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_142 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_143 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_144 = tmp_141*tmp_5 + tmp_142*tmp_21 + tmp_143*tmp_27 - 1.0/4.0;
      real_t tmp_145 = tmp_141*tmp_34 + tmp_142*tmp_35 + tmp_143*tmp_36 - 1.0/4.0;
      real_t tmp_146 = tmp_141*tmp_38 + tmp_142*tmp_39 + tmp_143*tmp_40 - 1.0/4.0;
      real_t tmp_147 = tmp_0*tmp_144 + tmp_1*tmp_145 + tmp_146*tmp_3;
      real_t tmp_148 = tmp_144*tmp_9 + tmp_145*tmp_4 + tmp_146*tmp_2;
      real_t tmp_149 = tmp_10*tmp_145 + tmp_144*tmp_8 + tmp_146*tmp_6;
      real_t tmp_150 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_5 + tmp_151*tmp_21 + tmp_152*tmp_27 - 1.0/4.0;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36 - 1.0/4.0;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40 - 1.0/4.0;
      real_t tmp_156 = tmp_0*tmp_153 + tmp_1*tmp_154 + tmp_155*tmp_3;
      real_t tmp_157 = tmp_153*tmp_9 + tmp_154*tmp_4 + tmp_155*tmp_2;
      real_t tmp_158 = tmp_10*tmp_154 + tmp_153*tmp_8 + tmp_155*tmp_6;
      real_t tmp_159 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_160 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_161 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_162 = tmp_159*tmp_5 + tmp_160*tmp_21 + tmp_161*tmp_27 - 1.0/4.0;
      real_t tmp_163 = tmp_159*tmp_34 + tmp_160*tmp_35 + tmp_161*tmp_36 - 1.0/4.0;
      real_t tmp_164 = tmp_159*tmp_38 + tmp_160*tmp_39 + tmp_161*tmp_40 - 1.0/4.0;
      real_t tmp_165 = tmp_0*tmp_162 + tmp_1*tmp_163 + tmp_164*tmp_3;
      real_t tmp_166 = tmp_162*tmp_9 + tmp_163*tmp_4 + tmp_164*tmp_2;
      real_t tmp_167 = tmp_10*tmp_163 + tmp_162*tmp_8 + tmp_164*tmp_6;
      real_t tmp_168 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_169 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_170 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_171 = tmp_168*tmp_5 + tmp_169*tmp_21 + tmp_170*tmp_27 - 1.0/4.0;
      real_t tmp_172 = tmp_168*tmp_34 + tmp_169*tmp_35 + tmp_170*tmp_36 - 1.0/4.0;
      real_t tmp_173 = tmp_168*tmp_38 + tmp_169*tmp_39 + tmp_170*tmp_40 - 1.0/4.0;
      real_t tmp_174 = tmp_0*tmp_171 + tmp_1*tmp_172 + tmp_173*tmp_3;
      real_t tmp_175 = tmp_171*tmp_9 + tmp_172*tmp_4 + tmp_173*tmp_2;
      real_t tmp_176 = tmp_10*tmp_172 + tmp_171*tmp_8 + tmp_173*tmp_6;
      real_t tmp_177 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_178 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_179 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_180 = tmp_177*tmp_5 + tmp_178*tmp_21 + tmp_179*tmp_27 - 1.0/4.0;
      real_t tmp_181 = tmp_177*tmp_34 + tmp_178*tmp_35 + tmp_179*tmp_36 - 1.0/4.0;
      real_t tmp_182 = tmp_177*tmp_38 + tmp_178*tmp_39 + tmp_179*tmp_40 - 1.0/4.0;
      real_t tmp_183 = tmp_0*tmp_180 + tmp_1*tmp_181 + tmp_182*tmp_3;
      real_t tmp_184 = tmp_180*tmp_9 + tmp_181*tmp_4 + tmp_182*tmp_2;
      real_t tmp_185 = tmp_10*tmp_181 + tmp_180*tmp_8 + tmp_182*tmp_6;
      real_t tmp_186 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27 - 1.0/4.0;
      real_t tmp_190 = tmp_186*tmp_34 + tmp_187*tmp_35 + tmp_188*tmp_36 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_38 + tmp_187*tmp_39 + tmp_188*tmp_40 - 1.0/4.0;
      real_t tmp_192 = tmp_0*tmp_189 + tmp_1*tmp_190 + tmp_191*tmp_3;
      real_t tmp_193 = tmp_189*tmp_9 + tmp_190*tmp_4 + tmp_191*tmp_2;
      real_t tmp_194 = tmp_10*tmp_190 + tmp_189*tmp_8 + tmp_191*tmp_6;
      real_t tmp_195 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_196 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_197 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_198 = tmp_195*tmp_5 + tmp_196*tmp_21 + tmp_197*tmp_27 - 1.0/4.0;
      real_t tmp_199 = tmp_195*tmp_34 + tmp_196*tmp_35 + tmp_197*tmp_36 - 1.0/4.0;
      real_t tmp_200 = tmp_195*tmp_38 + tmp_196*tmp_39 + tmp_197*tmp_40 - 1.0/4.0;
      real_t tmp_201 = tmp_0*tmp_198 + tmp_1*tmp_199 + tmp_200*tmp_3;
      real_t tmp_202 = tmp_198*tmp_9 + tmp_199*tmp_4 + tmp_2*tmp_200;
      real_t tmp_203 = tmp_10*tmp_199 + tmp_198*tmp_8 + tmp_200*tmp_6;
      real_t tmp_204 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_205 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_206 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_207 = tmp_204*tmp_5 + tmp_205*tmp_21 + tmp_206*tmp_27 - 1.0/4.0;
      real_t tmp_208 = tmp_204*tmp_34 + tmp_205*tmp_35 + tmp_206*tmp_36 - 1.0/4.0;
      real_t tmp_209 = tmp_204*tmp_38 + tmp_205*tmp_39 + tmp_206*tmp_40 - 1.0/4.0;
      real_t tmp_210 = tmp_0*tmp_207 + tmp_1*tmp_208 + tmp_209*tmp_3;
      real_t tmp_211 = tmp_2*tmp_209 + tmp_207*tmp_9 + tmp_208*tmp_4;
      real_t tmp_212 = tmp_10*tmp_208 + tmp_207*tmp_8 + tmp_209*tmp_6;
      real_t tmp_213 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27 - 1.0/4.0;
      real_t tmp_217 = tmp_213*tmp_34 + tmp_214*tmp_35 + tmp_215*tmp_36 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_38 + tmp_214*tmp_39 + tmp_215*tmp_40 - 1.0/4.0;
      real_t tmp_219 = tmp_0*tmp_216 + tmp_1*tmp_217 + tmp_218*tmp_3;
      real_t tmp_220 = tmp_2*tmp_218 + tmp_216*tmp_9 + tmp_217*tmp_4;
      real_t tmp_221 = tmp_10*tmp_217 + tmp_216*tmp_8 + tmp_218*tmp_6;
      real_t tmp_222 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_223 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_224 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_225 = tmp_21*tmp_223 + tmp_222*tmp_5 + tmp_224*tmp_27 - 1.0/4.0;
      real_t tmp_226 = tmp_222*tmp_34 + tmp_223*tmp_35 + tmp_224*tmp_36 - 1.0/4.0;
      real_t tmp_227 = tmp_222*tmp_38 + tmp_223*tmp_39 + tmp_224*tmp_40 - 1.0/4.0;
      real_t tmp_228 = tmp_0*tmp_225 + tmp_1*tmp_226 + tmp_227*tmp_3;
      real_t tmp_229 = tmp_2*tmp_227 + tmp_225*tmp_9 + tmp_226*tmp_4;
      real_t tmp_230 = tmp_10*tmp_226 + tmp_225*tmp_8 + tmp_227*tmp_6;
      real_t tmp_231 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_232 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_233 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_234 = tmp_21*tmp_232 + tmp_231*tmp_5 + tmp_233*tmp_27 - 1.0/4.0;
      real_t tmp_235 = tmp_231*tmp_34 + tmp_232*tmp_35 + tmp_233*tmp_36 - 1.0/4.0;
      real_t tmp_236 = tmp_231*tmp_38 + tmp_232*tmp_39 + tmp_233*tmp_40 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_234 + tmp_1*tmp_235 + tmp_236*tmp_3;
      real_t tmp_238 = tmp_2*tmp_236 + tmp_234*tmp_9 + tmp_235*tmp_4;
      real_t tmp_239 = tmp_10*tmp_235 + tmp_234*tmp_8 + tmp_236*tmp_6;
      real_t a_0_0 = 0.019202922745021479*tmp_59*(-tmp_102*tmp_46 - tmp_103*tmp_51 - tmp_104*tmp_56 + 3.0*tmp_58*((tmp_102*tmp_102) + (tmp_103*tmp_103) + (tmp_104*tmp_104))) + 0.020848748529055869*tmp_59*(-tmp_111*tmp_46 - tmp_112*tmp_51 - tmp_113*tmp_56 + 3.0*tmp_58*((tmp_111*tmp_111) + (tmp_112*tmp_112) + (tmp_113*tmp_113))) + 0.019202922745021479*tmp_59*(-tmp_120*tmp_46 - tmp_121*tmp_51 - tmp_122*tmp_56 + 3.0*tmp_58*((tmp_120*tmp_120) + (tmp_121*tmp_121) + (tmp_122*tmp_122))) + 0.020848748529055869*tmp_59*(-tmp_129*tmp_46 - tmp_130*tmp_51 - tmp_131*tmp_56 + 3.0*tmp_58*((tmp_129*tmp_129) + (tmp_130*tmp_130) + (tmp_131*tmp_131))) + 0.019202922745021479*tmp_59*(-tmp_138*tmp_46 - tmp_139*tmp_51 - tmp_140*tmp_56 + 3.0*tmp_58*((tmp_138*tmp_138) + (tmp_139*tmp_139) + (tmp_140*tmp_140))) + 0.020848748529055869*tmp_59*(-tmp_147*tmp_46 - tmp_148*tmp_51 - tmp_149*tmp_56 + 3.0*tmp_58*((tmp_147*tmp_147) + (tmp_148*tmp_148) + (tmp_149*tmp_149))) + 0.019202922745021479*tmp_59*(-tmp_156*tmp_46 - tmp_157*tmp_51 - tmp_158*tmp_56 + 3.0*tmp_58*((tmp_156*tmp_156) + (tmp_157*tmp_157) + (tmp_158*tmp_158))) + 0.042507265838595799*tmp_59*(-tmp_165*tmp_46 - tmp_166*tmp_51 - tmp_167*tmp_56 + 3.0*tmp_58*((tmp_165*tmp_165) + (tmp_166*tmp_166) + (tmp_167*tmp_167))) + 0.020848748529055869*tmp_59*(-tmp_174*tmp_46 - tmp_175*tmp_51 - tmp_176*tmp_56 + 3.0*tmp_58*((tmp_174*tmp_174) + (tmp_175*tmp_175) + (tmp_176*tmp_176))) + 0.0068572537431980923*tmp_59*(-tmp_183*tmp_46 - tmp_184*tmp_51 - tmp_185*tmp_56 + 3.0*tmp_58*((tmp_183*tmp_183) + (tmp_184*tmp_184) + (tmp_185*tmp_185))) + 0.037198804536718075*tmp_59*(-tmp_192*tmp_46 - tmp_193*tmp_51 - tmp_194*tmp_56 + 3.0*tmp_58*((tmp_192*tmp_192) + (tmp_193*tmp_193) + (tmp_194*tmp_194))) + 0.042507265838595799*tmp_59*(-tmp_201*tmp_46 - tmp_202*tmp_51 - tmp_203*tmp_56 + 3.0*tmp_58*((tmp_201*tmp_201) + (tmp_202*tmp_202) + (tmp_203*tmp_203))) + 0.0068572537431980923*tmp_59*(-tmp_210*tmp_46 - tmp_211*tmp_51 - tmp_212*tmp_56 + 3.0*tmp_58*((tmp_210*tmp_210) + (tmp_211*tmp_211) + (tmp_212*tmp_212))) + 0.037198804536718075*tmp_59*(-tmp_219*tmp_46 - tmp_220*tmp_51 - tmp_221*tmp_56 + 3.0*tmp_58*((tmp_219*tmp_219) + (tmp_220*tmp_220) + (tmp_221*tmp_221))) + 0.042507265838595799*tmp_59*(-tmp_228*tmp_46 - tmp_229*tmp_51 - tmp_230*tmp_56 + 3.0*tmp_58*((tmp_228*tmp_228) + (tmp_229*tmp_229) + (tmp_230*tmp_230))) + 0.019202922745021479*tmp_59*(-tmp_237*tmp_46 - tmp_238*tmp_51 - tmp_239*tmp_56 + 3.0*tmp_58*((tmp_237*tmp_237) + (tmp_238*tmp_238) + (tmp_239*tmp_239))) + 0.0068572537431980923*tmp_59*(-tmp_42*tmp_46 - tmp_47*tmp_51 - tmp_52*tmp_56 + 3.0*tmp_58*((tmp_42*tmp_42) + (tmp_47*tmp_47) + (tmp_52*tmp_52))) + 0.037198804536718075*tmp_59*(-tmp_46*tmp_66 - tmp_51*tmp_67 - tmp_56*tmp_68 + 3.0*tmp_58*((tmp_66*tmp_66) + (tmp_67*tmp_67) + (tmp_68*tmp_68))) + 0.020848748529055869*tmp_59*(-tmp_46*tmp_75 - tmp_51*tmp_76 - tmp_56*tmp_77 + 3.0*tmp_58*((tmp_75*tmp_75) + (tmp_76*tmp_76) + (tmp_77*tmp_77))) + 0.019202922745021479*tmp_59*(-tmp_46*tmp_84 - tmp_51*tmp_85 - tmp_56*tmp_86 + 3.0*tmp_58*((tmp_84*tmp_84) + (tmp_85*tmp_85) + (tmp_86*tmp_86))) + 0.020848748529055869*tmp_59*(-tmp_46*tmp_93 - tmp_51*tmp_94 - tmp_56*tmp_95 + 3.0*tmp_58*((tmp_93*tmp_93) + (tmp_94*tmp_94) + (tmp_95*tmp_95)));
      elMat( 0, 0) = a_0_0;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;

};


} //eg
} // dg
} // hyteg
