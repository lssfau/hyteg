
/*
* Copyright (c) 2017-2022 Nils Kohl.
*
* This file is part of HyTeG
* (see https://i10git.cs.fau.de/hyteg/hyteg).
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

# pragma once

# include "core/DataTypes.h"

# include "hyteg/dgfunctionspace/DGBasisInfo.hpp"
# include "hyteg/dgfunctionspace/DGForm.hpp"
# include "hyteg/dgfunctionspace/DGForm2D.hpp"
# include "hyteg/types/matrix.hpp"
# include "hyteg/types/pointnd.hpp"

# include "Eigen/Eigen"

namespace hyteg {
namespace dg{
namespace eg{

class EGEpsilonFormNitscheBC_P1P1_00 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_00()
: callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g0 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g0( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g0( Point3D( {in_0, in_1, 0} ) );
}
void Scalar_Variable_Coefficient_2D_g1( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g1( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = 1.0 / (tmp_4);
      real_t tmp_6 = 2.0*tmp_5;
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = -tmp_7 - tmp_8;
      real_t tmp_10 = 1.0*tmp_5;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_3;
      real_t tmp_13 = -tmp_11 - tmp_12;
      real_t tmp_14 = tmp_1*tmp_10;
      real_t tmp_15 = tmp_10*tmp_2;
      real_t tmp_16 = -tmp_14 - tmp_15;
      real_t tmp_17 = 0.5*tmp_5;
      real_t tmp_18 = -tmp_1*tmp_17 - tmp_17*tmp_2;
      real_t tmp_19 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_20 = tmp_19*(tmp_13*tmp_9 + 2*tmp_16*tmp_18);
      real_t tmp_21 = tmp_18*tmp_6;
      real_t tmp_22 = tmp_19*(tmp_13*tmp_7 + tmp_2*tmp_21);
      real_t tmp_23 = tmp_19*(tmp_1*tmp_21 + tmp_13*tmp_8);
      real_t tmp_24 = tmp_19*(tmp_11*tmp_9 + tmp_15*tmp_16);
      real_t tmp_25 = 1.0 / (tmp_4*tmp_4);
      real_t tmp_26 = 1.0*tmp_25;
      real_t tmp_27 = 2.0*tmp_25;
      real_t tmp_28 = tmp_19*((tmp_0*tmp_0)*tmp_27 + (tmp_2*tmp_2)*tmp_26);
      real_t tmp_29 = tmp_19*(tmp_0*tmp_27*tmp_3 + tmp_1*tmp_2*tmp_26);
      real_t tmp_30 = 0.5*tmp_29;
      real_t tmp_31 = tmp_19*(tmp_12*tmp_9 + tmp_14*tmp_16);
      real_t tmp_32 = tmp_19*((tmp_1*tmp_1)*tmp_26 + tmp_27*(tmp_3*tmp_3));
      real_t a_0_0 = 0.5*tmp_20;
      real_t a_0_1 = 0.5*tmp_22;
      real_t a_0_2 = 0.5*tmp_23;
      real_t a_1_0 = 0.5*tmp_24;
      real_t a_1_1 = 0.5*tmp_28;
      real_t a_1_2 = tmp_30;
      real_t a_2_0 = 0.5*tmp_31;
      real_t a_2_1 = tmp_30;
      real_t a_2_2 = 0.5*tmp_32;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_8 = 1.0 / (-tmp_4*tmp_7 + tmp_5*tmp_6);
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_8*(0.046910077030668018*tmp_1 + tmp_9);
      real_t tmp_11 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_12 = tmp_8*(0.046910077030668018*tmp_0 + tmp_11);
      real_t tmp_13 = tmp_10*tmp_4 + tmp_12*tmp_6;
      real_t tmp_14 = tmp_10*tmp_5 + tmp_12*tmp_7;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = 1.0*tmp_8;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_16*tmp_7;
      real_t tmp_19 = 0.5*tmp_8;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = tmp_19*tmp_4;
      real_t tmp_22 = p_affine_10_0*(-tmp_17 - tmp_18) + p_affine_10_1*(-tmp_20 - tmp_21);
      real_t tmp_23 = 2.0*tmp_22;
      real_t tmp_24 = 0.11846344252809471*tmp_2;
      real_t tmp_25 = tmp_8*(0.23076534494715845*tmp_1 + tmp_9);
      real_t tmp_26 = tmp_8*(0.23076534494715845*tmp_0 + tmp_11);
      real_t tmp_27 = tmp_25*tmp_4 + tmp_26*tmp_6;
      real_t tmp_28 = tmp_25*tmp_5 + tmp_26*tmp_7;
      real_t tmp_29 = -tmp_27 - tmp_28 + 1;
      real_t tmp_30 = 0.2393143352496831*tmp_2;
      real_t tmp_31 = tmp_8*(0.5*tmp_1 + tmp_9);
      real_t tmp_32 = tmp_8*(0.5*tmp_0 + tmp_11);
      real_t tmp_33 = tmp_31*tmp_4 + tmp_32*tmp_6;
      real_t tmp_34 = tmp_31*tmp_5 + tmp_32*tmp_7;
      real_t tmp_35 = -tmp_33 - tmp_34 + 1;
      real_t tmp_36 = 0.2844444444444445*tmp_2;
      real_t tmp_37 = tmp_8*(0.7692346550528415*tmp_1 + tmp_9);
      real_t tmp_38 = tmp_8*(0.7692346550528415*tmp_0 + tmp_11);
      real_t tmp_39 = tmp_37*tmp_4 + tmp_38*tmp_6;
      real_t tmp_40 = tmp_37*tmp_5 + tmp_38*tmp_7;
      real_t tmp_41 = -tmp_39 - tmp_40 + 1;
      real_t tmp_42 = 0.2393143352496831*tmp_2;
      real_t tmp_43 = tmp_8*(0.95308992296933193*tmp_1 + tmp_9);
      real_t tmp_44 = tmp_8*(0.95308992296933193*tmp_0 + tmp_11);
      real_t tmp_45 = tmp_4*tmp_43 + tmp_44*tmp_6;
      real_t tmp_46 = tmp_43*tmp_5 + tmp_44*tmp_7;
      real_t tmp_47 = -tmp_45 - tmp_46 + 1;
      real_t tmp_48 = 0.11846344252809471*tmp_2;
      real_t tmp_49 = 1.0*tmp_22;
      real_t tmp_50 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_21;
      real_t tmp_51 = 1.0*tmp_50;
      real_t tmp_52 = tmp_24*(14*tmp_13*tmp_15*tmp_3 - tmp_13*tmp_49 - tmp_15*tmp_51) + tmp_30*(14*tmp_27*tmp_29*tmp_3 - tmp_27*tmp_49 - tmp_29*tmp_51) + tmp_36*(14*tmp_3*tmp_33*tmp_35 - tmp_33*tmp_49 - tmp_35*tmp_51) + tmp_42*(14*tmp_3*tmp_39*tmp_41 - tmp_39*tmp_49 - tmp_41*tmp_51) + tmp_48*(14*tmp_3*tmp_45*tmp_47 - tmp_45*tmp_49 - tmp_47*tmp_51);
      real_t tmp_53 = p_affine_10_0*tmp_18 + p_affine_10_1*tmp_20;
      real_t tmp_54 = 1.0*tmp_53;
      real_t tmp_55 = tmp_24*(14*tmp_14*tmp_15*tmp_3 - tmp_14*tmp_49 - tmp_15*tmp_54) + tmp_30*(14*tmp_28*tmp_29*tmp_3 - tmp_28*tmp_49 - tmp_29*tmp_54) + tmp_36*(14*tmp_3*tmp_34*tmp_35 - tmp_34*tmp_49 - tmp_35*tmp_54) + tmp_42*(14*tmp_3*tmp_40*tmp_41 - tmp_40*tmp_49 - tmp_41*tmp_54) + tmp_48*(14*tmp_3*tmp_46*tmp_47 - tmp_46*tmp_49 - tmp_47*tmp_54);
      real_t tmp_56 = 2.0*tmp_50;
      real_t tmp_57 = tmp_24*(14*tmp_13*tmp_14*tmp_3 - tmp_13*tmp_54 - tmp_14*tmp_51) + tmp_30*(14*tmp_27*tmp_28*tmp_3 - tmp_27*tmp_54 - tmp_28*tmp_51) + tmp_36*(14*tmp_3*tmp_33*tmp_34 - tmp_33*tmp_54 - tmp_34*tmp_51) + tmp_42*(14*tmp_3*tmp_39*tmp_40 - tmp_39*tmp_54 - tmp_40*tmp_51) + tmp_48*(14*tmp_3*tmp_45*tmp_46 - tmp_45*tmp_54 - tmp_46*tmp_51);
      real_t tmp_58 = 2.0*tmp_53;
      real_t a_0_0 = tmp_24*(14*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_23) + tmp_30*(-tmp_23*tmp_29 + 14*(tmp_29*tmp_29)*tmp_3) + tmp_36*(-tmp_23*tmp_35 + 14*tmp_3*(tmp_35*tmp_35)) + tmp_42*(-tmp_23*tmp_41 + 14*tmp_3*(tmp_41*tmp_41)) + tmp_48*(-tmp_23*tmp_47 + 14*tmp_3*(tmp_47*tmp_47));
      real_t a_0_1 = tmp_52;
      real_t a_0_2 = tmp_55;
      real_t a_1_0 = tmp_52;
      real_t a_1_1 = tmp_24*(14*(tmp_13*tmp_13)*tmp_3 - tmp_13*tmp_56) + tmp_30*(14*(tmp_27*tmp_27)*tmp_3 - tmp_27*tmp_56) + tmp_36*(14*tmp_3*(tmp_33*tmp_33) - tmp_33*tmp_56) + tmp_42*(14*tmp_3*(tmp_39*tmp_39) - tmp_39*tmp_56) + tmp_48*(14*tmp_3*(tmp_45*tmp_45) - tmp_45*tmp_56);
      real_t a_1_2 = tmp_57;
      real_t a_2_0 = tmp_55;
      real_t a_2_1 = tmp_57;
      real_t a_2_2 = tmp_24*(14*(tmp_14*tmp_14)*tmp_3 - tmp_14*tmp_58) + tmp_30*(14*(tmp_28*tmp_28)*tmp_3 - tmp_28*tmp_58) + tmp_36*(14*tmp_3*(tmp_34*tmp_34) - tmp_34*tmp_58) + tmp_42*(14*tmp_3*(tmp_40*tmp_40) - tmp_40*tmp_58) + tmp_48*(14*tmp_3*(tmp_46*tmp_46) - tmp_46*tmp_58);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_0_1;
      real_t tmp_6 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_7 = p_affine_6_1 + 0.046910077030668018*tmp_6;
      real_t tmp_8 = tmp_4*(tmp_5 + tmp_7);
      real_t tmp_9 = -p_affine_0_0;
      real_t tmp_10 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_11 = p_affine_6_0 + 0.046910077030668018*tmp_10;
      real_t tmp_12 = tmp_4*(tmp_11 + tmp_9);
      real_t tmp_13 = tmp_0*tmp_8 + tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8 + tmp_12*tmp_3;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_17 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_18 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_19 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_20 = 1.0 / (tmp_16*tmp_17 - tmp_18*tmp_19);
      real_t tmp_21 = 1.0*tmp_20;
      real_t tmp_22 = tmp_16*tmp_21;
      real_t tmp_23 = tmp_19*tmp_21;
      real_t tmp_24 = 0.5*tmp_20;
      real_t tmp_25 = tmp_17*tmp_24;
      real_t tmp_26 = tmp_18*tmp_24;
      real_t tmp_27 = 1.0*p_affine_10_0*(-tmp_22 - tmp_23) + 1.0*p_affine_10_1*(-tmp_25 - tmp_26);
      real_t tmp_28 = 1.0*tmp_4;
      real_t tmp_29 = tmp_2*tmp_28;
      real_t tmp_30 = tmp_28*tmp_3;
      real_t tmp_31 = 0.5*tmp_4;
      real_t tmp_32 = tmp_1*tmp_31;
      real_t tmp_33 = tmp_0*tmp_31;
      real_t tmp_34 = p_affine_10_0*(-tmp_29 - tmp_30) + p_affine_10_1*(-tmp_32 - tmp_33);
      real_t tmp_35 = -p_affine_3_1;
      real_t tmp_36 = tmp_20*(tmp_35 + tmp_7);
      real_t tmp_37 = -p_affine_3_0;
      real_t tmp_38 = tmp_20*(tmp_11 + tmp_37);
      real_t tmp_39 = tmp_16*tmp_38 + tmp_18*tmp_36;
      real_t tmp_40 = tmp_17*tmp_36 + tmp_19*tmp_38;
      real_t tmp_41 = -tmp_39 - tmp_40 + 1;
      real_t tmp_42 = std::abs(std::pow((tmp_10*tmp_10) + (tmp_6*tmp_6), 1.0/2.0));
      real_t tmp_43 = 14/tmp_42;
      real_t tmp_44 = tmp_15*tmp_43;
      real_t tmp_45 = 0.11846344252809471*tmp_42;
      real_t tmp_46 = p_affine_6_1 + 0.23076534494715845*tmp_6;
      real_t tmp_47 = tmp_4*(tmp_46 + tmp_5);
      real_t tmp_48 = p_affine_6_0 + 0.23076534494715845*tmp_10;
      real_t tmp_49 = tmp_4*(tmp_48 + tmp_9);
      real_t tmp_50 = tmp_0*tmp_47 + tmp_2*tmp_49;
      real_t tmp_51 = tmp_1*tmp_47 + tmp_3*tmp_49;
      real_t tmp_52 = -tmp_50 - tmp_51 + 1;
      real_t tmp_53 = tmp_20*(tmp_35 + tmp_46);
      real_t tmp_54 = tmp_20*(tmp_37 + tmp_48);
      real_t tmp_55 = tmp_16*tmp_54 + tmp_18*tmp_53;
      real_t tmp_56 = tmp_17*tmp_53 + tmp_19*tmp_54;
      real_t tmp_57 = -tmp_55 - tmp_56 + 1;
      real_t tmp_58 = tmp_43*tmp_52;
      real_t tmp_59 = 0.2393143352496831*tmp_42;
      real_t tmp_60 = p_affine_6_1 + 0.5*tmp_6;
      real_t tmp_61 = tmp_4*(tmp_5 + tmp_60);
      real_t tmp_62 = p_affine_6_0 + 0.5*tmp_10;
      real_t tmp_63 = tmp_4*(tmp_62 + tmp_9);
      real_t tmp_64 = tmp_0*tmp_61 + tmp_2*tmp_63;
      real_t tmp_65 = tmp_1*tmp_61 + tmp_3*tmp_63;
      real_t tmp_66 = -tmp_64 - tmp_65 + 1;
      real_t tmp_67 = tmp_20*(tmp_35 + tmp_60);
      real_t tmp_68 = tmp_20*(tmp_37 + tmp_62);
      real_t tmp_69 = tmp_16*tmp_68 + tmp_18*tmp_67;
      real_t tmp_70 = tmp_17*tmp_67 + tmp_19*tmp_68;
      real_t tmp_71 = -tmp_69 - tmp_70 + 1;
      real_t tmp_72 = tmp_43*tmp_66;
      real_t tmp_73 = 0.2844444444444445*tmp_42;
      real_t tmp_74 = p_affine_6_1 + 0.7692346550528415*tmp_6;
      real_t tmp_75 = tmp_4*(tmp_5 + tmp_74);
      real_t tmp_76 = p_affine_6_0 + 0.7692346550528415*tmp_10;
      real_t tmp_77 = tmp_4*(tmp_76 + tmp_9);
      real_t tmp_78 = tmp_0*tmp_75 + tmp_2*tmp_77;
      real_t tmp_79 = tmp_1*tmp_75 + tmp_3*tmp_77;
      real_t tmp_80 = -tmp_78 - tmp_79 + 1;
      real_t tmp_81 = tmp_20*(tmp_35 + tmp_74);
      real_t tmp_82 = tmp_20*(tmp_37 + tmp_76);
      real_t tmp_83 = tmp_16*tmp_82 + tmp_18*tmp_81;
      real_t tmp_84 = tmp_17*tmp_81 + tmp_19*tmp_82;
      real_t tmp_85 = -tmp_83 - tmp_84 + 1;
      real_t tmp_86 = tmp_43*tmp_80;
      real_t tmp_87 = 0.2393143352496831*tmp_42;
      real_t tmp_88 = p_affine_6_1 + 0.95308992296933193*tmp_6;
      real_t tmp_89 = tmp_4*(tmp_5 + tmp_88);
      real_t tmp_90 = p_affine_6_0 + 0.95308992296933193*tmp_10;
      real_t tmp_91 = tmp_4*(tmp_9 + tmp_90);
      real_t tmp_92 = tmp_0*tmp_89 + tmp_2*tmp_91;
      real_t tmp_93 = tmp_1*tmp_89 + tmp_3*tmp_91;
      real_t tmp_94 = -tmp_92 - tmp_93 + 1;
      real_t tmp_95 = tmp_20*(tmp_35 + tmp_88);
      real_t tmp_96 = tmp_20*(tmp_37 + tmp_90);
      real_t tmp_97 = tmp_16*tmp_96 + tmp_18*tmp_95;
      real_t tmp_98 = tmp_17*tmp_95 + tmp_19*tmp_96;
      real_t tmp_99 = -tmp_97 - tmp_98 + 1;
      real_t tmp_100 = tmp_43*tmp_94;
      real_t tmp_101 = 0.11846344252809471*tmp_42;
      real_t tmp_102 = 1.0*p_affine_10_0*tmp_22 + 1.0*p_affine_10_1*tmp_26;
      real_t tmp_103 = 1.0*p_affine_10_0*tmp_23 + 1.0*p_affine_10_1*tmp_25;
      real_t tmp_104 = p_affine_10_0*tmp_29 + p_affine_10_1*tmp_33;
      real_t tmp_105 = tmp_13*tmp_43;
      real_t tmp_106 = tmp_43*tmp_50;
      real_t tmp_107 = tmp_43*tmp_64;
      real_t tmp_108 = tmp_43*tmp_78;
      real_t tmp_109 = tmp_43*tmp_92;
      real_t tmp_110 = p_affine_10_0*tmp_30 + p_affine_10_1*tmp_32;
      real_t tmp_111 = tmp_14*tmp_43;
      real_t tmp_112 = tmp_43*tmp_51;
      real_t tmp_113 = tmp_43*tmp_65;
      real_t tmp_114 = tmp_43*tmp_79;
      real_t tmp_115 = tmp_43*tmp_93;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_99 - tmp_27*tmp_94 + tmp_34*tmp_99) + tmp_45*(-tmp_15*tmp_27 + tmp_34*tmp_41 - tmp_41*tmp_44) + tmp_59*(-tmp_27*tmp_52 + tmp_34*tmp_57 - tmp_57*tmp_58) + tmp_73*(-tmp_27*tmp_66 + tmp_34*tmp_71 - tmp_71*tmp_72) + tmp_87*(-tmp_27*tmp_80 + tmp_34*tmp_85 - tmp_85*tmp_86);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_97 - tmp_102*tmp_94 + tmp_34*tmp_97) + tmp_45*(-tmp_102*tmp_15 + tmp_34*tmp_39 - tmp_39*tmp_44) + tmp_59*(-tmp_102*tmp_52 + tmp_34*tmp_55 - tmp_55*tmp_58) + tmp_73*(-tmp_102*tmp_66 + tmp_34*tmp_69 - tmp_69*tmp_72) + tmp_87*(-tmp_102*tmp_80 + tmp_34*tmp_83 - tmp_83*tmp_86);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_98 - tmp_103*tmp_94 + tmp_34*tmp_98) + tmp_45*(-tmp_103*tmp_15 + tmp_34*tmp_40 - tmp_40*tmp_44) + tmp_59*(-tmp_103*tmp_52 + tmp_34*tmp_56 - tmp_56*tmp_58) + tmp_73*(-tmp_103*tmp_66 + tmp_34*tmp_70 - tmp_70*tmp_72) + tmp_87*(-tmp_103*tmp_80 + tmp_34*tmp_84 - tmp_84*tmp_86);
      real_t a_1_0 = tmp_101*(tmp_104*tmp_99 - tmp_109*tmp_99 - tmp_27*tmp_92) + tmp_45*(tmp_104*tmp_41 - tmp_105*tmp_41 - tmp_13*tmp_27) + tmp_59*(tmp_104*tmp_57 - tmp_106*tmp_57 - tmp_27*tmp_50) + tmp_73*(tmp_104*tmp_71 - tmp_107*tmp_71 - tmp_27*tmp_64) + tmp_87*(tmp_104*tmp_85 - tmp_108*tmp_85 - tmp_27*tmp_78);
      real_t a_1_1 = tmp_101*(-tmp_102*tmp_92 + tmp_104*tmp_97 - tmp_109*tmp_97) + tmp_45*(-tmp_102*tmp_13 + tmp_104*tmp_39 - tmp_105*tmp_39) + tmp_59*(-tmp_102*tmp_50 + tmp_104*tmp_55 - tmp_106*tmp_55) + tmp_73*(-tmp_102*tmp_64 + tmp_104*tmp_69 - tmp_107*tmp_69) + tmp_87*(-tmp_102*tmp_78 + tmp_104*tmp_83 - tmp_108*tmp_83);
      real_t a_1_2 = tmp_101*(-tmp_103*tmp_92 + tmp_104*tmp_98 - tmp_109*tmp_98) + tmp_45*(-tmp_103*tmp_13 + tmp_104*tmp_40 - tmp_105*tmp_40) + tmp_59*(-tmp_103*tmp_50 + tmp_104*tmp_56 - tmp_106*tmp_56) + tmp_73*(-tmp_103*tmp_64 + tmp_104*tmp_70 - tmp_107*tmp_70) + tmp_87*(-tmp_103*tmp_78 + tmp_104*tmp_84 - tmp_108*tmp_84);
      real_t a_2_0 = tmp_101*(tmp_110*tmp_99 - tmp_115*tmp_99 - tmp_27*tmp_93) + tmp_45*(tmp_110*tmp_41 - tmp_111*tmp_41 - tmp_14*tmp_27) + tmp_59*(tmp_110*tmp_57 - tmp_112*tmp_57 - tmp_27*tmp_51) + tmp_73*(tmp_110*tmp_71 - tmp_113*tmp_71 - tmp_27*tmp_65) + tmp_87*(tmp_110*tmp_85 - tmp_114*tmp_85 - tmp_27*tmp_79);
      real_t a_2_1 = tmp_101*(-tmp_102*tmp_93 + tmp_110*tmp_97 - tmp_115*tmp_97) + tmp_45*(-tmp_102*tmp_14 + tmp_110*tmp_39 - tmp_111*tmp_39) + tmp_59*(-tmp_102*tmp_51 + tmp_110*tmp_55 - tmp_112*tmp_55) + tmp_73*(-tmp_102*tmp_65 + tmp_110*tmp_69 - tmp_113*tmp_69) + tmp_87*(-tmp_102*tmp_79 + tmp_110*tmp_83 - tmp_114*tmp_83);
      real_t a_2_2 = tmp_101*(-tmp_103*tmp_93 + tmp_110*tmp_98 - tmp_115*tmp_98) + tmp_45*(-tmp_103*tmp_14 + tmp_110*tmp_40 - tmp_111*tmp_40) + tmp_59*(-tmp_103*tmp_51 + tmp_110*tmp_56 - tmp_112*tmp_56) + tmp_73*(-tmp_103*tmp_65 + tmp_110*tmp_70 - tmp_113*tmp_70) + tmp_87*(-tmp_103*tmp_79 + tmp_110*tmp_84 - tmp_114*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_8 = 1.0 / (-tmp_4*tmp_7 + tmp_5*tmp_6);
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_8*(0.046910077030668018*tmp_1 + tmp_9);
      real_t tmp_11 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_12 = tmp_8*(0.046910077030668018*tmp_0 + tmp_11);
      real_t tmp_13 = tmp_10*tmp_4 + tmp_12*tmp_6;
      real_t tmp_14 = tmp_10*tmp_5 + tmp_12*tmp_7;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = 1.0*tmp_8;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_16*tmp_7;
      real_t tmp_19 = 0.5*tmp_8;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = tmp_19*tmp_4;
      real_t tmp_22 = p_affine_10_0*(-tmp_17 - tmp_18) + p_affine_10_1*(-tmp_20 - tmp_21);
      real_t tmp_23 = 2*tmp_22;
      real_t tmp_24 = 2*tmp_2;
      real_t tmp_25 = 0.11846344252809471*tmp_24;
      real_t tmp_26 = tmp_8*(0.23076534494715845*tmp_1 + tmp_9);
      real_t tmp_27 = tmp_8*(0.23076534494715845*tmp_0 + tmp_11);
      real_t tmp_28 = tmp_26*tmp_4 + tmp_27*tmp_6;
      real_t tmp_29 = tmp_26*tmp_5 + tmp_27*tmp_7;
      real_t tmp_30 = -tmp_28 - tmp_29 + 1;
      real_t tmp_31 = 0.2393143352496831*tmp_24;
      real_t tmp_32 = tmp_8*(0.5*tmp_1 + tmp_9);
      real_t tmp_33 = tmp_8*(0.5*tmp_0 + tmp_11);
      real_t tmp_34 = tmp_32*tmp_4 + tmp_33*tmp_6;
      real_t tmp_35 = tmp_32*tmp_5 + tmp_33*tmp_7;
      real_t tmp_36 = -tmp_34 - tmp_35 + 1;
      real_t tmp_37 = 0.2844444444444445*tmp_24;
      real_t tmp_38 = tmp_8*(0.7692346550528415*tmp_1 + tmp_9);
      real_t tmp_39 = tmp_8*(0.7692346550528415*tmp_0 + tmp_11);
      real_t tmp_40 = tmp_38*tmp_4 + tmp_39*tmp_6;
      real_t tmp_41 = tmp_38*tmp_5 + tmp_39*tmp_7;
      real_t tmp_42 = -tmp_40 - tmp_41 + 1;
      real_t tmp_43 = 0.2393143352496831*tmp_24;
      real_t tmp_44 = tmp_8*(0.95308992296933193*tmp_1 + tmp_9);
      real_t tmp_45 = tmp_8*(0.95308992296933193*tmp_0 + tmp_11);
      real_t tmp_46 = tmp_4*tmp_44 + tmp_45*tmp_6;
      real_t tmp_47 = tmp_44*tmp_5 + tmp_45*tmp_7;
      real_t tmp_48 = -tmp_46 - tmp_47 + 1;
      real_t tmp_49 = 0.11846344252809471*tmp_24;
      real_t tmp_50 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_21;
      real_t tmp_51 = tmp_25*(7*tmp_13*tmp_15*tmp_3 - tmp_13*tmp_22 - tmp_15*tmp_50) + tmp_31*(-tmp_22*tmp_28 + 7*tmp_28*tmp_3*tmp_30 - tmp_30*tmp_50) + tmp_37*(-tmp_22*tmp_34 + 7*tmp_3*tmp_34*tmp_36 - tmp_36*tmp_50) + tmp_43*(-tmp_22*tmp_40 + 7*tmp_3*tmp_40*tmp_42 - tmp_42*tmp_50) + tmp_49*(-tmp_22*tmp_46 + 7*tmp_3*tmp_46*tmp_48 - tmp_48*tmp_50);
      real_t tmp_52 = p_affine_10_0*tmp_18 + p_affine_10_1*tmp_20;
      real_t tmp_53 = tmp_25*(7*tmp_14*tmp_15*tmp_3 - tmp_14*tmp_22 - tmp_15*tmp_52) + tmp_31*(-tmp_22*tmp_29 + 7*tmp_29*tmp_3*tmp_30 - tmp_30*tmp_52) + tmp_37*(-tmp_22*tmp_35 + 7*tmp_3*tmp_35*tmp_36 - tmp_36*tmp_52) + tmp_43*(-tmp_22*tmp_41 + 7*tmp_3*tmp_41*tmp_42 - tmp_42*tmp_52) + tmp_49*(-tmp_22*tmp_47 + 7*tmp_3*tmp_47*tmp_48 - tmp_48*tmp_52);
      real_t tmp_54 = 2*tmp_50;
      real_t tmp_55 = tmp_25*(7*tmp_13*tmp_14*tmp_3 - tmp_13*tmp_52 - tmp_14*tmp_50) + tmp_31*(7*tmp_28*tmp_29*tmp_3 - tmp_28*tmp_52 - tmp_29*tmp_50) + tmp_37*(7*tmp_3*tmp_34*tmp_35 - tmp_34*tmp_52 - tmp_35*tmp_50) + tmp_43*(7*tmp_3*tmp_40*tmp_41 - tmp_40*tmp_52 - tmp_41*tmp_50) + tmp_49*(7*tmp_3*tmp_46*tmp_47 - tmp_46*tmp_52 - tmp_47*tmp_50);
      real_t tmp_56 = 2*tmp_52;
      real_t a_0_0 = tmp_25*(7*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_23) + tmp_31*(-tmp_23*tmp_30 + 7*tmp_3*(tmp_30*tmp_30)) + tmp_37*(-tmp_23*tmp_36 + 7*tmp_3*(tmp_36*tmp_36)) + tmp_43*(-tmp_23*tmp_42 + 7*tmp_3*(tmp_42*tmp_42)) + tmp_49*(-tmp_23*tmp_48 + 7*tmp_3*(tmp_48*tmp_48));
      real_t a_0_1 = tmp_51;
      real_t a_0_2 = tmp_53;
      real_t a_1_0 = tmp_51;
      real_t a_1_1 = tmp_25*(7*(tmp_13*tmp_13)*tmp_3 - tmp_13*tmp_54) + tmp_31*(7*(tmp_28*tmp_28)*tmp_3 - tmp_28*tmp_54) + tmp_37*(7*tmp_3*(tmp_34*tmp_34) - tmp_34*tmp_54) + tmp_43*(7*tmp_3*(tmp_40*tmp_40) - tmp_40*tmp_54) + tmp_49*(7*tmp_3*(tmp_46*tmp_46) - tmp_46*tmp_54);
      real_t a_1_2 = tmp_55;
      real_t a_2_0 = tmp_53;
      real_t a_2_1 = tmp_55;
      real_t a_2_2 = tmp_25*(7*(tmp_14*tmp_14)*tmp_3 - tmp_14*tmp_56) + tmp_31*(7*(tmp_29*tmp_29)*tmp_3 - tmp_29*tmp_56) + tmp_37*(7*tmp_3*(tmp_35*tmp_35) - tmp_35*tmp_56) + tmp_43*(7*tmp_3*(tmp_41*tmp_41) - tmp_41*tmp_56) + tmp_49*(7*tmp_3*(tmp_47*tmp_47) - tmp_47*tmp_56);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id9 = 0;
      Scalar_Variable_Coefficient_2D_g0( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id0 );
      Scalar_Variable_Coefficient_2D_g1( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id1 );
      Scalar_Variable_Coefficient_2D_g0( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id2 );
      Scalar_Variable_Coefficient_2D_g1( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id3 );
      Scalar_Variable_Coefficient_2D_g0( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id4 );
      Scalar_Variable_Coefficient_2D_g1( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id5 );
      Scalar_Variable_Coefficient_2D_g0( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id6 );
      Scalar_Variable_Coefficient_2D_g1( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id7 );
      Scalar_Variable_Coefficient_2D_g0( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id8 );
      Scalar_Variable_Coefficient_2D_g1( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id9 );
      real_t tmp_0 = Scalar_Variable_Coefficient_2D_g1_out0_id1*p_affine_10_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = 1.0 / (tmp_1*tmp_2 - tmp_3*tmp_4);
      real_t tmp_6 = 0.5*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = tmp_3*tmp_6;
      real_t tmp_9 = -tmp_7 - tmp_8;
      real_t tmp_10 = 2*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_12*tmp_12), 1.0/2.0));
      real_t tmp_14 = 1.0 / (tmp_13);
      real_t tmp_15 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_16 = tmp_5*(0.046910077030668018*tmp_12 + tmp_15);
      real_t tmp_17 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_18 = tmp_5*(0.046910077030668018*tmp_11 + tmp_17);
      real_t tmp_19 = tmp_16*tmp_3 + tmp_18*tmp_2;
      real_t tmp_20 = tmp_1*tmp_16 + tmp_18*tmp_4;
      real_t tmp_21 = 1.0*tmp_5;
      real_t tmp_22 = tmp_2*tmp_21;
      real_t tmp_23 = tmp_21*tmp_4;
      real_t tmp_24 = p_affine_10_0*(-tmp_22 - tmp_23) + p_affine_10_1*tmp_9;
      real_t tmp_25 = 2*Scalar_Variable_Coefficient_2D_g0_out0_id0;
      real_t tmp_26 = 0.11846344252809471*tmp_13;
      real_t tmp_27 = p_affine_10_0*tmp_10;
      real_t tmp_28 = tmp_5*(0.23076534494715845*tmp_12 + tmp_15);
      real_t tmp_29 = tmp_5*(0.23076534494715845*tmp_11 + tmp_17);
      real_t tmp_30 = tmp_2*tmp_29 + tmp_28*tmp_3;
      real_t tmp_31 = tmp_1*tmp_28 + tmp_29*tmp_4;
      real_t tmp_32 = 2*Scalar_Variable_Coefficient_2D_g0_out0_id2;
      real_t tmp_33 = 0.2393143352496831*tmp_13;
      real_t tmp_34 = tmp_5*(0.5*tmp_12 + tmp_15);
      real_t tmp_35 = tmp_5*(0.5*tmp_11 + tmp_17);
      real_t tmp_36 = tmp_2*tmp_35 + tmp_3*tmp_34;
      real_t tmp_37 = tmp_1*tmp_34 + tmp_35*tmp_4;
      real_t tmp_38 = 2*Scalar_Variable_Coefficient_2D_g0_out0_id4;
      real_t tmp_39 = 0.2844444444444445*tmp_13;
      real_t tmp_40 = tmp_5*(0.7692346550528415*tmp_12 + tmp_15);
      real_t tmp_41 = tmp_5*(0.7692346550528415*tmp_11 + tmp_17);
      real_t tmp_42 = tmp_2*tmp_41 + tmp_3*tmp_40;
      real_t tmp_43 = tmp_1*tmp_40 + tmp_4*tmp_41;
      real_t tmp_44 = 2*Scalar_Variable_Coefficient_2D_g0_out0_id6;
      real_t tmp_45 = 0.2393143352496831*tmp_13;
      real_t tmp_46 = tmp_5*(0.95308992296933193*tmp_12 + tmp_15);
      real_t tmp_47 = tmp_5*(0.95308992296933193*tmp_11 + tmp_17);
      real_t tmp_48 = tmp_2*tmp_47 + tmp_3*tmp_46;
      real_t tmp_49 = tmp_1*tmp_46 + tmp_4*tmp_47;
      real_t tmp_50 = 2*Scalar_Variable_Coefficient_2D_g0_out0_id8;
      real_t tmp_51 = 0.11846344252809471*tmp_13;
      real_t tmp_52 = tmp_21*tmp_3;
      real_t tmp_53 = p_affine_10_0*tmp_22 + p_affine_10_1*tmp_8;
      real_t tmp_54 = p_affine_10_0*tmp_52;
      real_t tmp_55 = tmp_1*tmp_21;
      real_t tmp_56 = p_affine_10_0*tmp_23 + p_affine_10_1*tmp_7;
      real_t tmp_57 = p_affine_10_0*tmp_55;
      real_t a_0_0 = tmp_26*(-tmp_0*tmp_10 + tmp_25*(7*tmp_14*(-tmp_19 - tmp_20 + 1) - tmp_24)) + tmp_33*(-Scalar_Variable_Coefficient_2D_g1_out0_id3*tmp_27 + tmp_32*(7*tmp_14*(-tmp_30 - tmp_31 + 1) - tmp_24)) + tmp_39*(-Scalar_Variable_Coefficient_2D_g1_out0_id5*tmp_27 + tmp_38*(7*tmp_14*(-tmp_36 - tmp_37 + 1) - tmp_24)) + tmp_45*(-Scalar_Variable_Coefficient_2D_g1_out0_id7*tmp_27 + tmp_44*(7*tmp_14*(-tmp_42 - tmp_43 + 1) - tmp_24)) + tmp_51*(-Scalar_Variable_Coefficient_2D_g1_out0_id9*tmp_27 + tmp_50*(7*tmp_14*(-tmp_48 - tmp_49 + 1) - tmp_24));
      real_t a_1_0 = tmp_26*(-tmp_0*tmp_52 + tmp_25*(7*tmp_14*tmp_19 - tmp_53)) + tmp_33*(-Scalar_Variable_Coefficient_2D_g1_out0_id3*tmp_54 + tmp_32*(7*tmp_14*tmp_30 - tmp_53)) + tmp_39*(-Scalar_Variable_Coefficient_2D_g1_out0_id5*tmp_54 + tmp_38*(7*tmp_14*tmp_36 - tmp_53)) + tmp_45*(-Scalar_Variable_Coefficient_2D_g1_out0_id7*tmp_54 + tmp_44*(7*tmp_14*tmp_42 - tmp_53)) + tmp_51*(-Scalar_Variable_Coefficient_2D_g1_out0_id9*tmp_54 + tmp_50*(7*tmp_14*tmp_48 - tmp_53));
      real_t a_2_0 = tmp_26*(-tmp_0*tmp_55 + tmp_25*(7*tmp_14*tmp_20 - tmp_56)) + tmp_33*(-Scalar_Variable_Coefficient_2D_g1_out0_id3*tmp_57 + tmp_32*(7*tmp_14*tmp_31 - tmp_56)) + tmp_39*(-Scalar_Variable_Coefficient_2D_g1_out0_id5*tmp_57 + tmp_38*(7*tmp_14*tmp_37 - tmp_56)) + tmp_45*(-Scalar_Variable_Coefficient_2D_g1_out0_id7*tmp_57 + tmp_44*(7*tmp_14*tmp_43 - tmp_56)) + tmp_51*(-Scalar_Variable_Coefficient_2D_g1_out0_id9*tmp_57 + tmp_50*(7*tmp_14*tmp_49 - tmp_56));
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id20 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id21 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id22 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id23 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id24 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id25 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id26 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id27 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id28 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id29 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id30 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id31 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id32 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id33 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id34 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id35 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id36 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id37 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id38 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id39 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id40 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id41 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id42 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id43 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id44 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id45 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id46 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id47 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id48 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id49 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id50 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id51 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id52 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id53 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id54 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id55 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id56 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id57 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id58 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id59 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id60 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id61 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id62 = 0;
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id0 );
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id1 );
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id2 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id3 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id4 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id5 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id6 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id7 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id8 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id9 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id10 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id11 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id12 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id13 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id14 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id15 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id16 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id17 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id18 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id19 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id20 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id21 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id22 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id23 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id24 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id25 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id26 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id27 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id28 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id29 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id30 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id31 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id32 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id33 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id34 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id35 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id36 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id37 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id38 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id39 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id40 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id41 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id42 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id43 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id44 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id45 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id46 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id47 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id48 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id49 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id50 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id51 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id52 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id53 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id54 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id55 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id56 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id57 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id58 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id59 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id60 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id61 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id62 );
      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_3 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_4 = -tmp_0*tmp_1 + tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_9 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = tmp_1*tmp_10;
      real_t tmp_12 = tmp_1*tmp_8;
      real_t tmp_13 = tmp_10*tmp_6;
      real_t tmp_14 = tmp_3*tmp_5;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 + tmp_11*tmp_9 - tmp_13*tmp_2 - tmp_14*tmp_9 + tmp_2*tmp_3*tmp_8);
      real_t tmp_16 = 0.5*tmp_15;
      real_t tmp_17 = tmp_16*tmp_4;
      real_t tmp_18 = tmp_0*tmp_6 - tmp_3*tmp_9;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_1*tmp_9 - tmp_2*tmp_6;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = 2*p_affine_13_0;
      real_t tmp_24 = tmp_22*tmp_23;
      real_t tmp_25 = tmp_0*tmp_5 - tmp_10*tmp_2;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = -tmp_0*tmp_8 + tmp_10*tmp_9;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = tmp_2*tmp_8 - tmp_5*tmp_9;
      real_t tmp_30 = tmp_16*tmp_29;
      real_t tmp_31 = -tmp_26 - tmp_28 - tmp_30;
      real_t tmp_32 = tmp_23*tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_35 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_36 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_37 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_38 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_39 = (std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)*std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)) + (std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)*std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)) + (std::abs(tmp_34*tmp_38 - tmp_35*tmp_37)*std::abs(tmp_34*tmp_38 - tmp_35*tmp_37));
      real_t tmp_40 = std::pow(tmp_39, -0.25);
      real_t tmp_41 = -tmp_37;
      real_t tmp_42 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_43 = tmp_15*(0.93718850182767688*tmp_38 + 0.031405749086161582*tmp_41 + tmp_42);
      real_t tmp_44 = -tmp_34;
      real_t tmp_45 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_46 = tmp_15*(0.93718850182767688*tmp_35 + 0.031405749086161582*tmp_44 + tmp_45);
      real_t tmp_47 = -tmp_12 + tmp_7;
      real_t tmp_48 = -tmp_36;
      real_t tmp_49 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_50 = tmp_15*(0.93718850182767688*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_51 = tmp_20*tmp_46 + tmp_29*tmp_43 + tmp_47*tmp_50;
      real_t tmp_52 = -tmp_13 + tmp_3*tmp_8;
      real_t tmp_53 = tmp_18*tmp_46 + tmp_27*tmp_43 + tmp_50*tmp_52;
      real_t tmp_54 = tmp_11 - tmp_14;
      real_t tmp_55 = tmp_25*tmp_43 + tmp_4*tmp_46 + tmp_50*tmp_54;
      real_t tmp_56 = 1.0*tmp_15;
      real_t tmp_57 = tmp_54*tmp_56;
      real_t tmp_58 = tmp_52*tmp_56;
      real_t tmp_59 = tmp_47*tmp_56;
      real_t tmp_60 = p_affine_13_0*(-tmp_57 - tmp_58 - tmp_59) + p_affine_13_1*tmp_22 + p_affine_13_2*tmp_31;
      real_t tmp_61 = 1.0*std::pow(tmp_39, 1.0/2.0);
      real_t tmp_62 = 0.0068572537431980923*tmp_61;
      real_t tmp_63 = tmp_15*(0.60796128279561268*tmp_38 + 0.19601935860219369*tmp_41 + tmp_42);
      real_t tmp_64 = tmp_15*(0.60796128279561268*tmp_35 + 0.19601935860219369*tmp_44 + tmp_45);
      real_t tmp_65 = tmp_15*(0.60796128279561268*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_66 = tmp_20*tmp_64 + tmp_29*tmp_63 + tmp_47*tmp_65;
      real_t tmp_67 = tmp_18*tmp_64 + tmp_27*tmp_63 + tmp_52*tmp_65;
      real_t tmp_68 = tmp_25*tmp_63 + tmp_4*tmp_64 + tmp_54*tmp_65;
      real_t tmp_69 = 0.037198804536718075*tmp_61;
      real_t tmp_70 = tmp_15*(0.039308471900058539*tmp_38 + 0.37605877282253791*tmp_41 + tmp_42);
      real_t tmp_71 = tmp_15*(0.039308471900058539*tmp_35 + 0.37605877282253791*tmp_44 + tmp_45);
      real_t tmp_72 = tmp_15*(0.039308471900058539*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_73 = tmp_20*tmp_71 + tmp_29*tmp_70 + tmp_47*tmp_72;
      real_t tmp_74 = tmp_18*tmp_71 + tmp_27*tmp_70 + tmp_52*tmp_72;
      real_t tmp_75 = tmp_25*tmp_70 + tmp_4*tmp_71 + tmp_54*tmp_72;
      real_t tmp_76 = 0.020848748529055869*tmp_61;
      real_t tmp_77 = tmp_15*(0.1711304259088916*tmp_38 + 0.78764240869137092*tmp_41 + tmp_42);
      real_t tmp_78 = tmp_15*(0.1711304259088916*tmp_35 + 0.78764240869137092*tmp_44 + tmp_45);
      real_t tmp_79 = tmp_15*(0.1711304259088916*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_80 = tmp_20*tmp_78 + tmp_29*tmp_77 + tmp_47*tmp_79;
      real_t tmp_81 = tmp_18*tmp_78 + tmp_27*tmp_77 + tmp_52*tmp_79;
      real_t tmp_82 = tmp_25*tmp_77 + tmp_4*tmp_78 + tmp_54*tmp_79;
      real_t tmp_83 = 0.019202922745021479*tmp_61;
      real_t tmp_84 = tmp_15*(0.37605877282253791*tmp_38 + 0.58463275527740355*tmp_41 + tmp_42);
      real_t tmp_85 = tmp_15*(0.37605877282253791*tmp_35 + 0.58463275527740355*tmp_44 + tmp_45);
      real_t tmp_86 = tmp_15*(0.37605877282253791*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_87 = tmp_20*tmp_85 + tmp_29*tmp_84 + tmp_47*tmp_86;
      real_t tmp_88 = tmp_18*tmp_85 + tmp_27*tmp_84 + tmp_52*tmp_86;
      real_t tmp_89 = tmp_25*tmp_84 + tmp_4*tmp_85 + tmp_54*tmp_86;
      real_t tmp_90 = 0.020848748529055869*tmp_61;
      real_t tmp_91 = tmp_15*(0.78764240869137092*tmp_38 + 0.041227165399737475*tmp_41 + tmp_42);
      real_t tmp_92 = tmp_15*(0.78764240869137092*tmp_35 + 0.041227165399737475*tmp_44 + tmp_45);
      real_t tmp_93 = tmp_15*(0.78764240869137092*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_94 = tmp_20*tmp_92 + tmp_29*tmp_91 + tmp_47*tmp_93;
      real_t tmp_95 = tmp_18*tmp_92 + tmp_27*tmp_91 + tmp_52*tmp_93;
      real_t tmp_96 = tmp_25*tmp_91 + tmp_4*tmp_92 + tmp_54*tmp_93;
      real_t tmp_97 = 0.019202922745021479*tmp_61;
      real_t tmp_98 = tmp_15*(0.58463275527740355*tmp_38 + 0.039308471900058539*tmp_41 + tmp_42);
      real_t tmp_99 = tmp_15*(0.58463275527740355*tmp_35 + 0.039308471900058539*tmp_44 + tmp_45);
      real_t tmp_100 = tmp_15*(0.58463275527740355*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_101 = tmp_100*tmp_47 + tmp_20*tmp_99 + tmp_29*tmp_98;
      real_t tmp_102 = tmp_100*tmp_52 + tmp_18*tmp_99 + tmp_27*tmp_98;
      real_t tmp_103 = tmp_100*tmp_54 + tmp_25*tmp_98 + tmp_4*tmp_99;
      real_t tmp_104 = 0.020848748529055869*tmp_61;
      real_t tmp_105 = tmp_15*(0.041227165399737475*tmp_38 + 0.78764240869137092*tmp_41 + tmp_42);
      real_t tmp_106 = tmp_15*(0.041227165399737475*tmp_35 + 0.78764240869137092*tmp_44 + tmp_45);
      real_t tmp_107 = tmp_15*(0.041227165399737475*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_108 = tmp_105*tmp_29 + tmp_106*tmp_20 + tmp_107*tmp_47;
      real_t tmp_109 = tmp_105*tmp_27 + tmp_106*tmp_18 + tmp_107*tmp_52;
      real_t tmp_110 = tmp_105*tmp_25 + tmp_106*tmp_4 + tmp_107*tmp_54;
      real_t tmp_111 = 0.019202922745021479*tmp_61;
      real_t tmp_112 = tmp_15*(0.039308471900058539*tmp_38 + 0.58463275527740355*tmp_41 + tmp_42);
      real_t tmp_113 = tmp_15*(0.039308471900058539*tmp_35 + 0.58463275527740355*tmp_44 + tmp_45);
      real_t tmp_114 = tmp_15*(0.039308471900058539*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_115 = tmp_112*tmp_29 + tmp_113*tmp_20 + tmp_114*tmp_47;
      real_t tmp_116 = tmp_112*tmp_27 + tmp_113*tmp_18 + tmp_114*tmp_52;
      real_t tmp_117 = tmp_112*tmp_25 + tmp_113*tmp_4 + tmp_114*tmp_54;
      real_t tmp_118 = 0.020848748529055869*tmp_61;
      real_t tmp_119 = tmp_15*(0.78764240869137092*tmp_38 + 0.1711304259088916*tmp_41 + tmp_42);
      real_t tmp_120 = tmp_15*(0.78764240869137092*tmp_35 + 0.1711304259088916*tmp_44 + tmp_45);
      real_t tmp_121 = tmp_15*(0.78764240869137092*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_122 = tmp_119*tmp_29 + tmp_120*tmp_20 + tmp_121*tmp_47;
      real_t tmp_123 = tmp_119*tmp_27 + tmp_120*tmp_18 + tmp_121*tmp_52;
      real_t tmp_124 = tmp_119*tmp_25 + tmp_120*tmp_4 + tmp_121*tmp_54;
      real_t tmp_125 = 0.019202922745021479*tmp_61;
      real_t tmp_126 = tmp_15*(0.58463275527740355*tmp_38 + 0.37605877282253791*tmp_41 + tmp_42);
      real_t tmp_127 = tmp_15*(0.58463275527740355*tmp_35 + 0.37605877282253791*tmp_44 + tmp_45);
      real_t tmp_128 = tmp_15*(0.58463275527740355*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_129 = tmp_126*tmp_29 + tmp_127*tmp_20 + tmp_128*tmp_47;
      real_t tmp_130 = tmp_126*tmp_27 + tmp_127*tmp_18 + tmp_128*tmp_52;
      real_t tmp_131 = tmp_126*tmp_25 + tmp_127*tmp_4 + tmp_128*tmp_54;
      real_t tmp_132 = 0.020848748529055869*tmp_61;
      real_t tmp_133 = tmp_15*(0.1711304259088916*tmp_38 + 0.041227165399737475*tmp_41 + tmp_42);
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_35 + 0.041227165399737475*tmp_44 + tmp_45);
      real_t tmp_135 = tmp_15*(0.1711304259088916*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_136 = tmp_133*tmp_29 + tmp_134*tmp_20 + tmp_135*tmp_47;
      real_t tmp_137 = tmp_133*tmp_27 + tmp_134*tmp_18 + tmp_135*tmp_52;
      real_t tmp_138 = tmp_133*tmp_25 + tmp_134*tmp_4 + tmp_135*tmp_54;
      real_t tmp_139 = 0.019202922745021479*tmp_61;
      real_t tmp_140 = tmp_15*(0.19107600050469298*tmp_38 + 0.40446199974765351*tmp_41 + tmp_42);
      real_t tmp_141 = tmp_15*(0.19107600050469298*tmp_35 + 0.40446199974765351*tmp_44 + tmp_45);
      real_t tmp_142 = tmp_15*(0.19107600050469298*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_143 = tmp_140*tmp_29 + tmp_141*tmp_20 + tmp_142*tmp_47;
      real_t tmp_144 = tmp_140*tmp_27 + tmp_141*tmp_18 + tmp_142*tmp_52;
      real_t tmp_145 = tmp_140*tmp_25 + tmp_141*tmp_4 + tmp_142*tmp_54;
      real_t tmp_146 = 0.042507265838595799*tmp_61;
      real_t tmp_147 = tmp_15*(0.37605877282253791*tmp_38 + 0.039308471900058539*tmp_41 + tmp_42);
      real_t tmp_148 = tmp_15*(0.37605877282253791*tmp_35 + 0.039308471900058539*tmp_44 + tmp_45);
      real_t tmp_149 = tmp_15*(0.37605877282253791*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_150 = tmp_147*tmp_29 + tmp_148*tmp_20 + tmp_149*tmp_47;
      real_t tmp_151 = tmp_147*tmp_27 + tmp_148*tmp_18 + tmp_149*tmp_52;
      real_t tmp_152 = tmp_147*tmp_25 + tmp_148*tmp_4 + tmp_149*tmp_54;
      real_t tmp_153 = 0.020848748529055869*tmp_61;
      real_t tmp_154 = tmp_15*(0.031405749086161582*tmp_38 + 0.93718850182767688*tmp_41 + tmp_42);
      real_t tmp_155 = tmp_15*(0.031405749086161582*tmp_35 + 0.93718850182767688*tmp_44 + tmp_45);
      real_t tmp_156 = tmp_15*(0.031405749086161582*tmp_33 + 0.93718850182767688*tmp_48 + tmp_49);
      real_t tmp_157 = tmp_154*tmp_29 + tmp_155*tmp_20 + tmp_156*tmp_47;
      real_t tmp_158 = tmp_154*tmp_27 + tmp_155*tmp_18 + tmp_156*tmp_52;
      real_t tmp_159 = tmp_154*tmp_25 + tmp_155*tmp_4 + tmp_156*tmp_54;
      real_t tmp_160 = 0.0068572537431980923*tmp_61;
      real_t tmp_161 = tmp_15*(0.19601935860219369*tmp_38 + 0.60796128279561268*tmp_41 + tmp_42);
      real_t tmp_162 = tmp_15*(0.19601935860219369*tmp_35 + 0.60796128279561268*tmp_44 + tmp_45);
      real_t tmp_163 = tmp_15*(0.19601935860219369*tmp_33 + 0.60796128279561268*tmp_48 + tmp_49);
      real_t tmp_164 = tmp_161*tmp_29 + tmp_162*tmp_20 + tmp_163*tmp_47;
      real_t tmp_165 = tmp_161*tmp_27 + tmp_162*tmp_18 + tmp_163*tmp_52;
      real_t tmp_166 = tmp_161*tmp_25 + tmp_162*tmp_4 + tmp_163*tmp_54;
      real_t tmp_167 = 0.037198804536718075*tmp_61;
      real_t tmp_168 = tmp_15*(0.40446199974765351*tmp_38 + 0.19107600050469298*tmp_41 + tmp_42);
      real_t tmp_169 = tmp_15*(0.40446199974765351*tmp_35 + 0.19107600050469298*tmp_44 + tmp_45);
      real_t tmp_170 = tmp_15*(0.40446199974765351*tmp_33 + 0.19107600050469298*tmp_48 + tmp_49);
      real_t tmp_171 = tmp_168*tmp_29 + tmp_169*tmp_20 + tmp_170*tmp_47;
      real_t tmp_172 = tmp_168*tmp_27 + tmp_169*tmp_18 + tmp_170*tmp_52;
      real_t tmp_173 = tmp_168*tmp_25 + tmp_169*tmp_4 + tmp_170*tmp_54;
      real_t tmp_174 = 0.042507265838595799*tmp_61;
      real_t tmp_175 = tmp_15*(0.031405749086161582*tmp_38 + 0.031405749086161582*tmp_41 + tmp_42);
      real_t tmp_176 = tmp_15*(0.031405749086161582*tmp_35 + 0.031405749086161582*tmp_44 + tmp_45);
      real_t tmp_177 = tmp_15*(0.031405749086161582*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_178 = tmp_175*tmp_29 + tmp_176*tmp_20 + tmp_177*tmp_47;
      real_t tmp_179 = tmp_175*tmp_27 + tmp_176*tmp_18 + tmp_177*tmp_52;
      real_t tmp_180 = tmp_175*tmp_25 + tmp_176*tmp_4 + tmp_177*tmp_54;
      real_t tmp_181 = 0.0068572537431980923*tmp_61;
      real_t tmp_182 = tmp_15*(0.19601935860219369*tmp_38 + 0.19601935860219369*tmp_41 + tmp_42);
      real_t tmp_183 = tmp_15*(0.19601935860219369*tmp_35 + 0.19601935860219369*tmp_44 + tmp_45);
      real_t tmp_184 = tmp_15*(0.19601935860219369*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_185 = tmp_182*tmp_29 + tmp_183*tmp_20 + tmp_184*tmp_47;
      real_t tmp_186 = tmp_18*tmp_183 + tmp_182*tmp_27 + tmp_184*tmp_52;
      real_t tmp_187 = tmp_182*tmp_25 + tmp_183*tmp_4 + tmp_184*tmp_54;
      real_t tmp_188 = 0.037198804536718075*tmp_61;
      real_t tmp_189 = tmp_15*(0.40446199974765351*tmp_38 + 0.40446199974765351*tmp_41 + tmp_42);
      real_t tmp_190 = tmp_15*(0.40446199974765351*tmp_35 + 0.40446199974765351*tmp_44 + tmp_45);
      real_t tmp_191 = tmp_15*(0.40446199974765351*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_192 = tmp_189*tmp_29 + tmp_190*tmp_20 + tmp_191*tmp_47;
      real_t tmp_193 = tmp_18*tmp_190 + tmp_189*tmp_27 + tmp_191*tmp_52;
      real_t tmp_194 = tmp_189*tmp_25 + tmp_190*tmp_4 + tmp_191*tmp_54;
      real_t tmp_195 = 0.042507265838595799*tmp_61;
      real_t tmp_196 = tmp_15*(0.041227165399737475*tmp_38 + 0.1711304259088916*tmp_41 + tmp_42);
      real_t tmp_197 = tmp_15*(0.041227165399737475*tmp_35 + 0.1711304259088916*tmp_44 + tmp_45);
      real_t tmp_198 = tmp_15*(0.041227165399737475*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_199 = tmp_196*tmp_29 + tmp_197*tmp_20 + tmp_198*tmp_47;
      real_t tmp_200 = tmp_18*tmp_197 + tmp_196*tmp_27 + tmp_198*tmp_52;
      real_t tmp_201 = tmp_196*tmp_25 + tmp_197*tmp_4 + tmp_198*tmp_54;
      real_t tmp_202 = 0.019202922745021479*tmp_61;
      real_t tmp_203 = p_affine_13_0*tmp_56;
      real_t tmp_204 = tmp_20*tmp_203;
      real_t tmp_205 = tmp_203*tmp_29;
      real_t tmp_206 = p_affine_13_0*tmp_59 + p_affine_13_1*tmp_21 + p_affine_13_2*tmp_30;
      real_t tmp_207 = tmp_18*tmp_203;
      real_t tmp_208 = tmp_203*tmp_27;
      real_t tmp_209 = p_affine_13_0*tmp_58 + p_affine_13_1*tmp_19 + p_affine_13_2*tmp_28;
      real_t tmp_210 = tmp_203*tmp_4;
      real_t tmp_211 = tmp_203*tmp_25;
      real_t tmp_212 = p_affine_13_0*tmp_57 + p_affine_13_1*tmp_17 + p_affine_13_2*tmp_26;
      real_t a_0_0 = tmp_104*(2*Scalar_Variable_Coefficient_3D_g0_out0_id18*(7.0*tmp_40*(-tmp_101 - tmp_102 - tmp_103 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id20*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_32) + tmp_111*(2*Scalar_Variable_Coefficient_3D_g0_out0_id21*(7.0*tmp_40*(-tmp_108 - tmp_109 - tmp_110 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id23*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_32) + tmp_118*(2*Scalar_Variable_Coefficient_3D_g0_out0_id24*(7.0*tmp_40*(-tmp_115 - tmp_116 - tmp_117 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id26*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_32) + tmp_125*(2*Scalar_Variable_Coefficient_3D_g0_out0_id27*(7.0*tmp_40*(-tmp_122 - tmp_123 - tmp_124 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id29*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_32) + tmp_132*(2*Scalar_Variable_Coefficient_3D_g0_out0_id30*(7.0*tmp_40*(-tmp_129 - tmp_130 - tmp_131 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id32*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_32) + tmp_139*(2*Scalar_Variable_Coefficient_3D_g0_out0_id33*(7.0*tmp_40*(-tmp_136 - tmp_137 - tmp_138 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id35*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_32) + tmp_146*(2*Scalar_Variable_Coefficient_3D_g0_out0_id36*(7.0*tmp_40*(-tmp_143 - tmp_144 - tmp_145 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id38*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_32) + tmp_153*(2*Scalar_Variable_Coefficient_3D_g0_out0_id39*(7.0*tmp_40*(-tmp_150 - tmp_151 - tmp_152 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id41*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_32) + tmp_160*(2*Scalar_Variable_Coefficient_3D_g0_out0_id42*(7.0*tmp_40*(-tmp_157 - tmp_158 - tmp_159 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id44*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_32) + tmp_167*(2*Scalar_Variable_Coefficient_3D_g0_out0_id45*(7.0*tmp_40*(-tmp_164 - tmp_165 - tmp_166 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id47*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_32) + tmp_174*(2*Scalar_Variable_Coefficient_3D_g0_out0_id48*(7.0*tmp_40*(-tmp_171 - tmp_172 - tmp_173 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id50*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_32) + tmp_181*(2*Scalar_Variable_Coefficient_3D_g0_out0_id51*(7.0*tmp_40*(-tmp_178 - tmp_179 - tmp_180 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id53*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_32) + tmp_188*(2*Scalar_Variable_Coefficient_3D_g0_out0_id54*(7.0*tmp_40*(-tmp_185 - tmp_186 - tmp_187 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id56*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_32) + tmp_195*(2*Scalar_Variable_Coefficient_3D_g0_out0_id57*(7.0*tmp_40*(-tmp_192 - tmp_193 - tmp_194 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id59*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_32) + tmp_202*(2*Scalar_Variable_Coefficient_3D_g0_out0_id60*(7.0*tmp_40*(-tmp_199 - tmp_200 - tmp_201 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id62*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_32) + tmp_62*(2*Scalar_Variable_Coefficient_3D_g0_out0_id0*(7.0*tmp_40*(-tmp_51 - tmp_53 - tmp_55 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id2*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_32) + tmp_69*(2*Scalar_Variable_Coefficient_3D_g0_out0_id3*(7.0*tmp_40*(-tmp_66 - tmp_67 - tmp_68 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id5*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_32) + tmp_76*(2*Scalar_Variable_Coefficient_3D_g0_out0_id6*(7.0*tmp_40*(-tmp_73 - tmp_74 - tmp_75 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id8*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_32) + tmp_83*(2*Scalar_Variable_Coefficient_3D_g0_out0_id9*(7.0*tmp_40*(-tmp_80 - tmp_81 - tmp_82 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id11*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_32) + tmp_90*(2*Scalar_Variable_Coefficient_3D_g0_out0_id12*(7.0*tmp_40*(-tmp_87 - tmp_88 - tmp_89 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id14*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_32) + tmp_97*(2*Scalar_Variable_Coefficient_3D_g0_out0_id15*(7.0*tmp_40*(-tmp_94 - tmp_95 - tmp_96 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g1_out0_id17*tmp_24 - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_32);
      real_t a_1_0 = tmp_104*(2*Scalar_Variable_Coefficient_3D_g0_out0_id18*(7.0*tmp_101*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id20*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_205) + tmp_111*(2*Scalar_Variable_Coefficient_3D_g0_out0_id21*(7.0*tmp_108*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id23*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_205) + tmp_118*(2*Scalar_Variable_Coefficient_3D_g0_out0_id24*(7.0*tmp_115*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id26*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_205) + tmp_125*(2*Scalar_Variable_Coefficient_3D_g0_out0_id27*(7.0*tmp_122*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id29*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_205) + tmp_132*(2*Scalar_Variable_Coefficient_3D_g0_out0_id30*(7.0*tmp_129*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id32*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_205) + tmp_139*(2*Scalar_Variable_Coefficient_3D_g0_out0_id33*(7.0*tmp_136*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id35*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_205) + tmp_146*(2*Scalar_Variable_Coefficient_3D_g0_out0_id36*(7.0*tmp_143*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id38*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_205) + tmp_153*(2*Scalar_Variable_Coefficient_3D_g0_out0_id39*(7.0*tmp_150*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id41*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_205) + tmp_160*(2*Scalar_Variable_Coefficient_3D_g0_out0_id42*(7.0*tmp_157*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id44*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_205) + tmp_167*(2*Scalar_Variable_Coefficient_3D_g0_out0_id45*(7.0*tmp_164*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id47*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_205) + tmp_174*(2*Scalar_Variable_Coefficient_3D_g0_out0_id48*(7.0*tmp_171*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id50*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_205) + tmp_181*(2*Scalar_Variable_Coefficient_3D_g0_out0_id51*(7.0*tmp_178*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id53*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_205) + tmp_188*(2*Scalar_Variable_Coefficient_3D_g0_out0_id54*(7.0*tmp_185*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id56*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_205) + tmp_195*(2*Scalar_Variable_Coefficient_3D_g0_out0_id57*(7.0*tmp_192*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id59*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_205) + tmp_202*(2*Scalar_Variable_Coefficient_3D_g0_out0_id60*(7.0*tmp_199*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g1_out0_id62*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_205) + tmp_62*(2*Scalar_Variable_Coefficient_3D_g0_out0_id0*(-tmp_206 + 7.0*tmp_40*tmp_51) - Scalar_Variable_Coefficient_3D_g1_out0_id2*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_205) + tmp_69*(2*Scalar_Variable_Coefficient_3D_g0_out0_id3*(-tmp_206 + 7.0*tmp_40*tmp_66) - Scalar_Variable_Coefficient_3D_g1_out0_id5*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_205) + tmp_76*(2*Scalar_Variable_Coefficient_3D_g0_out0_id6*(-tmp_206 + 7.0*tmp_40*tmp_73) - Scalar_Variable_Coefficient_3D_g1_out0_id8*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_205) + tmp_83*(2*Scalar_Variable_Coefficient_3D_g0_out0_id9*(-tmp_206 + 7.0*tmp_40*tmp_80) - Scalar_Variable_Coefficient_3D_g1_out0_id11*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_205) + tmp_90*(2*Scalar_Variable_Coefficient_3D_g0_out0_id12*(-tmp_206 + 7.0*tmp_40*tmp_87) - Scalar_Variable_Coefficient_3D_g1_out0_id14*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_205) + tmp_97*(2*Scalar_Variable_Coefficient_3D_g0_out0_id15*(-tmp_206 + 7.0*tmp_40*tmp_94) - Scalar_Variable_Coefficient_3D_g1_out0_id17*tmp_204 - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_205);
      real_t a_2_0 = tmp_104*(2*Scalar_Variable_Coefficient_3D_g0_out0_id18*(7.0*tmp_102*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id20*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_208) + tmp_111*(2*Scalar_Variable_Coefficient_3D_g0_out0_id21*(7.0*tmp_109*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id23*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_208) + tmp_118*(2*Scalar_Variable_Coefficient_3D_g0_out0_id24*(7.0*tmp_116*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id26*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_208) + tmp_125*(2*Scalar_Variable_Coefficient_3D_g0_out0_id27*(7.0*tmp_123*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id29*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_208) + tmp_132*(2*Scalar_Variable_Coefficient_3D_g0_out0_id30*(7.0*tmp_130*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id32*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_208) + tmp_139*(2*Scalar_Variable_Coefficient_3D_g0_out0_id33*(7.0*tmp_137*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id35*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_208) + tmp_146*(2*Scalar_Variable_Coefficient_3D_g0_out0_id36*(7.0*tmp_144*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id38*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_208) + tmp_153*(2*Scalar_Variable_Coefficient_3D_g0_out0_id39*(7.0*tmp_151*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id41*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_208) + tmp_160*(2*Scalar_Variable_Coefficient_3D_g0_out0_id42*(7.0*tmp_158*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id44*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_208) + tmp_167*(2*Scalar_Variable_Coefficient_3D_g0_out0_id45*(7.0*tmp_165*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id47*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_208) + tmp_174*(2*Scalar_Variable_Coefficient_3D_g0_out0_id48*(7.0*tmp_172*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id50*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_208) + tmp_181*(2*Scalar_Variable_Coefficient_3D_g0_out0_id51*(7.0*tmp_179*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id53*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_208) + tmp_188*(2*Scalar_Variable_Coefficient_3D_g0_out0_id54*(7.0*tmp_186*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id56*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_208) + tmp_195*(2*Scalar_Variable_Coefficient_3D_g0_out0_id57*(7.0*tmp_193*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id59*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_208) + tmp_202*(2*Scalar_Variable_Coefficient_3D_g0_out0_id60*(7.0*tmp_200*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g1_out0_id62*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_208) + tmp_62*(2*Scalar_Variable_Coefficient_3D_g0_out0_id0*(-tmp_209 + 7.0*tmp_40*tmp_53) - Scalar_Variable_Coefficient_3D_g1_out0_id2*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_208) + tmp_69*(2*Scalar_Variable_Coefficient_3D_g0_out0_id3*(-tmp_209 + 7.0*tmp_40*tmp_67) - Scalar_Variable_Coefficient_3D_g1_out0_id5*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_208) + tmp_76*(2*Scalar_Variable_Coefficient_3D_g0_out0_id6*(-tmp_209 + 7.0*tmp_40*tmp_74) - Scalar_Variable_Coefficient_3D_g1_out0_id8*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_208) + tmp_83*(2*Scalar_Variable_Coefficient_3D_g0_out0_id9*(-tmp_209 + 7.0*tmp_40*tmp_81) - Scalar_Variable_Coefficient_3D_g1_out0_id11*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_208) + tmp_90*(2*Scalar_Variable_Coefficient_3D_g0_out0_id12*(-tmp_209 + 7.0*tmp_40*tmp_88) - Scalar_Variable_Coefficient_3D_g1_out0_id14*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_208) + tmp_97*(2*Scalar_Variable_Coefficient_3D_g0_out0_id15*(-tmp_209 + 7.0*tmp_40*tmp_95) - Scalar_Variable_Coefficient_3D_g1_out0_id17*tmp_207 - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_208);
      real_t a_3_0 = tmp_104*(2*Scalar_Variable_Coefficient_3D_g0_out0_id18*(7.0*tmp_103*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id20*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_211) + tmp_111*(2*Scalar_Variable_Coefficient_3D_g0_out0_id21*(7.0*tmp_110*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id23*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_211) + tmp_118*(2*Scalar_Variable_Coefficient_3D_g0_out0_id24*(7.0*tmp_117*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id26*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_211) + tmp_125*(2*Scalar_Variable_Coefficient_3D_g0_out0_id27*(7.0*tmp_124*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id29*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_211) + tmp_132*(2*Scalar_Variable_Coefficient_3D_g0_out0_id30*(7.0*tmp_131*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id32*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_211) + tmp_139*(2*Scalar_Variable_Coefficient_3D_g0_out0_id33*(7.0*tmp_138*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id35*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_211) + tmp_146*(2*Scalar_Variable_Coefficient_3D_g0_out0_id36*(7.0*tmp_145*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id38*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_211) + tmp_153*(2*Scalar_Variable_Coefficient_3D_g0_out0_id39*(7.0*tmp_152*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id41*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_211) + tmp_160*(2*Scalar_Variable_Coefficient_3D_g0_out0_id42*(7.0*tmp_159*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id44*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_211) + tmp_167*(2*Scalar_Variable_Coefficient_3D_g0_out0_id45*(7.0*tmp_166*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id47*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_211) + tmp_174*(2*Scalar_Variable_Coefficient_3D_g0_out0_id48*(7.0*tmp_173*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id50*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_211) + tmp_181*(2*Scalar_Variable_Coefficient_3D_g0_out0_id51*(7.0*tmp_180*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id53*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_211) + tmp_188*(2*Scalar_Variable_Coefficient_3D_g0_out0_id54*(7.0*tmp_187*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id56*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_211) + tmp_195*(2*Scalar_Variable_Coefficient_3D_g0_out0_id57*(7.0*tmp_194*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id59*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_211) + tmp_202*(2*Scalar_Variable_Coefficient_3D_g0_out0_id60*(7.0*tmp_201*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g1_out0_id62*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_211) + tmp_62*(2*Scalar_Variable_Coefficient_3D_g0_out0_id0*(-tmp_212 + 7.0*tmp_40*tmp_55) - Scalar_Variable_Coefficient_3D_g1_out0_id2*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_211) + tmp_69*(2*Scalar_Variable_Coefficient_3D_g0_out0_id3*(-tmp_212 + 7.0*tmp_40*tmp_68) - Scalar_Variable_Coefficient_3D_g1_out0_id5*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_211) + tmp_76*(2*Scalar_Variable_Coefficient_3D_g0_out0_id6*(-tmp_212 + 7.0*tmp_40*tmp_75) - Scalar_Variable_Coefficient_3D_g1_out0_id8*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_211) + tmp_83*(2*Scalar_Variable_Coefficient_3D_g0_out0_id9*(-tmp_212 + 7.0*tmp_40*tmp_82) - Scalar_Variable_Coefficient_3D_g1_out0_id11*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_211) + tmp_90*(2*Scalar_Variable_Coefficient_3D_g0_out0_id12*(-tmp_212 + 7.0*tmp_40*tmp_89) - Scalar_Variable_Coefficient_3D_g1_out0_id14*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_211) + tmp_97*(2*Scalar_Variable_Coefficient_3D_g0_out0_id15*(-tmp_212 + 7.0*tmp_40*tmp_96) - Scalar_Variable_Coefficient_3D_g1_out0_id17*tmp_210 - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_211);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 2.0*tmp_16;
      real_t tmp_18 = tmp_17*tmp_6;
      real_t tmp_19 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_20 = tmp_17*tmp_19;
      real_t tmp_21 = -tmp_13 + tmp_9;
      real_t tmp_22 = tmp_17*tmp_21;
      real_t tmp_23 = -tmp_18 - tmp_20 - tmp_22;
      real_t tmp_24 = 1.0*tmp_16;
      real_t tmp_25 = tmp_24*tmp_6;
      real_t tmp_26 = tmp_19*tmp_24;
      real_t tmp_27 = tmp_21*tmp_24;
      real_t tmp_28 = -tmp_25 - tmp_26 - tmp_27;
      real_t tmp_29 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_30 = tmp_24*tmp_29;
      real_t tmp_31 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_32 = tmp_24*tmp_31;
      real_t tmp_33 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_34 = tmp_24*tmp_33;
      real_t tmp_35 = -tmp_30 - tmp_32 - tmp_34;
      real_t tmp_36 = 0.5*tmp_16;
      real_t tmp_37 = -tmp_29*tmp_36 - tmp_31*tmp_36 - tmp_33*tmp_36;
      real_t tmp_38 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_39 = tmp_24*tmp_38;
      real_t tmp_40 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_41 = tmp_24*tmp_40;
      real_t tmp_42 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_43 = tmp_24*tmp_42;
      real_t tmp_44 = -tmp_39 - tmp_41 - tmp_43;
      real_t tmp_45 = -tmp_36*tmp_38 - tmp_36*tmp_40 - tmp_36*tmp_42;
      real_t tmp_46 = p_affine_0_0*p_affine_1_1;
      real_t tmp_47 = p_affine_0_0*p_affine_1_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_2;
      real_t tmp_49 = p_affine_0_1*p_affine_1_0;
      real_t tmp_50 = p_affine_0_1*p_affine_1_2;
      real_t tmp_51 = p_affine_2_2*p_affine_3_0;
      real_t tmp_52 = p_affine_0_2*p_affine_1_0;
      real_t tmp_53 = p_affine_0_2*p_affine_1_1;
      real_t tmp_54 = p_affine_2_0*p_affine_3_1;
      real_t tmp_55 = p_affine_2_2*p_affine_3_1;
      real_t tmp_56 = p_affine_2_0*p_affine_3_2;
      real_t tmp_57 = p_affine_2_1*p_affine_3_0;
      real_t tmp_58 = std::abs(p_affine_0_0*tmp_48 - p_affine_0_0*tmp_55 + p_affine_0_1*tmp_51 - p_affine_0_1*tmp_56 + p_affine_0_2*tmp_54 - p_affine_0_2*tmp_57 - p_affine_1_0*tmp_48 + p_affine_1_0*tmp_55 - p_affine_1_1*tmp_51 + p_affine_1_1*tmp_56 - p_affine_1_2*tmp_54 + p_affine_1_2*tmp_57 + p_affine_2_0*tmp_50 - p_affine_2_0*tmp_53 - p_affine_2_1*tmp_47 + p_affine_2_1*tmp_52 + p_affine_2_2*tmp_46 - p_affine_2_2*tmp_49 - p_affine_3_0*tmp_50 + p_affine_3_0*tmp_53 + p_affine_3_1*tmp_47 - p_affine_3_1*tmp_52 - p_affine_3_2*tmp_46 + p_affine_3_2*tmp_49);
      real_t tmp_59 = tmp_58*(tmp_23*tmp_28 + 2*tmp_35*tmp_37 + 2*tmp_44*tmp_45);
      real_t tmp_60 = tmp_17*tmp_37;
      real_t tmp_61 = tmp_17*tmp_45;
      real_t tmp_62 = tmp_58*(tmp_22*tmp_28 + tmp_33*tmp_60 + tmp_42*tmp_61);
      real_t tmp_63 = tmp_58*(tmp_20*tmp_28 + tmp_31*tmp_60 + tmp_40*tmp_61);
      real_t tmp_64 = tmp_58*(tmp_18*tmp_28 + tmp_29*tmp_60 + tmp_38*tmp_61);
      real_t tmp_65 = tmp_58*(tmp_23*tmp_27 + tmp_34*tmp_35 + tmp_43*tmp_44);
      real_t tmp_66 = 1.0 / (tmp_15*tmp_15);
      real_t tmp_67 = 1.0*tmp_66;
      real_t tmp_68 = 2.0*tmp_66;
      real_t tmp_69 = tmp_58*((tmp_21*tmp_21)*tmp_68 + (tmp_33*tmp_33)*tmp_67 + (tmp_42*tmp_42)*tmp_67);
      real_t tmp_70 = tmp_33*tmp_67;
      real_t tmp_71 = tmp_42*tmp_67;
      real_t tmp_72 = tmp_21*tmp_68;
      real_t tmp_73 = tmp_58*(tmp_19*tmp_72 + tmp_31*tmp_70 + tmp_40*tmp_71);
      real_t tmp_74 = 0.1666666666666668*tmp_73;
      real_t tmp_75 = tmp_58*(tmp_29*tmp_70 + tmp_38*tmp_71 + tmp_6*tmp_72);
      real_t tmp_76 = 0.1666666666666668*tmp_75;
      real_t tmp_77 = tmp_58*(tmp_23*tmp_26 + tmp_32*tmp_35 + tmp_41*tmp_44);
      real_t tmp_78 = tmp_58*((tmp_19*tmp_19)*tmp_68 + (tmp_31*tmp_31)*tmp_67 + (tmp_40*tmp_40)*tmp_67);
      real_t tmp_79 = tmp_58*(tmp_19*tmp_6*tmp_68 + tmp_29*tmp_31*tmp_67 + tmp_38*tmp_40*tmp_67);
      real_t tmp_80 = 0.1666666666666668*tmp_79;
      real_t tmp_81 = tmp_58*(tmp_23*tmp_25 + tmp_30*tmp_35 + tmp_39*tmp_44);
      real_t tmp_82 = tmp_58*((tmp_29*tmp_29)*tmp_67 + (tmp_38*tmp_38)*tmp_67 + (tmp_6*tmp_6)*tmp_68);
      real_t a_0_0 = 0.1666666666666668*tmp_59;
      real_t a_0_1 = 0.1666666666666668*tmp_62;
      real_t a_0_2 = 0.1666666666666668*tmp_63;
      real_t a_0_3 = 0.1666666666666668*tmp_64;
      real_t a_1_0 = 0.1666666666666668*tmp_65;
      real_t a_1_1 = 0.1666666666666668*tmp_69;
      real_t a_1_2 = tmp_74;
      real_t a_1_3 = tmp_76;
      real_t a_2_0 = 0.1666666666666668*tmp_77;
      real_t a_2_1 = tmp_74;
      real_t a_2_2 = 0.1666666666666668*tmp_78;
      real_t a_2_3 = tmp_80;
      real_t a_3_0 = 0.1666666666666668*tmp_81;
      real_t a_3_1 = tmp_76;
      real_t a_3_2 = tmp_80;
      real_t a_3_3 = 0.1666666666666668*tmp_82;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_14 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_14*tmp_9;
      real_t tmp_21 = tmp_17*tmp_8;
      real_t tmp_22 = tmp_10*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_11*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_21 + tmp_16*tmp_8*tmp_9 - tmp_18*tmp_20);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_13*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_11*tmp_13 - tmp_18*tmp_9;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_20;
      real_t tmp_37 = tmp_13*tmp_14 - tmp_22;
      real_t tmp_38 = -tmp_13*tmp_17 + tmp_16*tmp_9;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_15 - tmp_21;
      real_t tmp_41 = -tmp_14*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = -tmp_11*tmp_16 + tmp_19;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 1.0*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = 0.5*tmp_23;
      real_t tmp_50 = tmp_41*tmp_49;
      real_t tmp_51 = tmp_37*tmp_49;
      real_t tmp_52 = tmp_27*tmp_49;
      real_t tmp_53 = tmp_40*tmp_49;
      real_t tmp_54 = tmp_36*tmp_49;
      real_t tmp_55 = tmp_12*tmp_49;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_50 - tmp_51 - tmp_52) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2.0*tmp_56;
      real_t tmp_58 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = 1.0*tmp_56;
      real_t tmp_221 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_52 + p_affine_13_2*tmp_55;
      real_t tmp_222 = 1.0*tmp_221;
      real_t tmp_223 = tmp_107*(14.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_220 - tmp_106*tmp_222) + tmp_115*(14.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_220 - tmp_114*tmp_222) + tmp_123*(14.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_220 - tmp_122*tmp_222) + tmp_131*(14.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_220 - tmp_130*tmp_222) + tmp_139*(14.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_220 - tmp_138*tmp_222) + tmp_147*(14.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_220 - tmp_146*tmp_222) + tmp_155*(14.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_220 - tmp_154*tmp_222) + tmp_163*(14.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_220 - tmp_162*tmp_222) + tmp_171*(14.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_220 - tmp_170*tmp_222) + tmp_179*(14.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_220 - tmp_178*tmp_222) + tmp_187*(14.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_220 - tmp_186*tmp_222) + tmp_195*(14.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_220 - tmp_194*tmp_222) + tmp_203*(14.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_220 - tmp_202*tmp_222) + tmp_211*(14.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_220 - tmp_210*tmp_222) + tmp_219*(14.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_220 - tmp_218*tmp_222) + tmp_59*(-tmp_220*tmp_35 - tmp_222*tmp_44 + 14.0*tmp_35*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_63 - tmp_222*tmp_66 + 14.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_71 - tmp_222*tmp_74 + 14.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_79 - tmp_222*tmp_82 + 14.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_87 - tmp_222*tmp_90 + 14.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_95 - tmp_222*tmp_98 + 14.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_54;
      real_t tmp_225 = 1.0*tmp_224;
      real_t tmp_226 = tmp_107*(14.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_220 - tmp_106*tmp_225) + tmp_115*(14.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_220 - tmp_114*tmp_225) + tmp_123*(14.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_220 - tmp_122*tmp_225) + tmp_131*(14.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_220 - tmp_130*tmp_225) + tmp_139*(14.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_220 - tmp_138*tmp_225) + tmp_147*(14.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_220 - tmp_146*tmp_225) + tmp_155*(14.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_220 - tmp_154*tmp_225) + tmp_163*(14.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_220 - tmp_162*tmp_225) + tmp_171*(14.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_220 - tmp_170*tmp_225) + tmp_179*(14.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_220 - tmp_178*tmp_225) + tmp_187*(14.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_220 - tmp_186*tmp_225) + tmp_195*(14.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_220 - tmp_194*tmp_225) + tmp_203*(14.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_220 - tmp_202*tmp_225) + tmp_211*(14.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_220 - tmp_210*tmp_225) + tmp_219*(14.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_220 - tmp_218*tmp_225) + tmp_59*(-tmp_220*tmp_39 - tmp_225*tmp_44 + 14.0*tmp_39*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_225*tmp_66 + 14.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_225*tmp_74 + 14.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_220*tmp_80 - tmp_225*tmp_82 + 14.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_220*tmp_88 - tmp_225*tmp_90 + 14.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_220*tmp_96 - tmp_225*tmp_98 + 14.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_227 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_53;
      real_t tmp_228 = 1.0*tmp_227;
      real_t tmp_229 = tmp_107*(14.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_220 - tmp_106*tmp_228) + tmp_115*(14.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_220 - tmp_114*tmp_228) + tmp_123*(14.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_220 - tmp_122*tmp_228) + tmp_131*(14.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_220 - tmp_130*tmp_228) + tmp_139*(14.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_220 - tmp_138*tmp_228) + tmp_147*(14.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_220 - tmp_146*tmp_228) + tmp_155*(14.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_220 - tmp_154*tmp_228) + tmp_163*(14.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_220 - tmp_162*tmp_228) + tmp_171*(14.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_220 - tmp_170*tmp_228) + tmp_179*(14.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_220 - tmp_178*tmp_228) + tmp_187*(14.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_220 - tmp_186*tmp_228) + tmp_195*(14.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_220 - tmp_194*tmp_228) + tmp_203*(14.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_220 - tmp_202*tmp_228) + tmp_211*(14.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_220 - tmp_210*tmp_228) + tmp_219*(14.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_220 - tmp_218*tmp_228) + tmp_59*(-tmp_220*tmp_43 - tmp_228*tmp_44 + 14.0*tmp_43*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_228*tmp_66 + 14.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_228*tmp_74 + 14.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_220*tmp_81 - tmp_228*tmp_82 + 14.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_220*tmp_89 - tmp_228*tmp_90 + 14.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_220*tmp_97 - tmp_228*tmp_98 + 14.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_230 = 2.0*tmp_221;
      real_t tmp_231 = tmp_107*(14.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_225 - tmp_104*tmp_222) + tmp_115*(14.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_225 - tmp_112*tmp_222) + tmp_123*(14.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_225 - tmp_120*tmp_222) + tmp_131*(14.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_225 - tmp_128*tmp_222) + tmp_139*(14.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_225 - tmp_136*tmp_222) + tmp_147*(14.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_225 - tmp_144*tmp_222) + tmp_155*(14.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_225 - tmp_152*tmp_222) + tmp_163*(14.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_225 - tmp_160*tmp_222) + tmp_171*(14.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_225 - tmp_168*tmp_222) + tmp_179*(14.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_225 - tmp_176*tmp_222) + tmp_187*(14.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_225 - tmp_184*tmp_222) + tmp_195*(14.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_225 - tmp_192*tmp_222) + tmp_203*(14.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_225 - tmp_200*tmp_222) + tmp_211*(14.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_225 - tmp_208*tmp_222) + tmp_219*(14.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_225 - tmp_216*tmp_222) + tmp_59*(-tmp_222*tmp_39 - tmp_225*tmp_35 + 14.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_222*tmp_64 - tmp_225*tmp_63 + 14.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_222*tmp_72 - tmp_225*tmp_71 + 14.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_222*tmp_80 - tmp_225*tmp_79 + 14.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_222*tmp_88 - tmp_225*tmp_87 + 14.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_222*tmp_96 - tmp_225*tmp_95 + 14.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_232 = tmp_107*(14.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_228 - tmp_105*tmp_222) + tmp_115*(14.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_228 - tmp_113*tmp_222) + tmp_123*(14.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_228 - tmp_121*tmp_222) + tmp_131*(14.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_228 - tmp_129*tmp_222) + tmp_139*(14.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_228 - tmp_137*tmp_222) + tmp_147*(14.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_228 - tmp_145*tmp_222) + tmp_155*(14.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_228 - tmp_153*tmp_222) + tmp_163*(14.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_228 - tmp_161*tmp_222) + tmp_171*(14.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_228 - tmp_169*tmp_222) + tmp_179*(14.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_228 - tmp_177*tmp_222) + tmp_187*(14.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_228 - tmp_185*tmp_222) + tmp_195*(14.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_228 - tmp_193*tmp_222) + tmp_203*(14.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_228 - tmp_201*tmp_222) + tmp_211*(14.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_228 - tmp_209*tmp_222) + tmp_219*(14.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_228 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_228*tmp_35 + 14.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_228*tmp_63 + 14.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_228*tmp_71 + 14.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_228*tmp_79 + 14.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_228*tmp_87 + 14.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_228*tmp_95 + 14.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_233 = 2.0*tmp_224;
      real_t tmp_234 = tmp_107*(14.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_228 - tmp_105*tmp_225) + tmp_115*(14.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_228 - tmp_113*tmp_225) + tmp_123*(14.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_228 - tmp_121*tmp_225) + tmp_131*(14.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_228 - tmp_129*tmp_225) + tmp_139*(14.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_228 - tmp_137*tmp_225) + tmp_147*(14.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_228 - tmp_145*tmp_225) + tmp_155*(14.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_228 - tmp_153*tmp_225) + tmp_163*(14.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_228 - tmp_161*tmp_225) + tmp_171*(14.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_228 - tmp_169*tmp_225) + tmp_179*(14.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_228 - tmp_177*tmp_225) + tmp_187*(14.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_228 - tmp_185*tmp_225) + tmp_195*(14.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_228 - tmp_193*tmp_225) + tmp_203*(14.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_228 - tmp_201*tmp_225) + tmp_211*(14.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_228 - tmp_209*tmp_225) + tmp_219*(14.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_228 - tmp_217*tmp_225) + tmp_59*(-tmp_225*tmp_43 - tmp_228*tmp_39 + 14.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_225*tmp_65 - tmp_228*tmp_64 + 14.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_225*tmp_73 - tmp_228*tmp_72 + 14.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_225*tmp_81 - tmp_228*tmp_80 + 14.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_225*tmp_89 - tmp_228*tmp_88 + 14.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_225*tmp_97 - tmp_228*tmp_96 + 14.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_235 = 2.0*tmp_227;
      real_t a_0_0 = tmp_107*(14.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(14.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(14.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(14.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(14.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(14.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(14.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(14.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(14.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(14.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(14.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(14.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(14.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(14.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(14.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(14.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 14.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 14.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 14.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 14.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 14.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_223;
      real_t a_0_2 = tmp_226;
      real_t a_0_3 = tmp_229;
      real_t a_1_0 = tmp_223;
      real_t a_1_1 = tmp_107*(14.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_230) + tmp_115*(14.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_230) + tmp_123*(14.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_230) + tmp_131*(14.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_230) + tmp_139*(14.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_230) + tmp_147*(14.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_230) + tmp_155*(14.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_230) + tmp_163*(14.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_230) + tmp_171*(14.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_230) + tmp_179*(14.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_230) + tmp_187*(14.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_230) + tmp_195*(14.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_230) + tmp_203*(14.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_230) + tmp_211*(14.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_230) + tmp_219*(14.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_230) + tmp_59*(-tmp_230*tmp_35 + 14.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_230*tmp_63 + 14.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_230*tmp_71 + 14.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_230*tmp_79 + 14.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_230*tmp_87 + 14.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_230*tmp_95 + 14.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_231;
      real_t a_1_3 = tmp_232;
      real_t a_2_0 = tmp_226;
      real_t a_2_1 = tmp_231;
      real_t a_2_2 = tmp_107*(14.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_233) + tmp_115*(14.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_233) + tmp_123*(14.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_233) + tmp_131*(14.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_233) + tmp_139*(14.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_233) + tmp_147*(14.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_233) + tmp_155*(14.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_233) + tmp_163*(14.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_233) + tmp_171*(14.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_233) + tmp_179*(14.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_233) + tmp_187*(14.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_233) + tmp_195*(14.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_233) + tmp_203*(14.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_233) + tmp_211*(14.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_233) + tmp_219*(14.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_233) + tmp_59*(-tmp_233*tmp_39 + 14.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_233*tmp_64 + 14.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_233*tmp_72 + 14.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_233*tmp_80 + 14.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_233*tmp_88 + 14.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_233*tmp_96 + 14.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_234;
      real_t a_3_0 = tmp_229;
      real_t a_3_1 = tmp_232;
      real_t a_3_2 = tmp_234;
      real_t a_3_3 = tmp_107*(14.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_235) + tmp_115*(14.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_235) + tmp_123*(14.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_235) + tmp_131*(14.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_235) + tmp_139*(14.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_235) + tmp_147*(14.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_235) + tmp_155*(14.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_235) + tmp_163*(14.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_235) + tmp_171*(14.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_235) + tmp_179*(14.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_235) + tmp_187*(14.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_235) + tmp_195*(14.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_235) + tmp_203*(14.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_235) + tmp_211*(14.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_235) + tmp_219*(14.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_235) + tmp_59*(-tmp_235*tmp_43 + 14.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_235*tmp_65 + 14.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_235*tmp_73 + 14.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_235*tmp_81 + 14.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_235*tmp_89 + 14.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_235*tmp_97 + 14.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_3*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_0*tmp_13 + tmp_11*tmp_2 - tmp_12*tmp_5 - tmp_14*tmp_2 + tmp_5*tmp_7);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_6 + tmp_10*tmp_2;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_2*tmp_8 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_13;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_5;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_50 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_51 = tmp_48 - tmp_49*tmp_50;
      real_t tmp_52 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_53 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_54 = tmp_49*tmp_53;
      real_t tmp_55 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_56 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_57 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_58 = tmp_53*tmp_55;
      real_t tmp_59 = tmp_46*tmp_56;
      real_t tmp_60 = tmp_50*tmp_57;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_57 - tmp_49*tmp_60 + tmp_50*tmp_55*tmp_56 + tmp_52*tmp_54 - tmp_52*tmp_59);
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = tmp_51*tmp_62;
      real_t tmp_64 = -tmp_46*tmp_52 + tmp_50*tmp_55;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = -tmp_47*tmp_55 + tmp_49*tmp_52;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_69 = 0.5*tmp_61;
      real_t tmp_70 = tmp_68*tmp_69;
      real_t tmp_71 = tmp_52*tmp_53 - tmp_60;
      real_t tmp_72 = tmp_69*tmp_71;
      real_t tmp_73 = tmp_47*tmp_57 - tmp_52*tmp_56;
      real_t tmp_74 = tmp_69*tmp_73;
      real_t tmp_75 = tmp_54 - tmp_59;
      real_t tmp_76 = tmp_69*tmp_75;
      real_t tmp_77 = tmp_46*tmp_57 - tmp_58;
      real_t tmp_78 = tmp_69*tmp_77;
      real_t tmp_79 = -tmp_49*tmp_57 + tmp_55*tmp_56;
      real_t tmp_80 = tmp_69*tmp_79;
      real_t tmp_81 = 1.0*p_affine_13_0*(-tmp_63 - tmp_65 - tmp_67) + 1.0*p_affine_13_1*(-tmp_70 - tmp_72 - tmp_74) + 1.0*p_affine_13_2*(-tmp_76 - tmp_78 - tmp_80);
      real_t tmp_82 = 1.0*tmp_15;
      real_t tmp_83 = tmp_43*tmp_82;
      real_t tmp_84 = tmp_39*tmp_82;
      real_t tmp_85 = tmp_29*tmp_82;
      real_t tmp_86 = 0.5*tmp_15;
      real_t tmp_87 = tmp_42*tmp_86;
      real_t tmp_88 = tmp_38*tmp_86;
      real_t tmp_89 = tmp_22*tmp_86;
      real_t tmp_90 = tmp_41*tmp_86;
      real_t tmp_91 = tmp_37*tmp_86;
      real_t tmp_92 = tmp_4*tmp_86;
      real_t tmp_93 = p_affine_13_0*(-tmp_83 - tmp_84 - tmp_85) + p_affine_13_1*(-tmp_87 - tmp_88 - tmp_89) + p_affine_13_2*(-tmp_90 - tmp_91 - tmp_92);
      real_t tmp_94 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_95 = tmp_61*(tmp_19 + tmp_94);
      real_t tmp_96 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_97 = tmp_61*(tmp_26 + tmp_96);
      real_t tmp_98 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_99 = tmp_61*(tmp_33 + tmp_98);
      real_t tmp_100 = tmp_66*tmp_99 + tmp_73*tmp_97 + tmp_79*tmp_95;
      real_t tmp_101 = tmp_64*tmp_99 + tmp_71*tmp_97 + tmp_77*tmp_95;
      real_t tmp_102 = tmp_51*tmp_99 + tmp_68*tmp_97 + tmp_75*tmp_95;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_105 = 14.0*std::pow(tmp_104, -0.25);
      real_t tmp_106 = tmp_105*tmp_45;
      real_t tmp_107 = 1.0*std::pow(tmp_104, 1.0/2.0);
      real_t tmp_108 = 0.0068572537431980923*tmp_107;
      real_t tmp_109 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_110 = tmp_15*(tmp_109 + tmp_20);
      real_t tmp_111 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_112 = tmp_15*(tmp_111 + tmp_27);
      real_t tmp_113 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_34);
      real_t tmp_115 = tmp_110*tmp_4 + tmp_112*tmp_22 + tmp_114*tmp_29;
      real_t tmp_116 = tmp_110*tmp_37 + tmp_112*tmp_38 + tmp_114*tmp_39;
      real_t tmp_117 = tmp_110*tmp_41 + tmp_112*tmp_42 + tmp_114*tmp_43;
      real_t tmp_118 = -tmp_115 - tmp_116 - tmp_117 + 1;
      real_t tmp_119 = tmp_61*(tmp_109 + tmp_94);
      real_t tmp_120 = tmp_61*(tmp_111 + tmp_96);
      real_t tmp_121 = tmp_61*(tmp_113 + tmp_98);
      real_t tmp_122 = tmp_119*tmp_79 + tmp_120*tmp_73 + tmp_121*tmp_66;
      real_t tmp_123 = tmp_119*tmp_77 + tmp_120*tmp_71 + tmp_121*tmp_64;
      real_t tmp_124 = tmp_119*tmp_75 + tmp_120*tmp_68 + tmp_121*tmp_51;
      real_t tmp_125 = -tmp_122 - tmp_123 - tmp_124 + 1;
      real_t tmp_126 = tmp_105*tmp_118;
      real_t tmp_127 = 0.037198804536718075*tmp_107;
      real_t tmp_128 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_20);
      real_t tmp_130 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_27);
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_133 = tmp_15*(tmp_132 + tmp_34);
      real_t tmp_134 = tmp_129*tmp_4 + tmp_131*tmp_22 + tmp_133*tmp_29;
      real_t tmp_135 = tmp_129*tmp_37 + tmp_131*tmp_38 + tmp_133*tmp_39;
      real_t tmp_136 = tmp_129*tmp_41 + tmp_131*tmp_42 + tmp_133*tmp_43;
      real_t tmp_137 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_138 = tmp_61*(tmp_128 + tmp_94);
      real_t tmp_139 = tmp_61*(tmp_130 + tmp_96);
      real_t tmp_140 = tmp_61*(tmp_132 + tmp_98);
      real_t tmp_141 = tmp_138*tmp_79 + tmp_139*tmp_73 + tmp_140*tmp_66;
      real_t tmp_142 = tmp_138*tmp_77 + tmp_139*tmp_71 + tmp_140*tmp_64;
      real_t tmp_143 = tmp_138*tmp_75 + tmp_139*tmp_68 + tmp_140*tmp_51;
      real_t tmp_144 = -tmp_141 - tmp_142 - tmp_143 + 1;
      real_t tmp_145 = tmp_105*tmp_137;
      real_t tmp_146 = 0.020848748529055869*tmp_107;
      real_t tmp_147 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_148 = tmp_15*(tmp_147 + tmp_20);
      real_t tmp_149 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_150 = tmp_15*(tmp_149 + tmp_27);
      real_t tmp_151 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_34);
      real_t tmp_153 = tmp_148*tmp_4 + tmp_150*tmp_22 + tmp_152*tmp_29;
      real_t tmp_154 = tmp_148*tmp_37 + tmp_150*tmp_38 + tmp_152*tmp_39;
      real_t tmp_155 = tmp_148*tmp_41 + tmp_150*tmp_42 + tmp_152*tmp_43;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = tmp_61*(tmp_147 + tmp_94);
      real_t tmp_158 = tmp_61*(tmp_149 + tmp_96);
      real_t tmp_159 = tmp_61*(tmp_151 + tmp_98);
      real_t tmp_160 = tmp_157*tmp_79 + tmp_158*tmp_73 + tmp_159*tmp_66;
      real_t tmp_161 = tmp_157*tmp_77 + tmp_158*tmp_71 + tmp_159*tmp_64;
      real_t tmp_162 = tmp_157*tmp_75 + tmp_158*tmp_68 + tmp_159*tmp_51;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = tmp_105*tmp_156;
      real_t tmp_165 = 0.019202922745021479*tmp_107;
      real_t tmp_166 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_20);
      real_t tmp_168 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_169 = tmp_15*(tmp_168 + tmp_27);
      real_t tmp_170 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_171 = tmp_15*(tmp_170 + tmp_34);
      real_t tmp_172 = tmp_167*tmp_4 + tmp_169*tmp_22 + tmp_171*tmp_29;
      real_t tmp_173 = tmp_167*tmp_37 + tmp_169*tmp_38 + tmp_171*tmp_39;
      real_t tmp_174 = tmp_167*tmp_41 + tmp_169*tmp_42 + tmp_171*tmp_43;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = tmp_61*(tmp_166 + tmp_94);
      real_t tmp_177 = tmp_61*(tmp_168 + tmp_96);
      real_t tmp_178 = tmp_61*(tmp_170 + tmp_98);
      real_t tmp_179 = tmp_176*tmp_79 + tmp_177*tmp_73 + tmp_178*tmp_66;
      real_t tmp_180 = tmp_176*tmp_77 + tmp_177*tmp_71 + tmp_178*tmp_64;
      real_t tmp_181 = tmp_176*tmp_75 + tmp_177*tmp_68 + tmp_178*tmp_51;
      real_t tmp_182 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_183 = tmp_105*tmp_175;
      real_t tmp_184 = 0.020848748529055869*tmp_107;
      real_t tmp_185 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_20);
      real_t tmp_187 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_27);
      real_t tmp_189 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_190 = tmp_15*(tmp_189 + tmp_34);
      real_t tmp_191 = tmp_186*tmp_4 + tmp_188*tmp_22 + tmp_190*tmp_29;
      real_t tmp_192 = tmp_186*tmp_37 + tmp_188*tmp_38 + tmp_190*tmp_39;
      real_t tmp_193 = tmp_186*tmp_41 + tmp_188*tmp_42 + tmp_190*tmp_43;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = tmp_61*(tmp_185 + tmp_94);
      real_t tmp_196 = tmp_61*(tmp_187 + tmp_96);
      real_t tmp_197 = tmp_61*(tmp_189 + tmp_98);
      real_t tmp_198 = tmp_195*tmp_79 + tmp_196*tmp_73 + tmp_197*tmp_66;
      real_t tmp_199 = tmp_195*tmp_77 + tmp_196*tmp_71 + tmp_197*tmp_64;
      real_t tmp_200 = tmp_195*tmp_75 + tmp_196*tmp_68 + tmp_197*tmp_51;
      real_t tmp_201 = -tmp_198 - tmp_199 - tmp_200 + 1;
      real_t tmp_202 = tmp_105*tmp_194;
      real_t tmp_203 = 0.019202922745021479*tmp_107;
      real_t tmp_204 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_205 = tmp_15*(tmp_20 + tmp_204);
      real_t tmp_206 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_207 = tmp_15*(tmp_206 + tmp_27);
      real_t tmp_208 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_209 = tmp_15*(tmp_208 + tmp_34);
      real_t tmp_210 = tmp_205*tmp_4 + tmp_207*tmp_22 + tmp_209*tmp_29;
      real_t tmp_211 = tmp_205*tmp_37 + tmp_207*tmp_38 + tmp_209*tmp_39;
      real_t tmp_212 = tmp_205*tmp_41 + tmp_207*tmp_42 + tmp_209*tmp_43;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = tmp_61*(tmp_204 + tmp_94);
      real_t tmp_215 = tmp_61*(tmp_206 + tmp_96);
      real_t tmp_216 = tmp_61*(tmp_208 + tmp_98);
      real_t tmp_217 = tmp_214*tmp_79 + tmp_215*tmp_73 + tmp_216*tmp_66;
      real_t tmp_218 = tmp_214*tmp_77 + tmp_215*tmp_71 + tmp_216*tmp_64;
      real_t tmp_219 = tmp_214*tmp_75 + tmp_215*tmp_68 + tmp_216*tmp_51;
      real_t tmp_220 = -tmp_217 - tmp_218 - tmp_219 + 1;
      real_t tmp_221 = tmp_105*tmp_213;
      real_t tmp_222 = 0.020848748529055869*tmp_107;
      real_t tmp_223 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_224 = tmp_15*(tmp_20 + tmp_223);
      real_t tmp_225 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_226 = tmp_15*(tmp_225 + tmp_27);
      real_t tmp_227 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_228 = tmp_15*(tmp_227 + tmp_34);
      real_t tmp_229 = tmp_22*tmp_226 + tmp_224*tmp_4 + tmp_228*tmp_29;
      real_t tmp_230 = tmp_224*tmp_37 + tmp_226*tmp_38 + tmp_228*tmp_39;
      real_t tmp_231 = tmp_224*tmp_41 + tmp_226*tmp_42 + tmp_228*tmp_43;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = tmp_61*(tmp_223 + tmp_94);
      real_t tmp_234 = tmp_61*(tmp_225 + tmp_96);
      real_t tmp_235 = tmp_61*(tmp_227 + tmp_98);
      real_t tmp_236 = tmp_233*tmp_79 + tmp_234*tmp_73 + tmp_235*tmp_66;
      real_t tmp_237 = tmp_233*tmp_77 + tmp_234*tmp_71 + tmp_235*tmp_64;
      real_t tmp_238 = tmp_233*tmp_75 + tmp_234*tmp_68 + tmp_235*tmp_51;
      real_t tmp_239 = -tmp_236 - tmp_237 - tmp_238 + 1;
      real_t tmp_240 = tmp_105*tmp_232;
      real_t tmp_241 = 0.019202922745021479*tmp_107;
      real_t tmp_242 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_243 = tmp_15*(tmp_20 + tmp_242);
      real_t tmp_244 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_245 = tmp_15*(tmp_244 + tmp_27);
      real_t tmp_246 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_247 = tmp_15*(tmp_246 + tmp_34);
      real_t tmp_248 = tmp_22*tmp_245 + tmp_243*tmp_4 + tmp_247*tmp_29;
      real_t tmp_249 = tmp_243*tmp_37 + tmp_245*tmp_38 + tmp_247*tmp_39;
      real_t tmp_250 = tmp_243*tmp_41 + tmp_245*tmp_42 + tmp_247*tmp_43;
      real_t tmp_251 = -tmp_248 - tmp_249 - tmp_250 + 1;
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_94);
      real_t tmp_253 = tmp_61*(tmp_244 + tmp_96);
      real_t tmp_254 = tmp_61*(tmp_246 + tmp_98);
      real_t tmp_255 = tmp_252*tmp_79 + tmp_253*tmp_73 + tmp_254*tmp_66;
      real_t tmp_256 = tmp_252*tmp_77 + tmp_253*tmp_71 + tmp_254*tmp_64;
      real_t tmp_257 = tmp_252*tmp_75 + tmp_253*tmp_68 + tmp_254*tmp_51;
      real_t tmp_258 = -tmp_255 - tmp_256 - tmp_257 + 1;
      real_t tmp_259 = tmp_105*tmp_251;
      real_t tmp_260 = 0.020848748529055869*tmp_107;
      real_t tmp_261 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_262 = tmp_15*(tmp_20 + tmp_261);
      real_t tmp_263 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_27);
      real_t tmp_265 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_34);
      real_t tmp_267 = tmp_22*tmp_264 + tmp_262*tmp_4 + tmp_266*tmp_29;
      real_t tmp_268 = tmp_262*tmp_37 + tmp_264*tmp_38 + tmp_266*tmp_39;
      real_t tmp_269 = tmp_262*tmp_41 + tmp_264*tmp_42 + tmp_266*tmp_43;
      real_t tmp_270 = -tmp_267 - tmp_268 - tmp_269 + 1;
      real_t tmp_271 = tmp_61*(tmp_261 + tmp_94);
      real_t tmp_272 = tmp_61*(tmp_263 + tmp_96);
      real_t tmp_273 = tmp_61*(tmp_265 + tmp_98);
      real_t tmp_274 = tmp_271*tmp_79 + tmp_272*tmp_73 + tmp_273*tmp_66;
      real_t tmp_275 = tmp_271*tmp_77 + tmp_272*tmp_71 + tmp_273*tmp_64;
      real_t tmp_276 = tmp_271*tmp_75 + tmp_272*tmp_68 + tmp_273*tmp_51;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_105*tmp_270;
      real_t tmp_279 = 0.019202922745021479*tmp_107;
      real_t tmp_280 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_281 = tmp_15*(tmp_20 + tmp_280);
      real_t tmp_282 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_283 = tmp_15*(tmp_27 + tmp_282);
      real_t tmp_284 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_34);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_4 + tmp_285*tmp_29;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43;
      real_t tmp_289 = -tmp_286 - tmp_287 - tmp_288 + 1;
      real_t tmp_290 = tmp_61*(tmp_280 + tmp_94);
      real_t tmp_291 = tmp_61*(tmp_282 + tmp_96);
      real_t tmp_292 = tmp_61*(tmp_284 + tmp_98);
      real_t tmp_293 = tmp_290*tmp_79 + tmp_291*tmp_73 + tmp_292*tmp_66;
      real_t tmp_294 = tmp_290*tmp_77 + tmp_291*tmp_71 + tmp_292*tmp_64;
      real_t tmp_295 = tmp_290*tmp_75 + tmp_291*tmp_68 + tmp_292*tmp_51;
      real_t tmp_296 = -tmp_293 - tmp_294 - tmp_295 + 1;
      real_t tmp_297 = tmp_105*tmp_289;
      real_t tmp_298 = 0.020848748529055869*tmp_107;
      real_t tmp_299 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_300 = tmp_15*(tmp_20 + tmp_299);
      real_t tmp_301 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_302 = tmp_15*(tmp_27 + tmp_301);
      real_t tmp_303 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_304 = tmp_15*(tmp_303 + tmp_34);
      real_t tmp_305 = tmp_22*tmp_302 + tmp_29*tmp_304 + tmp_300*tmp_4;
      real_t tmp_306 = tmp_300*tmp_37 + tmp_302*tmp_38 + tmp_304*tmp_39;
      real_t tmp_307 = tmp_300*tmp_41 + tmp_302*tmp_42 + tmp_304*tmp_43;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_61*(tmp_299 + tmp_94);
      real_t tmp_310 = tmp_61*(tmp_301 + tmp_96);
      real_t tmp_311 = tmp_61*(tmp_303 + tmp_98);
      real_t tmp_312 = tmp_309*tmp_79 + tmp_310*tmp_73 + tmp_311*tmp_66;
      real_t tmp_313 = tmp_309*tmp_77 + tmp_310*tmp_71 + tmp_311*tmp_64;
      real_t tmp_314 = tmp_309*tmp_75 + tmp_310*tmp_68 + tmp_311*tmp_51;
      real_t tmp_315 = -tmp_312 - tmp_313 - tmp_314 + 1;
      real_t tmp_316 = tmp_105*tmp_308;
      real_t tmp_317 = 0.019202922745021479*tmp_107;
      real_t tmp_318 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_319 = tmp_15*(tmp_20 + tmp_318);
      real_t tmp_320 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_321 = tmp_15*(tmp_27 + tmp_320);
      real_t tmp_322 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_323 = tmp_15*(tmp_322 + tmp_34);
      real_t tmp_324 = tmp_22*tmp_321 + tmp_29*tmp_323 + tmp_319*tmp_4;
      real_t tmp_325 = tmp_319*tmp_37 + tmp_321*tmp_38 + tmp_323*tmp_39;
      real_t tmp_326 = tmp_319*tmp_41 + tmp_321*tmp_42 + tmp_323*tmp_43;
      real_t tmp_327 = -tmp_324 - tmp_325 - tmp_326 + 1;
      real_t tmp_328 = tmp_61*(tmp_318 + tmp_94);
      real_t tmp_329 = tmp_61*(tmp_320 + tmp_96);
      real_t tmp_330 = tmp_61*(tmp_322 + tmp_98);
      real_t tmp_331 = tmp_328*tmp_79 + tmp_329*tmp_73 + tmp_330*tmp_66;
      real_t tmp_332 = tmp_328*tmp_77 + tmp_329*tmp_71 + tmp_330*tmp_64;
      real_t tmp_333 = tmp_328*tmp_75 + tmp_329*tmp_68 + tmp_330*tmp_51;
      real_t tmp_334 = -tmp_331 - tmp_332 - tmp_333 + 1;
      real_t tmp_335 = tmp_105*tmp_327;
      real_t tmp_336 = 0.042507265838595799*tmp_107;
      real_t tmp_337 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_338 = tmp_15*(tmp_20 + tmp_337);
      real_t tmp_339 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_340 = tmp_15*(tmp_27 + tmp_339);
      real_t tmp_341 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_342 = tmp_15*(tmp_34 + tmp_341);
      real_t tmp_343 = tmp_22*tmp_340 + tmp_29*tmp_342 + tmp_338*tmp_4;
      real_t tmp_344 = tmp_338*tmp_37 + tmp_340*tmp_38 + tmp_342*tmp_39;
      real_t tmp_345 = tmp_338*tmp_41 + tmp_340*tmp_42 + tmp_342*tmp_43;
      real_t tmp_346 = -tmp_343 - tmp_344 - tmp_345 + 1;
      real_t tmp_347 = tmp_61*(tmp_337 + tmp_94);
      real_t tmp_348 = tmp_61*(tmp_339 + tmp_96);
      real_t tmp_349 = tmp_61*(tmp_341 + tmp_98);
      real_t tmp_350 = tmp_347*tmp_79 + tmp_348*tmp_73 + tmp_349*tmp_66;
      real_t tmp_351 = tmp_347*tmp_77 + tmp_348*tmp_71 + tmp_349*tmp_64;
      real_t tmp_352 = tmp_347*tmp_75 + tmp_348*tmp_68 + tmp_349*tmp_51;
      real_t tmp_353 = -tmp_350 - tmp_351 - tmp_352 + 1;
      real_t tmp_354 = tmp_105*tmp_346;
      real_t tmp_355 = 0.020848748529055869*tmp_107;
      real_t tmp_356 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_357 = tmp_15*(tmp_20 + tmp_356);
      real_t tmp_358 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_359 = tmp_15*(tmp_27 + tmp_358);
      real_t tmp_360 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_361 = tmp_15*(tmp_34 + tmp_360);
      real_t tmp_362 = tmp_22*tmp_359 + tmp_29*tmp_361 + tmp_357*tmp_4;
      real_t tmp_363 = tmp_357*tmp_37 + tmp_359*tmp_38 + tmp_361*tmp_39;
      real_t tmp_364 = tmp_357*tmp_41 + tmp_359*tmp_42 + tmp_361*tmp_43;
      real_t tmp_365 = -tmp_362 - tmp_363 - tmp_364 + 1;
      real_t tmp_366 = tmp_61*(tmp_356 + tmp_94);
      real_t tmp_367 = tmp_61*(tmp_358 + tmp_96);
      real_t tmp_368 = tmp_61*(tmp_360 + tmp_98);
      real_t tmp_369 = tmp_366*tmp_79 + tmp_367*tmp_73 + tmp_368*tmp_66;
      real_t tmp_370 = tmp_366*tmp_77 + tmp_367*tmp_71 + tmp_368*tmp_64;
      real_t tmp_371 = tmp_366*tmp_75 + tmp_367*tmp_68 + tmp_368*tmp_51;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_105*tmp_365;
      real_t tmp_374 = 0.0068572537431980923*tmp_107;
      real_t tmp_375 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_4;
      real_t tmp_382 = tmp_37*tmp_376 + tmp_378*tmp_38 + tmp_380*tmp_39;
      real_t tmp_383 = tmp_376*tmp_41 + tmp_378*tmp_42 + tmp_380*tmp_43;
      real_t tmp_384 = -tmp_381 - tmp_382 - tmp_383 + 1;
      real_t tmp_385 = tmp_61*(tmp_375 + tmp_94);
      real_t tmp_386 = tmp_61*(tmp_377 + tmp_96);
      real_t tmp_387 = tmp_61*(tmp_379 + tmp_98);
      real_t tmp_388 = tmp_385*tmp_79 + tmp_386*tmp_73 + tmp_387*tmp_66;
      real_t tmp_389 = tmp_385*tmp_77 + tmp_386*tmp_71 + tmp_387*tmp_64;
      real_t tmp_390 = tmp_385*tmp_75 + tmp_386*tmp_68 + tmp_387*tmp_51;
      real_t tmp_391 = -tmp_388 - tmp_389 - tmp_390 + 1;
      real_t tmp_392 = tmp_105*tmp_384;
      real_t tmp_393 = 0.037198804536718075*tmp_107;
      real_t tmp_394 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_395 = tmp_15*(tmp_20 + tmp_394);
      real_t tmp_396 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_397 = tmp_15*(tmp_27 + tmp_396);
      real_t tmp_398 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_399 = tmp_15*(tmp_34 + tmp_398);
      real_t tmp_400 = tmp_22*tmp_397 + tmp_29*tmp_399 + tmp_395*tmp_4;
      real_t tmp_401 = tmp_37*tmp_395 + tmp_38*tmp_397 + tmp_39*tmp_399;
      real_t tmp_402 = tmp_395*tmp_41 + tmp_397*tmp_42 + tmp_399*tmp_43;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_61*(tmp_394 + tmp_94);
      real_t tmp_405 = tmp_61*(tmp_396 + tmp_96);
      real_t tmp_406 = tmp_61*(tmp_398 + tmp_98);
      real_t tmp_407 = tmp_404*tmp_79 + tmp_405*tmp_73 + tmp_406*tmp_66;
      real_t tmp_408 = tmp_404*tmp_77 + tmp_405*tmp_71 + tmp_406*tmp_64;
      real_t tmp_409 = tmp_404*tmp_75 + tmp_405*tmp_68 + tmp_406*tmp_51;
      real_t tmp_410 = -tmp_407 - tmp_408 - tmp_409 + 1;
      real_t tmp_411 = tmp_105*tmp_403;
      real_t tmp_412 = 0.042507265838595799*tmp_107;
      real_t tmp_413 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_414 = tmp_15*(tmp_20 + tmp_413);
      real_t tmp_415 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_416 = tmp_15*(tmp_27 + tmp_415);
      real_t tmp_417 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_418 = tmp_15*(tmp_34 + tmp_417);
      real_t tmp_419 = tmp_22*tmp_416 + tmp_29*tmp_418 + tmp_4*tmp_414;
      real_t tmp_420 = tmp_37*tmp_414 + tmp_38*tmp_416 + tmp_39*tmp_418;
      real_t tmp_421 = tmp_41*tmp_414 + tmp_416*tmp_42 + tmp_418*tmp_43;
      real_t tmp_422 = -tmp_419 - tmp_420 - tmp_421 + 1;
      real_t tmp_423 = tmp_61*(tmp_413 + tmp_94);
      real_t tmp_424 = tmp_61*(tmp_415 + tmp_96);
      real_t tmp_425 = tmp_61*(tmp_417 + tmp_98);
      real_t tmp_426 = tmp_423*tmp_79 + tmp_424*tmp_73 + tmp_425*tmp_66;
      real_t tmp_427 = tmp_423*tmp_77 + tmp_424*tmp_71 + tmp_425*tmp_64;
      real_t tmp_428 = tmp_423*tmp_75 + tmp_424*tmp_68 + tmp_425*tmp_51;
      real_t tmp_429 = -tmp_426 - tmp_427 - tmp_428 + 1;
      real_t tmp_430 = tmp_105*tmp_422;
      real_t tmp_431 = 0.0068572537431980923*tmp_107;
      real_t tmp_432 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_433 = tmp_15*(tmp_20 + tmp_432);
      real_t tmp_434 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_435 = tmp_15*(tmp_27 + tmp_434);
      real_t tmp_436 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_437 = tmp_15*(tmp_34 + tmp_436);
      real_t tmp_438 = tmp_22*tmp_435 + tmp_29*tmp_437 + tmp_4*tmp_433;
      real_t tmp_439 = tmp_37*tmp_433 + tmp_38*tmp_435 + tmp_39*tmp_437;
      real_t tmp_440 = tmp_41*tmp_433 + tmp_42*tmp_435 + tmp_43*tmp_437;
      real_t tmp_441 = -tmp_438 - tmp_439 - tmp_440 + 1;
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_94);
      real_t tmp_443 = tmp_61*(tmp_434 + tmp_96);
      real_t tmp_444 = tmp_61*(tmp_436 + tmp_98);
      real_t tmp_445 = tmp_442*tmp_79 + tmp_443*tmp_73 + tmp_444*tmp_66;
      real_t tmp_446 = tmp_442*tmp_77 + tmp_443*tmp_71 + tmp_444*tmp_64;
      real_t tmp_447 = tmp_442*tmp_75 + tmp_443*tmp_68 + tmp_444*tmp_51;
      real_t tmp_448 = -tmp_445 - tmp_446 - tmp_447 + 1;
      real_t tmp_449 = tmp_105*tmp_441;
      real_t tmp_450 = 0.037198804536718075*tmp_107;
      real_t tmp_451 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_452 = tmp_15*(tmp_20 + tmp_451);
      real_t tmp_453 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_454 = tmp_15*(tmp_27 + tmp_453);
      real_t tmp_455 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_456 = tmp_15*(tmp_34 + tmp_455);
      real_t tmp_457 = tmp_22*tmp_454 + tmp_29*tmp_456 + tmp_4*tmp_452;
      real_t tmp_458 = tmp_37*tmp_452 + tmp_38*tmp_454 + tmp_39*tmp_456;
      real_t tmp_459 = tmp_41*tmp_452 + tmp_42*tmp_454 + tmp_43*tmp_456;
      real_t tmp_460 = -tmp_457 - tmp_458 - tmp_459 + 1;
      real_t tmp_461 = tmp_61*(tmp_451 + tmp_94);
      real_t tmp_462 = tmp_61*(tmp_453 + tmp_96);
      real_t tmp_463 = tmp_61*(tmp_455 + tmp_98);
      real_t tmp_464 = tmp_461*tmp_79 + tmp_462*tmp_73 + tmp_463*tmp_66;
      real_t tmp_465 = tmp_461*tmp_77 + tmp_462*tmp_71 + tmp_463*tmp_64;
      real_t tmp_466 = tmp_461*tmp_75 + tmp_462*tmp_68 + tmp_463*tmp_51;
      real_t tmp_467 = -tmp_464 - tmp_465 - tmp_466 + 1;
      real_t tmp_468 = tmp_105*tmp_460;
      real_t tmp_469 = 0.042507265838595799*tmp_107;
      real_t tmp_470 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_471 = tmp_15*(tmp_20 + tmp_470);
      real_t tmp_472 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_473 = tmp_15*(tmp_27 + tmp_472);
      real_t tmp_474 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_475 = tmp_15*(tmp_34 + tmp_474);
      real_t tmp_476 = tmp_22*tmp_473 + tmp_29*tmp_475 + tmp_4*tmp_471;
      real_t tmp_477 = tmp_37*tmp_471 + tmp_38*tmp_473 + tmp_39*tmp_475;
      real_t tmp_478 = tmp_41*tmp_471 + tmp_42*tmp_473 + tmp_43*tmp_475;
      real_t tmp_479 = -tmp_476 - tmp_477 - tmp_478 + 1;
      real_t tmp_480 = tmp_61*(tmp_470 + tmp_94);
      real_t tmp_481 = tmp_61*(tmp_472 + tmp_96);
      real_t tmp_482 = tmp_61*(tmp_474 + tmp_98);
      real_t tmp_483 = tmp_480*tmp_79 + tmp_481*tmp_73 + tmp_482*tmp_66;
      real_t tmp_484 = tmp_480*tmp_77 + tmp_481*tmp_71 + tmp_482*tmp_64;
      real_t tmp_485 = tmp_480*tmp_75 + tmp_481*tmp_68 + tmp_482*tmp_51;
      real_t tmp_486 = -tmp_483 - tmp_484 - tmp_485 + 1;
      real_t tmp_487 = tmp_105*tmp_479;
      real_t tmp_488 = 0.019202922745021479*tmp_107;
      real_t tmp_489 = 1.0*p_affine_13_0*tmp_67 + 1.0*p_affine_13_1*tmp_74 + 1.0*p_affine_13_2*tmp_80;
      real_t tmp_490 = 1.0*p_affine_13_0*tmp_65 + 1.0*p_affine_13_1*tmp_72 + 1.0*p_affine_13_2*tmp_78;
      real_t tmp_491 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_70 + 1.0*p_affine_13_2*tmp_76;
      real_t tmp_492 = p_affine_13_0*tmp_85 + p_affine_13_1*tmp_89 + p_affine_13_2*tmp_92;
      real_t tmp_493 = tmp_105*tmp_36;
      real_t tmp_494 = tmp_105*tmp_115;
      real_t tmp_495 = tmp_105*tmp_134;
      real_t tmp_496 = tmp_105*tmp_153;
      real_t tmp_497 = tmp_105*tmp_172;
      real_t tmp_498 = tmp_105*tmp_191;
      real_t tmp_499 = tmp_105*tmp_210;
      real_t tmp_500 = tmp_105*tmp_229;
      real_t tmp_501 = tmp_105*tmp_248;
      real_t tmp_502 = tmp_105*tmp_267;
      real_t tmp_503 = tmp_105*tmp_286;
      real_t tmp_504 = tmp_105*tmp_305;
      real_t tmp_505 = tmp_105*tmp_324;
      real_t tmp_506 = tmp_105*tmp_343;
      real_t tmp_507 = tmp_105*tmp_362;
      real_t tmp_508 = tmp_105*tmp_381;
      real_t tmp_509 = tmp_105*tmp_400;
      real_t tmp_510 = tmp_105*tmp_419;
      real_t tmp_511 = tmp_105*tmp_438;
      real_t tmp_512 = tmp_105*tmp_457;
      real_t tmp_513 = tmp_105*tmp_476;
      real_t tmp_514 = p_affine_13_0*tmp_84 + p_affine_13_1*tmp_88 + p_affine_13_2*tmp_91;
      real_t tmp_515 = tmp_105*tmp_40;
      real_t tmp_516 = tmp_105*tmp_116;
      real_t tmp_517 = tmp_105*tmp_135;
      real_t tmp_518 = tmp_105*tmp_154;
      real_t tmp_519 = tmp_105*tmp_173;
      real_t tmp_520 = tmp_105*tmp_192;
      real_t tmp_521 = tmp_105*tmp_211;
      real_t tmp_522 = tmp_105*tmp_230;
      real_t tmp_523 = tmp_105*tmp_249;
      real_t tmp_524 = tmp_105*tmp_268;
      real_t tmp_525 = tmp_105*tmp_287;
      real_t tmp_526 = tmp_105*tmp_306;
      real_t tmp_527 = tmp_105*tmp_325;
      real_t tmp_528 = tmp_105*tmp_344;
      real_t tmp_529 = tmp_105*tmp_363;
      real_t tmp_530 = tmp_105*tmp_382;
      real_t tmp_531 = tmp_105*tmp_401;
      real_t tmp_532 = tmp_105*tmp_420;
      real_t tmp_533 = tmp_105*tmp_439;
      real_t tmp_534 = tmp_105*tmp_458;
      real_t tmp_535 = tmp_105*tmp_477;
      real_t tmp_536 = p_affine_13_0*tmp_83 + p_affine_13_1*tmp_87 + p_affine_13_2*tmp_90;
      real_t tmp_537 = tmp_105*tmp_44;
      real_t tmp_538 = tmp_105*tmp_117;
      real_t tmp_539 = tmp_105*tmp_136;
      real_t tmp_540 = tmp_105*tmp_155;
      real_t tmp_541 = tmp_105*tmp_174;
      real_t tmp_542 = tmp_105*tmp_193;
      real_t tmp_543 = tmp_105*tmp_212;
      real_t tmp_544 = tmp_105*tmp_231;
      real_t tmp_545 = tmp_105*tmp_250;
      real_t tmp_546 = tmp_105*tmp_269;
      real_t tmp_547 = tmp_105*tmp_288;
      real_t tmp_548 = tmp_105*tmp_307;
      real_t tmp_549 = tmp_105*tmp_326;
      real_t tmp_550 = tmp_105*tmp_345;
      real_t tmp_551 = tmp_105*tmp_364;
      real_t tmp_552 = tmp_105*tmp_383;
      real_t tmp_553 = tmp_105*tmp_402;
      real_t tmp_554 = tmp_105*tmp_421;
      real_t tmp_555 = tmp_105*tmp_440;
      real_t tmp_556 = tmp_105*tmp_459;
      real_t tmp_557 = tmp_105*tmp_478;
      real_t a_0_0 = tmp_108*(-tmp_103*tmp_106 + tmp_103*tmp_93 - tmp_45*tmp_81) + tmp_127*(-tmp_118*tmp_81 - tmp_125*tmp_126 + tmp_125*tmp_93) + tmp_146*(-tmp_137*tmp_81 - tmp_144*tmp_145 + tmp_144*tmp_93) + tmp_165*(-tmp_156*tmp_81 - tmp_163*tmp_164 + tmp_163*tmp_93) + tmp_184*(-tmp_175*tmp_81 - tmp_182*tmp_183 + tmp_182*tmp_93) + tmp_203*(-tmp_194*tmp_81 - tmp_201*tmp_202 + tmp_201*tmp_93) + tmp_222*(-tmp_213*tmp_81 - tmp_220*tmp_221 + tmp_220*tmp_93) + tmp_241*(-tmp_232*tmp_81 - tmp_239*tmp_240 + tmp_239*tmp_93) + tmp_260*(-tmp_251*tmp_81 - tmp_258*tmp_259 + tmp_258*tmp_93) + tmp_279*(-tmp_270*tmp_81 - tmp_277*tmp_278 + tmp_277*tmp_93) + tmp_298*(-tmp_289*tmp_81 - tmp_296*tmp_297 + tmp_296*tmp_93) + tmp_317*(-tmp_308*tmp_81 - tmp_315*tmp_316 + tmp_315*tmp_93) + tmp_336*(-tmp_327*tmp_81 - tmp_334*tmp_335 + tmp_334*tmp_93) + tmp_355*(-tmp_346*tmp_81 - tmp_353*tmp_354 + tmp_353*tmp_93) + tmp_374*(-tmp_365*tmp_81 - tmp_372*tmp_373 + tmp_372*tmp_93) + tmp_393*(-tmp_384*tmp_81 - tmp_391*tmp_392 + tmp_391*tmp_93) + tmp_412*(-tmp_403*tmp_81 - tmp_410*tmp_411 + tmp_410*tmp_93) + tmp_431*(-tmp_422*tmp_81 - tmp_429*tmp_430 + tmp_429*tmp_93) + tmp_450*(-tmp_441*tmp_81 - tmp_448*tmp_449 + tmp_448*tmp_93) + tmp_469*(-tmp_460*tmp_81 - tmp_467*tmp_468 + tmp_467*tmp_93) + tmp_488*(-tmp_479*tmp_81 - tmp_486*tmp_487 + tmp_486*tmp_93);
      real_t a_0_1 = tmp_108*(-tmp_100*tmp_106 + tmp_100*tmp_93 - tmp_45*tmp_489) + tmp_127*(-tmp_118*tmp_489 - tmp_122*tmp_126 + tmp_122*tmp_93) + tmp_146*(-tmp_137*tmp_489 - tmp_141*tmp_145 + tmp_141*tmp_93) + tmp_165*(-tmp_156*tmp_489 - tmp_160*tmp_164 + tmp_160*tmp_93) + tmp_184*(-tmp_175*tmp_489 - tmp_179*tmp_183 + tmp_179*tmp_93) + tmp_203*(-tmp_194*tmp_489 - tmp_198*tmp_202 + tmp_198*tmp_93) + tmp_222*(-tmp_213*tmp_489 - tmp_217*tmp_221 + tmp_217*tmp_93) + tmp_241*(-tmp_232*tmp_489 - tmp_236*tmp_240 + tmp_236*tmp_93) + tmp_260*(-tmp_251*tmp_489 - tmp_255*tmp_259 + tmp_255*tmp_93) + tmp_279*(-tmp_270*tmp_489 - tmp_274*tmp_278 + tmp_274*tmp_93) + tmp_298*(-tmp_289*tmp_489 - tmp_293*tmp_297 + tmp_293*tmp_93) + tmp_317*(-tmp_308*tmp_489 - tmp_312*tmp_316 + tmp_312*tmp_93) + tmp_336*(-tmp_327*tmp_489 - tmp_331*tmp_335 + tmp_331*tmp_93) + tmp_355*(-tmp_346*tmp_489 - tmp_350*tmp_354 + tmp_350*tmp_93) + tmp_374*(-tmp_365*tmp_489 - tmp_369*tmp_373 + tmp_369*tmp_93) + tmp_393*(-tmp_384*tmp_489 - tmp_388*tmp_392 + tmp_388*tmp_93) + tmp_412*(-tmp_403*tmp_489 - tmp_407*tmp_411 + tmp_407*tmp_93) + tmp_431*(-tmp_422*tmp_489 - tmp_426*tmp_430 + tmp_426*tmp_93) + tmp_450*(-tmp_441*tmp_489 - tmp_445*tmp_449 + tmp_445*tmp_93) + tmp_469*(-tmp_460*tmp_489 - tmp_464*tmp_468 + tmp_464*tmp_93) + tmp_488*(-tmp_479*tmp_489 - tmp_483*tmp_487 + tmp_483*tmp_93);
      real_t a_0_2 = tmp_108*(-tmp_101*tmp_106 + tmp_101*tmp_93 - tmp_45*tmp_490) + tmp_127*(-tmp_118*tmp_490 - tmp_123*tmp_126 + tmp_123*tmp_93) + tmp_146*(-tmp_137*tmp_490 - tmp_142*tmp_145 + tmp_142*tmp_93) + tmp_165*(-tmp_156*tmp_490 - tmp_161*tmp_164 + tmp_161*tmp_93) + tmp_184*(-tmp_175*tmp_490 - tmp_180*tmp_183 + tmp_180*tmp_93) + tmp_203*(-tmp_194*tmp_490 - tmp_199*tmp_202 + tmp_199*tmp_93) + tmp_222*(-tmp_213*tmp_490 - tmp_218*tmp_221 + tmp_218*tmp_93) + tmp_241*(-tmp_232*tmp_490 - tmp_237*tmp_240 + tmp_237*tmp_93) + tmp_260*(-tmp_251*tmp_490 - tmp_256*tmp_259 + tmp_256*tmp_93) + tmp_279*(-tmp_270*tmp_490 - tmp_275*tmp_278 + tmp_275*tmp_93) + tmp_298*(-tmp_289*tmp_490 - tmp_294*tmp_297 + tmp_294*tmp_93) + tmp_317*(-tmp_308*tmp_490 - tmp_313*tmp_316 + tmp_313*tmp_93) + tmp_336*(-tmp_327*tmp_490 - tmp_332*tmp_335 + tmp_332*tmp_93) + tmp_355*(-tmp_346*tmp_490 - tmp_351*tmp_354 + tmp_351*tmp_93) + tmp_374*(-tmp_365*tmp_490 - tmp_370*tmp_373 + tmp_370*tmp_93) + tmp_393*(-tmp_384*tmp_490 - tmp_389*tmp_392 + tmp_389*tmp_93) + tmp_412*(-tmp_403*tmp_490 - tmp_408*tmp_411 + tmp_408*tmp_93) + tmp_431*(-tmp_422*tmp_490 - tmp_427*tmp_430 + tmp_427*tmp_93) + tmp_450*(-tmp_441*tmp_490 - tmp_446*tmp_449 + tmp_446*tmp_93) + tmp_469*(-tmp_460*tmp_490 - tmp_465*tmp_468 + tmp_465*tmp_93) + tmp_488*(-tmp_479*tmp_490 - tmp_484*tmp_487 + tmp_484*tmp_93);
      real_t a_0_3 = tmp_108*(-tmp_102*tmp_106 + tmp_102*tmp_93 - tmp_45*tmp_491) + tmp_127*(-tmp_118*tmp_491 - tmp_124*tmp_126 + tmp_124*tmp_93) + tmp_146*(-tmp_137*tmp_491 - tmp_143*tmp_145 + tmp_143*tmp_93) + tmp_165*(-tmp_156*tmp_491 - tmp_162*tmp_164 + tmp_162*tmp_93) + tmp_184*(-tmp_175*tmp_491 - tmp_181*tmp_183 + tmp_181*tmp_93) + tmp_203*(-tmp_194*tmp_491 - tmp_200*tmp_202 + tmp_200*tmp_93) + tmp_222*(-tmp_213*tmp_491 - tmp_219*tmp_221 + tmp_219*tmp_93) + tmp_241*(-tmp_232*tmp_491 - tmp_238*tmp_240 + tmp_238*tmp_93) + tmp_260*(-tmp_251*tmp_491 - tmp_257*tmp_259 + tmp_257*tmp_93) + tmp_279*(-tmp_270*tmp_491 - tmp_276*tmp_278 + tmp_276*tmp_93) + tmp_298*(-tmp_289*tmp_491 - tmp_295*tmp_297 + tmp_295*tmp_93) + tmp_317*(-tmp_308*tmp_491 - tmp_314*tmp_316 + tmp_314*tmp_93) + tmp_336*(-tmp_327*tmp_491 - tmp_333*tmp_335 + tmp_333*tmp_93) + tmp_355*(-tmp_346*tmp_491 - tmp_352*tmp_354 + tmp_352*tmp_93) + tmp_374*(-tmp_365*tmp_491 - tmp_371*tmp_373 + tmp_371*tmp_93) + tmp_393*(-tmp_384*tmp_491 - tmp_390*tmp_392 + tmp_390*tmp_93) + tmp_412*(-tmp_403*tmp_491 - tmp_409*tmp_411 + tmp_409*tmp_93) + tmp_431*(-tmp_422*tmp_491 - tmp_428*tmp_430 + tmp_428*tmp_93) + tmp_450*(-tmp_441*tmp_491 - tmp_447*tmp_449 + tmp_447*tmp_93) + tmp_469*(-tmp_460*tmp_491 - tmp_466*tmp_468 + tmp_466*tmp_93) + tmp_488*(-tmp_479*tmp_491 - tmp_485*tmp_487 + tmp_485*tmp_93);
      real_t a_1_0 = tmp_108*(tmp_103*tmp_492 - tmp_103*tmp_493 - tmp_36*tmp_81) + tmp_127*(-tmp_115*tmp_81 + tmp_125*tmp_492 - tmp_125*tmp_494) + tmp_146*(-tmp_134*tmp_81 + tmp_144*tmp_492 - tmp_144*tmp_495) + tmp_165*(-tmp_153*tmp_81 + tmp_163*tmp_492 - tmp_163*tmp_496) + tmp_184*(-tmp_172*tmp_81 + tmp_182*tmp_492 - tmp_182*tmp_497) + tmp_203*(-tmp_191*tmp_81 + tmp_201*tmp_492 - tmp_201*tmp_498) + tmp_222*(-tmp_210*tmp_81 + tmp_220*tmp_492 - tmp_220*tmp_499) + tmp_241*(-tmp_229*tmp_81 + tmp_239*tmp_492 - tmp_239*tmp_500) + tmp_260*(-tmp_248*tmp_81 + tmp_258*tmp_492 - tmp_258*tmp_501) + tmp_279*(-tmp_267*tmp_81 + tmp_277*tmp_492 - tmp_277*tmp_502) + tmp_298*(-tmp_286*tmp_81 + tmp_296*tmp_492 - tmp_296*tmp_503) + tmp_317*(-tmp_305*tmp_81 + tmp_315*tmp_492 - tmp_315*tmp_504) + tmp_336*(-tmp_324*tmp_81 + tmp_334*tmp_492 - tmp_334*tmp_505) + tmp_355*(-tmp_343*tmp_81 + tmp_353*tmp_492 - tmp_353*tmp_506) + tmp_374*(-tmp_362*tmp_81 + tmp_372*tmp_492 - tmp_372*tmp_507) + tmp_393*(-tmp_381*tmp_81 + tmp_391*tmp_492 - tmp_391*tmp_508) + tmp_412*(-tmp_400*tmp_81 + tmp_410*tmp_492 - tmp_410*tmp_509) + tmp_431*(-tmp_419*tmp_81 + tmp_429*tmp_492 - tmp_429*tmp_510) + tmp_450*(-tmp_438*tmp_81 + tmp_448*tmp_492 - tmp_448*tmp_511) + tmp_469*(-tmp_457*tmp_81 + tmp_467*tmp_492 - tmp_467*tmp_512) + tmp_488*(-tmp_476*tmp_81 + tmp_486*tmp_492 - tmp_486*tmp_513);
      real_t a_1_1 = tmp_108*(tmp_100*tmp_492 - tmp_100*tmp_493 - tmp_36*tmp_489) + tmp_127*(-tmp_115*tmp_489 + tmp_122*tmp_492 - tmp_122*tmp_494) + tmp_146*(-tmp_134*tmp_489 + tmp_141*tmp_492 - tmp_141*tmp_495) + tmp_165*(-tmp_153*tmp_489 + tmp_160*tmp_492 - tmp_160*tmp_496) + tmp_184*(-tmp_172*tmp_489 + tmp_179*tmp_492 - tmp_179*tmp_497) + tmp_203*(-tmp_191*tmp_489 + tmp_198*tmp_492 - tmp_198*tmp_498) + tmp_222*(-tmp_210*tmp_489 + tmp_217*tmp_492 - tmp_217*tmp_499) + tmp_241*(-tmp_229*tmp_489 + tmp_236*tmp_492 - tmp_236*tmp_500) + tmp_260*(-tmp_248*tmp_489 + tmp_255*tmp_492 - tmp_255*tmp_501) + tmp_279*(-tmp_267*tmp_489 + tmp_274*tmp_492 - tmp_274*tmp_502) + tmp_298*(-tmp_286*tmp_489 + tmp_293*tmp_492 - tmp_293*tmp_503) + tmp_317*(-tmp_305*tmp_489 + tmp_312*tmp_492 - tmp_312*tmp_504) + tmp_336*(-tmp_324*tmp_489 + tmp_331*tmp_492 - tmp_331*tmp_505) + tmp_355*(-tmp_343*tmp_489 + tmp_350*tmp_492 - tmp_350*tmp_506) + tmp_374*(-tmp_362*tmp_489 + tmp_369*tmp_492 - tmp_369*tmp_507) + tmp_393*(-tmp_381*tmp_489 + tmp_388*tmp_492 - tmp_388*tmp_508) + tmp_412*(-tmp_400*tmp_489 + tmp_407*tmp_492 - tmp_407*tmp_509) + tmp_431*(-tmp_419*tmp_489 + tmp_426*tmp_492 - tmp_426*tmp_510) + tmp_450*(-tmp_438*tmp_489 + tmp_445*tmp_492 - tmp_445*tmp_511) + tmp_469*(-tmp_457*tmp_489 + tmp_464*tmp_492 - tmp_464*tmp_512) + tmp_488*(-tmp_476*tmp_489 + tmp_483*tmp_492 - tmp_483*tmp_513);
      real_t a_1_2 = tmp_108*(tmp_101*tmp_492 - tmp_101*tmp_493 - tmp_36*tmp_490) + tmp_127*(-tmp_115*tmp_490 + tmp_123*tmp_492 - tmp_123*tmp_494) + tmp_146*(-tmp_134*tmp_490 + tmp_142*tmp_492 - tmp_142*tmp_495) + tmp_165*(-tmp_153*tmp_490 + tmp_161*tmp_492 - tmp_161*tmp_496) + tmp_184*(-tmp_172*tmp_490 + tmp_180*tmp_492 - tmp_180*tmp_497) + tmp_203*(-tmp_191*tmp_490 + tmp_199*tmp_492 - tmp_199*tmp_498) + tmp_222*(-tmp_210*tmp_490 + tmp_218*tmp_492 - tmp_218*tmp_499) + tmp_241*(-tmp_229*tmp_490 + tmp_237*tmp_492 - tmp_237*tmp_500) + tmp_260*(-tmp_248*tmp_490 + tmp_256*tmp_492 - tmp_256*tmp_501) + tmp_279*(-tmp_267*tmp_490 + tmp_275*tmp_492 - tmp_275*tmp_502) + tmp_298*(-tmp_286*tmp_490 + tmp_294*tmp_492 - tmp_294*tmp_503) + tmp_317*(-tmp_305*tmp_490 + tmp_313*tmp_492 - tmp_313*tmp_504) + tmp_336*(-tmp_324*tmp_490 + tmp_332*tmp_492 - tmp_332*tmp_505) + tmp_355*(-tmp_343*tmp_490 + tmp_351*tmp_492 - tmp_351*tmp_506) + tmp_374*(-tmp_362*tmp_490 + tmp_370*tmp_492 - tmp_370*tmp_507) + tmp_393*(-tmp_381*tmp_490 + tmp_389*tmp_492 - tmp_389*tmp_508) + tmp_412*(-tmp_400*tmp_490 + tmp_408*tmp_492 - tmp_408*tmp_509) + tmp_431*(-tmp_419*tmp_490 + tmp_427*tmp_492 - tmp_427*tmp_510) + tmp_450*(-tmp_438*tmp_490 + tmp_446*tmp_492 - tmp_446*tmp_511) + tmp_469*(-tmp_457*tmp_490 + tmp_465*tmp_492 - tmp_465*tmp_512) + tmp_488*(-tmp_476*tmp_490 + tmp_484*tmp_492 - tmp_484*tmp_513);
      real_t a_1_3 = tmp_108*(tmp_102*tmp_492 - tmp_102*tmp_493 - tmp_36*tmp_491) + tmp_127*(-tmp_115*tmp_491 + tmp_124*tmp_492 - tmp_124*tmp_494) + tmp_146*(-tmp_134*tmp_491 + tmp_143*tmp_492 - tmp_143*tmp_495) + tmp_165*(-tmp_153*tmp_491 + tmp_162*tmp_492 - tmp_162*tmp_496) + tmp_184*(-tmp_172*tmp_491 + tmp_181*tmp_492 - tmp_181*tmp_497) + tmp_203*(-tmp_191*tmp_491 + tmp_200*tmp_492 - tmp_200*tmp_498) + tmp_222*(-tmp_210*tmp_491 + tmp_219*tmp_492 - tmp_219*tmp_499) + tmp_241*(-tmp_229*tmp_491 + tmp_238*tmp_492 - tmp_238*tmp_500) + tmp_260*(-tmp_248*tmp_491 + tmp_257*tmp_492 - tmp_257*tmp_501) + tmp_279*(-tmp_267*tmp_491 + tmp_276*tmp_492 - tmp_276*tmp_502) + tmp_298*(-tmp_286*tmp_491 + tmp_295*tmp_492 - tmp_295*tmp_503) + tmp_317*(-tmp_305*tmp_491 + tmp_314*tmp_492 - tmp_314*tmp_504) + tmp_336*(-tmp_324*tmp_491 + tmp_333*tmp_492 - tmp_333*tmp_505) + tmp_355*(-tmp_343*tmp_491 + tmp_352*tmp_492 - tmp_352*tmp_506) + tmp_374*(-tmp_362*tmp_491 + tmp_371*tmp_492 - tmp_371*tmp_507) + tmp_393*(-tmp_381*tmp_491 + tmp_390*tmp_492 - tmp_390*tmp_508) + tmp_412*(-tmp_400*tmp_491 + tmp_409*tmp_492 - tmp_409*tmp_509) + tmp_431*(-tmp_419*tmp_491 + tmp_428*tmp_492 - tmp_428*tmp_510) + tmp_450*(-tmp_438*tmp_491 + tmp_447*tmp_492 - tmp_447*tmp_511) + tmp_469*(-tmp_457*tmp_491 + tmp_466*tmp_492 - tmp_466*tmp_512) + tmp_488*(-tmp_476*tmp_491 + tmp_485*tmp_492 - tmp_485*tmp_513);
      real_t a_2_0 = tmp_108*(tmp_103*tmp_514 - tmp_103*tmp_515 - tmp_40*tmp_81) + tmp_127*(-tmp_116*tmp_81 + tmp_125*tmp_514 - tmp_125*tmp_516) + tmp_146*(-tmp_135*tmp_81 + tmp_144*tmp_514 - tmp_144*tmp_517) + tmp_165*(-tmp_154*tmp_81 + tmp_163*tmp_514 - tmp_163*tmp_518) + tmp_184*(-tmp_173*tmp_81 + tmp_182*tmp_514 - tmp_182*tmp_519) + tmp_203*(-tmp_192*tmp_81 + tmp_201*tmp_514 - tmp_201*tmp_520) + tmp_222*(-tmp_211*tmp_81 + tmp_220*tmp_514 - tmp_220*tmp_521) + tmp_241*(-tmp_230*tmp_81 + tmp_239*tmp_514 - tmp_239*tmp_522) + tmp_260*(-tmp_249*tmp_81 + tmp_258*tmp_514 - tmp_258*tmp_523) + tmp_279*(-tmp_268*tmp_81 + tmp_277*tmp_514 - tmp_277*tmp_524) + tmp_298*(-tmp_287*tmp_81 + tmp_296*tmp_514 - tmp_296*tmp_525) + tmp_317*(-tmp_306*tmp_81 + tmp_315*tmp_514 - tmp_315*tmp_526) + tmp_336*(-tmp_325*tmp_81 + tmp_334*tmp_514 - tmp_334*tmp_527) + tmp_355*(-tmp_344*tmp_81 + tmp_353*tmp_514 - tmp_353*tmp_528) + tmp_374*(-tmp_363*tmp_81 + tmp_372*tmp_514 - tmp_372*tmp_529) + tmp_393*(-tmp_382*tmp_81 + tmp_391*tmp_514 - tmp_391*tmp_530) + tmp_412*(-tmp_401*tmp_81 + tmp_410*tmp_514 - tmp_410*tmp_531) + tmp_431*(-tmp_420*tmp_81 + tmp_429*tmp_514 - tmp_429*tmp_532) + tmp_450*(-tmp_439*tmp_81 + tmp_448*tmp_514 - tmp_448*tmp_533) + tmp_469*(-tmp_458*tmp_81 + tmp_467*tmp_514 - tmp_467*tmp_534) + tmp_488*(-tmp_477*tmp_81 + tmp_486*tmp_514 - tmp_486*tmp_535);
      real_t a_2_1 = tmp_108*(tmp_100*tmp_514 - tmp_100*tmp_515 - tmp_40*tmp_489) + tmp_127*(-tmp_116*tmp_489 + tmp_122*tmp_514 - tmp_122*tmp_516) + tmp_146*(-tmp_135*tmp_489 + tmp_141*tmp_514 - tmp_141*tmp_517) + tmp_165*(-tmp_154*tmp_489 + tmp_160*tmp_514 - tmp_160*tmp_518) + tmp_184*(-tmp_173*tmp_489 + tmp_179*tmp_514 - tmp_179*tmp_519) + tmp_203*(-tmp_192*tmp_489 + tmp_198*tmp_514 - tmp_198*tmp_520) + tmp_222*(-tmp_211*tmp_489 + tmp_217*tmp_514 - tmp_217*tmp_521) + tmp_241*(-tmp_230*tmp_489 + tmp_236*tmp_514 - tmp_236*tmp_522) + tmp_260*(-tmp_249*tmp_489 + tmp_255*tmp_514 - tmp_255*tmp_523) + tmp_279*(-tmp_268*tmp_489 + tmp_274*tmp_514 - tmp_274*tmp_524) + tmp_298*(-tmp_287*tmp_489 + tmp_293*tmp_514 - tmp_293*tmp_525) + tmp_317*(-tmp_306*tmp_489 + tmp_312*tmp_514 - tmp_312*tmp_526) + tmp_336*(-tmp_325*tmp_489 + tmp_331*tmp_514 - tmp_331*tmp_527) + tmp_355*(-tmp_344*tmp_489 + tmp_350*tmp_514 - tmp_350*tmp_528) + tmp_374*(-tmp_363*tmp_489 + tmp_369*tmp_514 - tmp_369*tmp_529) + tmp_393*(-tmp_382*tmp_489 + tmp_388*tmp_514 - tmp_388*tmp_530) + tmp_412*(-tmp_401*tmp_489 + tmp_407*tmp_514 - tmp_407*tmp_531) + tmp_431*(-tmp_420*tmp_489 + tmp_426*tmp_514 - tmp_426*tmp_532) + tmp_450*(-tmp_439*tmp_489 + tmp_445*tmp_514 - tmp_445*tmp_533) + tmp_469*(-tmp_458*tmp_489 + tmp_464*tmp_514 - tmp_464*tmp_534) + tmp_488*(-tmp_477*tmp_489 + tmp_483*tmp_514 - tmp_483*tmp_535);
      real_t a_2_2 = tmp_108*(tmp_101*tmp_514 - tmp_101*tmp_515 - tmp_40*tmp_490) + tmp_127*(-tmp_116*tmp_490 + tmp_123*tmp_514 - tmp_123*tmp_516) + tmp_146*(-tmp_135*tmp_490 + tmp_142*tmp_514 - tmp_142*tmp_517) + tmp_165*(-tmp_154*tmp_490 + tmp_161*tmp_514 - tmp_161*tmp_518) + tmp_184*(-tmp_173*tmp_490 + tmp_180*tmp_514 - tmp_180*tmp_519) + tmp_203*(-tmp_192*tmp_490 + tmp_199*tmp_514 - tmp_199*tmp_520) + tmp_222*(-tmp_211*tmp_490 + tmp_218*tmp_514 - tmp_218*tmp_521) + tmp_241*(-tmp_230*tmp_490 + tmp_237*tmp_514 - tmp_237*tmp_522) + tmp_260*(-tmp_249*tmp_490 + tmp_256*tmp_514 - tmp_256*tmp_523) + tmp_279*(-tmp_268*tmp_490 + tmp_275*tmp_514 - tmp_275*tmp_524) + tmp_298*(-tmp_287*tmp_490 + tmp_294*tmp_514 - tmp_294*tmp_525) + tmp_317*(-tmp_306*tmp_490 + tmp_313*tmp_514 - tmp_313*tmp_526) + tmp_336*(-tmp_325*tmp_490 + tmp_332*tmp_514 - tmp_332*tmp_527) + tmp_355*(-tmp_344*tmp_490 + tmp_351*tmp_514 - tmp_351*tmp_528) + tmp_374*(-tmp_363*tmp_490 + tmp_370*tmp_514 - tmp_370*tmp_529) + tmp_393*(-tmp_382*tmp_490 + tmp_389*tmp_514 - tmp_389*tmp_530) + tmp_412*(-tmp_401*tmp_490 + tmp_408*tmp_514 - tmp_408*tmp_531) + tmp_431*(-tmp_420*tmp_490 + tmp_427*tmp_514 - tmp_427*tmp_532) + tmp_450*(-tmp_439*tmp_490 + tmp_446*tmp_514 - tmp_446*tmp_533) + tmp_469*(-tmp_458*tmp_490 + tmp_465*tmp_514 - tmp_465*tmp_534) + tmp_488*(-tmp_477*tmp_490 + tmp_484*tmp_514 - tmp_484*tmp_535);
      real_t a_2_3 = tmp_108*(tmp_102*tmp_514 - tmp_102*tmp_515 - tmp_40*tmp_491) + tmp_127*(-tmp_116*tmp_491 + tmp_124*tmp_514 - tmp_124*tmp_516) + tmp_146*(-tmp_135*tmp_491 + tmp_143*tmp_514 - tmp_143*tmp_517) + tmp_165*(-tmp_154*tmp_491 + tmp_162*tmp_514 - tmp_162*tmp_518) + tmp_184*(-tmp_173*tmp_491 + tmp_181*tmp_514 - tmp_181*tmp_519) + tmp_203*(-tmp_192*tmp_491 + tmp_200*tmp_514 - tmp_200*tmp_520) + tmp_222*(-tmp_211*tmp_491 + tmp_219*tmp_514 - tmp_219*tmp_521) + tmp_241*(-tmp_230*tmp_491 + tmp_238*tmp_514 - tmp_238*tmp_522) + tmp_260*(-tmp_249*tmp_491 + tmp_257*tmp_514 - tmp_257*tmp_523) + tmp_279*(-tmp_268*tmp_491 + tmp_276*tmp_514 - tmp_276*tmp_524) + tmp_298*(-tmp_287*tmp_491 + tmp_295*tmp_514 - tmp_295*tmp_525) + tmp_317*(-tmp_306*tmp_491 + tmp_314*tmp_514 - tmp_314*tmp_526) + tmp_336*(-tmp_325*tmp_491 + tmp_333*tmp_514 - tmp_333*tmp_527) + tmp_355*(-tmp_344*tmp_491 + tmp_352*tmp_514 - tmp_352*tmp_528) + tmp_374*(-tmp_363*tmp_491 + tmp_371*tmp_514 - tmp_371*tmp_529) + tmp_393*(-tmp_382*tmp_491 + tmp_390*tmp_514 - tmp_390*tmp_530) + tmp_412*(-tmp_401*tmp_491 + tmp_409*tmp_514 - tmp_409*tmp_531) + tmp_431*(-tmp_420*tmp_491 + tmp_428*tmp_514 - tmp_428*tmp_532) + tmp_450*(-tmp_439*tmp_491 + tmp_447*tmp_514 - tmp_447*tmp_533) + tmp_469*(-tmp_458*tmp_491 + tmp_466*tmp_514 - tmp_466*tmp_534) + tmp_488*(-tmp_477*tmp_491 + tmp_485*tmp_514 - tmp_485*tmp_535);
      real_t a_3_0 = tmp_108*(tmp_103*tmp_536 - tmp_103*tmp_537 - tmp_44*tmp_81) + tmp_127*(-tmp_117*tmp_81 + tmp_125*tmp_536 - tmp_125*tmp_538) + tmp_146*(-tmp_136*tmp_81 + tmp_144*tmp_536 - tmp_144*tmp_539) + tmp_165*(-tmp_155*tmp_81 + tmp_163*tmp_536 - tmp_163*tmp_540) + tmp_184*(-tmp_174*tmp_81 + tmp_182*tmp_536 - tmp_182*tmp_541) + tmp_203*(-tmp_193*tmp_81 + tmp_201*tmp_536 - tmp_201*tmp_542) + tmp_222*(-tmp_212*tmp_81 + tmp_220*tmp_536 - tmp_220*tmp_543) + tmp_241*(-tmp_231*tmp_81 + tmp_239*tmp_536 - tmp_239*tmp_544) + tmp_260*(-tmp_250*tmp_81 + tmp_258*tmp_536 - tmp_258*tmp_545) + tmp_279*(-tmp_269*tmp_81 + tmp_277*tmp_536 - tmp_277*tmp_546) + tmp_298*(-tmp_288*tmp_81 + tmp_296*tmp_536 - tmp_296*tmp_547) + tmp_317*(-tmp_307*tmp_81 + tmp_315*tmp_536 - tmp_315*tmp_548) + tmp_336*(-tmp_326*tmp_81 + tmp_334*tmp_536 - tmp_334*tmp_549) + tmp_355*(-tmp_345*tmp_81 + tmp_353*tmp_536 - tmp_353*tmp_550) + tmp_374*(-tmp_364*tmp_81 + tmp_372*tmp_536 - tmp_372*tmp_551) + tmp_393*(-tmp_383*tmp_81 + tmp_391*tmp_536 - tmp_391*tmp_552) + tmp_412*(-tmp_402*tmp_81 + tmp_410*tmp_536 - tmp_410*tmp_553) + tmp_431*(-tmp_421*tmp_81 + tmp_429*tmp_536 - tmp_429*tmp_554) + tmp_450*(-tmp_440*tmp_81 + tmp_448*tmp_536 - tmp_448*tmp_555) + tmp_469*(-tmp_459*tmp_81 + tmp_467*tmp_536 - tmp_467*tmp_556) + tmp_488*(-tmp_478*tmp_81 + tmp_486*tmp_536 - tmp_486*tmp_557);
      real_t a_3_1 = tmp_108*(tmp_100*tmp_536 - tmp_100*tmp_537 - tmp_44*tmp_489) + tmp_127*(-tmp_117*tmp_489 + tmp_122*tmp_536 - tmp_122*tmp_538) + tmp_146*(-tmp_136*tmp_489 + tmp_141*tmp_536 - tmp_141*tmp_539) + tmp_165*(-tmp_155*tmp_489 + tmp_160*tmp_536 - tmp_160*tmp_540) + tmp_184*(-tmp_174*tmp_489 + tmp_179*tmp_536 - tmp_179*tmp_541) + tmp_203*(-tmp_193*tmp_489 + tmp_198*tmp_536 - tmp_198*tmp_542) + tmp_222*(-tmp_212*tmp_489 + tmp_217*tmp_536 - tmp_217*tmp_543) + tmp_241*(-tmp_231*tmp_489 + tmp_236*tmp_536 - tmp_236*tmp_544) + tmp_260*(-tmp_250*tmp_489 + tmp_255*tmp_536 - tmp_255*tmp_545) + tmp_279*(-tmp_269*tmp_489 + tmp_274*tmp_536 - tmp_274*tmp_546) + tmp_298*(-tmp_288*tmp_489 + tmp_293*tmp_536 - tmp_293*tmp_547) + tmp_317*(-tmp_307*tmp_489 + tmp_312*tmp_536 - tmp_312*tmp_548) + tmp_336*(-tmp_326*tmp_489 + tmp_331*tmp_536 - tmp_331*tmp_549) + tmp_355*(-tmp_345*tmp_489 + tmp_350*tmp_536 - tmp_350*tmp_550) + tmp_374*(-tmp_364*tmp_489 + tmp_369*tmp_536 - tmp_369*tmp_551) + tmp_393*(-tmp_383*tmp_489 + tmp_388*tmp_536 - tmp_388*tmp_552) + tmp_412*(-tmp_402*tmp_489 + tmp_407*tmp_536 - tmp_407*tmp_553) + tmp_431*(-tmp_421*tmp_489 + tmp_426*tmp_536 - tmp_426*tmp_554) + tmp_450*(-tmp_440*tmp_489 + tmp_445*tmp_536 - tmp_445*tmp_555) + tmp_469*(-tmp_459*tmp_489 + tmp_464*tmp_536 - tmp_464*tmp_556) + tmp_488*(-tmp_478*tmp_489 + tmp_483*tmp_536 - tmp_483*tmp_557);
      real_t a_3_2 = tmp_108*(tmp_101*tmp_536 - tmp_101*tmp_537 - tmp_44*tmp_490) + tmp_127*(-tmp_117*tmp_490 + tmp_123*tmp_536 - tmp_123*tmp_538) + tmp_146*(-tmp_136*tmp_490 + tmp_142*tmp_536 - tmp_142*tmp_539) + tmp_165*(-tmp_155*tmp_490 + tmp_161*tmp_536 - tmp_161*tmp_540) + tmp_184*(-tmp_174*tmp_490 + tmp_180*tmp_536 - tmp_180*tmp_541) + tmp_203*(-tmp_193*tmp_490 + tmp_199*tmp_536 - tmp_199*tmp_542) + tmp_222*(-tmp_212*tmp_490 + tmp_218*tmp_536 - tmp_218*tmp_543) + tmp_241*(-tmp_231*tmp_490 + tmp_237*tmp_536 - tmp_237*tmp_544) + tmp_260*(-tmp_250*tmp_490 + tmp_256*tmp_536 - tmp_256*tmp_545) + tmp_279*(-tmp_269*tmp_490 + tmp_275*tmp_536 - tmp_275*tmp_546) + tmp_298*(-tmp_288*tmp_490 + tmp_294*tmp_536 - tmp_294*tmp_547) + tmp_317*(-tmp_307*tmp_490 + tmp_313*tmp_536 - tmp_313*tmp_548) + tmp_336*(-tmp_326*tmp_490 + tmp_332*tmp_536 - tmp_332*tmp_549) + tmp_355*(-tmp_345*tmp_490 + tmp_351*tmp_536 - tmp_351*tmp_550) + tmp_374*(-tmp_364*tmp_490 + tmp_370*tmp_536 - tmp_370*tmp_551) + tmp_393*(-tmp_383*tmp_490 + tmp_389*tmp_536 - tmp_389*tmp_552) + tmp_412*(-tmp_402*tmp_490 + tmp_408*tmp_536 - tmp_408*tmp_553) + tmp_431*(-tmp_421*tmp_490 + tmp_427*tmp_536 - tmp_427*tmp_554) + tmp_450*(-tmp_440*tmp_490 + tmp_446*tmp_536 - tmp_446*tmp_555) + tmp_469*(-tmp_459*tmp_490 + tmp_465*tmp_536 - tmp_465*tmp_556) + tmp_488*(-tmp_478*tmp_490 + tmp_484*tmp_536 - tmp_484*tmp_557);
      real_t a_3_3 = tmp_108*(tmp_102*tmp_536 - tmp_102*tmp_537 - tmp_44*tmp_491) + tmp_127*(-tmp_117*tmp_491 + tmp_124*tmp_536 - tmp_124*tmp_538) + tmp_146*(-tmp_136*tmp_491 + tmp_143*tmp_536 - tmp_143*tmp_539) + tmp_165*(-tmp_155*tmp_491 + tmp_162*tmp_536 - tmp_162*tmp_540) + tmp_184*(-tmp_174*tmp_491 + tmp_181*tmp_536 - tmp_181*tmp_541) + tmp_203*(-tmp_193*tmp_491 + tmp_200*tmp_536 - tmp_200*tmp_542) + tmp_222*(-tmp_212*tmp_491 + tmp_219*tmp_536 - tmp_219*tmp_543) + tmp_241*(-tmp_231*tmp_491 + tmp_238*tmp_536 - tmp_238*tmp_544) + tmp_260*(-tmp_250*tmp_491 + tmp_257*tmp_536 - tmp_257*tmp_545) + tmp_279*(-tmp_269*tmp_491 + tmp_276*tmp_536 - tmp_276*tmp_546) + tmp_298*(-tmp_288*tmp_491 + tmp_295*tmp_536 - tmp_295*tmp_547) + tmp_317*(-tmp_307*tmp_491 + tmp_314*tmp_536 - tmp_314*tmp_548) + tmp_336*(-tmp_326*tmp_491 + tmp_333*tmp_536 - tmp_333*tmp_549) + tmp_355*(-tmp_345*tmp_491 + tmp_352*tmp_536 - tmp_352*tmp_550) + tmp_374*(-tmp_364*tmp_491 + tmp_371*tmp_536 - tmp_371*tmp_551) + tmp_393*(-tmp_383*tmp_491 + tmp_390*tmp_536 - tmp_390*tmp_552) + tmp_412*(-tmp_402*tmp_491 + tmp_409*tmp_536 - tmp_409*tmp_553) + tmp_431*(-tmp_421*tmp_491 + tmp_428*tmp_536 - tmp_428*tmp_554) + tmp_450*(-tmp_440*tmp_491 + tmp_447*tmp_536 - tmp_447*tmp_555) + tmp_469*(-tmp_459*tmp_491 + tmp_466*tmp_536 - tmp_466*tmp_556) + tmp_488*(-tmp_478*tmp_491 + tmp_485*tmp_536 - tmp_485*tmp_557);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_14 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_18*tmp_9;
      real_t tmp_21 = tmp_14*tmp_17;
      real_t tmp_22 = tmp_11*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_10*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_20 + tmp_16*tmp_8*tmp_9 - tmp_21*tmp_8);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_14*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_15 - tmp_20;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_13*tmp_9;
      real_t tmp_37 = -tmp_10*tmp_16 + tmp_13*tmp_14;
      real_t tmp_38 = tmp_16*tmp_9 - tmp_21;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_11*tmp_13 - tmp_17*tmp_8;
      real_t tmp_41 = -tmp_13*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = tmp_19 - tmp_22;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 1.0*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = 0.5*tmp_23;
      real_t tmp_50 = tmp_41*tmp_49;
      real_t tmp_51 = tmp_37*tmp_49;
      real_t tmp_52 = tmp_27*tmp_49;
      real_t tmp_53 = tmp_40*tmp_49;
      real_t tmp_54 = tmp_36*tmp_49;
      real_t tmp_55 = tmp_12*tmp_49;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_50 - tmp_51 - tmp_52) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2*tmp_56;
      real_t tmp_58 = 2.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_52 + p_affine_13_2*tmp_55;
      real_t tmp_221 = tmp_107*(7.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_56 - tmp_106*tmp_220) + tmp_115*(7.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_56 - tmp_114*tmp_220) + tmp_123*(7.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_56 - tmp_122*tmp_220) + tmp_131*(7.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_56 - tmp_130*tmp_220) + tmp_139*(7.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_56 - tmp_138*tmp_220) + tmp_147*(7.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_56 - tmp_146*tmp_220) + tmp_155*(7.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_56 - tmp_154*tmp_220) + tmp_163*(7.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_56 - tmp_162*tmp_220) + tmp_171*(7.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_56 - tmp_170*tmp_220) + tmp_179*(7.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_56 - tmp_178*tmp_220) + tmp_187*(7.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_56 - tmp_186*tmp_220) + tmp_195*(7.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_56 - tmp_194*tmp_220) + tmp_203*(7.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_56 - tmp_202*tmp_220) + tmp_211*(7.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_56 - tmp_210*tmp_220) + tmp_219*(7.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_56 - tmp_218*tmp_220) + tmp_59*(-tmp_220*tmp_44 + 7.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_56) + tmp_67*(-tmp_220*tmp_66 - tmp_56*tmp_63 + 7.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_74 - tmp_56*tmp_71 + 7.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_82 - tmp_56*tmp_79 + 7.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_90 - tmp_56*tmp_87 + 7.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_98 - tmp_56*tmp_95 + 7.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_222 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_54;
      real_t tmp_223 = tmp_107*(7.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_56 - tmp_106*tmp_222) + tmp_115*(7.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_56 - tmp_114*tmp_222) + tmp_123*(7.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_56 - tmp_122*tmp_222) + tmp_131*(7.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_56 - tmp_130*tmp_222) + tmp_139*(7.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_56 - tmp_138*tmp_222) + tmp_147*(7.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_56 - tmp_146*tmp_222) + tmp_155*(7.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_56 - tmp_154*tmp_222) + tmp_163*(7.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_56 - tmp_162*tmp_222) + tmp_171*(7.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_56 - tmp_170*tmp_222) + tmp_179*(7.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_56 - tmp_178*tmp_222) + tmp_187*(7.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_56 - tmp_186*tmp_222) + tmp_195*(7.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_56 - tmp_194*tmp_222) + tmp_203*(7.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_56 - tmp_202*tmp_222) + tmp_211*(7.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_56 - tmp_210*tmp_222) + tmp_219*(7.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_56 - tmp_218*tmp_222) + tmp_59*(-tmp_222*tmp_44 + 7.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_56) + tmp_67*(-tmp_222*tmp_66 - tmp_56*tmp_64 + 7.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_222*tmp_74 - tmp_56*tmp_72 + 7.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_222*tmp_82 - tmp_56*tmp_80 + 7.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_222*tmp_90 - tmp_56*tmp_88 + 7.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_222*tmp_98 - tmp_56*tmp_96 + 7.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_53;
      real_t tmp_225 = tmp_107*(7.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_56 - tmp_106*tmp_224) + tmp_115*(7.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_56 - tmp_114*tmp_224) + tmp_123*(7.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_56 - tmp_122*tmp_224) + tmp_131*(7.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_56 - tmp_130*tmp_224) + tmp_139*(7.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_56 - tmp_138*tmp_224) + tmp_147*(7.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_56 - tmp_146*tmp_224) + tmp_155*(7.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_56 - tmp_154*tmp_224) + tmp_163*(7.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_56 - tmp_162*tmp_224) + tmp_171*(7.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_56 - tmp_170*tmp_224) + tmp_179*(7.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_56 - tmp_178*tmp_224) + tmp_187*(7.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_56 - tmp_186*tmp_224) + tmp_195*(7.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_56 - tmp_194*tmp_224) + tmp_203*(7.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_56 - tmp_202*tmp_224) + tmp_211*(7.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_56 - tmp_210*tmp_224) + tmp_219*(7.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_56 - tmp_218*tmp_224) + tmp_59*(-tmp_224*tmp_44 + 7.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_56) + tmp_67*(-tmp_224*tmp_66 - tmp_56*tmp_65 + 7.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_224*tmp_74 - tmp_56*tmp_73 + 7.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_224*tmp_82 - tmp_56*tmp_81 + 7.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_224*tmp_90 - tmp_56*tmp_89 + 7.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_224*tmp_98 - tmp_56*tmp_97 + 7.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_226 = 2*tmp_220;
      real_t tmp_227 = tmp_107*(7.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_222 - tmp_104*tmp_220) + tmp_115*(7.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_222 - tmp_112*tmp_220) + tmp_123*(7.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_222 - tmp_120*tmp_220) + tmp_131*(7.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_222 - tmp_128*tmp_220) + tmp_139*(7.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_222 - tmp_136*tmp_220) + tmp_147*(7.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_222 - tmp_144*tmp_220) + tmp_155*(7.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_222 - tmp_152*tmp_220) + tmp_163*(7.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_222 - tmp_160*tmp_220) + tmp_171*(7.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_222 - tmp_168*tmp_220) + tmp_179*(7.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_222 - tmp_176*tmp_220) + tmp_187*(7.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_222 - tmp_184*tmp_220) + tmp_195*(7.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_222 - tmp_192*tmp_220) + tmp_203*(7.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_222 - tmp_200*tmp_220) + tmp_211*(7.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_222 - tmp_208*tmp_220) + tmp_219*(7.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_222 - tmp_216*tmp_220) + tmp_59*(-tmp_220*tmp_39 - tmp_222*tmp_35 + 7.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_222*tmp_63 + 7.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_222*tmp_71 + 7.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_220*tmp_80 - tmp_222*tmp_79 + 7.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_220*tmp_88 - tmp_222*tmp_87 + 7.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_220*tmp_96 - tmp_222*tmp_95 + 7.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_228 = tmp_107*(7.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_224 - tmp_105*tmp_220) + tmp_115*(7.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_224 - tmp_113*tmp_220) + tmp_123*(7.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_224 - tmp_121*tmp_220) + tmp_131*(7.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_224 - tmp_129*tmp_220) + tmp_139*(7.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_224 - tmp_137*tmp_220) + tmp_147*(7.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_224 - tmp_145*tmp_220) + tmp_155*(7.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_224 - tmp_153*tmp_220) + tmp_163*(7.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_224 - tmp_161*tmp_220) + tmp_171*(7.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_224 - tmp_169*tmp_220) + tmp_179*(7.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_224 - tmp_177*tmp_220) + tmp_187*(7.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_224 - tmp_185*tmp_220) + tmp_195*(7.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_224 - tmp_193*tmp_220) + tmp_203*(7.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_224 - tmp_201*tmp_220) + tmp_211*(7.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_224 - tmp_209*tmp_220) + tmp_219*(7.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_224 - tmp_217*tmp_220) + tmp_59*(-tmp_220*tmp_43 - tmp_224*tmp_35 + 7.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_224*tmp_63 + 7.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_224*tmp_71 + 7.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_220*tmp_81 - tmp_224*tmp_79 + 7.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_220*tmp_89 - tmp_224*tmp_87 + 7.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_220*tmp_97 - tmp_224*tmp_95 + 7.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_229 = 2*tmp_222;
      real_t tmp_230 = tmp_107*(7.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_224 - tmp_105*tmp_222) + tmp_115*(7.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_224 - tmp_113*tmp_222) + tmp_123*(7.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_224 - tmp_121*tmp_222) + tmp_131*(7.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_224 - tmp_129*tmp_222) + tmp_139*(7.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_224 - tmp_137*tmp_222) + tmp_147*(7.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_224 - tmp_145*tmp_222) + tmp_155*(7.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_224 - tmp_153*tmp_222) + tmp_163*(7.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_224 - tmp_161*tmp_222) + tmp_171*(7.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_224 - tmp_169*tmp_222) + tmp_179*(7.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_224 - tmp_177*tmp_222) + tmp_187*(7.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_224 - tmp_185*tmp_222) + tmp_195*(7.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_224 - tmp_193*tmp_222) + tmp_203*(7.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_224 - tmp_201*tmp_222) + tmp_211*(7.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_224 - tmp_209*tmp_222) + tmp_219*(7.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_224 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_224*tmp_39 + 7.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_224*tmp_64 + 7.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_224*tmp_72 + 7.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_224*tmp_80 + 7.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_224*tmp_88 + 7.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_224*tmp_96 + 7.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_231 = 2*tmp_224;
      real_t a_0_0 = tmp_107*(7.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(7.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(7.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(7.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(7.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(7.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(7.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(7.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(7.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(7.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(7.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(7.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(7.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(7.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(7.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(7.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 7.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 7.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 7.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 7.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 7.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_221;
      real_t a_0_2 = tmp_223;
      real_t a_0_3 = tmp_225;
      real_t a_1_0 = tmp_221;
      real_t a_1_1 = tmp_107*(7.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_226) + tmp_115*(7.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_226) + tmp_123*(7.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_226) + tmp_131*(7.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_226) + tmp_139*(7.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_226) + tmp_147*(7.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_226) + tmp_155*(7.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_226) + tmp_163*(7.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_226) + tmp_171*(7.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_226) + tmp_179*(7.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_226) + tmp_187*(7.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_226) + tmp_195*(7.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_226) + tmp_203*(7.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_226) + tmp_211*(7.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_226) + tmp_219*(7.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_226) + tmp_59*(-tmp_226*tmp_35 + 7.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_226*tmp_63 + 7.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_226*tmp_71 + 7.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_226*tmp_79 + 7.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_226*tmp_87 + 7.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_226*tmp_95 + 7.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_227;
      real_t a_1_3 = tmp_228;
      real_t a_2_0 = tmp_223;
      real_t a_2_1 = tmp_227;
      real_t a_2_2 = tmp_107*(7.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_229) + tmp_115*(7.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_229) + tmp_123*(7.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_229) + tmp_131*(7.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_229) + tmp_139*(7.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_229) + tmp_147*(7.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_229) + tmp_155*(7.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_229) + tmp_163*(7.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_229) + tmp_171*(7.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_229) + tmp_179*(7.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_229) + tmp_187*(7.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_229) + tmp_195*(7.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_229) + tmp_203*(7.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_229) + tmp_211*(7.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_229) + tmp_219*(7.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_229) + tmp_59*(-tmp_229*tmp_39 + 7.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_229*tmp_64 + 7.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_229*tmp_72 + 7.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_229*tmp_80 + 7.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_229*tmp_88 + 7.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_229*tmp_96 + 7.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_230;
      real_t a_3_0 = tmp_225;
      real_t a_3_1 = tmp_228;
      real_t a_3_2 = tmp_230;
      real_t a_3_3 = tmp_107*(7.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_231) + tmp_115*(7.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_231) + tmp_123*(7.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_231) + tmp_131*(7.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_231) + tmp_139*(7.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_231) + tmp_147*(7.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_231) + tmp_155*(7.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_231) + tmp_163*(7.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_231) + tmp_171*(7.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_231) + tmp_179*(7.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_231) + tmp_187*(7.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_231) + tmp_195*(7.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_231) + tmp_203*(7.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_231) + tmp_211*(7.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_231) + tmp_219*(7.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_231) + tmp_59*(-tmp_231*tmp_43 + 7.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_231*tmp_65 + 7.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_231*tmp_73 + 7.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_231*tmp_81 + 7.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_231*tmp_89 + 7.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_231*tmp_97 + 7.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g1;


private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_10 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_10()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = 1.0 / (tmp_5);
      real_t tmp_7 = 0.5*tmp_6;
      real_t tmp_8 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_9 = tmp_8*(-tmp_0*tmp_7 - tmp_4*tmp_7);
      real_t tmp_10 = 0.025422453185103409*tmp_9;
      real_t tmp_11 = 1.0*tmp_6;
      real_t tmp_12 = -tmp_1*tmp_11 - tmp_11*tmp_3;
      real_t tmp_13 = 2*tmp_12;
      real_t tmp_14 = tmp_13*tmp_9;
      real_t tmp_15 = 2.0*tmp_6;
      real_t tmp_16 = tmp_15*tmp_3;
      real_t tmp_17 = tmp_16*tmp_9;
      real_t tmp_18 = tmp_1*tmp_15;
      real_t tmp_19 = tmp_18*tmp_9;
      real_t tmp_20 = tmp_0*tmp_8;
      real_t tmp_21 = 0.025422453185103409*tmp_20;
      real_t tmp_22 = tmp_11*tmp_12;
      real_t tmp_23 = tmp_20*tmp_22;
      real_t tmp_24 = 1.0/(tmp_5*tmp_5);
      real_t tmp_25 = tmp_24*tmp_3;
      real_t tmp_26 = tmp_20*tmp_25;
      real_t tmp_27 = 0.025422453185103409*tmp_8;
      real_t tmp_28 = tmp_2*tmp_24;
      real_t tmp_29 = tmp_28*tmp_8;
      real_t tmp_30 = tmp_22*tmp_4;
      real_t tmp_31 = tmp_30*tmp_8;
      real_t tmp_32 = tmp_25*tmp_4;
      real_t tmp_33 = tmp_32*tmp_8;
      real_t tmp_34 = tmp_1*tmp_24*tmp_4;
      real_t tmp_35 = tmp_34*tmp_8;
      real_t a_0_0 = tmp_10*tmp_13 + 0.47457754681489661*tmp_14;
      real_t a_0_1 = tmp_10*tmp_16 + 0.47457754681489661*tmp_17;
      real_t a_0_2 = tmp_10*tmp_18 + 0.47457754681489661*tmp_19;
      real_t a_1_0 = tmp_21*tmp_22 + 0.47457754681489661*tmp_23;
      real_t a_1_1 = tmp_21*tmp_25 + 0.47457754681489661*tmp_26;
      real_t a_1_2 = tmp_27*tmp_28 + 0.47457754681489661*tmp_29;
      real_t a_2_0 = tmp_27*tmp_30 + 0.47457754681489661*tmp_31;
      real_t a_2_1 = tmp_27*tmp_32 + 0.47457754681489661*tmp_33;
      real_t a_2_2 = tmp_27*tmp_34 + 0.47457754681489661*tmp_35;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_6 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_7 = tmp_4*(0.046910077030668018*tmp_5 + tmp_6);
      real_t tmp_8 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_10 = tmp_4*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = tmp_0*tmp_7 + tmp_10*tmp_2;
      real_t tmp_12 = tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_13 = -tmp_11 - tmp_12 + 1;
      real_t tmp_14 = 1.0*tmp_13;
      real_t tmp_15 = 0.5*tmp_4;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = tmp_0*tmp_15;
      real_t tmp_18 = p_affine_10_0*(-tmp_16 - tmp_17);
      real_t tmp_19 = tmp_15*tmp_2;
      real_t tmp_20 = tmp_15*tmp_3;
      real_t tmp_21 = p_affine_10_1*(-tmp_19 - tmp_20);
      real_t tmp_22 = std::abs(std::pow((tmp_5*tmp_5) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_23 = 0.11846344252809471*tmp_22;
      real_t tmp_24 = tmp_4*(0.23076534494715845*tmp_5 + tmp_6);
      real_t tmp_25 = tmp_4*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_26 = tmp_0*tmp_24 + tmp_2*tmp_25;
      real_t tmp_27 = tmp_1*tmp_24 + tmp_25*tmp_3;
      real_t tmp_28 = -tmp_26 - tmp_27 + 1;
      real_t tmp_29 = 1.0*tmp_28;
      real_t tmp_30 = 0.2393143352496831*tmp_22;
      real_t tmp_31 = tmp_4*(0.5*tmp_5 + tmp_6);
      real_t tmp_32 = tmp_4*(0.5*tmp_8 + tmp_9);
      real_t tmp_33 = tmp_0*tmp_31 + tmp_2*tmp_32;
      real_t tmp_34 = tmp_1*tmp_31 + tmp_3*tmp_32;
      real_t tmp_35 = -tmp_33 - tmp_34 + 1;
      real_t tmp_36 = 1.0*tmp_35;
      real_t tmp_37 = 0.2844444444444445*tmp_22;
      real_t tmp_38 = tmp_4*(0.7692346550528415*tmp_5 + tmp_6);
      real_t tmp_39 = tmp_4*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_40 = tmp_0*tmp_38 + tmp_2*tmp_39;
      real_t tmp_41 = tmp_1*tmp_38 + tmp_3*tmp_39;
      real_t tmp_42 = -tmp_40 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.2393143352496831*tmp_22;
      real_t tmp_45 = tmp_4*(0.95308992296933193*tmp_5 + tmp_6);
      real_t tmp_46 = tmp_4*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_0*tmp_45 + tmp_2*tmp_46;
      real_t tmp_48 = tmp_1*tmp_45 + tmp_3*tmp_46;
      real_t tmp_49 = -tmp_47 - tmp_48 + 1;
      real_t tmp_50 = 1.0*tmp_49;
      real_t tmp_51 = 0.11846344252809471*tmp_22;
      real_t tmp_52 = 1.0*tmp_21;
      real_t tmp_53 = p_affine_10_0*tmp_17;
      real_t tmp_54 = p_affine_10_0*tmp_16;
      real_t tmp_55 = 1.0*tmp_18;
      real_t tmp_56 = p_affine_10_1*tmp_19;
      real_t tmp_57 = p_affine_10_1*tmp_20;
      real_t a_0_0 = tmp_23*(-tmp_14*tmp_18 - tmp_14*tmp_21) + tmp_30*(-tmp_18*tmp_29 - tmp_21*tmp_29) + tmp_37*(-tmp_18*tmp_36 - tmp_21*tmp_36) + tmp_44*(-tmp_18*tmp_43 - tmp_21*tmp_43) + tmp_51*(-tmp_18*tmp_50 - tmp_21*tmp_50);
      real_t a_0_1 = tmp_23*(-tmp_11*tmp_52 - tmp_13*tmp_53) + tmp_30*(-tmp_26*tmp_52 - tmp_28*tmp_53) + tmp_37*(-tmp_33*tmp_52 - tmp_35*tmp_53) + tmp_44*(-tmp_40*tmp_52 - tmp_42*tmp_53) + tmp_51*(-tmp_47*tmp_52 - tmp_49*tmp_53);
      real_t a_0_2 = tmp_23*(-tmp_12*tmp_52 - tmp_13*tmp_54) + tmp_30*(-tmp_27*tmp_52 - tmp_28*tmp_54) + tmp_37*(-tmp_34*tmp_52 - tmp_35*tmp_54) + tmp_44*(-tmp_41*tmp_52 - tmp_42*tmp_54) + tmp_51*(-tmp_48*tmp_52 - tmp_49*tmp_54);
      real_t a_1_0 = tmp_23*(-tmp_11*tmp_55 - tmp_13*tmp_56) + tmp_30*(-tmp_26*tmp_55 - tmp_28*tmp_56) + tmp_37*(-tmp_33*tmp_55 - tmp_35*tmp_56) + tmp_44*(-tmp_40*tmp_55 - tmp_42*tmp_56) + tmp_51*(-tmp_47*tmp_55 - tmp_49*tmp_56);
      real_t a_1_1 = tmp_23*(-tmp_11*tmp_53 - tmp_11*tmp_56) + tmp_30*(-tmp_26*tmp_53 - tmp_26*tmp_56) + tmp_37*(-tmp_33*tmp_53 - tmp_33*tmp_56) + tmp_44*(-tmp_40*tmp_53 - tmp_40*tmp_56) + tmp_51*(-tmp_47*tmp_53 - tmp_47*tmp_56);
      real_t a_1_2 = tmp_23*(-tmp_11*tmp_54 - tmp_12*tmp_56) + tmp_30*(-tmp_26*tmp_54 - tmp_27*tmp_56) + tmp_37*(-tmp_33*tmp_54 - tmp_34*tmp_56) + tmp_44*(-tmp_40*tmp_54 - tmp_41*tmp_56) + tmp_51*(-tmp_47*tmp_54 - tmp_48*tmp_56);
      real_t a_2_0 = tmp_23*(-tmp_12*tmp_55 - tmp_13*tmp_57) + tmp_30*(-tmp_27*tmp_55 - tmp_28*tmp_57) + tmp_37*(-tmp_34*tmp_55 - tmp_35*tmp_57) + tmp_44*(-tmp_41*tmp_55 - tmp_42*tmp_57) + tmp_51*(-tmp_48*tmp_55 - tmp_49*tmp_57);
      real_t a_2_1 = tmp_23*(-tmp_11*tmp_57 - tmp_12*tmp_53) + tmp_30*(-tmp_26*tmp_57 - tmp_27*tmp_53) + tmp_37*(-tmp_33*tmp_57 - tmp_34*tmp_53) + tmp_44*(-tmp_40*tmp_57 - tmp_41*tmp_53) + tmp_51*(-tmp_47*tmp_57 - tmp_48*tmp_53);
      real_t a_2_2 = tmp_23*(-tmp_12*tmp_54 - tmp_12*tmp_57) + tmp_30*(-tmp_27*tmp_54 - tmp_27*tmp_57) + tmp_37*(-tmp_34*tmp_54 - tmp_34*tmp_57) + tmp_44*(-tmp_41*tmp_54 - tmp_41*tmp_57) + tmp_51*(-tmp_48*tmp_54 - tmp_48*tmp_57);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_0_1;
      real_t tmp_6 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_7 = p_affine_6_1 + 0.046910077030668018*tmp_6;
      real_t tmp_8 = tmp_4*(tmp_5 + tmp_7);
      real_t tmp_9 = -p_affine_0_0;
      real_t tmp_10 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_11 = p_affine_6_0 + 0.046910077030668018*tmp_10;
      real_t tmp_12 = tmp_4*(tmp_11 + tmp_9);
      real_t tmp_13 = tmp_0*tmp_8 + tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8 + tmp_12*tmp_3;
      real_t tmp_15 = p_affine_10_0*(-tmp_13 - tmp_14 + 1);
      real_t tmp_16 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_17 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_18 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_19 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_20 = 1.0 / (tmp_16*tmp_17 - tmp_18*tmp_19);
      real_t tmp_21 = 0.5*tmp_20;
      real_t tmp_22 = tmp_16*tmp_21;
      real_t tmp_23 = tmp_18*tmp_21;
      real_t tmp_24 = -1.0*tmp_22 - 1.0*tmp_23;
      real_t tmp_25 = 0.5*tmp_4;
      real_t tmp_26 = -tmp_2*tmp_25 - tmp_25*tmp_3;
      real_t tmp_27 = -p_affine_3_1;
      real_t tmp_28 = tmp_20*(tmp_27 + tmp_7);
      real_t tmp_29 = -p_affine_3_0;
      real_t tmp_30 = tmp_20*(tmp_11 + tmp_29);
      real_t tmp_31 = tmp_17*tmp_30 + tmp_18*tmp_28;
      real_t tmp_32 = tmp_16*tmp_28 + tmp_19*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = std::abs(std::pow((tmp_10*tmp_10) + (tmp_6*tmp_6), 1.0/2.0));
      real_t tmp_35 = 0.11846344252809471*tmp_34;
      real_t tmp_36 = p_affine_6_1 + 0.23076534494715845*tmp_6;
      real_t tmp_37 = tmp_4*(tmp_36 + tmp_5);
      real_t tmp_38 = p_affine_6_0 + 0.23076534494715845*tmp_10;
      real_t tmp_39 = tmp_4*(tmp_38 + tmp_9);
      real_t tmp_40 = tmp_0*tmp_37 + tmp_2*tmp_39;
      real_t tmp_41 = tmp_1*tmp_37 + tmp_3*tmp_39;
      real_t tmp_42 = -tmp_40 - tmp_41 + 1;
      real_t tmp_43 = p_affine_10_0*tmp_24;
      real_t tmp_44 = tmp_20*(tmp_27 + tmp_36);
      real_t tmp_45 = tmp_20*(tmp_29 + tmp_38);
      real_t tmp_46 = tmp_17*tmp_45 + tmp_18*tmp_44;
      real_t tmp_47 = tmp_16*tmp_44 + tmp_19*tmp_45;
      real_t tmp_48 = -tmp_46 - tmp_47 + 1;
      real_t tmp_49 = 0.2393143352496831*tmp_34;
      real_t tmp_50 = p_affine_6_1 + 0.5*tmp_6;
      real_t tmp_51 = tmp_4*(tmp_5 + tmp_50);
      real_t tmp_52 = p_affine_6_0 + 0.5*tmp_10;
      real_t tmp_53 = tmp_4*(tmp_52 + tmp_9);
      real_t tmp_54 = tmp_0*tmp_51 + tmp_2*tmp_53;
      real_t tmp_55 = tmp_1*tmp_51 + tmp_3*tmp_53;
      real_t tmp_56 = -tmp_54 - tmp_55 + 1;
      real_t tmp_57 = tmp_20*(tmp_27 + tmp_50);
      real_t tmp_58 = tmp_20*(tmp_29 + tmp_52);
      real_t tmp_59 = tmp_17*tmp_58 + tmp_18*tmp_57;
      real_t tmp_60 = tmp_16*tmp_57 + tmp_19*tmp_58;
      real_t tmp_61 = -tmp_59 - tmp_60 + 1;
      real_t tmp_62 = 0.2844444444444445*tmp_34;
      real_t tmp_63 = p_affine_6_1 + 0.7692346550528415*tmp_6;
      real_t tmp_64 = tmp_4*(tmp_5 + tmp_63);
      real_t tmp_65 = p_affine_6_0 + 0.7692346550528415*tmp_10;
      real_t tmp_66 = tmp_4*(tmp_65 + tmp_9);
      real_t tmp_67 = tmp_0*tmp_64 + tmp_2*tmp_66;
      real_t tmp_68 = tmp_1*tmp_64 + tmp_3*tmp_66;
      real_t tmp_69 = -tmp_67 - tmp_68 + 1;
      real_t tmp_70 = tmp_20*(tmp_27 + tmp_63);
      real_t tmp_71 = tmp_20*(tmp_29 + tmp_65);
      real_t tmp_72 = tmp_17*tmp_71 + tmp_18*tmp_70;
      real_t tmp_73 = tmp_16*tmp_70 + tmp_19*tmp_71;
      real_t tmp_74 = -tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.2393143352496831*tmp_34;
      real_t tmp_76 = p_affine_6_1 + 0.95308992296933193*tmp_6;
      real_t tmp_77 = tmp_4*(tmp_5 + tmp_76);
      real_t tmp_78 = p_affine_6_0 + 0.95308992296933193*tmp_10;
      real_t tmp_79 = tmp_4*(tmp_78 + tmp_9);
      real_t tmp_80 = tmp_0*tmp_77 + tmp_2*tmp_79;
      real_t tmp_81 = tmp_1*tmp_77 + tmp_3*tmp_79;
      real_t tmp_82 = -tmp_80 - tmp_81 + 1;
      real_t tmp_83 = tmp_20*(tmp_27 + tmp_76);
      real_t tmp_84 = tmp_20*(tmp_29 + tmp_78);
      real_t tmp_85 = tmp_17*tmp_84 + tmp_18*tmp_83;
      real_t tmp_86 = tmp_16*tmp_83 + tmp_19*tmp_84;
      real_t tmp_87 = -tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 0.11846344252809471*tmp_34;
      real_t tmp_89 = p_affine_10_0*tmp_23;
      real_t tmp_90 = p_affine_10_0*tmp_22;
      real_t a_0_0 = tmp_35*(p_affine_10_1*tmp_26*tmp_33 - tmp_15*tmp_24) + tmp_49*(p_affine_10_1*tmp_26*tmp_48 - tmp_42*tmp_43) + tmp_62*(p_affine_10_1*tmp_26*tmp_61 - tmp_43*tmp_56) + tmp_75*(p_affine_10_1*tmp_26*tmp_74 - tmp_43*tmp_69) + tmp_88*(p_affine_10_1*tmp_26*tmp_87 - tmp_43*tmp_82);
      real_t a_0_1 = tmp_35*(p_affine_10_1*tmp_26*tmp_31 - tmp_15*tmp_23) + tmp_49*(p_affine_10_1*tmp_26*tmp_46 - tmp_42*tmp_89) + tmp_62*(p_affine_10_1*tmp_26*tmp_59 - tmp_56*tmp_89) + tmp_75*(p_affine_10_1*tmp_26*tmp_72 - tmp_69*tmp_89) + tmp_88*(p_affine_10_1*tmp_26*tmp_85 - tmp_82*tmp_89);
      real_t a_0_2 = tmp_35*(p_affine_10_1*tmp_26*tmp_32 - tmp_15*tmp_22) + tmp_49*(p_affine_10_1*tmp_26*tmp_47 - tmp_42*tmp_90) + tmp_62*(p_affine_10_1*tmp_26*tmp_60 - tmp_56*tmp_90) + tmp_75*(p_affine_10_1*tmp_26*tmp_73 - tmp_69*tmp_90) + tmp_88*(p_affine_10_1*tmp_26*tmp_86 - tmp_82*tmp_90);
      real_t a_1_0 = tmp_35*(0.5*p_affine_10_1*tmp_2*tmp_33*tmp_4 - tmp_13*tmp_43) + tmp_49*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_48 - tmp_40*tmp_43) + tmp_62*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_61 - tmp_43*tmp_54) + tmp_75*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_74 - tmp_43*tmp_67) + tmp_88*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_87 - tmp_43*tmp_80);
      real_t a_1_1 = tmp_35*(0.5*p_affine_10_1*tmp_2*tmp_31*tmp_4 - tmp_13*tmp_89) + tmp_49*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_46 - tmp_40*tmp_89) + tmp_62*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_59 - tmp_54*tmp_89) + tmp_75*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_72 - tmp_67*tmp_89) + tmp_88*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_85 - tmp_80*tmp_89);
      real_t a_1_2 = tmp_35*(0.5*p_affine_10_1*tmp_2*tmp_32*tmp_4 - tmp_13*tmp_90) + tmp_49*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_47 - tmp_40*tmp_90) + tmp_62*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_60 - tmp_54*tmp_90) + tmp_75*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_73 - tmp_67*tmp_90) + tmp_88*(0.5*p_affine_10_1*tmp_2*tmp_4*tmp_86 - tmp_80*tmp_90);
      real_t a_2_0 = tmp_35*(0.5*p_affine_10_1*tmp_3*tmp_33*tmp_4 - tmp_14*tmp_43) + tmp_49*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_48 - tmp_41*tmp_43) + tmp_62*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_61 - tmp_43*tmp_55) + tmp_75*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_74 - tmp_43*tmp_68) + tmp_88*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_87 - tmp_43*tmp_81);
      real_t a_2_1 = tmp_35*(0.5*p_affine_10_1*tmp_3*tmp_31*tmp_4 - tmp_14*tmp_89) + tmp_49*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_46 - tmp_41*tmp_89) + tmp_62*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_59 - tmp_55*tmp_89) + tmp_75*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_72 - tmp_68*tmp_89) + tmp_88*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_85 - tmp_81*tmp_89);
      real_t a_2_2 = tmp_35*(0.5*p_affine_10_1*tmp_3*tmp_32*tmp_4 - tmp_14*tmp_90) + tmp_49*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_47 - tmp_41*tmp_90) + tmp_62*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_60 - tmp_55*tmp_90) + tmp_75*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_73 - tmp_68*tmp_90) + tmp_88*(0.5*p_affine_10_1*tmp_3*tmp_4*tmp_86 - tmp_81*tmp_90);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_6 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_7 = tmp_4*(0.046910077030668018*tmp_5 + tmp_6);
      real_t tmp_8 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_10 = tmp_4*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = tmp_0*tmp_7 + tmp_10*tmp_2;
      real_t tmp_12 = tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_13 = -tmp_11 - tmp_12 + 1;
      real_t tmp_14 = 0.5*tmp_4;
      real_t tmp_15 = tmp_1*tmp_14;
      real_t tmp_16 = tmp_0*tmp_14;
      real_t tmp_17 = p_affine_10_0*(-tmp_15 - tmp_16);
      real_t tmp_18 = tmp_14*tmp_2;
      real_t tmp_19 = tmp_14*tmp_3;
      real_t tmp_20 = p_affine_10_1*(-tmp_18 - tmp_19);
      real_t tmp_21 = 2*std::abs(std::pow((tmp_5*tmp_5) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_22 = 0.11846344252809471*tmp_21;
      real_t tmp_23 = tmp_4*(0.23076534494715845*tmp_5 + tmp_6);
      real_t tmp_24 = tmp_4*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_25 = tmp_0*tmp_23 + tmp_2*tmp_24;
      real_t tmp_26 = tmp_1*tmp_23 + tmp_24*tmp_3;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_21;
      real_t tmp_29 = tmp_4*(0.5*tmp_5 + tmp_6);
      real_t tmp_30 = tmp_4*(0.5*tmp_8 + tmp_9);
      real_t tmp_31 = tmp_0*tmp_29 + tmp_2*tmp_30;
      real_t tmp_32 = tmp_1*tmp_29 + tmp_3*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_21;
      real_t tmp_35 = tmp_4*(0.7692346550528415*tmp_5 + tmp_6);
      real_t tmp_36 = tmp_4*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_0*tmp_35 + tmp_2*tmp_36;
      real_t tmp_38 = tmp_1*tmp_35 + tmp_3*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_21;
      real_t tmp_41 = tmp_4*(0.95308992296933193*tmp_5 + tmp_6);
      real_t tmp_42 = tmp_4*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_43 = tmp_0*tmp_41 + tmp_2*tmp_42;
      real_t tmp_44 = tmp_1*tmp_41 + tmp_3*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_21;
      real_t tmp_47 = p_affine_10_0*tmp_16;
      real_t tmp_48 = p_affine_10_0*tmp_15;
      real_t tmp_49 = p_affine_10_1*tmp_18;
      real_t tmp_50 = p_affine_10_1*tmp_19;
      real_t a_0_0 = tmp_22*(-tmp_13*tmp_17 - tmp_13*tmp_20) + tmp_28*(-tmp_17*tmp_27 - tmp_20*tmp_27) + tmp_34*(-tmp_17*tmp_33 - tmp_20*tmp_33) + tmp_40*(-tmp_17*tmp_39 - tmp_20*tmp_39) + tmp_46*(-tmp_17*tmp_45 - tmp_20*tmp_45);
      real_t a_0_1 = tmp_22*(-tmp_11*tmp_20 - tmp_13*tmp_47) + tmp_28*(-tmp_20*tmp_25 - tmp_27*tmp_47) + tmp_34*(-tmp_20*tmp_31 - tmp_33*tmp_47) + tmp_40*(-tmp_20*tmp_37 - tmp_39*tmp_47) + tmp_46*(-tmp_20*tmp_43 - tmp_45*tmp_47);
      real_t a_0_2 = tmp_22*(-tmp_12*tmp_20 - tmp_13*tmp_48) + tmp_28*(-tmp_20*tmp_26 - tmp_27*tmp_48) + tmp_34*(-tmp_20*tmp_32 - tmp_33*tmp_48) + tmp_40*(-tmp_20*tmp_38 - tmp_39*tmp_48) + tmp_46*(-tmp_20*tmp_44 - tmp_45*tmp_48);
      real_t a_1_0 = tmp_22*(-tmp_11*tmp_17 - tmp_13*tmp_49) + tmp_28*(-tmp_17*tmp_25 - tmp_27*tmp_49) + tmp_34*(-tmp_17*tmp_31 - tmp_33*tmp_49) + tmp_40*(-tmp_17*tmp_37 - tmp_39*tmp_49) + tmp_46*(-tmp_17*tmp_43 - tmp_45*tmp_49);
      real_t a_1_1 = tmp_22*(-tmp_11*tmp_47 - tmp_11*tmp_49) + tmp_28*(-tmp_25*tmp_47 - tmp_25*tmp_49) + tmp_34*(-tmp_31*tmp_47 - tmp_31*tmp_49) + tmp_40*(-tmp_37*tmp_47 - tmp_37*tmp_49) + tmp_46*(-tmp_43*tmp_47 - tmp_43*tmp_49);
      real_t a_1_2 = tmp_22*(-tmp_11*tmp_48 - tmp_12*tmp_49) + tmp_28*(-tmp_25*tmp_48 - tmp_26*tmp_49) + tmp_34*(-tmp_31*tmp_48 - tmp_32*tmp_49) + tmp_40*(-tmp_37*tmp_48 - tmp_38*tmp_49) + tmp_46*(-tmp_43*tmp_48 - tmp_44*tmp_49);
      real_t a_2_0 = tmp_22*(-tmp_12*tmp_17 - tmp_13*tmp_50) + tmp_28*(-tmp_17*tmp_26 - tmp_27*tmp_50) + tmp_34*(-tmp_17*tmp_32 - tmp_33*tmp_50) + tmp_40*(-tmp_17*tmp_38 - tmp_39*tmp_50) + tmp_46*(-tmp_17*tmp_44 - tmp_45*tmp_50);
      real_t a_2_1 = tmp_22*(-tmp_11*tmp_50 - tmp_12*tmp_47) + tmp_28*(-tmp_25*tmp_50 - tmp_26*tmp_47) + tmp_34*(-tmp_31*tmp_50 - tmp_32*tmp_47) + tmp_40*(-tmp_37*tmp_50 - tmp_38*tmp_47) + tmp_46*(-tmp_43*tmp_50 - tmp_44*tmp_47);
      real_t a_2_2 = tmp_22*(-tmp_12*tmp_48 - tmp_12*tmp_50) + tmp_28*(-tmp_26*tmp_48 - tmp_26*tmp_50) + tmp_34*(-tmp_32*tmp_48 - tmp_32*tmp_50) + tmp_40*(-tmp_38*tmp_48 - tmp_38*tmp_50) + tmp_46*(-tmp_44*tmp_48 - tmp_44*tmp_50);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = -tmp_13 + tmp_9;
      real_t tmp_20 = p_affine_0_0*p_affine_1_1;
      real_t tmp_21 = p_affine_0_0*p_affine_1_2;
      real_t tmp_22 = p_affine_2_1*p_affine_3_2;
      real_t tmp_23 = p_affine_0_1*p_affine_1_0;
      real_t tmp_24 = p_affine_0_1*p_affine_1_2;
      real_t tmp_25 = p_affine_2_2*p_affine_3_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_0;
      real_t tmp_27 = p_affine_0_2*p_affine_1_1;
      real_t tmp_28 = p_affine_2_0*p_affine_3_1;
      real_t tmp_29 = p_affine_2_2*p_affine_3_1;
      real_t tmp_30 = p_affine_2_0*p_affine_3_2;
      real_t tmp_31 = p_affine_2_1*p_affine_3_0;
      real_t tmp_32 = std::abs(p_affine_0_0*tmp_22 - p_affine_0_0*tmp_29 + p_affine_0_1*tmp_25 - p_affine_0_1*tmp_30 + p_affine_0_2*tmp_28 - p_affine_0_2*tmp_31 - p_affine_1_0*tmp_22 + p_affine_1_0*tmp_29 - p_affine_1_1*tmp_25 + p_affine_1_1*tmp_30 - p_affine_1_2*tmp_28 + p_affine_1_2*tmp_31 + p_affine_2_0*tmp_24 - p_affine_2_0*tmp_27 - p_affine_2_1*tmp_21 + p_affine_2_1*tmp_26 + p_affine_2_2*tmp_20 - p_affine_2_2*tmp_23 - p_affine_3_0*tmp_24 + p_affine_3_0*tmp_27 + p_affine_3_1*tmp_21 - p_affine_3_1*tmp_26 - p_affine_3_2*tmp_20 + p_affine_3_2*tmp_23);
      real_t tmp_33 = tmp_32*(-tmp_17*tmp_18 - tmp_17*tmp_19 - tmp_17*tmp_6);
      real_t tmp_34 = 0.0044044418180681378*tmp_33;
      real_t tmp_35 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_36 = 1.0*tmp_16;
      real_t tmp_37 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_38 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_39 = -tmp_35*tmp_36 - tmp_36*tmp_37 - tmp_36*tmp_38;
      real_t tmp_40 = 2*tmp_39;
      real_t tmp_41 = tmp_33*tmp_40;
      real_t tmp_42 = 2.0*tmp_16;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_33*tmp_43;
      real_t tmp_45 = tmp_37*tmp_42;
      real_t tmp_46 = tmp_33*tmp_45;
      real_t tmp_47 = tmp_35*tmp_42;
      real_t tmp_48 = tmp_33*tmp_47;
      real_t tmp_49 = tmp_19*tmp_32;
      real_t tmp_50 = 0.0044044418180681378*tmp_49;
      real_t tmp_51 = tmp_36*tmp_39;
      real_t tmp_52 = tmp_49*tmp_51;
      real_t tmp_53 = 1.0/(tmp_15*tmp_15);
      real_t tmp_54 = tmp_38*tmp_53;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = tmp_37*tmp_53;
      real_t tmp_57 = tmp_49*tmp_56;
      real_t tmp_58 = tmp_35*tmp_53;
      real_t tmp_59 = tmp_49*tmp_58;
      real_t tmp_60 = tmp_18*tmp_32;
      real_t tmp_61 = tmp_51*tmp_60;
      real_t tmp_62 = tmp_54*tmp_60;
      real_t tmp_63 = tmp_56*tmp_60;
      real_t tmp_64 = tmp_58*tmp_60;
      real_t tmp_65 = tmp_32*tmp_6;
      real_t tmp_66 = tmp_51*tmp_65;
      real_t tmp_67 = tmp_54*tmp_65;
      real_t tmp_68 = tmp_56*tmp_65;
      real_t tmp_69 = tmp_58*tmp_65;
      real_t a_0_0 = tmp_34*tmp_40 + 0.16226222484859867*tmp_41;
      real_t a_0_1 = tmp_34*tmp_43 + 0.16226222484859867*tmp_44;
      real_t a_0_2 = tmp_34*tmp_45 + 0.16226222484859867*tmp_46;
      real_t a_0_3 = tmp_34*tmp_47 + 0.16226222484859867*tmp_48;
      real_t a_1_0 = tmp_50*tmp_51 + 0.16226222484859867*tmp_52;
      real_t a_1_1 = tmp_50*tmp_54 + 0.16226222484859867*tmp_55;
      real_t a_1_2 = tmp_50*tmp_56 + 0.16226222484859867*tmp_57;
      real_t a_1_3 = tmp_50*tmp_58 + 0.16226222484859867*tmp_59;
      real_t a_2_0 = 0.1666666666666668*tmp_61;
      real_t a_2_1 = 0.1666666666666668*tmp_62;
      real_t a_2_2 = 0.1666666666666668*tmp_63;
      real_t a_2_3 = 0.1666666666666668*tmp_64;
      real_t a_3_0 = 0.1666666666666668*tmp_66;
      real_t a_3_1 = 0.1666666666666668*tmp_67;
      real_t a_3_2 = 0.1666666666666668*tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_0*tmp_6;
      real_t tmp_13 = tmp_2*tmp_8;
      real_t tmp_14 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_1*tmp_11 + tmp_10*tmp_2*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_3 + tmp_3*tmp_7);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_19 = tmp_14*(0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17 + tmp_18);
      real_t tmp_20 = tmp_10*tmp_2 - tmp_12;
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = tmp_14*(0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24);
      real_t tmp_26 = -tmp_1*tmp_10 + tmp_3*tmp_6;
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = tmp_14*(0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30);
      real_t tmp_32 = tmp_19*tmp_4 + tmp_20*tmp_25 + tmp_26*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_34 = -tmp_13 + tmp_7;
      real_t tmp_35 = tmp_1*tmp_8 - tmp_6*tmp_9;
      real_t tmp_36 = tmp_19*tmp_33 + tmp_25*tmp_34 + tmp_31*tmp_35;
      real_t tmp_37 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_11;
      real_t tmp_39 = tmp_10*tmp_9 - tmp_3*tmp_8;
      real_t tmp_40 = tmp_19*tmp_37 + tmp_25*tmp_38 + tmp_31*tmp_39;
      real_t tmp_41 = -tmp_32 - tmp_36 - tmp_40 + 1;
      real_t tmp_42 = 1.0*tmp_41;
      real_t tmp_43 = 0.5*tmp_14;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_20*tmp_43;
      real_t tmp_47 = p_affine_13_0*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_39*tmp_43;
      real_t tmp_49 = tmp_35*tmp_43;
      real_t tmp_50 = tmp_26*tmp_43;
      real_t tmp_51 = p_affine_13_1*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 1.0*std::pow((std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)*std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)) + (std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)*std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_14*(0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17 + tmp_18);
      real_t tmp_55 = tmp_14*(0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24);
      real_t tmp_56 = tmp_14*(0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30);
      real_t tmp_57 = tmp_20*tmp_55 + tmp_26*tmp_56 + tmp_4*tmp_54;
      real_t tmp_58 = tmp_33*tmp_54 + tmp_34*tmp_55 + tmp_35*tmp_56;
      real_t tmp_59 = tmp_37*tmp_54 + tmp_38*tmp_55 + tmp_39*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 1.0*tmp_60;
      real_t tmp_62 = 0.037198804536718075*tmp_52;
      real_t tmp_63 = tmp_14*(0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_64 = tmp_14*(0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_65 = tmp_14*(0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_66 = tmp_20*tmp_64 + tmp_26*tmp_65 + tmp_4*tmp_63;
      real_t tmp_67 = tmp_33*tmp_63 + tmp_34*tmp_64 + tmp_35*tmp_65;
      real_t tmp_68 = tmp_37*tmp_63 + tmp_38*tmp_64 + tmp_39*tmp_65;
      real_t tmp_69 = -tmp_66 - tmp_67 - tmp_68 + 1;
      real_t tmp_70 = 1.0*tmp_69;
      real_t tmp_71 = 0.020848748529055869*tmp_52;
      real_t tmp_72 = tmp_14*(0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_73 = tmp_14*(0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_74 = tmp_14*(0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_75 = tmp_20*tmp_73 + tmp_26*tmp_74 + tmp_4*tmp_72;
      real_t tmp_76 = tmp_33*tmp_72 + tmp_34*tmp_73 + tmp_35*tmp_74;
      real_t tmp_77 = tmp_37*tmp_72 + tmp_38*tmp_73 + tmp_39*tmp_74;
      real_t tmp_78 = -tmp_75 - tmp_76 - tmp_77 + 1;
      real_t tmp_79 = 1.0*tmp_78;
      real_t tmp_80 = 0.019202922745021479*tmp_52;
      real_t tmp_81 = tmp_14*(0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_82 = tmp_14*(0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_83 = tmp_14*(0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_84 = tmp_20*tmp_82 + tmp_26*tmp_83 + tmp_4*tmp_81;
      real_t tmp_85 = tmp_33*tmp_81 + tmp_34*tmp_82 + tmp_35*tmp_83;
      real_t tmp_86 = tmp_37*tmp_81 + tmp_38*tmp_82 + tmp_39*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 1.0*tmp_87;
      real_t tmp_89 = 0.020848748529055869*tmp_52;
      real_t tmp_90 = tmp_14*(0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_91 = tmp_14*(0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_92 = tmp_14*(0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_93 = tmp_20*tmp_91 + tmp_26*tmp_92 + tmp_4*tmp_90;
      real_t tmp_94 = tmp_33*tmp_90 + tmp_34*tmp_91 + tmp_35*tmp_92;
      real_t tmp_95 = tmp_37*tmp_90 + tmp_38*tmp_91 + tmp_39*tmp_92;
      real_t tmp_96 = -tmp_93 - tmp_94 - tmp_95 + 1;
      real_t tmp_97 = 1.0*tmp_96;
      real_t tmp_98 = 0.019202922745021479*tmp_52;
      real_t tmp_99 = tmp_14*(0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_100 = tmp_14*(0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_101 = tmp_14*(0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_102 = tmp_100*tmp_20 + tmp_101*tmp_26 + tmp_4*tmp_99;
      real_t tmp_103 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_33*tmp_99;
      real_t tmp_104 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_37*tmp_99;
      real_t tmp_105 = -tmp_102 - tmp_103 - tmp_104 + 1;
      real_t tmp_106 = 1.0*tmp_105;
      real_t tmp_107 = 0.020848748529055869*tmp_52;
      real_t tmp_108 = tmp_14*(0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_109 = tmp_14*(0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_110 = tmp_14*(0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_111 = tmp_108*tmp_4 + tmp_109*tmp_20 + tmp_110*tmp_26;
      real_t tmp_112 = tmp_108*tmp_33 + tmp_109*tmp_34 + tmp_110*tmp_35;
      real_t tmp_113 = tmp_108*tmp_37 + tmp_109*tmp_38 + tmp_110*tmp_39;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 1.0*tmp_114;
      real_t tmp_116 = 0.019202922745021479*tmp_52;
      real_t tmp_117 = tmp_14*(0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_118 = tmp_14*(0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_119 = tmp_14*(0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_120 = tmp_117*tmp_4 + tmp_118*tmp_20 + tmp_119*tmp_26;
      real_t tmp_121 = tmp_117*tmp_33 + tmp_118*tmp_34 + tmp_119*tmp_35;
      real_t tmp_122 = tmp_117*tmp_37 + tmp_118*tmp_38 + tmp_119*tmp_39;
      real_t tmp_123 = -tmp_120 - tmp_121 - tmp_122 + 1;
      real_t tmp_124 = 1.0*tmp_123;
      real_t tmp_125 = 0.020848748529055869*tmp_52;
      real_t tmp_126 = tmp_14*(0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_127 = tmp_14*(0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_128 = tmp_14*(0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_129 = tmp_126*tmp_4 + tmp_127*tmp_20 + tmp_128*tmp_26;
      real_t tmp_130 = tmp_126*tmp_33 + tmp_127*tmp_34 + tmp_128*tmp_35;
      real_t tmp_131 = tmp_126*tmp_37 + tmp_127*tmp_38 + tmp_128*tmp_39;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 1.0*tmp_132;
      real_t tmp_134 = 0.019202922745021479*tmp_52;
      real_t tmp_135 = tmp_14*(0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_136 = tmp_14*(0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_137 = tmp_14*(0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_138 = tmp_135*tmp_4 + tmp_136*tmp_20 + tmp_137*tmp_26;
      real_t tmp_139 = tmp_135*tmp_33 + tmp_136*tmp_34 + tmp_137*tmp_35;
      real_t tmp_140 = tmp_135*tmp_37 + tmp_136*tmp_38 + tmp_137*tmp_39;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = 1.0*tmp_141;
      real_t tmp_143 = 0.020848748529055869*tmp_52;
      real_t tmp_144 = tmp_14*(0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_145 = tmp_14*(0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_146 = tmp_14*(0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_147 = tmp_144*tmp_4 + tmp_145*tmp_20 + tmp_146*tmp_26;
      real_t tmp_148 = tmp_144*tmp_33 + tmp_145*tmp_34 + tmp_146*tmp_35;
      real_t tmp_149 = tmp_144*tmp_37 + tmp_145*tmp_38 + tmp_146*tmp_39;
      real_t tmp_150 = -tmp_147 - tmp_148 - tmp_149 + 1;
      real_t tmp_151 = 1.0*tmp_150;
      real_t tmp_152 = 0.019202922745021479*tmp_52;
      real_t tmp_153 = tmp_14*(0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17 + tmp_18);
      real_t tmp_154 = tmp_14*(0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24);
      real_t tmp_155 = tmp_14*(0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30);
      real_t tmp_156 = tmp_153*tmp_4 + tmp_154*tmp_20 + tmp_155*tmp_26;
      real_t tmp_157 = tmp_153*tmp_33 + tmp_154*tmp_34 + tmp_155*tmp_35;
      real_t tmp_158 = tmp_153*tmp_37 + tmp_154*tmp_38 + tmp_155*tmp_39;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 1.0*tmp_159;
      real_t tmp_161 = 0.042507265838595799*tmp_52;
      real_t tmp_162 = tmp_14*(0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_163 = tmp_14*(0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_164 = tmp_14*(0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_165 = tmp_162*tmp_4 + tmp_163*tmp_20 + tmp_164*tmp_26;
      real_t tmp_166 = tmp_162*tmp_33 + tmp_163*tmp_34 + tmp_164*tmp_35;
      real_t tmp_167 = tmp_162*tmp_37 + tmp_163*tmp_38 + tmp_164*tmp_39;
      real_t tmp_168 = -tmp_165 - tmp_166 - tmp_167 + 1;
      real_t tmp_169 = 1.0*tmp_168;
      real_t tmp_170 = 0.020848748529055869*tmp_52;
      real_t tmp_171 = tmp_14*(0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_172 = tmp_14*(0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_173 = tmp_14*(0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_174 = tmp_171*tmp_4 + tmp_172*tmp_20 + tmp_173*tmp_26;
      real_t tmp_175 = tmp_171*tmp_33 + tmp_172*tmp_34 + tmp_173*tmp_35;
      real_t tmp_176 = tmp_171*tmp_37 + tmp_172*tmp_38 + tmp_173*tmp_39;
      real_t tmp_177 = -tmp_174 - tmp_175 - tmp_176 + 1;
      real_t tmp_178 = 1.0*tmp_177;
      real_t tmp_179 = 0.0068572537431980923*tmp_52;
      real_t tmp_180 = tmp_14*(0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_181 = tmp_14*(0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_182 = tmp_14*(0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_183 = tmp_180*tmp_4 + tmp_181*tmp_20 + tmp_182*tmp_26;
      real_t tmp_184 = tmp_180*tmp_33 + tmp_181*tmp_34 + tmp_182*tmp_35;
      real_t tmp_185 = tmp_180*tmp_37 + tmp_181*tmp_38 + tmp_182*tmp_39;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 1.0*tmp_186;
      real_t tmp_188 = 0.037198804536718075*tmp_52;
      real_t tmp_189 = tmp_14*(0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_190 = tmp_14*(0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_191 = tmp_14*(0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_192 = tmp_189*tmp_4 + tmp_190*tmp_20 + tmp_191*tmp_26;
      real_t tmp_193 = tmp_189*tmp_33 + tmp_190*tmp_34 + tmp_191*tmp_35;
      real_t tmp_194 = tmp_189*tmp_37 + tmp_190*tmp_38 + tmp_191*tmp_39;
      real_t tmp_195 = -tmp_192 - tmp_193 - tmp_194 + 1;
      real_t tmp_196 = 1.0*tmp_195;
      real_t tmp_197 = 0.042507265838595799*tmp_52;
      real_t tmp_198 = tmp_14*(0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_199 = tmp_14*(0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_200 = tmp_14*(0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_201 = tmp_198*tmp_4 + tmp_199*tmp_20 + tmp_200*tmp_26;
      real_t tmp_202 = tmp_198*tmp_33 + tmp_199*tmp_34 + tmp_200*tmp_35;
      real_t tmp_203 = tmp_198*tmp_37 + tmp_199*tmp_38 + tmp_200*tmp_39;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 1.0*tmp_204;
      real_t tmp_206 = 0.0068572537431980923*tmp_52;
      real_t tmp_207 = tmp_14*(0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_208 = tmp_14*(0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_209 = tmp_14*(0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_210 = tmp_20*tmp_208 + tmp_207*tmp_4 + tmp_209*tmp_26;
      real_t tmp_211 = tmp_207*tmp_33 + tmp_208*tmp_34 + tmp_209*tmp_35;
      real_t tmp_212 = tmp_207*tmp_37 + tmp_208*tmp_38 + tmp_209*tmp_39;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = 1.0*tmp_213;
      real_t tmp_215 = 0.037198804536718075*tmp_52;
      real_t tmp_216 = tmp_14*(0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_217 = tmp_14*(0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_218 = tmp_14*(0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_219 = tmp_20*tmp_217 + tmp_216*tmp_4 + tmp_218*tmp_26;
      real_t tmp_220 = tmp_216*tmp_33 + tmp_217*tmp_34 + tmp_218*tmp_35;
      real_t tmp_221 = tmp_216*tmp_37 + tmp_217*tmp_38 + tmp_218*tmp_39;
      real_t tmp_222 = -tmp_219 - tmp_220 - tmp_221 + 1;
      real_t tmp_223 = 1.0*tmp_222;
      real_t tmp_224 = 0.042507265838595799*tmp_52;
      real_t tmp_225 = tmp_14*(0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_226 = tmp_14*(0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_227 = tmp_14*(0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_228 = tmp_20*tmp_226 + tmp_225*tmp_4 + tmp_227*tmp_26;
      real_t tmp_229 = tmp_225*tmp_33 + tmp_226*tmp_34 + tmp_227*tmp_35;
      real_t tmp_230 = tmp_225*tmp_37 + tmp_226*tmp_38 + tmp_227*tmp_39;
      real_t tmp_231 = -tmp_228 - tmp_229 - tmp_230 + 1;
      real_t tmp_232 = 1.0*tmp_231;
      real_t tmp_233 = 0.019202922745021479*tmp_52;
      real_t tmp_234 = 1.0*tmp_51;
      real_t tmp_235 = p_affine_13_0*tmp_46;
      real_t tmp_236 = p_affine_13_0*tmp_45;
      real_t tmp_237 = p_affine_13_0*tmp_44;
      real_t tmp_238 = 1.0*tmp_47;
      real_t tmp_239 = p_affine_13_1*tmp_50;
      real_t tmp_240 = p_affine_13_1*tmp_49;
      real_t tmp_241 = p_affine_13_1*tmp_48;
      real_t a_0_0 = tmp_107*(-tmp_106*tmp_47 - tmp_106*tmp_51) + tmp_116*(-tmp_115*tmp_47 - tmp_115*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_134*(-tmp_133*tmp_47 - tmp_133*tmp_51) + tmp_143*(-tmp_142*tmp_47 - tmp_142*tmp_51) + tmp_152*(-tmp_151*tmp_47 - tmp_151*tmp_51) + tmp_161*(-tmp_160*tmp_47 - tmp_160*tmp_51) + tmp_170*(-tmp_169*tmp_47 - tmp_169*tmp_51) + tmp_179*(-tmp_178*tmp_47 - tmp_178*tmp_51) + tmp_188*(-tmp_187*tmp_47 - tmp_187*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_206*(-tmp_205*tmp_47 - tmp_205*tmp_51) + tmp_215*(-tmp_214*tmp_47 - tmp_214*tmp_51) + tmp_224*(-tmp_223*tmp_47 - tmp_223*tmp_51) + tmp_233*(-tmp_232*tmp_47 - tmp_232*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_62*(-tmp_47*tmp_61 - tmp_51*tmp_61) + tmp_71*(-tmp_47*tmp_70 - tmp_51*tmp_70) + tmp_80*(-tmp_47*tmp_79 - tmp_51*tmp_79) + tmp_89*(-tmp_47*tmp_88 - tmp_51*tmp_88) + tmp_98*(-tmp_47*tmp_97 - tmp_51*tmp_97);
      real_t a_0_1 = tmp_107*(-tmp_102*tmp_234 - tmp_105*tmp_235) + tmp_116*(-tmp_111*tmp_234 - tmp_114*tmp_235) + tmp_125*(-tmp_120*tmp_234 - tmp_123*tmp_235) + tmp_134*(-tmp_129*tmp_234 - tmp_132*tmp_235) + tmp_143*(-tmp_138*tmp_234 - tmp_141*tmp_235) + tmp_152*(-tmp_147*tmp_234 - tmp_150*tmp_235) + tmp_161*(-tmp_156*tmp_234 - tmp_159*tmp_235) + tmp_170*(-tmp_165*tmp_234 - tmp_168*tmp_235) + tmp_179*(-tmp_174*tmp_234 - tmp_177*tmp_235) + tmp_188*(-tmp_183*tmp_234 - tmp_186*tmp_235) + tmp_197*(-tmp_192*tmp_234 - tmp_195*tmp_235) + tmp_206*(-tmp_201*tmp_234 - tmp_204*tmp_235) + tmp_215*(-tmp_210*tmp_234 - tmp_213*tmp_235) + tmp_224*(-tmp_219*tmp_234 - tmp_222*tmp_235) + tmp_233*(-tmp_228*tmp_234 - tmp_231*tmp_235) + tmp_53*(-tmp_234*tmp_32 - tmp_235*tmp_41) + tmp_62*(-tmp_234*tmp_57 - tmp_235*tmp_60) + tmp_71*(-tmp_234*tmp_66 - tmp_235*tmp_69) + tmp_80*(-tmp_234*tmp_75 - tmp_235*tmp_78) + tmp_89*(-tmp_234*tmp_84 - tmp_235*tmp_87) + tmp_98*(-tmp_234*tmp_93 - tmp_235*tmp_96);
      real_t a_0_2 = tmp_107*(-tmp_103*tmp_234 - tmp_105*tmp_236) + tmp_116*(-tmp_112*tmp_234 - tmp_114*tmp_236) + tmp_125*(-tmp_121*tmp_234 - tmp_123*tmp_236) + tmp_134*(-tmp_130*tmp_234 - tmp_132*tmp_236) + tmp_143*(-tmp_139*tmp_234 - tmp_141*tmp_236) + tmp_152*(-tmp_148*tmp_234 - tmp_150*tmp_236) + tmp_161*(-tmp_157*tmp_234 - tmp_159*tmp_236) + tmp_170*(-tmp_166*tmp_234 - tmp_168*tmp_236) + tmp_179*(-tmp_175*tmp_234 - tmp_177*tmp_236) + tmp_188*(-tmp_184*tmp_234 - tmp_186*tmp_236) + tmp_197*(-tmp_193*tmp_234 - tmp_195*tmp_236) + tmp_206*(-tmp_202*tmp_234 - tmp_204*tmp_236) + tmp_215*(-tmp_211*tmp_234 - tmp_213*tmp_236) + tmp_224*(-tmp_220*tmp_234 - tmp_222*tmp_236) + tmp_233*(-tmp_229*tmp_234 - tmp_231*tmp_236) + tmp_53*(-tmp_234*tmp_36 - tmp_236*tmp_41) + tmp_62*(-tmp_234*tmp_58 - tmp_236*tmp_60) + tmp_71*(-tmp_234*tmp_67 - tmp_236*tmp_69) + tmp_80*(-tmp_234*tmp_76 - tmp_236*tmp_78) + tmp_89*(-tmp_234*tmp_85 - tmp_236*tmp_87) + tmp_98*(-tmp_234*tmp_94 - tmp_236*tmp_96);
      real_t a_0_3 = tmp_107*(-tmp_104*tmp_234 - tmp_105*tmp_237) + tmp_116*(-tmp_113*tmp_234 - tmp_114*tmp_237) + tmp_125*(-tmp_122*tmp_234 - tmp_123*tmp_237) + tmp_134*(-tmp_131*tmp_234 - tmp_132*tmp_237) + tmp_143*(-tmp_140*tmp_234 - tmp_141*tmp_237) + tmp_152*(-tmp_149*tmp_234 - tmp_150*tmp_237) + tmp_161*(-tmp_158*tmp_234 - tmp_159*tmp_237) + tmp_170*(-tmp_167*tmp_234 - tmp_168*tmp_237) + tmp_179*(-tmp_176*tmp_234 - tmp_177*tmp_237) + tmp_188*(-tmp_185*tmp_234 - tmp_186*tmp_237) + tmp_197*(-tmp_194*tmp_234 - tmp_195*tmp_237) + tmp_206*(-tmp_203*tmp_234 - tmp_204*tmp_237) + tmp_215*(-tmp_212*tmp_234 - tmp_213*tmp_237) + tmp_224*(-tmp_221*tmp_234 - tmp_222*tmp_237) + tmp_233*(-tmp_230*tmp_234 - tmp_231*tmp_237) + tmp_53*(-tmp_234*tmp_40 - tmp_237*tmp_41) + tmp_62*(-tmp_234*tmp_59 - tmp_237*tmp_60) + tmp_71*(-tmp_234*tmp_68 - tmp_237*tmp_69) + tmp_80*(-tmp_234*tmp_77 - tmp_237*tmp_78) + tmp_89*(-tmp_234*tmp_86 - tmp_237*tmp_87) + tmp_98*(-tmp_234*tmp_95 - tmp_237*tmp_96);
      real_t a_1_0 = tmp_107*(-tmp_102*tmp_238 - tmp_105*tmp_239) + tmp_116*(-tmp_111*tmp_238 - tmp_114*tmp_239) + tmp_125*(-tmp_120*tmp_238 - tmp_123*tmp_239) + tmp_134*(-tmp_129*tmp_238 - tmp_132*tmp_239) + tmp_143*(-tmp_138*tmp_238 - tmp_141*tmp_239) + tmp_152*(-tmp_147*tmp_238 - tmp_150*tmp_239) + tmp_161*(-tmp_156*tmp_238 - tmp_159*tmp_239) + tmp_170*(-tmp_165*tmp_238 - tmp_168*tmp_239) + tmp_179*(-tmp_174*tmp_238 - tmp_177*tmp_239) + tmp_188*(-tmp_183*tmp_238 - tmp_186*tmp_239) + tmp_197*(-tmp_192*tmp_238 - tmp_195*tmp_239) + tmp_206*(-tmp_201*tmp_238 - tmp_204*tmp_239) + tmp_215*(-tmp_210*tmp_238 - tmp_213*tmp_239) + tmp_224*(-tmp_219*tmp_238 - tmp_222*tmp_239) + tmp_233*(-tmp_228*tmp_238 - tmp_231*tmp_239) + tmp_53*(-tmp_238*tmp_32 - tmp_239*tmp_41) + tmp_62*(-tmp_238*tmp_57 - tmp_239*tmp_60) + tmp_71*(-tmp_238*tmp_66 - tmp_239*tmp_69) + tmp_80*(-tmp_238*tmp_75 - tmp_239*tmp_78) + tmp_89*(-tmp_238*tmp_84 - tmp_239*tmp_87) + tmp_98*(-tmp_238*tmp_93 - tmp_239*tmp_96);
      real_t a_1_1 = tmp_107*(-tmp_102*tmp_235 - tmp_102*tmp_239) + tmp_116*(-tmp_111*tmp_235 - tmp_111*tmp_239) + tmp_125*(-tmp_120*tmp_235 - tmp_120*tmp_239) + tmp_134*(-tmp_129*tmp_235 - tmp_129*tmp_239) + tmp_143*(-tmp_138*tmp_235 - tmp_138*tmp_239) + tmp_152*(-tmp_147*tmp_235 - tmp_147*tmp_239) + tmp_161*(-tmp_156*tmp_235 - tmp_156*tmp_239) + tmp_170*(-tmp_165*tmp_235 - tmp_165*tmp_239) + tmp_179*(-tmp_174*tmp_235 - tmp_174*tmp_239) + tmp_188*(-tmp_183*tmp_235 - tmp_183*tmp_239) + tmp_197*(-tmp_192*tmp_235 - tmp_192*tmp_239) + tmp_206*(-tmp_201*tmp_235 - tmp_201*tmp_239) + tmp_215*(-tmp_210*tmp_235 - tmp_210*tmp_239) + tmp_224*(-tmp_219*tmp_235 - tmp_219*tmp_239) + tmp_233*(-tmp_228*tmp_235 - tmp_228*tmp_239) + tmp_53*(-tmp_235*tmp_32 - tmp_239*tmp_32) + tmp_62*(-tmp_235*tmp_57 - tmp_239*tmp_57) + tmp_71*(-tmp_235*tmp_66 - tmp_239*tmp_66) + tmp_80*(-tmp_235*tmp_75 - tmp_239*tmp_75) + tmp_89*(-tmp_235*tmp_84 - tmp_239*tmp_84) + tmp_98*(-tmp_235*tmp_93 - tmp_239*tmp_93);
      real_t a_1_2 = tmp_107*(-tmp_102*tmp_236 - tmp_103*tmp_239) + tmp_116*(-tmp_111*tmp_236 - tmp_112*tmp_239) + tmp_125*(-tmp_120*tmp_236 - tmp_121*tmp_239) + tmp_134*(-tmp_129*tmp_236 - tmp_130*tmp_239) + tmp_143*(-tmp_138*tmp_236 - tmp_139*tmp_239) + tmp_152*(-tmp_147*tmp_236 - tmp_148*tmp_239) + tmp_161*(-tmp_156*tmp_236 - tmp_157*tmp_239) + tmp_170*(-tmp_165*tmp_236 - tmp_166*tmp_239) + tmp_179*(-tmp_174*tmp_236 - tmp_175*tmp_239) + tmp_188*(-tmp_183*tmp_236 - tmp_184*tmp_239) + tmp_197*(-tmp_192*tmp_236 - tmp_193*tmp_239) + tmp_206*(-tmp_201*tmp_236 - tmp_202*tmp_239) + tmp_215*(-tmp_210*tmp_236 - tmp_211*tmp_239) + tmp_224*(-tmp_219*tmp_236 - tmp_220*tmp_239) + tmp_233*(-tmp_228*tmp_236 - tmp_229*tmp_239) + tmp_53*(-tmp_236*tmp_32 - tmp_239*tmp_36) + tmp_62*(-tmp_236*tmp_57 - tmp_239*tmp_58) + tmp_71*(-tmp_236*tmp_66 - tmp_239*tmp_67) + tmp_80*(-tmp_236*tmp_75 - tmp_239*tmp_76) + tmp_89*(-tmp_236*tmp_84 - tmp_239*tmp_85) + tmp_98*(-tmp_236*tmp_93 - tmp_239*tmp_94);
      real_t a_1_3 = tmp_107*(-tmp_102*tmp_237 - tmp_104*tmp_239) + tmp_116*(-tmp_111*tmp_237 - tmp_113*tmp_239) + tmp_125*(-tmp_120*tmp_237 - tmp_122*tmp_239) + tmp_134*(-tmp_129*tmp_237 - tmp_131*tmp_239) + tmp_143*(-tmp_138*tmp_237 - tmp_140*tmp_239) + tmp_152*(-tmp_147*tmp_237 - tmp_149*tmp_239) + tmp_161*(-tmp_156*tmp_237 - tmp_158*tmp_239) + tmp_170*(-tmp_165*tmp_237 - tmp_167*tmp_239) + tmp_179*(-tmp_174*tmp_237 - tmp_176*tmp_239) + tmp_188*(-tmp_183*tmp_237 - tmp_185*tmp_239) + tmp_197*(-tmp_192*tmp_237 - tmp_194*tmp_239) + tmp_206*(-tmp_201*tmp_237 - tmp_203*tmp_239) + tmp_215*(-tmp_210*tmp_237 - tmp_212*tmp_239) + tmp_224*(-tmp_219*tmp_237 - tmp_221*tmp_239) + tmp_233*(-tmp_228*tmp_237 - tmp_230*tmp_239) + tmp_53*(-tmp_237*tmp_32 - tmp_239*tmp_40) + tmp_62*(-tmp_237*tmp_57 - tmp_239*tmp_59) + tmp_71*(-tmp_237*tmp_66 - tmp_239*tmp_68) + tmp_80*(-tmp_237*tmp_75 - tmp_239*tmp_77) + tmp_89*(-tmp_237*tmp_84 - tmp_239*tmp_86) + tmp_98*(-tmp_237*tmp_93 - tmp_239*tmp_95);
      real_t a_2_0 = tmp_107*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_116*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_125*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_134*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_143*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_152*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_161*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_170*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_179*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_188*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_197*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_206*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_215*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_224*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_233*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_53*(-tmp_238*tmp_36 - tmp_240*tmp_41) + tmp_62*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_71*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_80*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_89*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_98*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_1 = tmp_107*(-tmp_102*tmp_240 - tmp_103*tmp_235) + tmp_116*(-tmp_111*tmp_240 - tmp_112*tmp_235) + tmp_125*(-tmp_120*tmp_240 - tmp_121*tmp_235) + tmp_134*(-tmp_129*tmp_240 - tmp_130*tmp_235) + tmp_143*(-tmp_138*tmp_240 - tmp_139*tmp_235) + tmp_152*(-tmp_147*tmp_240 - tmp_148*tmp_235) + tmp_161*(-tmp_156*tmp_240 - tmp_157*tmp_235) + tmp_170*(-tmp_165*tmp_240 - tmp_166*tmp_235) + tmp_179*(-tmp_174*tmp_240 - tmp_175*tmp_235) + tmp_188*(-tmp_183*tmp_240 - tmp_184*tmp_235) + tmp_197*(-tmp_192*tmp_240 - tmp_193*tmp_235) + tmp_206*(-tmp_201*tmp_240 - tmp_202*tmp_235) + tmp_215*(-tmp_210*tmp_240 - tmp_211*tmp_235) + tmp_224*(-tmp_219*tmp_240 - tmp_220*tmp_235) + tmp_233*(-tmp_228*tmp_240 - tmp_229*tmp_235) + tmp_53*(-tmp_235*tmp_36 - tmp_240*tmp_32) + tmp_62*(-tmp_235*tmp_58 - tmp_240*tmp_57) + tmp_71*(-tmp_235*tmp_67 - tmp_240*tmp_66) + tmp_80*(-tmp_235*tmp_76 - tmp_240*tmp_75) + tmp_89*(-tmp_235*tmp_85 - tmp_240*tmp_84) + tmp_98*(-tmp_235*tmp_94 - tmp_240*tmp_93);
      real_t a_2_2 = tmp_107*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_116*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_125*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_134*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_143*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_152*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_161*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_170*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_179*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_188*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_197*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_206*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_215*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_224*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_233*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_53*(-tmp_236*tmp_36 - tmp_240*tmp_36) + tmp_62*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_71*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_80*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_89*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_98*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_2_3 = tmp_107*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_116*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_125*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_134*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_143*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_152*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_161*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_170*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_179*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_188*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_197*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_206*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_215*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_224*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_233*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_53*(-tmp_237*tmp_36 - tmp_240*tmp_40) + tmp_62*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_71*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_80*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_89*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_98*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_3_0 = tmp_107*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_116*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_125*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_134*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_143*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_152*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_161*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_170*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_179*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_188*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_197*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_206*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_215*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_224*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_233*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_53*(-tmp_238*tmp_40 - tmp_241*tmp_41) + tmp_62*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_71*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_80*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_89*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_98*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_1 = tmp_107*(-tmp_102*tmp_241 - tmp_104*tmp_235) + tmp_116*(-tmp_111*tmp_241 - tmp_113*tmp_235) + tmp_125*(-tmp_120*tmp_241 - tmp_122*tmp_235) + tmp_134*(-tmp_129*tmp_241 - tmp_131*tmp_235) + tmp_143*(-tmp_138*tmp_241 - tmp_140*tmp_235) + tmp_152*(-tmp_147*tmp_241 - tmp_149*tmp_235) + tmp_161*(-tmp_156*tmp_241 - tmp_158*tmp_235) + tmp_170*(-tmp_165*tmp_241 - tmp_167*tmp_235) + tmp_179*(-tmp_174*tmp_241 - tmp_176*tmp_235) + tmp_188*(-tmp_183*tmp_241 - tmp_185*tmp_235) + tmp_197*(-tmp_192*tmp_241 - tmp_194*tmp_235) + tmp_206*(-tmp_201*tmp_241 - tmp_203*tmp_235) + tmp_215*(-tmp_210*tmp_241 - tmp_212*tmp_235) + tmp_224*(-tmp_219*tmp_241 - tmp_221*tmp_235) + tmp_233*(-tmp_228*tmp_241 - tmp_230*tmp_235) + tmp_53*(-tmp_235*tmp_40 - tmp_241*tmp_32) + tmp_62*(-tmp_235*tmp_59 - tmp_241*tmp_57) + tmp_71*(-tmp_235*tmp_68 - tmp_241*tmp_66) + tmp_80*(-tmp_235*tmp_77 - tmp_241*tmp_75) + tmp_89*(-tmp_235*tmp_86 - tmp_241*tmp_84) + tmp_98*(-tmp_235*tmp_95 - tmp_241*tmp_93);
      real_t a_3_2 = tmp_107*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_116*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_125*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_134*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_143*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_152*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_161*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_170*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_179*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_188*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_197*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_206*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_215*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_224*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_233*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_53*(-tmp_236*tmp_40 - tmp_241*tmp_36) + tmp_62*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_71*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_80*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_89*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_98*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_3_3 = tmp_107*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_116*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_125*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_134*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_143*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_152*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_161*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_170*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_179*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_188*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_197*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_206*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_215*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_224*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_233*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_53*(-tmp_237*tmp_40 - tmp_241*tmp_40) + tmp_62*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_71*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_80*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_89*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_98*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_3*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_0*tmp_13 + tmp_11*tmp_2 - tmp_12*tmp_5 - tmp_14*tmp_2 + tmp_5*tmp_7);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_6 + tmp_10*tmp_2;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_2*tmp_8 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_13;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_5;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = p_affine_13_0*(-tmp_36 - tmp_40 - tmp_44 + 1);
      real_t tmp_46 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_49 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_50 = -tmp_46*tmp_47 + tmp_48*tmp_49;
      real_t tmp_51 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_52 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_53 = tmp_46*tmp_52;
      real_t tmp_54 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_55 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_56 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_57 = tmp_47*tmp_56;
      real_t tmp_58 = tmp_46*tmp_54;
      real_t tmp_59 = tmp_48*tmp_56;
      real_t tmp_60 = tmp_49*tmp_55;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_49*tmp_54 + tmp_51*tmp_53 - tmp_51*tmp_59 - tmp_52*tmp_60 + tmp_55*tmp_57);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_50*tmp_62;
      real_t tmp_64 = tmp_46*tmp_51 - tmp_60;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_47*tmp_55 - tmp_48*tmp_51;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -1.0*tmp_63 - 1.0*tmp_65 - 1.0*tmp_67;
      real_t tmp_69 = 0.5*tmp_15;
      real_t tmp_70 = -tmp_29*tmp_69 - tmp_39*tmp_69 - tmp_43*tmp_69;
      real_t tmp_71 = tmp_48*tmp_54 - tmp_52*tmp_55;
      real_t tmp_72 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_73 = tmp_61*(tmp_19 + tmp_72);
      real_t tmp_74 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_75 = tmp_61*(tmp_26 + tmp_74);
      real_t tmp_76 = -tmp_47*tmp_54 + tmp_51*tmp_52;
      real_t tmp_77 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_78 = tmp_61*(tmp_33 + tmp_77);
      real_t tmp_79 = tmp_66*tmp_75 + tmp_71*tmp_73 + tmp_76*tmp_78;
      real_t tmp_80 = tmp_55*tmp_56 - tmp_58;
      real_t tmp_81 = tmp_49*tmp_54 - tmp_51*tmp_56;
      real_t tmp_82 = tmp_64*tmp_75 + tmp_73*tmp_80 + tmp_78*tmp_81;
      real_t tmp_83 = tmp_53 - tmp_59;
      real_t tmp_84 = -tmp_49*tmp_52 + tmp_57;
      real_t tmp_85 = tmp_50*tmp_75 + tmp_73*tmp_83 + tmp_78*tmp_84;
      real_t tmp_86 = -tmp_79 - tmp_82 - tmp_85 + 1;
      real_t tmp_87 = 1.0*std::pow((std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)), 1.0/2.0);
      real_t tmp_88 = 0.0068572537431980923*tmp_87;
      real_t tmp_89 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_90 = tmp_15*(tmp_20 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_92 = tmp_15*(tmp_27 + tmp_91);
      real_t tmp_93 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_94 = tmp_15*(tmp_34 + tmp_93);
      real_t tmp_95 = tmp_22*tmp_92 + tmp_29*tmp_94 + tmp_4*tmp_90;
      real_t tmp_96 = tmp_37*tmp_90 + tmp_38*tmp_92 + tmp_39*tmp_94;
      real_t tmp_97 = tmp_41*tmp_90 + tmp_42*tmp_92 + tmp_43*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = p_affine_13_0*tmp_68;
      real_t tmp_100 = tmp_61*(tmp_72 + tmp_89);
      real_t tmp_101 = tmp_61*(tmp_74 + tmp_91);
      real_t tmp_102 = tmp_61*(tmp_77 + tmp_93);
      real_t tmp_103 = tmp_100*tmp_71 + tmp_101*tmp_66 + tmp_102*tmp_76;
      real_t tmp_104 = tmp_100*tmp_80 + tmp_101*tmp_64 + tmp_102*tmp_81;
      real_t tmp_105 = tmp_100*tmp_83 + tmp_101*tmp_50 + tmp_102*tmp_84;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.037198804536718075*tmp_87;
      real_t tmp_108 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_109 = tmp_15*(tmp_108 + tmp_20);
      real_t tmp_110 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_111 = tmp_15*(tmp_110 + tmp_27);
      real_t tmp_112 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_34);
      real_t tmp_114 = tmp_109*tmp_4 + tmp_111*tmp_22 + tmp_113*tmp_29;
      real_t tmp_115 = tmp_109*tmp_37 + tmp_111*tmp_38 + tmp_113*tmp_39;
      real_t tmp_116 = tmp_109*tmp_41 + tmp_111*tmp_42 + tmp_113*tmp_43;
      real_t tmp_117 = -tmp_114 - tmp_115 - tmp_116 + 1;
      real_t tmp_118 = tmp_61*(tmp_108 + tmp_72);
      real_t tmp_119 = tmp_61*(tmp_110 + tmp_74);
      real_t tmp_120 = tmp_61*(tmp_112 + tmp_77);
      real_t tmp_121 = tmp_118*tmp_71 + tmp_119*tmp_66 + tmp_120*tmp_76;
      real_t tmp_122 = tmp_118*tmp_80 + tmp_119*tmp_64 + tmp_120*tmp_81;
      real_t tmp_123 = tmp_118*tmp_83 + tmp_119*tmp_50 + tmp_120*tmp_84;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.020848748529055869*tmp_87;
      real_t tmp_126 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_127 = tmp_15*(tmp_126 + tmp_20);
      real_t tmp_128 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_27);
      real_t tmp_130 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_34);
      real_t tmp_132 = tmp_127*tmp_4 + tmp_129*tmp_22 + tmp_131*tmp_29;
      real_t tmp_133 = tmp_127*tmp_37 + tmp_129*tmp_38 + tmp_131*tmp_39;
      real_t tmp_134 = tmp_127*tmp_41 + tmp_129*tmp_42 + tmp_131*tmp_43;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = tmp_61*(tmp_126 + tmp_72);
      real_t tmp_137 = tmp_61*(tmp_128 + tmp_74);
      real_t tmp_138 = tmp_61*(tmp_130 + tmp_77);
      real_t tmp_139 = tmp_136*tmp_71 + tmp_137*tmp_66 + tmp_138*tmp_76;
      real_t tmp_140 = tmp_136*tmp_80 + tmp_137*tmp_64 + tmp_138*tmp_81;
      real_t tmp_141 = tmp_136*tmp_83 + tmp_137*tmp_50 + tmp_138*tmp_84;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_87;
      real_t tmp_144 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_145 = tmp_15*(tmp_144 + tmp_20);
      real_t tmp_146 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_147 = tmp_15*(tmp_146 + tmp_27);
      real_t tmp_148 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_149 = tmp_15*(tmp_148 + tmp_34);
      real_t tmp_150 = tmp_145*tmp_4 + tmp_147*tmp_22 + tmp_149*tmp_29;
      real_t tmp_151 = tmp_145*tmp_37 + tmp_147*tmp_38 + tmp_149*tmp_39;
      real_t tmp_152 = tmp_145*tmp_41 + tmp_147*tmp_42 + tmp_149*tmp_43;
      real_t tmp_153 = -tmp_150 - tmp_151 - tmp_152 + 1;
      real_t tmp_154 = tmp_61*(tmp_144 + tmp_72);
      real_t tmp_155 = tmp_61*(tmp_146 + tmp_74);
      real_t tmp_156 = tmp_61*(tmp_148 + tmp_77);
      real_t tmp_157 = tmp_154*tmp_71 + tmp_155*tmp_66 + tmp_156*tmp_76;
      real_t tmp_158 = tmp_154*tmp_80 + tmp_155*tmp_64 + tmp_156*tmp_81;
      real_t tmp_159 = tmp_154*tmp_83 + tmp_155*tmp_50 + tmp_156*tmp_84;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 0.020848748529055869*tmp_87;
      real_t tmp_162 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_163 = tmp_15*(tmp_162 + tmp_20);
      real_t tmp_164 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_165 = tmp_15*(tmp_164 + tmp_27);
      real_t tmp_166 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_34);
      real_t tmp_168 = tmp_163*tmp_4 + tmp_165*tmp_22 + tmp_167*tmp_29;
      real_t tmp_169 = tmp_163*tmp_37 + tmp_165*tmp_38 + tmp_167*tmp_39;
      real_t tmp_170 = tmp_163*tmp_41 + tmp_165*tmp_42 + tmp_167*tmp_43;
      real_t tmp_171 = -tmp_168 - tmp_169 - tmp_170 + 1;
      real_t tmp_172 = tmp_61*(tmp_162 + tmp_72);
      real_t tmp_173 = tmp_61*(tmp_164 + tmp_74);
      real_t tmp_174 = tmp_61*(tmp_166 + tmp_77);
      real_t tmp_175 = tmp_172*tmp_71 + tmp_173*tmp_66 + tmp_174*tmp_76;
      real_t tmp_176 = tmp_172*tmp_80 + tmp_173*tmp_64 + tmp_174*tmp_81;
      real_t tmp_177 = tmp_172*tmp_83 + tmp_173*tmp_50 + tmp_174*tmp_84;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.019202922745021479*tmp_87;
      real_t tmp_180 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_181 = tmp_15*(tmp_180 + tmp_20);
      real_t tmp_182 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_183 = tmp_15*(tmp_182 + tmp_27);
      real_t tmp_184 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_185 = tmp_15*(tmp_184 + tmp_34);
      real_t tmp_186 = tmp_181*tmp_4 + tmp_183*tmp_22 + tmp_185*tmp_29;
      real_t tmp_187 = tmp_181*tmp_37 + tmp_183*tmp_38 + tmp_185*tmp_39;
      real_t tmp_188 = tmp_181*tmp_41 + tmp_183*tmp_42 + tmp_185*tmp_43;
      real_t tmp_189 = -tmp_186 - tmp_187 - tmp_188 + 1;
      real_t tmp_190 = tmp_61*(tmp_180 + tmp_72);
      real_t tmp_191 = tmp_61*(tmp_182 + tmp_74);
      real_t tmp_192 = tmp_61*(tmp_184 + tmp_77);
      real_t tmp_193 = tmp_190*tmp_71 + tmp_191*tmp_66 + tmp_192*tmp_76;
      real_t tmp_194 = tmp_190*tmp_80 + tmp_191*tmp_64 + tmp_192*tmp_81;
      real_t tmp_195 = tmp_190*tmp_83 + tmp_191*tmp_50 + tmp_192*tmp_84;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.020848748529055869*tmp_87;
      real_t tmp_198 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_199 = tmp_15*(tmp_198 + tmp_20);
      real_t tmp_200 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_201 = tmp_15*(tmp_200 + tmp_27);
      real_t tmp_202 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_203 = tmp_15*(tmp_202 + tmp_34);
      real_t tmp_204 = tmp_199*tmp_4 + tmp_201*tmp_22 + tmp_203*tmp_29;
      real_t tmp_205 = tmp_199*tmp_37 + tmp_201*tmp_38 + tmp_203*tmp_39;
      real_t tmp_206 = tmp_199*tmp_41 + tmp_201*tmp_42 + tmp_203*tmp_43;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = tmp_61*(tmp_198 + tmp_72);
      real_t tmp_209 = tmp_61*(tmp_200 + tmp_74);
      real_t tmp_210 = tmp_61*(tmp_202 + tmp_77);
      real_t tmp_211 = tmp_208*tmp_71 + tmp_209*tmp_66 + tmp_210*tmp_76;
      real_t tmp_212 = tmp_208*tmp_80 + tmp_209*tmp_64 + tmp_210*tmp_81;
      real_t tmp_213 = tmp_208*tmp_83 + tmp_209*tmp_50 + tmp_210*tmp_84;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 0.019202922745021479*tmp_87;
      real_t tmp_216 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_217 = tmp_15*(tmp_20 + tmp_216);
      real_t tmp_218 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_219 = tmp_15*(tmp_218 + tmp_27);
      real_t tmp_220 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_221 = tmp_15*(tmp_220 + tmp_34);
      real_t tmp_222 = tmp_217*tmp_4 + tmp_219*tmp_22 + tmp_221*tmp_29;
      real_t tmp_223 = tmp_217*tmp_37 + tmp_219*tmp_38 + tmp_221*tmp_39;
      real_t tmp_224 = tmp_217*tmp_41 + tmp_219*tmp_42 + tmp_221*tmp_43;
      real_t tmp_225 = -tmp_222 - tmp_223 - tmp_224 + 1;
      real_t tmp_226 = tmp_61*(tmp_216 + tmp_72);
      real_t tmp_227 = tmp_61*(tmp_218 + tmp_74);
      real_t tmp_228 = tmp_61*(tmp_220 + tmp_77);
      real_t tmp_229 = tmp_226*tmp_71 + tmp_227*tmp_66 + tmp_228*tmp_76;
      real_t tmp_230 = tmp_226*tmp_80 + tmp_227*tmp_64 + tmp_228*tmp_81;
      real_t tmp_231 = tmp_226*tmp_83 + tmp_227*tmp_50 + tmp_228*tmp_84;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 0.020848748529055869*tmp_87;
      real_t tmp_234 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_235 = tmp_15*(tmp_20 + tmp_234);
      real_t tmp_236 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_237 = tmp_15*(tmp_236 + tmp_27);
      real_t tmp_238 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_239 = tmp_15*(tmp_238 + tmp_34);
      real_t tmp_240 = tmp_22*tmp_237 + tmp_235*tmp_4 + tmp_239*tmp_29;
      real_t tmp_241 = tmp_235*tmp_37 + tmp_237*tmp_38 + tmp_239*tmp_39;
      real_t tmp_242 = tmp_235*tmp_41 + tmp_237*tmp_42 + tmp_239*tmp_43;
      real_t tmp_243 = -tmp_240 - tmp_241 - tmp_242 + 1;
      real_t tmp_244 = tmp_61*(tmp_234 + tmp_72);
      real_t tmp_245 = tmp_61*(tmp_236 + tmp_74);
      real_t tmp_246 = tmp_61*(tmp_238 + tmp_77);
      real_t tmp_247 = tmp_244*tmp_71 + tmp_245*tmp_66 + tmp_246*tmp_76;
      real_t tmp_248 = tmp_244*tmp_80 + tmp_245*tmp_64 + tmp_246*tmp_81;
      real_t tmp_249 = tmp_244*tmp_83 + tmp_245*tmp_50 + tmp_246*tmp_84;
      real_t tmp_250 = -tmp_247 - tmp_248 - tmp_249 + 1;
      real_t tmp_251 = 0.019202922745021479*tmp_87;
      real_t tmp_252 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_253 = tmp_15*(tmp_20 + tmp_252);
      real_t tmp_254 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_255 = tmp_15*(tmp_254 + tmp_27);
      real_t tmp_256 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_257 = tmp_15*(tmp_256 + tmp_34);
      real_t tmp_258 = tmp_22*tmp_255 + tmp_253*tmp_4 + tmp_257*tmp_29;
      real_t tmp_259 = tmp_253*tmp_37 + tmp_255*tmp_38 + tmp_257*tmp_39;
      real_t tmp_260 = tmp_253*tmp_41 + tmp_255*tmp_42 + tmp_257*tmp_43;
      real_t tmp_261 = -tmp_258 - tmp_259 - tmp_260 + 1;
      real_t tmp_262 = tmp_61*(tmp_252 + tmp_72);
      real_t tmp_263 = tmp_61*(tmp_254 + tmp_74);
      real_t tmp_264 = tmp_61*(tmp_256 + tmp_77);
      real_t tmp_265 = tmp_262*tmp_71 + tmp_263*tmp_66 + tmp_264*tmp_76;
      real_t tmp_266 = tmp_262*tmp_80 + tmp_263*tmp_64 + tmp_264*tmp_81;
      real_t tmp_267 = tmp_262*tmp_83 + tmp_263*tmp_50 + tmp_264*tmp_84;
      real_t tmp_268 = -tmp_265 - tmp_266 - tmp_267 + 1;
      real_t tmp_269 = 0.020848748529055869*tmp_87;
      real_t tmp_270 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_271 = tmp_15*(tmp_20 + tmp_270);
      real_t tmp_272 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_273 = tmp_15*(tmp_27 + tmp_272);
      real_t tmp_274 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_275 = tmp_15*(tmp_274 + tmp_34);
      real_t tmp_276 = tmp_22*tmp_273 + tmp_271*tmp_4 + tmp_275*tmp_29;
      real_t tmp_277 = tmp_271*tmp_37 + tmp_273*tmp_38 + tmp_275*tmp_39;
      real_t tmp_278 = tmp_271*tmp_41 + tmp_273*tmp_42 + tmp_275*tmp_43;
      real_t tmp_279 = -tmp_276 - tmp_277 - tmp_278 + 1;
      real_t tmp_280 = tmp_61*(tmp_270 + tmp_72);
      real_t tmp_281 = tmp_61*(tmp_272 + tmp_74);
      real_t tmp_282 = tmp_61*(tmp_274 + tmp_77);
      real_t tmp_283 = tmp_280*tmp_71 + tmp_281*tmp_66 + tmp_282*tmp_76;
      real_t tmp_284 = tmp_280*tmp_80 + tmp_281*tmp_64 + tmp_282*tmp_81;
      real_t tmp_285 = tmp_280*tmp_83 + tmp_281*tmp_50 + tmp_282*tmp_84;
      real_t tmp_286 = -tmp_283 - tmp_284 - tmp_285 + 1;
      real_t tmp_287 = 0.019202922745021479*tmp_87;
      real_t tmp_288 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_289 = tmp_15*(tmp_20 + tmp_288);
      real_t tmp_290 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_291 = tmp_15*(tmp_27 + tmp_290);
      real_t tmp_292 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_293 = tmp_15*(tmp_292 + tmp_34);
      real_t tmp_294 = tmp_22*tmp_291 + tmp_289*tmp_4 + tmp_29*tmp_293;
      real_t tmp_295 = tmp_289*tmp_37 + tmp_291*tmp_38 + tmp_293*tmp_39;
      real_t tmp_296 = tmp_289*tmp_41 + tmp_291*tmp_42 + tmp_293*tmp_43;
      real_t tmp_297 = -tmp_294 - tmp_295 - tmp_296 + 1;
      real_t tmp_298 = tmp_61*(tmp_288 + tmp_72);
      real_t tmp_299 = tmp_61*(tmp_290 + tmp_74);
      real_t tmp_300 = tmp_61*(tmp_292 + tmp_77);
      real_t tmp_301 = tmp_298*tmp_71 + tmp_299*tmp_66 + tmp_300*tmp_76;
      real_t tmp_302 = tmp_298*tmp_80 + tmp_299*tmp_64 + tmp_300*tmp_81;
      real_t tmp_303 = tmp_298*tmp_83 + tmp_299*tmp_50 + tmp_300*tmp_84;
      real_t tmp_304 = -tmp_301 - tmp_302 - tmp_303 + 1;
      real_t tmp_305 = 0.042507265838595799*tmp_87;
      real_t tmp_306 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_307 = tmp_15*(tmp_20 + tmp_306);
      real_t tmp_308 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_309 = tmp_15*(tmp_27 + tmp_308);
      real_t tmp_310 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_311 = tmp_15*(tmp_310 + tmp_34);
      real_t tmp_312 = tmp_22*tmp_309 + tmp_29*tmp_311 + tmp_307*tmp_4;
      real_t tmp_313 = tmp_307*tmp_37 + tmp_309*tmp_38 + tmp_311*tmp_39;
      real_t tmp_314 = tmp_307*tmp_41 + tmp_309*tmp_42 + tmp_311*tmp_43;
      real_t tmp_315 = -tmp_312 - tmp_313 - tmp_314 + 1;
      real_t tmp_316 = tmp_61*(tmp_306 + tmp_72);
      real_t tmp_317 = tmp_61*(tmp_308 + tmp_74);
      real_t tmp_318 = tmp_61*(tmp_310 + tmp_77);
      real_t tmp_319 = tmp_316*tmp_71 + tmp_317*tmp_66 + tmp_318*tmp_76;
      real_t tmp_320 = tmp_316*tmp_80 + tmp_317*tmp_64 + tmp_318*tmp_81;
      real_t tmp_321 = tmp_316*tmp_83 + tmp_317*tmp_50 + tmp_318*tmp_84;
      real_t tmp_322 = -tmp_319 - tmp_320 - tmp_321 + 1;
      real_t tmp_323 = 0.020848748529055869*tmp_87;
      real_t tmp_324 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_325 = tmp_15*(tmp_20 + tmp_324);
      real_t tmp_326 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_327 = tmp_15*(tmp_27 + tmp_326);
      real_t tmp_328 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_329 = tmp_15*(tmp_328 + tmp_34);
      real_t tmp_330 = tmp_22*tmp_327 + tmp_29*tmp_329 + tmp_325*tmp_4;
      real_t tmp_331 = tmp_325*tmp_37 + tmp_327*tmp_38 + tmp_329*tmp_39;
      real_t tmp_332 = tmp_325*tmp_41 + tmp_327*tmp_42 + tmp_329*tmp_43;
      real_t tmp_333 = -tmp_330 - tmp_331 - tmp_332 + 1;
      real_t tmp_334 = tmp_61*(tmp_324 + tmp_72);
      real_t tmp_335 = tmp_61*(tmp_326 + tmp_74);
      real_t tmp_336 = tmp_61*(tmp_328 + tmp_77);
      real_t tmp_337 = tmp_334*tmp_71 + tmp_335*tmp_66 + tmp_336*tmp_76;
      real_t tmp_338 = tmp_334*tmp_80 + tmp_335*tmp_64 + tmp_336*tmp_81;
      real_t tmp_339 = tmp_334*tmp_83 + tmp_335*tmp_50 + tmp_336*tmp_84;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = 0.0068572537431980923*tmp_87;
      real_t tmp_342 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_343 = tmp_15*(tmp_20 + tmp_342);
      real_t tmp_344 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_345 = tmp_15*(tmp_27 + tmp_344);
      real_t tmp_346 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_347 = tmp_15*(tmp_34 + tmp_346);
      real_t tmp_348 = tmp_22*tmp_345 + tmp_29*tmp_347 + tmp_343*tmp_4;
      real_t tmp_349 = tmp_343*tmp_37 + tmp_345*tmp_38 + tmp_347*tmp_39;
      real_t tmp_350 = tmp_343*tmp_41 + tmp_345*tmp_42 + tmp_347*tmp_43;
      real_t tmp_351 = -tmp_348 - tmp_349 - tmp_350 + 1;
      real_t tmp_352 = tmp_61*(tmp_342 + tmp_72);
      real_t tmp_353 = tmp_61*(tmp_344 + tmp_74);
      real_t tmp_354 = tmp_61*(tmp_346 + tmp_77);
      real_t tmp_355 = tmp_352*tmp_71 + tmp_353*tmp_66 + tmp_354*tmp_76;
      real_t tmp_356 = tmp_352*tmp_80 + tmp_353*tmp_64 + tmp_354*tmp_81;
      real_t tmp_357 = tmp_352*tmp_83 + tmp_353*tmp_50 + tmp_354*tmp_84;
      real_t tmp_358 = -tmp_355 - tmp_356 - tmp_357 + 1;
      real_t tmp_359 = 0.037198804536718075*tmp_87;
      real_t tmp_360 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_361 = tmp_15*(tmp_20 + tmp_360);
      real_t tmp_362 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_363 = tmp_15*(tmp_27 + tmp_362);
      real_t tmp_364 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_365 = tmp_15*(tmp_34 + tmp_364);
      real_t tmp_366 = tmp_22*tmp_363 + tmp_29*tmp_365 + tmp_361*tmp_4;
      real_t tmp_367 = tmp_361*tmp_37 + tmp_363*tmp_38 + tmp_365*tmp_39;
      real_t tmp_368 = tmp_361*tmp_41 + tmp_363*tmp_42 + tmp_365*tmp_43;
      real_t tmp_369 = -tmp_366 - tmp_367 - tmp_368 + 1;
      real_t tmp_370 = tmp_61*(tmp_360 + tmp_72);
      real_t tmp_371 = tmp_61*(tmp_362 + tmp_74);
      real_t tmp_372 = tmp_61*(tmp_364 + tmp_77);
      real_t tmp_373 = tmp_370*tmp_71 + tmp_371*tmp_66 + tmp_372*tmp_76;
      real_t tmp_374 = tmp_370*tmp_80 + tmp_371*tmp_64 + tmp_372*tmp_81;
      real_t tmp_375 = tmp_370*tmp_83 + tmp_371*tmp_50 + tmp_372*tmp_84;
      real_t tmp_376 = -tmp_373 - tmp_374 - tmp_375 + 1;
      real_t tmp_377 = 0.042507265838595799*tmp_87;
      real_t tmp_378 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_379 = tmp_15*(tmp_20 + tmp_378);
      real_t tmp_380 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_381 = tmp_15*(tmp_27 + tmp_380);
      real_t tmp_382 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_383 = tmp_15*(tmp_34 + tmp_382);
      real_t tmp_384 = tmp_22*tmp_381 + tmp_29*tmp_383 + tmp_379*tmp_4;
      real_t tmp_385 = tmp_37*tmp_379 + tmp_38*tmp_381 + tmp_383*tmp_39;
      real_t tmp_386 = tmp_379*tmp_41 + tmp_381*tmp_42 + tmp_383*tmp_43;
      real_t tmp_387 = -tmp_384 - tmp_385 - tmp_386 + 1;
      real_t tmp_388 = tmp_61*(tmp_378 + tmp_72);
      real_t tmp_389 = tmp_61*(tmp_380 + tmp_74);
      real_t tmp_390 = tmp_61*(tmp_382 + tmp_77);
      real_t tmp_391 = tmp_388*tmp_71 + tmp_389*tmp_66 + tmp_390*tmp_76;
      real_t tmp_392 = tmp_388*tmp_80 + tmp_389*tmp_64 + tmp_390*tmp_81;
      real_t tmp_393 = tmp_388*tmp_83 + tmp_389*tmp_50 + tmp_390*tmp_84;
      real_t tmp_394 = -tmp_391 - tmp_392 - tmp_393 + 1;
      real_t tmp_395 = 0.0068572537431980923*tmp_87;
      real_t tmp_396 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_397 = tmp_15*(tmp_20 + tmp_396);
      real_t tmp_398 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_399 = tmp_15*(tmp_27 + tmp_398);
      real_t tmp_400 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_401 = tmp_15*(tmp_34 + tmp_400);
      real_t tmp_402 = tmp_22*tmp_399 + tmp_29*tmp_401 + tmp_397*tmp_4;
      real_t tmp_403 = tmp_37*tmp_397 + tmp_38*tmp_399 + tmp_39*tmp_401;
      real_t tmp_404 = tmp_397*tmp_41 + tmp_399*tmp_42 + tmp_401*tmp_43;
      real_t tmp_405 = -tmp_402 - tmp_403 - tmp_404 + 1;
      real_t tmp_406 = tmp_61*(tmp_396 + tmp_72);
      real_t tmp_407 = tmp_61*(tmp_398 + tmp_74);
      real_t tmp_408 = tmp_61*(tmp_400 + tmp_77);
      real_t tmp_409 = tmp_406*tmp_71 + tmp_407*tmp_66 + tmp_408*tmp_76;
      real_t tmp_410 = tmp_406*tmp_80 + tmp_407*tmp_64 + tmp_408*tmp_81;
      real_t tmp_411 = tmp_406*tmp_83 + tmp_407*tmp_50 + tmp_408*tmp_84;
      real_t tmp_412 = -tmp_409 - tmp_410 - tmp_411 + 1;
      real_t tmp_413 = 0.037198804536718075*tmp_87;
      real_t tmp_414 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_415 = tmp_15*(tmp_20 + tmp_414);
      real_t tmp_416 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_417 = tmp_15*(tmp_27 + tmp_416);
      real_t tmp_418 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_419 = tmp_15*(tmp_34 + tmp_418);
      real_t tmp_420 = tmp_22*tmp_417 + tmp_29*tmp_419 + tmp_4*tmp_415;
      real_t tmp_421 = tmp_37*tmp_415 + tmp_38*tmp_417 + tmp_39*tmp_419;
      real_t tmp_422 = tmp_41*tmp_415 + tmp_417*tmp_42 + tmp_419*tmp_43;
      real_t tmp_423 = -tmp_420 - tmp_421 - tmp_422 + 1;
      real_t tmp_424 = tmp_61*(tmp_414 + tmp_72);
      real_t tmp_425 = tmp_61*(tmp_416 + tmp_74);
      real_t tmp_426 = tmp_61*(tmp_418 + tmp_77);
      real_t tmp_427 = tmp_424*tmp_71 + tmp_425*tmp_66 + tmp_426*tmp_76;
      real_t tmp_428 = tmp_424*tmp_80 + tmp_425*tmp_64 + tmp_426*tmp_81;
      real_t tmp_429 = tmp_424*tmp_83 + tmp_425*tmp_50 + tmp_426*tmp_84;
      real_t tmp_430 = -tmp_427 - tmp_428 - tmp_429 + 1;
      real_t tmp_431 = 0.042507265838595799*tmp_87;
      real_t tmp_432 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_433 = tmp_15*(tmp_20 + tmp_432);
      real_t tmp_434 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_435 = tmp_15*(tmp_27 + tmp_434);
      real_t tmp_436 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_437 = tmp_15*(tmp_34 + tmp_436);
      real_t tmp_438 = tmp_22*tmp_435 + tmp_29*tmp_437 + tmp_4*tmp_433;
      real_t tmp_439 = tmp_37*tmp_433 + tmp_38*tmp_435 + tmp_39*tmp_437;
      real_t tmp_440 = tmp_41*tmp_433 + tmp_42*tmp_435 + tmp_43*tmp_437;
      real_t tmp_441 = -tmp_438 - tmp_439 - tmp_440 + 1;
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_72);
      real_t tmp_443 = tmp_61*(tmp_434 + tmp_74);
      real_t tmp_444 = tmp_61*(tmp_436 + tmp_77);
      real_t tmp_445 = tmp_442*tmp_71 + tmp_443*tmp_66 + tmp_444*tmp_76;
      real_t tmp_446 = tmp_442*tmp_80 + tmp_443*tmp_64 + tmp_444*tmp_81;
      real_t tmp_447 = tmp_442*tmp_83 + tmp_443*tmp_50 + tmp_444*tmp_84;
      real_t tmp_448 = -tmp_445 - tmp_446 - tmp_447 + 1;
      real_t tmp_449 = 0.019202922745021479*tmp_87;
      real_t tmp_450 = p_affine_13_0*tmp_67;
      real_t tmp_451 = p_affine_13_0*tmp_65;
      real_t tmp_452 = p_affine_13_0*tmp_63;
      real_t a_0_0 = tmp_107*(p_affine_13_1*tmp_106*tmp_70 - tmp_98*tmp_99) + tmp_125*(p_affine_13_1*tmp_124*tmp_70 - tmp_117*tmp_99) + tmp_143*(p_affine_13_1*tmp_142*tmp_70 - tmp_135*tmp_99) + tmp_161*(p_affine_13_1*tmp_160*tmp_70 - tmp_153*tmp_99) + tmp_179*(p_affine_13_1*tmp_178*tmp_70 - tmp_171*tmp_99) + tmp_197*(p_affine_13_1*tmp_196*tmp_70 - tmp_189*tmp_99) + tmp_215*(p_affine_13_1*tmp_214*tmp_70 - tmp_207*tmp_99) + tmp_233*(p_affine_13_1*tmp_232*tmp_70 - tmp_225*tmp_99) + tmp_251*(p_affine_13_1*tmp_250*tmp_70 - tmp_243*tmp_99) + tmp_269*(p_affine_13_1*tmp_268*tmp_70 - tmp_261*tmp_99) + tmp_287*(p_affine_13_1*tmp_286*tmp_70 - tmp_279*tmp_99) + tmp_305*(p_affine_13_1*tmp_304*tmp_70 - tmp_297*tmp_99) + tmp_323*(p_affine_13_1*tmp_322*tmp_70 - tmp_315*tmp_99) + tmp_341*(p_affine_13_1*tmp_340*tmp_70 - tmp_333*tmp_99) + tmp_359*(p_affine_13_1*tmp_358*tmp_70 - tmp_351*tmp_99) + tmp_377*(p_affine_13_1*tmp_376*tmp_70 - tmp_369*tmp_99) + tmp_395*(p_affine_13_1*tmp_394*tmp_70 - tmp_387*tmp_99) + tmp_413*(p_affine_13_1*tmp_412*tmp_70 - tmp_405*tmp_99) + tmp_431*(p_affine_13_1*tmp_430*tmp_70 - tmp_423*tmp_99) + tmp_449*(p_affine_13_1*tmp_448*tmp_70 - tmp_441*tmp_99) + tmp_88*(p_affine_13_1*tmp_70*tmp_86 - tmp_45*tmp_68);
      real_t a_0_1 = tmp_107*(p_affine_13_1*tmp_103*tmp_70 - tmp_450*tmp_98) + tmp_125*(p_affine_13_1*tmp_121*tmp_70 - tmp_117*tmp_450) + tmp_143*(p_affine_13_1*tmp_139*tmp_70 - tmp_135*tmp_450) + tmp_161*(p_affine_13_1*tmp_157*tmp_70 - tmp_153*tmp_450) + tmp_179*(p_affine_13_1*tmp_175*tmp_70 - tmp_171*tmp_450) + tmp_197*(p_affine_13_1*tmp_193*tmp_70 - tmp_189*tmp_450) + tmp_215*(p_affine_13_1*tmp_211*tmp_70 - tmp_207*tmp_450) + tmp_233*(p_affine_13_1*tmp_229*tmp_70 - tmp_225*tmp_450) + tmp_251*(p_affine_13_1*tmp_247*tmp_70 - tmp_243*tmp_450) + tmp_269*(p_affine_13_1*tmp_265*tmp_70 - tmp_261*tmp_450) + tmp_287*(p_affine_13_1*tmp_283*tmp_70 - tmp_279*tmp_450) + tmp_305*(p_affine_13_1*tmp_301*tmp_70 - tmp_297*tmp_450) + tmp_323*(p_affine_13_1*tmp_319*tmp_70 - tmp_315*tmp_450) + tmp_341*(p_affine_13_1*tmp_337*tmp_70 - tmp_333*tmp_450) + tmp_359*(p_affine_13_1*tmp_355*tmp_70 - tmp_351*tmp_450) + tmp_377*(p_affine_13_1*tmp_373*tmp_70 - tmp_369*tmp_450) + tmp_395*(p_affine_13_1*tmp_391*tmp_70 - tmp_387*tmp_450) + tmp_413*(p_affine_13_1*tmp_409*tmp_70 - tmp_405*tmp_450) + tmp_431*(p_affine_13_1*tmp_427*tmp_70 - tmp_423*tmp_450) + tmp_449*(p_affine_13_1*tmp_445*tmp_70 - tmp_441*tmp_450) + tmp_88*(p_affine_13_1*tmp_70*tmp_79 - tmp_45*tmp_67);
      real_t a_0_2 = tmp_107*(p_affine_13_1*tmp_104*tmp_70 - tmp_451*tmp_98) + tmp_125*(p_affine_13_1*tmp_122*tmp_70 - tmp_117*tmp_451) + tmp_143*(p_affine_13_1*tmp_140*tmp_70 - tmp_135*tmp_451) + tmp_161*(p_affine_13_1*tmp_158*tmp_70 - tmp_153*tmp_451) + tmp_179*(p_affine_13_1*tmp_176*tmp_70 - tmp_171*tmp_451) + tmp_197*(p_affine_13_1*tmp_194*tmp_70 - tmp_189*tmp_451) + tmp_215*(p_affine_13_1*tmp_212*tmp_70 - tmp_207*tmp_451) + tmp_233*(p_affine_13_1*tmp_230*tmp_70 - tmp_225*tmp_451) + tmp_251*(p_affine_13_1*tmp_248*tmp_70 - tmp_243*tmp_451) + tmp_269*(p_affine_13_1*tmp_266*tmp_70 - tmp_261*tmp_451) + tmp_287*(p_affine_13_1*tmp_284*tmp_70 - tmp_279*tmp_451) + tmp_305*(p_affine_13_1*tmp_302*tmp_70 - tmp_297*tmp_451) + tmp_323*(p_affine_13_1*tmp_320*tmp_70 - tmp_315*tmp_451) + tmp_341*(p_affine_13_1*tmp_338*tmp_70 - tmp_333*tmp_451) + tmp_359*(p_affine_13_1*tmp_356*tmp_70 - tmp_351*tmp_451) + tmp_377*(p_affine_13_1*tmp_374*tmp_70 - tmp_369*tmp_451) + tmp_395*(p_affine_13_1*tmp_392*tmp_70 - tmp_387*tmp_451) + tmp_413*(p_affine_13_1*tmp_410*tmp_70 - tmp_405*tmp_451) + tmp_431*(p_affine_13_1*tmp_428*tmp_70 - tmp_423*tmp_451) + tmp_449*(p_affine_13_1*tmp_446*tmp_70 - tmp_441*tmp_451) + tmp_88*(p_affine_13_1*tmp_70*tmp_82 - tmp_45*tmp_65);
      real_t a_0_3 = tmp_107*(p_affine_13_1*tmp_105*tmp_70 - tmp_452*tmp_98) + tmp_125*(p_affine_13_1*tmp_123*tmp_70 - tmp_117*tmp_452) + tmp_143*(p_affine_13_1*tmp_141*tmp_70 - tmp_135*tmp_452) + tmp_161*(p_affine_13_1*tmp_159*tmp_70 - tmp_153*tmp_452) + tmp_179*(p_affine_13_1*tmp_177*tmp_70 - tmp_171*tmp_452) + tmp_197*(p_affine_13_1*tmp_195*tmp_70 - tmp_189*tmp_452) + tmp_215*(p_affine_13_1*tmp_213*tmp_70 - tmp_207*tmp_452) + tmp_233*(p_affine_13_1*tmp_231*tmp_70 - tmp_225*tmp_452) + tmp_251*(p_affine_13_1*tmp_249*tmp_70 - tmp_243*tmp_452) + tmp_269*(p_affine_13_1*tmp_267*tmp_70 - tmp_261*tmp_452) + tmp_287*(p_affine_13_1*tmp_285*tmp_70 - tmp_279*tmp_452) + tmp_305*(p_affine_13_1*tmp_303*tmp_70 - tmp_297*tmp_452) + tmp_323*(p_affine_13_1*tmp_321*tmp_70 - tmp_315*tmp_452) + tmp_341*(p_affine_13_1*tmp_339*tmp_70 - tmp_333*tmp_452) + tmp_359*(p_affine_13_1*tmp_357*tmp_70 - tmp_351*tmp_452) + tmp_377*(p_affine_13_1*tmp_375*tmp_70 - tmp_369*tmp_452) + tmp_395*(p_affine_13_1*tmp_393*tmp_70 - tmp_387*tmp_452) + tmp_413*(p_affine_13_1*tmp_411*tmp_70 - tmp_405*tmp_452) + tmp_431*(p_affine_13_1*tmp_429*tmp_70 - tmp_423*tmp_452) + tmp_449*(p_affine_13_1*tmp_447*tmp_70 - tmp_441*tmp_452) + tmp_88*(p_affine_13_1*tmp_70*tmp_85 - tmp_45*tmp_63);
      real_t a_1_0 = tmp_107*(0.5*p_affine_13_1*tmp_106*tmp_15*tmp_29 - tmp_95*tmp_99) + tmp_125*(0.5*p_affine_13_1*tmp_124*tmp_15*tmp_29 - tmp_114*tmp_99) + tmp_143*(0.5*p_affine_13_1*tmp_142*tmp_15*tmp_29 - tmp_132*tmp_99) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_160*tmp_29 - tmp_150*tmp_99) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_178*tmp_29 - tmp_168*tmp_99) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_196*tmp_29 - tmp_186*tmp_99) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_214*tmp_29 - tmp_204*tmp_99) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_232*tmp_29 - tmp_222*tmp_99) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_250*tmp_29 - tmp_240*tmp_99) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_268*tmp_29 - tmp_258*tmp_99) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_286*tmp_29 - tmp_276*tmp_99) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_304 - tmp_294*tmp_99) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_322 - tmp_312*tmp_99) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_340 - tmp_330*tmp_99) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_358 - tmp_348*tmp_99) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_376 - tmp_366*tmp_99) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_394 - tmp_384*tmp_99) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_412 - tmp_402*tmp_99) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_430 - tmp_420*tmp_99) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_448 - tmp_438*tmp_99) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_86 - tmp_36*tmp_99);
      real_t a_1_1 = tmp_107*(0.5*p_affine_13_1*tmp_103*tmp_15*tmp_29 - tmp_450*tmp_95) + tmp_125*(0.5*p_affine_13_1*tmp_121*tmp_15*tmp_29 - tmp_114*tmp_450) + tmp_143*(0.5*p_affine_13_1*tmp_139*tmp_15*tmp_29 - tmp_132*tmp_450) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_157*tmp_29 - tmp_150*tmp_450) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_175*tmp_29 - tmp_168*tmp_450) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_193*tmp_29 - tmp_186*tmp_450) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_211*tmp_29 - tmp_204*tmp_450) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_229*tmp_29 - tmp_222*tmp_450) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_247*tmp_29 - tmp_240*tmp_450) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_265*tmp_29 - tmp_258*tmp_450) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_283*tmp_29 - tmp_276*tmp_450) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_301 - tmp_294*tmp_450) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_319 - tmp_312*tmp_450) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_337 - tmp_330*tmp_450) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_355 - tmp_348*tmp_450) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_373 - tmp_366*tmp_450) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_391 - tmp_384*tmp_450) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_409 - tmp_402*tmp_450) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_427 - tmp_420*tmp_450) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_445 - tmp_438*tmp_450) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_79 - tmp_36*tmp_450);
      real_t a_1_2 = tmp_107*(0.5*p_affine_13_1*tmp_104*tmp_15*tmp_29 - tmp_451*tmp_95) + tmp_125*(0.5*p_affine_13_1*tmp_122*tmp_15*tmp_29 - tmp_114*tmp_451) + tmp_143*(0.5*p_affine_13_1*tmp_140*tmp_15*tmp_29 - tmp_132*tmp_451) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_158*tmp_29 - tmp_150*tmp_451) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_176*tmp_29 - tmp_168*tmp_451) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_194*tmp_29 - tmp_186*tmp_451) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_212*tmp_29 - tmp_204*tmp_451) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_230*tmp_29 - tmp_222*tmp_451) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_248*tmp_29 - tmp_240*tmp_451) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_266*tmp_29 - tmp_258*tmp_451) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_284*tmp_29 - tmp_276*tmp_451) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_302 - tmp_294*tmp_451) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_320 - tmp_312*tmp_451) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_338 - tmp_330*tmp_451) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_356 - tmp_348*tmp_451) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_374 - tmp_366*tmp_451) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_392 - tmp_384*tmp_451) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_410 - tmp_402*tmp_451) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_428 - tmp_420*tmp_451) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_446 - tmp_438*tmp_451) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_82 - tmp_36*tmp_451);
      real_t a_1_3 = tmp_107*(0.5*p_affine_13_1*tmp_105*tmp_15*tmp_29 - tmp_452*tmp_95) + tmp_125*(0.5*p_affine_13_1*tmp_123*tmp_15*tmp_29 - tmp_114*tmp_452) + tmp_143*(0.5*p_affine_13_1*tmp_141*tmp_15*tmp_29 - tmp_132*tmp_452) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_159*tmp_29 - tmp_150*tmp_452) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_177*tmp_29 - tmp_168*tmp_452) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_195*tmp_29 - tmp_186*tmp_452) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_213*tmp_29 - tmp_204*tmp_452) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_231*tmp_29 - tmp_222*tmp_452) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_249*tmp_29 - tmp_240*tmp_452) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_267*tmp_29 - tmp_258*tmp_452) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_285*tmp_29 - tmp_276*tmp_452) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_303 - tmp_294*tmp_452) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_321 - tmp_312*tmp_452) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_339 - tmp_330*tmp_452) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_357 - tmp_348*tmp_452) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_375 - tmp_366*tmp_452) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_393 - tmp_384*tmp_452) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_411 - tmp_402*tmp_452) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_429 - tmp_420*tmp_452) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_447 - tmp_438*tmp_452) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_29*tmp_85 - tmp_36*tmp_452);
      real_t a_2_0 = tmp_107*(0.5*p_affine_13_1*tmp_106*tmp_15*tmp_39 - tmp_96*tmp_99) + tmp_125*(0.5*p_affine_13_1*tmp_124*tmp_15*tmp_39 - tmp_115*tmp_99) + tmp_143*(0.5*p_affine_13_1*tmp_142*tmp_15*tmp_39 - tmp_133*tmp_99) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_160*tmp_39 - tmp_151*tmp_99) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_178*tmp_39 - tmp_169*tmp_99) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_196*tmp_39 - tmp_187*tmp_99) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_214*tmp_39 - tmp_205*tmp_99) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_232*tmp_39 - tmp_223*tmp_99) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_250*tmp_39 - tmp_241*tmp_99) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_268*tmp_39 - tmp_259*tmp_99) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_286*tmp_39 - tmp_277*tmp_99) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_304*tmp_39 - tmp_295*tmp_99) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_322*tmp_39 - tmp_313*tmp_99) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_340*tmp_39 - tmp_331*tmp_99) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_358*tmp_39 - tmp_349*tmp_99) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_376*tmp_39 - tmp_367*tmp_99) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_394 - tmp_385*tmp_99) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_412 - tmp_403*tmp_99) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_430 - tmp_421*tmp_99) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_448 - tmp_439*tmp_99) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_86 - tmp_40*tmp_99);
      real_t a_2_1 = tmp_107*(0.5*p_affine_13_1*tmp_103*tmp_15*tmp_39 - tmp_450*tmp_96) + tmp_125*(0.5*p_affine_13_1*tmp_121*tmp_15*tmp_39 - tmp_115*tmp_450) + tmp_143*(0.5*p_affine_13_1*tmp_139*tmp_15*tmp_39 - tmp_133*tmp_450) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_157*tmp_39 - tmp_151*tmp_450) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_175*tmp_39 - tmp_169*tmp_450) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_193*tmp_39 - tmp_187*tmp_450) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_211*tmp_39 - tmp_205*tmp_450) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_229*tmp_39 - tmp_223*tmp_450) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_247*tmp_39 - tmp_241*tmp_450) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_265*tmp_39 - tmp_259*tmp_450) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_283*tmp_39 - tmp_277*tmp_450) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_301*tmp_39 - tmp_295*tmp_450) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_319*tmp_39 - tmp_313*tmp_450) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_337*tmp_39 - tmp_331*tmp_450) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_355*tmp_39 - tmp_349*tmp_450) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_373*tmp_39 - tmp_367*tmp_450) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_391 - tmp_385*tmp_450) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_409 - tmp_403*tmp_450) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_427 - tmp_421*tmp_450) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_445 - tmp_439*tmp_450) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_79 - tmp_40*tmp_450);
      real_t a_2_2 = tmp_107*(0.5*p_affine_13_1*tmp_104*tmp_15*tmp_39 - tmp_451*tmp_96) + tmp_125*(0.5*p_affine_13_1*tmp_122*tmp_15*tmp_39 - tmp_115*tmp_451) + tmp_143*(0.5*p_affine_13_1*tmp_140*tmp_15*tmp_39 - tmp_133*tmp_451) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_158*tmp_39 - tmp_151*tmp_451) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_176*tmp_39 - tmp_169*tmp_451) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_194*tmp_39 - tmp_187*tmp_451) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_212*tmp_39 - tmp_205*tmp_451) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_230*tmp_39 - tmp_223*tmp_451) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_248*tmp_39 - tmp_241*tmp_451) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_266*tmp_39 - tmp_259*tmp_451) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_284*tmp_39 - tmp_277*tmp_451) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_302*tmp_39 - tmp_295*tmp_451) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_320*tmp_39 - tmp_313*tmp_451) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_338*tmp_39 - tmp_331*tmp_451) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_356*tmp_39 - tmp_349*tmp_451) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_374*tmp_39 - tmp_367*tmp_451) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_392 - tmp_385*tmp_451) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_410 - tmp_403*tmp_451) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_428 - tmp_421*tmp_451) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_446 - tmp_439*tmp_451) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_82 - tmp_40*tmp_451);
      real_t a_2_3 = tmp_107*(0.5*p_affine_13_1*tmp_105*tmp_15*tmp_39 - tmp_452*tmp_96) + tmp_125*(0.5*p_affine_13_1*tmp_123*tmp_15*tmp_39 - tmp_115*tmp_452) + tmp_143*(0.5*p_affine_13_1*tmp_141*tmp_15*tmp_39 - tmp_133*tmp_452) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_159*tmp_39 - tmp_151*tmp_452) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_177*tmp_39 - tmp_169*tmp_452) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_195*tmp_39 - tmp_187*tmp_452) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_213*tmp_39 - tmp_205*tmp_452) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_231*tmp_39 - tmp_223*tmp_452) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_249*tmp_39 - tmp_241*tmp_452) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_267*tmp_39 - tmp_259*tmp_452) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_285*tmp_39 - tmp_277*tmp_452) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_303*tmp_39 - tmp_295*tmp_452) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_321*tmp_39 - tmp_313*tmp_452) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_339*tmp_39 - tmp_331*tmp_452) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_357*tmp_39 - tmp_349*tmp_452) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_375*tmp_39 - tmp_367*tmp_452) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_393 - tmp_385*tmp_452) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_411 - tmp_403*tmp_452) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_429 - tmp_421*tmp_452) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_447 - tmp_439*tmp_452) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_39*tmp_85 - tmp_40*tmp_452);
      real_t a_3_0 = tmp_107*(0.5*p_affine_13_1*tmp_106*tmp_15*tmp_43 - tmp_97*tmp_99) + tmp_125*(0.5*p_affine_13_1*tmp_124*tmp_15*tmp_43 - tmp_116*tmp_99) + tmp_143*(0.5*p_affine_13_1*tmp_142*tmp_15*tmp_43 - tmp_134*tmp_99) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_160*tmp_43 - tmp_152*tmp_99) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_178*tmp_43 - tmp_170*tmp_99) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_196*tmp_43 - tmp_188*tmp_99) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_214*tmp_43 - tmp_206*tmp_99) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_232*tmp_43 - tmp_224*tmp_99) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_250*tmp_43 - tmp_242*tmp_99) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_268*tmp_43 - tmp_260*tmp_99) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_286*tmp_43 - tmp_278*tmp_99) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_304*tmp_43 - tmp_296*tmp_99) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_322*tmp_43 - tmp_314*tmp_99) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_340*tmp_43 - tmp_332*tmp_99) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_358*tmp_43 - tmp_350*tmp_99) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_376*tmp_43 - tmp_368*tmp_99) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_394*tmp_43 - tmp_386*tmp_99) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_412*tmp_43 - tmp_404*tmp_99) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_430 - tmp_422*tmp_99) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_448 - tmp_440*tmp_99) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_86 - tmp_44*tmp_99);
      real_t a_3_1 = tmp_107*(0.5*p_affine_13_1*tmp_103*tmp_15*tmp_43 - tmp_450*tmp_97) + tmp_125*(0.5*p_affine_13_1*tmp_121*tmp_15*tmp_43 - tmp_116*tmp_450) + tmp_143*(0.5*p_affine_13_1*tmp_139*tmp_15*tmp_43 - tmp_134*tmp_450) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_157*tmp_43 - tmp_152*tmp_450) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_175*tmp_43 - tmp_170*tmp_450) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_193*tmp_43 - tmp_188*tmp_450) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_211*tmp_43 - tmp_206*tmp_450) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_229*tmp_43 - tmp_224*tmp_450) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_247*tmp_43 - tmp_242*tmp_450) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_265*tmp_43 - tmp_260*tmp_450) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_283*tmp_43 - tmp_278*tmp_450) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_301*tmp_43 - tmp_296*tmp_450) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_319*tmp_43 - tmp_314*tmp_450) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_337*tmp_43 - tmp_332*tmp_450) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_355*tmp_43 - tmp_350*tmp_450) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_373*tmp_43 - tmp_368*tmp_450) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_391*tmp_43 - tmp_386*tmp_450) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_409*tmp_43 - tmp_404*tmp_450) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_427*tmp_43 - tmp_422*tmp_450) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_445 - tmp_440*tmp_450) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_79 - tmp_44*tmp_450);
      real_t a_3_2 = tmp_107*(0.5*p_affine_13_1*tmp_104*tmp_15*tmp_43 - tmp_451*tmp_97) + tmp_125*(0.5*p_affine_13_1*tmp_122*tmp_15*tmp_43 - tmp_116*tmp_451) + tmp_143*(0.5*p_affine_13_1*tmp_140*tmp_15*tmp_43 - tmp_134*tmp_451) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_158*tmp_43 - tmp_152*tmp_451) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_176*tmp_43 - tmp_170*tmp_451) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_194*tmp_43 - tmp_188*tmp_451) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_212*tmp_43 - tmp_206*tmp_451) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_230*tmp_43 - tmp_224*tmp_451) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_248*tmp_43 - tmp_242*tmp_451) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_266*tmp_43 - tmp_260*tmp_451) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_284*tmp_43 - tmp_278*tmp_451) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_302*tmp_43 - tmp_296*tmp_451) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_320*tmp_43 - tmp_314*tmp_451) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_338*tmp_43 - tmp_332*tmp_451) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_356*tmp_43 - tmp_350*tmp_451) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_374*tmp_43 - tmp_368*tmp_451) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_392*tmp_43 - tmp_386*tmp_451) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_410*tmp_43 - tmp_404*tmp_451) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_428*tmp_43 - tmp_422*tmp_451) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_446 - tmp_440*tmp_451) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_82 - tmp_44*tmp_451);
      real_t a_3_3 = tmp_107*(0.5*p_affine_13_1*tmp_105*tmp_15*tmp_43 - tmp_452*tmp_97) + tmp_125*(0.5*p_affine_13_1*tmp_123*tmp_15*tmp_43 - tmp_116*tmp_452) + tmp_143*(0.5*p_affine_13_1*tmp_141*tmp_15*tmp_43 - tmp_134*tmp_452) + tmp_161*(0.5*p_affine_13_1*tmp_15*tmp_159*tmp_43 - tmp_152*tmp_452) + tmp_179*(0.5*p_affine_13_1*tmp_15*tmp_177*tmp_43 - tmp_170*tmp_452) + tmp_197*(0.5*p_affine_13_1*tmp_15*tmp_195*tmp_43 - tmp_188*tmp_452) + tmp_215*(0.5*p_affine_13_1*tmp_15*tmp_213*tmp_43 - tmp_206*tmp_452) + tmp_233*(0.5*p_affine_13_1*tmp_15*tmp_231*tmp_43 - tmp_224*tmp_452) + tmp_251*(0.5*p_affine_13_1*tmp_15*tmp_249*tmp_43 - tmp_242*tmp_452) + tmp_269*(0.5*p_affine_13_1*tmp_15*tmp_267*tmp_43 - tmp_260*tmp_452) + tmp_287*(0.5*p_affine_13_1*tmp_15*tmp_285*tmp_43 - tmp_278*tmp_452) + tmp_305*(0.5*p_affine_13_1*tmp_15*tmp_303*tmp_43 - tmp_296*tmp_452) + tmp_323*(0.5*p_affine_13_1*tmp_15*tmp_321*tmp_43 - tmp_314*tmp_452) + tmp_341*(0.5*p_affine_13_1*tmp_15*tmp_339*tmp_43 - tmp_332*tmp_452) + tmp_359*(0.5*p_affine_13_1*tmp_15*tmp_357*tmp_43 - tmp_350*tmp_452) + tmp_377*(0.5*p_affine_13_1*tmp_15*tmp_375*tmp_43 - tmp_368*tmp_452) + tmp_395*(0.5*p_affine_13_1*tmp_15*tmp_393*tmp_43 - tmp_386*tmp_452) + tmp_413*(0.5*p_affine_13_1*tmp_15*tmp_411*tmp_43 - tmp_404*tmp_452) + tmp_431*(0.5*p_affine_13_1*tmp_15*tmp_429*tmp_43 - tmp_422*tmp_452) + tmp_449*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_447 - tmp_440*tmp_452) + tmp_88*(0.5*p_affine_13_1*tmp_15*tmp_43*tmp_85 - tmp_44*tmp_452);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_0*tmp_6;
      real_t tmp_13 = tmp_2*tmp_8;
      real_t tmp_14 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_1*tmp_11 + tmp_10*tmp_2*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_3 + tmp_3*tmp_7);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_19 = tmp_14*(0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17 + tmp_18);
      real_t tmp_20 = tmp_10*tmp_2 - tmp_12;
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = tmp_14*(0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24);
      real_t tmp_26 = -tmp_1*tmp_10 + tmp_3*tmp_6;
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = tmp_14*(0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30);
      real_t tmp_32 = tmp_19*tmp_4 + tmp_20*tmp_25 + tmp_26*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_34 = -tmp_13 + tmp_7;
      real_t tmp_35 = tmp_1*tmp_8 - tmp_6*tmp_9;
      real_t tmp_36 = tmp_19*tmp_33 + tmp_25*tmp_34 + tmp_31*tmp_35;
      real_t tmp_37 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_11;
      real_t tmp_39 = tmp_10*tmp_9 - tmp_3*tmp_8;
      real_t tmp_40 = tmp_19*tmp_37 + tmp_25*tmp_38 + tmp_31*tmp_39;
      real_t tmp_41 = -tmp_32 - tmp_36 - tmp_40 + 1;
      real_t tmp_42 = 0.5*tmp_14;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_34*tmp_42;
      real_t tmp_45 = tmp_20*tmp_42;
      real_t tmp_46 = p_affine_13_0*(-tmp_43 - tmp_44 - tmp_45);
      real_t tmp_47 = tmp_39*tmp_42;
      real_t tmp_48 = tmp_35*tmp_42;
      real_t tmp_49 = tmp_26*tmp_42;
      real_t tmp_50 = p_affine_13_1*(-tmp_47 - tmp_48 - tmp_49);
      real_t tmp_51 = 2.0*std::pow((std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)*std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)) + (std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)*std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)), 1.0/2.0);
      real_t tmp_52 = 0.0068572537431980923*tmp_51;
      real_t tmp_53 = tmp_14*(0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17 + tmp_18);
      real_t tmp_54 = tmp_14*(0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24);
      real_t tmp_55 = tmp_14*(0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30);
      real_t tmp_56 = tmp_20*tmp_54 + tmp_26*tmp_55 + tmp_4*tmp_53;
      real_t tmp_57 = tmp_33*tmp_53 + tmp_34*tmp_54 + tmp_35*tmp_55;
      real_t tmp_58 = tmp_37*tmp_53 + tmp_38*tmp_54 + tmp_39*tmp_55;
      real_t tmp_59 = -tmp_56 - tmp_57 - tmp_58 + 1;
      real_t tmp_60 = 0.037198804536718075*tmp_51;
      real_t tmp_61 = tmp_14*(0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_62 = tmp_14*(0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_63 = tmp_14*(0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_64 = tmp_20*tmp_62 + tmp_26*tmp_63 + tmp_4*tmp_61;
      real_t tmp_65 = tmp_33*tmp_61 + tmp_34*tmp_62 + tmp_35*tmp_63;
      real_t tmp_66 = tmp_37*tmp_61 + tmp_38*tmp_62 + tmp_39*tmp_63;
      real_t tmp_67 = -tmp_64 - tmp_65 - tmp_66 + 1;
      real_t tmp_68 = 0.020848748529055869*tmp_51;
      real_t tmp_69 = tmp_14*(0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_70 = tmp_14*(0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_71 = tmp_14*(0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_72 = tmp_20*tmp_70 + tmp_26*tmp_71 + tmp_4*tmp_69;
      real_t tmp_73 = tmp_33*tmp_69 + tmp_34*tmp_70 + tmp_35*tmp_71;
      real_t tmp_74 = tmp_37*tmp_69 + tmp_38*tmp_70 + tmp_39*tmp_71;
      real_t tmp_75 = -tmp_72 - tmp_73 - tmp_74 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_51;
      real_t tmp_77 = tmp_14*(0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_78 = tmp_14*(0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_79 = tmp_14*(0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_80 = tmp_20*tmp_78 + tmp_26*tmp_79 + tmp_4*tmp_77;
      real_t tmp_81 = tmp_33*tmp_77 + tmp_34*tmp_78 + tmp_35*tmp_79;
      real_t tmp_82 = tmp_37*tmp_77 + tmp_38*tmp_78 + tmp_39*tmp_79;
      real_t tmp_83 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_84 = 0.020848748529055869*tmp_51;
      real_t tmp_85 = tmp_14*(0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_86 = tmp_14*(0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_87 = tmp_14*(0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_88 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_4*tmp_85;
      real_t tmp_89 = tmp_33*tmp_85 + tmp_34*tmp_86 + tmp_35*tmp_87;
      real_t tmp_90 = tmp_37*tmp_85 + tmp_38*tmp_86 + tmp_39*tmp_87;
      real_t tmp_91 = -tmp_88 - tmp_89 - tmp_90 + 1;
      real_t tmp_92 = 0.019202922745021479*tmp_51;
      real_t tmp_93 = tmp_14*(0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_94 = tmp_14*(0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_95 = tmp_14*(0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_96 = tmp_20*tmp_94 + tmp_26*tmp_95 + tmp_4*tmp_93;
      real_t tmp_97 = tmp_33*tmp_93 + tmp_34*tmp_94 + tmp_35*tmp_95;
      real_t tmp_98 = tmp_37*tmp_93 + tmp_38*tmp_94 + tmp_39*tmp_95;
      real_t tmp_99 = -tmp_96 - tmp_97 - tmp_98 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_51;
      real_t tmp_101 = tmp_14*(0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_102 = tmp_14*(0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_103 = tmp_14*(0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_104 = tmp_101*tmp_4 + tmp_102*tmp_20 + tmp_103*tmp_26;
      real_t tmp_105 = tmp_101*tmp_33 + tmp_102*tmp_34 + tmp_103*tmp_35;
      real_t tmp_106 = tmp_101*tmp_37 + tmp_102*tmp_38 + tmp_103*tmp_39;
      real_t tmp_107 = -tmp_104 - tmp_105 - tmp_106 + 1;
      real_t tmp_108 = 0.019202922745021479*tmp_51;
      real_t tmp_109 = tmp_14*(0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_110 = tmp_14*(0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_111 = tmp_14*(0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_112 = tmp_109*tmp_4 + tmp_110*tmp_20 + tmp_111*tmp_26;
      real_t tmp_113 = tmp_109*tmp_33 + tmp_110*tmp_34 + tmp_111*tmp_35;
      real_t tmp_114 = tmp_109*tmp_37 + tmp_110*tmp_38 + tmp_111*tmp_39;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 0.020848748529055869*tmp_51;
      real_t tmp_117 = tmp_14*(0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_118 = tmp_14*(0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_119 = tmp_14*(0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_120 = tmp_117*tmp_4 + tmp_118*tmp_20 + tmp_119*tmp_26;
      real_t tmp_121 = tmp_117*tmp_33 + tmp_118*tmp_34 + tmp_119*tmp_35;
      real_t tmp_122 = tmp_117*tmp_37 + tmp_118*tmp_38 + tmp_119*tmp_39;
      real_t tmp_123 = -tmp_120 - tmp_121 - tmp_122 + 1;
      real_t tmp_124 = 0.019202922745021479*tmp_51;
      real_t tmp_125 = tmp_14*(0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_126 = tmp_14*(0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_127 = tmp_14*(0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_128 = tmp_125*tmp_4 + tmp_126*tmp_20 + tmp_127*tmp_26;
      real_t tmp_129 = tmp_125*tmp_33 + tmp_126*tmp_34 + tmp_127*tmp_35;
      real_t tmp_130 = tmp_125*tmp_37 + tmp_126*tmp_38 + tmp_127*tmp_39;
      real_t tmp_131 = -tmp_128 - tmp_129 - tmp_130 + 1;
      real_t tmp_132 = 0.020848748529055869*tmp_51;
      real_t tmp_133 = tmp_14*(0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_134 = tmp_14*(0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_135 = tmp_14*(0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_136 = tmp_133*tmp_4 + tmp_134*tmp_20 + tmp_135*tmp_26;
      real_t tmp_137 = tmp_133*tmp_33 + tmp_134*tmp_34 + tmp_135*tmp_35;
      real_t tmp_138 = tmp_133*tmp_37 + tmp_134*tmp_38 + tmp_135*tmp_39;
      real_t tmp_139 = -tmp_136 - tmp_137 - tmp_138 + 1;
      real_t tmp_140 = 0.019202922745021479*tmp_51;
      real_t tmp_141 = tmp_14*(0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17 + tmp_18);
      real_t tmp_142 = tmp_14*(0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24);
      real_t tmp_143 = tmp_14*(0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30);
      real_t tmp_144 = tmp_141*tmp_4 + tmp_142*tmp_20 + tmp_143*tmp_26;
      real_t tmp_145 = tmp_141*tmp_33 + tmp_142*tmp_34 + tmp_143*tmp_35;
      real_t tmp_146 = tmp_141*tmp_37 + tmp_142*tmp_38 + tmp_143*tmp_39;
      real_t tmp_147 = -tmp_144 - tmp_145 - tmp_146 + 1;
      real_t tmp_148 = 0.042507265838595799*tmp_51;
      real_t tmp_149 = tmp_14*(0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_150 = tmp_14*(0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_151 = tmp_14*(0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_152 = tmp_149*tmp_4 + tmp_150*tmp_20 + tmp_151*tmp_26;
      real_t tmp_153 = tmp_149*tmp_33 + tmp_150*tmp_34 + tmp_151*tmp_35;
      real_t tmp_154 = tmp_149*tmp_37 + tmp_150*tmp_38 + tmp_151*tmp_39;
      real_t tmp_155 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_51;
      real_t tmp_157 = tmp_14*(0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_158 = tmp_14*(0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_159 = tmp_14*(0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_160 = tmp_157*tmp_4 + tmp_158*tmp_20 + tmp_159*tmp_26;
      real_t tmp_161 = tmp_157*tmp_33 + tmp_158*tmp_34 + tmp_159*tmp_35;
      real_t tmp_162 = tmp_157*tmp_37 + tmp_158*tmp_38 + tmp_159*tmp_39;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = 0.0068572537431980923*tmp_51;
      real_t tmp_165 = tmp_14*(0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_166 = tmp_14*(0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_167 = tmp_14*(0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_168 = tmp_165*tmp_4 + tmp_166*tmp_20 + tmp_167*tmp_26;
      real_t tmp_169 = tmp_165*tmp_33 + tmp_166*tmp_34 + tmp_167*tmp_35;
      real_t tmp_170 = tmp_165*tmp_37 + tmp_166*tmp_38 + tmp_167*tmp_39;
      real_t tmp_171 = -tmp_168 - tmp_169 - tmp_170 + 1;
      real_t tmp_172 = 0.037198804536718075*tmp_51;
      real_t tmp_173 = tmp_14*(0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_174 = tmp_14*(0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_175 = tmp_14*(0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_176 = tmp_173*tmp_4 + tmp_174*tmp_20 + tmp_175*tmp_26;
      real_t tmp_177 = tmp_173*tmp_33 + tmp_174*tmp_34 + tmp_175*tmp_35;
      real_t tmp_178 = tmp_173*tmp_37 + tmp_174*tmp_38 + tmp_175*tmp_39;
      real_t tmp_179 = -tmp_176 - tmp_177 - tmp_178 + 1;
      real_t tmp_180 = 0.042507265838595799*tmp_51;
      real_t tmp_181 = tmp_14*(0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_182 = tmp_14*(0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_183 = tmp_14*(0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_184 = tmp_181*tmp_4 + tmp_182*tmp_20 + tmp_183*tmp_26;
      real_t tmp_185 = tmp_181*tmp_33 + tmp_182*tmp_34 + tmp_183*tmp_35;
      real_t tmp_186 = tmp_181*tmp_37 + tmp_182*tmp_38 + tmp_183*tmp_39;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 0.0068572537431980923*tmp_51;
      real_t tmp_189 = tmp_14*(0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_190 = tmp_14*(0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_191 = tmp_14*(0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_192 = tmp_189*tmp_4 + tmp_190*tmp_20 + tmp_191*tmp_26;
      real_t tmp_193 = tmp_189*tmp_33 + tmp_190*tmp_34 + tmp_191*tmp_35;
      real_t tmp_194 = tmp_189*tmp_37 + tmp_190*tmp_38 + tmp_191*tmp_39;
      real_t tmp_195 = -tmp_192 - tmp_193 - tmp_194 + 1;
      real_t tmp_196 = 0.037198804536718075*tmp_51;
      real_t tmp_197 = tmp_14*(0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_198 = tmp_14*(0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_199 = tmp_14*(0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_200 = tmp_197*tmp_4 + tmp_198*tmp_20 + tmp_199*tmp_26;
      real_t tmp_201 = tmp_197*tmp_33 + tmp_198*tmp_34 + tmp_199*tmp_35;
      real_t tmp_202 = tmp_197*tmp_37 + tmp_198*tmp_38 + tmp_199*tmp_39;
      real_t tmp_203 = -tmp_200 - tmp_201 - tmp_202 + 1;
      real_t tmp_204 = 0.042507265838595799*tmp_51;
      real_t tmp_205 = tmp_14*(0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_206 = tmp_14*(0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_207 = tmp_14*(0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_208 = tmp_20*tmp_206 + tmp_205*tmp_4 + tmp_207*tmp_26;
      real_t tmp_209 = tmp_205*tmp_33 + tmp_206*tmp_34 + tmp_207*tmp_35;
      real_t tmp_210 = tmp_205*tmp_37 + tmp_206*tmp_38 + tmp_207*tmp_39;
      real_t tmp_211 = -tmp_208 - tmp_209 - tmp_210 + 1;
      real_t tmp_212 = 0.019202922745021479*tmp_51;
      real_t tmp_213 = p_affine_13_0*tmp_45;
      real_t tmp_214 = p_affine_13_0*tmp_44;
      real_t tmp_215 = p_affine_13_0*tmp_43;
      real_t tmp_216 = p_affine_13_1*tmp_49;
      real_t tmp_217 = p_affine_13_1*tmp_48;
      real_t tmp_218 = p_affine_13_1*tmp_47;
      real_t a_0_0 = tmp_100*(-tmp_46*tmp_99 - tmp_50*tmp_99) + tmp_108*(-tmp_107*tmp_46 - tmp_107*tmp_50) + tmp_116*(-tmp_115*tmp_46 - tmp_115*tmp_50) + tmp_124*(-tmp_123*tmp_46 - tmp_123*tmp_50) + tmp_132*(-tmp_131*tmp_46 - tmp_131*tmp_50) + tmp_140*(-tmp_139*tmp_46 - tmp_139*tmp_50) + tmp_148*(-tmp_147*tmp_46 - tmp_147*tmp_50) + tmp_156*(-tmp_155*tmp_46 - tmp_155*tmp_50) + tmp_164*(-tmp_163*tmp_46 - tmp_163*tmp_50) + tmp_172*(-tmp_171*tmp_46 - tmp_171*tmp_50) + tmp_180*(-tmp_179*tmp_46 - tmp_179*tmp_50) + tmp_188*(-tmp_187*tmp_46 - tmp_187*tmp_50) + tmp_196*(-tmp_195*tmp_46 - tmp_195*tmp_50) + tmp_204*(-tmp_203*tmp_46 - tmp_203*tmp_50) + tmp_212*(-tmp_211*tmp_46 - tmp_211*tmp_50) + tmp_52*(-tmp_41*tmp_46 - tmp_41*tmp_50) + tmp_60*(-tmp_46*tmp_59 - tmp_50*tmp_59) + tmp_68*(-tmp_46*tmp_67 - tmp_50*tmp_67) + tmp_76*(-tmp_46*tmp_75 - tmp_50*tmp_75) + tmp_84*(-tmp_46*tmp_83 - tmp_50*tmp_83) + tmp_92*(-tmp_46*tmp_91 - tmp_50*tmp_91);
      real_t a_0_1 = tmp_100*(-tmp_213*tmp_99 - tmp_50*tmp_96) + tmp_108*(-tmp_104*tmp_50 - tmp_107*tmp_213) + tmp_116*(-tmp_112*tmp_50 - tmp_115*tmp_213) + tmp_124*(-tmp_120*tmp_50 - tmp_123*tmp_213) + tmp_132*(-tmp_128*tmp_50 - tmp_131*tmp_213) + tmp_140*(-tmp_136*tmp_50 - tmp_139*tmp_213) + tmp_148*(-tmp_144*tmp_50 - tmp_147*tmp_213) + tmp_156*(-tmp_152*tmp_50 - tmp_155*tmp_213) + tmp_164*(-tmp_160*tmp_50 - tmp_163*tmp_213) + tmp_172*(-tmp_168*tmp_50 - tmp_171*tmp_213) + tmp_180*(-tmp_176*tmp_50 - tmp_179*tmp_213) + tmp_188*(-tmp_184*tmp_50 - tmp_187*tmp_213) + tmp_196*(-tmp_192*tmp_50 - tmp_195*tmp_213) + tmp_204*(-tmp_200*tmp_50 - tmp_203*tmp_213) + tmp_212*(-tmp_208*tmp_50 - tmp_211*tmp_213) + tmp_52*(-tmp_213*tmp_41 - tmp_32*tmp_50) + tmp_60*(-tmp_213*tmp_59 - tmp_50*tmp_56) + tmp_68*(-tmp_213*tmp_67 - tmp_50*tmp_64) + tmp_76*(-tmp_213*tmp_75 - tmp_50*tmp_72) + tmp_84*(-tmp_213*tmp_83 - tmp_50*tmp_80) + tmp_92*(-tmp_213*tmp_91 - tmp_50*tmp_88);
      real_t a_0_2 = tmp_100*(-tmp_214*tmp_99 - tmp_50*tmp_97) + tmp_108*(-tmp_105*tmp_50 - tmp_107*tmp_214) + tmp_116*(-tmp_113*tmp_50 - tmp_115*tmp_214) + tmp_124*(-tmp_121*tmp_50 - tmp_123*tmp_214) + tmp_132*(-tmp_129*tmp_50 - tmp_131*tmp_214) + tmp_140*(-tmp_137*tmp_50 - tmp_139*tmp_214) + tmp_148*(-tmp_145*tmp_50 - tmp_147*tmp_214) + tmp_156*(-tmp_153*tmp_50 - tmp_155*tmp_214) + tmp_164*(-tmp_161*tmp_50 - tmp_163*tmp_214) + tmp_172*(-tmp_169*tmp_50 - tmp_171*tmp_214) + tmp_180*(-tmp_177*tmp_50 - tmp_179*tmp_214) + tmp_188*(-tmp_185*tmp_50 - tmp_187*tmp_214) + tmp_196*(-tmp_193*tmp_50 - tmp_195*tmp_214) + tmp_204*(-tmp_201*tmp_50 - tmp_203*tmp_214) + tmp_212*(-tmp_209*tmp_50 - tmp_211*tmp_214) + tmp_52*(-tmp_214*tmp_41 - tmp_36*tmp_50) + tmp_60*(-tmp_214*tmp_59 - tmp_50*tmp_57) + tmp_68*(-tmp_214*tmp_67 - tmp_50*tmp_65) + tmp_76*(-tmp_214*tmp_75 - tmp_50*tmp_73) + tmp_84*(-tmp_214*tmp_83 - tmp_50*tmp_81) + tmp_92*(-tmp_214*tmp_91 - tmp_50*tmp_89);
      real_t a_0_3 = tmp_100*(-tmp_215*tmp_99 - tmp_50*tmp_98) + tmp_108*(-tmp_106*tmp_50 - tmp_107*tmp_215) + tmp_116*(-tmp_114*tmp_50 - tmp_115*tmp_215) + tmp_124*(-tmp_122*tmp_50 - tmp_123*tmp_215) + tmp_132*(-tmp_130*tmp_50 - tmp_131*tmp_215) + tmp_140*(-tmp_138*tmp_50 - tmp_139*tmp_215) + tmp_148*(-tmp_146*tmp_50 - tmp_147*tmp_215) + tmp_156*(-tmp_154*tmp_50 - tmp_155*tmp_215) + tmp_164*(-tmp_162*tmp_50 - tmp_163*tmp_215) + tmp_172*(-tmp_170*tmp_50 - tmp_171*tmp_215) + tmp_180*(-tmp_178*tmp_50 - tmp_179*tmp_215) + tmp_188*(-tmp_186*tmp_50 - tmp_187*tmp_215) + tmp_196*(-tmp_194*tmp_50 - tmp_195*tmp_215) + tmp_204*(-tmp_202*tmp_50 - tmp_203*tmp_215) + tmp_212*(-tmp_210*tmp_50 - tmp_211*tmp_215) + tmp_52*(-tmp_215*tmp_41 - tmp_40*tmp_50) + tmp_60*(-tmp_215*tmp_59 - tmp_50*tmp_58) + tmp_68*(-tmp_215*tmp_67 - tmp_50*tmp_66) + tmp_76*(-tmp_215*tmp_75 - tmp_50*tmp_74) + tmp_84*(-tmp_215*tmp_83 - tmp_50*tmp_82) + tmp_92*(-tmp_215*tmp_91 - tmp_50*tmp_90);
      real_t a_1_0 = tmp_100*(-tmp_216*tmp_99 - tmp_46*tmp_96) + tmp_108*(-tmp_104*tmp_46 - tmp_107*tmp_216) + tmp_116*(-tmp_112*tmp_46 - tmp_115*tmp_216) + tmp_124*(-tmp_120*tmp_46 - tmp_123*tmp_216) + tmp_132*(-tmp_128*tmp_46 - tmp_131*tmp_216) + tmp_140*(-tmp_136*tmp_46 - tmp_139*tmp_216) + tmp_148*(-tmp_144*tmp_46 - tmp_147*tmp_216) + tmp_156*(-tmp_152*tmp_46 - tmp_155*tmp_216) + tmp_164*(-tmp_160*tmp_46 - tmp_163*tmp_216) + tmp_172*(-tmp_168*tmp_46 - tmp_171*tmp_216) + tmp_180*(-tmp_176*tmp_46 - tmp_179*tmp_216) + tmp_188*(-tmp_184*tmp_46 - tmp_187*tmp_216) + tmp_196*(-tmp_192*tmp_46 - tmp_195*tmp_216) + tmp_204*(-tmp_200*tmp_46 - tmp_203*tmp_216) + tmp_212*(-tmp_208*tmp_46 - tmp_211*tmp_216) + tmp_52*(-tmp_216*tmp_41 - tmp_32*tmp_46) + tmp_60*(-tmp_216*tmp_59 - tmp_46*tmp_56) + tmp_68*(-tmp_216*tmp_67 - tmp_46*tmp_64) + tmp_76*(-tmp_216*tmp_75 - tmp_46*tmp_72) + tmp_84*(-tmp_216*tmp_83 - tmp_46*tmp_80) + tmp_92*(-tmp_216*tmp_91 - tmp_46*tmp_88);
      real_t a_1_1 = tmp_100*(-tmp_213*tmp_96 - tmp_216*tmp_96) + tmp_108*(-tmp_104*tmp_213 - tmp_104*tmp_216) + tmp_116*(-tmp_112*tmp_213 - tmp_112*tmp_216) + tmp_124*(-tmp_120*tmp_213 - tmp_120*tmp_216) + tmp_132*(-tmp_128*tmp_213 - tmp_128*tmp_216) + tmp_140*(-tmp_136*tmp_213 - tmp_136*tmp_216) + tmp_148*(-tmp_144*tmp_213 - tmp_144*tmp_216) + tmp_156*(-tmp_152*tmp_213 - tmp_152*tmp_216) + tmp_164*(-tmp_160*tmp_213 - tmp_160*tmp_216) + tmp_172*(-tmp_168*tmp_213 - tmp_168*tmp_216) + tmp_180*(-tmp_176*tmp_213 - tmp_176*tmp_216) + tmp_188*(-tmp_184*tmp_213 - tmp_184*tmp_216) + tmp_196*(-tmp_192*tmp_213 - tmp_192*tmp_216) + tmp_204*(-tmp_200*tmp_213 - tmp_200*tmp_216) + tmp_212*(-tmp_208*tmp_213 - tmp_208*tmp_216) + tmp_52*(-tmp_213*tmp_32 - tmp_216*tmp_32) + tmp_60*(-tmp_213*tmp_56 - tmp_216*tmp_56) + tmp_68*(-tmp_213*tmp_64 - tmp_216*tmp_64) + tmp_76*(-tmp_213*tmp_72 - tmp_216*tmp_72) + tmp_84*(-tmp_213*tmp_80 - tmp_216*tmp_80) + tmp_92*(-tmp_213*tmp_88 - tmp_216*tmp_88);
      real_t a_1_2 = tmp_100*(-tmp_214*tmp_96 - tmp_216*tmp_97) + tmp_108*(-tmp_104*tmp_214 - tmp_105*tmp_216) + tmp_116*(-tmp_112*tmp_214 - tmp_113*tmp_216) + tmp_124*(-tmp_120*tmp_214 - tmp_121*tmp_216) + tmp_132*(-tmp_128*tmp_214 - tmp_129*tmp_216) + tmp_140*(-tmp_136*tmp_214 - tmp_137*tmp_216) + tmp_148*(-tmp_144*tmp_214 - tmp_145*tmp_216) + tmp_156*(-tmp_152*tmp_214 - tmp_153*tmp_216) + tmp_164*(-tmp_160*tmp_214 - tmp_161*tmp_216) + tmp_172*(-tmp_168*tmp_214 - tmp_169*tmp_216) + tmp_180*(-tmp_176*tmp_214 - tmp_177*tmp_216) + tmp_188*(-tmp_184*tmp_214 - tmp_185*tmp_216) + tmp_196*(-tmp_192*tmp_214 - tmp_193*tmp_216) + tmp_204*(-tmp_200*tmp_214 - tmp_201*tmp_216) + tmp_212*(-tmp_208*tmp_214 - tmp_209*tmp_216) + tmp_52*(-tmp_214*tmp_32 - tmp_216*tmp_36) + tmp_60*(-tmp_214*tmp_56 - tmp_216*tmp_57) + tmp_68*(-tmp_214*tmp_64 - tmp_216*tmp_65) + tmp_76*(-tmp_214*tmp_72 - tmp_216*tmp_73) + tmp_84*(-tmp_214*tmp_80 - tmp_216*tmp_81) + tmp_92*(-tmp_214*tmp_88 - tmp_216*tmp_89);
      real_t a_1_3 = tmp_100*(-tmp_215*tmp_96 - tmp_216*tmp_98) + tmp_108*(-tmp_104*tmp_215 - tmp_106*tmp_216) + tmp_116*(-tmp_112*tmp_215 - tmp_114*tmp_216) + tmp_124*(-tmp_120*tmp_215 - tmp_122*tmp_216) + tmp_132*(-tmp_128*tmp_215 - tmp_130*tmp_216) + tmp_140*(-tmp_136*tmp_215 - tmp_138*tmp_216) + tmp_148*(-tmp_144*tmp_215 - tmp_146*tmp_216) + tmp_156*(-tmp_152*tmp_215 - tmp_154*tmp_216) + tmp_164*(-tmp_160*tmp_215 - tmp_162*tmp_216) + tmp_172*(-tmp_168*tmp_215 - tmp_170*tmp_216) + tmp_180*(-tmp_176*tmp_215 - tmp_178*tmp_216) + tmp_188*(-tmp_184*tmp_215 - tmp_186*tmp_216) + tmp_196*(-tmp_192*tmp_215 - tmp_194*tmp_216) + tmp_204*(-tmp_200*tmp_215 - tmp_202*tmp_216) + tmp_212*(-tmp_208*tmp_215 - tmp_210*tmp_216) + tmp_52*(-tmp_215*tmp_32 - tmp_216*tmp_40) + tmp_60*(-tmp_215*tmp_56 - tmp_216*tmp_58) + tmp_68*(-tmp_215*tmp_64 - tmp_216*tmp_66) + tmp_76*(-tmp_215*tmp_72 - tmp_216*tmp_74) + tmp_84*(-tmp_215*tmp_80 - tmp_216*tmp_82) + tmp_92*(-tmp_215*tmp_88 - tmp_216*tmp_90);
      real_t a_2_0 = tmp_100*(-tmp_217*tmp_99 - tmp_46*tmp_97) + tmp_108*(-tmp_105*tmp_46 - tmp_107*tmp_217) + tmp_116*(-tmp_113*tmp_46 - tmp_115*tmp_217) + tmp_124*(-tmp_121*tmp_46 - tmp_123*tmp_217) + tmp_132*(-tmp_129*tmp_46 - tmp_131*tmp_217) + tmp_140*(-tmp_137*tmp_46 - tmp_139*tmp_217) + tmp_148*(-tmp_145*tmp_46 - tmp_147*tmp_217) + tmp_156*(-tmp_153*tmp_46 - tmp_155*tmp_217) + tmp_164*(-tmp_161*tmp_46 - tmp_163*tmp_217) + tmp_172*(-tmp_169*tmp_46 - tmp_171*tmp_217) + tmp_180*(-tmp_177*tmp_46 - tmp_179*tmp_217) + tmp_188*(-tmp_185*tmp_46 - tmp_187*tmp_217) + tmp_196*(-tmp_193*tmp_46 - tmp_195*tmp_217) + tmp_204*(-tmp_201*tmp_46 - tmp_203*tmp_217) + tmp_212*(-tmp_209*tmp_46 - tmp_211*tmp_217) + tmp_52*(-tmp_217*tmp_41 - tmp_36*tmp_46) + tmp_60*(-tmp_217*tmp_59 - tmp_46*tmp_57) + tmp_68*(-tmp_217*tmp_67 - tmp_46*tmp_65) + tmp_76*(-tmp_217*tmp_75 - tmp_46*tmp_73) + tmp_84*(-tmp_217*tmp_83 - tmp_46*tmp_81) + tmp_92*(-tmp_217*tmp_91 - tmp_46*tmp_89);
      real_t a_2_1 = tmp_100*(-tmp_213*tmp_97 - tmp_217*tmp_96) + tmp_108*(-tmp_104*tmp_217 - tmp_105*tmp_213) + tmp_116*(-tmp_112*tmp_217 - tmp_113*tmp_213) + tmp_124*(-tmp_120*tmp_217 - tmp_121*tmp_213) + tmp_132*(-tmp_128*tmp_217 - tmp_129*tmp_213) + tmp_140*(-tmp_136*tmp_217 - tmp_137*tmp_213) + tmp_148*(-tmp_144*tmp_217 - tmp_145*tmp_213) + tmp_156*(-tmp_152*tmp_217 - tmp_153*tmp_213) + tmp_164*(-tmp_160*tmp_217 - tmp_161*tmp_213) + tmp_172*(-tmp_168*tmp_217 - tmp_169*tmp_213) + tmp_180*(-tmp_176*tmp_217 - tmp_177*tmp_213) + tmp_188*(-tmp_184*tmp_217 - tmp_185*tmp_213) + tmp_196*(-tmp_192*tmp_217 - tmp_193*tmp_213) + tmp_204*(-tmp_200*tmp_217 - tmp_201*tmp_213) + tmp_212*(-tmp_208*tmp_217 - tmp_209*tmp_213) + tmp_52*(-tmp_213*tmp_36 - tmp_217*tmp_32) + tmp_60*(-tmp_213*tmp_57 - tmp_217*tmp_56) + tmp_68*(-tmp_213*tmp_65 - tmp_217*tmp_64) + tmp_76*(-tmp_213*tmp_73 - tmp_217*tmp_72) + tmp_84*(-tmp_213*tmp_81 - tmp_217*tmp_80) + tmp_92*(-tmp_213*tmp_89 - tmp_217*tmp_88);
      real_t a_2_2 = tmp_100*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_108*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_116*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_124*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_132*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_140*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_148*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_156*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_164*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_172*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_180*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_188*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_196*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_204*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_212*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_52*(-tmp_214*tmp_36 - tmp_217*tmp_36) + tmp_60*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_68*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_76*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_84*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_92*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_2_3 = tmp_100*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_108*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_116*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_124*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_132*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_140*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_148*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_156*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_164*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_172*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_180*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_188*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_196*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_204*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_212*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_52*(-tmp_215*tmp_36 - tmp_217*tmp_40) + tmp_60*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_68*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_76*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_84*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_92*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_3_0 = tmp_100*(-tmp_218*tmp_99 - tmp_46*tmp_98) + tmp_108*(-tmp_106*tmp_46 - tmp_107*tmp_218) + tmp_116*(-tmp_114*tmp_46 - tmp_115*tmp_218) + tmp_124*(-tmp_122*tmp_46 - tmp_123*tmp_218) + tmp_132*(-tmp_130*tmp_46 - tmp_131*tmp_218) + tmp_140*(-tmp_138*tmp_46 - tmp_139*tmp_218) + tmp_148*(-tmp_146*tmp_46 - tmp_147*tmp_218) + tmp_156*(-tmp_154*tmp_46 - tmp_155*tmp_218) + tmp_164*(-tmp_162*tmp_46 - tmp_163*tmp_218) + tmp_172*(-tmp_170*tmp_46 - tmp_171*tmp_218) + tmp_180*(-tmp_178*tmp_46 - tmp_179*tmp_218) + tmp_188*(-tmp_186*tmp_46 - tmp_187*tmp_218) + tmp_196*(-tmp_194*tmp_46 - tmp_195*tmp_218) + tmp_204*(-tmp_202*tmp_46 - tmp_203*tmp_218) + tmp_212*(-tmp_210*tmp_46 - tmp_211*tmp_218) + tmp_52*(-tmp_218*tmp_41 - tmp_40*tmp_46) + tmp_60*(-tmp_218*tmp_59 - tmp_46*tmp_58) + tmp_68*(-tmp_218*tmp_67 - tmp_46*tmp_66) + tmp_76*(-tmp_218*tmp_75 - tmp_46*tmp_74) + tmp_84*(-tmp_218*tmp_83 - tmp_46*tmp_82) + tmp_92*(-tmp_218*tmp_91 - tmp_46*tmp_90);
      real_t a_3_1 = tmp_100*(-tmp_213*tmp_98 - tmp_218*tmp_96) + tmp_108*(-tmp_104*tmp_218 - tmp_106*tmp_213) + tmp_116*(-tmp_112*tmp_218 - tmp_114*tmp_213) + tmp_124*(-tmp_120*tmp_218 - tmp_122*tmp_213) + tmp_132*(-tmp_128*tmp_218 - tmp_130*tmp_213) + tmp_140*(-tmp_136*tmp_218 - tmp_138*tmp_213) + tmp_148*(-tmp_144*tmp_218 - tmp_146*tmp_213) + tmp_156*(-tmp_152*tmp_218 - tmp_154*tmp_213) + tmp_164*(-tmp_160*tmp_218 - tmp_162*tmp_213) + tmp_172*(-tmp_168*tmp_218 - tmp_170*tmp_213) + tmp_180*(-tmp_176*tmp_218 - tmp_178*tmp_213) + tmp_188*(-tmp_184*tmp_218 - tmp_186*tmp_213) + tmp_196*(-tmp_192*tmp_218 - tmp_194*tmp_213) + tmp_204*(-tmp_200*tmp_218 - tmp_202*tmp_213) + tmp_212*(-tmp_208*tmp_218 - tmp_210*tmp_213) + tmp_52*(-tmp_213*tmp_40 - tmp_218*tmp_32) + tmp_60*(-tmp_213*tmp_58 - tmp_218*tmp_56) + tmp_68*(-tmp_213*tmp_66 - tmp_218*tmp_64) + tmp_76*(-tmp_213*tmp_74 - tmp_218*tmp_72) + tmp_84*(-tmp_213*tmp_82 - tmp_218*tmp_80) + tmp_92*(-tmp_213*tmp_90 - tmp_218*tmp_88);
      real_t a_3_2 = tmp_100*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_108*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_116*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_124*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_132*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_140*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_148*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_156*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_164*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_172*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_180*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_188*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_196*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_204*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_212*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_52*(-tmp_214*tmp_40 - tmp_218*tmp_36) + tmp_60*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_68*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_76*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_84*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_92*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_3_3 = tmp_100*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_108*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_116*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_124*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_132*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_140*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_148*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_156*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_164*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_172*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_180*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_188*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_196*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_204*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_212*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_52*(-tmp_215*tmp_40 - tmp_218*tmp_40) + tmp_60*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_68*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_76*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_84*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_92*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_20 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_20()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = -tmp_13 + tmp_9;
      real_t tmp_20 = p_affine_0_0*p_affine_1_1;
      real_t tmp_21 = p_affine_0_0*p_affine_1_2;
      real_t tmp_22 = p_affine_2_1*p_affine_3_2;
      real_t tmp_23 = p_affine_0_1*p_affine_1_0;
      real_t tmp_24 = p_affine_0_1*p_affine_1_2;
      real_t tmp_25 = p_affine_2_2*p_affine_3_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_0;
      real_t tmp_27 = p_affine_0_2*p_affine_1_1;
      real_t tmp_28 = p_affine_2_0*p_affine_3_1;
      real_t tmp_29 = p_affine_2_2*p_affine_3_1;
      real_t tmp_30 = p_affine_2_0*p_affine_3_2;
      real_t tmp_31 = p_affine_2_1*p_affine_3_0;
      real_t tmp_32 = std::abs(p_affine_0_0*tmp_22 - p_affine_0_0*tmp_29 + p_affine_0_1*tmp_25 - p_affine_0_1*tmp_30 + p_affine_0_2*tmp_28 - p_affine_0_2*tmp_31 - p_affine_1_0*tmp_22 + p_affine_1_0*tmp_29 - p_affine_1_1*tmp_25 + p_affine_1_1*tmp_30 - p_affine_1_2*tmp_28 + p_affine_1_2*tmp_31 + p_affine_2_0*tmp_24 - p_affine_2_0*tmp_27 - p_affine_2_1*tmp_21 + p_affine_2_1*tmp_26 + p_affine_2_2*tmp_20 - p_affine_2_2*tmp_23 - p_affine_3_0*tmp_24 + p_affine_3_0*tmp_27 + p_affine_3_1*tmp_21 - p_affine_3_1*tmp_26 - p_affine_3_2*tmp_20 + p_affine_3_2*tmp_23);
      real_t tmp_33 = tmp_32*(-tmp_17*tmp_18 - tmp_17*tmp_19 - tmp_17*tmp_6);
      real_t tmp_34 = 0.0044044418180681378*tmp_33;
      real_t tmp_35 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_36 = 1.0*tmp_16;
      real_t tmp_37 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_38 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_39 = -tmp_35*tmp_36 - tmp_36*tmp_37 - tmp_36*tmp_38;
      real_t tmp_40 = 2*tmp_39;
      real_t tmp_41 = tmp_33*tmp_40;
      real_t tmp_42 = 2.0*tmp_16;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_33*tmp_43;
      real_t tmp_45 = tmp_37*tmp_42;
      real_t tmp_46 = tmp_33*tmp_45;
      real_t tmp_47 = tmp_35*tmp_42;
      real_t tmp_48 = tmp_33*tmp_47;
      real_t tmp_49 = tmp_19*tmp_32;
      real_t tmp_50 = 0.0044044418180681378*tmp_49;
      real_t tmp_51 = tmp_36*tmp_39;
      real_t tmp_52 = tmp_49*tmp_51;
      real_t tmp_53 = 1.0/(tmp_15*tmp_15);
      real_t tmp_54 = tmp_38*tmp_53;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = tmp_37*tmp_53;
      real_t tmp_57 = tmp_49*tmp_56;
      real_t tmp_58 = tmp_35*tmp_53;
      real_t tmp_59 = tmp_49*tmp_58;
      real_t tmp_60 = tmp_18*tmp_32;
      real_t tmp_61 = tmp_51*tmp_60;
      real_t tmp_62 = tmp_54*tmp_60;
      real_t tmp_63 = tmp_56*tmp_60;
      real_t tmp_64 = tmp_58*tmp_60;
      real_t tmp_65 = tmp_32*tmp_6;
      real_t tmp_66 = tmp_51*tmp_65;
      real_t tmp_67 = tmp_54*tmp_65;
      real_t tmp_68 = tmp_56*tmp_65;
      real_t tmp_69 = tmp_58*tmp_65;
      real_t a_0_0 = tmp_34*tmp_40 + 0.16226222484859867*tmp_41;
      real_t a_0_1 = tmp_34*tmp_43 + 0.16226222484859867*tmp_44;
      real_t a_0_2 = tmp_34*tmp_45 + 0.16226222484859867*tmp_46;
      real_t a_0_3 = tmp_34*tmp_47 + 0.16226222484859867*tmp_48;
      real_t a_1_0 = tmp_50*tmp_51 + 0.16226222484859867*tmp_52;
      real_t a_1_1 = tmp_50*tmp_54 + 0.16226222484859867*tmp_55;
      real_t a_1_2 = tmp_50*tmp_56 + 0.16226222484859867*tmp_57;
      real_t a_1_3 = tmp_50*tmp_58 + 0.16226222484859867*tmp_59;
      real_t a_2_0 = 0.1666666666666668*tmp_61;
      real_t a_2_1 = 0.1666666666666668*tmp_62;
      real_t a_2_2 = 0.1666666666666668*tmp_63;
      real_t a_2_3 = 0.1666666666666668*tmp_64;
      real_t a_3_0 = 0.1666666666666668*tmp_66;
      real_t a_3_1 = 0.1666666666666668*tmp_67;
      real_t a_3_2 = 0.1666666666666668*tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_38*tmp_44;
      real_t tmp_46 = tmp_34*tmp_44;
      real_t tmp_47 = tmp_44*tmp_6;
      real_t tmp_48 = p_affine_13_0*(-tmp_45 - tmp_46 - tmp_47);
      real_t tmp_49 = tmp_40*tmp_44;
      real_t tmp_50 = tmp_36*tmp_44;
      real_t tmp_51 = tmp_27*tmp_44;
      real_t tmp_52 = p_affine_13_2*(-tmp_49 - tmp_50 - tmp_51);
      real_t tmp_53 = 1.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_54 = 0.0068572537431980923*tmp_53;
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_57 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_58 = tmp_21*tmp_56 + tmp_27*tmp_57 + tmp_55*tmp_6;
      real_t tmp_59 = tmp_34*tmp_55 + tmp_35*tmp_56 + tmp_36*tmp_57;
      real_t tmp_60 = tmp_38*tmp_55 + tmp_39*tmp_56 + tmp_40*tmp_57;
      real_t tmp_61 = -tmp_58 - tmp_59 - tmp_60 + 1;
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = 0.037198804536718075*tmp_53;
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_65 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_66 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_67 = tmp_21*tmp_65 + tmp_27*tmp_66 + tmp_6*tmp_64;
      real_t tmp_68 = tmp_34*tmp_64 + tmp_35*tmp_65 + tmp_36*tmp_66;
      real_t tmp_69 = tmp_38*tmp_64 + tmp_39*tmp_65 + tmp_40*tmp_66;
      real_t tmp_70 = -tmp_67 - tmp_68 - tmp_69 + 1;
      real_t tmp_71 = 1.0*tmp_70;
      real_t tmp_72 = 0.020848748529055869*tmp_53;
      real_t tmp_73 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_6*tmp_73;
      real_t tmp_77 = tmp_34*tmp_73 + tmp_35*tmp_74 + tmp_36*tmp_75;
      real_t tmp_78 = tmp_38*tmp_73 + tmp_39*tmp_74 + tmp_40*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 1.0*tmp_79;
      real_t tmp_81 = 0.019202922745021479*tmp_53;
      real_t tmp_82 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_83 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_84 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_85 = tmp_21*tmp_83 + tmp_27*tmp_84 + tmp_6*tmp_82;
      real_t tmp_86 = tmp_34*tmp_82 + tmp_35*tmp_83 + tmp_36*tmp_84;
      real_t tmp_87 = tmp_38*tmp_82 + tmp_39*tmp_83 + tmp_40*tmp_84;
      real_t tmp_88 = -tmp_85 - tmp_86 - tmp_87 + 1;
      real_t tmp_89 = 1.0*tmp_88;
      real_t tmp_90 = 0.020848748529055869*tmp_53;
      real_t tmp_91 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_92 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_93 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_94 = tmp_21*tmp_92 + tmp_27*tmp_93 + tmp_6*tmp_91;
      real_t tmp_95 = tmp_34*tmp_91 + tmp_35*tmp_92 + tmp_36*tmp_93;
      real_t tmp_96 = tmp_38*tmp_91 + tmp_39*tmp_92 + tmp_40*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = 1.0*tmp_97;
      real_t tmp_99 = 0.019202922745021479*tmp_53;
      real_t tmp_100 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_101 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_102 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_103 = tmp_100*tmp_6 + tmp_101*tmp_21 + tmp_102*tmp_27;
      real_t tmp_104 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_102*tmp_36;
      real_t tmp_105 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_102*tmp_40;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 1.0*tmp_106;
      real_t tmp_108 = 0.020848748529055869*tmp_53;
      real_t tmp_109 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_110 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_111 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_112 = tmp_109*tmp_6 + tmp_110*tmp_21 + tmp_111*tmp_27;
      real_t tmp_113 = tmp_109*tmp_34 + tmp_110*tmp_35 + tmp_111*tmp_36;
      real_t tmp_114 = tmp_109*tmp_38 + tmp_110*tmp_39 + tmp_111*tmp_40;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 1.0*tmp_115;
      real_t tmp_117 = 0.019202922745021479*tmp_53;
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 1.0*tmp_124;
      real_t tmp_126 = 0.020848748529055869*tmp_53;
      real_t tmp_127 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_128 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_129 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_130 = tmp_127*tmp_6 + tmp_128*tmp_21 + tmp_129*tmp_27;
      real_t tmp_131 = tmp_127*tmp_34 + tmp_128*tmp_35 + tmp_129*tmp_36;
      real_t tmp_132 = tmp_127*tmp_38 + tmp_128*tmp_39 + tmp_129*tmp_40;
      real_t tmp_133 = -tmp_130 - tmp_131 - tmp_132 + 1;
      real_t tmp_134 = 1.0*tmp_133;
      real_t tmp_135 = 0.019202922745021479*tmp_53;
      real_t tmp_136 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_137 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_138 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_139 = tmp_136*tmp_6 + tmp_137*tmp_21 + tmp_138*tmp_27;
      real_t tmp_140 = tmp_136*tmp_34 + tmp_137*tmp_35 + tmp_138*tmp_36;
      real_t tmp_141 = tmp_136*tmp_38 + tmp_137*tmp_39 + tmp_138*tmp_40;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 1.0*tmp_142;
      real_t tmp_144 = 0.020848748529055869*tmp_53;
      real_t tmp_145 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_146 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_147 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_148 = tmp_145*tmp_6 + tmp_146*tmp_21 + tmp_147*tmp_27;
      real_t tmp_149 = tmp_145*tmp_34 + tmp_146*tmp_35 + tmp_147*tmp_36;
      real_t tmp_150 = tmp_145*tmp_38 + tmp_146*tmp_39 + tmp_147*tmp_40;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 1.0*tmp_151;
      real_t tmp_153 = 0.019202922745021479*tmp_53;
      real_t tmp_154 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_155 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_156 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_157 = tmp_154*tmp_6 + tmp_155*tmp_21 + tmp_156*tmp_27;
      real_t tmp_158 = tmp_154*tmp_34 + tmp_155*tmp_35 + tmp_156*tmp_36;
      real_t tmp_159 = tmp_154*tmp_38 + tmp_155*tmp_39 + tmp_156*tmp_40;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 1.0*tmp_160;
      real_t tmp_162 = 0.042507265838595799*tmp_53;
      real_t tmp_163 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_164 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_165 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_166 = tmp_163*tmp_6 + tmp_164*tmp_21 + tmp_165*tmp_27;
      real_t tmp_167 = tmp_163*tmp_34 + tmp_164*tmp_35 + tmp_165*tmp_36;
      real_t tmp_168 = tmp_163*tmp_38 + tmp_164*tmp_39 + tmp_165*tmp_40;
      real_t tmp_169 = -tmp_166 - tmp_167 - tmp_168 + 1;
      real_t tmp_170 = 1.0*tmp_169;
      real_t tmp_171 = 0.020848748529055869*tmp_53;
      real_t tmp_172 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_6 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_172*tmp_34 + tmp_173*tmp_35 + tmp_174*tmp_36;
      real_t tmp_177 = tmp_172*tmp_38 + tmp_173*tmp_39 + tmp_174*tmp_40;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 1.0*tmp_178;
      real_t tmp_180 = 0.0068572537431980923*tmp_53;
      real_t tmp_181 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_182 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_183 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_184 = tmp_181*tmp_6 + tmp_182*tmp_21 + tmp_183*tmp_27;
      real_t tmp_185 = tmp_181*tmp_34 + tmp_182*tmp_35 + tmp_183*tmp_36;
      real_t tmp_186 = tmp_181*tmp_38 + tmp_182*tmp_39 + tmp_183*tmp_40;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 1.0*tmp_187;
      real_t tmp_189 = 0.037198804536718075*tmp_53;
      real_t tmp_190 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 1.0*tmp_196;
      real_t tmp_198 = 0.042507265838595799*tmp_53;
      real_t tmp_199 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_6 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_199*tmp_34 + tmp_200*tmp_35 + tmp_201*tmp_36;
      real_t tmp_204 = tmp_199*tmp_38 + tmp_200*tmp_39 + tmp_201*tmp_40;
      real_t tmp_205 = -tmp_202 - tmp_203 - tmp_204 + 1;
      real_t tmp_206 = 1.0*tmp_205;
      real_t tmp_207 = 0.0068572537431980923*tmp_53;
      real_t tmp_208 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_209 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_210 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_211 = tmp_208*tmp_6 + tmp_209*tmp_21 + tmp_210*tmp_27;
      real_t tmp_212 = tmp_208*tmp_34 + tmp_209*tmp_35 + tmp_210*tmp_36;
      real_t tmp_213 = tmp_208*tmp_38 + tmp_209*tmp_39 + tmp_210*tmp_40;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 1.0*tmp_214;
      real_t tmp_216 = 0.037198804536718075*tmp_53;
      real_t tmp_217 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_218 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_219 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_220 = tmp_21*tmp_218 + tmp_217*tmp_6 + tmp_219*tmp_27;
      real_t tmp_221 = tmp_217*tmp_34 + tmp_218*tmp_35 + tmp_219*tmp_36;
      real_t tmp_222 = tmp_217*tmp_38 + tmp_218*tmp_39 + tmp_219*tmp_40;
      real_t tmp_223 = -tmp_220 - tmp_221 - tmp_222 + 1;
      real_t tmp_224 = 1.0*tmp_223;
      real_t tmp_225 = 0.042507265838595799*tmp_53;
      real_t tmp_226 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_227 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_228 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_229 = tmp_21*tmp_227 + tmp_226*tmp_6 + tmp_228*tmp_27;
      real_t tmp_230 = tmp_226*tmp_34 + tmp_227*tmp_35 + tmp_228*tmp_36;
      real_t tmp_231 = tmp_226*tmp_38 + tmp_227*tmp_39 + tmp_228*tmp_40;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 1.0*tmp_232;
      real_t tmp_234 = 0.019202922745021479*tmp_53;
      real_t tmp_235 = 1.0*tmp_52;
      real_t tmp_236 = p_affine_13_0*tmp_47;
      real_t tmp_237 = p_affine_13_0*tmp_46;
      real_t tmp_238 = p_affine_13_0*tmp_45;
      real_t tmp_239 = 1.0*tmp_48;
      real_t tmp_240 = p_affine_13_2*tmp_51;
      real_t tmp_241 = p_affine_13_2*tmp_50;
      real_t tmp_242 = p_affine_13_2*tmp_49;
      real_t a_0_0 = tmp_108*(-tmp_107*tmp_48 - tmp_107*tmp_52) + tmp_117*(-tmp_116*tmp_48 - tmp_116*tmp_52) + tmp_126*(-tmp_125*tmp_48 - tmp_125*tmp_52) + tmp_135*(-tmp_134*tmp_48 - tmp_134*tmp_52) + tmp_144*(-tmp_143*tmp_48 - tmp_143*tmp_52) + tmp_153*(-tmp_152*tmp_48 - tmp_152*tmp_52) + tmp_162*(-tmp_161*tmp_48 - tmp_161*tmp_52) + tmp_171*(-tmp_170*tmp_48 - tmp_170*tmp_52) + tmp_180*(-tmp_179*tmp_48 - tmp_179*tmp_52) + tmp_189*(-tmp_188*tmp_48 - tmp_188*tmp_52) + tmp_198*(-tmp_197*tmp_48 - tmp_197*tmp_52) + tmp_207*(-tmp_206*tmp_48 - tmp_206*tmp_52) + tmp_216*(-tmp_215*tmp_48 - tmp_215*tmp_52) + tmp_225*(-tmp_224*tmp_48 - tmp_224*tmp_52) + tmp_234*(-tmp_233*tmp_48 - tmp_233*tmp_52) + tmp_54*(-tmp_43*tmp_48 - tmp_43*tmp_52) + tmp_63*(-tmp_48*tmp_62 - tmp_52*tmp_62) + tmp_72*(-tmp_48*tmp_71 - tmp_52*tmp_71) + tmp_81*(-tmp_48*tmp_80 - tmp_52*tmp_80) + tmp_90*(-tmp_48*tmp_89 - tmp_52*tmp_89) + tmp_99*(-tmp_48*tmp_98 - tmp_52*tmp_98);
      real_t a_0_1 = tmp_108*(-tmp_103*tmp_235 - tmp_106*tmp_236) + tmp_117*(-tmp_112*tmp_235 - tmp_115*tmp_236) + tmp_126*(-tmp_121*tmp_235 - tmp_124*tmp_236) + tmp_135*(-tmp_130*tmp_235 - tmp_133*tmp_236) + tmp_144*(-tmp_139*tmp_235 - tmp_142*tmp_236) + tmp_153*(-tmp_148*tmp_235 - tmp_151*tmp_236) + tmp_162*(-tmp_157*tmp_235 - tmp_160*tmp_236) + tmp_171*(-tmp_166*tmp_235 - tmp_169*tmp_236) + tmp_180*(-tmp_175*tmp_235 - tmp_178*tmp_236) + tmp_189*(-tmp_184*tmp_235 - tmp_187*tmp_236) + tmp_198*(-tmp_193*tmp_235 - tmp_196*tmp_236) + tmp_207*(-tmp_202*tmp_235 - tmp_205*tmp_236) + tmp_216*(-tmp_211*tmp_235 - tmp_214*tmp_236) + tmp_225*(-tmp_220*tmp_235 - tmp_223*tmp_236) + tmp_234*(-tmp_229*tmp_235 - tmp_232*tmp_236) + tmp_54*(-tmp_235*tmp_33 - tmp_236*tmp_42) + tmp_63*(-tmp_235*tmp_58 - tmp_236*tmp_61) + tmp_72*(-tmp_235*tmp_67 - tmp_236*tmp_70) + tmp_81*(-tmp_235*tmp_76 - tmp_236*tmp_79) + tmp_90*(-tmp_235*tmp_85 - tmp_236*tmp_88) + tmp_99*(-tmp_235*tmp_94 - tmp_236*tmp_97);
      real_t a_0_2 = tmp_108*(-tmp_104*tmp_235 - tmp_106*tmp_237) + tmp_117*(-tmp_113*tmp_235 - tmp_115*tmp_237) + tmp_126*(-tmp_122*tmp_235 - tmp_124*tmp_237) + tmp_135*(-tmp_131*tmp_235 - tmp_133*tmp_237) + tmp_144*(-tmp_140*tmp_235 - tmp_142*tmp_237) + tmp_153*(-tmp_149*tmp_235 - tmp_151*tmp_237) + tmp_162*(-tmp_158*tmp_235 - tmp_160*tmp_237) + tmp_171*(-tmp_167*tmp_235 - tmp_169*tmp_237) + tmp_180*(-tmp_176*tmp_235 - tmp_178*tmp_237) + tmp_189*(-tmp_185*tmp_235 - tmp_187*tmp_237) + tmp_198*(-tmp_194*tmp_235 - tmp_196*tmp_237) + tmp_207*(-tmp_203*tmp_235 - tmp_205*tmp_237) + tmp_216*(-tmp_212*tmp_235 - tmp_214*tmp_237) + tmp_225*(-tmp_221*tmp_235 - tmp_223*tmp_237) + tmp_234*(-tmp_230*tmp_235 - tmp_232*tmp_237) + tmp_54*(-tmp_235*tmp_37 - tmp_237*tmp_42) + tmp_63*(-tmp_235*tmp_59 - tmp_237*tmp_61) + tmp_72*(-tmp_235*tmp_68 - tmp_237*tmp_70) + tmp_81*(-tmp_235*tmp_77 - tmp_237*tmp_79) + tmp_90*(-tmp_235*tmp_86 - tmp_237*tmp_88) + tmp_99*(-tmp_235*tmp_95 - tmp_237*tmp_97);
      real_t a_0_3 = tmp_108*(-tmp_105*tmp_235 - tmp_106*tmp_238) + tmp_117*(-tmp_114*tmp_235 - tmp_115*tmp_238) + tmp_126*(-tmp_123*tmp_235 - tmp_124*tmp_238) + tmp_135*(-tmp_132*tmp_235 - tmp_133*tmp_238) + tmp_144*(-tmp_141*tmp_235 - tmp_142*tmp_238) + tmp_153*(-tmp_150*tmp_235 - tmp_151*tmp_238) + tmp_162*(-tmp_159*tmp_235 - tmp_160*tmp_238) + tmp_171*(-tmp_168*tmp_235 - tmp_169*tmp_238) + tmp_180*(-tmp_177*tmp_235 - tmp_178*tmp_238) + tmp_189*(-tmp_186*tmp_235 - tmp_187*tmp_238) + tmp_198*(-tmp_195*tmp_235 - tmp_196*tmp_238) + tmp_207*(-tmp_204*tmp_235 - tmp_205*tmp_238) + tmp_216*(-tmp_213*tmp_235 - tmp_214*tmp_238) + tmp_225*(-tmp_222*tmp_235 - tmp_223*tmp_238) + tmp_234*(-tmp_231*tmp_235 - tmp_232*tmp_238) + tmp_54*(-tmp_235*tmp_41 - tmp_238*tmp_42) + tmp_63*(-tmp_235*tmp_60 - tmp_238*tmp_61) + tmp_72*(-tmp_235*tmp_69 - tmp_238*tmp_70) + tmp_81*(-tmp_235*tmp_78 - tmp_238*tmp_79) + tmp_90*(-tmp_235*tmp_87 - tmp_238*tmp_88) + tmp_99*(-tmp_235*tmp_96 - tmp_238*tmp_97);
      real_t a_1_0 = tmp_108*(-tmp_103*tmp_239 - tmp_106*tmp_240) + tmp_117*(-tmp_112*tmp_239 - tmp_115*tmp_240) + tmp_126*(-tmp_121*tmp_239 - tmp_124*tmp_240) + tmp_135*(-tmp_130*tmp_239 - tmp_133*tmp_240) + tmp_144*(-tmp_139*tmp_239 - tmp_142*tmp_240) + tmp_153*(-tmp_148*tmp_239 - tmp_151*tmp_240) + tmp_162*(-tmp_157*tmp_239 - tmp_160*tmp_240) + tmp_171*(-tmp_166*tmp_239 - tmp_169*tmp_240) + tmp_180*(-tmp_175*tmp_239 - tmp_178*tmp_240) + tmp_189*(-tmp_184*tmp_239 - tmp_187*tmp_240) + tmp_198*(-tmp_193*tmp_239 - tmp_196*tmp_240) + tmp_207*(-tmp_202*tmp_239 - tmp_205*tmp_240) + tmp_216*(-tmp_211*tmp_239 - tmp_214*tmp_240) + tmp_225*(-tmp_220*tmp_239 - tmp_223*tmp_240) + tmp_234*(-tmp_229*tmp_239 - tmp_232*tmp_240) + tmp_54*(-tmp_239*tmp_33 - tmp_240*tmp_42) + tmp_63*(-tmp_239*tmp_58 - tmp_240*tmp_61) + tmp_72*(-tmp_239*tmp_67 - tmp_240*tmp_70) + tmp_81*(-tmp_239*tmp_76 - tmp_240*tmp_79) + tmp_90*(-tmp_239*tmp_85 - tmp_240*tmp_88) + tmp_99*(-tmp_239*tmp_94 - tmp_240*tmp_97);
      real_t a_1_1 = tmp_108*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_117*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_126*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_135*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_144*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_153*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_162*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_171*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_180*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_189*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_198*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_207*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_216*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_225*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_234*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_54*(-tmp_236*tmp_33 - tmp_240*tmp_33) + tmp_63*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_72*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_81*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_90*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_99*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_1_2 = tmp_108*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_117*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_126*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_135*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_144*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_153*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_162*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_171*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_180*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_189*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_198*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_207*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_216*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_225*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_234*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_54*(-tmp_237*tmp_33 - tmp_240*tmp_37) + tmp_63*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_72*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_81*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_90*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_99*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_1_3 = tmp_108*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_117*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_126*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_135*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_144*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_153*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_162*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_171*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_180*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_189*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_198*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_207*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_216*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_225*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_234*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_54*(-tmp_238*tmp_33 - tmp_240*tmp_41) + tmp_63*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_72*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_81*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_90*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_99*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_0 = tmp_108*(-tmp_104*tmp_239 - tmp_106*tmp_241) + tmp_117*(-tmp_113*tmp_239 - tmp_115*tmp_241) + tmp_126*(-tmp_122*tmp_239 - tmp_124*tmp_241) + tmp_135*(-tmp_131*tmp_239 - tmp_133*tmp_241) + tmp_144*(-tmp_140*tmp_239 - tmp_142*tmp_241) + tmp_153*(-tmp_149*tmp_239 - tmp_151*tmp_241) + tmp_162*(-tmp_158*tmp_239 - tmp_160*tmp_241) + tmp_171*(-tmp_167*tmp_239 - tmp_169*tmp_241) + tmp_180*(-tmp_176*tmp_239 - tmp_178*tmp_241) + tmp_189*(-tmp_185*tmp_239 - tmp_187*tmp_241) + tmp_198*(-tmp_194*tmp_239 - tmp_196*tmp_241) + tmp_207*(-tmp_203*tmp_239 - tmp_205*tmp_241) + tmp_216*(-tmp_212*tmp_239 - tmp_214*tmp_241) + tmp_225*(-tmp_221*tmp_239 - tmp_223*tmp_241) + tmp_234*(-tmp_230*tmp_239 - tmp_232*tmp_241) + tmp_54*(-tmp_239*tmp_37 - tmp_241*tmp_42) + tmp_63*(-tmp_239*tmp_59 - tmp_241*tmp_61) + tmp_72*(-tmp_239*tmp_68 - tmp_241*tmp_70) + tmp_81*(-tmp_239*tmp_77 - tmp_241*tmp_79) + tmp_90*(-tmp_239*tmp_86 - tmp_241*tmp_88) + tmp_99*(-tmp_239*tmp_95 - tmp_241*tmp_97);
      real_t a_2_1 = tmp_108*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_117*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_126*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_135*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_144*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_153*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_162*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_171*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_180*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_189*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_198*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_207*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_216*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_225*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_234*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_54*(-tmp_236*tmp_37 - tmp_241*tmp_33) + tmp_63*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_72*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_81*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_90*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_99*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_2_2 = tmp_108*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_117*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_126*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_135*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_144*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_153*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_162*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_171*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_180*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_189*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_198*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_207*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_216*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_225*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_234*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_54*(-tmp_237*tmp_37 - tmp_241*tmp_37) + tmp_63*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_72*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_81*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_90*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_99*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      real_t a_2_3 = tmp_108*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_117*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_126*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_135*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_144*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_153*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_162*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_171*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_180*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_189*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_198*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_207*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_216*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_225*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_234*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_54*(-tmp_238*tmp_37 - tmp_241*tmp_41) + tmp_63*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_72*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_81*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_90*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_99*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_0 = tmp_108*(-tmp_105*tmp_239 - tmp_106*tmp_242) + tmp_117*(-tmp_114*tmp_239 - tmp_115*tmp_242) + tmp_126*(-tmp_123*tmp_239 - tmp_124*tmp_242) + tmp_135*(-tmp_132*tmp_239 - tmp_133*tmp_242) + tmp_144*(-tmp_141*tmp_239 - tmp_142*tmp_242) + tmp_153*(-tmp_150*tmp_239 - tmp_151*tmp_242) + tmp_162*(-tmp_159*tmp_239 - tmp_160*tmp_242) + tmp_171*(-tmp_168*tmp_239 - tmp_169*tmp_242) + tmp_180*(-tmp_177*tmp_239 - tmp_178*tmp_242) + tmp_189*(-tmp_186*tmp_239 - tmp_187*tmp_242) + tmp_198*(-tmp_195*tmp_239 - tmp_196*tmp_242) + tmp_207*(-tmp_204*tmp_239 - tmp_205*tmp_242) + tmp_216*(-tmp_213*tmp_239 - tmp_214*tmp_242) + tmp_225*(-tmp_222*tmp_239 - tmp_223*tmp_242) + tmp_234*(-tmp_231*tmp_239 - tmp_232*tmp_242) + tmp_54*(-tmp_239*tmp_41 - tmp_242*tmp_42) + tmp_63*(-tmp_239*tmp_60 - tmp_242*tmp_61) + tmp_72*(-tmp_239*tmp_69 - tmp_242*tmp_70) + tmp_81*(-tmp_239*tmp_78 - tmp_242*tmp_79) + tmp_90*(-tmp_239*tmp_87 - tmp_242*tmp_88) + tmp_99*(-tmp_239*tmp_96 - tmp_242*tmp_97);
      real_t a_3_1 = tmp_108*(-tmp_103*tmp_242 - tmp_105*tmp_236) + tmp_117*(-tmp_112*tmp_242 - tmp_114*tmp_236) + tmp_126*(-tmp_121*tmp_242 - tmp_123*tmp_236) + tmp_135*(-tmp_130*tmp_242 - tmp_132*tmp_236) + tmp_144*(-tmp_139*tmp_242 - tmp_141*tmp_236) + tmp_153*(-tmp_148*tmp_242 - tmp_150*tmp_236) + tmp_162*(-tmp_157*tmp_242 - tmp_159*tmp_236) + tmp_171*(-tmp_166*tmp_242 - tmp_168*tmp_236) + tmp_180*(-tmp_175*tmp_242 - tmp_177*tmp_236) + tmp_189*(-tmp_184*tmp_242 - tmp_186*tmp_236) + tmp_198*(-tmp_193*tmp_242 - tmp_195*tmp_236) + tmp_207*(-tmp_202*tmp_242 - tmp_204*tmp_236) + tmp_216*(-tmp_211*tmp_242 - tmp_213*tmp_236) + tmp_225*(-tmp_220*tmp_242 - tmp_222*tmp_236) + tmp_234*(-tmp_229*tmp_242 - tmp_231*tmp_236) + tmp_54*(-tmp_236*tmp_41 - tmp_242*tmp_33) + tmp_63*(-tmp_236*tmp_60 - tmp_242*tmp_58) + tmp_72*(-tmp_236*tmp_69 - tmp_242*tmp_67) + tmp_81*(-tmp_236*tmp_78 - tmp_242*tmp_76) + tmp_90*(-tmp_236*tmp_87 - tmp_242*tmp_85) + tmp_99*(-tmp_236*tmp_96 - tmp_242*tmp_94);
      real_t a_3_2 = tmp_108*(-tmp_104*tmp_242 - tmp_105*tmp_237) + tmp_117*(-tmp_113*tmp_242 - tmp_114*tmp_237) + tmp_126*(-tmp_122*tmp_242 - tmp_123*tmp_237) + tmp_135*(-tmp_131*tmp_242 - tmp_132*tmp_237) + tmp_144*(-tmp_140*tmp_242 - tmp_141*tmp_237) + tmp_153*(-tmp_149*tmp_242 - tmp_150*tmp_237) + tmp_162*(-tmp_158*tmp_242 - tmp_159*tmp_237) + tmp_171*(-tmp_167*tmp_242 - tmp_168*tmp_237) + tmp_180*(-tmp_176*tmp_242 - tmp_177*tmp_237) + tmp_189*(-tmp_185*tmp_242 - tmp_186*tmp_237) + tmp_198*(-tmp_194*tmp_242 - tmp_195*tmp_237) + tmp_207*(-tmp_203*tmp_242 - tmp_204*tmp_237) + tmp_216*(-tmp_212*tmp_242 - tmp_213*tmp_237) + tmp_225*(-tmp_221*tmp_242 - tmp_222*tmp_237) + tmp_234*(-tmp_230*tmp_242 - tmp_231*tmp_237) + tmp_54*(-tmp_237*tmp_41 - tmp_242*tmp_37) + tmp_63*(-tmp_237*tmp_60 - tmp_242*tmp_59) + tmp_72*(-tmp_237*tmp_69 - tmp_242*tmp_68) + tmp_81*(-tmp_237*tmp_78 - tmp_242*tmp_77) + tmp_90*(-tmp_237*tmp_87 - tmp_242*tmp_86) + tmp_99*(-tmp_237*tmp_96 - tmp_242*tmp_95);
      real_t a_3_3 = tmp_108*(-tmp_105*tmp_238 - tmp_105*tmp_242) + tmp_117*(-tmp_114*tmp_238 - tmp_114*tmp_242) + tmp_126*(-tmp_123*tmp_238 - tmp_123*tmp_242) + tmp_135*(-tmp_132*tmp_238 - tmp_132*tmp_242) + tmp_144*(-tmp_141*tmp_238 - tmp_141*tmp_242) + tmp_153*(-tmp_150*tmp_238 - tmp_150*tmp_242) + tmp_162*(-tmp_159*tmp_238 - tmp_159*tmp_242) + tmp_171*(-tmp_168*tmp_238 - tmp_168*tmp_242) + tmp_180*(-tmp_177*tmp_238 - tmp_177*tmp_242) + tmp_189*(-tmp_186*tmp_238 - tmp_186*tmp_242) + tmp_198*(-tmp_195*tmp_238 - tmp_195*tmp_242) + tmp_207*(-tmp_204*tmp_238 - tmp_204*tmp_242) + tmp_216*(-tmp_213*tmp_238 - tmp_213*tmp_242) + tmp_225*(-tmp_222*tmp_238 - tmp_222*tmp_242) + tmp_234*(-tmp_231*tmp_238 - tmp_231*tmp_242) + tmp_54*(-tmp_238*tmp_41 - tmp_242*tmp_41) + tmp_63*(-tmp_238*tmp_60 - tmp_242*tmp_60) + tmp_72*(-tmp_238*tmp_69 - tmp_242*tmp_69) + tmp_81*(-tmp_238*tmp_78 - tmp_242*tmp_78) + tmp_90*(-tmp_238*tmp_87 - tmp_242*tmp_87) + tmp_99*(-tmp_238*tmp_96 - tmp_242*tmp_96);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_3*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_0*tmp_13 + tmp_11*tmp_2 - tmp_12*tmp_5 - tmp_14*tmp_2 + tmp_5*tmp_7);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_6 + tmp_10*tmp_2;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_2*tmp_8 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_13;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_5;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = p_affine_13_0*(-tmp_36 - tmp_40 - tmp_44 + 1);
      real_t tmp_46 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_47 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_50 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_51 = tmp_49*tmp_50;
      real_t tmp_52 = tmp_48 - tmp_51;
      real_t tmp_53 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_54 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_55 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_56 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_57 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_58 = tmp_50*tmp_57;
      real_t tmp_59 = tmp_46*tmp_54;
      real_t tmp_60 = tmp_55*tmp_56;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_60 + tmp_48*tmp_53 + tmp_49*tmp_54*tmp_55 - tmp_51*tmp_53 + tmp_56*tmp_58 - tmp_57*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_52*tmp_62;
      real_t tmp_64 = tmp_50*tmp_56 - tmp_59;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = -tmp_47*tmp_56 + tmp_49*tmp_54;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -1.0*tmp_63 - 1.0*tmp_65 - 1.0*tmp_67;
      real_t tmp_69 = 0.5*tmp_15;
      real_t tmp_70 = -tmp_29*tmp_69 - tmp_39*tmp_69 - tmp_43*tmp_69;
      real_t tmp_71 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_72 = tmp_61*(tmp_19 + tmp_71);
      real_t tmp_73 = -tmp_49*tmp_53 + tmp_56*tmp_57;
      real_t tmp_74 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_75 = tmp_61*(tmp_26 + tmp_74);
      real_t tmp_76 = tmp_47*tmp_53 - tmp_54*tmp_57;
      real_t tmp_77 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_78 = tmp_61*(tmp_33 + tmp_77);
      real_t tmp_79 = tmp_66*tmp_72 + tmp_73*tmp_75 + tmp_76*tmp_78;
      real_t tmp_80 = tmp_46*tmp_53 - tmp_60;
      real_t tmp_81 = -tmp_50*tmp_53 + tmp_54*tmp_55;
      real_t tmp_82 = tmp_64*tmp_72 + tmp_75*tmp_80 + tmp_78*tmp_81;
      real_t tmp_83 = -tmp_46*tmp_57 + tmp_49*tmp_55;
      real_t tmp_84 = -tmp_47*tmp_55 + tmp_58;
      real_t tmp_85 = tmp_52*tmp_72 + tmp_75*tmp_83 + tmp_78*tmp_84;
      real_t tmp_86 = -tmp_79 - tmp_82 - tmp_85 + 1;
      real_t tmp_87 = 1.0*std::pow((std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)), 1.0/2.0);
      real_t tmp_88 = 0.0068572537431980923*tmp_87;
      real_t tmp_89 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_90 = tmp_15*(tmp_20 + tmp_89);
      real_t tmp_91 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_92 = tmp_15*(tmp_27 + tmp_91);
      real_t tmp_93 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_94 = tmp_15*(tmp_34 + tmp_93);
      real_t tmp_95 = tmp_22*tmp_92 + tmp_29*tmp_94 + tmp_4*tmp_90;
      real_t tmp_96 = tmp_37*tmp_90 + tmp_38*tmp_92 + tmp_39*tmp_94;
      real_t tmp_97 = tmp_41*tmp_90 + tmp_42*tmp_92 + tmp_43*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = p_affine_13_0*tmp_68;
      real_t tmp_100 = tmp_61*(tmp_71 + tmp_89);
      real_t tmp_101 = tmp_61*(tmp_74 + tmp_91);
      real_t tmp_102 = tmp_61*(tmp_77 + tmp_93);
      real_t tmp_103 = tmp_100*tmp_66 + tmp_101*tmp_73 + tmp_102*tmp_76;
      real_t tmp_104 = tmp_100*tmp_64 + tmp_101*tmp_80 + tmp_102*tmp_81;
      real_t tmp_105 = tmp_100*tmp_52 + tmp_101*tmp_83 + tmp_102*tmp_84;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.037198804536718075*tmp_87;
      real_t tmp_108 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_109 = tmp_15*(tmp_108 + tmp_20);
      real_t tmp_110 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_111 = tmp_15*(tmp_110 + tmp_27);
      real_t tmp_112 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_34);
      real_t tmp_114 = tmp_109*tmp_4 + tmp_111*tmp_22 + tmp_113*tmp_29;
      real_t tmp_115 = tmp_109*tmp_37 + tmp_111*tmp_38 + tmp_113*tmp_39;
      real_t tmp_116 = tmp_109*tmp_41 + tmp_111*tmp_42 + tmp_113*tmp_43;
      real_t tmp_117 = -tmp_114 - tmp_115 - tmp_116 + 1;
      real_t tmp_118 = tmp_61*(tmp_108 + tmp_71);
      real_t tmp_119 = tmp_61*(tmp_110 + tmp_74);
      real_t tmp_120 = tmp_61*(tmp_112 + tmp_77);
      real_t tmp_121 = tmp_118*tmp_66 + tmp_119*tmp_73 + tmp_120*tmp_76;
      real_t tmp_122 = tmp_118*tmp_64 + tmp_119*tmp_80 + tmp_120*tmp_81;
      real_t tmp_123 = tmp_118*tmp_52 + tmp_119*tmp_83 + tmp_120*tmp_84;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.020848748529055869*tmp_87;
      real_t tmp_126 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_127 = tmp_15*(tmp_126 + tmp_20);
      real_t tmp_128 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_27);
      real_t tmp_130 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_34);
      real_t tmp_132 = tmp_127*tmp_4 + tmp_129*tmp_22 + tmp_131*tmp_29;
      real_t tmp_133 = tmp_127*tmp_37 + tmp_129*tmp_38 + tmp_131*tmp_39;
      real_t tmp_134 = tmp_127*tmp_41 + tmp_129*tmp_42 + tmp_131*tmp_43;
      real_t tmp_135 = -tmp_132 - tmp_133 - tmp_134 + 1;
      real_t tmp_136 = tmp_61*(tmp_126 + tmp_71);
      real_t tmp_137 = tmp_61*(tmp_128 + tmp_74);
      real_t tmp_138 = tmp_61*(tmp_130 + tmp_77);
      real_t tmp_139 = tmp_136*tmp_66 + tmp_137*tmp_73 + tmp_138*tmp_76;
      real_t tmp_140 = tmp_136*tmp_64 + tmp_137*tmp_80 + tmp_138*tmp_81;
      real_t tmp_141 = tmp_136*tmp_52 + tmp_137*tmp_83 + tmp_138*tmp_84;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_87;
      real_t tmp_144 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_145 = tmp_15*(tmp_144 + tmp_20);
      real_t tmp_146 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_147 = tmp_15*(tmp_146 + tmp_27);
      real_t tmp_148 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_149 = tmp_15*(tmp_148 + tmp_34);
      real_t tmp_150 = tmp_145*tmp_4 + tmp_147*tmp_22 + tmp_149*tmp_29;
      real_t tmp_151 = tmp_145*tmp_37 + tmp_147*tmp_38 + tmp_149*tmp_39;
      real_t tmp_152 = tmp_145*tmp_41 + tmp_147*tmp_42 + tmp_149*tmp_43;
      real_t tmp_153 = -tmp_150 - tmp_151 - tmp_152 + 1;
      real_t tmp_154 = tmp_61*(tmp_144 + tmp_71);
      real_t tmp_155 = tmp_61*(tmp_146 + tmp_74);
      real_t tmp_156 = tmp_61*(tmp_148 + tmp_77);
      real_t tmp_157 = tmp_154*tmp_66 + tmp_155*tmp_73 + tmp_156*tmp_76;
      real_t tmp_158 = tmp_154*tmp_64 + tmp_155*tmp_80 + tmp_156*tmp_81;
      real_t tmp_159 = tmp_154*tmp_52 + tmp_155*tmp_83 + tmp_156*tmp_84;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 0.020848748529055869*tmp_87;
      real_t tmp_162 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_163 = tmp_15*(tmp_162 + tmp_20);
      real_t tmp_164 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_165 = tmp_15*(tmp_164 + tmp_27);
      real_t tmp_166 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_34);
      real_t tmp_168 = tmp_163*tmp_4 + tmp_165*tmp_22 + tmp_167*tmp_29;
      real_t tmp_169 = tmp_163*tmp_37 + tmp_165*tmp_38 + tmp_167*tmp_39;
      real_t tmp_170 = tmp_163*tmp_41 + tmp_165*tmp_42 + tmp_167*tmp_43;
      real_t tmp_171 = -tmp_168 - tmp_169 - tmp_170 + 1;
      real_t tmp_172 = tmp_61*(tmp_162 + tmp_71);
      real_t tmp_173 = tmp_61*(tmp_164 + tmp_74);
      real_t tmp_174 = tmp_61*(tmp_166 + tmp_77);
      real_t tmp_175 = tmp_172*tmp_66 + tmp_173*tmp_73 + tmp_174*tmp_76;
      real_t tmp_176 = tmp_172*tmp_64 + tmp_173*tmp_80 + tmp_174*tmp_81;
      real_t tmp_177 = tmp_172*tmp_52 + tmp_173*tmp_83 + tmp_174*tmp_84;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.019202922745021479*tmp_87;
      real_t tmp_180 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_181 = tmp_15*(tmp_180 + tmp_20);
      real_t tmp_182 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_183 = tmp_15*(tmp_182 + tmp_27);
      real_t tmp_184 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_185 = tmp_15*(tmp_184 + tmp_34);
      real_t tmp_186 = tmp_181*tmp_4 + tmp_183*tmp_22 + tmp_185*tmp_29;
      real_t tmp_187 = tmp_181*tmp_37 + tmp_183*tmp_38 + tmp_185*tmp_39;
      real_t tmp_188 = tmp_181*tmp_41 + tmp_183*tmp_42 + tmp_185*tmp_43;
      real_t tmp_189 = -tmp_186 - tmp_187 - tmp_188 + 1;
      real_t tmp_190 = tmp_61*(tmp_180 + tmp_71);
      real_t tmp_191 = tmp_61*(tmp_182 + tmp_74);
      real_t tmp_192 = tmp_61*(tmp_184 + tmp_77);
      real_t tmp_193 = tmp_190*tmp_66 + tmp_191*tmp_73 + tmp_192*tmp_76;
      real_t tmp_194 = tmp_190*tmp_64 + tmp_191*tmp_80 + tmp_192*tmp_81;
      real_t tmp_195 = tmp_190*tmp_52 + tmp_191*tmp_83 + tmp_192*tmp_84;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.020848748529055869*tmp_87;
      real_t tmp_198 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_199 = tmp_15*(tmp_198 + tmp_20);
      real_t tmp_200 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_201 = tmp_15*(tmp_200 + tmp_27);
      real_t tmp_202 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_203 = tmp_15*(tmp_202 + tmp_34);
      real_t tmp_204 = tmp_199*tmp_4 + tmp_201*tmp_22 + tmp_203*tmp_29;
      real_t tmp_205 = tmp_199*tmp_37 + tmp_201*tmp_38 + tmp_203*tmp_39;
      real_t tmp_206 = tmp_199*tmp_41 + tmp_201*tmp_42 + tmp_203*tmp_43;
      real_t tmp_207 = -tmp_204 - tmp_205 - tmp_206 + 1;
      real_t tmp_208 = tmp_61*(tmp_198 + tmp_71);
      real_t tmp_209 = tmp_61*(tmp_200 + tmp_74);
      real_t tmp_210 = tmp_61*(tmp_202 + tmp_77);
      real_t tmp_211 = tmp_208*tmp_66 + tmp_209*tmp_73 + tmp_210*tmp_76;
      real_t tmp_212 = tmp_208*tmp_64 + tmp_209*tmp_80 + tmp_210*tmp_81;
      real_t tmp_213 = tmp_208*tmp_52 + tmp_209*tmp_83 + tmp_210*tmp_84;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 0.019202922745021479*tmp_87;
      real_t tmp_216 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_217 = tmp_15*(tmp_20 + tmp_216);
      real_t tmp_218 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_219 = tmp_15*(tmp_218 + tmp_27);
      real_t tmp_220 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_221 = tmp_15*(tmp_220 + tmp_34);
      real_t tmp_222 = tmp_217*tmp_4 + tmp_219*tmp_22 + tmp_221*tmp_29;
      real_t tmp_223 = tmp_217*tmp_37 + tmp_219*tmp_38 + tmp_221*tmp_39;
      real_t tmp_224 = tmp_217*tmp_41 + tmp_219*tmp_42 + tmp_221*tmp_43;
      real_t tmp_225 = -tmp_222 - tmp_223 - tmp_224 + 1;
      real_t tmp_226 = tmp_61*(tmp_216 + tmp_71);
      real_t tmp_227 = tmp_61*(tmp_218 + tmp_74);
      real_t tmp_228 = tmp_61*(tmp_220 + tmp_77);
      real_t tmp_229 = tmp_226*tmp_66 + tmp_227*tmp_73 + tmp_228*tmp_76;
      real_t tmp_230 = tmp_226*tmp_64 + tmp_227*tmp_80 + tmp_228*tmp_81;
      real_t tmp_231 = tmp_226*tmp_52 + tmp_227*tmp_83 + tmp_228*tmp_84;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 0.020848748529055869*tmp_87;
      real_t tmp_234 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_235 = tmp_15*(tmp_20 + tmp_234);
      real_t tmp_236 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_237 = tmp_15*(tmp_236 + tmp_27);
      real_t tmp_238 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_239 = tmp_15*(tmp_238 + tmp_34);
      real_t tmp_240 = tmp_22*tmp_237 + tmp_235*tmp_4 + tmp_239*tmp_29;
      real_t tmp_241 = tmp_235*tmp_37 + tmp_237*tmp_38 + tmp_239*tmp_39;
      real_t tmp_242 = tmp_235*tmp_41 + tmp_237*tmp_42 + tmp_239*tmp_43;
      real_t tmp_243 = -tmp_240 - tmp_241 - tmp_242 + 1;
      real_t tmp_244 = tmp_61*(tmp_234 + tmp_71);
      real_t tmp_245 = tmp_61*(tmp_236 + tmp_74);
      real_t tmp_246 = tmp_61*(tmp_238 + tmp_77);
      real_t tmp_247 = tmp_244*tmp_66 + tmp_245*tmp_73 + tmp_246*tmp_76;
      real_t tmp_248 = tmp_244*tmp_64 + tmp_245*tmp_80 + tmp_246*tmp_81;
      real_t tmp_249 = tmp_244*tmp_52 + tmp_245*tmp_83 + tmp_246*tmp_84;
      real_t tmp_250 = -tmp_247 - tmp_248 - tmp_249 + 1;
      real_t tmp_251 = 0.019202922745021479*tmp_87;
      real_t tmp_252 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_253 = tmp_15*(tmp_20 + tmp_252);
      real_t tmp_254 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_255 = tmp_15*(tmp_254 + tmp_27);
      real_t tmp_256 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_257 = tmp_15*(tmp_256 + tmp_34);
      real_t tmp_258 = tmp_22*tmp_255 + tmp_253*tmp_4 + tmp_257*tmp_29;
      real_t tmp_259 = tmp_253*tmp_37 + tmp_255*tmp_38 + tmp_257*tmp_39;
      real_t tmp_260 = tmp_253*tmp_41 + tmp_255*tmp_42 + tmp_257*tmp_43;
      real_t tmp_261 = -tmp_258 - tmp_259 - tmp_260 + 1;
      real_t tmp_262 = tmp_61*(tmp_252 + tmp_71);
      real_t tmp_263 = tmp_61*(tmp_254 + tmp_74);
      real_t tmp_264 = tmp_61*(tmp_256 + tmp_77);
      real_t tmp_265 = tmp_262*tmp_66 + tmp_263*tmp_73 + tmp_264*tmp_76;
      real_t tmp_266 = tmp_262*tmp_64 + tmp_263*tmp_80 + tmp_264*tmp_81;
      real_t tmp_267 = tmp_262*tmp_52 + tmp_263*tmp_83 + tmp_264*tmp_84;
      real_t tmp_268 = -tmp_265 - tmp_266 - tmp_267 + 1;
      real_t tmp_269 = 0.020848748529055869*tmp_87;
      real_t tmp_270 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_271 = tmp_15*(tmp_20 + tmp_270);
      real_t tmp_272 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_273 = tmp_15*(tmp_27 + tmp_272);
      real_t tmp_274 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_275 = tmp_15*(tmp_274 + tmp_34);
      real_t tmp_276 = tmp_22*tmp_273 + tmp_271*tmp_4 + tmp_275*tmp_29;
      real_t tmp_277 = tmp_271*tmp_37 + tmp_273*tmp_38 + tmp_275*tmp_39;
      real_t tmp_278 = tmp_271*tmp_41 + tmp_273*tmp_42 + tmp_275*tmp_43;
      real_t tmp_279 = -tmp_276 - tmp_277 - tmp_278 + 1;
      real_t tmp_280 = tmp_61*(tmp_270 + tmp_71);
      real_t tmp_281 = tmp_61*(tmp_272 + tmp_74);
      real_t tmp_282 = tmp_61*(tmp_274 + tmp_77);
      real_t tmp_283 = tmp_280*tmp_66 + tmp_281*tmp_73 + tmp_282*tmp_76;
      real_t tmp_284 = tmp_280*tmp_64 + tmp_281*tmp_80 + tmp_282*tmp_81;
      real_t tmp_285 = tmp_280*tmp_52 + tmp_281*tmp_83 + tmp_282*tmp_84;
      real_t tmp_286 = -tmp_283 - tmp_284 - tmp_285 + 1;
      real_t tmp_287 = 0.019202922745021479*tmp_87;
      real_t tmp_288 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_289 = tmp_15*(tmp_20 + tmp_288);
      real_t tmp_290 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_291 = tmp_15*(tmp_27 + tmp_290);
      real_t tmp_292 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_293 = tmp_15*(tmp_292 + tmp_34);
      real_t tmp_294 = tmp_22*tmp_291 + tmp_289*tmp_4 + tmp_29*tmp_293;
      real_t tmp_295 = tmp_289*tmp_37 + tmp_291*tmp_38 + tmp_293*tmp_39;
      real_t tmp_296 = tmp_289*tmp_41 + tmp_291*tmp_42 + tmp_293*tmp_43;
      real_t tmp_297 = -tmp_294 - tmp_295 - tmp_296 + 1;
      real_t tmp_298 = tmp_61*(tmp_288 + tmp_71);
      real_t tmp_299 = tmp_61*(tmp_290 + tmp_74);
      real_t tmp_300 = tmp_61*(tmp_292 + tmp_77);
      real_t tmp_301 = tmp_298*tmp_66 + tmp_299*tmp_73 + tmp_300*tmp_76;
      real_t tmp_302 = tmp_298*tmp_64 + tmp_299*tmp_80 + tmp_300*tmp_81;
      real_t tmp_303 = tmp_298*tmp_52 + tmp_299*tmp_83 + tmp_300*tmp_84;
      real_t tmp_304 = -tmp_301 - tmp_302 - tmp_303 + 1;
      real_t tmp_305 = 0.042507265838595799*tmp_87;
      real_t tmp_306 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_307 = tmp_15*(tmp_20 + tmp_306);
      real_t tmp_308 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_309 = tmp_15*(tmp_27 + tmp_308);
      real_t tmp_310 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_311 = tmp_15*(tmp_310 + tmp_34);
      real_t tmp_312 = tmp_22*tmp_309 + tmp_29*tmp_311 + tmp_307*tmp_4;
      real_t tmp_313 = tmp_307*tmp_37 + tmp_309*tmp_38 + tmp_311*tmp_39;
      real_t tmp_314 = tmp_307*tmp_41 + tmp_309*tmp_42 + tmp_311*tmp_43;
      real_t tmp_315 = -tmp_312 - tmp_313 - tmp_314 + 1;
      real_t tmp_316 = tmp_61*(tmp_306 + tmp_71);
      real_t tmp_317 = tmp_61*(tmp_308 + tmp_74);
      real_t tmp_318 = tmp_61*(tmp_310 + tmp_77);
      real_t tmp_319 = tmp_316*tmp_66 + tmp_317*tmp_73 + tmp_318*tmp_76;
      real_t tmp_320 = tmp_316*tmp_64 + tmp_317*tmp_80 + tmp_318*tmp_81;
      real_t tmp_321 = tmp_316*tmp_52 + tmp_317*tmp_83 + tmp_318*tmp_84;
      real_t tmp_322 = -tmp_319 - tmp_320 - tmp_321 + 1;
      real_t tmp_323 = 0.020848748529055869*tmp_87;
      real_t tmp_324 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_325 = tmp_15*(tmp_20 + tmp_324);
      real_t tmp_326 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_327 = tmp_15*(tmp_27 + tmp_326);
      real_t tmp_328 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_329 = tmp_15*(tmp_328 + tmp_34);
      real_t tmp_330 = tmp_22*tmp_327 + tmp_29*tmp_329 + tmp_325*tmp_4;
      real_t tmp_331 = tmp_325*tmp_37 + tmp_327*tmp_38 + tmp_329*tmp_39;
      real_t tmp_332 = tmp_325*tmp_41 + tmp_327*tmp_42 + tmp_329*tmp_43;
      real_t tmp_333 = -tmp_330 - tmp_331 - tmp_332 + 1;
      real_t tmp_334 = tmp_61*(tmp_324 + tmp_71);
      real_t tmp_335 = tmp_61*(tmp_326 + tmp_74);
      real_t tmp_336 = tmp_61*(tmp_328 + tmp_77);
      real_t tmp_337 = tmp_334*tmp_66 + tmp_335*tmp_73 + tmp_336*tmp_76;
      real_t tmp_338 = tmp_334*tmp_64 + tmp_335*tmp_80 + tmp_336*tmp_81;
      real_t tmp_339 = tmp_334*tmp_52 + tmp_335*tmp_83 + tmp_336*tmp_84;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = 0.0068572537431980923*tmp_87;
      real_t tmp_342 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_343 = tmp_15*(tmp_20 + tmp_342);
      real_t tmp_344 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_345 = tmp_15*(tmp_27 + tmp_344);
      real_t tmp_346 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_347 = tmp_15*(tmp_34 + tmp_346);
      real_t tmp_348 = tmp_22*tmp_345 + tmp_29*tmp_347 + tmp_343*tmp_4;
      real_t tmp_349 = tmp_343*tmp_37 + tmp_345*tmp_38 + tmp_347*tmp_39;
      real_t tmp_350 = tmp_343*tmp_41 + tmp_345*tmp_42 + tmp_347*tmp_43;
      real_t tmp_351 = -tmp_348 - tmp_349 - tmp_350 + 1;
      real_t tmp_352 = tmp_61*(tmp_342 + tmp_71);
      real_t tmp_353 = tmp_61*(tmp_344 + tmp_74);
      real_t tmp_354 = tmp_61*(tmp_346 + tmp_77);
      real_t tmp_355 = tmp_352*tmp_66 + tmp_353*tmp_73 + tmp_354*tmp_76;
      real_t tmp_356 = tmp_352*tmp_64 + tmp_353*tmp_80 + tmp_354*tmp_81;
      real_t tmp_357 = tmp_352*tmp_52 + tmp_353*tmp_83 + tmp_354*tmp_84;
      real_t tmp_358 = -tmp_355 - tmp_356 - tmp_357 + 1;
      real_t tmp_359 = 0.037198804536718075*tmp_87;
      real_t tmp_360 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_361 = tmp_15*(tmp_20 + tmp_360);
      real_t tmp_362 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_363 = tmp_15*(tmp_27 + tmp_362);
      real_t tmp_364 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_365 = tmp_15*(tmp_34 + tmp_364);
      real_t tmp_366 = tmp_22*tmp_363 + tmp_29*tmp_365 + tmp_361*tmp_4;
      real_t tmp_367 = tmp_361*tmp_37 + tmp_363*tmp_38 + tmp_365*tmp_39;
      real_t tmp_368 = tmp_361*tmp_41 + tmp_363*tmp_42 + tmp_365*tmp_43;
      real_t tmp_369 = -tmp_366 - tmp_367 - tmp_368 + 1;
      real_t tmp_370 = tmp_61*(tmp_360 + tmp_71);
      real_t tmp_371 = tmp_61*(tmp_362 + tmp_74);
      real_t tmp_372 = tmp_61*(tmp_364 + tmp_77);
      real_t tmp_373 = tmp_370*tmp_66 + tmp_371*tmp_73 + tmp_372*tmp_76;
      real_t tmp_374 = tmp_370*tmp_64 + tmp_371*tmp_80 + tmp_372*tmp_81;
      real_t tmp_375 = tmp_370*tmp_52 + tmp_371*tmp_83 + tmp_372*tmp_84;
      real_t tmp_376 = -tmp_373 - tmp_374 - tmp_375 + 1;
      real_t tmp_377 = 0.042507265838595799*tmp_87;
      real_t tmp_378 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_379 = tmp_15*(tmp_20 + tmp_378);
      real_t tmp_380 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_381 = tmp_15*(tmp_27 + tmp_380);
      real_t tmp_382 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_383 = tmp_15*(tmp_34 + tmp_382);
      real_t tmp_384 = tmp_22*tmp_381 + tmp_29*tmp_383 + tmp_379*tmp_4;
      real_t tmp_385 = tmp_37*tmp_379 + tmp_38*tmp_381 + tmp_383*tmp_39;
      real_t tmp_386 = tmp_379*tmp_41 + tmp_381*tmp_42 + tmp_383*tmp_43;
      real_t tmp_387 = -tmp_384 - tmp_385 - tmp_386 + 1;
      real_t tmp_388 = tmp_61*(tmp_378 + tmp_71);
      real_t tmp_389 = tmp_61*(tmp_380 + tmp_74);
      real_t tmp_390 = tmp_61*(tmp_382 + tmp_77);
      real_t tmp_391 = tmp_388*tmp_66 + tmp_389*tmp_73 + tmp_390*tmp_76;
      real_t tmp_392 = tmp_388*tmp_64 + tmp_389*tmp_80 + tmp_390*tmp_81;
      real_t tmp_393 = tmp_388*tmp_52 + tmp_389*tmp_83 + tmp_390*tmp_84;
      real_t tmp_394 = -tmp_391 - tmp_392 - tmp_393 + 1;
      real_t tmp_395 = 0.0068572537431980923*tmp_87;
      real_t tmp_396 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_397 = tmp_15*(tmp_20 + tmp_396);
      real_t tmp_398 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_399 = tmp_15*(tmp_27 + tmp_398);
      real_t tmp_400 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_401 = tmp_15*(tmp_34 + tmp_400);
      real_t tmp_402 = tmp_22*tmp_399 + tmp_29*tmp_401 + tmp_397*tmp_4;
      real_t tmp_403 = tmp_37*tmp_397 + tmp_38*tmp_399 + tmp_39*tmp_401;
      real_t tmp_404 = tmp_397*tmp_41 + tmp_399*tmp_42 + tmp_401*tmp_43;
      real_t tmp_405 = -tmp_402 - tmp_403 - tmp_404 + 1;
      real_t tmp_406 = tmp_61*(tmp_396 + tmp_71);
      real_t tmp_407 = tmp_61*(tmp_398 + tmp_74);
      real_t tmp_408 = tmp_61*(tmp_400 + tmp_77);
      real_t tmp_409 = tmp_406*tmp_66 + tmp_407*tmp_73 + tmp_408*tmp_76;
      real_t tmp_410 = tmp_406*tmp_64 + tmp_407*tmp_80 + tmp_408*tmp_81;
      real_t tmp_411 = tmp_406*tmp_52 + tmp_407*tmp_83 + tmp_408*tmp_84;
      real_t tmp_412 = -tmp_409 - tmp_410 - tmp_411 + 1;
      real_t tmp_413 = 0.037198804536718075*tmp_87;
      real_t tmp_414 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_415 = tmp_15*(tmp_20 + tmp_414);
      real_t tmp_416 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_417 = tmp_15*(tmp_27 + tmp_416);
      real_t tmp_418 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_419 = tmp_15*(tmp_34 + tmp_418);
      real_t tmp_420 = tmp_22*tmp_417 + tmp_29*tmp_419 + tmp_4*tmp_415;
      real_t tmp_421 = tmp_37*tmp_415 + tmp_38*tmp_417 + tmp_39*tmp_419;
      real_t tmp_422 = tmp_41*tmp_415 + tmp_417*tmp_42 + tmp_419*tmp_43;
      real_t tmp_423 = -tmp_420 - tmp_421 - tmp_422 + 1;
      real_t tmp_424 = tmp_61*(tmp_414 + tmp_71);
      real_t tmp_425 = tmp_61*(tmp_416 + tmp_74);
      real_t tmp_426 = tmp_61*(tmp_418 + tmp_77);
      real_t tmp_427 = tmp_424*tmp_66 + tmp_425*tmp_73 + tmp_426*tmp_76;
      real_t tmp_428 = tmp_424*tmp_64 + tmp_425*tmp_80 + tmp_426*tmp_81;
      real_t tmp_429 = tmp_424*tmp_52 + tmp_425*tmp_83 + tmp_426*tmp_84;
      real_t tmp_430 = -tmp_427 - tmp_428 - tmp_429 + 1;
      real_t tmp_431 = 0.042507265838595799*tmp_87;
      real_t tmp_432 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_433 = tmp_15*(tmp_20 + tmp_432);
      real_t tmp_434 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_435 = tmp_15*(tmp_27 + tmp_434);
      real_t tmp_436 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_437 = tmp_15*(tmp_34 + tmp_436);
      real_t tmp_438 = tmp_22*tmp_435 + tmp_29*tmp_437 + tmp_4*tmp_433;
      real_t tmp_439 = tmp_37*tmp_433 + tmp_38*tmp_435 + tmp_39*tmp_437;
      real_t tmp_440 = tmp_41*tmp_433 + tmp_42*tmp_435 + tmp_43*tmp_437;
      real_t tmp_441 = -tmp_438 - tmp_439 - tmp_440 + 1;
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_71);
      real_t tmp_443 = tmp_61*(tmp_434 + tmp_74);
      real_t tmp_444 = tmp_61*(tmp_436 + tmp_77);
      real_t tmp_445 = tmp_442*tmp_66 + tmp_443*tmp_73 + tmp_444*tmp_76;
      real_t tmp_446 = tmp_442*tmp_64 + tmp_443*tmp_80 + tmp_444*tmp_81;
      real_t tmp_447 = tmp_442*tmp_52 + tmp_443*tmp_83 + tmp_444*tmp_84;
      real_t tmp_448 = -tmp_445 - tmp_446 - tmp_447 + 1;
      real_t tmp_449 = 0.019202922745021479*tmp_87;
      real_t tmp_450 = p_affine_13_0*tmp_67;
      real_t tmp_451 = p_affine_13_0*tmp_65;
      real_t tmp_452 = p_affine_13_0*tmp_63;
      real_t a_0_0 = tmp_107*(p_affine_13_2*tmp_106*tmp_70 - tmp_98*tmp_99) + tmp_125*(p_affine_13_2*tmp_124*tmp_70 - tmp_117*tmp_99) + tmp_143*(p_affine_13_2*tmp_142*tmp_70 - tmp_135*tmp_99) + tmp_161*(p_affine_13_2*tmp_160*tmp_70 - tmp_153*tmp_99) + tmp_179*(p_affine_13_2*tmp_178*tmp_70 - tmp_171*tmp_99) + tmp_197*(p_affine_13_2*tmp_196*tmp_70 - tmp_189*tmp_99) + tmp_215*(p_affine_13_2*tmp_214*tmp_70 - tmp_207*tmp_99) + tmp_233*(p_affine_13_2*tmp_232*tmp_70 - tmp_225*tmp_99) + tmp_251*(p_affine_13_2*tmp_250*tmp_70 - tmp_243*tmp_99) + tmp_269*(p_affine_13_2*tmp_268*tmp_70 - tmp_261*tmp_99) + tmp_287*(p_affine_13_2*tmp_286*tmp_70 - tmp_279*tmp_99) + tmp_305*(p_affine_13_2*tmp_304*tmp_70 - tmp_297*tmp_99) + tmp_323*(p_affine_13_2*tmp_322*tmp_70 - tmp_315*tmp_99) + tmp_341*(p_affine_13_2*tmp_340*tmp_70 - tmp_333*tmp_99) + tmp_359*(p_affine_13_2*tmp_358*tmp_70 - tmp_351*tmp_99) + tmp_377*(p_affine_13_2*tmp_376*tmp_70 - tmp_369*tmp_99) + tmp_395*(p_affine_13_2*tmp_394*tmp_70 - tmp_387*tmp_99) + tmp_413*(p_affine_13_2*tmp_412*tmp_70 - tmp_405*tmp_99) + tmp_431*(p_affine_13_2*tmp_430*tmp_70 - tmp_423*tmp_99) + tmp_449*(p_affine_13_2*tmp_448*tmp_70 - tmp_441*tmp_99) + tmp_88*(p_affine_13_2*tmp_70*tmp_86 - tmp_45*tmp_68);
      real_t a_0_1 = tmp_107*(p_affine_13_2*tmp_103*tmp_70 - tmp_450*tmp_98) + tmp_125*(p_affine_13_2*tmp_121*tmp_70 - tmp_117*tmp_450) + tmp_143*(p_affine_13_2*tmp_139*tmp_70 - tmp_135*tmp_450) + tmp_161*(p_affine_13_2*tmp_157*tmp_70 - tmp_153*tmp_450) + tmp_179*(p_affine_13_2*tmp_175*tmp_70 - tmp_171*tmp_450) + tmp_197*(p_affine_13_2*tmp_193*tmp_70 - tmp_189*tmp_450) + tmp_215*(p_affine_13_2*tmp_211*tmp_70 - tmp_207*tmp_450) + tmp_233*(p_affine_13_2*tmp_229*tmp_70 - tmp_225*tmp_450) + tmp_251*(p_affine_13_2*tmp_247*tmp_70 - tmp_243*tmp_450) + tmp_269*(p_affine_13_2*tmp_265*tmp_70 - tmp_261*tmp_450) + tmp_287*(p_affine_13_2*tmp_283*tmp_70 - tmp_279*tmp_450) + tmp_305*(p_affine_13_2*tmp_301*tmp_70 - tmp_297*tmp_450) + tmp_323*(p_affine_13_2*tmp_319*tmp_70 - tmp_315*tmp_450) + tmp_341*(p_affine_13_2*tmp_337*tmp_70 - tmp_333*tmp_450) + tmp_359*(p_affine_13_2*tmp_355*tmp_70 - tmp_351*tmp_450) + tmp_377*(p_affine_13_2*tmp_373*tmp_70 - tmp_369*tmp_450) + tmp_395*(p_affine_13_2*tmp_391*tmp_70 - tmp_387*tmp_450) + tmp_413*(p_affine_13_2*tmp_409*tmp_70 - tmp_405*tmp_450) + tmp_431*(p_affine_13_2*tmp_427*tmp_70 - tmp_423*tmp_450) + tmp_449*(p_affine_13_2*tmp_445*tmp_70 - tmp_441*tmp_450) + tmp_88*(p_affine_13_2*tmp_70*tmp_79 - tmp_45*tmp_67);
      real_t a_0_2 = tmp_107*(p_affine_13_2*tmp_104*tmp_70 - tmp_451*tmp_98) + tmp_125*(p_affine_13_2*tmp_122*tmp_70 - tmp_117*tmp_451) + tmp_143*(p_affine_13_2*tmp_140*tmp_70 - tmp_135*tmp_451) + tmp_161*(p_affine_13_2*tmp_158*tmp_70 - tmp_153*tmp_451) + tmp_179*(p_affine_13_2*tmp_176*tmp_70 - tmp_171*tmp_451) + tmp_197*(p_affine_13_2*tmp_194*tmp_70 - tmp_189*tmp_451) + tmp_215*(p_affine_13_2*tmp_212*tmp_70 - tmp_207*tmp_451) + tmp_233*(p_affine_13_2*tmp_230*tmp_70 - tmp_225*tmp_451) + tmp_251*(p_affine_13_2*tmp_248*tmp_70 - tmp_243*tmp_451) + tmp_269*(p_affine_13_2*tmp_266*tmp_70 - tmp_261*tmp_451) + tmp_287*(p_affine_13_2*tmp_284*tmp_70 - tmp_279*tmp_451) + tmp_305*(p_affine_13_2*tmp_302*tmp_70 - tmp_297*tmp_451) + tmp_323*(p_affine_13_2*tmp_320*tmp_70 - tmp_315*tmp_451) + tmp_341*(p_affine_13_2*tmp_338*tmp_70 - tmp_333*tmp_451) + tmp_359*(p_affine_13_2*tmp_356*tmp_70 - tmp_351*tmp_451) + tmp_377*(p_affine_13_2*tmp_374*tmp_70 - tmp_369*tmp_451) + tmp_395*(p_affine_13_2*tmp_392*tmp_70 - tmp_387*tmp_451) + tmp_413*(p_affine_13_2*tmp_410*tmp_70 - tmp_405*tmp_451) + tmp_431*(p_affine_13_2*tmp_428*tmp_70 - tmp_423*tmp_451) + tmp_449*(p_affine_13_2*tmp_446*tmp_70 - tmp_441*tmp_451) + tmp_88*(p_affine_13_2*tmp_70*tmp_82 - tmp_45*tmp_65);
      real_t a_0_3 = tmp_107*(p_affine_13_2*tmp_105*tmp_70 - tmp_452*tmp_98) + tmp_125*(p_affine_13_2*tmp_123*tmp_70 - tmp_117*tmp_452) + tmp_143*(p_affine_13_2*tmp_141*tmp_70 - tmp_135*tmp_452) + tmp_161*(p_affine_13_2*tmp_159*tmp_70 - tmp_153*tmp_452) + tmp_179*(p_affine_13_2*tmp_177*tmp_70 - tmp_171*tmp_452) + tmp_197*(p_affine_13_2*tmp_195*tmp_70 - tmp_189*tmp_452) + tmp_215*(p_affine_13_2*tmp_213*tmp_70 - tmp_207*tmp_452) + tmp_233*(p_affine_13_2*tmp_231*tmp_70 - tmp_225*tmp_452) + tmp_251*(p_affine_13_2*tmp_249*tmp_70 - tmp_243*tmp_452) + tmp_269*(p_affine_13_2*tmp_267*tmp_70 - tmp_261*tmp_452) + tmp_287*(p_affine_13_2*tmp_285*tmp_70 - tmp_279*tmp_452) + tmp_305*(p_affine_13_2*tmp_303*tmp_70 - tmp_297*tmp_452) + tmp_323*(p_affine_13_2*tmp_321*tmp_70 - tmp_315*tmp_452) + tmp_341*(p_affine_13_2*tmp_339*tmp_70 - tmp_333*tmp_452) + tmp_359*(p_affine_13_2*tmp_357*tmp_70 - tmp_351*tmp_452) + tmp_377*(p_affine_13_2*tmp_375*tmp_70 - tmp_369*tmp_452) + tmp_395*(p_affine_13_2*tmp_393*tmp_70 - tmp_387*tmp_452) + tmp_413*(p_affine_13_2*tmp_411*tmp_70 - tmp_405*tmp_452) + tmp_431*(p_affine_13_2*tmp_429*tmp_70 - tmp_423*tmp_452) + tmp_449*(p_affine_13_2*tmp_447*tmp_70 - tmp_441*tmp_452) + tmp_88*(p_affine_13_2*tmp_70*tmp_85 - tmp_45*tmp_63);
      real_t a_1_0 = tmp_107*(0.5*p_affine_13_2*tmp_106*tmp_15*tmp_29 - tmp_95*tmp_99) + tmp_125*(0.5*p_affine_13_2*tmp_124*tmp_15*tmp_29 - tmp_114*tmp_99) + tmp_143*(0.5*p_affine_13_2*tmp_142*tmp_15*tmp_29 - tmp_132*tmp_99) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_160*tmp_29 - tmp_150*tmp_99) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_178*tmp_29 - tmp_168*tmp_99) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_196*tmp_29 - tmp_186*tmp_99) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_214*tmp_29 - tmp_204*tmp_99) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_232*tmp_29 - tmp_222*tmp_99) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_250*tmp_29 - tmp_240*tmp_99) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_268*tmp_29 - tmp_258*tmp_99) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_286*tmp_29 - tmp_276*tmp_99) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_304 - tmp_294*tmp_99) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_322 - tmp_312*tmp_99) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_340 - tmp_330*tmp_99) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_358 - tmp_348*tmp_99) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_376 - tmp_366*tmp_99) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_394 - tmp_384*tmp_99) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_412 - tmp_402*tmp_99) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_430 - tmp_420*tmp_99) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_448 - tmp_438*tmp_99) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_86 - tmp_36*tmp_99);
      real_t a_1_1 = tmp_107*(0.5*p_affine_13_2*tmp_103*tmp_15*tmp_29 - tmp_450*tmp_95) + tmp_125*(0.5*p_affine_13_2*tmp_121*tmp_15*tmp_29 - tmp_114*tmp_450) + tmp_143*(0.5*p_affine_13_2*tmp_139*tmp_15*tmp_29 - tmp_132*tmp_450) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_157*tmp_29 - tmp_150*tmp_450) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_175*tmp_29 - tmp_168*tmp_450) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_193*tmp_29 - tmp_186*tmp_450) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_211*tmp_29 - tmp_204*tmp_450) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_229*tmp_29 - tmp_222*tmp_450) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_247*tmp_29 - tmp_240*tmp_450) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_265*tmp_29 - tmp_258*tmp_450) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_283*tmp_29 - tmp_276*tmp_450) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_301 - tmp_294*tmp_450) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_319 - tmp_312*tmp_450) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_337 - tmp_330*tmp_450) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_355 - tmp_348*tmp_450) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_373 - tmp_366*tmp_450) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_391 - tmp_384*tmp_450) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_409 - tmp_402*tmp_450) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_427 - tmp_420*tmp_450) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_445 - tmp_438*tmp_450) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_79 - tmp_36*tmp_450);
      real_t a_1_2 = tmp_107*(0.5*p_affine_13_2*tmp_104*tmp_15*tmp_29 - tmp_451*tmp_95) + tmp_125*(0.5*p_affine_13_2*tmp_122*tmp_15*tmp_29 - tmp_114*tmp_451) + tmp_143*(0.5*p_affine_13_2*tmp_140*tmp_15*tmp_29 - tmp_132*tmp_451) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_158*tmp_29 - tmp_150*tmp_451) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_176*tmp_29 - tmp_168*tmp_451) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_194*tmp_29 - tmp_186*tmp_451) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_212*tmp_29 - tmp_204*tmp_451) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_230*tmp_29 - tmp_222*tmp_451) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_248*tmp_29 - tmp_240*tmp_451) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_266*tmp_29 - tmp_258*tmp_451) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_284*tmp_29 - tmp_276*tmp_451) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_302 - tmp_294*tmp_451) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_320 - tmp_312*tmp_451) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_338 - tmp_330*tmp_451) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_356 - tmp_348*tmp_451) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_374 - tmp_366*tmp_451) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_392 - tmp_384*tmp_451) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_410 - tmp_402*tmp_451) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_428 - tmp_420*tmp_451) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_446 - tmp_438*tmp_451) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_82 - tmp_36*tmp_451);
      real_t a_1_3 = tmp_107*(0.5*p_affine_13_2*tmp_105*tmp_15*tmp_29 - tmp_452*tmp_95) + tmp_125*(0.5*p_affine_13_2*tmp_123*tmp_15*tmp_29 - tmp_114*tmp_452) + tmp_143*(0.5*p_affine_13_2*tmp_141*tmp_15*tmp_29 - tmp_132*tmp_452) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_159*tmp_29 - tmp_150*tmp_452) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_177*tmp_29 - tmp_168*tmp_452) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_195*tmp_29 - tmp_186*tmp_452) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_213*tmp_29 - tmp_204*tmp_452) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_231*tmp_29 - tmp_222*tmp_452) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_249*tmp_29 - tmp_240*tmp_452) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_267*tmp_29 - tmp_258*tmp_452) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_285*tmp_29 - tmp_276*tmp_452) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_303 - tmp_294*tmp_452) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_321 - tmp_312*tmp_452) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_339 - tmp_330*tmp_452) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_357 - tmp_348*tmp_452) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_375 - tmp_366*tmp_452) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_393 - tmp_384*tmp_452) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_411 - tmp_402*tmp_452) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_429 - tmp_420*tmp_452) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_447 - tmp_438*tmp_452) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_29*tmp_85 - tmp_36*tmp_452);
      real_t a_2_0 = tmp_107*(0.5*p_affine_13_2*tmp_106*tmp_15*tmp_39 - tmp_96*tmp_99) + tmp_125*(0.5*p_affine_13_2*tmp_124*tmp_15*tmp_39 - tmp_115*tmp_99) + tmp_143*(0.5*p_affine_13_2*tmp_142*tmp_15*tmp_39 - tmp_133*tmp_99) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_160*tmp_39 - tmp_151*tmp_99) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_178*tmp_39 - tmp_169*tmp_99) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_196*tmp_39 - tmp_187*tmp_99) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_214*tmp_39 - tmp_205*tmp_99) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_232*tmp_39 - tmp_223*tmp_99) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_250*tmp_39 - tmp_241*tmp_99) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_268*tmp_39 - tmp_259*tmp_99) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_286*tmp_39 - tmp_277*tmp_99) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_304*tmp_39 - tmp_295*tmp_99) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_322*tmp_39 - tmp_313*tmp_99) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_340*tmp_39 - tmp_331*tmp_99) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_358*tmp_39 - tmp_349*tmp_99) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_376*tmp_39 - tmp_367*tmp_99) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_394 - tmp_385*tmp_99) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_412 - tmp_403*tmp_99) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_430 - tmp_421*tmp_99) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_448 - tmp_439*tmp_99) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_86 - tmp_40*tmp_99);
      real_t a_2_1 = tmp_107*(0.5*p_affine_13_2*tmp_103*tmp_15*tmp_39 - tmp_450*tmp_96) + tmp_125*(0.5*p_affine_13_2*tmp_121*tmp_15*tmp_39 - tmp_115*tmp_450) + tmp_143*(0.5*p_affine_13_2*tmp_139*tmp_15*tmp_39 - tmp_133*tmp_450) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_157*tmp_39 - tmp_151*tmp_450) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_175*tmp_39 - tmp_169*tmp_450) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_193*tmp_39 - tmp_187*tmp_450) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_211*tmp_39 - tmp_205*tmp_450) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_229*tmp_39 - tmp_223*tmp_450) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_247*tmp_39 - tmp_241*tmp_450) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_265*tmp_39 - tmp_259*tmp_450) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_283*tmp_39 - tmp_277*tmp_450) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_301*tmp_39 - tmp_295*tmp_450) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_319*tmp_39 - tmp_313*tmp_450) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_337*tmp_39 - tmp_331*tmp_450) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_355*tmp_39 - tmp_349*tmp_450) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_373*tmp_39 - tmp_367*tmp_450) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_391 - tmp_385*tmp_450) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_409 - tmp_403*tmp_450) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_427 - tmp_421*tmp_450) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_445 - tmp_439*tmp_450) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_79 - tmp_40*tmp_450);
      real_t a_2_2 = tmp_107*(0.5*p_affine_13_2*tmp_104*tmp_15*tmp_39 - tmp_451*tmp_96) + tmp_125*(0.5*p_affine_13_2*tmp_122*tmp_15*tmp_39 - tmp_115*tmp_451) + tmp_143*(0.5*p_affine_13_2*tmp_140*tmp_15*tmp_39 - tmp_133*tmp_451) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_158*tmp_39 - tmp_151*tmp_451) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_176*tmp_39 - tmp_169*tmp_451) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_194*tmp_39 - tmp_187*tmp_451) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_212*tmp_39 - tmp_205*tmp_451) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_230*tmp_39 - tmp_223*tmp_451) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_248*tmp_39 - tmp_241*tmp_451) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_266*tmp_39 - tmp_259*tmp_451) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_284*tmp_39 - tmp_277*tmp_451) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_302*tmp_39 - tmp_295*tmp_451) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_320*tmp_39 - tmp_313*tmp_451) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_338*tmp_39 - tmp_331*tmp_451) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_356*tmp_39 - tmp_349*tmp_451) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_374*tmp_39 - tmp_367*tmp_451) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_392 - tmp_385*tmp_451) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_410 - tmp_403*tmp_451) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_428 - tmp_421*tmp_451) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_446 - tmp_439*tmp_451) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_82 - tmp_40*tmp_451);
      real_t a_2_3 = tmp_107*(0.5*p_affine_13_2*tmp_105*tmp_15*tmp_39 - tmp_452*tmp_96) + tmp_125*(0.5*p_affine_13_2*tmp_123*tmp_15*tmp_39 - tmp_115*tmp_452) + tmp_143*(0.5*p_affine_13_2*tmp_141*tmp_15*tmp_39 - tmp_133*tmp_452) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_159*tmp_39 - tmp_151*tmp_452) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_177*tmp_39 - tmp_169*tmp_452) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_195*tmp_39 - tmp_187*tmp_452) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_213*tmp_39 - tmp_205*tmp_452) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_231*tmp_39 - tmp_223*tmp_452) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_249*tmp_39 - tmp_241*tmp_452) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_267*tmp_39 - tmp_259*tmp_452) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_285*tmp_39 - tmp_277*tmp_452) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_303*tmp_39 - tmp_295*tmp_452) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_321*tmp_39 - tmp_313*tmp_452) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_339*tmp_39 - tmp_331*tmp_452) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_357*tmp_39 - tmp_349*tmp_452) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_375*tmp_39 - tmp_367*tmp_452) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_393 - tmp_385*tmp_452) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_411 - tmp_403*tmp_452) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_429 - tmp_421*tmp_452) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_447 - tmp_439*tmp_452) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_39*tmp_85 - tmp_40*tmp_452);
      real_t a_3_0 = tmp_107*(0.5*p_affine_13_2*tmp_106*tmp_15*tmp_43 - tmp_97*tmp_99) + tmp_125*(0.5*p_affine_13_2*tmp_124*tmp_15*tmp_43 - tmp_116*tmp_99) + tmp_143*(0.5*p_affine_13_2*tmp_142*tmp_15*tmp_43 - tmp_134*tmp_99) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_160*tmp_43 - tmp_152*tmp_99) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_178*tmp_43 - tmp_170*tmp_99) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_196*tmp_43 - tmp_188*tmp_99) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_214*tmp_43 - tmp_206*tmp_99) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_232*tmp_43 - tmp_224*tmp_99) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_250*tmp_43 - tmp_242*tmp_99) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_268*tmp_43 - tmp_260*tmp_99) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_286*tmp_43 - tmp_278*tmp_99) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_304*tmp_43 - tmp_296*tmp_99) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_322*tmp_43 - tmp_314*tmp_99) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_340*tmp_43 - tmp_332*tmp_99) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_358*tmp_43 - tmp_350*tmp_99) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_376*tmp_43 - tmp_368*tmp_99) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_394*tmp_43 - tmp_386*tmp_99) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_412*tmp_43 - tmp_404*tmp_99) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_430 - tmp_422*tmp_99) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_448 - tmp_440*tmp_99) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_86 - tmp_44*tmp_99);
      real_t a_3_1 = tmp_107*(0.5*p_affine_13_2*tmp_103*tmp_15*tmp_43 - tmp_450*tmp_97) + tmp_125*(0.5*p_affine_13_2*tmp_121*tmp_15*tmp_43 - tmp_116*tmp_450) + tmp_143*(0.5*p_affine_13_2*tmp_139*tmp_15*tmp_43 - tmp_134*tmp_450) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_157*tmp_43 - tmp_152*tmp_450) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_175*tmp_43 - tmp_170*tmp_450) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_193*tmp_43 - tmp_188*tmp_450) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_211*tmp_43 - tmp_206*tmp_450) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_229*tmp_43 - tmp_224*tmp_450) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_247*tmp_43 - tmp_242*tmp_450) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_265*tmp_43 - tmp_260*tmp_450) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_283*tmp_43 - tmp_278*tmp_450) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_301*tmp_43 - tmp_296*tmp_450) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_319*tmp_43 - tmp_314*tmp_450) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_337*tmp_43 - tmp_332*tmp_450) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_355*tmp_43 - tmp_350*tmp_450) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_373*tmp_43 - tmp_368*tmp_450) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_391*tmp_43 - tmp_386*tmp_450) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_409*tmp_43 - tmp_404*tmp_450) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_427*tmp_43 - tmp_422*tmp_450) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_445 - tmp_440*tmp_450) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_79 - tmp_44*tmp_450);
      real_t a_3_2 = tmp_107*(0.5*p_affine_13_2*tmp_104*tmp_15*tmp_43 - tmp_451*tmp_97) + tmp_125*(0.5*p_affine_13_2*tmp_122*tmp_15*tmp_43 - tmp_116*tmp_451) + tmp_143*(0.5*p_affine_13_2*tmp_140*tmp_15*tmp_43 - tmp_134*tmp_451) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_158*tmp_43 - tmp_152*tmp_451) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_176*tmp_43 - tmp_170*tmp_451) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_194*tmp_43 - tmp_188*tmp_451) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_212*tmp_43 - tmp_206*tmp_451) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_230*tmp_43 - tmp_224*tmp_451) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_248*tmp_43 - tmp_242*tmp_451) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_266*tmp_43 - tmp_260*tmp_451) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_284*tmp_43 - tmp_278*tmp_451) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_302*tmp_43 - tmp_296*tmp_451) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_320*tmp_43 - tmp_314*tmp_451) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_338*tmp_43 - tmp_332*tmp_451) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_356*tmp_43 - tmp_350*tmp_451) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_374*tmp_43 - tmp_368*tmp_451) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_392*tmp_43 - tmp_386*tmp_451) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_410*tmp_43 - tmp_404*tmp_451) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_428*tmp_43 - tmp_422*tmp_451) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_446 - tmp_440*tmp_451) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_82 - tmp_44*tmp_451);
      real_t a_3_3 = tmp_107*(0.5*p_affine_13_2*tmp_105*tmp_15*tmp_43 - tmp_452*tmp_97) + tmp_125*(0.5*p_affine_13_2*tmp_123*tmp_15*tmp_43 - tmp_116*tmp_452) + tmp_143*(0.5*p_affine_13_2*tmp_141*tmp_15*tmp_43 - tmp_134*tmp_452) + tmp_161*(0.5*p_affine_13_2*tmp_15*tmp_159*tmp_43 - tmp_152*tmp_452) + tmp_179*(0.5*p_affine_13_2*tmp_15*tmp_177*tmp_43 - tmp_170*tmp_452) + tmp_197*(0.5*p_affine_13_2*tmp_15*tmp_195*tmp_43 - tmp_188*tmp_452) + tmp_215*(0.5*p_affine_13_2*tmp_15*tmp_213*tmp_43 - tmp_206*tmp_452) + tmp_233*(0.5*p_affine_13_2*tmp_15*tmp_231*tmp_43 - tmp_224*tmp_452) + tmp_251*(0.5*p_affine_13_2*tmp_15*tmp_249*tmp_43 - tmp_242*tmp_452) + tmp_269*(0.5*p_affine_13_2*tmp_15*tmp_267*tmp_43 - tmp_260*tmp_452) + tmp_287*(0.5*p_affine_13_2*tmp_15*tmp_285*tmp_43 - tmp_278*tmp_452) + tmp_305*(0.5*p_affine_13_2*tmp_15*tmp_303*tmp_43 - tmp_296*tmp_452) + tmp_323*(0.5*p_affine_13_2*tmp_15*tmp_321*tmp_43 - tmp_314*tmp_452) + tmp_341*(0.5*p_affine_13_2*tmp_15*tmp_339*tmp_43 - tmp_332*tmp_452) + tmp_359*(0.5*p_affine_13_2*tmp_15*tmp_357*tmp_43 - tmp_350*tmp_452) + tmp_377*(0.5*p_affine_13_2*tmp_15*tmp_375*tmp_43 - tmp_368*tmp_452) + tmp_395*(0.5*p_affine_13_2*tmp_15*tmp_393*tmp_43 - tmp_386*tmp_452) + tmp_413*(0.5*p_affine_13_2*tmp_15*tmp_411*tmp_43 - tmp_404*tmp_452) + tmp_431*(0.5*p_affine_13_2*tmp_15*tmp_429*tmp_43 - tmp_422*tmp_452) + tmp_449*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_447 - tmp_440*tmp_452) + tmp_88*(0.5*p_affine_13_2*tmp_15*tmp_43*tmp_85 - tmp_44*tmp_452);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 0.5*tmp_15;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_43*tmp_6;
      real_t tmp_47 = p_affine_13_0*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_40*tmp_43;
      real_t tmp_49 = tmp_36*tmp_43;
      real_t tmp_50 = tmp_27*tmp_43;
      real_t tmp_51 = p_affine_13_2*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 2.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_57 = tmp_21*tmp_55 + tmp_27*tmp_56 + tmp_54*tmp_6;
      real_t tmp_58 = tmp_34*tmp_54 + tmp_35*tmp_55 + tmp_36*tmp_56;
      real_t tmp_59 = tmp_38*tmp_54 + tmp_39*tmp_55 + tmp_40*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 0.037198804536718075*tmp_52;
      real_t tmp_62 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_6*tmp_62;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64;
      real_t tmp_68 = -tmp_65 - tmp_66 - tmp_67 + 1;
      real_t tmp_69 = 0.020848748529055869*tmp_52;
      real_t tmp_70 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_71 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_72 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_73 = tmp_21*tmp_71 + tmp_27*tmp_72 + tmp_6*tmp_70;
      real_t tmp_74 = tmp_34*tmp_70 + tmp_35*tmp_71 + tmp_36*tmp_72;
      real_t tmp_75 = tmp_38*tmp_70 + tmp_39*tmp_71 + tmp_40*tmp_72;
      real_t tmp_76 = -tmp_73 - tmp_74 - tmp_75 + 1;
      real_t tmp_77 = 0.019202922745021479*tmp_52;
      real_t tmp_78 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_6*tmp_78;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80;
      real_t tmp_84 = -tmp_81 - tmp_82 - tmp_83 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_52;
      real_t tmp_86 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_87 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_88 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_89 = tmp_21*tmp_87 + tmp_27*tmp_88 + tmp_6*tmp_86;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_93 = 0.019202922745021479*tmp_52;
      real_t tmp_94 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_95 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_96 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_97 = tmp_21*tmp_95 + tmp_27*tmp_96 + tmp_6*tmp_94;
      real_t tmp_98 = tmp_34*tmp_94 + tmp_35*tmp_95 + tmp_36*tmp_96;
      real_t tmp_99 = tmp_38*tmp_94 + tmp_39*tmp_95 + tmp_40*tmp_96;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_52;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_6 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_102*tmp_34 + tmp_103*tmp_35 + tmp_104*tmp_36;
      real_t tmp_107 = tmp_102*tmp_38 + tmp_103*tmp_39 + tmp_104*tmp_40;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = 0.019202922745021479*tmp_52;
      real_t tmp_110 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_111 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_112 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_113 = tmp_110*tmp_6 + tmp_111*tmp_21 + tmp_112*tmp_27;
      real_t tmp_114 = tmp_110*tmp_34 + tmp_111*tmp_35 + tmp_112*tmp_36;
      real_t tmp_115 = tmp_110*tmp_38 + tmp_111*tmp_39 + tmp_112*tmp_40;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = 0.020848748529055869*tmp_52;
      real_t tmp_118 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.019202922745021479*tmp_52;
      real_t tmp_126 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_127 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_128 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_129 = tmp_126*tmp_6 + tmp_127*tmp_21 + tmp_128*tmp_27;
      real_t tmp_130 = tmp_126*tmp_34 + tmp_127*tmp_35 + tmp_128*tmp_36;
      real_t tmp_131 = tmp_126*tmp_38 + tmp_127*tmp_39 + tmp_128*tmp_40;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 0.020848748529055869*tmp_52;
      real_t tmp_134 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_6 + tmp_135*tmp_21 + tmp_136*tmp_27;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40;
      real_t tmp_140 = -tmp_137 - tmp_138 - tmp_139 + 1;
      real_t tmp_141 = 0.019202922745021479*tmp_52;
      real_t tmp_142 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_143 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_144 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_145 = tmp_142*tmp_6 + tmp_143*tmp_21 + tmp_144*tmp_27;
      real_t tmp_146 = tmp_142*tmp_34 + tmp_143*tmp_35 + tmp_144*tmp_36;
      real_t tmp_147 = tmp_142*tmp_38 + tmp_143*tmp_39 + tmp_144*tmp_40;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = 0.042507265838595799*tmp_52;
      real_t tmp_150 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_6 + tmp_151*tmp_21 + tmp_152*tmp_27;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_52;
      real_t tmp_158 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_6 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = 0.0068572537431980923*tmp_52;
      real_t tmp_166 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_167 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_168 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_169 = tmp_166*tmp_6 + tmp_167*tmp_21 + tmp_168*tmp_27;
      real_t tmp_170 = tmp_166*tmp_34 + tmp_167*tmp_35 + tmp_168*tmp_36;
      real_t tmp_171 = tmp_166*tmp_38 + tmp_167*tmp_39 + tmp_168*tmp_40;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = 0.037198804536718075*tmp_52;
      real_t tmp_174 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_175 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_176 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_177 = tmp_174*tmp_6 + tmp_175*tmp_21 + tmp_176*tmp_27;
      real_t tmp_178 = tmp_174*tmp_34 + tmp_175*tmp_35 + tmp_176*tmp_36;
      real_t tmp_179 = tmp_174*tmp_38 + tmp_175*tmp_39 + tmp_176*tmp_40;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = 0.042507265838595799*tmp_52;
      real_t tmp_182 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_183 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_184 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_185 = tmp_182*tmp_6 + tmp_183*tmp_21 + tmp_184*tmp_27;
      real_t tmp_186 = tmp_182*tmp_34 + tmp_183*tmp_35 + tmp_184*tmp_36;
      real_t tmp_187 = tmp_182*tmp_38 + tmp_183*tmp_39 + tmp_184*tmp_40;
      real_t tmp_188 = -tmp_185 - tmp_186 - tmp_187 + 1;
      real_t tmp_189 = 0.0068572537431980923*tmp_52;
      real_t tmp_190 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.037198804536718075*tmp_52;
      real_t tmp_198 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_199 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_200 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_201 = tmp_198*tmp_6 + tmp_199*tmp_21 + tmp_200*tmp_27;
      real_t tmp_202 = tmp_198*tmp_34 + tmp_199*tmp_35 + tmp_200*tmp_36;
      real_t tmp_203 = tmp_198*tmp_38 + tmp_199*tmp_39 + tmp_200*tmp_40;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 0.042507265838595799*tmp_52;
      real_t tmp_206 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_6 + tmp_207*tmp_21 + tmp_208*tmp_27;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = 0.019202922745021479*tmp_52;
      real_t tmp_214 = p_affine_13_0*tmp_46;
      real_t tmp_215 = p_affine_13_0*tmp_45;
      real_t tmp_216 = p_affine_13_0*tmp_44;
      real_t tmp_217 = p_affine_13_2*tmp_50;
      real_t tmp_218 = p_affine_13_2*tmp_49;
      real_t tmp_219 = p_affine_13_2*tmp_48;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_47 - tmp_100*tmp_51) + tmp_109*(-tmp_108*tmp_47 - tmp_108*tmp_51) + tmp_117*(-tmp_116*tmp_47 - tmp_116*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_133*(-tmp_132*tmp_47 - tmp_132*tmp_51) + tmp_141*(-tmp_140*tmp_47 - tmp_140*tmp_51) + tmp_149*(-tmp_148*tmp_47 - tmp_148*tmp_51) + tmp_157*(-tmp_156*tmp_47 - tmp_156*tmp_51) + tmp_165*(-tmp_164*tmp_47 - tmp_164*tmp_51) + tmp_173*(-tmp_172*tmp_47 - tmp_172*tmp_51) + tmp_181*(-tmp_180*tmp_47 - tmp_180*tmp_51) + tmp_189*(-tmp_188*tmp_47 - tmp_188*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_205*(-tmp_204*tmp_47 - tmp_204*tmp_51) + tmp_213*(-tmp_212*tmp_47 - tmp_212*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_61*(-tmp_47*tmp_60 - tmp_51*tmp_60) + tmp_69*(-tmp_47*tmp_68 - tmp_51*tmp_68) + tmp_77*(-tmp_47*tmp_76 - tmp_51*tmp_76) + tmp_85*(-tmp_47*tmp_84 - tmp_51*tmp_84) + tmp_93*(-tmp_47*tmp_92 - tmp_51*tmp_92);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_214 - tmp_51*tmp_97) + tmp_109*(-tmp_105*tmp_51 - tmp_108*tmp_214) + tmp_117*(-tmp_113*tmp_51 - tmp_116*tmp_214) + tmp_125*(-tmp_121*tmp_51 - tmp_124*tmp_214) + tmp_133*(-tmp_129*tmp_51 - tmp_132*tmp_214) + tmp_141*(-tmp_137*tmp_51 - tmp_140*tmp_214) + tmp_149*(-tmp_145*tmp_51 - tmp_148*tmp_214) + tmp_157*(-tmp_153*tmp_51 - tmp_156*tmp_214) + tmp_165*(-tmp_161*tmp_51 - tmp_164*tmp_214) + tmp_173*(-tmp_169*tmp_51 - tmp_172*tmp_214) + tmp_181*(-tmp_177*tmp_51 - tmp_180*tmp_214) + tmp_189*(-tmp_185*tmp_51 - tmp_188*tmp_214) + tmp_197*(-tmp_193*tmp_51 - tmp_196*tmp_214) + tmp_205*(-tmp_201*tmp_51 - tmp_204*tmp_214) + tmp_213*(-tmp_209*tmp_51 - tmp_212*tmp_214) + tmp_53*(-tmp_214*tmp_42 - tmp_33*tmp_51) + tmp_61*(-tmp_214*tmp_60 - tmp_51*tmp_57) + tmp_69*(-tmp_214*tmp_68 - tmp_51*tmp_65) + tmp_77*(-tmp_214*tmp_76 - tmp_51*tmp_73) + tmp_85*(-tmp_214*tmp_84 - tmp_51*tmp_81) + tmp_93*(-tmp_214*tmp_92 - tmp_51*tmp_89);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_215 - tmp_51*tmp_98) + tmp_109*(-tmp_106*tmp_51 - tmp_108*tmp_215) + tmp_117*(-tmp_114*tmp_51 - tmp_116*tmp_215) + tmp_125*(-tmp_122*tmp_51 - tmp_124*tmp_215) + tmp_133*(-tmp_130*tmp_51 - tmp_132*tmp_215) + tmp_141*(-tmp_138*tmp_51 - tmp_140*tmp_215) + tmp_149*(-tmp_146*tmp_51 - tmp_148*tmp_215) + tmp_157*(-tmp_154*tmp_51 - tmp_156*tmp_215) + tmp_165*(-tmp_162*tmp_51 - tmp_164*tmp_215) + tmp_173*(-tmp_170*tmp_51 - tmp_172*tmp_215) + tmp_181*(-tmp_178*tmp_51 - tmp_180*tmp_215) + tmp_189*(-tmp_186*tmp_51 - tmp_188*tmp_215) + tmp_197*(-tmp_194*tmp_51 - tmp_196*tmp_215) + tmp_205*(-tmp_202*tmp_51 - tmp_204*tmp_215) + tmp_213*(-tmp_210*tmp_51 - tmp_212*tmp_215) + tmp_53*(-tmp_215*tmp_42 - tmp_37*tmp_51) + tmp_61*(-tmp_215*tmp_60 - tmp_51*tmp_58) + tmp_69*(-tmp_215*tmp_68 - tmp_51*tmp_66) + tmp_77*(-tmp_215*tmp_76 - tmp_51*tmp_74) + tmp_85*(-tmp_215*tmp_84 - tmp_51*tmp_82) + tmp_93*(-tmp_215*tmp_92 - tmp_51*tmp_90);
      real_t a_0_3 = tmp_101*(-tmp_100*tmp_216 - tmp_51*tmp_99) + tmp_109*(-tmp_107*tmp_51 - tmp_108*tmp_216) + tmp_117*(-tmp_115*tmp_51 - tmp_116*tmp_216) + tmp_125*(-tmp_123*tmp_51 - tmp_124*tmp_216) + tmp_133*(-tmp_131*tmp_51 - tmp_132*tmp_216) + tmp_141*(-tmp_139*tmp_51 - tmp_140*tmp_216) + tmp_149*(-tmp_147*tmp_51 - tmp_148*tmp_216) + tmp_157*(-tmp_155*tmp_51 - tmp_156*tmp_216) + tmp_165*(-tmp_163*tmp_51 - tmp_164*tmp_216) + tmp_173*(-tmp_171*tmp_51 - tmp_172*tmp_216) + tmp_181*(-tmp_179*tmp_51 - tmp_180*tmp_216) + tmp_189*(-tmp_187*tmp_51 - tmp_188*tmp_216) + tmp_197*(-tmp_195*tmp_51 - tmp_196*tmp_216) + tmp_205*(-tmp_203*tmp_51 - tmp_204*tmp_216) + tmp_213*(-tmp_211*tmp_51 - tmp_212*tmp_216) + tmp_53*(-tmp_216*tmp_42 - tmp_41*tmp_51) + tmp_61*(-tmp_216*tmp_60 - tmp_51*tmp_59) + tmp_69*(-tmp_216*tmp_68 - tmp_51*tmp_67) + tmp_77*(-tmp_216*tmp_76 - tmp_51*tmp_75) + tmp_85*(-tmp_216*tmp_84 - tmp_51*tmp_83) + tmp_93*(-tmp_216*tmp_92 - tmp_51*tmp_91);
      real_t a_1_0 = tmp_101*(-tmp_100*tmp_217 - tmp_47*tmp_97) + tmp_109*(-tmp_105*tmp_47 - tmp_108*tmp_217) + tmp_117*(-tmp_113*tmp_47 - tmp_116*tmp_217) + tmp_125*(-tmp_121*tmp_47 - tmp_124*tmp_217) + tmp_133*(-tmp_129*tmp_47 - tmp_132*tmp_217) + tmp_141*(-tmp_137*tmp_47 - tmp_140*tmp_217) + tmp_149*(-tmp_145*tmp_47 - tmp_148*tmp_217) + tmp_157*(-tmp_153*tmp_47 - tmp_156*tmp_217) + tmp_165*(-tmp_161*tmp_47 - tmp_164*tmp_217) + tmp_173*(-tmp_169*tmp_47 - tmp_172*tmp_217) + tmp_181*(-tmp_177*tmp_47 - tmp_180*tmp_217) + tmp_189*(-tmp_185*tmp_47 - tmp_188*tmp_217) + tmp_197*(-tmp_193*tmp_47 - tmp_196*tmp_217) + tmp_205*(-tmp_201*tmp_47 - tmp_204*tmp_217) + tmp_213*(-tmp_209*tmp_47 - tmp_212*tmp_217) + tmp_53*(-tmp_217*tmp_42 - tmp_33*tmp_47) + tmp_61*(-tmp_217*tmp_60 - tmp_47*tmp_57) + tmp_69*(-tmp_217*tmp_68 - tmp_47*tmp_65) + tmp_77*(-tmp_217*tmp_76 - tmp_47*tmp_73) + tmp_85*(-tmp_217*tmp_84 - tmp_47*tmp_81) + tmp_93*(-tmp_217*tmp_92 - tmp_47*tmp_89);
      real_t a_1_1 = tmp_101*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_109*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_117*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_125*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_133*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_141*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_149*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_157*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_165*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_173*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_181*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_189*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_197*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_205*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_213*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_53*(-tmp_214*tmp_33 - tmp_217*tmp_33) + tmp_61*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_69*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_77*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_85*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_93*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_1_2 = tmp_101*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_109*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_117*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_125*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_133*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_141*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_149*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_157*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_165*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_173*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_181*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_189*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_197*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_205*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_213*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_53*(-tmp_215*tmp_33 - tmp_217*tmp_37) + tmp_61*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_69*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_77*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_85*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_93*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_1_3 = tmp_101*(-tmp_216*tmp_97 - tmp_217*tmp_99) + tmp_109*(-tmp_105*tmp_216 - tmp_107*tmp_217) + tmp_117*(-tmp_113*tmp_216 - tmp_115*tmp_217) + tmp_125*(-tmp_121*tmp_216 - tmp_123*tmp_217) + tmp_133*(-tmp_129*tmp_216 - tmp_131*tmp_217) + tmp_141*(-tmp_137*tmp_216 - tmp_139*tmp_217) + tmp_149*(-tmp_145*tmp_216 - tmp_147*tmp_217) + tmp_157*(-tmp_153*tmp_216 - tmp_155*tmp_217) + tmp_165*(-tmp_161*tmp_216 - tmp_163*tmp_217) + tmp_173*(-tmp_169*tmp_216 - tmp_171*tmp_217) + tmp_181*(-tmp_177*tmp_216 - tmp_179*tmp_217) + tmp_189*(-tmp_185*tmp_216 - tmp_187*tmp_217) + tmp_197*(-tmp_193*tmp_216 - tmp_195*tmp_217) + tmp_205*(-tmp_201*tmp_216 - tmp_203*tmp_217) + tmp_213*(-tmp_209*tmp_216 - tmp_211*tmp_217) + tmp_53*(-tmp_216*tmp_33 - tmp_217*tmp_41) + tmp_61*(-tmp_216*tmp_57 - tmp_217*tmp_59) + tmp_69*(-tmp_216*tmp_65 - tmp_217*tmp_67) + tmp_77*(-tmp_216*tmp_73 - tmp_217*tmp_75) + tmp_85*(-tmp_216*tmp_81 - tmp_217*tmp_83) + tmp_93*(-tmp_216*tmp_89 - tmp_217*tmp_91);
      real_t a_2_0 = tmp_101*(-tmp_100*tmp_218 - tmp_47*tmp_98) + tmp_109*(-tmp_106*tmp_47 - tmp_108*tmp_218) + tmp_117*(-tmp_114*tmp_47 - tmp_116*tmp_218) + tmp_125*(-tmp_122*tmp_47 - tmp_124*tmp_218) + tmp_133*(-tmp_130*tmp_47 - tmp_132*tmp_218) + tmp_141*(-tmp_138*tmp_47 - tmp_140*tmp_218) + tmp_149*(-tmp_146*tmp_47 - tmp_148*tmp_218) + tmp_157*(-tmp_154*tmp_47 - tmp_156*tmp_218) + tmp_165*(-tmp_162*tmp_47 - tmp_164*tmp_218) + tmp_173*(-tmp_170*tmp_47 - tmp_172*tmp_218) + tmp_181*(-tmp_178*tmp_47 - tmp_180*tmp_218) + tmp_189*(-tmp_186*tmp_47 - tmp_188*tmp_218) + tmp_197*(-tmp_194*tmp_47 - tmp_196*tmp_218) + tmp_205*(-tmp_202*tmp_47 - tmp_204*tmp_218) + tmp_213*(-tmp_210*tmp_47 - tmp_212*tmp_218) + tmp_53*(-tmp_218*tmp_42 - tmp_37*tmp_47) + tmp_61*(-tmp_218*tmp_60 - tmp_47*tmp_58) + tmp_69*(-tmp_218*tmp_68 - tmp_47*tmp_66) + tmp_77*(-tmp_218*tmp_76 - tmp_47*tmp_74) + tmp_85*(-tmp_218*tmp_84 - tmp_47*tmp_82) + tmp_93*(-tmp_218*tmp_92 - tmp_47*tmp_90);
      real_t a_2_1 = tmp_101*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_109*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_117*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_125*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_133*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_141*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_149*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_157*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_165*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_173*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_181*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_189*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_197*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_205*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_213*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_53*(-tmp_214*tmp_37 - tmp_218*tmp_33) + tmp_61*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_69*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_77*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_85*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_93*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_2_2 = tmp_101*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_109*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_117*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_125*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_133*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_141*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_149*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_157*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_165*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_173*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_181*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_189*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_197*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_205*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_213*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_53*(-tmp_215*tmp_37 - tmp_218*tmp_37) + tmp_61*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_69*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_77*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_85*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_93*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      real_t a_2_3 = tmp_101*(-tmp_216*tmp_98 - tmp_218*tmp_99) + tmp_109*(-tmp_106*tmp_216 - tmp_107*tmp_218) + tmp_117*(-tmp_114*tmp_216 - tmp_115*tmp_218) + tmp_125*(-tmp_122*tmp_216 - tmp_123*tmp_218) + tmp_133*(-tmp_130*tmp_216 - tmp_131*tmp_218) + tmp_141*(-tmp_138*tmp_216 - tmp_139*tmp_218) + tmp_149*(-tmp_146*tmp_216 - tmp_147*tmp_218) + tmp_157*(-tmp_154*tmp_216 - tmp_155*tmp_218) + tmp_165*(-tmp_162*tmp_216 - tmp_163*tmp_218) + tmp_173*(-tmp_170*tmp_216 - tmp_171*tmp_218) + tmp_181*(-tmp_178*tmp_216 - tmp_179*tmp_218) + tmp_189*(-tmp_186*tmp_216 - tmp_187*tmp_218) + tmp_197*(-tmp_194*tmp_216 - tmp_195*tmp_218) + tmp_205*(-tmp_202*tmp_216 - tmp_203*tmp_218) + tmp_213*(-tmp_210*tmp_216 - tmp_211*tmp_218) + tmp_53*(-tmp_216*tmp_37 - tmp_218*tmp_41) + tmp_61*(-tmp_216*tmp_58 - tmp_218*tmp_59) + tmp_69*(-tmp_216*tmp_66 - tmp_218*tmp_67) + tmp_77*(-tmp_216*tmp_74 - tmp_218*tmp_75) + tmp_85*(-tmp_216*tmp_82 - tmp_218*tmp_83) + tmp_93*(-tmp_216*tmp_90 - tmp_218*tmp_91);
      real_t a_3_0 = tmp_101*(-tmp_100*tmp_219 - tmp_47*tmp_99) + tmp_109*(-tmp_107*tmp_47 - tmp_108*tmp_219) + tmp_117*(-tmp_115*tmp_47 - tmp_116*tmp_219) + tmp_125*(-tmp_123*tmp_47 - tmp_124*tmp_219) + tmp_133*(-tmp_131*tmp_47 - tmp_132*tmp_219) + tmp_141*(-tmp_139*tmp_47 - tmp_140*tmp_219) + tmp_149*(-tmp_147*tmp_47 - tmp_148*tmp_219) + tmp_157*(-tmp_155*tmp_47 - tmp_156*tmp_219) + tmp_165*(-tmp_163*tmp_47 - tmp_164*tmp_219) + tmp_173*(-tmp_171*tmp_47 - tmp_172*tmp_219) + tmp_181*(-tmp_179*tmp_47 - tmp_180*tmp_219) + tmp_189*(-tmp_187*tmp_47 - tmp_188*tmp_219) + tmp_197*(-tmp_195*tmp_47 - tmp_196*tmp_219) + tmp_205*(-tmp_203*tmp_47 - tmp_204*tmp_219) + tmp_213*(-tmp_211*tmp_47 - tmp_212*tmp_219) + tmp_53*(-tmp_219*tmp_42 - tmp_41*tmp_47) + tmp_61*(-tmp_219*tmp_60 - tmp_47*tmp_59) + tmp_69*(-tmp_219*tmp_68 - tmp_47*tmp_67) + tmp_77*(-tmp_219*tmp_76 - tmp_47*tmp_75) + tmp_85*(-tmp_219*tmp_84 - tmp_47*tmp_83) + tmp_93*(-tmp_219*tmp_92 - tmp_47*tmp_91);
      real_t a_3_1 = tmp_101*(-tmp_214*tmp_99 - tmp_219*tmp_97) + tmp_109*(-tmp_105*tmp_219 - tmp_107*tmp_214) + tmp_117*(-tmp_113*tmp_219 - tmp_115*tmp_214) + tmp_125*(-tmp_121*tmp_219 - tmp_123*tmp_214) + tmp_133*(-tmp_129*tmp_219 - tmp_131*tmp_214) + tmp_141*(-tmp_137*tmp_219 - tmp_139*tmp_214) + tmp_149*(-tmp_145*tmp_219 - tmp_147*tmp_214) + tmp_157*(-tmp_153*tmp_219 - tmp_155*tmp_214) + tmp_165*(-tmp_161*tmp_219 - tmp_163*tmp_214) + tmp_173*(-tmp_169*tmp_219 - tmp_171*tmp_214) + tmp_181*(-tmp_177*tmp_219 - tmp_179*tmp_214) + tmp_189*(-tmp_185*tmp_219 - tmp_187*tmp_214) + tmp_197*(-tmp_193*tmp_219 - tmp_195*tmp_214) + tmp_205*(-tmp_201*tmp_219 - tmp_203*tmp_214) + tmp_213*(-tmp_209*tmp_219 - tmp_211*tmp_214) + tmp_53*(-tmp_214*tmp_41 - tmp_219*tmp_33) + tmp_61*(-tmp_214*tmp_59 - tmp_219*tmp_57) + tmp_69*(-tmp_214*tmp_67 - tmp_219*tmp_65) + tmp_77*(-tmp_214*tmp_75 - tmp_219*tmp_73) + tmp_85*(-tmp_214*tmp_83 - tmp_219*tmp_81) + tmp_93*(-tmp_214*tmp_91 - tmp_219*tmp_89);
      real_t a_3_2 = tmp_101*(-tmp_215*tmp_99 - tmp_219*tmp_98) + tmp_109*(-tmp_106*tmp_219 - tmp_107*tmp_215) + tmp_117*(-tmp_114*tmp_219 - tmp_115*tmp_215) + tmp_125*(-tmp_122*tmp_219 - tmp_123*tmp_215) + tmp_133*(-tmp_130*tmp_219 - tmp_131*tmp_215) + tmp_141*(-tmp_138*tmp_219 - tmp_139*tmp_215) + tmp_149*(-tmp_146*tmp_219 - tmp_147*tmp_215) + tmp_157*(-tmp_154*tmp_219 - tmp_155*tmp_215) + tmp_165*(-tmp_162*tmp_219 - tmp_163*tmp_215) + tmp_173*(-tmp_170*tmp_219 - tmp_171*tmp_215) + tmp_181*(-tmp_178*tmp_219 - tmp_179*tmp_215) + tmp_189*(-tmp_186*tmp_219 - tmp_187*tmp_215) + tmp_197*(-tmp_194*tmp_219 - tmp_195*tmp_215) + tmp_205*(-tmp_202*tmp_219 - tmp_203*tmp_215) + tmp_213*(-tmp_210*tmp_219 - tmp_211*tmp_215) + tmp_53*(-tmp_215*tmp_41 - tmp_219*tmp_37) + tmp_61*(-tmp_215*tmp_59 - tmp_219*tmp_58) + tmp_69*(-tmp_215*tmp_67 - tmp_219*tmp_66) + tmp_77*(-tmp_215*tmp_75 - tmp_219*tmp_74) + tmp_85*(-tmp_215*tmp_83 - tmp_219*tmp_82) + tmp_93*(-tmp_215*tmp_91 - tmp_219*tmp_90);
      real_t a_3_3 = tmp_101*(-tmp_216*tmp_99 - tmp_219*tmp_99) + tmp_109*(-tmp_107*tmp_216 - tmp_107*tmp_219) + tmp_117*(-tmp_115*tmp_216 - tmp_115*tmp_219) + tmp_125*(-tmp_123*tmp_216 - tmp_123*tmp_219) + tmp_133*(-tmp_131*tmp_216 - tmp_131*tmp_219) + tmp_141*(-tmp_139*tmp_216 - tmp_139*tmp_219) + tmp_149*(-tmp_147*tmp_216 - tmp_147*tmp_219) + tmp_157*(-tmp_155*tmp_216 - tmp_155*tmp_219) + tmp_165*(-tmp_163*tmp_216 - tmp_163*tmp_219) + tmp_173*(-tmp_171*tmp_216 - tmp_171*tmp_219) + tmp_181*(-tmp_179*tmp_216 - tmp_179*tmp_219) + tmp_189*(-tmp_187*tmp_216 - tmp_187*tmp_219) + tmp_197*(-tmp_195*tmp_216 - tmp_195*tmp_219) + tmp_205*(-tmp_203*tmp_216 - tmp_203*tmp_219) + tmp_213*(-tmp_211*tmp_216 - tmp_211*tmp_219) + tmp_53*(-tmp_216*tmp_41 - tmp_219*tmp_41) + tmp_61*(-tmp_216*tmp_59 - tmp_219*tmp_59) + tmp_69*(-tmp_216*tmp_67 - tmp_219*tmp_67) + tmp_77*(-tmp_216*tmp_75 - tmp_219*tmp_75) + tmp_85*(-tmp_216*tmp_83 - tmp_219*tmp_83) + tmp_93*(-tmp_216*tmp_91 - tmp_219*tmp_91);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_EP1_0 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_EP1_0()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_2 - tmp_4*tmp_6);
      real_t tmp_8 = 2.0*tmp_7;
      real_t tmp_9 = tmp_0*tmp_8;
      real_t tmp_10 = tmp_5*tmp_8;
      real_t tmp_11 = 1.0*tmp_7;
      real_t tmp_12 = tmp_11*tmp_2 + tmp_11*tmp_4*tmp_5;
      real_t tmp_13 = 0.5*tmp_7;
      real_t tmp_14 = tmp_1*tmp_13;
      real_t tmp_15 = tmp_0*tmp_13;
      real_t tmp_16 = tmp_14*tmp_3 + tmp_14*tmp_4 + tmp_15*tmp_5 + tmp_15*tmp_6;
      real_t tmp_17 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_18 = tmp_17*(tmp_12*(-tmp_10 - tmp_9) + 2*tmp_16*(-tmp_1*tmp_11 - tmp_11*tmp_3));
      real_t tmp_19 = tmp_16*tmp_8;
      real_t tmp_20 = tmp_17*(tmp_12*tmp_9 + tmp_19*tmp_3);
      real_t tmp_21 = tmp_17*(tmp_1*tmp_19 + tmp_10*tmp_12);
      real_t a_0_0 = 0.5*tmp_18;
      real_t a_0_1 = 0.5*tmp_20;
      real_t a_0_2 = 0.5*tmp_21;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_10*tmp_2 + tmp_13*tmp_4;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_13 + tmp_10*tmp_3;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_0*(tmp_1*tmp_15 + tmp_17*tmp_4);
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_3;
      real_t tmp_21 = tmp_19*tmp_2;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = 1.0*tmp_22;
      real_t tmp_24 = tmp_15*tmp_3 + tmp_17*tmp_6;
      real_t tmp_25 = 1.0*tmp_7;
      real_t tmp_26 = tmp_25*tmp_4;
      real_t tmp_27 = tmp_0*tmp_25;
      real_t tmp_28 = 1.0*p_affine_10_0*(-tmp_26 - tmp_27) + 1.0*p_affine_10_1*tmp_22;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_19*tmp_4;
      real_t tmp_33 = 1.0*p_affine_10_0*(tmp_25*tmp_5 + tmp_27*tmp_6) + 1.0*p_affine_10_1*(tmp_0*tmp_32 + tmp_1*tmp_32 + tmp_20*tmp_6 + tmp_21*tmp_3);
      real_t tmp_34 = 0.11846344252809471*tmp_29;
      real_t tmp_35 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_37 = tmp_2*tmp_35 + tmp_36*tmp_4;
      real_t tmp_38 = tmp_37 - 1.0/3.0;
      real_t tmp_39 = tmp_0*tmp_36 + tmp_3*tmp_35;
      real_t tmp_40 = tmp_39 - 1.0/3.0;
      real_t tmp_41 = tmp_1*tmp_38 + tmp_4*tmp_40;
      real_t tmp_42 = p_affine_10_0*tmp_23;
      real_t tmp_43 = tmp_3*tmp_38 + tmp_40*tmp_6;
      real_t tmp_44 = -tmp_37 - tmp_39 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_29;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_2*tmp_46 + tmp_4*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_47 + tmp_3*tmp_46;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_1*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_3*tmp_49 + tmp_51*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_29;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_2*tmp_56 + tmp_4*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_57 + tmp_3*tmp_56;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_1*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_3*tmp_59 + tmp_6*tmp_61;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_29;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_2*tmp_66 + tmp_4*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_67 + tmp_3*tmp_66;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_1*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_3*tmp_69 + tmp_6*tmp_71;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_29;
      real_t tmp_76 = 1.0*p_affine_10_0*tmp_26 + 1.0*p_affine_10_1*tmp_21;
      real_t tmp_77 = p_affine_10_0*tmp_21;
      real_t tmp_78 = 1.0*p_affine_10_0*tmp_27 + 1.0*p_affine_10_1*tmp_20;
      real_t tmp_79 = p_affine_10_0*tmp_20;
      real_t a_0_0 = tmp_34*(-tmp_18*tmp_23 - tmp_24*tmp_28 + 14*tmp_24*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_28*tmp_43 + 14*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44 - tmp_41*tmp_42) + tmp_55*(-tmp_28*tmp_53 + 14*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54 - tmp_42*tmp_52) + tmp_65*(-tmp_28*tmp_63 + 14*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64 - tmp_42*tmp_62) + tmp_75*(-tmp_28*tmp_73 + 14*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74 - tmp_42*tmp_72);
      real_t a_0_1 = tmp_34*(14*tmp_14*tmp_24*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_21 - tmp_24*tmp_76) + tmp_45*(14*tmp_30*tmp_37*tmp_43 - tmp_33*tmp_37 - tmp_41*tmp_77 - tmp_43*tmp_76) + tmp_55*(14*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_77 - tmp_53*tmp_76) + tmp_65*(14*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_77 - tmp_63*tmp_76) + tmp_75*(14*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_77 - tmp_73*tmp_76);
      real_t a_0_2 = tmp_34*(14*tmp_16*tmp_24*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_20 - tmp_24*tmp_78) + tmp_45*(14*tmp_30*tmp_39*tmp_43 - tmp_33*tmp_39 - tmp_41*tmp_79 - tmp_43*tmp_78) + tmp_55*(14*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_79 - tmp_53*tmp_78) + tmp_65*(14*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_79 - tmp_63*tmp_78) + tmp_75*(14*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_79 - tmp_73*tmp_78);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_0_1;
      real_t tmp_9 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_10 = p_affine_6_1 + 0.046910077030668018*tmp_9;
      real_t tmp_11 = tmp_7*(tmp_10 + tmp_8);
      real_t tmp_12 = -p_affine_0_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_7*(tmp_12 + tmp_14);
      real_t tmp_16 = tmp_11*tmp_2 + tmp_15*tmp_4 - 1.0/3.0;
      real_t tmp_17 = tmp_0*tmp_15 + tmp_11*tmp_3 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_0*(tmp_1*tmp_16 + tmp_17*tmp_4);
      real_t tmp_19 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_20 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_21 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_22 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_23 = 1.0 / (tmp_19*tmp_20 - tmp_21*tmp_22);
      real_t tmp_24 = 0.5*tmp_23;
      real_t tmp_25 = tmp_19*tmp_24;
      real_t tmp_26 = tmp_21*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26;
      real_t tmp_28 = 1.0*tmp_27;
      real_t tmp_29 = tmp_16*tmp_3 + tmp_17*tmp_6;
      real_t tmp_30 = 1.0*tmp_23;
      real_t tmp_31 = tmp_20*tmp_30;
      real_t tmp_32 = tmp_22*tmp_30;
      real_t tmp_33 = 1.0*p_affine_10_0*(-tmp_31 - tmp_32) + 1.0*p_affine_10_1*tmp_27;
      real_t tmp_34 = -p_affine_3_1;
      real_t tmp_35 = tmp_23*(tmp_10 + tmp_34);
      real_t tmp_36 = -p_affine_3_0;
      real_t tmp_37 = tmp_23*(tmp_14 + tmp_36);
      real_t tmp_38 = tmp_20*tmp_37 + tmp_21*tmp_35;
      real_t tmp_39 = tmp_19*tmp_35 + tmp_22*tmp_37;
      real_t tmp_40 = -tmp_38 - tmp_39 + 1;
      real_t tmp_41 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_9*tmp_9), 1.0/2.0));
      real_t tmp_42 = 14/tmp_41;
      real_t tmp_43 = tmp_29*tmp_42;
      real_t tmp_44 = 1.0*tmp_7;
      real_t tmp_45 = 0.5*tmp_7;
      real_t tmp_46 = tmp_3*tmp_45;
      real_t tmp_47 = tmp_4*tmp_45;
      real_t tmp_48 = p_affine_10_0*(tmp_0*tmp_44*tmp_6 + tmp_44*tmp_5) + p_affine_10_1*(tmp_0*tmp_47 + tmp_1*tmp_47 + tmp_2*tmp_46 + tmp_46*tmp_6);
      real_t tmp_49 = 0.11846344252809471*tmp_41;
      real_t tmp_50 = p_affine_6_1 + 0.23076534494715845*tmp_9;
      real_t tmp_51 = tmp_7*(tmp_50 + tmp_8);
      real_t tmp_52 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_53 = tmp_7*(tmp_12 + tmp_52);
      real_t tmp_54 = tmp_2*tmp_51 + tmp_4*tmp_53 - 1.0/3.0;
      real_t tmp_55 = tmp_0*tmp_53 + tmp_3*tmp_51 - 1.0/3.0;
      real_t tmp_56 = tmp_1*tmp_54 + tmp_4*tmp_55;
      real_t tmp_57 = p_affine_10_0*tmp_28;
      real_t tmp_58 = tmp_3*tmp_54 + tmp_55*tmp_6;
      real_t tmp_59 = tmp_23*(tmp_34 + tmp_50);
      real_t tmp_60 = tmp_23*(tmp_36 + tmp_52);
      real_t tmp_61 = tmp_20*tmp_60 + tmp_21*tmp_59;
      real_t tmp_62 = tmp_19*tmp_59 + tmp_22*tmp_60;
      real_t tmp_63 = -tmp_61 - tmp_62 + 1;
      real_t tmp_64 = tmp_42*tmp_58;
      real_t tmp_65 = 0.2393143352496831*tmp_41;
      real_t tmp_66 = p_affine_6_1 + 0.5*tmp_9;
      real_t tmp_67 = tmp_7*(tmp_66 + tmp_8);
      real_t tmp_68 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_69 = tmp_7*(tmp_12 + tmp_68);
      real_t tmp_70 = tmp_2*tmp_67 + tmp_4*tmp_69 - 1.0/3.0;
      real_t tmp_71 = tmp_0*tmp_69 + tmp_3*tmp_67 - 1.0/3.0;
      real_t tmp_72 = tmp_1*tmp_70 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_3*tmp_70 + tmp_6*tmp_71;
      real_t tmp_74 = tmp_23*(tmp_34 + tmp_66);
      real_t tmp_75 = tmp_23*(tmp_36 + tmp_68);
      real_t tmp_76 = tmp_20*tmp_75 + tmp_21*tmp_74;
      real_t tmp_77 = tmp_19*tmp_74 + tmp_22*tmp_75;
      real_t tmp_78 = -tmp_76 - tmp_77 + 1;
      real_t tmp_79 = tmp_42*tmp_73;
      real_t tmp_80 = 0.2844444444444445*tmp_41;
      real_t tmp_81 = p_affine_6_1 + 0.7692346550528415*tmp_9;
      real_t tmp_82 = tmp_7*(tmp_8 + tmp_81);
      real_t tmp_83 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_84 = tmp_7*(tmp_12 + tmp_83);
      real_t tmp_85 = tmp_2*tmp_82 + tmp_4*tmp_84 - 1.0/3.0;
      real_t tmp_86 = tmp_0*tmp_84 + tmp_3*tmp_82 - 1.0/3.0;
      real_t tmp_87 = tmp_1*tmp_85 + tmp_4*tmp_86;
      real_t tmp_88 = tmp_3*tmp_85 + tmp_6*tmp_86;
      real_t tmp_89 = tmp_23*(tmp_34 + tmp_81);
      real_t tmp_90 = tmp_23*(tmp_36 + tmp_83);
      real_t tmp_91 = tmp_20*tmp_90 + tmp_21*tmp_89;
      real_t tmp_92 = tmp_19*tmp_89 + tmp_22*tmp_90;
      real_t tmp_93 = -tmp_91 - tmp_92 + 1;
      real_t tmp_94 = tmp_42*tmp_88;
      real_t tmp_95 = 0.2393143352496831*tmp_41;
      real_t tmp_96 = p_affine_6_1 + 0.95308992296933193*tmp_9;
      real_t tmp_97 = tmp_7*(tmp_8 + tmp_96);
      real_t tmp_98 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_99 = tmp_7*(tmp_12 + tmp_98);
      real_t tmp_100 = tmp_2*tmp_97 + tmp_4*tmp_99 - 1.0/3.0;
      real_t tmp_101 = tmp_0*tmp_99 + tmp_3*tmp_97 - 1.0/3.0;
      real_t tmp_102 = tmp_1*tmp_100 + tmp_101*tmp_4;
      real_t tmp_103 = tmp_100*tmp_3 + tmp_101*tmp_6;
      real_t tmp_104 = tmp_23*(tmp_34 + tmp_96);
      real_t tmp_105 = tmp_23*(tmp_36 + tmp_98);
      real_t tmp_106 = tmp_104*tmp_21 + tmp_105*tmp_20;
      real_t tmp_107 = tmp_104*tmp_19 + tmp_105*tmp_22;
      real_t tmp_108 = -tmp_106 - tmp_107 + 1;
      real_t tmp_109 = tmp_103*tmp_42;
      real_t tmp_110 = 0.11846344252809471*tmp_41;
      real_t tmp_111 = 1.0*p_affine_10_0*tmp_31 + 1.0*p_affine_10_1*tmp_26;
      real_t tmp_112 = p_affine_10_0*tmp_26;
      real_t tmp_113 = 1.0*p_affine_10_0*tmp_32 + 1.0*p_affine_10_1*tmp_25;
      real_t tmp_114 = p_affine_10_0*tmp_25;
      real_t a_0_0 = tmp_110*(-tmp_102*tmp_57 - tmp_103*tmp_33 - tmp_108*tmp_109 + tmp_108*tmp_48) + tmp_49*(-tmp_18*tmp_28 - tmp_29*tmp_33 - tmp_40*tmp_43 + tmp_40*tmp_48) + tmp_65*(-tmp_33*tmp_58 + tmp_48*tmp_63 - tmp_56*tmp_57 - tmp_63*tmp_64) + tmp_80*(-tmp_33*tmp_73 + tmp_48*tmp_78 - tmp_57*tmp_72 - tmp_78*tmp_79) + tmp_95*(-tmp_33*tmp_88 + tmp_48*tmp_93 - tmp_57*tmp_87 - tmp_93*tmp_94);
      real_t a_0_1 = tmp_110*(-tmp_102*tmp_112 - tmp_103*tmp_111 - tmp_106*tmp_109 + tmp_106*tmp_48) + tmp_49*(-tmp_111*tmp_29 - tmp_18*tmp_26 - tmp_38*tmp_43 + tmp_38*tmp_48) + tmp_65*(-tmp_111*tmp_58 - tmp_112*tmp_56 + tmp_48*tmp_61 - tmp_61*tmp_64) + tmp_80*(-tmp_111*tmp_73 - tmp_112*tmp_72 + tmp_48*tmp_76 - tmp_76*tmp_79) + tmp_95*(-tmp_111*tmp_88 - tmp_112*tmp_87 + tmp_48*tmp_91 - tmp_91*tmp_94);
      real_t a_0_2 = tmp_110*(-tmp_102*tmp_114 - tmp_103*tmp_113 - tmp_107*tmp_109 + tmp_107*tmp_48) + tmp_49*(-tmp_113*tmp_29 - tmp_18*tmp_25 - tmp_39*tmp_43 + tmp_39*tmp_48) + tmp_65*(-tmp_113*tmp_58 - tmp_114*tmp_56 + tmp_48*tmp_62 - tmp_62*tmp_64) + tmp_80*(-tmp_113*tmp_73 - tmp_114*tmp_72 + tmp_48*tmp_77 - tmp_77*tmp_79) + tmp_95*(-tmp_113*tmp_88 - tmp_114*tmp_87 + tmp_48*tmp_92 - tmp_92*tmp_94);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_10*tmp_2 + tmp_13*tmp_4;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_13 + tmp_10*tmp_3;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = tmp_1*tmp_15 + tmp_17*tmp_4;
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_3;
      real_t tmp_21 = tmp_19*tmp_2;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = p_affine_10_0*tmp_22;
      real_t tmp_24 = 1.0*tmp_7;
      real_t tmp_25 = tmp_24*tmp_4;
      real_t tmp_26 = tmp_0*tmp_24;
      real_t tmp_27 = p_affine_10_0*(-tmp_25 - tmp_26) + p_affine_10_1*tmp_22;
      real_t tmp_28 = tmp_15*tmp_3 + tmp_17*tmp_6;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_19*tmp_4;
      real_t tmp_33 = p_affine_10_0*(tmp_24*tmp_5 + tmp_26*tmp_6) + p_affine_10_1*(tmp_0*tmp_32 + tmp_1*tmp_32 + tmp_20*tmp_6 + tmp_21*tmp_3);
      real_t tmp_34 = 2*tmp_29;
      real_t tmp_35 = 0.11846344252809471*tmp_34;
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_38 = tmp_2*tmp_36 + tmp_37*tmp_4;
      real_t tmp_39 = tmp_38 - 1.0/3.0;
      real_t tmp_40 = tmp_0*tmp_37 + tmp_3*tmp_36;
      real_t tmp_41 = tmp_40 - 1.0/3.0;
      real_t tmp_42 = tmp_1*tmp_39 + tmp_4*tmp_41;
      real_t tmp_43 = tmp_3*tmp_39 + tmp_41*tmp_6;
      real_t tmp_44 = -tmp_38 - tmp_40 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_34;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_2*tmp_46 + tmp_4*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_47 + tmp_3*tmp_46;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_1*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_3*tmp_49 + tmp_51*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_34;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_2*tmp_56 + tmp_4*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_57 + tmp_3*tmp_56;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_1*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_3*tmp_59 + tmp_6*tmp_61;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_34;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_2*tmp_66 + tmp_4*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_67 + tmp_3*tmp_66;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_1*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_3*tmp_69 + tmp_6*tmp_71;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_34;
      real_t tmp_76 = p_affine_10_0*tmp_21;
      real_t tmp_77 = p_affine_10_0*tmp_25 + p_affine_10_1*tmp_21;
      real_t tmp_78 = p_affine_10_0*tmp_20;
      real_t tmp_79 = p_affine_10_0*tmp_26 + p_affine_10_1*tmp_20;
      real_t a_0_0 = tmp_35*(-tmp_18*tmp_23 - tmp_27*tmp_28 + 7*tmp_28*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_23*tmp_42 - tmp_27*tmp_43 + 7*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44) + tmp_55*(-tmp_23*tmp_52 - tmp_27*tmp_53 + 7*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54) + tmp_65*(-tmp_23*tmp_62 - tmp_27*tmp_63 + 7*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64) + tmp_75*(-tmp_23*tmp_72 - tmp_27*tmp_73 + 7*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74);
      real_t a_0_1 = tmp_35*(7*tmp_14*tmp_28*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_76 - tmp_28*tmp_77) + tmp_45*(7*tmp_30*tmp_38*tmp_43 - tmp_33*tmp_38 - tmp_42*tmp_76 - tmp_43*tmp_77) + tmp_55*(7*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_76 - tmp_53*tmp_77) + tmp_65*(7*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_76 - tmp_63*tmp_77) + tmp_75*(7*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_76 - tmp_73*tmp_77);
      real_t a_0_2 = tmp_35*(7*tmp_16*tmp_28*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_78 - tmp_28*tmp_79) + tmp_45*(7*tmp_30*tmp_40*tmp_43 - tmp_33*tmp_40 - tmp_42*tmp_78 - tmp_43*tmp_79) + tmp_55*(7*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_78 - tmp_53*tmp_79) + tmp_65*(7*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_78 - tmp_63*tmp_79) + tmp_75*(7*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_78 - tmp_73*tmp_79);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = 2.0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = -tmp_13 + tmp_9;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = 1.0*tmp_15;
      real_t tmp_23 = tmp_10*tmp_18*tmp_22 + tmp_12*tmp_22*tmp_6 + tmp_20*tmp_22*tmp_7;
      real_t tmp_24 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_25 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_26 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_27 = 0.5*tmp_15;
      real_t tmp_28 = tmp_27*tmp_7;
      real_t tmp_29 = tmp_10*tmp_27;
      real_t tmp_30 = tmp_12*tmp_27;
      real_t tmp_31 = tmp_20*tmp_27;
      real_t tmp_32 = tmp_18*tmp_27;
      real_t tmp_33 = tmp_27*tmp_6;
      real_t tmp_34 = tmp_1*tmp_32 + tmp_24*tmp_30 + tmp_25*tmp_29 + tmp_26*tmp_28 + tmp_31*tmp_4 + tmp_33*tmp_8;
      real_t tmp_35 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_36 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_37 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_38 = tmp_0*tmp_31 + tmp_11*tmp_33 + tmp_28*tmp_37 + tmp_29*tmp_36 + tmp_3*tmp_32 + tmp_30*tmp_35;
      real_t tmp_39 = p_affine_0_0*p_affine_1_1;
      real_t tmp_40 = p_affine_0_0*p_affine_1_2;
      real_t tmp_41 = p_affine_2_1*p_affine_3_2;
      real_t tmp_42 = p_affine_0_1*p_affine_1_0;
      real_t tmp_43 = p_affine_0_1*p_affine_1_2;
      real_t tmp_44 = p_affine_2_2*p_affine_3_0;
      real_t tmp_45 = p_affine_0_2*p_affine_1_0;
      real_t tmp_46 = p_affine_0_2*p_affine_1_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_1;
      real_t tmp_48 = p_affine_2_2*p_affine_3_1;
      real_t tmp_49 = p_affine_2_0*p_affine_3_2;
      real_t tmp_50 = p_affine_2_1*p_affine_3_0;
      real_t tmp_51 = std::abs(p_affine_0_0*tmp_41 - p_affine_0_0*tmp_48 + p_affine_0_1*tmp_44 - p_affine_0_1*tmp_49 + p_affine_0_2*tmp_47 - p_affine_0_2*tmp_50 - p_affine_1_0*tmp_41 + p_affine_1_0*tmp_48 - p_affine_1_1*tmp_44 + p_affine_1_1*tmp_49 - p_affine_1_2*tmp_47 + p_affine_1_2*tmp_50 + p_affine_2_0*tmp_43 - p_affine_2_0*tmp_46 - p_affine_2_1*tmp_40 + p_affine_2_1*tmp_45 + p_affine_2_2*tmp_39 - p_affine_2_2*tmp_42 - p_affine_3_0*tmp_43 + p_affine_3_0*tmp_46 + p_affine_3_1*tmp_40 - p_affine_3_1*tmp_45 - p_affine_3_2*tmp_39 + p_affine_3_2*tmp_42);
      real_t tmp_52 = tmp_51*(tmp_23*(-tmp_17 - tmp_19 - tmp_21) + 2*tmp_34*(-tmp_22*tmp_24 - tmp_22*tmp_25 - tmp_22*tmp_26) + 2*tmp_38*(-tmp_22*tmp_35 - tmp_22*tmp_36 - tmp_22*tmp_37));
      real_t tmp_53 = tmp_16*tmp_34;
      real_t tmp_54 = tmp_16*tmp_38;
      real_t tmp_55 = tmp_51*(tmp_21*tmp_23 + tmp_26*tmp_53 + tmp_37*tmp_54);
      real_t tmp_56 = tmp_51*(tmp_19*tmp_23 + tmp_25*tmp_53 + tmp_36*tmp_54);
      real_t tmp_57 = tmp_51*(tmp_17*tmp_23 + tmp_24*tmp_53 + tmp_35*tmp_54);
      real_t a_0_0 = 0.1666666666666668*tmp_52;
      real_t a_0_1 = 0.1666666666666668*tmp_55;
      real_t a_0_2 = 0.1666666666666668*tmp_56;
      real_t a_0_3 = 0.1666666666666668*tmp_57;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_36 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_41 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_2*tmp_44 + tmp_39*tmp_4;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_41*tmp_46;
      real_t tmp_48 = tmp_36*tmp_46;
      real_t tmp_49 = tmp_21*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_0;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_10*tmp_39 + tmp_34*tmp_9 + tmp_44*tmp_7;
      real_t tmp_54 = tmp_40*tmp_46;
      real_t tmp_55 = tmp_35*tmp_46;
      real_t tmp_56 = tmp_46*tmp_5;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_1*tmp_39 + tmp_3*tmp_44 + tmp_34*tmp_6;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_42*tmp_60;
      real_t tmp_62 = tmp_37*tmp_60;
      real_t tmp_63 = tmp_27*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*(-tmp_61 - tmp_62 - tmp_63) + 1.0*p_affine_13_1*tmp_50 + 1.0*p_affine_13_2*tmp_57;
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_27*tmp_46;
      real_t tmp_69 = tmp_37*tmp_46;
      real_t tmp_70 = tmp_42*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_1*tmp_62 + tmp_3*tmp_61 + tmp_6*tmp_63) + 1.0*p_affine_13_1*(tmp_0*tmp_68 + tmp_1*tmp_48 + tmp_2*tmp_70 + tmp_3*tmp_47 + tmp_4*tmp_69 + tmp_49*tmp_6) + 1.0*p_affine_13_2*(tmp_1*tmp_55 + tmp_10*tmp_69 + tmp_3*tmp_54 + tmp_56*tmp_6 + tmp_68*tmp_9 + tmp_7*tmp_70);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_2*tmp_82 + tmp_4*tmp_80;
      real_t tmp_84 = tmp_10*tmp_80 + tmp_7*tmp_82 + tmp_78*tmp_9;
      real_t tmp_85 = tmp_1*tmp_80 + tmp_3*tmp_82 + tmp_6*tmp_78;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_2*tmp_96 + tmp_4*tmp_94;
      real_t tmp_98 = tmp_10*tmp_94 + tmp_7*tmp_96 + tmp_9*tmp_92;
      real_t tmp_99 = tmp_1*tmp_94 + tmp_3*tmp_96 + tmp_6*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_112 = tmp_10*tmp_108 + tmp_106*tmp_9 + tmp_110*tmp_7;
      real_t tmp_113 = tmp_1*tmp_108 + tmp_106*tmp_6 + tmp_110*tmp_3;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_126 = tmp_10*tmp_122 + tmp_120*tmp_9 + tmp_124*tmp_7;
      real_t tmp_127 = tmp_1*tmp_122 + tmp_120*tmp_6 + tmp_124*tmp_3;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_140 = tmp_10*tmp_136 + tmp_134*tmp_9 + tmp_138*tmp_7;
      real_t tmp_141 = tmp_1*tmp_136 + tmp_134*tmp_6 + tmp_138*tmp_3;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_154 = tmp_10*tmp_150 + tmp_148*tmp_9 + tmp_152*tmp_7;
      real_t tmp_155 = tmp_1*tmp_150 + tmp_148*tmp_6 + tmp_152*tmp_3;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_168 = tmp_10*tmp_164 + tmp_162*tmp_9 + tmp_166*tmp_7;
      real_t tmp_169 = tmp_1*tmp_164 + tmp_162*tmp_6 + tmp_166*tmp_3;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_182 = tmp_10*tmp_178 + tmp_176*tmp_9 + tmp_180*tmp_7;
      real_t tmp_183 = tmp_1*tmp_178 + tmp_176*tmp_6 + tmp_180*tmp_3;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_196 = tmp_10*tmp_192 + tmp_190*tmp_9 + tmp_194*tmp_7;
      real_t tmp_197 = tmp_1*tmp_192 + tmp_190*tmp_6 + tmp_194*tmp_3;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_2*tmp_208 + tmp_206*tmp_4;
      real_t tmp_210 = tmp_10*tmp_206 + tmp_204*tmp_9 + tmp_208*tmp_7;
      real_t tmp_211 = tmp_1*tmp_206 + tmp_204*tmp_6 + tmp_208*tmp_3;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_2*tmp_222 + tmp_220*tmp_4;
      real_t tmp_224 = tmp_10*tmp_220 + tmp_218*tmp_9 + tmp_222*tmp_7;
      real_t tmp_225 = tmp_1*tmp_220 + tmp_218*tmp_6 + tmp_222*tmp_3;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_2*tmp_236 + tmp_234*tmp_4;
      real_t tmp_238 = tmp_10*tmp_234 + tmp_232*tmp_9 + tmp_236*tmp_7;
      real_t tmp_239 = tmp_1*tmp_234 + tmp_232*tmp_6 + tmp_236*tmp_3;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_2*tmp_250 + tmp_248*tmp_4;
      real_t tmp_252 = tmp_10*tmp_248 + tmp_246*tmp_9 + tmp_250*tmp_7;
      real_t tmp_253 = tmp_1*tmp_248 + tmp_246*tmp_6 + tmp_250*tmp_3;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_2*tmp_264 + tmp_262*tmp_4;
      real_t tmp_266 = tmp_10*tmp_262 + tmp_260*tmp_9 + tmp_264*tmp_7;
      real_t tmp_267 = tmp_1*tmp_262 + tmp_260*tmp_6 + tmp_264*tmp_3;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_2*tmp_278 + tmp_276*tmp_4;
      real_t tmp_280 = tmp_10*tmp_276 + tmp_274*tmp_9 + tmp_278*tmp_7;
      real_t tmp_281 = tmp_1*tmp_276 + tmp_274*tmp_6 + tmp_278*tmp_3;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_2*tmp_292 + tmp_290*tmp_4;
      real_t tmp_294 = tmp_10*tmp_290 + tmp_288*tmp_9 + tmp_292*tmp_7;
      real_t tmp_295 = tmp_1*tmp_290 + tmp_288*tmp_6 + tmp_292*tmp_3;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_2*tmp_306 + tmp_304*tmp_4;
      real_t tmp_308 = tmp_10*tmp_304 + tmp_302*tmp_9 + tmp_306*tmp_7;
      real_t tmp_309 = tmp_1*tmp_304 + tmp_3*tmp_306 + tmp_302*tmp_6;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_2*tmp_320 + tmp_318*tmp_4;
      real_t tmp_322 = tmp_10*tmp_318 + tmp_316*tmp_9 + tmp_320*tmp_7;
      real_t tmp_323 = tmp_1*tmp_318 + tmp_3*tmp_320 + tmp_316*tmp_6;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_2*tmp_334 + tmp_332*tmp_4;
      real_t tmp_336 = tmp_10*tmp_332 + tmp_330*tmp_9 + tmp_334*tmp_7;
      real_t tmp_337 = tmp_1*tmp_332 + tmp_3*tmp_334 + tmp_330*tmp_6;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_2*tmp_348 + tmp_346*tmp_4;
      real_t tmp_350 = tmp_10*tmp_346 + tmp_344*tmp_9 + tmp_348*tmp_7;
      real_t tmp_351 = tmp_1*tmp_346 + tmp_3*tmp_348 + tmp_344*tmp_6;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_0*tmp_56;
      real_t tmp_355 = p_affine_13_0*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_49 + 1.0*p_affine_13_2*tmp_56;
      real_t tmp_357 = p_affine_13_0*tmp_55;
      real_t tmp_358 = p_affine_13_0*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_62 + 1.0*p_affine_13_1*tmp_48 + 1.0*p_affine_13_2*tmp_55;
      real_t tmp_360 = p_affine_13_0*tmp_54;
      real_t tmp_361 = p_affine_13_0*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_61 + 1.0*p_affine_13_1*tmp_47 + 1.0*p_affine_13_2*tmp_54;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_0_1 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_0_2 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_0_3 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_8;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_5 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_38 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_39 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_42 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_2*tmp_44 + tmp_4*tmp_40;
      real_t tmp_46 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_49 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_50 = -tmp_46*tmp_47 + tmp_48*tmp_49;
      real_t tmp_51 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_52 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_53 = tmp_46*tmp_52;
      real_t tmp_54 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_55 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_56 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_57 = tmp_47*tmp_56;
      real_t tmp_58 = tmp_46*tmp_54;
      real_t tmp_59 = tmp_48*tmp_56;
      real_t tmp_60 = tmp_49*tmp_55;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_49*tmp_54 + tmp_51*tmp_53 - tmp_51*tmp_59 - tmp_52*tmp_60 + tmp_55*tmp_57);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_50*tmp_62;
      real_t tmp_64 = tmp_46*tmp_51 - tmp_60;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_47*tmp_55 - tmp_48*tmp_51;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_63 - tmp_65 - tmp_67;
      real_t tmp_69 = 1.0*p_affine_13_0;
      real_t tmp_70 = tmp_68*tmp_69;
      real_t tmp_71 = tmp_10*tmp_40 + tmp_36*tmp_9 + tmp_44*tmp_7;
      real_t tmp_72 = tmp_53 - tmp_59;
      real_t tmp_73 = tmp_62*tmp_72;
      real_t tmp_74 = tmp_55*tmp_56 - tmp_58;
      real_t tmp_75 = tmp_62*tmp_74;
      real_t tmp_76 = tmp_48*tmp_54 - tmp_52*tmp_55;
      real_t tmp_77 = tmp_62*tmp_76;
      real_t tmp_78 = -tmp_73 - tmp_75 - tmp_77;
      real_t tmp_79 = tmp_69*tmp_78;
      real_t tmp_80 = tmp_1*tmp_40 + tmp_3*tmp_44 + tmp_36*tmp_6;
      real_t tmp_81 = -tmp_49*tmp_52 + tmp_57;
      real_t tmp_82 = 1.0*tmp_61;
      real_t tmp_83 = tmp_81*tmp_82;
      real_t tmp_84 = tmp_49*tmp_54 - tmp_51*tmp_56;
      real_t tmp_85 = tmp_82*tmp_84;
      real_t tmp_86 = -tmp_47*tmp_54 + tmp_51*tmp_52;
      real_t tmp_87 = tmp_82*tmp_86;
      real_t tmp_88 = 1.0*p_affine_13_0*(-tmp_83 - tmp_85 - tmp_87) + 1.0*p_affine_13_1*tmp_68 + 1.0*p_affine_13_2*tmp_78;
      real_t tmp_89 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_90 = tmp_61*(tmp_19 + tmp_89);
      real_t tmp_91 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_92 = tmp_61*(tmp_26 + tmp_91);
      real_t tmp_93 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_94 = tmp_61*(tmp_33 + tmp_93);
      real_t tmp_95 = tmp_66*tmp_92 + tmp_76*tmp_90 + tmp_86*tmp_94;
      real_t tmp_96 = tmp_64*tmp_92 + tmp_74*tmp_90 + tmp_84*tmp_94;
      real_t tmp_97 = tmp_50*tmp_92 + tmp_72*tmp_90 + tmp_81*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_100 = 14.0*std::pow(tmp_99, -0.25);
      real_t tmp_101 = tmp_100*tmp_80;
      real_t tmp_102 = 1.0*tmp_15;
      real_t tmp_103 = 0.5*tmp_15;
      real_t tmp_104 = tmp_103*tmp_6;
      real_t tmp_105 = tmp_1*tmp_103;
      real_t tmp_106 = tmp_103*tmp_3;
      real_t tmp_107 = tmp_103*tmp_29;
      real_t tmp_108 = tmp_103*tmp_39;
      real_t tmp_109 = tmp_103*tmp_43;
      real_t tmp_110 = p_affine_13_0*(tmp_1*tmp_102*tmp_39 + tmp_102*tmp_29*tmp_6 + tmp_102*tmp_3*tmp_43) + p_affine_13_1*(tmp_0*tmp_107 + tmp_104*tmp_22 + tmp_105*tmp_38 + tmp_106*tmp_42 + tmp_108*tmp_4 + tmp_109*tmp_2) + p_affine_13_2*(tmp_10*tmp_108 + tmp_104*tmp_5 + tmp_105*tmp_37 + tmp_106*tmp_41 + tmp_107*tmp_9 + tmp_109*tmp_7);
      real_t tmp_111 = 1.0*std::pow(tmp_99, 1.0/2.0);
      real_t tmp_112 = 0.0068572537431980923*tmp_111;
      real_t tmp_113 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_20);
      real_t tmp_115 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_116 = tmp_15*(tmp_115 + tmp_27);
      real_t tmp_117 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_118 = tmp_15*(tmp_117 + tmp_34);
      real_t tmp_119 = tmp_114*tmp_5 + tmp_116*tmp_22 + tmp_118*tmp_29 - 1.0/4.0;
      real_t tmp_120 = tmp_114*tmp_37 + tmp_116*tmp_38 + tmp_118*tmp_39 - 1.0/4.0;
      real_t tmp_121 = tmp_114*tmp_41 + tmp_116*tmp_42 + tmp_118*tmp_43 - 1.0/4.0;
      real_t tmp_122 = tmp_0*tmp_119 + tmp_120*tmp_4 + tmp_121*tmp_2;
      real_t tmp_123 = tmp_10*tmp_120 + tmp_119*tmp_9 + tmp_121*tmp_7;
      real_t tmp_124 = tmp_1*tmp_120 + tmp_119*tmp_6 + tmp_121*tmp_3;
      real_t tmp_125 = tmp_61*(tmp_113 + tmp_89);
      real_t tmp_126 = tmp_61*(tmp_115 + tmp_91);
      real_t tmp_127 = tmp_61*(tmp_117 + tmp_93);
      real_t tmp_128 = tmp_125*tmp_76 + tmp_126*tmp_66 + tmp_127*tmp_86;
      real_t tmp_129 = tmp_125*tmp_74 + tmp_126*tmp_64 + tmp_127*tmp_84;
      real_t tmp_130 = tmp_125*tmp_72 + tmp_126*tmp_50 + tmp_127*tmp_81;
      real_t tmp_131 = -tmp_128 - tmp_129 - tmp_130 + 1;
      real_t tmp_132 = tmp_100*tmp_124;
      real_t tmp_133 = 0.037198804536718075*tmp_111;
      real_t tmp_134 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_135 = tmp_15*(tmp_134 + tmp_20);
      real_t tmp_136 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_137 = tmp_15*(tmp_136 + tmp_27);
      real_t tmp_138 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_139 = tmp_15*(tmp_138 + tmp_34);
      real_t tmp_140 = tmp_135*tmp_5 + tmp_137*tmp_22 + tmp_139*tmp_29 - 1.0/4.0;
      real_t tmp_141 = tmp_135*tmp_37 + tmp_137*tmp_38 + tmp_139*tmp_39 - 1.0/4.0;
      real_t tmp_142 = tmp_135*tmp_41 + tmp_137*tmp_42 + tmp_139*tmp_43 - 1.0/4.0;
      real_t tmp_143 = tmp_0*tmp_140 + tmp_141*tmp_4 + tmp_142*tmp_2;
      real_t tmp_144 = tmp_10*tmp_141 + tmp_140*tmp_9 + tmp_142*tmp_7;
      real_t tmp_145 = tmp_1*tmp_141 + tmp_140*tmp_6 + tmp_142*tmp_3;
      real_t tmp_146 = tmp_61*(tmp_134 + tmp_89);
      real_t tmp_147 = tmp_61*(tmp_136 + tmp_91);
      real_t tmp_148 = tmp_61*(tmp_138 + tmp_93);
      real_t tmp_149 = tmp_146*tmp_76 + tmp_147*tmp_66 + tmp_148*tmp_86;
      real_t tmp_150 = tmp_146*tmp_74 + tmp_147*tmp_64 + tmp_148*tmp_84;
      real_t tmp_151 = tmp_146*tmp_72 + tmp_147*tmp_50 + tmp_148*tmp_81;
      real_t tmp_152 = -tmp_149 - tmp_150 - tmp_151 + 1;
      real_t tmp_153 = tmp_100*tmp_145;
      real_t tmp_154 = 0.020848748529055869*tmp_111;
      real_t tmp_155 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_156 = tmp_15*(tmp_155 + tmp_20);
      real_t tmp_157 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_158 = tmp_15*(tmp_157 + tmp_27);
      real_t tmp_159 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_160 = tmp_15*(tmp_159 + tmp_34);
      real_t tmp_161 = tmp_156*tmp_5 + tmp_158*tmp_22 + tmp_160*tmp_29 - 1.0/4.0;
      real_t tmp_162 = tmp_156*tmp_37 + tmp_158*tmp_38 + tmp_160*tmp_39 - 1.0/4.0;
      real_t tmp_163 = tmp_156*tmp_41 + tmp_158*tmp_42 + tmp_160*tmp_43 - 1.0/4.0;
      real_t tmp_164 = tmp_0*tmp_161 + tmp_162*tmp_4 + tmp_163*tmp_2;
      real_t tmp_165 = tmp_10*tmp_162 + tmp_161*tmp_9 + tmp_163*tmp_7;
      real_t tmp_166 = tmp_1*tmp_162 + tmp_161*tmp_6 + tmp_163*tmp_3;
      real_t tmp_167 = tmp_61*(tmp_155 + tmp_89);
      real_t tmp_168 = tmp_61*(tmp_157 + tmp_91);
      real_t tmp_169 = tmp_61*(tmp_159 + tmp_93);
      real_t tmp_170 = tmp_167*tmp_76 + tmp_168*tmp_66 + tmp_169*tmp_86;
      real_t tmp_171 = tmp_167*tmp_74 + tmp_168*tmp_64 + tmp_169*tmp_84;
      real_t tmp_172 = tmp_167*tmp_72 + tmp_168*tmp_50 + tmp_169*tmp_81;
      real_t tmp_173 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_174 = tmp_100*tmp_166;
      real_t tmp_175 = 0.019202922745021479*tmp_111;
      real_t tmp_176 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_177 = tmp_15*(tmp_176 + tmp_20);
      real_t tmp_178 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_179 = tmp_15*(tmp_178 + tmp_27);
      real_t tmp_180 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_181 = tmp_15*(tmp_180 + tmp_34);
      real_t tmp_182 = tmp_177*tmp_5 + tmp_179*tmp_22 + tmp_181*tmp_29 - 1.0/4.0;
      real_t tmp_183 = tmp_177*tmp_37 + tmp_179*tmp_38 + tmp_181*tmp_39 - 1.0/4.0;
      real_t tmp_184 = tmp_177*tmp_41 + tmp_179*tmp_42 + tmp_181*tmp_43 - 1.0/4.0;
      real_t tmp_185 = tmp_0*tmp_182 + tmp_183*tmp_4 + tmp_184*tmp_2;
      real_t tmp_186 = tmp_10*tmp_183 + tmp_182*tmp_9 + tmp_184*tmp_7;
      real_t tmp_187 = tmp_1*tmp_183 + tmp_182*tmp_6 + tmp_184*tmp_3;
      real_t tmp_188 = tmp_61*(tmp_176 + tmp_89);
      real_t tmp_189 = tmp_61*(tmp_178 + tmp_91);
      real_t tmp_190 = tmp_61*(tmp_180 + tmp_93);
      real_t tmp_191 = tmp_188*tmp_76 + tmp_189*tmp_66 + tmp_190*tmp_86;
      real_t tmp_192 = tmp_188*tmp_74 + tmp_189*tmp_64 + tmp_190*tmp_84;
      real_t tmp_193 = tmp_188*tmp_72 + tmp_189*tmp_50 + tmp_190*tmp_81;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = tmp_100*tmp_187;
      real_t tmp_196 = 0.020848748529055869*tmp_111;
      real_t tmp_197 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_198 = tmp_15*(tmp_197 + tmp_20);
      real_t tmp_199 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_27);
      real_t tmp_201 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_34);
      real_t tmp_203 = tmp_198*tmp_5 + tmp_200*tmp_22 + tmp_202*tmp_29 - 1.0/4.0;
      real_t tmp_204 = tmp_198*tmp_37 + tmp_200*tmp_38 + tmp_202*tmp_39 - 1.0/4.0;
      real_t tmp_205 = tmp_198*tmp_41 + tmp_200*tmp_42 + tmp_202*tmp_43 - 1.0/4.0;
      real_t tmp_206 = tmp_0*tmp_203 + tmp_2*tmp_205 + tmp_204*tmp_4;
      real_t tmp_207 = tmp_10*tmp_204 + tmp_203*tmp_9 + tmp_205*tmp_7;
      real_t tmp_208 = tmp_1*tmp_204 + tmp_203*tmp_6 + tmp_205*tmp_3;
      real_t tmp_209 = tmp_61*(tmp_197 + tmp_89);
      real_t tmp_210 = tmp_61*(tmp_199 + tmp_91);
      real_t tmp_211 = tmp_61*(tmp_201 + tmp_93);
      real_t tmp_212 = tmp_209*tmp_76 + tmp_210*tmp_66 + tmp_211*tmp_86;
      real_t tmp_213 = tmp_209*tmp_74 + tmp_210*tmp_64 + tmp_211*tmp_84;
      real_t tmp_214 = tmp_209*tmp_72 + tmp_210*tmp_50 + tmp_211*tmp_81;
      real_t tmp_215 = -tmp_212 - tmp_213 - tmp_214 + 1;
      real_t tmp_216 = tmp_100*tmp_208;
      real_t tmp_217 = 0.019202922745021479*tmp_111;
      real_t tmp_218 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_219 = tmp_15*(tmp_20 + tmp_218);
      real_t tmp_220 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_221 = tmp_15*(tmp_220 + tmp_27);
      real_t tmp_222 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_223 = tmp_15*(tmp_222 + tmp_34);
      real_t tmp_224 = tmp_219*tmp_5 + tmp_22*tmp_221 + tmp_223*tmp_29 - 1.0/4.0;
      real_t tmp_225 = tmp_219*tmp_37 + tmp_221*tmp_38 + tmp_223*tmp_39 - 1.0/4.0;
      real_t tmp_226 = tmp_219*tmp_41 + tmp_221*tmp_42 + tmp_223*tmp_43 - 1.0/4.0;
      real_t tmp_227 = tmp_0*tmp_224 + tmp_2*tmp_226 + tmp_225*tmp_4;
      real_t tmp_228 = tmp_10*tmp_225 + tmp_224*tmp_9 + tmp_226*tmp_7;
      real_t tmp_229 = tmp_1*tmp_225 + tmp_224*tmp_6 + tmp_226*tmp_3;
      real_t tmp_230 = tmp_61*(tmp_218 + tmp_89);
      real_t tmp_231 = tmp_61*(tmp_220 + tmp_91);
      real_t tmp_232 = tmp_61*(tmp_222 + tmp_93);
      real_t tmp_233 = tmp_230*tmp_76 + tmp_231*tmp_66 + tmp_232*tmp_86;
      real_t tmp_234 = tmp_230*tmp_74 + tmp_231*tmp_64 + tmp_232*tmp_84;
      real_t tmp_235 = tmp_230*tmp_72 + tmp_231*tmp_50 + tmp_232*tmp_81;
      real_t tmp_236 = -tmp_233 - tmp_234 - tmp_235 + 1;
      real_t tmp_237 = tmp_100*tmp_229;
      real_t tmp_238 = 0.020848748529055869*tmp_111;
      real_t tmp_239 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_240 = tmp_15*(tmp_20 + tmp_239);
      real_t tmp_241 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_242 = tmp_15*(tmp_241 + tmp_27);
      real_t tmp_243 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_244 = tmp_15*(tmp_243 + tmp_34);
      real_t tmp_245 = tmp_22*tmp_242 + tmp_240*tmp_5 + tmp_244*tmp_29 - 1.0/4.0;
      real_t tmp_246 = tmp_240*tmp_37 + tmp_242*tmp_38 + tmp_244*tmp_39 - 1.0/4.0;
      real_t tmp_247 = tmp_240*tmp_41 + tmp_242*tmp_42 + tmp_244*tmp_43 - 1.0/4.0;
      real_t tmp_248 = tmp_0*tmp_245 + tmp_2*tmp_247 + tmp_246*tmp_4;
      real_t tmp_249 = tmp_10*tmp_246 + tmp_245*tmp_9 + tmp_247*tmp_7;
      real_t tmp_250 = tmp_1*tmp_246 + tmp_245*tmp_6 + tmp_247*tmp_3;
      real_t tmp_251 = tmp_61*(tmp_239 + tmp_89);
      real_t tmp_252 = tmp_61*(tmp_241 + tmp_91);
      real_t tmp_253 = tmp_61*(tmp_243 + tmp_93);
      real_t tmp_254 = tmp_251*tmp_76 + tmp_252*tmp_66 + tmp_253*tmp_86;
      real_t tmp_255 = tmp_251*tmp_74 + tmp_252*tmp_64 + tmp_253*tmp_84;
      real_t tmp_256 = tmp_251*tmp_72 + tmp_252*tmp_50 + tmp_253*tmp_81;
      real_t tmp_257 = -tmp_254 - tmp_255 - tmp_256 + 1;
      real_t tmp_258 = tmp_100*tmp_250;
      real_t tmp_259 = 0.019202922745021479*tmp_111;
      real_t tmp_260 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_261 = tmp_15*(tmp_20 + tmp_260);
      real_t tmp_262 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_263 = tmp_15*(tmp_262 + tmp_27);
      real_t tmp_264 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_265 = tmp_15*(tmp_264 + tmp_34);
      real_t tmp_266 = tmp_22*tmp_263 + tmp_261*tmp_5 + tmp_265*tmp_29 - 1.0/4.0;
      real_t tmp_267 = tmp_261*tmp_37 + tmp_263*tmp_38 + tmp_265*tmp_39 - 1.0/4.0;
      real_t tmp_268 = tmp_261*tmp_41 + tmp_263*tmp_42 + tmp_265*tmp_43 - 1.0/4.0;
      real_t tmp_269 = tmp_0*tmp_266 + tmp_2*tmp_268 + tmp_267*tmp_4;
      real_t tmp_270 = tmp_10*tmp_267 + tmp_266*tmp_9 + tmp_268*tmp_7;
      real_t tmp_271 = tmp_1*tmp_267 + tmp_266*tmp_6 + tmp_268*tmp_3;
      real_t tmp_272 = tmp_61*(tmp_260 + tmp_89);
      real_t tmp_273 = tmp_61*(tmp_262 + tmp_91);
      real_t tmp_274 = tmp_61*(tmp_264 + tmp_93);
      real_t tmp_275 = tmp_272*tmp_76 + tmp_273*tmp_66 + tmp_274*tmp_86;
      real_t tmp_276 = tmp_272*tmp_74 + tmp_273*tmp_64 + tmp_274*tmp_84;
      real_t tmp_277 = tmp_272*tmp_72 + tmp_273*tmp_50 + tmp_274*tmp_81;
      real_t tmp_278 = -tmp_275 - tmp_276 - tmp_277 + 1;
      real_t tmp_279 = tmp_100*tmp_271;
      real_t tmp_280 = 0.020848748529055869*tmp_111;
      real_t tmp_281 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_282 = tmp_15*(tmp_20 + tmp_281);
      real_t tmp_283 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_284 = tmp_15*(tmp_27 + tmp_283);
      real_t tmp_285 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_286 = tmp_15*(tmp_285 + tmp_34);
      real_t tmp_287 = tmp_22*tmp_284 + tmp_282*tmp_5 + tmp_286*tmp_29 - 1.0/4.0;
      real_t tmp_288 = tmp_282*tmp_37 + tmp_284*tmp_38 + tmp_286*tmp_39 - 1.0/4.0;
      real_t tmp_289 = tmp_282*tmp_41 + tmp_284*tmp_42 + tmp_286*tmp_43 - 1.0/4.0;
      real_t tmp_290 = tmp_0*tmp_287 + tmp_2*tmp_289 + tmp_288*tmp_4;
      real_t tmp_291 = tmp_10*tmp_288 + tmp_287*tmp_9 + tmp_289*tmp_7;
      real_t tmp_292 = tmp_1*tmp_288 + tmp_287*tmp_6 + tmp_289*tmp_3;
      real_t tmp_293 = tmp_61*(tmp_281 + tmp_89);
      real_t tmp_294 = tmp_61*(tmp_283 + tmp_91);
      real_t tmp_295 = tmp_61*(tmp_285 + tmp_93);
      real_t tmp_296 = tmp_293*tmp_76 + tmp_294*tmp_66 + tmp_295*tmp_86;
      real_t tmp_297 = tmp_293*tmp_74 + tmp_294*tmp_64 + tmp_295*tmp_84;
      real_t tmp_298 = tmp_293*tmp_72 + tmp_294*tmp_50 + tmp_295*tmp_81;
      real_t tmp_299 = -tmp_296 - tmp_297 - tmp_298 + 1;
      real_t tmp_300 = tmp_100*tmp_292;
      real_t tmp_301 = 0.019202922745021479*tmp_111;
      real_t tmp_302 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_303 = tmp_15*(tmp_20 + tmp_302);
      real_t tmp_304 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_305 = tmp_15*(tmp_27 + tmp_304);
      real_t tmp_306 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_307 = tmp_15*(tmp_306 + tmp_34);
      real_t tmp_308 = tmp_22*tmp_305 + tmp_29*tmp_307 + tmp_303*tmp_5 - 1.0/4.0;
      real_t tmp_309 = tmp_303*tmp_37 + tmp_305*tmp_38 + tmp_307*tmp_39 - 1.0/4.0;
      real_t tmp_310 = tmp_303*tmp_41 + tmp_305*tmp_42 + tmp_307*tmp_43 - 1.0/4.0;
      real_t tmp_311 = tmp_0*tmp_308 + tmp_2*tmp_310 + tmp_309*tmp_4;
      real_t tmp_312 = tmp_10*tmp_309 + tmp_308*tmp_9 + tmp_310*tmp_7;
      real_t tmp_313 = tmp_1*tmp_309 + tmp_3*tmp_310 + tmp_308*tmp_6;
      real_t tmp_314 = tmp_61*(tmp_302 + tmp_89);
      real_t tmp_315 = tmp_61*(tmp_304 + tmp_91);
      real_t tmp_316 = tmp_61*(tmp_306 + tmp_93);
      real_t tmp_317 = tmp_314*tmp_76 + tmp_315*tmp_66 + tmp_316*tmp_86;
      real_t tmp_318 = tmp_314*tmp_74 + tmp_315*tmp_64 + tmp_316*tmp_84;
      real_t tmp_319 = tmp_314*tmp_72 + tmp_315*tmp_50 + tmp_316*tmp_81;
      real_t tmp_320 = -tmp_317 - tmp_318 - tmp_319 + 1;
      real_t tmp_321 = tmp_100*tmp_313;
      real_t tmp_322 = 0.020848748529055869*tmp_111;
      real_t tmp_323 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_324 = tmp_15*(tmp_20 + tmp_323);
      real_t tmp_325 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_326 = tmp_15*(tmp_27 + tmp_325);
      real_t tmp_327 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_328 = tmp_15*(tmp_327 + tmp_34);
      real_t tmp_329 = tmp_22*tmp_326 + tmp_29*tmp_328 + tmp_324*tmp_5 - 1.0/4.0;
      real_t tmp_330 = tmp_324*tmp_37 + tmp_326*tmp_38 + tmp_328*tmp_39 - 1.0/4.0;
      real_t tmp_331 = tmp_324*tmp_41 + tmp_326*tmp_42 + tmp_328*tmp_43 - 1.0/4.0;
      real_t tmp_332 = tmp_0*tmp_329 + tmp_2*tmp_331 + tmp_330*tmp_4;
      real_t tmp_333 = tmp_10*tmp_330 + tmp_329*tmp_9 + tmp_331*tmp_7;
      real_t tmp_334 = tmp_1*tmp_330 + tmp_3*tmp_331 + tmp_329*tmp_6;
      real_t tmp_335 = tmp_61*(tmp_323 + tmp_89);
      real_t tmp_336 = tmp_61*(tmp_325 + tmp_91);
      real_t tmp_337 = tmp_61*(tmp_327 + tmp_93);
      real_t tmp_338 = tmp_335*tmp_76 + tmp_336*tmp_66 + tmp_337*tmp_86;
      real_t tmp_339 = tmp_335*tmp_74 + tmp_336*tmp_64 + tmp_337*tmp_84;
      real_t tmp_340 = tmp_335*tmp_72 + tmp_336*tmp_50 + tmp_337*tmp_81;
      real_t tmp_341 = -tmp_338 - tmp_339 - tmp_340 + 1;
      real_t tmp_342 = tmp_100*tmp_334;
      real_t tmp_343 = 0.019202922745021479*tmp_111;
      real_t tmp_344 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_345 = tmp_15*(tmp_20 + tmp_344);
      real_t tmp_346 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_347 = tmp_15*(tmp_27 + tmp_346);
      real_t tmp_348 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_349 = tmp_15*(tmp_34 + tmp_348);
      real_t tmp_350 = tmp_22*tmp_347 + tmp_29*tmp_349 + tmp_345*tmp_5 - 1.0/4.0;
      real_t tmp_351 = tmp_345*tmp_37 + tmp_347*tmp_38 + tmp_349*tmp_39 - 1.0/4.0;
      real_t tmp_352 = tmp_345*tmp_41 + tmp_347*tmp_42 + tmp_349*tmp_43 - 1.0/4.0;
      real_t tmp_353 = tmp_0*tmp_350 + tmp_2*tmp_352 + tmp_351*tmp_4;
      real_t tmp_354 = tmp_10*tmp_351 + tmp_350*tmp_9 + tmp_352*tmp_7;
      real_t tmp_355 = tmp_1*tmp_351 + tmp_3*tmp_352 + tmp_350*tmp_6;
      real_t tmp_356 = tmp_61*(tmp_344 + tmp_89);
      real_t tmp_357 = tmp_61*(tmp_346 + tmp_91);
      real_t tmp_358 = tmp_61*(tmp_348 + tmp_93);
      real_t tmp_359 = tmp_356*tmp_76 + tmp_357*tmp_66 + tmp_358*tmp_86;
      real_t tmp_360 = tmp_356*tmp_74 + tmp_357*tmp_64 + tmp_358*tmp_84;
      real_t tmp_361 = tmp_356*tmp_72 + tmp_357*tmp_50 + tmp_358*tmp_81;
      real_t tmp_362 = -tmp_359 - tmp_360 - tmp_361 + 1;
      real_t tmp_363 = tmp_100*tmp_355;
      real_t tmp_364 = 0.042507265838595799*tmp_111;
      real_t tmp_365 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_366 = tmp_15*(tmp_20 + tmp_365);
      real_t tmp_367 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_368 = tmp_15*(tmp_27 + tmp_367);
      real_t tmp_369 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_370 = tmp_15*(tmp_34 + tmp_369);
      real_t tmp_371 = tmp_22*tmp_368 + tmp_29*tmp_370 + tmp_366*tmp_5 - 1.0/4.0;
      real_t tmp_372 = tmp_366*tmp_37 + tmp_368*tmp_38 + tmp_370*tmp_39 - 1.0/4.0;
      real_t tmp_373 = tmp_366*tmp_41 + tmp_368*tmp_42 + tmp_370*tmp_43 - 1.0/4.0;
      real_t tmp_374 = tmp_0*tmp_371 + tmp_2*tmp_373 + tmp_372*tmp_4;
      real_t tmp_375 = tmp_10*tmp_372 + tmp_371*tmp_9 + tmp_373*tmp_7;
      real_t tmp_376 = tmp_1*tmp_372 + tmp_3*tmp_373 + tmp_371*tmp_6;
      real_t tmp_377 = tmp_61*(tmp_365 + tmp_89);
      real_t tmp_378 = tmp_61*(tmp_367 + tmp_91);
      real_t tmp_379 = tmp_61*(tmp_369 + tmp_93);
      real_t tmp_380 = tmp_377*tmp_76 + tmp_378*tmp_66 + tmp_379*tmp_86;
      real_t tmp_381 = tmp_377*tmp_74 + tmp_378*tmp_64 + tmp_379*tmp_84;
      real_t tmp_382 = tmp_377*tmp_72 + tmp_378*tmp_50 + tmp_379*tmp_81;
      real_t tmp_383 = -tmp_380 - tmp_381 - tmp_382 + 1;
      real_t tmp_384 = tmp_100*tmp_376;
      real_t tmp_385 = 0.020848748529055869*tmp_111;
      real_t tmp_386 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_387 = tmp_15*(tmp_20 + tmp_386);
      real_t tmp_388 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_389 = tmp_15*(tmp_27 + tmp_388);
      real_t tmp_390 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_391 = tmp_15*(tmp_34 + tmp_390);
      real_t tmp_392 = tmp_22*tmp_389 + tmp_29*tmp_391 + tmp_387*tmp_5 - 1.0/4.0;
      real_t tmp_393 = tmp_37*tmp_387 + tmp_38*tmp_389 + tmp_39*tmp_391 - 1.0/4.0;
      real_t tmp_394 = tmp_387*tmp_41 + tmp_389*tmp_42 + tmp_391*tmp_43 - 1.0/4.0;
      real_t tmp_395 = tmp_0*tmp_392 + tmp_2*tmp_394 + tmp_393*tmp_4;
      real_t tmp_396 = tmp_10*tmp_393 + tmp_392*tmp_9 + tmp_394*tmp_7;
      real_t tmp_397 = tmp_1*tmp_393 + tmp_3*tmp_394 + tmp_392*tmp_6;
      real_t tmp_398 = tmp_61*(tmp_386 + tmp_89);
      real_t tmp_399 = tmp_61*(tmp_388 + tmp_91);
      real_t tmp_400 = tmp_61*(tmp_390 + tmp_93);
      real_t tmp_401 = tmp_398*tmp_76 + tmp_399*tmp_66 + tmp_400*tmp_86;
      real_t tmp_402 = tmp_398*tmp_74 + tmp_399*tmp_64 + tmp_400*tmp_84;
      real_t tmp_403 = tmp_398*tmp_72 + tmp_399*tmp_50 + tmp_400*tmp_81;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_100*tmp_397;
      real_t tmp_406 = 0.0068572537431980923*tmp_111;
      real_t tmp_407 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_408 = tmp_15*(tmp_20 + tmp_407);
      real_t tmp_409 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_410 = tmp_15*(tmp_27 + tmp_409);
      real_t tmp_411 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_412 = tmp_15*(tmp_34 + tmp_411);
      real_t tmp_413 = tmp_22*tmp_410 + tmp_29*tmp_412 + tmp_408*tmp_5 - 1.0/4.0;
      real_t tmp_414 = tmp_37*tmp_408 + tmp_38*tmp_410 + tmp_39*tmp_412 - 1.0/4.0;
      real_t tmp_415 = tmp_408*tmp_41 + tmp_410*tmp_42 + tmp_412*tmp_43 - 1.0/4.0;
      real_t tmp_416 = tmp_0*tmp_413 + tmp_2*tmp_415 + tmp_4*tmp_414;
      real_t tmp_417 = tmp_10*tmp_414 + tmp_413*tmp_9 + tmp_415*tmp_7;
      real_t tmp_418 = tmp_1*tmp_414 + tmp_3*tmp_415 + tmp_413*tmp_6;
      real_t tmp_419 = tmp_61*(tmp_407 + tmp_89);
      real_t tmp_420 = tmp_61*(tmp_409 + tmp_91);
      real_t tmp_421 = tmp_61*(tmp_411 + tmp_93);
      real_t tmp_422 = tmp_419*tmp_76 + tmp_420*tmp_66 + tmp_421*tmp_86;
      real_t tmp_423 = tmp_419*tmp_74 + tmp_420*tmp_64 + tmp_421*tmp_84;
      real_t tmp_424 = tmp_419*tmp_72 + tmp_420*tmp_50 + tmp_421*tmp_81;
      real_t tmp_425 = -tmp_422 - tmp_423 - tmp_424 + 1;
      real_t tmp_426 = tmp_100*tmp_418;
      real_t tmp_427 = 0.037198804536718075*tmp_111;
      real_t tmp_428 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_429 = tmp_15*(tmp_20 + tmp_428);
      real_t tmp_430 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_431 = tmp_15*(tmp_27 + tmp_430);
      real_t tmp_432 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_433 = tmp_15*(tmp_34 + tmp_432);
      real_t tmp_434 = tmp_22*tmp_431 + tmp_29*tmp_433 + tmp_429*tmp_5 - 1.0/4.0;
      real_t tmp_435 = tmp_37*tmp_429 + tmp_38*tmp_431 + tmp_39*tmp_433 - 1.0/4.0;
      real_t tmp_436 = tmp_41*tmp_429 + tmp_42*tmp_431 + tmp_43*tmp_433 - 1.0/4.0;
      real_t tmp_437 = tmp_0*tmp_434 + tmp_2*tmp_436 + tmp_4*tmp_435;
      real_t tmp_438 = tmp_10*tmp_435 + tmp_434*tmp_9 + tmp_436*tmp_7;
      real_t tmp_439 = tmp_1*tmp_435 + tmp_3*tmp_436 + tmp_434*tmp_6;
      real_t tmp_440 = tmp_61*(tmp_428 + tmp_89);
      real_t tmp_441 = tmp_61*(tmp_430 + tmp_91);
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_93);
      real_t tmp_443 = tmp_440*tmp_76 + tmp_441*tmp_66 + tmp_442*tmp_86;
      real_t tmp_444 = tmp_440*tmp_74 + tmp_441*tmp_64 + tmp_442*tmp_84;
      real_t tmp_445 = tmp_440*tmp_72 + tmp_441*tmp_50 + tmp_442*tmp_81;
      real_t tmp_446 = -tmp_443 - tmp_444 - tmp_445 + 1;
      real_t tmp_447 = tmp_100*tmp_439;
      real_t tmp_448 = 0.042507265838595799*tmp_111;
      real_t tmp_449 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_450 = tmp_15*(tmp_20 + tmp_449);
      real_t tmp_451 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_452 = tmp_15*(tmp_27 + tmp_451);
      real_t tmp_453 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_454 = tmp_15*(tmp_34 + tmp_453);
      real_t tmp_455 = tmp_22*tmp_452 + tmp_29*tmp_454 + tmp_450*tmp_5 - 1.0/4.0;
      real_t tmp_456 = tmp_37*tmp_450 + tmp_38*tmp_452 + tmp_39*tmp_454 - 1.0/4.0;
      real_t tmp_457 = tmp_41*tmp_450 + tmp_42*tmp_452 + tmp_43*tmp_454 - 1.0/4.0;
      real_t tmp_458 = tmp_0*tmp_455 + tmp_2*tmp_457 + tmp_4*tmp_456;
      real_t tmp_459 = tmp_10*tmp_456 + tmp_455*tmp_9 + tmp_457*tmp_7;
      real_t tmp_460 = tmp_1*tmp_456 + tmp_3*tmp_457 + tmp_455*tmp_6;
      real_t tmp_461 = tmp_61*(tmp_449 + tmp_89);
      real_t tmp_462 = tmp_61*(tmp_451 + tmp_91);
      real_t tmp_463 = tmp_61*(tmp_453 + tmp_93);
      real_t tmp_464 = tmp_461*tmp_76 + tmp_462*tmp_66 + tmp_463*tmp_86;
      real_t tmp_465 = tmp_461*tmp_74 + tmp_462*tmp_64 + tmp_463*tmp_84;
      real_t tmp_466 = tmp_461*tmp_72 + tmp_462*tmp_50 + tmp_463*tmp_81;
      real_t tmp_467 = -tmp_464 - tmp_465 - tmp_466 + 1;
      real_t tmp_468 = tmp_100*tmp_460;
      real_t tmp_469 = 0.0068572537431980923*tmp_111;
      real_t tmp_470 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_471 = tmp_15*(tmp_20 + tmp_470);
      real_t tmp_472 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_473 = tmp_15*(tmp_27 + tmp_472);
      real_t tmp_474 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_475 = tmp_15*(tmp_34 + tmp_474);
      real_t tmp_476 = tmp_22*tmp_473 + tmp_29*tmp_475 + tmp_471*tmp_5 - 1.0/4.0;
      real_t tmp_477 = tmp_37*tmp_471 + tmp_38*tmp_473 + tmp_39*tmp_475 - 1.0/4.0;
      real_t tmp_478 = tmp_41*tmp_471 + tmp_42*tmp_473 + tmp_43*tmp_475 - 1.0/4.0;
      real_t tmp_479 = tmp_0*tmp_476 + tmp_2*tmp_478 + tmp_4*tmp_477;
      real_t tmp_480 = tmp_10*tmp_477 + tmp_476*tmp_9 + tmp_478*tmp_7;
      real_t tmp_481 = tmp_1*tmp_477 + tmp_3*tmp_478 + tmp_476*tmp_6;
      real_t tmp_482 = tmp_61*(tmp_470 + tmp_89);
      real_t tmp_483 = tmp_61*(tmp_472 + tmp_91);
      real_t tmp_484 = tmp_61*(tmp_474 + tmp_93);
      real_t tmp_485 = tmp_482*tmp_76 + tmp_483*tmp_66 + tmp_484*tmp_86;
      real_t tmp_486 = tmp_482*tmp_74 + tmp_483*tmp_64 + tmp_484*tmp_84;
      real_t tmp_487 = tmp_482*tmp_72 + tmp_483*tmp_50 + tmp_484*tmp_81;
      real_t tmp_488 = -tmp_485 - tmp_486 - tmp_487 + 1;
      real_t tmp_489 = tmp_100*tmp_481;
      real_t tmp_490 = 0.037198804536718075*tmp_111;
      real_t tmp_491 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_492 = tmp_15*(tmp_20 + tmp_491);
      real_t tmp_493 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_494 = tmp_15*(tmp_27 + tmp_493);
      real_t tmp_495 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_496 = tmp_15*(tmp_34 + tmp_495);
      real_t tmp_497 = tmp_22*tmp_494 + tmp_29*tmp_496 + tmp_492*tmp_5 - 1.0/4.0;
      real_t tmp_498 = tmp_37*tmp_492 + tmp_38*tmp_494 + tmp_39*tmp_496 - 1.0/4.0;
      real_t tmp_499 = tmp_41*tmp_492 + tmp_42*tmp_494 + tmp_43*tmp_496 - 1.0/4.0;
      real_t tmp_500 = tmp_0*tmp_497 + tmp_2*tmp_499 + tmp_4*tmp_498;
      real_t tmp_501 = tmp_10*tmp_498 + tmp_497*tmp_9 + tmp_499*tmp_7;
      real_t tmp_502 = tmp_1*tmp_498 + tmp_3*tmp_499 + tmp_497*tmp_6;
      real_t tmp_503 = tmp_61*(tmp_491 + tmp_89);
      real_t tmp_504 = tmp_61*(tmp_493 + tmp_91);
      real_t tmp_505 = tmp_61*(tmp_495 + tmp_93);
      real_t tmp_506 = tmp_503*tmp_76 + tmp_504*tmp_66 + tmp_505*tmp_86;
      real_t tmp_507 = tmp_503*tmp_74 + tmp_504*tmp_64 + tmp_505*tmp_84;
      real_t tmp_508 = tmp_50*tmp_504 + tmp_503*tmp_72 + tmp_505*tmp_81;
      real_t tmp_509 = -tmp_506 - tmp_507 - tmp_508 + 1;
      real_t tmp_510 = tmp_100*tmp_502;
      real_t tmp_511 = 0.042507265838595799*tmp_111;
      real_t tmp_512 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_513 = tmp_15*(tmp_20 + tmp_512);
      real_t tmp_514 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_515 = tmp_15*(tmp_27 + tmp_514);
      real_t tmp_516 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_517 = tmp_15*(tmp_34 + tmp_516);
      real_t tmp_518 = tmp_22*tmp_515 + tmp_29*tmp_517 + tmp_5*tmp_513 - 1.0/4.0;
      real_t tmp_519 = tmp_37*tmp_513 + tmp_38*tmp_515 + tmp_39*tmp_517 - 1.0/4.0;
      real_t tmp_520 = tmp_41*tmp_513 + tmp_42*tmp_515 + tmp_43*tmp_517 - 1.0/4.0;
      real_t tmp_521 = tmp_0*tmp_518 + tmp_2*tmp_520 + tmp_4*tmp_519;
      real_t tmp_522 = tmp_10*tmp_519 + tmp_518*tmp_9 + tmp_520*tmp_7;
      real_t tmp_523 = tmp_1*tmp_519 + tmp_3*tmp_520 + tmp_518*tmp_6;
      real_t tmp_524 = tmp_61*(tmp_512 + tmp_89);
      real_t tmp_525 = tmp_61*(tmp_514 + tmp_91);
      real_t tmp_526 = tmp_61*(tmp_516 + tmp_93);
      real_t tmp_527 = tmp_524*tmp_76 + tmp_525*tmp_66 + tmp_526*tmp_86;
      real_t tmp_528 = tmp_524*tmp_74 + tmp_525*tmp_64 + tmp_526*tmp_84;
      real_t tmp_529 = tmp_50*tmp_525 + tmp_524*tmp_72 + tmp_526*tmp_81;
      real_t tmp_530 = -tmp_527 - tmp_528 - tmp_529 + 1;
      real_t tmp_531 = tmp_100*tmp_523;
      real_t tmp_532 = 0.019202922745021479*tmp_111;
      real_t tmp_533 = p_affine_13_0*tmp_77;
      real_t tmp_534 = p_affine_13_0*tmp_67;
      real_t tmp_535 = 1.0*p_affine_13_0*tmp_87 + 1.0*p_affine_13_1*tmp_67 + 1.0*p_affine_13_2*tmp_77;
      real_t tmp_536 = p_affine_13_0*tmp_75;
      real_t tmp_537 = p_affine_13_0*tmp_65;
      real_t tmp_538 = 1.0*p_affine_13_0*tmp_85 + 1.0*p_affine_13_1*tmp_65 + 1.0*p_affine_13_2*tmp_75;
      real_t tmp_539 = p_affine_13_0*tmp_73;
      real_t tmp_540 = p_affine_13_0*tmp_63;
      real_t tmp_541 = 1.0*p_affine_13_0*tmp_83 + 1.0*p_affine_13_1*tmp_63 + 1.0*p_affine_13_2*tmp_73;
      real_t a_0_0 = tmp_112*(-tmp_101*tmp_98 + tmp_110*tmp_98 - tmp_45*tmp_70 - tmp_71*tmp_79 - tmp_80*tmp_88) + tmp_133*(tmp_110*tmp_131 - tmp_122*tmp_70 - tmp_123*tmp_79 - tmp_124*tmp_88 - tmp_131*tmp_132) + tmp_154*(tmp_110*tmp_152 - tmp_143*tmp_70 - tmp_144*tmp_79 - tmp_145*tmp_88 - tmp_152*tmp_153) + tmp_175*(tmp_110*tmp_173 - tmp_164*tmp_70 - tmp_165*tmp_79 - tmp_166*tmp_88 - tmp_173*tmp_174) + tmp_196*(tmp_110*tmp_194 - tmp_185*tmp_70 - tmp_186*tmp_79 - tmp_187*tmp_88 - tmp_194*tmp_195) + tmp_217*(tmp_110*tmp_215 - tmp_206*tmp_70 - tmp_207*tmp_79 - tmp_208*tmp_88 - tmp_215*tmp_216) + tmp_238*(tmp_110*tmp_236 - tmp_227*tmp_70 - tmp_228*tmp_79 - tmp_229*tmp_88 - tmp_236*tmp_237) + tmp_259*(tmp_110*tmp_257 - tmp_248*tmp_70 - tmp_249*tmp_79 - tmp_250*tmp_88 - tmp_257*tmp_258) + tmp_280*(tmp_110*tmp_278 - tmp_269*tmp_70 - tmp_270*tmp_79 - tmp_271*tmp_88 - tmp_278*tmp_279) + tmp_301*(tmp_110*tmp_299 - tmp_290*tmp_70 - tmp_291*tmp_79 - tmp_292*tmp_88 - tmp_299*tmp_300) + tmp_322*(tmp_110*tmp_320 - tmp_311*tmp_70 - tmp_312*tmp_79 - tmp_313*tmp_88 - tmp_320*tmp_321) + tmp_343*(tmp_110*tmp_341 - tmp_332*tmp_70 - tmp_333*tmp_79 - tmp_334*tmp_88 - tmp_341*tmp_342) + tmp_364*(tmp_110*tmp_362 - tmp_353*tmp_70 - tmp_354*tmp_79 - tmp_355*tmp_88 - tmp_362*tmp_363) + tmp_385*(tmp_110*tmp_383 - tmp_374*tmp_70 - tmp_375*tmp_79 - tmp_376*tmp_88 - tmp_383*tmp_384) + tmp_406*(tmp_110*tmp_404 - tmp_395*tmp_70 - tmp_396*tmp_79 - tmp_397*tmp_88 - tmp_404*tmp_405) + tmp_427*(tmp_110*tmp_425 - tmp_416*tmp_70 - tmp_417*tmp_79 - tmp_418*tmp_88 - tmp_425*tmp_426) + tmp_448*(tmp_110*tmp_446 - tmp_437*tmp_70 - tmp_438*tmp_79 - tmp_439*tmp_88 - tmp_446*tmp_447) + tmp_469*(tmp_110*tmp_467 - tmp_458*tmp_70 - tmp_459*tmp_79 - tmp_460*tmp_88 - tmp_467*tmp_468) + tmp_490*(tmp_110*tmp_488 - tmp_479*tmp_70 - tmp_480*tmp_79 - tmp_481*tmp_88 - tmp_488*tmp_489) + tmp_511*(tmp_110*tmp_509 - tmp_500*tmp_70 - tmp_501*tmp_79 - tmp_502*tmp_88 - tmp_509*tmp_510) + tmp_532*(tmp_110*tmp_530 - tmp_521*tmp_70 - tmp_522*tmp_79 - tmp_523*tmp_88 - tmp_530*tmp_531);
      real_t a_0_1 = tmp_112*(-tmp_101*tmp_95 + tmp_110*tmp_95 - tmp_45*tmp_534 - tmp_533*tmp_71 - tmp_535*tmp_80) + tmp_133*(tmp_110*tmp_128 - tmp_122*tmp_534 - tmp_123*tmp_533 - tmp_124*tmp_535 - tmp_128*tmp_132) + tmp_154*(tmp_110*tmp_149 - tmp_143*tmp_534 - tmp_144*tmp_533 - tmp_145*tmp_535 - tmp_149*tmp_153) + tmp_175*(tmp_110*tmp_170 - tmp_164*tmp_534 - tmp_165*tmp_533 - tmp_166*tmp_535 - tmp_170*tmp_174) + tmp_196*(tmp_110*tmp_191 - tmp_185*tmp_534 - tmp_186*tmp_533 - tmp_187*tmp_535 - tmp_191*tmp_195) + tmp_217*(tmp_110*tmp_212 - tmp_206*tmp_534 - tmp_207*tmp_533 - tmp_208*tmp_535 - tmp_212*tmp_216) + tmp_238*(tmp_110*tmp_233 - tmp_227*tmp_534 - tmp_228*tmp_533 - tmp_229*tmp_535 - tmp_233*tmp_237) + tmp_259*(tmp_110*tmp_254 - tmp_248*tmp_534 - tmp_249*tmp_533 - tmp_250*tmp_535 - tmp_254*tmp_258) + tmp_280*(tmp_110*tmp_275 - tmp_269*tmp_534 - tmp_270*tmp_533 - tmp_271*tmp_535 - tmp_275*tmp_279) + tmp_301*(tmp_110*tmp_296 - tmp_290*tmp_534 - tmp_291*tmp_533 - tmp_292*tmp_535 - tmp_296*tmp_300) + tmp_322*(tmp_110*tmp_317 - tmp_311*tmp_534 - tmp_312*tmp_533 - tmp_313*tmp_535 - tmp_317*tmp_321) + tmp_343*(tmp_110*tmp_338 - tmp_332*tmp_534 - tmp_333*tmp_533 - tmp_334*tmp_535 - tmp_338*tmp_342) + tmp_364*(tmp_110*tmp_359 - tmp_353*tmp_534 - tmp_354*tmp_533 - tmp_355*tmp_535 - tmp_359*tmp_363) + tmp_385*(tmp_110*tmp_380 - tmp_374*tmp_534 - tmp_375*tmp_533 - tmp_376*tmp_535 - tmp_380*tmp_384) + tmp_406*(tmp_110*tmp_401 - tmp_395*tmp_534 - tmp_396*tmp_533 - tmp_397*tmp_535 - tmp_401*tmp_405) + tmp_427*(tmp_110*tmp_422 - tmp_416*tmp_534 - tmp_417*tmp_533 - tmp_418*tmp_535 - tmp_422*tmp_426) + tmp_448*(tmp_110*tmp_443 - tmp_437*tmp_534 - tmp_438*tmp_533 - tmp_439*tmp_535 - tmp_443*tmp_447) + tmp_469*(tmp_110*tmp_464 - tmp_458*tmp_534 - tmp_459*tmp_533 - tmp_460*tmp_535 - tmp_464*tmp_468) + tmp_490*(tmp_110*tmp_485 - tmp_479*tmp_534 - tmp_480*tmp_533 - tmp_481*tmp_535 - tmp_485*tmp_489) + tmp_511*(tmp_110*tmp_506 - tmp_500*tmp_534 - tmp_501*tmp_533 - tmp_502*tmp_535 - tmp_506*tmp_510) + tmp_532*(tmp_110*tmp_527 - tmp_521*tmp_534 - tmp_522*tmp_533 - tmp_523*tmp_535 - tmp_527*tmp_531);
      real_t a_0_2 = tmp_112*(-tmp_101*tmp_96 + tmp_110*tmp_96 - tmp_45*tmp_537 - tmp_536*tmp_71 - tmp_538*tmp_80) + tmp_133*(tmp_110*tmp_129 - tmp_122*tmp_537 - tmp_123*tmp_536 - tmp_124*tmp_538 - tmp_129*tmp_132) + tmp_154*(tmp_110*tmp_150 - tmp_143*tmp_537 - tmp_144*tmp_536 - tmp_145*tmp_538 - tmp_150*tmp_153) + tmp_175*(tmp_110*tmp_171 - tmp_164*tmp_537 - tmp_165*tmp_536 - tmp_166*tmp_538 - tmp_171*tmp_174) + tmp_196*(tmp_110*tmp_192 - tmp_185*tmp_537 - tmp_186*tmp_536 - tmp_187*tmp_538 - tmp_192*tmp_195) + tmp_217*(tmp_110*tmp_213 - tmp_206*tmp_537 - tmp_207*tmp_536 - tmp_208*tmp_538 - tmp_213*tmp_216) + tmp_238*(tmp_110*tmp_234 - tmp_227*tmp_537 - tmp_228*tmp_536 - tmp_229*tmp_538 - tmp_234*tmp_237) + tmp_259*(tmp_110*tmp_255 - tmp_248*tmp_537 - tmp_249*tmp_536 - tmp_250*tmp_538 - tmp_255*tmp_258) + tmp_280*(tmp_110*tmp_276 - tmp_269*tmp_537 - tmp_270*tmp_536 - tmp_271*tmp_538 - tmp_276*tmp_279) + tmp_301*(tmp_110*tmp_297 - tmp_290*tmp_537 - tmp_291*tmp_536 - tmp_292*tmp_538 - tmp_297*tmp_300) + tmp_322*(tmp_110*tmp_318 - tmp_311*tmp_537 - tmp_312*tmp_536 - tmp_313*tmp_538 - tmp_318*tmp_321) + tmp_343*(tmp_110*tmp_339 - tmp_332*tmp_537 - tmp_333*tmp_536 - tmp_334*tmp_538 - tmp_339*tmp_342) + tmp_364*(tmp_110*tmp_360 - tmp_353*tmp_537 - tmp_354*tmp_536 - tmp_355*tmp_538 - tmp_360*tmp_363) + tmp_385*(tmp_110*tmp_381 - tmp_374*tmp_537 - tmp_375*tmp_536 - tmp_376*tmp_538 - tmp_381*tmp_384) + tmp_406*(tmp_110*tmp_402 - tmp_395*tmp_537 - tmp_396*tmp_536 - tmp_397*tmp_538 - tmp_402*tmp_405) + tmp_427*(tmp_110*tmp_423 - tmp_416*tmp_537 - tmp_417*tmp_536 - tmp_418*tmp_538 - tmp_423*tmp_426) + tmp_448*(tmp_110*tmp_444 - tmp_437*tmp_537 - tmp_438*tmp_536 - tmp_439*tmp_538 - tmp_444*tmp_447) + tmp_469*(tmp_110*tmp_465 - tmp_458*tmp_537 - tmp_459*tmp_536 - tmp_460*tmp_538 - tmp_465*tmp_468) + tmp_490*(tmp_110*tmp_486 - tmp_479*tmp_537 - tmp_480*tmp_536 - tmp_481*tmp_538 - tmp_486*tmp_489) + tmp_511*(tmp_110*tmp_507 - tmp_500*tmp_537 - tmp_501*tmp_536 - tmp_502*tmp_538 - tmp_507*tmp_510) + tmp_532*(tmp_110*tmp_528 - tmp_521*tmp_537 - tmp_522*tmp_536 - tmp_523*tmp_538 - tmp_528*tmp_531);
      real_t a_0_3 = tmp_112*(-tmp_101*tmp_97 + tmp_110*tmp_97 - tmp_45*tmp_540 - tmp_539*tmp_71 - tmp_541*tmp_80) + tmp_133*(tmp_110*tmp_130 - tmp_122*tmp_540 - tmp_123*tmp_539 - tmp_124*tmp_541 - tmp_130*tmp_132) + tmp_154*(tmp_110*tmp_151 - tmp_143*tmp_540 - tmp_144*tmp_539 - tmp_145*tmp_541 - tmp_151*tmp_153) + tmp_175*(tmp_110*tmp_172 - tmp_164*tmp_540 - tmp_165*tmp_539 - tmp_166*tmp_541 - tmp_172*tmp_174) + tmp_196*(tmp_110*tmp_193 - tmp_185*tmp_540 - tmp_186*tmp_539 - tmp_187*tmp_541 - tmp_193*tmp_195) + tmp_217*(tmp_110*tmp_214 - tmp_206*tmp_540 - tmp_207*tmp_539 - tmp_208*tmp_541 - tmp_214*tmp_216) + tmp_238*(tmp_110*tmp_235 - tmp_227*tmp_540 - tmp_228*tmp_539 - tmp_229*tmp_541 - tmp_235*tmp_237) + tmp_259*(tmp_110*tmp_256 - tmp_248*tmp_540 - tmp_249*tmp_539 - tmp_250*tmp_541 - tmp_256*tmp_258) + tmp_280*(tmp_110*tmp_277 - tmp_269*tmp_540 - tmp_270*tmp_539 - tmp_271*tmp_541 - tmp_277*tmp_279) + tmp_301*(tmp_110*tmp_298 - tmp_290*tmp_540 - tmp_291*tmp_539 - tmp_292*tmp_541 - tmp_298*tmp_300) + tmp_322*(tmp_110*tmp_319 - tmp_311*tmp_540 - tmp_312*tmp_539 - tmp_313*tmp_541 - tmp_319*tmp_321) + tmp_343*(tmp_110*tmp_340 - tmp_332*tmp_540 - tmp_333*tmp_539 - tmp_334*tmp_541 - tmp_340*tmp_342) + tmp_364*(tmp_110*tmp_361 - tmp_353*tmp_540 - tmp_354*tmp_539 - tmp_355*tmp_541 - tmp_361*tmp_363) + tmp_385*(tmp_110*tmp_382 - tmp_374*tmp_540 - tmp_375*tmp_539 - tmp_376*tmp_541 - tmp_382*tmp_384) + tmp_406*(tmp_110*tmp_403 - tmp_395*tmp_540 - tmp_396*tmp_539 - tmp_397*tmp_541 - tmp_403*tmp_405) + tmp_427*(tmp_110*tmp_424 - tmp_416*tmp_540 - tmp_417*tmp_539 - tmp_418*tmp_541 - tmp_424*tmp_426) + tmp_448*(tmp_110*tmp_445 - tmp_437*tmp_540 - tmp_438*tmp_539 - tmp_439*tmp_541 - tmp_445*tmp_447) + tmp_469*(tmp_110*tmp_466 - tmp_458*tmp_540 - tmp_459*tmp_539 - tmp_460*tmp_541 - tmp_466*tmp_468) + tmp_490*(tmp_110*tmp_487 - tmp_479*tmp_540 - tmp_480*tmp_539 - tmp_481*tmp_541 - tmp_487*tmp_489) + tmp_511*(tmp_110*tmp_508 - tmp_500*tmp_540 - tmp_501*tmp_539 - tmp_502*tmp_541 - tmp_508*tmp_510) + tmp_532*(tmp_110*tmp_529 - tmp_521*tmp_540 - tmp_522*tmp_539 - tmp_523*tmp_541 - tmp_529*tmp_531);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_36 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_41 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_2*tmp_44 + tmp_39*tmp_4;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_41*tmp_46;
      real_t tmp_48 = tmp_36*tmp_46;
      real_t tmp_49 = tmp_21*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_0*tmp_50;
      real_t tmp_52 = tmp_10*tmp_39 + tmp_34*tmp_9 + tmp_44*tmp_7;
      real_t tmp_53 = tmp_40*tmp_46;
      real_t tmp_54 = tmp_35*tmp_46;
      real_t tmp_55 = tmp_46*tmp_5;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_0*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_42*tmp_58;
      real_t tmp_60 = tmp_37*tmp_58;
      real_t tmp_61 = tmp_27*tmp_58;
      real_t tmp_62 = p_affine_13_0*(-tmp_59 - tmp_60 - tmp_61) + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_56;
      real_t tmp_63 = tmp_1*tmp_39 + tmp_3*tmp_44 + tmp_34*tmp_6;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_27*tmp_46;
      real_t tmp_68 = tmp_37*tmp_46;
      real_t tmp_69 = tmp_42*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_1*tmp_60 + tmp_3*tmp_59 + tmp_6*tmp_61) + p_affine_13_1*(tmp_0*tmp_67 + tmp_1*tmp_48 + tmp_2*tmp_69 + tmp_3*tmp_47 + tmp_4*tmp_68 + tmp_49*tmp_6) + p_affine_13_2*(tmp_1*tmp_54 + tmp_10*tmp_68 + tmp_3*tmp_53 + tmp_55*tmp_6 + tmp_67*tmp_9 + tmp_69*tmp_7);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_2*tmp_81 + tmp_4*tmp_79;
      real_t tmp_83 = tmp_10*tmp_79 + tmp_7*tmp_81 + tmp_77*tmp_9;
      real_t tmp_84 = tmp_1*tmp_79 + tmp_3*tmp_81 + tmp_6*tmp_77;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_2*tmp_95 + tmp_4*tmp_93;
      real_t tmp_97 = tmp_10*tmp_93 + tmp_7*tmp_95 + tmp_9*tmp_91;
      real_t tmp_98 = tmp_1*tmp_93 + tmp_3*tmp_95 + tmp_6*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_111 = tmp_10*tmp_107 + tmp_105*tmp_9 + tmp_109*tmp_7;
      real_t tmp_112 = tmp_1*tmp_107 + tmp_105*tmp_6 + tmp_109*tmp_3;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_125 = tmp_10*tmp_121 + tmp_119*tmp_9 + tmp_123*tmp_7;
      real_t tmp_126 = tmp_1*tmp_121 + tmp_119*tmp_6 + tmp_123*tmp_3;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_139 = tmp_10*tmp_135 + tmp_133*tmp_9 + tmp_137*tmp_7;
      real_t tmp_140 = tmp_1*tmp_135 + tmp_133*tmp_6 + tmp_137*tmp_3;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_153 = tmp_10*tmp_149 + tmp_147*tmp_9 + tmp_151*tmp_7;
      real_t tmp_154 = tmp_1*tmp_149 + tmp_147*tmp_6 + tmp_151*tmp_3;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_167 = tmp_10*tmp_163 + tmp_161*tmp_9 + tmp_165*tmp_7;
      real_t tmp_168 = tmp_1*tmp_163 + tmp_161*tmp_6 + tmp_165*tmp_3;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_181 = tmp_10*tmp_177 + tmp_175*tmp_9 + tmp_179*tmp_7;
      real_t tmp_182 = tmp_1*tmp_177 + tmp_175*tmp_6 + tmp_179*tmp_3;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_195 = tmp_10*tmp_191 + tmp_189*tmp_9 + tmp_193*tmp_7;
      real_t tmp_196 = tmp_1*tmp_191 + tmp_189*tmp_6 + tmp_193*tmp_3;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_2*tmp_207 + tmp_205*tmp_4;
      real_t tmp_209 = tmp_10*tmp_205 + tmp_203*tmp_9 + tmp_207*tmp_7;
      real_t tmp_210 = tmp_1*tmp_205 + tmp_203*tmp_6 + tmp_207*tmp_3;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_2*tmp_221 + tmp_219*tmp_4;
      real_t tmp_223 = tmp_10*tmp_219 + tmp_217*tmp_9 + tmp_221*tmp_7;
      real_t tmp_224 = tmp_1*tmp_219 + tmp_217*tmp_6 + tmp_221*tmp_3;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_2*tmp_235 + tmp_233*tmp_4;
      real_t tmp_237 = tmp_10*tmp_233 + tmp_231*tmp_9 + tmp_235*tmp_7;
      real_t tmp_238 = tmp_1*tmp_233 + tmp_231*tmp_6 + tmp_235*tmp_3;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_2*tmp_249 + tmp_247*tmp_4;
      real_t tmp_251 = tmp_10*tmp_247 + tmp_245*tmp_9 + tmp_249*tmp_7;
      real_t tmp_252 = tmp_1*tmp_247 + tmp_245*tmp_6 + tmp_249*tmp_3;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_2*tmp_263 + tmp_261*tmp_4;
      real_t tmp_265 = tmp_10*tmp_261 + tmp_259*tmp_9 + tmp_263*tmp_7;
      real_t tmp_266 = tmp_1*tmp_261 + tmp_259*tmp_6 + tmp_263*tmp_3;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_2*tmp_277 + tmp_275*tmp_4;
      real_t tmp_279 = tmp_10*tmp_275 + tmp_273*tmp_9 + tmp_277*tmp_7;
      real_t tmp_280 = tmp_1*tmp_275 + tmp_273*tmp_6 + tmp_277*tmp_3;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_2*tmp_291 + tmp_289*tmp_4;
      real_t tmp_293 = tmp_10*tmp_289 + tmp_287*tmp_9 + tmp_291*tmp_7;
      real_t tmp_294 = tmp_1*tmp_289 + tmp_287*tmp_6 + tmp_291*tmp_3;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_2*tmp_305 + tmp_303*tmp_4;
      real_t tmp_307 = tmp_10*tmp_303 + tmp_301*tmp_9 + tmp_305*tmp_7;
      real_t tmp_308 = tmp_1*tmp_303 + tmp_3*tmp_305 + tmp_301*tmp_6;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_2*tmp_319 + tmp_317*tmp_4;
      real_t tmp_321 = tmp_10*tmp_317 + tmp_315*tmp_9 + tmp_319*tmp_7;
      real_t tmp_322 = tmp_1*tmp_317 + tmp_3*tmp_319 + tmp_315*tmp_6;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_2*tmp_333 + tmp_331*tmp_4;
      real_t tmp_335 = tmp_10*tmp_331 + tmp_329*tmp_9 + tmp_333*tmp_7;
      real_t tmp_336 = tmp_1*tmp_331 + tmp_3*tmp_333 + tmp_329*tmp_6;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_2*tmp_347 + tmp_345*tmp_4;
      real_t tmp_349 = tmp_10*tmp_345 + tmp_343*tmp_9 + tmp_347*tmp_7;
      real_t tmp_350 = tmp_1*tmp_345 + tmp_3*tmp_347 + tmp_343*tmp_6;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_0*tmp_55;
      real_t tmp_354 = p_affine_13_0*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_61 + p_affine_13_1*tmp_49 + p_affine_13_2*tmp_55;
      real_t tmp_356 = p_affine_13_0*tmp_54;
      real_t tmp_357 = p_affine_13_0*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_60 + p_affine_13_1*tmp_48 + p_affine_13_2*tmp_54;
      real_t tmp_359 = p_affine_13_0*tmp_53;
      real_t tmp_360 = p_affine_13_0*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_59 + p_affine_13_1*tmp_47 + p_affine_13_2*tmp_53;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_0_1 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_0_2 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_0_3 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1E_0 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1E_0()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_2 - tmp_4*tmp_6);
      real_t tmp_8 = 1.0*tmp_7;
      real_t tmp_9 = tmp_0*tmp_8;
      real_t tmp_10 = tmp_5*tmp_8;
      real_t tmp_11 = 2.0*tmp_7;
      real_t tmp_12 = tmp_11*tmp_2 + tmp_11*tmp_4*tmp_5;
      real_t tmp_13 = 0.5*tmp_7;
      real_t tmp_14 = tmp_1*tmp_7;
      real_t tmp_15 = tmp_0*tmp_7;
      real_t tmp_16 = tmp_14*tmp_3 + tmp_14*tmp_4 + tmp_15*tmp_5 + tmp_15*tmp_6;
      real_t tmp_17 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_18 = tmp_17*(tmp_12*(-tmp_10 - tmp_9) + 2*tmp_16*(-tmp_1*tmp_13 - tmp_13*tmp_3));
      real_t tmp_19 = tmp_16*tmp_8;
      real_t tmp_20 = tmp_17*(tmp_12*tmp_9 + tmp_19*tmp_3);
      real_t tmp_21 = tmp_17*(tmp_1*tmp_19 + tmp_10*tmp_12);
      real_t a_0_0 = 0.5*tmp_18;
      real_t a_1_0 = 0.5*tmp_20;
      real_t a_2_0 = 0.5*tmp_21;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_10*tmp_2 + tmp_13*tmp_4;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_13 + tmp_10*tmp_3;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_0*(tmp_1*tmp_15 + tmp_17*tmp_4);
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_3;
      real_t tmp_21 = tmp_19*tmp_2;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = 1.0*tmp_22;
      real_t tmp_24 = tmp_15*tmp_3 + tmp_17*tmp_6;
      real_t tmp_25 = 1.0*tmp_7;
      real_t tmp_26 = tmp_25*tmp_4;
      real_t tmp_27 = tmp_0*tmp_25;
      real_t tmp_28 = 1.0*p_affine_10_0*(-tmp_26 - tmp_27) + 1.0*p_affine_10_1*tmp_22;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_19*tmp_4;
      real_t tmp_33 = 1.0*p_affine_10_0*(tmp_25*tmp_5 + tmp_27*tmp_6) + 1.0*p_affine_10_1*(tmp_0*tmp_32 + tmp_1*tmp_32 + tmp_20*tmp_6 + tmp_21*tmp_3);
      real_t tmp_34 = 0.11846344252809471*tmp_29;
      real_t tmp_35 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_37 = tmp_2*tmp_35 + tmp_36*tmp_4;
      real_t tmp_38 = tmp_37 - 1.0/3.0;
      real_t tmp_39 = tmp_0*tmp_36 + tmp_3*tmp_35;
      real_t tmp_40 = tmp_39 - 1.0/3.0;
      real_t tmp_41 = tmp_1*tmp_38 + tmp_4*tmp_40;
      real_t tmp_42 = p_affine_10_0*tmp_23;
      real_t tmp_43 = tmp_3*tmp_38 + tmp_40*tmp_6;
      real_t tmp_44 = -tmp_37 - tmp_39 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_29;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_2*tmp_46 + tmp_4*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_47 + tmp_3*tmp_46;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_1*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_3*tmp_49 + tmp_51*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_29;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_2*tmp_56 + tmp_4*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_57 + tmp_3*tmp_56;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_1*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_3*tmp_59 + tmp_6*tmp_61;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_29;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_2*tmp_66 + tmp_4*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_67 + tmp_3*tmp_66;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_1*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_3*tmp_69 + tmp_6*tmp_71;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_29;
      real_t tmp_76 = 1.0*p_affine_10_0*tmp_26 + 1.0*p_affine_10_1*tmp_21;
      real_t tmp_77 = p_affine_10_0*tmp_21;
      real_t tmp_78 = 1.0*p_affine_10_0*tmp_27 + 1.0*p_affine_10_1*tmp_20;
      real_t tmp_79 = p_affine_10_0*tmp_20;
      real_t a_0_0 = tmp_34*(-tmp_18*tmp_23 - tmp_24*tmp_28 + 14*tmp_24*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_28*tmp_43 + 14*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44 - tmp_41*tmp_42) + tmp_55*(-tmp_28*tmp_53 + 14*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54 - tmp_42*tmp_52) + tmp_65*(-tmp_28*tmp_63 + 14*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64 - tmp_42*tmp_62) + tmp_75*(-tmp_28*tmp_73 + 14*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74 - tmp_42*tmp_72);
      real_t a_1_0 = tmp_34*(14*tmp_14*tmp_24*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_21 - tmp_24*tmp_76) + tmp_45*(14*tmp_30*tmp_37*tmp_43 - tmp_33*tmp_37 - tmp_41*tmp_77 - tmp_43*tmp_76) + tmp_55*(14*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_77 - tmp_53*tmp_76) + tmp_65*(14*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_77 - tmp_63*tmp_76) + tmp_75*(14*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_77 - tmp_73*tmp_76);
      real_t a_2_0 = tmp_34*(14*tmp_16*tmp_24*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_20 - tmp_24*tmp_78) + tmp_45*(14*tmp_30*tmp_39*tmp_43 - tmp_33*tmp_39 - tmp_41*tmp_79 - tmp_43*tmp_78) + tmp_55*(14*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_79 - tmp_53*tmp_78) + tmp_65*(14*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_79 - tmp_63*tmp_78) + tmp_75*(14*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_79 - tmp_73*tmp_78);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_3 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_4 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_3_1;
      real_t tmp_9 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_10 = p_affine_6_1 + 0.046910077030668018*tmp_9;
      real_t tmp_11 = tmp_7*(tmp_10 + tmp_8);
      real_t tmp_12 = -p_affine_3_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_7*(tmp_12 + tmp_14);
      real_t tmp_16 = tmp_11*tmp_2 + tmp_15*tmp_4 - 1.0/3.0;
      real_t tmp_17 = tmp_0*tmp_15 + tmp_11*tmp_3 - 1.0/3.0;
      real_t tmp_18 = tmp_1*tmp_16 + tmp_17*tmp_4;
      real_t tmp_19 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_20 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_21 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_22 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_23 = 1.0 / (tmp_19*tmp_20 - tmp_21*tmp_22);
      real_t tmp_24 = 0.5*tmp_23;
      real_t tmp_25 = tmp_19*tmp_24;
      real_t tmp_26 = tmp_21*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26;
      real_t tmp_28 = p_affine_10_0*tmp_27;
      real_t tmp_29 = 1.0*tmp_23;
      real_t tmp_30 = tmp_20*tmp_29;
      real_t tmp_31 = tmp_22*tmp_29;
      real_t tmp_32 = p_affine_10_0*(-tmp_30 - tmp_31) + p_affine_10_1*tmp_27;
      real_t tmp_33 = tmp_16*tmp_3 + tmp_17*tmp_6;
      real_t tmp_34 = -p_affine_0_1;
      real_t tmp_35 = tmp_23*(tmp_10 + tmp_34);
      real_t tmp_36 = -p_affine_0_0;
      real_t tmp_37 = tmp_23*(tmp_14 + tmp_36);
      real_t tmp_38 = tmp_20*tmp_37 + tmp_21*tmp_35;
      real_t tmp_39 = tmp_19*tmp_35 + tmp_22*tmp_37;
      real_t tmp_40 = -tmp_38 - tmp_39 + 1;
      real_t tmp_41 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_9*tmp_9), 1.0/2.0));
      real_t tmp_42 = 14/tmp_41;
      real_t tmp_43 = tmp_33*tmp_42;
      real_t tmp_44 = 1.0*tmp_7;
      real_t tmp_45 = 0.5*tmp_7;
      real_t tmp_46 = tmp_3*tmp_45;
      real_t tmp_47 = tmp_4*tmp_45;
      real_t tmp_48 = 1.0*p_affine_10_0*(tmp_0*tmp_44*tmp_6 + tmp_44*tmp_5) + 1.0*p_affine_10_1*(tmp_0*tmp_47 + tmp_1*tmp_47 + tmp_2*tmp_46 + tmp_46*tmp_6);
      real_t tmp_49 = 0.11846344252809471*tmp_41;
      real_t tmp_50 = p_affine_6_1 + 0.23076534494715845*tmp_9;
      real_t tmp_51 = tmp_7*(tmp_50 + tmp_8);
      real_t tmp_52 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_53 = tmp_7*(tmp_12 + tmp_52);
      real_t tmp_54 = tmp_2*tmp_51 + tmp_4*tmp_53 - 1.0/3.0;
      real_t tmp_55 = tmp_0*tmp_53 + tmp_3*tmp_51 - 1.0/3.0;
      real_t tmp_56 = tmp_1*tmp_54 + tmp_4*tmp_55;
      real_t tmp_57 = tmp_3*tmp_54 + tmp_55*tmp_6;
      real_t tmp_58 = tmp_23*(tmp_34 + tmp_50);
      real_t tmp_59 = tmp_23*(tmp_36 + tmp_52);
      real_t tmp_60 = tmp_20*tmp_59 + tmp_21*tmp_58;
      real_t tmp_61 = tmp_19*tmp_58 + tmp_22*tmp_59;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_42*tmp_57;
      real_t tmp_64 = 0.2393143352496831*tmp_41;
      real_t tmp_65 = p_affine_6_1 + 0.5*tmp_9;
      real_t tmp_66 = tmp_7*(tmp_65 + tmp_8);
      real_t tmp_67 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_68 = tmp_7*(tmp_12 + tmp_67);
      real_t tmp_69 = tmp_2*tmp_66 + tmp_4*tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_68 + tmp_3*tmp_66 - 1.0/3.0;
      real_t tmp_71 = tmp_1*tmp_69 + tmp_4*tmp_70;
      real_t tmp_72 = tmp_3*tmp_69 + tmp_6*tmp_70;
      real_t tmp_73 = tmp_23*(tmp_34 + tmp_65);
      real_t tmp_74 = tmp_23*(tmp_36 + tmp_67);
      real_t tmp_75 = tmp_20*tmp_74 + tmp_21*tmp_73;
      real_t tmp_76 = tmp_19*tmp_73 + tmp_22*tmp_74;
      real_t tmp_77 = -tmp_75 - tmp_76 + 1;
      real_t tmp_78 = tmp_42*tmp_72;
      real_t tmp_79 = 0.2844444444444445*tmp_41;
      real_t tmp_80 = p_affine_6_1 + 0.7692346550528415*tmp_9;
      real_t tmp_81 = tmp_7*(tmp_8 + tmp_80);
      real_t tmp_82 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_83 = tmp_7*(tmp_12 + tmp_82);
      real_t tmp_84 = tmp_2*tmp_81 + tmp_4*tmp_83 - 1.0/3.0;
      real_t tmp_85 = tmp_0*tmp_83 + tmp_3*tmp_81 - 1.0/3.0;
      real_t tmp_86 = tmp_1*tmp_84 + tmp_4*tmp_85;
      real_t tmp_87 = tmp_3*tmp_84 + tmp_6*tmp_85;
      real_t tmp_88 = tmp_23*(tmp_34 + tmp_80);
      real_t tmp_89 = tmp_23*(tmp_36 + tmp_82);
      real_t tmp_90 = tmp_20*tmp_89 + tmp_21*tmp_88;
      real_t tmp_91 = tmp_19*tmp_88 + tmp_22*tmp_89;
      real_t tmp_92 = -tmp_90 - tmp_91 + 1;
      real_t tmp_93 = tmp_42*tmp_87;
      real_t tmp_94 = 0.2393143352496831*tmp_41;
      real_t tmp_95 = p_affine_6_1 + 0.95308992296933193*tmp_9;
      real_t tmp_96 = tmp_7*(tmp_8 + tmp_95);
      real_t tmp_97 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_98 = tmp_7*(tmp_12 + tmp_97);
      real_t tmp_99 = tmp_2*tmp_96 + tmp_4*tmp_98 - 1.0/3.0;
      real_t tmp_100 = tmp_0*tmp_98 + tmp_3*tmp_96 - 1.0/3.0;
      real_t tmp_101 = tmp_1*tmp_99 + tmp_100*tmp_4;
      real_t tmp_102 = tmp_100*tmp_6 + tmp_3*tmp_99;
      real_t tmp_103 = tmp_23*(tmp_34 + tmp_95);
      real_t tmp_104 = tmp_23*(tmp_36 + tmp_97);
      real_t tmp_105 = tmp_103*tmp_21 + tmp_104*tmp_20;
      real_t tmp_106 = tmp_103*tmp_19 + tmp_104*tmp_22;
      real_t tmp_107 = -tmp_105 - tmp_106 + 1;
      real_t tmp_108 = tmp_102*tmp_42;
      real_t tmp_109 = 0.11846344252809471*tmp_41;
      real_t tmp_110 = p_affine_10_0*tmp_26;
      real_t tmp_111 = p_affine_10_0*tmp_30 + p_affine_10_1*tmp_26;
      real_t tmp_112 = p_affine_10_0*tmp_25;
      real_t tmp_113 = p_affine_10_0*tmp_31 + p_affine_10_1*tmp_25;
      real_t a_0_0 = tmp_109*(tmp_101*tmp_28 + tmp_102*tmp_32 - tmp_107*tmp_108 - tmp_107*tmp_48) + tmp_49*(tmp_18*tmp_28 + tmp_32*tmp_33 - tmp_40*tmp_43 - tmp_40*tmp_48) + tmp_64*(tmp_28*tmp_56 + tmp_32*tmp_57 - tmp_48*tmp_62 - tmp_62*tmp_63) + tmp_79*(tmp_28*tmp_71 + tmp_32*tmp_72 - tmp_48*tmp_77 - tmp_77*tmp_78) + tmp_94*(tmp_28*tmp_86 + tmp_32*tmp_87 - tmp_48*tmp_92 - tmp_92*tmp_93);
      real_t a_1_0 = tmp_109*(tmp_101*tmp_110 + tmp_102*tmp_111 - tmp_105*tmp_108 - tmp_105*tmp_48) + tmp_49*(tmp_110*tmp_18 + tmp_111*tmp_33 - tmp_38*tmp_43 - tmp_38*tmp_48) + tmp_64*(tmp_110*tmp_56 + tmp_111*tmp_57 - tmp_48*tmp_60 - tmp_60*tmp_63) + tmp_79*(tmp_110*tmp_71 + tmp_111*tmp_72 - tmp_48*tmp_75 - tmp_75*tmp_78) + tmp_94*(tmp_110*tmp_86 + tmp_111*tmp_87 - tmp_48*tmp_90 - tmp_90*tmp_93);
      real_t a_2_0 = tmp_109*(tmp_101*tmp_112 + tmp_102*tmp_113 - tmp_106*tmp_108 - tmp_106*tmp_48) + tmp_49*(tmp_112*tmp_18 + tmp_113*tmp_33 - tmp_39*tmp_43 - tmp_39*tmp_48) + tmp_64*(tmp_112*tmp_56 + tmp_113*tmp_57 - tmp_48*tmp_61 - tmp_61*tmp_63) + tmp_79*(tmp_112*tmp_71 + tmp_113*tmp_72 - tmp_48*tmp_76 - tmp_76*tmp_78) + tmp_94*(tmp_112*tmp_86 + tmp_113*tmp_87 - tmp_48*tmp_91 - tmp_91*tmp_93);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_1 = -tmp_0;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = -tmp_2;
      real_t tmp_7 = 1.0 / (-tmp_1*tmp_6 + tmp_5);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_10*tmp_2 + tmp_13*tmp_4;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_13 + tmp_10*tmp_3;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = tmp_1*tmp_15 + tmp_17*tmp_4;
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_3;
      real_t tmp_21 = tmp_19*tmp_2;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = p_affine_10_0*tmp_22;
      real_t tmp_24 = 1.0*tmp_7;
      real_t tmp_25 = tmp_24*tmp_4;
      real_t tmp_26 = tmp_0*tmp_24;
      real_t tmp_27 = p_affine_10_0*(-tmp_25 - tmp_26) + p_affine_10_1*tmp_22;
      real_t tmp_28 = tmp_15*tmp_3 + tmp_17*tmp_6;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_19*tmp_4;
      real_t tmp_33 = p_affine_10_0*(tmp_24*tmp_5 + tmp_26*tmp_6) + p_affine_10_1*(tmp_0*tmp_32 + tmp_1*tmp_32 + tmp_20*tmp_6 + tmp_21*tmp_3);
      real_t tmp_34 = 2*tmp_29;
      real_t tmp_35 = 0.11846344252809471*tmp_34;
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_38 = tmp_2*tmp_36 + tmp_37*tmp_4;
      real_t tmp_39 = tmp_38 - 1.0/3.0;
      real_t tmp_40 = tmp_0*tmp_37 + tmp_3*tmp_36;
      real_t tmp_41 = tmp_40 - 1.0/3.0;
      real_t tmp_42 = tmp_1*tmp_39 + tmp_4*tmp_41;
      real_t tmp_43 = tmp_3*tmp_39 + tmp_41*tmp_6;
      real_t tmp_44 = -tmp_38 - tmp_40 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_34;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_2*tmp_46 + tmp_4*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_47 + tmp_3*tmp_46;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_1*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_3*tmp_49 + tmp_51*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_34;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_2*tmp_56 + tmp_4*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_57 + tmp_3*tmp_56;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_1*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_3*tmp_59 + tmp_6*tmp_61;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_34;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_2*tmp_66 + tmp_4*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_67 + tmp_3*tmp_66;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_1*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_3*tmp_69 + tmp_6*tmp_71;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_34;
      real_t tmp_76 = p_affine_10_0*tmp_21;
      real_t tmp_77 = p_affine_10_0*tmp_25 + p_affine_10_1*tmp_21;
      real_t tmp_78 = p_affine_10_0*tmp_20;
      real_t tmp_79 = p_affine_10_0*tmp_26 + p_affine_10_1*tmp_20;
      real_t a_0_0 = tmp_35*(-tmp_18*tmp_23 - tmp_27*tmp_28 + 7*tmp_28*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_23*tmp_42 - tmp_27*tmp_43 + 7*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44) + tmp_55*(-tmp_23*tmp_52 - tmp_27*tmp_53 + 7*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54) + tmp_65*(-tmp_23*tmp_62 - tmp_27*tmp_63 + 7*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64) + tmp_75*(-tmp_23*tmp_72 - tmp_27*tmp_73 + 7*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74);
      real_t a_1_0 = tmp_35*(7*tmp_14*tmp_28*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_76 - tmp_28*tmp_77) + tmp_45*(7*tmp_30*tmp_38*tmp_43 - tmp_33*tmp_38 - tmp_42*tmp_76 - tmp_43*tmp_77) + tmp_55*(7*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_76 - tmp_53*tmp_77) + tmp_65*(7*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_76 - tmp_63*tmp_77) + tmp_75*(7*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_76 - tmp_73*tmp_77);
      real_t a_2_0 = tmp_35*(7*tmp_16*tmp_28*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_78 - tmp_28*tmp_79) + tmp_45*(7*tmp_30*tmp_40*tmp_43 - tmp_33*tmp_40 - tmp_42*tmp_78 - tmp_43*tmp_79) + tmp_55*(7*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_78 - tmp_53*tmp_79) + tmp_65*(7*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_78 - tmp_63*tmp_79) + tmp_75*(7*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_78 - tmp_73*tmp_79);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = 1.0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = -tmp_13 + tmp_9;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = tmp_15*tmp_7;
      real_t tmp_23 = tmp_10*tmp_15;
      real_t tmp_24 = tmp_12*tmp_15;
      real_t tmp_25 = 2.0*tmp_18*tmp_23 + 2.0*tmp_20*tmp_22 + 2.0*tmp_24*tmp_6;
      real_t tmp_26 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_27 = 0.5*tmp_15;
      real_t tmp_28 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_29 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_30 = tmp_15*tmp_20;
      real_t tmp_31 = tmp_15*tmp_18;
      real_t tmp_32 = tmp_15*tmp_6;
      real_t tmp_33 = tmp_1*tmp_31 + tmp_22*tmp_29 + tmp_23*tmp_28 + tmp_24*tmp_26 + tmp_30*tmp_4 + tmp_32*tmp_8;
      real_t tmp_34 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_35 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_37 = tmp_0*tmp_30 + tmp_11*tmp_32 + tmp_22*tmp_36 + tmp_23*tmp_35 + tmp_24*tmp_34 + tmp_3*tmp_31;
      real_t tmp_38 = p_affine_0_0*p_affine_1_1;
      real_t tmp_39 = p_affine_0_0*p_affine_1_2;
      real_t tmp_40 = p_affine_2_1*p_affine_3_2;
      real_t tmp_41 = p_affine_0_1*p_affine_1_0;
      real_t tmp_42 = p_affine_0_1*p_affine_1_2;
      real_t tmp_43 = p_affine_2_2*p_affine_3_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_0;
      real_t tmp_45 = p_affine_0_2*p_affine_1_1;
      real_t tmp_46 = p_affine_2_0*p_affine_3_1;
      real_t tmp_47 = p_affine_2_2*p_affine_3_1;
      real_t tmp_48 = p_affine_2_0*p_affine_3_2;
      real_t tmp_49 = p_affine_2_1*p_affine_3_0;
      real_t tmp_50 = std::abs(p_affine_0_0*tmp_40 - p_affine_0_0*tmp_47 + p_affine_0_1*tmp_43 - p_affine_0_1*tmp_48 + p_affine_0_2*tmp_46 - p_affine_0_2*tmp_49 - p_affine_1_0*tmp_40 + p_affine_1_0*tmp_47 - p_affine_1_1*tmp_43 + p_affine_1_1*tmp_48 - p_affine_1_2*tmp_46 + p_affine_1_2*tmp_49 + p_affine_2_0*tmp_42 - p_affine_2_0*tmp_45 - p_affine_2_1*tmp_39 + p_affine_2_1*tmp_44 + p_affine_2_2*tmp_38 - p_affine_2_2*tmp_41 - p_affine_3_0*tmp_42 + p_affine_3_0*tmp_45 + p_affine_3_1*tmp_39 - p_affine_3_1*tmp_44 - p_affine_3_2*tmp_38 + p_affine_3_2*tmp_41);
      real_t tmp_51 = tmp_50*(tmp_25*(-tmp_17 - tmp_19 - tmp_21) + 2*tmp_33*(-tmp_26*tmp_27 - tmp_27*tmp_28 - tmp_27*tmp_29) + 2*tmp_37*(-tmp_27*tmp_34 - tmp_27*tmp_35 - tmp_27*tmp_36));
      real_t tmp_52 = tmp_16*tmp_33;
      real_t tmp_53 = tmp_16*tmp_37;
      real_t tmp_54 = tmp_50*(tmp_21*tmp_25 + tmp_29*tmp_52 + tmp_36*tmp_53);
      real_t tmp_55 = tmp_50*(tmp_19*tmp_25 + tmp_28*tmp_52 + tmp_35*tmp_53);
      real_t tmp_56 = tmp_50*(tmp_17*tmp_25 + tmp_26*tmp_52 + tmp_34*tmp_53);
      real_t a_0_0 = 0.1666666666666668*tmp_51;
      real_t a_1_0 = 0.1666666666666668*tmp_54;
      real_t a_2_0 = 0.1666666666666668*tmp_55;
      real_t a_3_0 = 0.1666666666666668*tmp_56;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_36 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_41 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_2*tmp_44 + tmp_39*tmp_4;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_41*tmp_46;
      real_t tmp_48 = tmp_36*tmp_46;
      real_t tmp_49 = tmp_21*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_0;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_10*tmp_39 + tmp_34*tmp_9 + tmp_44*tmp_7;
      real_t tmp_54 = tmp_40*tmp_46;
      real_t tmp_55 = tmp_35*tmp_46;
      real_t tmp_56 = tmp_46*tmp_5;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_1*tmp_39 + tmp_3*tmp_44 + tmp_34*tmp_6;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_42*tmp_60;
      real_t tmp_62 = tmp_37*tmp_60;
      real_t tmp_63 = tmp_27*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*(-tmp_61 - tmp_62 - tmp_63) + 1.0*p_affine_13_1*tmp_50 + 1.0*p_affine_13_2*tmp_57;
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_27*tmp_46;
      real_t tmp_69 = tmp_37*tmp_46;
      real_t tmp_70 = tmp_42*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_1*tmp_62 + tmp_3*tmp_61 + tmp_6*tmp_63) + 1.0*p_affine_13_1*(tmp_0*tmp_68 + tmp_1*tmp_48 + tmp_2*tmp_70 + tmp_3*tmp_47 + tmp_4*tmp_69 + tmp_49*tmp_6) + 1.0*p_affine_13_2*(tmp_1*tmp_55 + tmp_10*tmp_69 + tmp_3*tmp_54 + tmp_56*tmp_6 + tmp_68*tmp_9 + tmp_7*tmp_70);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_2*tmp_82 + tmp_4*tmp_80;
      real_t tmp_84 = tmp_10*tmp_80 + tmp_7*tmp_82 + tmp_78*tmp_9;
      real_t tmp_85 = tmp_1*tmp_80 + tmp_3*tmp_82 + tmp_6*tmp_78;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_2*tmp_96 + tmp_4*tmp_94;
      real_t tmp_98 = tmp_10*tmp_94 + tmp_7*tmp_96 + tmp_9*tmp_92;
      real_t tmp_99 = tmp_1*tmp_94 + tmp_3*tmp_96 + tmp_6*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_112 = tmp_10*tmp_108 + tmp_106*tmp_9 + tmp_110*tmp_7;
      real_t tmp_113 = tmp_1*tmp_108 + tmp_106*tmp_6 + tmp_110*tmp_3;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_126 = tmp_10*tmp_122 + tmp_120*tmp_9 + tmp_124*tmp_7;
      real_t tmp_127 = tmp_1*tmp_122 + tmp_120*tmp_6 + tmp_124*tmp_3;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_140 = tmp_10*tmp_136 + tmp_134*tmp_9 + tmp_138*tmp_7;
      real_t tmp_141 = tmp_1*tmp_136 + tmp_134*tmp_6 + tmp_138*tmp_3;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_154 = tmp_10*tmp_150 + tmp_148*tmp_9 + tmp_152*tmp_7;
      real_t tmp_155 = tmp_1*tmp_150 + tmp_148*tmp_6 + tmp_152*tmp_3;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_168 = tmp_10*tmp_164 + tmp_162*tmp_9 + tmp_166*tmp_7;
      real_t tmp_169 = tmp_1*tmp_164 + tmp_162*tmp_6 + tmp_166*tmp_3;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_182 = tmp_10*tmp_178 + tmp_176*tmp_9 + tmp_180*tmp_7;
      real_t tmp_183 = tmp_1*tmp_178 + tmp_176*tmp_6 + tmp_180*tmp_3;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_196 = tmp_10*tmp_192 + tmp_190*tmp_9 + tmp_194*tmp_7;
      real_t tmp_197 = tmp_1*tmp_192 + tmp_190*tmp_6 + tmp_194*tmp_3;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_2*tmp_208 + tmp_206*tmp_4;
      real_t tmp_210 = tmp_10*tmp_206 + tmp_204*tmp_9 + tmp_208*tmp_7;
      real_t tmp_211 = tmp_1*tmp_206 + tmp_204*tmp_6 + tmp_208*tmp_3;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_2*tmp_222 + tmp_220*tmp_4;
      real_t tmp_224 = tmp_10*tmp_220 + tmp_218*tmp_9 + tmp_222*tmp_7;
      real_t tmp_225 = tmp_1*tmp_220 + tmp_218*tmp_6 + tmp_222*tmp_3;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_2*tmp_236 + tmp_234*tmp_4;
      real_t tmp_238 = tmp_10*tmp_234 + tmp_232*tmp_9 + tmp_236*tmp_7;
      real_t tmp_239 = tmp_1*tmp_234 + tmp_232*tmp_6 + tmp_236*tmp_3;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_2*tmp_250 + tmp_248*tmp_4;
      real_t tmp_252 = tmp_10*tmp_248 + tmp_246*tmp_9 + tmp_250*tmp_7;
      real_t tmp_253 = tmp_1*tmp_248 + tmp_246*tmp_6 + tmp_250*tmp_3;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_2*tmp_264 + tmp_262*tmp_4;
      real_t tmp_266 = tmp_10*tmp_262 + tmp_260*tmp_9 + tmp_264*tmp_7;
      real_t tmp_267 = tmp_1*tmp_262 + tmp_260*tmp_6 + tmp_264*tmp_3;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_2*tmp_278 + tmp_276*tmp_4;
      real_t tmp_280 = tmp_10*tmp_276 + tmp_274*tmp_9 + tmp_278*tmp_7;
      real_t tmp_281 = tmp_1*tmp_276 + tmp_274*tmp_6 + tmp_278*tmp_3;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_2*tmp_292 + tmp_290*tmp_4;
      real_t tmp_294 = tmp_10*tmp_290 + tmp_288*tmp_9 + tmp_292*tmp_7;
      real_t tmp_295 = tmp_1*tmp_290 + tmp_288*tmp_6 + tmp_292*tmp_3;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_2*tmp_306 + tmp_304*tmp_4;
      real_t tmp_308 = tmp_10*tmp_304 + tmp_302*tmp_9 + tmp_306*tmp_7;
      real_t tmp_309 = tmp_1*tmp_304 + tmp_3*tmp_306 + tmp_302*tmp_6;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_2*tmp_320 + tmp_318*tmp_4;
      real_t tmp_322 = tmp_10*tmp_318 + tmp_316*tmp_9 + tmp_320*tmp_7;
      real_t tmp_323 = tmp_1*tmp_318 + tmp_3*tmp_320 + tmp_316*tmp_6;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_2*tmp_334 + tmp_332*tmp_4;
      real_t tmp_336 = tmp_10*tmp_332 + tmp_330*tmp_9 + tmp_334*tmp_7;
      real_t tmp_337 = tmp_1*tmp_332 + tmp_3*tmp_334 + tmp_330*tmp_6;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_2*tmp_348 + tmp_346*tmp_4;
      real_t tmp_350 = tmp_10*tmp_346 + tmp_344*tmp_9 + tmp_348*tmp_7;
      real_t tmp_351 = tmp_1*tmp_346 + tmp_3*tmp_348 + tmp_344*tmp_6;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_0*tmp_56;
      real_t tmp_355 = p_affine_13_0*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_49 + 1.0*p_affine_13_2*tmp_56;
      real_t tmp_357 = p_affine_13_0*tmp_55;
      real_t tmp_358 = p_affine_13_0*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_62 + 1.0*p_affine_13_1*tmp_48 + 1.0*p_affine_13_2*tmp_55;
      real_t tmp_360 = p_affine_13_0*tmp_54;
      real_t tmp_361 = p_affine_13_0*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_61 + 1.0*p_affine_13_1*tmp_47 + 1.0*p_affine_13_2*tmp_54;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_1_0 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_2_0 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_3_0 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_1 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_2 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_5 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_9 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_10 = tmp_5*tmp_9;
      real_t tmp_11 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_12 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_13 = tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_9;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_12*tmp_4 - tmp_0*tmp_14 + tmp_10*tmp_8 + tmp_11*tmp_3 - tmp_11*tmp_6 - tmp_13*tmp_8);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = tmp_12*tmp_4 - tmp_14;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = tmp_10 - tmp_13;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_7 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = tmp_0*tmp_4 - tmp_2*tmp_8;
      real_t tmp_38 = -tmp_11*tmp_4 + tmp_8*tmp_9;
      real_t tmp_39 = -tmp_0*tmp_9 + tmp_11*tmp_2;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = -tmp_0*tmp_1 + tmp_5*tmp_8;
      real_t tmp_42 = tmp_1*tmp_11 - tmp_12*tmp_8;
      real_t tmp_43 = tmp_0*tmp_12 - tmp_11*tmp_5;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_2*tmp_44 + tmp_40*tmp_5;
      real_t tmp_46 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_47 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_48 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_49 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_50 = -tmp_46*tmp_47 + tmp_48*tmp_49;
      real_t tmp_51 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_52 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_53 = tmp_51*tmp_52;
      real_t tmp_54 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_55 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_56 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_57 = tmp_47*tmp_56;
      real_t tmp_58 = tmp_47*tmp_54;
      real_t tmp_59 = tmp_52*tmp_56;
      real_t tmp_60 = tmp_49*tmp_51;
      real_t tmp_61 = 1.0 / (tmp_46*tmp_53 - tmp_46*tmp_58 + tmp_48*tmp_49*tmp_54 - tmp_48*tmp_59 + tmp_55*tmp_57 - tmp_55*tmp_60);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_50*tmp_62;
      real_t tmp_64 = tmp_46*tmp_52 - tmp_49*tmp_55;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_47*tmp_55 - tmp_48*tmp_52;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_63 - tmp_65 - tmp_67;
      real_t tmp_69 = p_affine_13_0*tmp_68;
      real_t tmp_70 = tmp_11*tmp_36 + tmp_12*tmp_40 + tmp_44*tmp_9;
      real_t tmp_71 = tmp_46*tmp_51 - tmp_48*tmp_56;
      real_t tmp_72 = tmp_62*tmp_71;
      real_t tmp_73 = -tmp_46*tmp_54 + tmp_55*tmp_56;
      real_t tmp_74 = tmp_62*tmp_73;
      real_t tmp_75 = tmp_48*tmp_54 - tmp_51*tmp_55;
      real_t tmp_76 = tmp_62*tmp_75;
      real_t tmp_77 = -tmp_72 - tmp_74 - tmp_76;
      real_t tmp_78 = p_affine_13_0*tmp_77;
      real_t tmp_79 = tmp_57 - tmp_60;
      real_t tmp_80 = 1.0*tmp_61;
      real_t tmp_81 = tmp_79*tmp_80;
      real_t tmp_82 = tmp_49*tmp_54 - tmp_59;
      real_t tmp_83 = tmp_80*tmp_82;
      real_t tmp_84 = tmp_53 - tmp_58;
      real_t tmp_85 = tmp_80*tmp_84;
      real_t tmp_86 = p_affine_13_0*(-tmp_81 - tmp_83 - tmp_85) + p_affine_13_1*tmp_68 + p_affine_13_2*tmp_77;
      real_t tmp_87 = tmp_1*tmp_40 + tmp_36*tmp_8 + tmp_4*tmp_44;
      real_t tmp_88 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_89 = tmp_61*(tmp_20 + tmp_88);
      real_t tmp_90 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_91 = tmp_61*(tmp_27 + tmp_90);
      real_t tmp_92 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_93 = tmp_61*(tmp_34 + tmp_92);
      real_t tmp_94 = tmp_66*tmp_91 + tmp_75*tmp_89 + tmp_84*tmp_93;
      real_t tmp_95 = tmp_64*tmp_91 + tmp_73*tmp_89 + tmp_82*tmp_93;
      real_t tmp_96 = tmp_50*tmp_91 + tmp_71*tmp_89 + tmp_79*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = (std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31));
      real_t tmp_99 = 14.0*std::pow(tmp_98, -0.25);
      real_t tmp_100 = tmp_87*tmp_99;
      real_t tmp_101 = 1.0*tmp_15;
      real_t tmp_102 = 0.5*tmp_15;
      real_t tmp_103 = tmp_102*tmp_8;
      real_t tmp_104 = tmp_1*tmp_102;
      real_t tmp_105 = tmp_102*tmp_4;
      real_t tmp_106 = tmp_102*tmp_29;
      real_t tmp_107 = tmp_102*tmp_39;
      real_t tmp_108 = tmp_102*tmp_43;
      real_t tmp_109 = 1.0*p_affine_13_0*(tmp_1*tmp_101*tmp_39 + tmp_101*tmp_29*tmp_8 + tmp_101*tmp_4*tmp_43) + 1.0*p_affine_13_1*(tmp_0*tmp_106 + tmp_103*tmp_22 + tmp_104*tmp_38 + tmp_105*tmp_42 + tmp_107*tmp_5 + tmp_108*tmp_2) + 1.0*p_affine_13_2*(tmp_103*tmp_7 + tmp_104*tmp_37 + tmp_105*tmp_41 + tmp_106*tmp_11 + tmp_107*tmp_12 + tmp_108*tmp_9);
      real_t tmp_110 = 1.0*std::pow(tmp_98, 1.0/2.0);
      real_t tmp_111 = 0.0068572537431980923*tmp_110;
      real_t tmp_112 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_16);
      real_t tmp_114 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_115 = tmp_15*(tmp_114 + tmp_23);
      real_t tmp_116 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_117 = tmp_15*(tmp_116 + tmp_30);
      real_t tmp_118 = tmp_113*tmp_7 + tmp_115*tmp_22 + tmp_117*tmp_29 - 1.0/4.0;
      real_t tmp_119 = tmp_113*tmp_37 + tmp_115*tmp_38 + tmp_117*tmp_39 - 1.0/4.0;
      real_t tmp_120 = tmp_113*tmp_41 + tmp_115*tmp_42 + tmp_117*tmp_43 - 1.0/4.0;
      real_t tmp_121 = tmp_0*tmp_118 + tmp_119*tmp_5 + tmp_120*tmp_2;
      real_t tmp_122 = tmp_11*tmp_118 + tmp_119*tmp_12 + tmp_120*tmp_9;
      real_t tmp_123 = tmp_1*tmp_119 + tmp_118*tmp_8 + tmp_120*tmp_4;
      real_t tmp_124 = tmp_61*(tmp_112 + tmp_88);
      real_t tmp_125 = tmp_61*(tmp_114 + tmp_90);
      real_t tmp_126 = tmp_61*(tmp_116 + tmp_92);
      real_t tmp_127 = tmp_124*tmp_75 + tmp_125*tmp_66 + tmp_126*tmp_84;
      real_t tmp_128 = tmp_124*tmp_73 + tmp_125*tmp_64 + tmp_126*tmp_82;
      real_t tmp_129 = tmp_124*tmp_71 + tmp_125*tmp_50 + tmp_126*tmp_79;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = tmp_123*tmp_99;
      real_t tmp_132 = 0.037198804536718075*tmp_110;
      real_t tmp_133 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_134 = tmp_15*(tmp_133 + tmp_16);
      real_t tmp_135 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_23);
      real_t tmp_137 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_30);
      real_t tmp_139 = tmp_134*tmp_7 + tmp_136*tmp_22 + tmp_138*tmp_29 - 1.0/4.0;
      real_t tmp_140 = tmp_134*tmp_37 + tmp_136*tmp_38 + tmp_138*tmp_39 - 1.0/4.0;
      real_t tmp_141 = tmp_134*tmp_41 + tmp_136*tmp_42 + tmp_138*tmp_43 - 1.0/4.0;
      real_t tmp_142 = tmp_0*tmp_139 + tmp_140*tmp_5 + tmp_141*tmp_2;
      real_t tmp_143 = tmp_11*tmp_139 + tmp_12*tmp_140 + tmp_141*tmp_9;
      real_t tmp_144 = tmp_1*tmp_140 + tmp_139*tmp_8 + tmp_141*tmp_4;
      real_t tmp_145 = tmp_61*(tmp_133 + tmp_88);
      real_t tmp_146 = tmp_61*(tmp_135 + tmp_90);
      real_t tmp_147 = tmp_61*(tmp_137 + tmp_92);
      real_t tmp_148 = tmp_145*tmp_75 + tmp_146*tmp_66 + tmp_147*tmp_84;
      real_t tmp_149 = tmp_145*tmp_73 + tmp_146*tmp_64 + tmp_147*tmp_82;
      real_t tmp_150 = tmp_145*tmp_71 + tmp_146*tmp_50 + tmp_147*tmp_79;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = tmp_144*tmp_99;
      real_t tmp_153 = 0.020848748529055869*tmp_110;
      real_t tmp_154 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_155 = tmp_15*(tmp_154 + tmp_16);
      real_t tmp_156 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_157 = tmp_15*(tmp_156 + tmp_23);
      real_t tmp_158 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_159 = tmp_15*(tmp_158 + tmp_30);
      real_t tmp_160 = tmp_155*tmp_7 + tmp_157*tmp_22 + tmp_159*tmp_29 - 1.0/4.0;
      real_t tmp_161 = tmp_155*tmp_37 + tmp_157*tmp_38 + tmp_159*tmp_39 - 1.0/4.0;
      real_t tmp_162 = tmp_155*tmp_41 + tmp_157*tmp_42 + tmp_159*tmp_43 - 1.0/4.0;
      real_t tmp_163 = tmp_0*tmp_160 + tmp_161*tmp_5 + tmp_162*tmp_2;
      real_t tmp_164 = tmp_11*tmp_160 + tmp_12*tmp_161 + tmp_162*tmp_9;
      real_t tmp_165 = tmp_1*tmp_161 + tmp_160*tmp_8 + tmp_162*tmp_4;
      real_t tmp_166 = tmp_61*(tmp_154 + tmp_88);
      real_t tmp_167 = tmp_61*(tmp_156 + tmp_90);
      real_t tmp_168 = tmp_61*(tmp_158 + tmp_92);
      real_t tmp_169 = tmp_166*tmp_75 + tmp_167*tmp_66 + tmp_168*tmp_84;
      real_t tmp_170 = tmp_166*tmp_73 + tmp_167*tmp_64 + tmp_168*tmp_82;
      real_t tmp_171 = tmp_166*tmp_71 + tmp_167*tmp_50 + tmp_168*tmp_79;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_165*tmp_99;
      real_t tmp_174 = 0.019202922745021479*tmp_110;
      real_t tmp_175 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_176 = tmp_15*(tmp_16 + tmp_175);
      real_t tmp_177 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_178 = tmp_15*(tmp_177 + tmp_23);
      real_t tmp_179 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_180 = tmp_15*(tmp_179 + tmp_30);
      real_t tmp_181 = tmp_176*tmp_7 + tmp_178*tmp_22 + tmp_180*tmp_29 - 1.0/4.0;
      real_t tmp_182 = tmp_176*tmp_37 + tmp_178*tmp_38 + tmp_180*tmp_39 - 1.0/4.0;
      real_t tmp_183 = tmp_176*tmp_41 + tmp_178*tmp_42 + tmp_180*tmp_43 - 1.0/4.0;
      real_t tmp_184 = tmp_0*tmp_181 + tmp_182*tmp_5 + tmp_183*tmp_2;
      real_t tmp_185 = tmp_11*tmp_181 + tmp_12*tmp_182 + tmp_183*tmp_9;
      real_t tmp_186 = tmp_1*tmp_182 + tmp_181*tmp_8 + tmp_183*tmp_4;
      real_t tmp_187 = tmp_61*(tmp_175 + tmp_88);
      real_t tmp_188 = tmp_61*(tmp_177 + tmp_90);
      real_t tmp_189 = tmp_61*(tmp_179 + tmp_92);
      real_t tmp_190 = tmp_187*tmp_75 + tmp_188*tmp_66 + tmp_189*tmp_84;
      real_t tmp_191 = tmp_187*tmp_73 + tmp_188*tmp_64 + tmp_189*tmp_82;
      real_t tmp_192 = tmp_187*tmp_71 + tmp_188*tmp_50 + tmp_189*tmp_79;
      real_t tmp_193 = -tmp_190 - tmp_191 - tmp_192 + 1;
      real_t tmp_194 = tmp_186*tmp_99;
      real_t tmp_195 = 0.020848748529055869*tmp_110;
      real_t tmp_196 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_197 = tmp_15*(tmp_16 + tmp_196);
      real_t tmp_198 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_199 = tmp_15*(tmp_198 + tmp_23);
      real_t tmp_200 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_201 = tmp_15*(tmp_200 + tmp_30);
      real_t tmp_202 = tmp_197*tmp_7 + tmp_199*tmp_22 + tmp_201*tmp_29 - 1.0/4.0;
      real_t tmp_203 = tmp_197*tmp_37 + tmp_199*tmp_38 + tmp_201*tmp_39 - 1.0/4.0;
      real_t tmp_204 = tmp_197*tmp_41 + tmp_199*tmp_42 + tmp_201*tmp_43 - 1.0/4.0;
      real_t tmp_205 = tmp_0*tmp_202 + tmp_2*tmp_204 + tmp_203*tmp_5;
      real_t tmp_206 = tmp_11*tmp_202 + tmp_12*tmp_203 + tmp_204*tmp_9;
      real_t tmp_207 = tmp_1*tmp_203 + tmp_202*tmp_8 + tmp_204*tmp_4;
      real_t tmp_208 = tmp_61*(tmp_196 + tmp_88);
      real_t tmp_209 = tmp_61*(tmp_198 + tmp_90);
      real_t tmp_210 = tmp_61*(tmp_200 + tmp_92);
      real_t tmp_211 = tmp_208*tmp_75 + tmp_209*tmp_66 + tmp_210*tmp_84;
      real_t tmp_212 = tmp_208*tmp_73 + tmp_209*tmp_64 + tmp_210*tmp_82;
      real_t tmp_213 = tmp_208*tmp_71 + tmp_209*tmp_50 + tmp_210*tmp_79;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = tmp_207*tmp_99;
      real_t tmp_216 = 0.019202922745021479*tmp_110;
      real_t tmp_217 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_218 = tmp_15*(tmp_16 + tmp_217);
      real_t tmp_219 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_23);
      real_t tmp_221 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_222 = tmp_15*(tmp_221 + tmp_30);
      real_t tmp_223 = tmp_218*tmp_7 + tmp_22*tmp_220 + tmp_222*tmp_29 - 1.0/4.0;
      real_t tmp_224 = tmp_218*tmp_37 + tmp_220*tmp_38 + tmp_222*tmp_39 - 1.0/4.0;
      real_t tmp_225 = tmp_218*tmp_41 + tmp_220*tmp_42 + tmp_222*tmp_43 - 1.0/4.0;
      real_t tmp_226 = tmp_0*tmp_223 + tmp_2*tmp_225 + tmp_224*tmp_5;
      real_t tmp_227 = tmp_11*tmp_223 + tmp_12*tmp_224 + tmp_225*tmp_9;
      real_t tmp_228 = tmp_1*tmp_224 + tmp_223*tmp_8 + tmp_225*tmp_4;
      real_t tmp_229 = tmp_61*(tmp_217 + tmp_88);
      real_t tmp_230 = tmp_61*(tmp_219 + tmp_90);
      real_t tmp_231 = tmp_61*(tmp_221 + tmp_92);
      real_t tmp_232 = tmp_229*tmp_75 + tmp_230*tmp_66 + tmp_231*tmp_84;
      real_t tmp_233 = tmp_229*tmp_73 + tmp_230*tmp_64 + tmp_231*tmp_82;
      real_t tmp_234 = tmp_229*tmp_71 + tmp_230*tmp_50 + tmp_231*tmp_79;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = tmp_228*tmp_99;
      real_t tmp_237 = 0.020848748529055869*tmp_110;
      real_t tmp_238 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_239 = tmp_15*(tmp_16 + tmp_238);
      real_t tmp_240 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_241 = tmp_15*(tmp_23 + tmp_240);
      real_t tmp_242 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_243 = tmp_15*(tmp_242 + tmp_30);
      real_t tmp_244 = tmp_22*tmp_241 + tmp_239*tmp_7 + tmp_243*tmp_29 - 1.0/4.0;
      real_t tmp_245 = tmp_239*tmp_37 + tmp_241*tmp_38 + tmp_243*tmp_39 - 1.0/4.0;
      real_t tmp_246 = tmp_239*tmp_41 + tmp_241*tmp_42 + tmp_243*tmp_43 - 1.0/4.0;
      real_t tmp_247 = tmp_0*tmp_244 + tmp_2*tmp_246 + tmp_245*tmp_5;
      real_t tmp_248 = tmp_11*tmp_244 + tmp_12*tmp_245 + tmp_246*tmp_9;
      real_t tmp_249 = tmp_1*tmp_245 + tmp_244*tmp_8 + tmp_246*tmp_4;
      real_t tmp_250 = tmp_61*(tmp_238 + tmp_88);
      real_t tmp_251 = tmp_61*(tmp_240 + tmp_90);
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_92);
      real_t tmp_253 = tmp_250*tmp_75 + tmp_251*tmp_66 + tmp_252*tmp_84;
      real_t tmp_254 = tmp_250*tmp_73 + tmp_251*tmp_64 + tmp_252*tmp_82;
      real_t tmp_255 = tmp_250*tmp_71 + tmp_251*tmp_50 + tmp_252*tmp_79;
      real_t tmp_256 = -tmp_253 - tmp_254 - tmp_255 + 1;
      real_t tmp_257 = tmp_249*tmp_99;
      real_t tmp_258 = 0.019202922745021479*tmp_110;
      real_t tmp_259 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_260 = tmp_15*(tmp_16 + tmp_259);
      real_t tmp_261 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_262 = tmp_15*(tmp_23 + tmp_261);
      real_t tmp_263 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_30);
      real_t tmp_265 = tmp_22*tmp_262 + tmp_260*tmp_7 + tmp_264*tmp_29 - 1.0/4.0;
      real_t tmp_266 = tmp_260*tmp_37 + tmp_262*tmp_38 + tmp_264*tmp_39 - 1.0/4.0;
      real_t tmp_267 = tmp_260*tmp_41 + tmp_262*tmp_42 + tmp_264*tmp_43 - 1.0/4.0;
      real_t tmp_268 = tmp_0*tmp_265 + tmp_2*tmp_267 + tmp_266*tmp_5;
      real_t tmp_269 = tmp_11*tmp_265 + tmp_12*tmp_266 + tmp_267*tmp_9;
      real_t tmp_270 = tmp_1*tmp_266 + tmp_265*tmp_8 + tmp_267*tmp_4;
      real_t tmp_271 = tmp_61*(tmp_259 + tmp_88);
      real_t tmp_272 = tmp_61*(tmp_261 + tmp_90);
      real_t tmp_273 = tmp_61*(tmp_263 + tmp_92);
      real_t tmp_274 = tmp_271*tmp_75 + tmp_272*tmp_66 + tmp_273*tmp_84;
      real_t tmp_275 = tmp_271*tmp_73 + tmp_272*tmp_64 + tmp_273*tmp_82;
      real_t tmp_276 = tmp_271*tmp_71 + tmp_272*tmp_50 + tmp_273*tmp_79;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_270*tmp_99;
      real_t tmp_279 = 0.020848748529055869*tmp_110;
      real_t tmp_280 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_281 = tmp_15*(tmp_16 + tmp_280);
      real_t tmp_282 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_283 = tmp_15*(tmp_23 + tmp_282);
      real_t tmp_284 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_30);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_7 + tmp_285*tmp_29 - 1.0/4.0;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39 - 1.0/4.0;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43 - 1.0/4.0;
      real_t tmp_289 = tmp_0*tmp_286 + tmp_2*tmp_288 + tmp_287*tmp_5;
      real_t tmp_290 = tmp_11*tmp_286 + tmp_12*tmp_287 + tmp_288*tmp_9;
      real_t tmp_291 = tmp_1*tmp_287 + tmp_286*tmp_8 + tmp_288*tmp_4;
      real_t tmp_292 = tmp_61*(tmp_280 + tmp_88);
      real_t tmp_293 = tmp_61*(tmp_282 + tmp_90);
      real_t tmp_294 = tmp_61*(tmp_284 + tmp_92);
      real_t tmp_295 = tmp_292*tmp_75 + tmp_293*tmp_66 + tmp_294*tmp_84;
      real_t tmp_296 = tmp_292*tmp_73 + tmp_293*tmp_64 + tmp_294*tmp_82;
      real_t tmp_297 = tmp_292*tmp_71 + tmp_293*tmp_50 + tmp_294*tmp_79;
      real_t tmp_298 = -tmp_295 - tmp_296 - tmp_297 + 1;
      real_t tmp_299 = tmp_291*tmp_99;
      real_t tmp_300 = 0.019202922745021479*tmp_110;
      real_t tmp_301 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_302 = tmp_15*(tmp_16 + tmp_301);
      real_t tmp_303 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_304 = tmp_15*(tmp_23 + tmp_303);
      real_t tmp_305 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_306 = tmp_15*(tmp_30 + tmp_305);
      real_t tmp_307 = tmp_22*tmp_304 + tmp_29*tmp_306 + tmp_302*tmp_7 - 1.0/4.0;
      real_t tmp_308 = tmp_302*tmp_37 + tmp_304*tmp_38 + tmp_306*tmp_39 - 1.0/4.0;
      real_t tmp_309 = tmp_302*tmp_41 + tmp_304*tmp_42 + tmp_306*tmp_43 - 1.0/4.0;
      real_t tmp_310 = tmp_0*tmp_307 + tmp_2*tmp_309 + tmp_308*tmp_5;
      real_t tmp_311 = tmp_11*tmp_307 + tmp_12*tmp_308 + tmp_309*tmp_9;
      real_t tmp_312 = tmp_1*tmp_308 + tmp_307*tmp_8 + tmp_309*tmp_4;
      real_t tmp_313 = tmp_61*(tmp_301 + tmp_88);
      real_t tmp_314 = tmp_61*(tmp_303 + tmp_90);
      real_t tmp_315 = tmp_61*(tmp_305 + tmp_92);
      real_t tmp_316 = tmp_313*tmp_75 + tmp_314*tmp_66 + tmp_315*tmp_84;
      real_t tmp_317 = tmp_313*tmp_73 + tmp_314*tmp_64 + tmp_315*tmp_82;
      real_t tmp_318 = tmp_313*tmp_71 + tmp_314*tmp_50 + tmp_315*tmp_79;
      real_t tmp_319 = -tmp_316 - tmp_317 - tmp_318 + 1;
      real_t tmp_320 = tmp_312*tmp_99;
      real_t tmp_321 = 0.020848748529055869*tmp_110;
      real_t tmp_322 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_323 = tmp_15*(tmp_16 + tmp_322);
      real_t tmp_324 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_325 = tmp_15*(tmp_23 + tmp_324);
      real_t tmp_326 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_327 = tmp_15*(tmp_30 + tmp_326);
      real_t tmp_328 = tmp_22*tmp_325 + tmp_29*tmp_327 + tmp_323*tmp_7 - 1.0/4.0;
      real_t tmp_329 = tmp_323*tmp_37 + tmp_325*tmp_38 + tmp_327*tmp_39 - 1.0/4.0;
      real_t tmp_330 = tmp_323*tmp_41 + tmp_325*tmp_42 + tmp_327*tmp_43 - 1.0/4.0;
      real_t tmp_331 = tmp_0*tmp_328 + tmp_2*tmp_330 + tmp_329*tmp_5;
      real_t tmp_332 = tmp_11*tmp_328 + tmp_12*tmp_329 + tmp_330*tmp_9;
      real_t tmp_333 = tmp_1*tmp_329 + tmp_328*tmp_8 + tmp_330*tmp_4;
      real_t tmp_334 = tmp_61*(tmp_322 + tmp_88);
      real_t tmp_335 = tmp_61*(tmp_324 + tmp_90);
      real_t tmp_336 = tmp_61*(tmp_326 + tmp_92);
      real_t tmp_337 = tmp_334*tmp_75 + tmp_335*tmp_66 + tmp_336*tmp_84;
      real_t tmp_338 = tmp_334*tmp_73 + tmp_335*tmp_64 + tmp_336*tmp_82;
      real_t tmp_339 = tmp_334*tmp_71 + tmp_335*tmp_50 + tmp_336*tmp_79;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_99;
      real_t tmp_342 = 0.019202922745021479*tmp_110;
      real_t tmp_343 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_344 = tmp_15*(tmp_16 + tmp_343);
      real_t tmp_345 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_346 = tmp_15*(tmp_23 + tmp_345);
      real_t tmp_347 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_348 = tmp_15*(tmp_30 + tmp_347);
      real_t tmp_349 = tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_7 - 1.0/4.0;
      real_t tmp_350 = tmp_344*tmp_37 + tmp_346*tmp_38 + tmp_348*tmp_39 - 1.0/4.0;
      real_t tmp_351 = tmp_344*tmp_41 + tmp_346*tmp_42 + tmp_348*tmp_43 - 1.0/4.0;
      real_t tmp_352 = tmp_0*tmp_349 + tmp_2*tmp_351 + tmp_350*tmp_5;
      real_t tmp_353 = tmp_11*tmp_349 + tmp_12*tmp_350 + tmp_351*tmp_9;
      real_t tmp_354 = tmp_1*tmp_350 + tmp_349*tmp_8 + tmp_351*tmp_4;
      real_t tmp_355 = tmp_61*(tmp_343 + tmp_88);
      real_t tmp_356 = tmp_61*(tmp_345 + tmp_90);
      real_t tmp_357 = tmp_61*(tmp_347 + tmp_92);
      real_t tmp_358 = tmp_355*tmp_75 + tmp_356*tmp_66 + tmp_357*tmp_84;
      real_t tmp_359 = tmp_355*tmp_73 + tmp_356*tmp_64 + tmp_357*tmp_82;
      real_t tmp_360 = tmp_355*tmp_71 + tmp_356*tmp_50 + tmp_357*tmp_79;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = tmp_354*tmp_99;
      real_t tmp_363 = 0.042507265838595799*tmp_110;
      real_t tmp_364 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_365 = tmp_15*(tmp_16 + tmp_364);
      real_t tmp_366 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_367 = tmp_15*(tmp_23 + tmp_366);
      real_t tmp_368 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_369 = tmp_15*(tmp_30 + tmp_368);
      real_t tmp_370 = tmp_22*tmp_367 + tmp_29*tmp_369 + tmp_365*tmp_7 - 1.0/4.0;
      real_t tmp_371 = tmp_365*tmp_37 + tmp_367*tmp_38 + tmp_369*tmp_39 - 1.0/4.0;
      real_t tmp_372 = tmp_365*tmp_41 + tmp_367*tmp_42 + tmp_369*tmp_43 - 1.0/4.0;
      real_t tmp_373 = tmp_0*tmp_370 + tmp_2*tmp_372 + tmp_371*tmp_5;
      real_t tmp_374 = tmp_11*tmp_370 + tmp_12*tmp_371 + tmp_372*tmp_9;
      real_t tmp_375 = tmp_1*tmp_371 + tmp_370*tmp_8 + tmp_372*tmp_4;
      real_t tmp_376 = tmp_61*(tmp_364 + tmp_88);
      real_t tmp_377 = tmp_61*(tmp_366 + tmp_90);
      real_t tmp_378 = tmp_61*(tmp_368 + tmp_92);
      real_t tmp_379 = tmp_376*tmp_75 + tmp_377*tmp_66 + tmp_378*tmp_84;
      real_t tmp_380 = tmp_376*tmp_73 + tmp_377*tmp_64 + tmp_378*tmp_82;
      real_t tmp_381 = tmp_376*tmp_71 + tmp_377*tmp_50 + tmp_378*tmp_79;
      real_t tmp_382 = -tmp_379 - tmp_380 - tmp_381 + 1;
      real_t tmp_383 = tmp_375*tmp_99;
      real_t tmp_384 = 0.020848748529055869*tmp_110;
      real_t tmp_385 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_386 = tmp_15*(tmp_16 + tmp_385);
      real_t tmp_387 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_388 = tmp_15*(tmp_23 + tmp_387);
      real_t tmp_389 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_390 = tmp_15*(tmp_30 + tmp_389);
      real_t tmp_391 = tmp_22*tmp_388 + tmp_29*tmp_390 + tmp_386*tmp_7 - 1.0/4.0;
      real_t tmp_392 = tmp_37*tmp_386 + tmp_38*tmp_388 + tmp_39*tmp_390 - 1.0/4.0;
      real_t tmp_393 = tmp_386*tmp_41 + tmp_388*tmp_42 + tmp_390*tmp_43 - 1.0/4.0;
      real_t tmp_394 = tmp_0*tmp_391 + tmp_2*tmp_393 + tmp_392*tmp_5;
      real_t tmp_395 = tmp_11*tmp_391 + tmp_12*tmp_392 + tmp_393*tmp_9;
      real_t tmp_396 = tmp_1*tmp_392 + tmp_391*tmp_8 + tmp_393*tmp_4;
      real_t tmp_397 = tmp_61*(tmp_385 + tmp_88);
      real_t tmp_398 = tmp_61*(tmp_387 + tmp_90);
      real_t tmp_399 = tmp_61*(tmp_389 + tmp_92);
      real_t tmp_400 = tmp_397*tmp_75 + tmp_398*tmp_66 + tmp_399*tmp_84;
      real_t tmp_401 = tmp_397*tmp_73 + tmp_398*tmp_64 + tmp_399*tmp_82;
      real_t tmp_402 = tmp_397*tmp_71 + tmp_398*tmp_50 + tmp_399*tmp_79;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_396*tmp_99;
      real_t tmp_405 = 0.0068572537431980923*tmp_110;
      real_t tmp_406 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_407 = tmp_15*(tmp_16 + tmp_406);
      real_t tmp_408 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_409 = tmp_15*(tmp_23 + tmp_408);
      real_t tmp_410 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_411 = tmp_15*(tmp_30 + tmp_410);
      real_t tmp_412 = tmp_22*tmp_409 + tmp_29*tmp_411 + tmp_407*tmp_7 - 1.0/4.0;
      real_t tmp_413 = tmp_37*tmp_407 + tmp_38*tmp_409 + tmp_39*tmp_411 - 1.0/4.0;
      real_t tmp_414 = tmp_407*tmp_41 + tmp_409*tmp_42 + tmp_411*tmp_43 - 1.0/4.0;
      real_t tmp_415 = tmp_0*tmp_412 + tmp_2*tmp_414 + tmp_413*tmp_5;
      real_t tmp_416 = tmp_11*tmp_412 + tmp_12*tmp_413 + tmp_414*tmp_9;
      real_t tmp_417 = tmp_1*tmp_413 + tmp_4*tmp_414 + tmp_412*tmp_8;
      real_t tmp_418 = tmp_61*(tmp_406 + tmp_88);
      real_t tmp_419 = tmp_61*(tmp_408 + tmp_90);
      real_t tmp_420 = tmp_61*(tmp_410 + tmp_92);
      real_t tmp_421 = tmp_418*tmp_75 + tmp_419*tmp_66 + tmp_420*tmp_84;
      real_t tmp_422 = tmp_418*tmp_73 + tmp_419*tmp_64 + tmp_420*tmp_82;
      real_t tmp_423 = tmp_418*tmp_71 + tmp_419*tmp_50 + tmp_420*tmp_79;
      real_t tmp_424 = -tmp_421 - tmp_422 - tmp_423 + 1;
      real_t tmp_425 = tmp_417*tmp_99;
      real_t tmp_426 = 0.037198804536718075*tmp_110;
      real_t tmp_427 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_428 = tmp_15*(tmp_16 + tmp_427);
      real_t tmp_429 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_430 = tmp_15*(tmp_23 + tmp_429);
      real_t tmp_431 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_432 = tmp_15*(tmp_30 + tmp_431);
      real_t tmp_433 = tmp_22*tmp_430 + tmp_29*tmp_432 + tmp_428*tmp_7 - 1.0/4.0;
      real_t tmp_434 = tmp_37*tmp_428 + tmp_38*tmp_430 + tmp_39*tmp_432 - 1.0/4.0;
      real_t tmp_435 = tmp_41*tmp_428 + tmp_42*tmp_430 + tmp_43*tmp_432 - 1.0/4.0;
      real_t tmp_436 = tmp_0*tmp_433 + tmp_2*tmp_435 + tmp_434*tmp_5;
      real_t tmp_437 = tmp_11*tmp_433 + tmp_12*tmp_434 + tmp_435*tmp_9;
      real_t tmp_438 = tmp_1*tmp_434 + tmp_4*tmp_435 + tmp_433*tmp_8;
      real_t tmp_439 = tmp_61*(tmp_427 + tmp_88);
      real_t tmp_440 = tmp_61*(tmp_429 + tmp_90);
      real_t tmp_441 = tmp_61*(tmp_431 + tmp_92);
      real_t tmp_442 = tmp_439*tmp_75 + tmp_440*tmp_66 + tmp_441*tmp_84;
      real_t tmp_443 = tmp_439*tmp_73 + tmp_440*tmp_64 + tmp_441*tmp_82;
      real_t tmp_444 = tmp_439*tmp_71 + tmp_440*tmp_50 + tmp_441*tmp_79;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_438*tmp_99;
      real_t tmp_447 = 0.042507265838595799*tmp_110;
      real_t tmp_448 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_449 = tmp_15*(tmp_16 + tmp_448);
      real_t tmp_450 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_451 = tmp_15*(tmp_23 + tmp_450);
      real_t tmp_452 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_453 = tmp_15*(tmp_30 + tmp_452);
      real_t tmp_454 = tmp_22*tmp_451 + tmp_29*tmp_453 + tmp_449*tmp_7 - 1.0/4.0;
      real_t tmp_455 = tmp_37*tmp_449 + tmp_38*tmp_451 + tmp_39*tmp_453 - 1.0/4.0;
      real_t tmp_456 = tmp_41*tmp_449 + tmp_42*tmp_451 + tmp_43*tmp_453 - 1.0/4.0;
      real_t tmp_457 = tmp_0*tmp_454 + tmp_2*tmp_456 + tmp_455*tmp_5;
      real_t tmp_458 = tmp_11*tmp_454 + tmp_12*tmp_455 + tmp_456*tmp_9;
      real_t tmp_459 = tmp_1*tmp_455 + tmp_4*tmp_456 + tmp_454*tmp_8;
      real_t tmp_460 = tmp_61*(tmp_448 + tmp_88);
      real_t tmp_461 = tmp_61*(tmp_450 + tmp_90);
      real_t tmp_462 = tmp_61*(tmp_452 + tmp_92);
      real_t tmp_463 = tmp_460*tmp_75 + tmp_461*tmp_66 + tmp_462*tmp_84;
      real_t tmp_464 = tmp_460*tmp_73 + tmp_461*tmp_64 + tmp_462*tmp_82;
      real_t tmp_465 = tmp_460*tmp_71 + tmp_461*tmp_50 + tmp_462*tmp_79;
      real_t tmp_466 = -tmp_463 - tmp_464 - tmp_465 + 1;
      real_t tmp_467 = tmp_459*tmp_99;
      real_t tmp_468 = 0.0068572537431980923*tmp_110;
      real_t tmp_469 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_470 = tmp_15*(tmp_16 + tmp_469);
      real_t tmp_471 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_472 = tmp_15*(tmp_23 + tmp_471);
      real_t tmp_473 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_474 = tmp_15*(tmp_30 + tmp_473);
      real_t tmp_475 = tmp_22*tmp_472 + tmp_29*tmp_474 + tmp_470*tmp_7 - 1.0/4.0;
      real_t tmp_476 = tmp_37*tmp_470 + tmp_38*tmp_472 + tmp_39*tmp_474 - 1.0/4.0;
      real_t tmp_477 = tmp_41*tmp_470 + tmp_42*tmp_472 + tmp_43*tmp_474 - 1.0/4.0;
      real_t tmp_478 = tmp_0*tmp_475 + tmp_2*tmp_477 + tmp_476*tmp_5;
      real_t tmp_479 = tmp_11*tmp_475 + tmp_12*tmp_476 + tmp_477*tmp_9;
      real_t tmp_480 = tmp_1*tmp_476 + tmp_4*tmp_477 + tmp_475*tmp_8;
      real_t tmp_481 = tmp_61*(tmp_469 + tmp_88);
      real_t tmp_482 = tmp_61*(tmp_471 + tmp_90);
      real_t tmp_483 = tmp_61*(tmp_473 + tmp_92);
      real_t tmp_484 = tmp_481*tmp_75 + tmp_482*tmp_66 + tmp_483*tmp_84;
      real_t tmp_485 = tmp_481*tmp_73 + tmp_482*tmp_64 + tmp_483*tmp_82;
      real_t tmp_486 = tmp_481*tmp_71 + tmp_482*tmp_50 + tmp_483*tmp_79;
      real_t tmp_487 = -tmp_484 - tmp_485 - tmp_486 + 1;
      real_t tmp_488 = tmp_480*tmp_99;
      real_t tmp_489 = 0.037198804536718075*tmp_110;
      real_t tmp_490 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_491 = tmp_15*(tmp_16 + tmp_490);
      real_t tmp_492 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_493 = tmp_15*(tmp_23 + tmp_492);
      real_t tmp_494 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_495 = tmp_15*(tmp_30 + tmp_494);
      real_t tmp_496 = tmp_22*tmp_493 + tmp_29*tmp_495 + tmp_491*tmp_7 - 1.0/4.0;
      real_t tmp_497 = tmp_37*tmp_491 + tmp_38*tmp_493 + tmp_39*tmp_495 - 1.0/4.0;
      real_t tmp_498 = tmp_41*tmp_491 + tmp_42*tmp_493 + tmp_43*tmp_495 - 1.0/4.0;
      real_t tmp_499 = tmp_0*tmp_496 + tmp_2*tmp_498 + tmp_497*tmp_5;
      real_t tmp_500 = tmp_11*tmp_496 + tmp_12*tmp_497 + tmp_498*tmp_9;
      real_t tmp_501 = tmp_1*tmp_497 + tmp_4*tmp_498 + tmp_496*tmp_8;
      real_t tmp_502 = tmp_61*(tmp_490 + tmp_88);
      real_t tmp_503 = tmp_61*(tmp_492 + tmp_90);
      real_t tmp_504 = tmp_61*(tmp_494 + tmp_92);
      real_t tmp_505 = tmp_502*tmp_75 + tmp_503*tmp_66 + tmp_504*tmp_84;
      real_t tmp_506 = tmp_502*tmp_73 + tmp_503*tmp_64 + tmp_504*tmp_82;
      real_t tmp_507 = tmp_50*tmp_503 + tmp_502*tmp_71 + tmp_504*tmp_79;
      real_t tmp_508 = -tmp_505 - tmp_506 - tmp_507 + 1;
      real_t tmp_509 = tmp_501*tmp_99;
      real_t tmp_510 = 0.042507265838595799*tmp_110;
      real_t tmp_511 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_512 = tmp_15*(tmp_16 + tmp_511);
      real_t tmp_513 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_514 = tmp_15*(tmp_23 + tmp_513);
      real_t tmp_515 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_516 = tmp_15*(tmp_30 + tmp_515);
      real_t tmp_517 = tmp_22*tmp_514 + tmp_29*tmp_516 + tmp_512*tmp_7 - 1.0/4.0;
      real_t tmp_518 = tmp_37*tmp_512 + tmp_38*tmp_514 + tmp_39*tmp_516 - 1.0/4.0;
      real_t tmp_519 = tmp_41*tmp_512 + tmp_42*tmp_514 + tmp_43*tmp_516 - 1.0/4.0;
      real_t tmp_520 = tmp_0*tmp_517 + tmp_2*tmp_519 + tmp_5*tmp_518;
      real_t tmp_521 = tmp_11*tmp_517 + tmp_12*tmp_518 + tmp_519*tmp_9;
      real_t tmp_522 = tmp_1*tmp_518 + tmp_4*tmp_519 + tmp_517*tmp_8;
      real_t tmp_523 = tmp_61*(tmp_511 + tmp_88);
      real_t tmp_524 = tmp_61*(tmp_513 + tmp_90);
      real_t tmp_525 = tmp_61*(tmp_515 + tmp_92);
      real_t tmp_526 = tmp_523*tmp_75 + tmp_524*tmp_66 + tmp_525*tmp_84;
      real_t tmp_527 = tmp_523*tmp_73 + tmp_524*tmp_64 + tmp_525*tmp_82;
      real_t tmp_528 = tmp_50*tmp_524 + tmp_523*tmp_71 + tmp_525*tmp_79;
      real_t tmp_529 = -tmp_526 - tmp_527 - tmp_528 + 1;
      real_t tmp_530 = tmp_522*tmp_99;
      real_t tmp_531 = 0.019202922745021479*tmp_110;
      real_t tmp_532 = p_affine_13_0*tmp_76;
      real_t tmp_533 = p_affine_13_0*tmp_67;
      real_t tmp_534 = p_affine_13_0*tmp_85 + p_affine_13_1*tmp_67 + p_affine_13_2*tmp_76;
      real_t tmp_535 = p_affine_13_0*tmp_74;
      real_t tmp_536 = p_affine_13_0*tmp_65;
      real_t tmp_537 = p_affine_13_0*tmp_83 + p_affine_13_1*tmp_65 + p_affine_13_2*tmp_74;
      real_t tmp_538 = p_affine_13_0*tmp_72;
      real_t tmp_539 = p_affine_13_0*tmp_63;
      real_t tmp_540 = p_affine_13_0*tmp_81 + p_affine_13_1*tmp_63 + p_affine_13_2*tmp_72;
      real_t a_0_0 = tmp_111*(-tmp_100*tmp_97 - tmp_109*tmp_97 + tmp_45*tmp_69 + tmp_70*tmp_78 + tmp_86*tmp_87) + tmp_132*(-tmp_109*tmp_130 + tmp_121*tmp_69 + tmp_122*tmp_78 + tmp_123*tmp_86 - tmp_130*tmp_131) + tmp_153*(-tmp_109*tmp_151 + tmp_142*tmp_69 + tmp_143*tmp_78 + tmp_144*tmp_86 - tmp_151*tmp_152) + tmp_174*(-tmp_109*tmp_172 + tmp_163*tmp_69 + tmp_164*tmp_78 + tmp_165*tmp_86 - tmp_172*tmp_173) + tmp_195*(-tmp_109*tmp_193 + tmp_184*tmp_69 + tmp_185*tmp_78 + tmp_186*tmp_86 - tmp_193*tmp_194) + tmp_216*(-tmp_109*tmp_214 + tmp_205*tmp_69 + tmp_206*tmp_78 + tmp_207*tmp_86 - tmp_214*tmp_215) + tmp_237*(-tmp_109*tmp_235 + tmp_226*tmp_69 + tmp_227*tmp_78 + tmp_228*tmp_86 - tmp_235*tmp_236) + tmp_258*(-tmp_109*tmp_256 + tmp_247*tmp_69 + tmp_248*tmp_78 + tmp_249*tmp_86 - tmp_256*tmp_257) + tmp_279*(-tmp_109*tmp_277 + tmp_268*tmp_69 + tmp_269*tmp_78 + tmp_270*tmp_86 - tmp_277*tmp_278) + tmp_300*(-tmp_109*tmp_298 + tmp_289*tmp_69 + tmp_290*tmp_78 + tmp_291*tmp_86 - tmp_298*tmp_299) + tmp_321*(-tmp_109*tmp_319 + tmp_310*tmp_69 + tmp_311*tmp_78 + tmp_312*tmp_86 - tmp_319*tmp_320) + tmp_342*(-tmp_109*tmp_340 + tmp_331*tmp_69 + tmp_332*tmp_78 + tmp_333*tmp_86 - tmp_340*tmp_341) + tmp_363*(-tmp_109*tmp_361 + tmp_352*tmp_69 + tmp_353*tmp_78 + tmp_354*tmp_86 - tmp_361*tmp_362) + tmp_384*(-tmp_109*tmp_382 + tmp_373*tmp_69 + tmp_374*tmp_78 + tmp_375*tmp_86 - tmp_382*tmp_383) + tmp_405*(-tmp_109*tmp_403 + tmp_394*tmp_69 + tmp_395*tmp_78 + tmp_396*tmp_86 - tmp_403*tmp_404) + tmp_426*(-tmp_109*tmp_424 + tmp_415*tmp_69 + tmp_416*tmp_78 + tmp_417*tmp_86 - tmp_424*tmp_425) + tmp_447*(-tmp_109*tmp_445 + tmp_436*tmp_69 + tmp_437*tmp_78 + tmp_438*tmp_86 - tmp_445*tmp_446) + tmp_468*(-tmp_109*tmp_466 + tmp_457*tmp_69 + tmp_458*tmp_78 + tmp_459*tmp_86 - tmp_466*tmp_467) + tmp_489*(-tmp_109*tmp_487 + tmp_478*tmp_69 + tmp_479*tmp_78 + tmp_480*tmp_86 - tmp_487*tmp_488) + tmp_510*(-tmp_109*tmp_508 + tmp_499*tmp_69 + tmp_500*tmp_78 + tmp_501*tmp_86 - tmp_508*tmp_509) + tmp_531*(-tmp_109*tmp_529 + tmp_520*tmp_69 + tmp_521*tmp_78 + tmp_522*tmp_86 - tmp_529*tmp_530);
      real_t a_1_0 = tmp_111*(-tmp_100*tmp_94 - tmp_109*tmp_94 + tmp_45*tmp_533 + tmp_532*tmp_70 + tmp_534*tmp_87) + tmp_132*(-tmp_109*tmp_127 + tmp_121*tmp_533 + tmp_122*tmp_532 + tmp_123*tmp_534 - tmp_127*tmp_131) + tmp_153*(-tmp_109*tmp_148 + tmp_142*tmp_533 + tmp_143*tmp_532 + tmp_144*tmp_534 - tmp_148*tmp_152) + tmp_174*(-tmp_109*tmp_169 + tmp_163*tmp_533 + tmp_164*tmp_532 + tmp_165*tmp_534 - tmp_169*tmp_173) + tmp_195*(-tmp_109*tmp_190 + tmp_184*tmp_533 + tmp_185*tmp_532 + tmp_186*tmp_534 - tmp_190*tmp_194) + tmp_216*(-tmp_109*tmp_211 + tmp_205*tmp_533 + tmp_206*tmp_532 + tmp_207*tmp_534 - tmp_211*tmp_215) + tmp_237*(-tmp_109*tmp_232 + tmp_226*tmp_533 + tmp_227*tmp_532 + tmp_228*tmp_534 - tmp_232*tmp_236) + tmp_258*(-tmp_109*tmp_253 + tmp_247*tmp_533 + tmp_248*tmp_532 + tmp_249*tmp_534 - tmp_253*tmp_257) + tmp_279*(-tmp_109*tmp_274 + tmp_268*tmp_533 + tmp_269*tmp_532 + tmp_270*tmp_534 - tmp_274*tmp_278) + tmp_300*(-tmp_109*tmp_295 + tmp_289*tmp_533 + tmp_290*tmp_532 + tmp_291*tmp_534 - tmp_295*tmp_299) + tmp_321*(-tmp_109*tmp_316 + tmp_310*tmp_533 + tmp_311*tmp_532 + tmp_312*tmp_534 - tmp_316*tmp_320) + tmp_342*(-tmp_109*tmp_337 + tmp_331*tmp_533 + tmp_332*tmp_532 + tmp_333*tmp_534 - tmp_337*tmp_341) + tmp_363*(-tmp_109*tmp_358 + tmp_352*tmp_533 + tmp_353*tmp_532 + tmp_354*tmp_534 - tmp_358*tmp_362) + tmp_384*(-tmp_109*tmp_379 + tmp_373*tmp_533 + tmp_374*tmp_532 + tmp_375*tmp_534 - tmp_379*tmp_383) + tmp_405*(-tmp_109*tmp_400 + tmp_394*tmp_533 + tmp_395*tmp_532 + tmp_396*tmp_534 - tmp_400*tmp_404) + tmp_426*(-tmp_109*tmp_421 + tmp_415*tmp_533 + tmp_416*tmp_532 + tmp_417*tmp_534 - tmp_421*tmp_425) + tmp_447*(-tmp_109*tmp_442 + tmp_436*tmp_533 + tmp_437*tmp_532 + tmp_438*tmp_534 - tmp_442*tmp_446) + tmp_468*(-tmp_109*tmp_463 + tmp_457*tmp_533 + tmp_458*tmp_532 + tmp_459*tmp_534 - tmp_463*tmp_467) + tmp_489*(-tmp_109*tmp_484 + tmp_478*tmp_533 + tmp_479*tmp_532 + tmp_480*tmp_534 - tmp_484*tmp_488) + tmp_510*(-tmp_109*tmp_505 + tmp_499*tmp_533 + tmp_500*tmp_532 + tmp_501*tmp_534 - tmp_505*tmp_509) + tmp_531*(-tmp_109*tmp_526 + tmp_520*tmp_533 + tmp_521*tmp_532 + tmp_522*tmp_534 - tmp_526*tmp_530);
      real_t a_2_0 = tmp_111*(-tmp_100*tmp_95 - tmp_109*tmp_95 + tmp_45*tmp_536 + tmp_535*tmp_70 + tmp_537*tmp_87) + tmp_132*(-tmp_109*tmp_128 + tmp_121*tmp_536 + tmp_122*tmp_535 + tmp_123*tmp_537 - tmp_128*tmp_131) + tmp_153*(-tmp_109*tmp_149 + tmp_142*tmp_536 + tmp_143*tmp_535 + tmp_144*tmp_537 - tmp_149*tmp_152) + tmp_174*(-tmp_109*tmp_170 + tmp_163*tmp_536 + tmp_164*tmp_535 + tmp_165*tmp_537 - tmp_170*tmp_173) + tmp_195*(-tmp_109*tmp_191 + tmp_184*tmp_536 + tmp_185*tmp_535 + tmp_186*tmp_537 - tmp_191*tmp_194) + tmp_216*(-tmp_109*tmp_212 + tmp_205*tmp_536 + tmp_206*tmp_535 + tmp_207*tmp_537 - tmp_212*tmp_215) + tmp_237*(-tmp_109*tmp_233 + tmp_226*tmp_536 + tmp_227*tmp_535 + tmp_228*tmp_537 - tmp_233*tmp_236) + tmp_258*(-tmp_109*tmp_254 + tmp_247*tmp_536 + tmp_248*tmp_535 + tmp_249*tmp_537 - tmp_254*tmp_257) + tmp_279*(-tmp_109*tmp_275 + tmp_268*tmp_536 + tmp_269*tmp_535 + tmp_270*tmp_537 - tmp_275*tmp_278) + tmp_300*(-tmp_109*tmp_296 + tmp_289*tmp_536 + tmp_290*tmp_535 + tmp_291*tmp_537 - tmp_296*tmp_299) + tmp_321*(-tmp_109*tmp_317 + tmp_310*tmp_536 + tmp_311*tmp_535 + tmp_312*tmp_537 - tmp_317*tmp_320) + tmp_342*(-tmp_109*tmp_338 + tmp_331*tmp_536 + tmp_332*tmp_535 + tmp_333*tmp_537 - tmp_338*tmp_341) + tmp_363*(-tmp_109*tmp_359 + tmp_352*tmp_536 + tmp_353*tmp_535 + tmp_354*tmp_537 - tmp_359*tmp_362) + tmp_384*(-tmp_109*tmp_380 + tmp_373*tmp_536 + tmp_374*tmp_535 + tmp_375*tmp_537 - tmp_380*tmp_383) + tmp_405*(-tmp_109*tmp_401 + tmp_394*tmp_536 + tmp_395*tmp_535 + tmp_396*tmp_537 - tmp_401*tmp_404) + tmp_426*(-tmp_109*tmp_422 + tmp_415*tmp_536 + tmp_416*tmp_535 + tmp_417*tmp_537 - tmp_422*tmp_425) + tmp_447*(-tmp_109*tmp_443 + tmp_436*tmp_536 + tmp_437*tmp_535 + tmp_438*tmp_537 - tmp_443*tmp_446) + tmp_468*(-tmp_109*tmp_464 + tmp_457*tmp_536 + tmp_458*tmp_535 + tmp_459*tmp_537 - tmp_464*tmp_467) + tmp_489*(-tmp_109*tmp_485 + tmp_478*tmp_536 + tmp_479*tmp_535 + tmp_480*tmp_537 - tmp_485*tmp_488) + tmp_510*(-tmp_109*tmp_506 + tmp_499*tmp_536 + tmp_500*tmp_535 + tmp_501*tmp_537 - tmp_506*tmp_509) + tmp_531*(-tmp_109*tmp_527 + tmp_520*tmp_536 + tmp_521*tmp_535 + tmp_522*tmp_537 - tmp_527*tmp_530);
      real_t a_3_0 = tmp_111*(-tmp_100*tmp_96 - tmp_109*tmp_96 + tmp_45*tmp_539 + tmp_538*tmp_70 + tmp_540*tmp_87) + tmp_132*(-tmp_109*tmp_129 + tmp_121*tmp_539 + tmp_122*tmp_538 + tmp_123*tmp_540 - tmp_129*tmp_131) + tmp_153*(-tmp_109*tmp_150 + tmp_142*tmp_539 + tmp_143*tmp_538 + tmp_144*tmp_540 - tmp_150*tmp_152) + tmp_174*(-tmp_109*tmp_171 + tmp_163*tmp_539 + tmp_164*tmp_538 + tmp_165*tmp_540 - tmp_171*tmp_173) + tmp_195*(-tmp_109*tmp_192 + tmp_184*tmp_539 + tmp_185*tmp_538 + tmp_186*tmp_540 - tmp_192*tmp_194) + tmp_216*(-tmp_109*tmp_213 + tmp_205*tmp_539 + tmp_206*tmp_538 + tmp_207*tmp_540 - tmp_213*tmp_215) + tmp_237*(-tmp_109*tmp_234 + tmp_226*tmp_539 + tmp_227*tmp_538 + tmp_228*tmp_540 - tmp_234*tmp_236) + tmp_258*(-tmp_109*tmp_255 + tmp_247*tmp_539 + tmp_248*tmp_538 + tmp_249*tmp_540 - tmp_255*tmp_257) + tmp_279*(-tmp_109*tmp_276 + tmp_268*tmp_539 + tmp_269*tmp_538 + tmp_270*tmp_540 - tmp_276*tmp_278) + tmp_300*(-tmp_109*tmp_297 + tmp_289*tmp_539 + tmp_290*tmp_538 + tmp_291*tmp_540 - tmp_297*tmp_299) + tmp_321*(-tmp_109*tmp_318 + tmp_310*tmp_539 + tmp_311*tmp_538 + tmp_312*tmp_540 - tmp_318*tmp_320) + tmp_342*(-tmp_109*tmp_339 + tmp_331*tmp_539 + tmp_332*tmp_538 + tmp_333*tmp_540 - tmp_339*tmp_341) + tmp_363*(-tmp_109*tmp_360 + tmp_352*tmp_539 + tmp_353*tmp_538 + tmp_354*tmp_540 - tmp_360*tmp_362) + tmp_384*(-tmp_109*tmp_381 + tmp_373*tmp_539 + tmp_374*tmp_538 + tmp_375*tmp_540 - tmp_381*tmp_383) + tmp_405*(-tmp_109*tmp_402 + tmp_394*tmp_539 + tmp_395*tmp_538 + tmp_396*tmp_540 - tmp_402*tmp_404) + tmp_426*(-tmp_109*tmp_423 + tmp_415*tmp_539 + tmp_416*tmp_538 + tmp_417*tmp_540 - tmp_423*tmp_425) + tmp_447*(-tmp_109*tmp_444 + tmp_436*tmp_539 + tmp_437*tmp_538 + tmp_438*tmp_540 - tmp_444*tmp_446) + tmp_468*(-tmp_109*tmp_465 + tmp_457*tmp_539 + tmp_458*tmp_538 + tmp_459*tmp_540 - tmp_465*tmp_467) + tmp_489*(-tmp_109*tmp_486 + tmp_478*tmp_539 + tmp_479*tmp_538 + tmp_480*tmp_540 - tmp_486*tmp_488) + tmp_510*(-tmp_109*tmp_507 + tmp_499*tmp_539 + tmp_500*tmp_538 + tmp_501*tmp_540 - tmp_507*tmp_509) + tmp_531*(-tmp_109*tmp_528 + tmp_520*tmp_539 + tmp_521*tmp_538 + tmp_522*tmp_540 - tmp_528*tmp_530);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_4*tmp_7;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_0*tmp_7;
      real_t tmp_14 = tmp_4*tmp_9;
      real_t tmp_15 = 1.0 / (-tmp_1*tmp_13 + tmp_1*tmp_2*tmp_9 + tmp_11*tmp_3 - tmp_12*tmp_6 - tmp_14*tmp_3 + tmp_6*tmp_8);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_8;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = tmp_0*tmp_3 - tmp_2*tmp_6;
      real_t tmp_36 = -tmp_3*tmp_9 + tmp_6*tmp_7;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_9;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = -tmp_0*tmp_1 + tmp_4*tmp_6;
      real_t tmp_41 = tmp_1*tmp_9 - tmp_10*tmp_6;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_2*tmp_44 + tmp_39*tmp_4;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_41*tmp_46;
      real_t tmp_48 = tmp_36*tmp_46;
      real_t tmp_49 = tmp_21*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_0*tmp_50;
      real_t tmp_52 = tmp_10*tmp_39 + tmp_34*tmp_9 + tmp_44*tmp_7;
      real_t tmp_53 = tmp_40*tmp_46;
      real_t tmp_54 = tmp_35*tmp_46;
      real_t tmp_55 = tmp_46*tmp_5;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_0*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_42*tmp_58;
      real_t tmp_60 = tmp_37*tmp_58;
      real_t tmp_61 = tmp_27*tmp_58;
      real_t tmp_62 = p_affine_13_0*(-tmp_59 - tmp_60 - tmp_61) + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_56;
      real_t tmp_63 = tmp_1*tmp_39 + tmp_3*tmp_44 + tmp_34*tmp_6;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_27*tmp_46;
      real_t tmp_68 = tmp_37*tmp_46;
      real_t tmp_69 = tmp_42*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_1*tmp_60 + tmp_3*tmp_59 + tmp_6*tmp_61) + p_affine_13_1*(tmp_0*tmp_67 + tmp_1*tmp_48 + tmp_2*tmp_69 + tmp_3*tmp_47 + tmp_4*tmp_68 + tmp_49*tmp_6) + p_affine_13_2*(tmp_1*tmp_54 + tmp_10*tmp_68 + tmp_3*tmp_53 + tmp_55*tmp_6 + tmp_67*tmp_9 + tmp_69*tmp_7);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_2*tmp_81 + tmp_4*tmp_79;
      real_t tmp_83 = tmp_10*tmp_79 + tmp_7*tmp_81 + tmp_77*tmp_9;
      real_t tmp_84 = tmp_1*tmp_79 + tmp_3*tmp_81 + tmp_6*tmp_77;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_2*tmp_95 + tmp_4*tmp_93;
      real_t tmp_97 = tmp_10*tmp_93 + tmp_7*tmp_95 + tmp_9*tmp_91;
      real_t tmp_98 = tmp_1*tmp_93 + tmp_3*tmp_95 + tmp_6*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_111 = tmp_10*tmp_107 + tmp_105*tmp_9 + tmp_109*tmp_7;
      real_t tmp_112 = tmp_1*tmp_107 + tmp_105*tmp_6 + tmp_109*tmp_3;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_125 = tmp_10*tmp_121 + tmp_119*tmp_9 + tmp_123*tmp_7;
      real_t tmp_126 = tmp_1*tmp_121 + tmp_119*tmp_6 + tmp_123*tmp_3;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_139 = tmp_10*tmp_135 + tmp_133*tmp_9 + tmp_137*tmp_7;
      real_t tmp_140 = tmp_1*tmp_135 + tmp_133*tmp_6 + tmp_137*tmp_3;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_153 = tmp_10*tmp_149 + tmp_147*tmp_9 + tmp_151*tmp_7;
      real_t tmp_154 = tmp_1*tmp_149 + tmp_147*tmp_6 + tmp_151*tmp_3;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_167 = tmp_10*tmp_163 + tmp_161*tmp_9 + tmp_165*tmp_7;
      real_t tmp_168 = tmp_1*tmp_163 + tmp_161*tmp_6 + tmp_165*tmp_3;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_181 = tmp_10*tmp_177 + tmp_175*tmp_9 + tmp_179*tmp_7;
      real_t tmp_182 = tmp_1*tmp_177 + tmp_175*tmp_6 + tmp_179*tmp_3;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_195 = tmp_10*tmp_191 + tmp_189*tmp_9 + tmp_193*tmp_7;
      real_t tmp_196 = tmp_1*tmp_191 + tmp_189*tmp_6 + tmp_193*tmp_3;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_2*tmp_207 + tmp_205*tmp_4;
      real_t tmp_209 = tmp_10*tmp_205 + tmp_203*tmp_9 + tmp_207*tmp_7;
      real_t tmp_210 = tmp_1*tmp_205 + tmp_203*tmp_6 + tmp_207*tmp_3;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_2*tmp_221 + tmp_219*tmp_4;
      real_t tmp_223 = tmp_10*tmp_219 + tmp_217*tmp_9 + tmp_221*tmp_7;
      real_t tmp_224 = tmp_1*tmp_219 + tmp_217*tmp_6 + tmp_221*tmp_3;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_2*tmp_235 + tmp_233*tmp_4;
      real_t tmp_237 = tmp_10*tmp_233 + tmp_231*tmp_9 + tmp_235*tmp_7;
      real_t tmp_238 = tmp_1*tmp_233 + tmp_231*tmp_6 + tmp_235*tmp_3;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_2*tmp_249 + tmp_247*tmp_4;
      real_t tmp_251 = tmp_10*tmp_247 + tmp_245*tmp_9 + tmp_249*tmp_7;
      real_t tmp_252 = tmp_1*tmp_247 + tmp_245*tmp_6 + tmp_249*tmp_3;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_2*tmp_263 + tmp_261*tmp_4;
      real_t tmp_265 = tmp_10*tmp_261 + tmp_259*tmp_9 + tmp_263*tmp_7;
      real_t tmp_266 = tmp_1*tmp_261 + tmp_259*tmp_6 + tmp_263*tmp_3;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_2*tmp_277 + tmp_275*tmp_4;
      real_t tmp_279 = tmp_10*tmp_275 + tmp_273*tmp_9 + tmp_277*tmp_7;
      real_t tmp_280 = tmp_1*tmp_275 + tmp_273*tmp_6 + tmp_277*tmp_3;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_2*tmp_291 + tmp_289*tmp_4;
      real_t tmp_293 = tmp_10*tmp_289 + tmp_287*tmp_9 + tmp_291*tmp_7;
      real_t tmp_294 = tmp_1*tmp_289 + tmp_287*tmp_6 + tmp_291*tmp_3;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_2*tmp_305 + tmp_303*tmp_4;
      real_t tmp_307 = tmp_10*tmp_303 + tmp_301*tmp_9 + tmp_305*tmp_7;
      real_t tmp_308 = tmp_1*tmp_303 + tmp_3*tmp_305 + tmp_301*tmp_6;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_2*tmp_319 + tmp_317*tmp_4;
      real_t tmp_321 = tmp_10*tmp_317 + tmp_315*tmp_9 + tmp_319*tmp_7;
      real_t tmp_322 = tmp_1*tmp_317 + tmp_3*tmp_319 + tmp_315*tmp_6;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_2*tmp_333 + tmp_331*tmp_4;
      real_t tmp_335 = tmp_10*tmp_331 + tmp_329*tmp_9 + tmp_333*tmp_7;
      real_t tmp_336 = tmp_1*tmp_331 + tmp_3*tmp_333 + tmp_329*tmp_6;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_2*tmp_347 + tmp_345*tmp_4;
      real_t tmp_349 = tmp_10*tmp_345 + tmp_343*tmp_9 + tmp_347*tmp_7;
      real_t tmp_350 = tmp_1*tmp_345 + tmp_3*tmp_347 + tmp_343*tmp_6;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_0*tmp_55;
      real_t tmp_354 = p_affine_13_0*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_61 + p_affine_13_1*tmp_49 + p_affine_13_2*tmp_55;
      real_t tmp_356 = p_affine_13_0*tmp_54;
      real_t tmp_357 = p_affine_13_0*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_60 + p_affine_13_1*tmp_48 + p_affine_13_2*tmp_54;
      real_t tmp_359 = p_affine_13_0*tmp_53;
      real_t tmp_360 = p_affine_13_0*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_59 + p_affine_13_1*tmp_47 + p_affine_13_2*tmp_53;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_1_0 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_2_0 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_3_0 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_01 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_01()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = 1.0 / (tmp_5);
      real_t tmp_7 = 0.5*tmp_6;
      real_t tmp_8 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_9 = tmp_8*(-tmp_0*tmp_7 - tmp_3*tmp_7);
      real_t tmp_10 = 0.025422453185103409*tmp_9;
      real_t tmp_11 = 1.0*tmp_6;
      real_t tmp_12 = -tmp_1*tmp_11 - tmp_11*tmp_4;
      real_t tmp_13 = 2*tmp_12;
      real_t tmp_14 = tmp_13*tmp_9;
      real_t tmp_15 = 2.0*tmp_6;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = tmp_16*tmp_9;
      real_t tmp_18 = tmp_15*tmp_4;
      real_t tmp_19 = tmp_18*tmp_9;
      real_t tmp_20 = tmp_3*tmp_8;
      real_t tmp_21 = 0.025422453185103409*tmp_20;
      real_t tmp_22 = tmp_11*tmp_12;
      real_t tmp_23 = tmp_20*tmp_22;
      real_t tmp_24 = 1.0/(tmp_5*tmp_5);
      real_t tmp_25 = tmp_1*tmp_24;
      real_t tmp_26 = tmp_20*tmp_25;
      real_t tmp_27 = tmp_24*tmp_4;
      real_t tmp_28 = tmp_20*tmp_27;
      real_t tmp_29 = 0.025422453185103409*tmp_8;
      real_t tmp_30 = tmp_0*tmp_22;
      real_t tmp_31 = tmp_30*tmp_8;
      real_t tmp_32 = tmp_2*tmp_24;
      real_t tmp_33 = tmp_32*tmp_8;
      real_t tmp_34 = tmp_0*tmp_27;
      real_t tmp_35 = tmp_34*tmp_8;
      real_t a_0_0 = tmp_10*tmp_13 + 0.47457754681489661*tmp_14;
      real_t a_0_1 = tmp_10*tmp_16 + 0.47457754681489661*tmp_17;
      real_t a_0_2 = tmp_10*tmp_18 + 0.47457754681489661*tmp_19;
      real_t a_1_0 = tmp_21*tmp_22 + 0.47457754681489661*tmp_23;
      real_t a_1_1 = tmp_21*tmp_25 + 0.47457754681489661*tmp_26;
      real_t a_1_2 = tmp_21*tmp_27 + 0.47457754681489661*tmp_28;
      real_t a_2_0 = tmp_29*tmp_30 + 0.47457754681489661*tmp_31;
      real_t a_2_1 = tmp_29*tmp_32 + 0.47457754681489661*tmp_33;
      real_t a_2_2 = tmp_29*tmp_34 + 0.47457754681489661*tmp_35;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_6 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_7 = tmp_4*(0.046910077030668018*tmp_5 + tmp_6);
      real_t tmp_8 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_10 = tmp_4*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = tmp_0*tmp_7 + tmp_10*tmp_2;
      real_t tmp_12 = tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_13 = -tmp_11 - tmp_12 + 1;
      real_t tmp_14 = 1.0*tmp_13;
      real_t tmp_15 = 0.5*tmp_4;
      real_t tmp_16 = tmp_1*tmp_15;
      real_t tmp_17 = tmp_0*tmp_15;
      real_t tmp_18 = p_affine_10_0*(-tmp_16 - tmp_17);
      real_t tmp_19 = tmp_15*tmp_2;
      real_t tmp_20 = tmp_15*tmp_3;
      real_t tmp_21 = p_affine_10_1*(-tmp_19 - tmp_20);
      real_t tmp_22 = std::abs(std::pow((tmp_5*tmp_5) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_23 = 0.11846344252809471*tmp_22;
      real_t tmp_24 = tmp_4*(0.23076534494715845*tmp_5 + tmp_6);
      real_t tmp_25 = tmp_4*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_26 = tmp_0*tmp_24 + tmp_2*tmp_25;
      real_t tmp_27 = tmp_1*tmp_24 + tmp_25*tmp_3;
      real_t tmp_28 = -tmp_26 - tmp_27 + 1;
      real_t tmp_29 = 1.0*tmp_28;
      real_t tmp_30 = 0.2393143352496831*tmp_22;
      real_t tmp_31 = tmp_4*(0.5*tmp_5 + tmp_6);
      real_t tmp_32 = tmp_4*(0.5*tmp_8 + tmp_9);
      real_t tmp_33 = tmp_0*tmp_31 + tmp_2*tmp_32;
      real_t tmp_34 = tmp_1*tmp_31 + tmp_3*tmp_32;
      real_t tmp_35 = -tmp_33 - tmp_34 + 1;
      real_t tmp_36 = 1.0*tmp_35;
      real_t tmp_37 = 0.2844444444444445*tmp_22;
      real_t tmp_38 = tmp_4*(0.7692346550528415*tmp_5 + tmp_6);
      real_t tmp_39 = tmp_4*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_40 = tmp_0*tmp_38 + tmp_2*tmp_39;
      real_t tmp_41 = tmp_1*tmp_38 + tmp_3*tmp_39;
      real_t tmp_42 = -tmp_40 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.2393143352496831*tmp_22;
      real_t tmp_45 = tmp_4*(0.95308992296933193*tmp_5 + tmp_6);
      real_t tmp_46 = tmp_4*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_0*tmp_45 + tmp_2*tmp_46;
      real_t tmp_48 = tmp_1*tmp_45 + tmp_3*tmp_46;
      real_t tmp_49 = -tmp_47 - tmp_48 + 1;
      real_t tmp_50 = 1.0*tmp_49;
      real_t tmp_51 = 0.11846344252809471*tmp_22;
      real_t tmp_52 = 1.0*tmp_18;
      real_t tmp_53 = p_affine_10_1*tmp_19;
      real_t tmp_54 = p_affine_10_1*tmp_20;
      real_t tmp_55 = 1.0*tmp_21;
      real_t tmp_56 = p_affine_10_0*tmp_17;
      real_t tmp_57 = p_affine_10_0*tmp_16;
      real_t a_0_0 = tmp_23*(-tmp_14*tmp_18 - tmp_14*tmp_21) + tmp_30*(-tmp_18*tmp_29 - tmp_21*tmp_29) + tmp_37*(-tmp_18*tmp_36 - tmp_21*tmp_36) + tmp_44*(-tmp_18*tmp_43 - tmp_21*tmp_43) + tmp_51*(-tmp_18*tmp_50 - tmp_21*tmp_50);
      real_t a_0_1 = tmp_23*(-tmp_11*tmp_52 - tmp_13*tmp_53) + tmp_30*(-tmp_26*tmp_52 - tmp_28*tmp_53) + tmp_37*(-tmp_33*tmp_52 - tmp_35*tmp_53) + tmp_44*(-tmp_40*tmp_52 - tmp_42*tmp_53) + tmp_51*(-tmp_47*tmp_52 - tmp_49*tmp_53);
      real_t a_0_2 = tmp_23*(-tmp_12*tmp_52 - tmp_13*tmp_54) + tmp_30*(-tmp_27*tmp_52 - tmp_28*tmp_54) + tmp_37*(-tmp_34*tmp_52 - tmp_35*tmp_54) + tmp_44*(-tmp_41*tmp_52 - tmp_42*tmp_54) + tmp_51*(-tmp_48*tmp_52 - tmp_49*tmp_54);
      real_t a_1_0 = tmp_23*(-tmp_11*tmp_55 - tmp_13*tmp_56) + tmp_30*(-tmp_26*tmp_55 - tmp_28*tmp_56) + tmp_37*(-tmp_33*tmp_55 - tmp_35*tmp_56) + tmp_44*(-tmp_40*tmp_55 - tmp_42*tmp_56) + tmp_51*(-tmp_47*tmp_55 - tmp_49*tmp_56);
      real_t a_1_1 = tmp_23*(-tmp_11*tmp_53 - tmp_11*tmp_56) + tmp_30*(-tmp_26*tmp_53 - tmp_26*tmp_56) + tmp_37*(-tmp_33*tmp_53 - tmp_33*tmp_56) + tmp_44*(-tmp_40*tmp_53 - tmp_40*tmp_56) + tmp_51*(-tmp_47*tmp_53 - tmp_47*tmp_56);
      real_t a_1_2 = tmp_23*(-tmp_11*tmp_54 - tmp_12*tmp_56) + tmp_30*(-tmp_26*tmp_54 - tmp_27*tmp_56) + tmp_37*(-tmp_33*tmp_54 - tmp_34*tmp_56) + tmp_44*(-tmp_40*tmp_54 - tmp_41*tmp_56) + tmp_51*(-tmp_47*tmp_54 - tmp_48*tmp_56);
      real_t a_2_0 = tmp_23*(-tmp_12*tmp_55 - tmp_13*tmp_57) + tmp_30*(-tmp_27*tmp_55 - tmp_28*tmp_57) + tmp_37*(-tmp_34*tmp_55 - tmp_35*tmp_57) + tmp_44*(-tmp_41*tmp_55 - tmp_42*tmp_57) + tmp_51*(-tmp_48*tmp_55 - tmp_49*tmp_57);
      real_t a_2_1 = tmp_23*(-tmp_11*tmp_57 - tmp_12*tmp_53) + tmp_30*(-tmp_26*tmp_57 - tmp_27*tmp_53) + tmp_37*(-tmp_33*tmp_57 - tmp_34*tmp_53) + tmp_44*(-tmp_40*tmp_57 - tmp_41*tmp_53) + tmp_51*(-tmp_47*tmp_57 - tmp_48*tmp_53);
      real_t a_2_2 = tmp_23*(-tmp_12*tmp_54 - tmp_12*tmp_57) + tmp_30*(-tmp_27*tmp_54 - tmp_27*tmp_57) + tmp_37*(-tmp_34*tmp_54 - tmp_34*tmp_57) + tmp_44*(-tmp_41*tmp_54 - tmp_41*tmp_57) + tmp_51*(-tmp_48*tmp_54 - tmp_48*tmp_57);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_1 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_2 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_3 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_3_1;
      real_t tmp_6 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_7 = p_affine_6_1 + 0.046910077030668018*tmp_6;
      real_t tmp_8 = tmp_4*(tmp_5 + tmp_7);
      real_t tmp_9 = -p_affine_3_0;
      real_t tmp_10 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_11 = p_affine_6_0 + 0.046910077030668018*tmp_10;
      real_t tmp_12 = tmp_4*(tmp_11 + tmp_9);
      real_t tmp_13 = tmp_0*tmp_8 + tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8 + tmp_12*tmp_3;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_17 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_18 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_19 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_20 = 1.0 / (tmp_16*tmp_17 - tmp_18*tmp_19);
      real_t tmp_21 = 0.5*tmp_20;
      real_t tmp_22 = tmp_16*tmp_21;
      real_t tmp_23 = tmp_18*tmp_21;
      real_t tmp_24 = p_affine_10_0*(-tmp_22 - tmp_23);
      real_t tmp_25 = -p_affine_0_1;
      real_t tmp_26 = tmp_20*(tmp_25 + tmp_7);
      real_t tmp_27 = -p_affine_0_0;
      real_t tmp_28 = tmp_20*(tmp_11 + tmp_27);
      real_t tmp_29 = tmp_17*tmp_28 + tmp_18*tmp_26;
      real_t tmp_30 = tmp_16*tmp_26 + tmp_19*tmp_28;
      real_t tmp_31 = p_affine_10_1*(-tmp_29 - tmp_30 + 1);
      real_t tmp_32 = 0.5*tmp_4;
      real_t tmp_33 = tmp_2*tmp_32;
      real_t tmp_34 = tmp_3*tmp_32;
      real_t tmp_35 = -1.0*tmp_33 - 1.0*tmp_34;
      real_t tmp_36 = std::abs(std::pow((tmp_10*tmp_10) + (tmp_6*tmp_6), 1.0/2.0));
      real_t tmp_37 = 0.11846344252809471*tmp_36;
      real_t tmp_38 = p_affine_6_1 + 0.23076534494715845*tmp_6;
      real_t tmp_39 = tmp_4*(tmp_38 + tmp_5);
      real_t tmp_40 = p_affine_6_0 + 0.23076534494715845*tmp_10;
      real_t tmp_41 = tmp_4*(tmp_40 + tmp_9);
      real_t tmp_42 = tmp_0*tmp_39 + tmp_2*tmp_41;
      real_t tmp_43 = tmp_1*tmp_39 + tmp_3*tmp_41;
      real_t tmp_44 = -tmp_42 - tmp_43 + 1;
      real_t tmp_45 = tmp_20*(tmp_25 + tmp_38);
      real_t tmp_46 = tmp_20*(tmp_27 + tmp_40);
      real_t tmp_47 = tmp_17*tmp_46 + tmp_18*tmp_45;
      real_t tmp_48 = tmp_16*tmp_45 + tmp_19*tmp_46;
      real_t tmp_49 = -tmp_47 - tmp_48 + 1;
      real_t tmp_50 = p_affine_10_1*tmp_35;
      real_t tmp_51 = 0.2393143352496831*tmp_36;
      real_t tmp_52 = p_affine_6_1 + 0.5*tmp_6;
      real_t tmp_53 = tmp_4*(tmp_5 + tmp_52);
      real_t tmp_54 = p_affine_6_0 + 0.5*tmp_10;
      real_t tmp_55 = tmp_4*(tmp_54 + tmp_9);
      real_t tmp_56 = tmp_0*tmp_53 + tmp_2*tmp_55;
      real_t tmp_57 = tmp_1*tmp_53 + tmp_3*tmp_55;
      real_t tmp_58 = -tmp_56 - tmp_57 + 1;
      real_t tmp_59 = tmp_20*(tmp_25 + tmp_52);
      real_t tmp_60 = tmp_20*(tmp_27 + tmp_54);
      real_t tmp_61 = tmp_17*tmp_60 + tmp_18*tmp_59;
      real_t tmp_62 = tmp_16*tmp_59 + tmp_19*tmp_60;
      real_t tmp_63 = -tmp_61 - tmp_62 + 1;
      real_t tmp_64 = 0.2844444444444445*tmp_36;
      real_t tmp_65 = p_affine_6_1 + 0.7692346550528415*tmp_6;
      real_t tmp_66 = tmp_4*(tmp_5 + tmp_65);
      real_t tmp_67 = p_affine_6_0 + 0.7692346550528415*tmp_10;
      real_t tmp_68 = tmp_4*(tmp_67 + tmp_9);
      real_t tmp_69 = tmp_0*tmp_66 + tmp_2*tmp_68;
      real_t tmp_70 = tmp_1*tmp_66 + tmp_3*tmp_68;
      real_t tmp_71 = -tmp_69 - tmp_70 + 1;
      real_t tmp_72 = tmp_20*(tmp_25 + tmp_65);
      real_t tmp_73 = tmp_20*(tmp_27 + tmp_67);
      real_t tmp_74 = tmp_17*tmp_73 + tmp_18*tmp_72;
      real_t tmp_75 = tmp_16*tmp_72 + tmp_19*tmp_73;
      real_t tmp_76 = -tmp_74 - tmp_75 + 1;
      real_t tmp_77 = 0.2393143352496831*tmp_36;
      real_t tmp_78 = p_affine_6_1 + 0.95308992296933193*tmp_6;
      real_t tmp_79 = tmp_4*(tmp_5 + tmp_78);
      real_t tmp_80 = p_affine_6_0 + 0.95308992296933193*tmp_10;
      real_t tmp_81 = tmp_4*(tmp_80 + tmp_9);
      real_t tmp_82 = tmp_0*tmp_79 + tmp_2*tmp_81;
      real_t tmp_83 = tmp_1*tmp_79 + tmp_3*tmp_81;
      real_t tmp_84 = -tmp_82 - tmp_83 + 1;
      real_t tmp_85 = tmp_20*(tmp_25 + tmp_78);
      real_t tmp_86 = tmp_20*(tmp_27 + tmp_80);
      real_t tmp_87 = tmp_17*tmp_86 + tmp_18*tmp_85;
      real_t tmp_88 = tmp_16*tmp_85 + tmp_19*tmp_86;
      real_t tmp_89 = -tmp_87 - tmp_88 + 1;
      real_t tmp_90 = 0.11846344252809471*tmp_36;
      real_t tmp_91 = p_affine_10_1*tmp_33;
      real_t tmp_92 = p_affine_10_1*tmp_34;
      real_t tmp_93 = p_affine_10_0*tmp_23;
      real_t tmp_94 = p_affine_10_0*tmp_22;
      real_t a_0_0 = tmp_37*(tmp_15*tmp_24 - tmp_31*tmp_35) + tmp_51*(tmp_24*tmp_44 - tmp_49*tmp_50) + tmp_64*(tmp_24*tmp_58 - tmp_50*tmp_63) + tmp_77*(tmp_24*tmp_71 - tmp_50*tmp_76) + tmp_90*(tmp_24*tmp_84 - tmp_50*tmp_89);
      real_t a_0_1 = tmp_37*(tmp_13*tmp_24 - tmp_31*tmp_33) + tmp_51*(tmp_24*tmp_42 - tmp_49*tmp_91) + tmp_64*(tmp_24*tmp_56 - tmp_63*tmp_91) + tmp_77*(tmp_24*tmp_69 - tmp_76*tmp_91) + tmp_90*(tmp_24*tmp_82 - tmp_89*tmp_91);
      real_t a_0_2 = tmp_37*(tmp_14*tmp_24 - tmp_31*tmp_34) + tmp_51*(tmp_24*tmp_43 - tmp_49*tmp_92) + tmp_64*(tmp_24*tmp_57 - tmp_63*tmp_92) + tmp_77*(tmp_24*tmp_70 - tmp_76*tmp_92) + tmp_90*(tmp_24*tmp_83 - tmp_89*tmp_92);
      real_t a_1_0 = tmp_37*(tmp_15*tmp_93 - tmp_29*tmp_50) + tmp_51*(tmp_44*tmp_93 - tmp_47*tmp_50) + tmp_64*(-tmp_50*tmp_61 + tmp_58*tmp_93) + tmp_77*(-tmp_50*tmp_74 + tmp_71*tmp_93) + tmp_90*(-tmp_50*tmp_87 + tmp_84*tmp_93);
      real_t a_1_1 = tmp_37*(tmp_13*tmp_93 - tmp_29*tmp_91) + tmp_51*(tmp_42*tmp_93 - tmp_47*tmp_91) + tmp_64*(tmp_56*tmp_93 - tmp_61*tmp_91) + tmp_77*(tmp_69*tmp_93 - tmp_74*tmp_91) + tmp_90*(tmp_82*tmp_93 - tmp_87*tmp_91);
      real_t a_1_2 = tmp_37*(tmp_14*tmp_93 - tmp_29*tmp_92) + tmp_51*(tmp_43*tmp_93 - tmp_47*tmp_92) + tmp_64*(tmp_57*tmp_93 - tmp_61*tmp_92) + tmp_77*(tmp_70*tmp_93 - tmp_74*tmp_92) + tmp_90*(tmp_83*tmp_93 - tmp_87*tmp_92);
      real_t a_2_0 = tmp_37*(tmp_15*tmp_94 - tmp_30*tmp_50) + tmp_51*(tmp_44*tmp_94 - tmp_48*tmp_50) + tmp_64*(-tmp_50*tmp_62 + tmp_58*tmp_94) + tmp_77*(-tmp_50*tmp_75 + tmp_71*tmp_94) + tmp_90*(-tmp_50*tmp_88 + tmp_84*tmp_94);
      real_t a_2_1 = tmp_37*(tmp_13*tmp_94 - tmp_30*tmp_91) + tmp_51*(tmp_42*tmp_94 - tmp_48*tmp_91) + tmp_64*(tmp_56*tmp_94 - tmp_62*tmp_91) + tmp_77*(tmp_69*tmp_94 - tmp_75*tmp_91) + tmp_90*(tmp_82*tmp_94 - tmp_88*tmp_91);
      real_t a_2_2 = tmp_37*(tmp_14*tmp_94 - tmp_30*tmp_92) + tmp_51*(tmp_43*tmp_94 - tmp_48*tmp_92) + tmp_64*(tmp_57*tmp_94 - tmp_62*tmp_92) + tmp_77*(tmp_70*tmp_94 - tmp_75*tmp_92) + tmp_90*(tmp_83*tmp_94 - tmp_88*tmp_92);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_6 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_7 = tmp_4*(0.046910077030668018*tmp_5 + tmp_6);
      real_t tmp_8 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_10 = tmp_4*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = tmp_0*tmp_7 + tmp_10*tmp_2;
      real_t tmp_12 = tmp_1*tmp_7 + tmp_10*tmp_3;
      real_t tmp_13 = -tmp_11 - tmp_12 + 1;
      real_t tmp_14 = 0.5*tmp_4;
      real_t tmp_15 = tmp_1*tmp_14;
      real_t tmp_16 = tmp_0*tmp_14;
      real_t tmp_17 = p_affine_10_0*(-tmp_15 - tmp_16);
      real_t tmp_18 = tmp_14*tmp_2;
      real_t tmp_19 = tmp_14*tmp_3;
      real_t tmp_20 = p_affine_10_1*(-tmp_18 - tmp_19);
      real_t tmp_21 = 2*std::abs(std::pow((tmp_5*tmp_5) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_22 = 0.11846344252809471*tmp_21;
      real_t tmp_23 = tmp_4*(0.23076534494715845*tmp_5 + tmp_6);
      real_t tmp_24 = tmp_4*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_25 = tmp_0*tmp_23 + tmp_2*tmp_24;
      real_t tmp_26 = tmp_1*tmp_23 + tmp_24*tmp_3;
      real_t tmp_27 = -tmp_25 - tmp_26 + 1;
      real_t tmp_28 = 0.2393143352496831*tmp_21;
      real_t tmp_29 = tmp_4*(0.5*tmp_5 + tmp_6);
      real_t tmp_30 = tmp_4*(0.5*tmp_8 + tmp_9);
      real_t tmp_31 = tmp_0*tmp_29 + tmp_2*tmp_30;
      real_t tmp_32 = tmp_1*tmp_29 + tmp_3*tmp_30;
      real_t tmp_33 = -tmp_31 - tmp_32 + 1;
      real_t tmp_34 = 0.2844444444444445*tmp_21;
      real_t tmp_35 = tmp_4*(0.7692346550528415*tmp_5 + tmp_6);
      real_t tmp_36 = tmp_4*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_0*tmp_35 + tmp_2*tmp_36;
      real_t tmp_38 = tmp_1*tmp_35 + tmp_3*tmp_36;
      real_t tmp_39 = -tmp_37 - tmp_38 + 1;
      real_t tmp_40 = 0.2393143352496831*tmp_21;
      real_t tmp_41 = tmp_4*(0.95308992296933193*tmp_5 + tmp_6);
      real_t tmp_42 = tmp_4*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_43 = tmp_0*tmp_41 + tmp_2*tmp_42;
      real_t tmp_44 = tmp_1*tmp_41 + tmp_3*tmp_42;
      real_t tmp_45 = -tmp_43 - tmp_44 + 1;
      real_t tmp_46 = 0.11846344252809471*tmp_21;
      real_t tmp_47 = p_affine_10_1*tmp_18;
      real_t tmp_48 = p_affine_10_1*tmp_19;
      real_t tmp_49 = p_affine_10_0*tmp_16;
      real_t tmp_50 = p_affine_10_0*tmp_15;
      real_t a_0_0 = tmp_22*(-tmp_13*tmp_17 - tmp_13*tmp_20) + tmp_28*(-tmp_17*tmp_27 - tmp_20*tmp_27) + tmp_34*(-tmp_17*tmp_33 - tmp_20*tmp_33) + tmp_40*(-tmp_17*tmp_39 - tmp_20*tmp_39) + tmp_46*(-tmp_17*tmp_45 - tmp_20*tmp_45);
      real_t a_0_1 = tmp_22*(-tmp_11*tmp_17 - tmp_13*tmp_47) + tmp_28*(-tmp_17*tmp_25 - tmp_27*tmp_47) + tmp_34*(-tmp_17*tmp_31 - tmp_33*tmp_47) + tmp_40*(-tmp_17*tmp_37 - tmp_39*tmp_47) + tmp_46*(-tmp_17*tmp_43 - tmp_45*tmp_47);
      real_t a_0_2 = tmp_22*(-tmp_12*tmp_17 - tmp_13*tmp_48) + tmp_28*(-tmp_17*tmp_26 - tmp_27*tmp_48) + tmp_34*(-tmp_17*tmp_32 - tmp_33*tmp_48) + tmp_40*(-tmp_17*tmp_38 - tmp_39*tmp_48) + tmp_46*(-tmp_17*tmp_44 - tmp_45*tmp_48);
      real_t a_1_0 = tmp_22*(-tmp_11*tmp_20 - tmp_13*tmp_49) + tmp_28*(-tmp_20*tmp_25 - tmp_27*tmp_49) + tmp_34*(-tmp_20*tmp_31 - tmp_33*tmp_49) + tmp_40*(-tmp_20*tmp_37 - tmp_39*tmp_49) + tmp_46*(-tmp_20*tmp_43 - tmp_45*tmp_49);
      real_t a_1_1 = tmp_22*(-tmp_11*tmp_47 - tmp_11*tmp_49) + tmp_28*(-tmp_25*tmp_47 - tmp_25*tmp_49) + tmp_34*(-tmp_31*tmp_47 - tmp_31*tmp_49) + tmp_40*(-tmp_37*tmp_47 - tmp_37*tmp_49) + tmp_46*(-tmp_43*tmp_47 - tmp_43*tmp_49);
      real_t a_1_2 = tmp_22*(-tmp_11*tmp_48 - tmp_12*tmp_49) + tmp_28*(-tmp_25*tmp_48 - tmp_26*tmp_49) + tmp_34*(-tmp_31*tmp_48 - tmp_32*tmp_49) + tmp_40*(-tmp_37*tmp_48 - tmp_38*tmp_49) + tmp_46*(-tmp_43*tmp_48 - tmp_44*tmp_49);
      real_t a_2_0 = tmp_22*(-tmp_12*tmp_20 - tmp_13*tmp_50) + tmp_28*(-tmp_20*tmp_26 - tmp_27*tmp_50) + tmp_34*(-tmp_20*tmp_32 - tmp_33*tmp_50) + tmp_40*(-tmp_20*tmp_38 - tmp_39*tmp_50) + tmp_46*(-tmp_20*tmp_44 - tmp_45*tmp_50);
      real_t a_2_1 = tmp_22*(-tmp_11*tmp_50 - tmp_12*tmp_47) + tmp_28*(-tmp_25*tmp_50 - tmp_26*tmp_47) + tmp_34*(-tmp_31*tmp_50 - tmp_32*tmp_47) + tmp_40*(-tmp_37*tmp_50 - tmp_38*tmp_47) + tmp_46*(-tmp_43*tmp_50 - tmp_44*tmp_47);
      real_t a_2_2 = tmp_22*(-tmp_12*tmp_48 - tmp_12*tmp_50) + tmp_28*(-tmp_26*tmp_48 - tmp_26*tmp_50) + tmp_34*(-tmp_32*tmp_48 - tmp_32*tmp_50) + tmp_40*(-tmp_38*tmp_48 - tmp_38*tmp_50) + tmp_46*(-tmp_44*tmp_48 - tmp_44*tmp_50);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = -tmp_2 + tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_0*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_3*tmp_7;
      real_t tmp_13 = tmp_11*tmp_4;
      real_t tmp_14 = tmp_1*tmp_10*tmp_11 - tmp_10*tmp_12 - tmp_13*tmp_6 - tmp_2*tmp_9 + tmp_3*tmp_4*tmp_9 + tmp_6*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_14);
      real_t tmp_16 = 0.5*tmp_15;
      real_t tmp_17 = -tmp_13 + tmp_8;
      real_t tmp_18 = tmp_1*tmp_11 - tmp_12;
      real_t tmp_19 = p_affine_0_0*p_affine_1_1;
      real_t tmp_20 = p_affine_0_0*p_affine_1_2;
      real_t tmp_21 = p_affine_2_1*p_affine_3_2;
      real_t tmp_22 = p_affine_0_1*p_affine_1_0;
      real_t tmp_23 = p_affine_0_1*p_affine_1_2;
      real_t tmp_24 = p_affine_2_2*p_affine_3_0;
      real_t tmp_25 = p_affine_0_2*p_affine_1_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_1;
      real_t tmp_27 = p_affine_2_0*p_affine_3_1;
      real_t tmp_28 = p_affine_2_2*p_affine_3_1;
      real_t tmp_29 = p_affine_2_0*p_affine_3_2;
      real_t tmp_30 = p_affine_2_1*p_affine_3_0;
      real_t tmp_31 = std::abs(p_affine_0_0*tmp_21 - p_affine_0_0*tmp_28 + p_affine_0_1*tmp_24 - p_affine_0_1*tmp_29 + p_affine_0_2*tmp_27 - p_affine_0_2*tmp_30 - p_affine_1_0*tmp_21 + p_affine_1_0*tmp_28 - p_affine_1_1*tmp_24 + p_affine_1_1*tmp_29 - p_affine_1_2*tmp_27 + p_affine_1_2*tmp_30 + p_affine_2_0*tmp_23 - p_affine_2_0*tmp_26 - p_affine_2_1*tmp_20 + p_affine_2_1*tmp_25 + p_affine_2_2*tmp_19 - p_affine_2_2*tmp_22 - p_affine_3_0*tmp_23 + p_affine_3_0*tmp_26 + p_affine_3_1*tmp_20 - p_affine_3_1*tmp_25 - p_affine_3_2*tmp_19 + p_affine_3_2*tmp_22);
      real_t tmp_32 = tmp_31*(-tmp_16*tmp_17 - tmp_16*tmp_18 - tmp_16*tmp_5);
      real_t tmp_33 = 0.0044044418180681378*tmp_32;
      real_t tmp_34 = tmp_1*tmp_10 - tmp_4*tmp_6;
      real_t tmp_35 = 1.0*tmp_15;
      real_t tmp_36 = -tmp_10*tmp_7 + tmp_4*tmp_9;
      real_t tmp_37 = -tmp_1*tmp_9 + tmp_6*tmp_7;
      real_t tmp_38 = -tmp_34*tmp_35 - tmp_35*tmp_36 - tmp_35*tmp_37;
      real_t tmp_39 = 2*tmp_38;
      real_t tmp_40 = tmp_32*tmp_39;
      real_t tmp_41 = 2.0*tmp_15;
      real_t tmp_42 = tmp_37*tmp_41;
      real_t tmp_43 = tmp_32*tmp_42;
      real_t tmp_44 = tmp_36*tmp_41;
      real_t tmp_45 = tmp_32*tmp_44;
      real_t tmp_46 = tmp_34*tmp_41;
      real_t tmp_47 = tmp_32*tmp_46;
      real_t tmp_48 = tmp_18*tmp_31;
      real_t tmp_49 = 0.0044044418180681378*tmp_48;
      real_t tmp_50 = tmp_35*tmp_38;
      real_t tmp_51 = tmp_48*tmp_50;
      real_t tmp_52 = 1.0/(tmp_14*tmp_14);
      real_t tmp_53 = tmp_37*tmp_52;
      real_t tmp_54 = tmp_48*tmp_53;
      real_t tmp_55 = tmp_36*tmp_52;
      real_t tmp_56 = tmp_48*tmp_55;
      real_t tmp_57 = tmp_34*tmp_52;
      real_t tmp_58 = tmp_48*tmp_57;
      real_t tmp_59 = tmp_17*tmp_31;
      real_t tmp_60 = tmp_50*tmp_59;
      real_t tmp_61 = tmp_53*tmp_59;
      real_t tmp_62 = tmp_55*tmp_59;
      real_t tmp_63 = tmp_57*tmp_59;
      real_t tmp_64 = tmp_31*tmp_5;
      real_t tmp_65 = tmp_50*tmp_64;
      real_t tmp_66 = tmp_53*tmp_64;
      real_t tmp_67 = tmp_55*tmp_64;
      real_t tmp_68 = tmp_57*tmp_64;
      real_t a_0_0 = tmp_33*tmp_39 + 0.16226222484859867*tmp_40;
      real_t a_0_1 = tmp_33*tmp_42 + 0.16226222484859867*tmp_43;
      real_t a_0_2 = tmp_33*tmp_44 + 0.16226222484859867*tmp_45;
      real_t a_0_3 = tmp_33*tmp_46 + 0.16226222484859867*tmp_47;
      real_t a_1_0 = tmp_49*tmp_50 + 0.16226222484859867*tmp_51;
      real_t a_1_1 = tmp_49*tmp_53 + 0.16226222484859867*tmp_54;
      real_t a_1_2 = tmp_49*tmp_55 + 0.16226222484859867*tmp_56;
      real_t a_1_3 = tmp_49*tmp_57 + 0.16226222484859867*tmp_58;
      real_t a_2_0 = 0.1666666666666668*tmp_60;
      real_t a_2_1 = 0.1666666666666668*tmp_61;
      real_t a_2_2 = 0.1666666666666668*tmp_62;
      real_t a_2_3 = 0.1666666666666668*tmp_63;
      real_t a_3_0 = 0.1666666666666668*tmp_65;
      real_t a_3_1 = 0.1666666666666668*tmp_66;
      real_t a_3_2 = 0.1666666666666668*tmp_67;
      real_t a_3_3 = 0.1666666666666668*tmp_68;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_0*tmp_6;
      real_t tmp_13 = tmp_2*tmp_8;
      real_t tmp_14 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_1*tmp_11 + tmp_10*tmp_2*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_3 + tmp_3*tmp_7);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_19 = tmp_14*(0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17 + tmp_18);
      real_t tmp_20 = tmp_10*tmp_2 - tmp_12;
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = tmp_14*(0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24);
      real_t tmp_26 = -tmp_1*tmp_10 + tmp_3*tmp_6;
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = tmp_14*(0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30);
      real_t tmp_32 = tmp_19*tmp_4 + tmp_20*tmp_25 + tmp_26*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_34 = -tmp_13 + tmp_7;
      real_t tmp_35 = tmp_1*tmp_8 - tmp_6*tmp_9;
      real_t tmp_36 = tmp_19*tmp_33 + tmp_25*tmp_34 + tmp_31*tmp_35;
      real_t tmp_37 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_11;
      real_t tmp_39 = tmp_10*tmp_9 - tmp_3*tmp_8;
      real_t tmp_40 = tmp_19*tmp_37 + tmp_25*tmp_38 + tmp_31*tmp_39;
      real_t tmp_41 = -tmp_32 - tmp_36 - tmp_40 + 1;
      real_t tmp_42 = 1.0*tmp_41;
      real_t tmp_43 = 0.5*tmp_14;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_20*tmp_43;
      real_t tmp_47 = p_affine_13_0*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_39*tmp_43;
      real_t tmp_49 = tmp_35*tmp_43;
      real_t tmp_50 = tmp_26*tmp_43;
      real_t tmp_51 = p_affine_13_1*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 1.0*std::pow((std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)*std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)) + (std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)*std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_14*(0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17 + tmp_18);
      real_t tmp_55 = tmp_14*(0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24);
      real_t tmp_56 = tmp_14*(0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30);
      real_t tmp_57 = tmp_20*tmp_55 + tmp_26*tmp_56 + tmp_4*tmp_54;
      real_t tmp_58 = tmp_33*tmp_54 + tmp_34*tmp_55 + tmp_35*tmp_56;
      real_t tmp_59 = tmp_37*tmp_54 + tmp_38*tmp_55 + tmp_39*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 1.0*tmp_60;
      real_t tmp_62 = 0.037198804536718075*tmp_52;
      real_t tmp_63 = tmp_14*(0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_64 = tmp_14*(0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_65 = tmp_14*(0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_66 = tmp_20*tmp_64 + tmp_26*tmp_65 + tmp_4*tmp_63;
      real_t tmp_67 = tmp_33*tmp_63 + tmp_34*tmp_64 + tmp_35*tmp_65;
      real_t tmp_68 = tmp_37*tmp_63 + tmp_38*tmp_64 + tmp_39*tmp_65;
      real_t tmp_69 = -tmp_66 - tmp_67 - tmp_68 + 1;
      real_t tmp_70 = 1.0*tmp_69;
      real_t tmp_71 = 0.020848748529055869*tmp_52;
      real_t tmp_72 = tmp_14*(0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_73 = tmp_14*(0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_74 = tmp_14*(0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_75 = tmp_20*tmp_73 + tmp_26*tmp_74 + tmp_4*tmp_72;
      real_t tmp_76 = tmp_33*tmp_72 + tmp_34*tmp_73 + tmp_35*tmp_74;
      real_t tmp_77 = tmp_37*tmp_72 + tmp_38*tmp_73 + tmp_39*tmp_74;
      real_t tmp_78 = -tmp_75 - tmp_76 - tmp_77 + 1;
      real_t tmp_79 = 1.0*tmp_78;
      real_t tmp_80 = 0.019202922745021479*tmp_52;
      real_t tmp_81 = tmp_14*(0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_82 = tmp_14*(0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_83 = tmp_14*(0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_84 = tmp_20*tmp_82 + tmp_26*tmp_83 + tmp_4*tmp_81;
      real_t tmp_85 = tmp_33*tmp_81 + tmp_34*tmp_82 + tmp_35*tmp_83;
      real_t tmp_86 = tmp_37*tmp_81 + tmp_38*tmp_82 + tmp_39*tmp_83;
      real_t tmp_87 = -tmp_84 - tmp_85 - tmp_86 + 1;
      real_t tmp_88 = 1.0*tmp_87;
      real_t tmp_89 = 0.020848748529055869*tmp_52;
      real_t tmp_90 = tmp_14*(0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_91 = tmp_14*(0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_92 = tmp_14*(0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_93 = tmp_20*tmp_91 + tmp_26*tmp_92 + tmp_4*tmp_90;
      real_t tmp_94 = tmp_33*tmp_90 + tmp_34*tmp_91 + tmp_35*tmp_92;
      real_t tmp_95 = tmp_37*tmp_90 + tmp_38*tmp_91 + tmp_39*tmp_92;
      real_t tmp_96 = -tmp_93 - tmp_94 - tmp_95 + 1;
      real_t tmp_97 = 1.0*tmp_96;
      real_t tmp_98 = 0.019202922745021479*tmp_52;
      real_t tmp_99 = tmp_14*(0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_100 = tmp_14*(0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_101 = tmp_14*(0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_102 = tmp_100*tmp_20 + tmp_101*tmp_26 + tmp_4*tmp_99;
      real_t tmp_103 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_33*tmp_99;
      real_t tmp_104 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_37*tmp_99;
      real_t tmp_105 = -tmp_102 - tmp_103 - tmp_104 + 1;
      real_t tmp_106 = 1.0*tmp_105;
      real_t tmp_107 = 0.020848748529055869*tmp_52;
      real_t tmp_108 = tmp_14*(0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_109 = tmp_14*(0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_110 = tmp_14*(0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_111 = tmp_108*tmp_4 + tmp_109*tmp_20 + tmp_110*tmp_26;
      real_t tmp_112 = tmp_108*tmp_33 + tmp_109*tmp_34 + tmp_110*tmp_35;
      real_t tmp_113 = tmp_108*tmp_37 + tmp_109*tmp_38 + tmp_110*tmp_39;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 1.0*tmp_114;
      real_t tmp_116 = 0.019202922745021479*tmp_52;
      real_t tmp_117 = tmp_14*(0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_118 = tmp_14*(0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_119 = tmp_14*(0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_120 = tmp_117*tmp_4 + tmp_118*tmp_20 + tmp_119*tmp_26;
      real_t tmp_121 = tmp_117*tmp_33 + tmp_118*tmp_34 + tmp_119*tmp_35;
      real_t tmp_122 = tmp_117*tmp_37 + tmp_118*tmp_38 + tmp_119*tmp_39;
      real_t tmp_123 = -tmp_120 - tmp_121 - tmp_122 + 1;
      real_t tmp_124 = 1.0*tmp_123;
      real_t tmp_125 = 0.020848748529055869*tmp_52;
      real_t tmp_126 = tmp_14*(0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_127 = tmp_14*(0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_128 = tmp_14*(0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_129 = tmp_126*tmp_4 + tmp_127*tmp_20 + tmp_128*tmp_26;
      real_t tmp_130 = tmp_126*tmp_33 + tmp_127*tmp_34 + tmp_128*tmp_35;
      real_t tmp_131 = tmp_126*tmp_37 + tmp_127*tmp_38 + tmp_128*tmp_39;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 1.0*tmp_132;
      real_t tmp_134 = 0.019202922745021479*tmp_52;
      real_t tmp_135 = tmp_14*(0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_136 = tmp_14*(0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_137 = tmp_14*(0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_138 = tmp_135*tmp_4 + tmp_136*tmp_20 + tmp_137*tmp_26;
      real_t tmp_139 = tmp_135*tmp_33 + tmp_136*tmp_34 + tmp_137*tmp_35;
      real_t tmp_140 = tmp_135*tmp_37 + tmp_136*tmp_38 + tmp_137*tmp_39;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = 1.0*tmp_141;
      real_t tmp_143 = 0.020848748529055869*tmp_52;
      real_t tmp_144 = tmp_14*(0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_145 = tmp_14*(0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_146 = tmp_14*(0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_147 = tmp_144*tmp_4 + tmp_145*tmp_20 + tmp_146*tmp_26;
      real_t tmp_148 = tmp_144*tmp_33 + tmp_145*tmp_34 + tmp_146*tmp_35;
      real_t tmp_149 = tmp_144*tmp_37 + tmp_145*tmp_38 + tmp_146*tmp_39;
      real_t tmp_150 = -tmp_147 - tmp_148 - tmp_149 + 1;
      real_t tmp_151 = 1.0*tmp_150;
      real_t tmp_152 = 0.019202922745021479*tmp_52;
      real_t tmp_153 = tmp_14*(0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17 + tmp_18);
      real_t tmp_154 = tmp_14*(0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24);
      real_t tmp_155 = tmp_14*(0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30);
      real_t tmp_156 = tmp_153*tmp_4 + tmp_154*tmp_20 + tmp_155*tmp_26;
      real_t tmp_157 = tmp_153*tmp_33 + tmp_154*tmp_34 + tmp_155*tmp_35;
      real_t tmp_158 = tmp_153*tmp_37 + tmp_154*tmp_38 + tmp_155*tmp_39;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 1.0*tmp_159;
      real_t tmp_161 = 0.042507265838595799*tmp_52;
      real_t tmp_162 = tmp_14*(0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_163 = tmp_14*(0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_164 = tmp_14*(0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_165 = tmp_162*tmp_4 + tmp_163*tmp_20 + tmp_164*tmp_26;
      real_t tmp_166 = tmp_162*tmp_33 + tmp_163*tmp_34 + tmp_164*tmp_35;
      real_t tmp_167 = tmp_162*tmp_37 + tmp_163*tmp_38 + tmp_164*tmp_39;
      real_t tmp_168 = -tmp_165 - tmp_166 - tmp_167 + 1;
      real_t tmp_169 = 1.0*tmp_168;
      real_t tmp_170 = 0.020848748529055869*tmp_52;
      real_t tmp_171 = tmp_14*(0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_172 = tmp_14*(0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_173 = tmp_14*(0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_174 = tmp_171*tmp_4 + tmp_172*tmp_20 + tmp_173*tmp_26;
      real_t tmp_175 = tmp_171*tmp_33 + tmp_172*tmp_34 + tmp_173*tmp_35;
      real_t tmp_176 = tmp_171*tmp_37 + tmp_172*tmp_38 + tmp_173*tmp_39;
      real_t tmp_177 = -tmp_174 - tmp_175 - tmp_176 + 1;
      real_t tmp_178 = 1.0*tmp_177;
      real_t tmp_179 = 0.0068572537431980923*tmp_52;
      real_t tmp_180 = tmp_14*(0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_181 = tmp_14*(0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_182 = tmp_14*(0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_183 = tmp_180*tmp_4 + tmp_181*tmp_20 + tmp_182*tmp_26;
      real_t tmp_184 = tmp_180*tmp_33 + tmp_181*tmp_34 + tmp_182*tmp_35;
      real_t tmp_185 = tmp_180*tmp_37 + tmp_181*tmp_38 + tmp_182*tmp_39;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 1.0*tmp_186;
      real_t tmp_188 = 0.037198804536718075*tmp_52;
      real_t tmp_189 = tmp_14*(0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_190 = tmp_14*(0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_191 = tmp_14*(0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_192 = tmp_189*tmp_4 + tmp_190*tmp_20 + tmp_191*tmp_26;
      real_t tmp_193 = tmp_189*tmp_33 + tmp_190*tmp_34 + tmp_191*tmp_35;
      real_t tmp_194 = tmp_189*tmp_37 + tmp_190*tmp_38 + tmp_191*tmp_39;
      real_t tmp_195 = -tmp_192 - tmp_193 - tmp_194 + 1;
      real_t tmp_196 = 1.0*tmp_195;
      real_t tmp_197 = 0.042507265838595799*tmp_52;
      real_t tmp_198 = tmp_14*(0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_199 = tmp_14*(0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_200 = tmp_14*(0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_201 = tmp_198*tmp_4 + tmp_199*tmp_20 + tmp_200*tmp_26;
      real_t tmp_202 = tmp_198*tmp_33 + tmp_199*tmp_34 + tmp_200*tmp_35;
      real_t tmp_203 = tmp_198*tmp_37 + tmp_199*tmp_38 + tmp_200*tmp_39;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 1.0*tmp_204;
      real_t tmp_206 = 0.0068572537431980923*tmp_52;
      real_t tmp_207 = tmp_14*(0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_208 = tmp_14*(0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_209 = tmp_14*(0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_210 = tmp_20*tmp_208 + tmp_207*tmp_4 + tmp_209*tmp_26;
      real_t tmp_211 = tmp_207*tmp_33 + tmp_208*tmp_34 + tmp_209*tmp_35;
      real_t tmp_212 = tmp_207*tmp_37 + tmp_208*tmp_38 + tmp_209*tmp_39;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = 1.0*tmp_213;
      real_t tmp_215 = 0.037198804536718075*tmp_52;
      real_t tmp_216 = tmp_14*(0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_217 = tmp_14*(0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_218 = tmp_14*(0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_219 = tmp_20*tmp_217 + tmp_216*tmp_4 + tmp_218*tmp_26;
      real_t tmp_220 = tmp_216*tmp_33 + tmp_217*tmp_34 + tmp_218*tmp_35;
      real_t tmp_221 = tmp_216*tmp_37 + tmp_217*tmp_38 + tmp_218*tmp_39;
      real_t tmp_222 = -tmp_219 - tmp_220 - tmp_221 + 1;
      real_t tmp_223 = 1.0*tmp_222;
      real_t tmp_224 = 0.042507265838595799*tmp_52;
      real_t tmp_225 = tmp_14*(0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_226 = tmp_14*(0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_227 = tmp_14*(0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_228 = tmp_20*tmp_226 + tmp_225*tmp_4 + tmp_227*tmp_26;
      real_t tmp_229 = tmp_225*tmp_33 + tmp_226*tmp_34 + tmp_227*tmp_35;
      real_t tmp_230 = tmp_225*tmp_37 + tmp_226*tmp_38 + tmp_227*tmp_39;
      real_t tmp_231 = -tmp_228 - tmp_229 - tmp_230 + 1;
      real_t tmp_232 = 1.0*tmp_231;
      real_t tmp_233 = 0.019202922745021479*tmp_52;
      real_t tmp_234 = 1.0*tmp_47;
      real_t tmp_235 = p_affine_13_1*tmp_50;
      real_t tmp_236 = p_affine_13_1*tmp_49;
      real_t tmp_237 = p_affine_13_1*tmp_48;
      real_t tmp_238 = 1.0*tmp_51;
      real_t tmp_239 = p_affine_13_0*tmp_46;
      real_t tmp_240 = p_affine_13_0*tmp_45;
      real_t tmp_241 = p_affine_13_0*tmp_44;
      real_t a_0_0 = tmp_107*(-tmp_106*tmp_47 - tmp_106*tmp_51) + tmp_116*(-tmp_115*tmp_47 - tmp_115*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_134*(-tmp_133*tmp_47 - tmp_133*tmp_51) + tmp_143*(-tmp_142*tmp_47 - tmp_142*tmp_51) + tmp_152*(-tmp_151*tmp_47 - tmp_151*tmp_51) + tmp_161*(-tmp_160*tmp_47 - tmp_160*tmp_51) + tmp_170*(-tmp_169*tmp_47 - tmp_169*tmp_51) + tmp_179*(-tmp_178*tmp_47 - tmp_178*tmp_51) + tmp_188*(-tmp_187*tmp_47 - tmp_187*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_206*(-tmp_205*tmp_47 - tmp_205*tmp_51) + tmp_215*(-tmp_214*tmp_47 - tmp_214*tmp_51) + tmp_224*(-tmp_223*tmp_47 - tmp_223*tmp_51) + tmp_233*(-tmp_232*tmp_47 - tmp_232*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_62*(-tmp_47*tmp_61 - tmp_51*tmp_61) + tmp_71*(-tmp_47*tmp_70 - tmp_51*tmp_70) + tmp_80*(-tmp_47*tmp_79 - tmp_51*tmp_79) + tmp_89*(-tmp_47*tmp_88 - tmp_51*tmp_88) + tmp_98*(-tmp_47*tmp_97 - tmp_51*tmp_97);
      real_t a_0_1 = tmp_107*(-tmp_102*tmp_234 - tmp_105*tmp_235) + tmp_116*(-tmp_111*tmp_234 - tmp_114*tmp_235) + tmp_125*(-tmp_120*tmp_234 - tmp_123*tmp_235) + tmp_134*(-tmp_129*tmp_234 - tmp_132*tmp_235) + tmp_143*(-tmp_138*tmp_234 - tmp_141*tmp_235) + tmp_152*(-tmp_147*tmp_234 - tmp_150*tmp_235) + tmp_161*(-tmp_156*tmp_234 - tmp_159*tmp_235) + tmp_170*(-tmp_165*tmp_234 - tmp_168*tmp_235) + tmp_179*(-tmp_174*tmp_234 - tmp_177*tmp_235) + tmp_188*(-tmp_183*tmp_234 - tmp_186*tmp_235) + tmp_197*(-tmp_192*tmp_234 - tmp_195*tmp_235) + tmp_206*(-tmp_201*tmp_234 - tmp_204*tmp_235) + tmp_215*(-tmp_210*tmp_234 - tmp_213*tmp_235) + tmp_224*(-tmp_219*tmp_234 - tmp_222*tmp_235) + tmp_233*(-tmp_228*tmp_234 - tmp_231*tmp_235) + tmp_53*(-tmp_234*tmp_32 - tmp_235*tmp_41) + tmp_62*(-tmp_234*tmp_57 - tmp_235*tmp_60) + tmp_71*(-tmp_234*tmp_66 - tmp_235*tmp_69) + tmp_80*(-tmp_234*tmp_75 - tmp_235*tmp_78) + tmp_89*(-tmp_234*tmp_84 - tmp_235*tmp_87) + tmp_98*(-tmp_234*tmp_93 - tmp_235*tmp_96);
      real_t a_0_2 = tmp_107*(-tmp_103*tmp_234 - tmp_105*tmp_236) + tmp_116*(-tmp_112*tmp_234 - tmp_114*tmp_236) + tmp_125*(-tmp_121*tmp_234 - tmp_123*tmp_236) + tmp_134*(-tmp_130*tmp_234 - tmp_132*tmp_236) + tmp_143*(-tmp_139*tmp_234 - tmp_141*tmp_236) + tmp_152*(-tmp_148*tmp_234 - tmp_150*tmp_236) + tmp_161*(-tmp_157*tmp_234 - tmp_159*tmp_236) + tmp_170*(-tmp_166*tmp_234 - tmp_168*tmp_236) + tmp_179*(-tmp_175*tmp_234 - tmp_177*tmp_236) + tmp_188*(-tmp_184*tmp_234 - tmp_186*tmp_236) + tmp_197*(-tmp_193*tmp_234 - tmp_195*tmp_236) + tmp_206*(-tmp_202*tmp_234 - tmp_204*tmp_236) + tmp_215*(-tmp_211*tmp_234 - tmp_213*tmp_236) + tmp_224*(-tmp_220*tmp_234 - tmp_222*tmp_236) + tmp_233*(-tmp_229*tmp_234 - tmp_231*tmp_236) + tmp_53*(-tmp_234*tmp_36 - tmp_236*tmp_41) + tmp_62*(-tmp_234*tmp_58 - tmp_236*tmp_60) + tmp_71*(-tmp_234*tmp_67 - tmp_236*tmp_69) + tmp_80*(-tmp_234*tmp_76 - tmp_236*tmp_78) + tmp_89*(-tmp_234*tmp_85 - tmp_236*tmp_87) + tmp_98*(-tmp_234*tmp_94 - tmp_236*tmp_96);
      real_t a_0_3 = tmp_107*(-tmp_104*tmp_234 - tmp_105*tmp_237) + tmp_116*(-tmp_113*tmp_234 - tmp_114*tmp_237) + tmp_125*(-tmp_122*tmp_234 - tmp_123*tmp_237) + tmp_134*(-tmp_131*tmp_234 - tmp_132*tmp_237) + tmp_143*(-tmp_140*tmp_234 - tmp_141*tmp_237) + tmp_152*(-tmp_149*tmp_234 - tmp_150*tmp_237) + tmp_161*(-tmp_158*tmp_234 - tmp_159*tmp_237) + tmp_170*(-tmp_167*tmp_234 - tmp_168*tmp_237) + tmp_179*(-tmp_176*tmp_234 - tmp_177*tmp_237) + tmp_188*(-tmp_185*tmp_234 - tmp_186*tmp_237) + tmp_197*(-tmp_194*tmp_234 - tmp_195*tmp_237) + tmp_206*(-tmp_203*tmp_234 - tmp_204*tmp_237) + tmp_215*(-tmp_212*tmp_234 - tmp_213*tmp_237) + tmp_224*(-tmp_221*tmp_234 - tmp_222*tmp_237) + tmp_233*(-tmp_230*tmp_234 - tmp_231*tmp_237) + tmp_53*(-tmp_234*tmp_40 - tmp_237*tmp_41) + tmp_62*(-tmp_234*tmp_59 - tmp_237*tmp_60) + tmp_71*(-tmp_234*tmp_68 - tmp_237*tmp_69) + tmp_80*(-tmp_234*tmp_77 - tmp_237*tmp_78) + tmp_89*(-tmp_234*tmp_86 - tmp_237*tmp_87) + tmp_98*(-tmp_234*tmp_95 - tmp_237*tmp_96);
      real_t a_1_0 = tmp_107*(-tmp_102*tmp_238 - tmp_105*tmp_239) + tmp_116*(-tmp_111*tmp_238 - tmp_114*tmp_239) + tmp_125*(-tmp_120*tmp_238 - tmp_123*tmp_239) + tmp_134*(-tmp_129*tmp_238 - tmp_132*tmp_239) + tmp_143*(-tmp_138*tmp_238 - tmp_141*tmp_239) + tmp_152*(-tmp_147*tmp_238 - tmp_150*tmp_239) + tmp_161*(-tmp_156*tmp_238 - tmp_159*tmp_239) + tmp_170*(-tmp_165*tmp_238 - tmp_168*tmp_239) + tmp_179*(-tmp_174*tmp_238 - tmp_177*tmp_239) + tmp_188*(-tmp_183*tmp_238 - tmp_186*tmp_239) + tmp_197*(-tmp_192*tmp_238 - tmp_195*tmp_239) + tmp_206*(-tmp_201*tmp_238 - tmp_204*tmp_239) + tmp_215*(-tmp_210*tmp_238 - tmp_213*tmp_239) + tmp_224*(-tmp_219*tmp_238 - tmp_222*tmp_239) + tmp_233*(-tmp_228*tmp_238 - tmp_231*tmp_239) + tmp_53*(-tmp_238*tmp_32 - tmp_239*tmp_41) + tmp_62*(-tmp_238*tmp_57 - tmp_239*tmp_60) + tmp_71*(-tmp_238*tmp_66 - tmp_239*tmp_69) + tmp_80*(-tmp_238*tmp_75 - tmp_239*tmp_78) + tmp_89*(-tmp_238*tmp_84 - tmp_239*tmp_87) + tmp_98*(-tmp_238*tmp_93 - tmp_239*tmp_96);
      real_t a_1_1 = tmp_107*(-tmp_102*tmp_235 - tmp_102*tmp_239) + tmp_116*(-tmp_111*tmp_235 - tmp_111*tmp_239) + tmp_125*(-tmp_120*tmp_235 - tmp_120*tmp_239) + tmp_134*(-tmp_129*tmp_235 - tmp_129*tmp_239) + tmp_143*(-tmp_138*tmp_235 - tmp_138*tmp_239) + tmp_152*(-tmp_147*tmp_235 - tmp_147*tmp_239) + tmp_161*(-tmp_156*tmp_235 - tmp_156*tmp_239) + tmp_170*(-tmp_165*tmp_235 - tmp_165*tmp_239) + tmp_179*(-tmp_174*tmp_235 - tmp_174*tmp_239) + tmp_188*(-tmp_183*tmp_235 - tmp_183*tmp_239) + tmp_197*(-tmp_192*tmp_235 - tmp_192*tmp_239) + tmp_206*(-tmp_201*tmp_235 - tmp_201*tmp_239) + tmp_215*(-tmp_210*tmp_235 - tmp_210*tmp_239) + tmp_224*(-tmp_219*tmp_235 - tmp_219*tmp_239) + tmp_233*(-tmp_228*tmp_235 - tmp_228*tmp_239) + tmp_53*(-tmp_235*tmp_32 - tmp_239*tmp_32) + tmp_62*(-tmp_235*tmp_57 - tmp_239*tmp_57) + tmp_71*(-tmp_235*tmp_66 - tmp_239*tmp_66) + tmp_80*(-tmp_235*tmp_75 - tmp_239*tmp_75) + tmp_89*(-tmp_235*tmp_84 - tmp_239*tmp_84) + tmp_98*(-tmp_235*tmp_93 - tmp_239*tmp_93);
      real_t a_1_2 = tmp_107*(-tmp_102*tmp_236 - tmp_103*tmp_239) + tmp_116*(-tmp_111*tmp_236 - tmp_112*tmp_239) + tmp_125*(-tmp_120*tmp_236 - tmp_121*tmp_239) + tmp_134*(-tmp_129*tmp_236 - tmp_130*tmp_239) + tmp_143*(-tmp_138*tmp_236 - tmp_139*tmp_239) + tmp_152*(-tmp_147*tmp_236 - tmp_148*tmp_239) + tmp_161*(-tmp_156*tmp_236 - tmp_157*tmp_239) + tmp_170*(-tmp_165*tmp_236 - tmp_166*tmp_239) + tmp_179*(-tmp_174*tmp_236 - tmp_175*tmp_239) + tmp_188*(-tmp_183*tmp_236 - tmp_184*tmp_239) + tmp_197*(-tmp_192*tmp_236 - tmp_193*tmp_239) + tmp_206*(-tmp_201*tmp_236 - tmp_202*tmp_239) + tmp_215*(-tmp_210*tmp_236 - tmp_211*tmp_239) + tmp_224*(-tmp_219*tmp_236 - tmp_220*tmp_239) + tmp_233*(-tmp_228*tmp_236 - tmp_229*tmp_239) + tmp_53*(-tmp_236*tmp_32 - tmp_239*tmp_36) + tmp_62*(-tmp_236*tmp_57 - tmp_239*tmp_58) + tmp_71*(-tmp_236*tmp_66 - tmp_239*tmp_67) + tmp_80*(-tmp_236*tmp_75 - tmp_239*tmp_76) + tmp_89*(-tmp_236*tmp_84 - tmp_239*tmp_85) + tmp_98*(-tmp_236*tmp_93 - tmp_239*tmp_94);
      real_t a_1_3 = tmp_107*(-tmp_102*tmp_237 - tmp_104*tmp_239) + tmp_116*(-tmp_111*tmp_237 - tmp_113*tmp_239) + tmp_125*(-tmp_120*tmp_237 - tmp_122*tmp_239) + tmp_134*(-tmp_129*tmp_237 - tmp_131*tmp_239) + tmp_143*(-tmp_138*tmp_237 - tmp_140*tmp_239) + tmp_152*(-tmp_147*tmp_237 - tmp_149*tmp_239) + tmp_161*(-tmp_156*tmp_237 - tmp_158*tmp_239) + tmp_170*(-tmp_165*tmp_237 - tmp_167*tmp_239) + tmp_179*(-tmp_174*tmp_237 - tmp_176*tmp_239) + tmp_188*(-tmp_183*tmp_237 - tmp_185*tmp_239) + tmp_197*(-tmp_192*tmp_237 - tmp_194*tmp_239) + tmp_206*(-tmp_201*tmp_237 - tmp_203*tmp_239) + tmp_215*(-tmp_210*tmp_237 - tmp_212*tmp_239) + tmp_224*(-tmp_219*tmp_237 - tmp_221*tmp_239) + tmp_233*(-tmp_228*tmp_237 - tmp_230*tmp_239) + tmp_53*(-tmp_237*tmp_32 - tmp_239*tmp_40) + tmp_62*(-tmp_237*tmp_57 - tmp_239*tmp_59) + tmp_71*(-tmp_237*tmp_66 - tmp_239*tmp_68) + tmp_80*(-tmp_237*tmp_75 - tmp_239*tmp_77) + tmp_89*(-tmp_237*tmp_84 - tmp_239*tmp_86) + tmp_98*(-tmp_237*tmp_93 - tmp_239*tmp_95);
      real_t a_2_0 = tmp_107*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_116*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_125*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_134*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_143*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_152*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_161*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_170*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_179*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_188*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_197*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_206*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_215*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_224*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_233*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_53*(-tmp_238*tmp_36 - tmp_240*tmp_41) + tmp_62*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_71*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_80*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_89*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_98*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_1 = tmp_107*(-tmp_102*tmp_240 - tmp_103*tmp_235) + tmp_116*(-tmp_111*tmp_240 - tmp_112*tmp_235) + tmp_125*(-tmp_120*tmp_240 - tmp_121*tmp_235) + tmp_134*(-tmp_129*tmp_240 - tmp_130*tmp_235) + tmp_143*(-tmp_138*tmp_240 - tmp_139*tmp_235) + tmp_152*(-tmp_147*tmp_240 - tmp_148*tmp_235) + tmp_161*(-tmp_156*tmp_240 - tmp_157*tmp_235) + tmp_170*(-tmp_165*tmp_240 - tmp_166*tmp_235) + tmp_179*(-tmp_174*tmp_240 - tmp_175*tmp_235) + tmp_188*(-tmp_183*tmp_240 - tmp_184*tmp_235) + tmp_197*(-tmp_192*tmp_240 - tmp_193*tmp_235) + tmp_206*(-tmp_201*tmp_240 - tmp_202*tmp_235) + tmp_215*(-tmp_210*tmp_240 - tmp_211*tmp_235) + tmp_224*(-tmp_219*tmp_240 - tmp_220*tmp_235) + tmp_233*(-tmp_228*tmp_240 - tmp_229*tmp_235) + tmp_53*(-tmp_235*tmp_36 - tmp_240*tmp_32) + tmp_62*(-tmp_235*tmp_58 - tmp_240*tmp_57) + tmp_71*(-tmp_235*tmp_67 - tmp_240*tmp_66) + tmp_80*(-tmp_235*tmp_76 - tmp_240*tmp_75) + tmp_89*(-tmp_235*tmp_85 - tmp_240*tmp_84) + tmp_98*(-tmp_235*tmp_94 - tmp_240*tmp_93);
      real_t a_2_2 = tmp_107*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_116*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_125*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_134*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_143*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_152*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_161*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_170*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_179*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_188*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_197*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_206*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_215*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_224*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_233*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_53*(-tmp_236*tmp_36 - tmp_240*tmp_36) + tmp_62*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_71*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_80*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_89*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_98*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_2_3 = tmp_107*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_116*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_125*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_134*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_143*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_152*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_161*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_170*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_179*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_188*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_197*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_206*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_215*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_224*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_233*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_53*(-tmp_237*tmp_36 - tmp_240*tmp_40) + tmp_62*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_71*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_80*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_89*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_98*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_3_0 = tmp_107*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_116*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_125*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_134*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_143*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_152*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_161*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_170*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_179*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_188*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_197*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_206*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_215*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_224*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_233*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_53*(-tmp_238*tmp_40 - tmp_241*tmp_41) + tmp_62*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_71*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_80*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_89*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_98*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_1 = tmp_107*(-tmp_102*tmp_241 - tmp_104*tmp_235) + tmp_116*(-tmp_111*tmp_241 - tmp_113*tmp_235) + tmp_125*(-tmp_120*tmp_241 - tmp_122*tmp_235) + tmp_134*(-tmp_129*tmp_241 - tmp_131*tmp_235) + tmp_143*(-tmp_138*tmp_241 - tmp_140*tmp_235) + tmp_152*(-tmp_147*tmp_241 - tmp_149*tmp_235) + tmp_161*(-tmp_156*tmp_241 - tmp_158*tmp_235) + tmp_170*(-tmp_165*tmp_241 - tmp_167*tmp_235) + tmp_179*(-tmp_174*tmp_241 - tmp_176*tmp_235) + tmp_188*(-tmp_183*tmp_241 - tmp_185*tmp_235) + tmp_197*(-tmp_192*tmp_241 - tmp_194*tmp_235) + tmp_206*(-tmp_201*tmp_241 - tmp_203*tmp_235) + tmp_215*(-tmp_210*tmp_241 - tmp_212*tmp_235) + tmp_224*(-tmp_219*tmp_241 - tmp_221*tmp_235) + tmp_233*(-tmp_228*tmp_241 - tmp_230*tmp_235) + tmp_53*(-tmp_235*tmp_40 - tmp_241*tmp_32) + tmp_62*(-tmp_235*tmp_59 - tmp_241*tmp_57) + tmp_71*(-tmp_235*tmp_68 - tmp_241*tmp_66) + tmp_80*(-tmp_235*tmp_77 - tmp_241*tmp_75) + tmp_89*(-tmp_235*tmp_86 - tmp_241*tmp_84) + tmp_98*(-tmp_235*tmp_95 - tmp_241*tmp_93);
      real_t a_3_2 = tmp_107*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_116*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_125*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_134*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_143*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_152*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_161*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_170*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_179*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_188*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_197*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_206*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_215*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_224*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_233*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_53*(-tmp_236*tmp_40 - tmp_241*tmp_36) + tmp_62*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_71*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_80*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_89*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_98*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_3_3 = tmp_107*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_116*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_125*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_134*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_143*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_152*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_161*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_170*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_179*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_188*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_197*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_206*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_215*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_224*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_233*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_53*(-tmp_237*tmp_40 - tmp_241*tmp_40) + tmp_62*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_71*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_80*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_89*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_98*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_1 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_2 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_3 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_6 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_9 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_10 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_6;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_2*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_10*tmp_12 + tmp_11*tmp_2 - tmp_13*tmp_5 - tmp_14*tmp_3 + tmp_5*tmp_7);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_5 + tmp_10*tmp_2;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = -tmp_1*tmp_10 + tmp_3*tmp_5;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_12 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_14 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_5*tmp_9;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_13 + tmp_7;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_6;
      real_t tmp_43 = tmp_11 - tmp_3*tmp_8;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_47 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_50 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_51 = -tmp_48 + tmp_49*tmp_50;
      real_t tmp_52 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_53 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_54 = tmp_46*tmp_53;
      real_t tmp_55 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_56 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_57 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_58 = tmp_49*tmp_53;
      real_t tmp_59 = tmp_50*tmp_57;
      real_t tmp_60 = 1.0 / (tmp_47*tmp_56*tmp_57 - tmp_48*tmp_55 + tmp_49*tmp_50*tmp_55 + tmp_52*tmp_54 - tmp_52*tmp_59 - tmp_56*tmp_58);
      real_t tmp_61 = 0.5*tmp_60;
      real_t tmp_62 = tmp_51*tmp_61;
      real_t tmp_63 = tmp_54 - tmp_59;
      real_t tmp_64 = tmp_61*tmp_63;
      real_t tmp_65 = tmp_47*tmp_57 - tmp_58;
      real_t tmp_66 = tmp_61*tmp_65;
      real_t tmp_67 = p_affine_13_0*(-tmp_62 - tmp_64 - tmp_66);
      real_t tmp_68 = tmp_49*tmp_55 - tmp_52*tmp_57;
      real_t tmp_69 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_70 = tmp_60*(tmp_20 + tmp_69);
      real_t tmp_71 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_72 = tmp_60*(tmp_27 + tmp_71);
      real_t tmp_73 = -tmp_47*tmp_55 + tmp_52*tmp_53;
      real_t tmp_74 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_75 = tmp_60*(tmp_34 + tmp_74);
      real_t tmp_76 = tmp_65*tmp_72 + tmp_68*tmp_70 + tmp_73*tmp_75;
      real_t tmp_77 = -tmp_46*tmp_55 + tmp_56*tmp_57;
      real_t tmp_78 = tmp_50*tmp_55 - tmp_53*tmp_56;
      real_t tmp_79 = tmp_63*tmp_72 + tmp_70*tmp_77 + tmp_75*tmp_78;
      real_t tmp_80 = tmp_46*tmp_52 - tmp_49*tmp_56;
      real_t tmp_81 = tmp_47*tmp_56 - tmp_50*tmp_52;
      real_t tmp_82 = tmp_51*tmp_72 + tmp_70*tmp_80 + tmp_75*tmp_81;
      real_t tmp_83 = p_affine_13_1*(-tmp_76 - tmp_79 - tmp_82 + 1);
      real_t tmp_84 = 0.5*tmp_15;
      real_t tmp_85 = tmp_43*tmp_84;
      real_t tmp_86 = tmp_39*tmp_84;
      real_t tmp_87 = tmp_29*tmp_84;
      real_t tmp_88 = -1.0*tmp_85 - 1.0*tmp_86 - 1.0*tmp_87;
      real_t tmp_89 = 1.0*std::pow((std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)), 1.0/2.0);
      real_t tmp_90 = 0.0068572537431980923*tmp_89;
      real_t tmp_91 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_92 = tmp_15*(tmp_16 + tmp_91);
      real_t tmp_93 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_94 = tmp_15*(tmp_23 + tmp_93);
      real_t tmp_95 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_96 = tmp_15*(tmp_30 + tmp_95);
      real_t tmp_97 = tmp_22*tmp_94 + tmp_29*tmp_96 + tmp_4*tmp_92;
      real_t tmp_98 = tmp_37*tmp_92 + tmp_38*tmp_94 + tmp_39*tmp_96;
      real_t tmp_99 = tmp_41*tmp_92 + tmp_42*tmp_94 + tmp_43*tmp_96;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = tmp_60*(tmp_69 + tmp_91);
      real_t tmp_102 = tmp_60*(tmp_71 + tmp_93);
      real_t tmp_103 = tmp_60*(tmp_74 + tmp_95);
      real_t tmp_104 = tmp_101*tmp_68 + tmp_102*tmp_65 + tmp_103*tmp_73;
      real_t tmp_105 = tmp_101*tmp_77 + tmp_102*tmp_63 + tmp_103*tmp_78;
      real_t tmp_106 = tmp_101*tmp_80 + tmp_102*tmp_51 + tmp_103*tmp_81;
      real_t tmp_107 = -tmp_104 - tmp_105 - tmp_106 + 1;
      real_t tmp_108 = p_affine_13_1*tmp_88;
      real_t tmp_109 = 0.037198804536718075*tmp_89;
      real_t tmp_110 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_111 = tmp_15*(tmp_110 + tmp_16);
      real_t tmp_112 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_23);
      real_t tmp_114 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_115 = tmp_15*(tmp_114 + tmp_30);
      real_t tmp_116 = tmp_111*tmp_4 + tmp_113*tmp_22 + tmp_115*tmp_29;
      real_t tmp_117 = tmp_111*tmp_37 + tmp_113*tmp_38 + tmp_115*tmp_39;
      real_t tmp_118 = tmp_111*tmp_41 + tmp_113*tmp_42 + tmp_115*tmp_43;
      real_t tmp_119 = -tmp_116 - tmp_117 - tmp_118 + 1;
      real_t tmp_120 = tmp_60*(tmp_110 + tmp_69);
      real_t tmp_121 = tmp_60*(tmp_112 + tmp_71);
      real_t tmp_122 = tmp_60*(tmp_114 + tmp_74);
      real_t tmp_123 = tmp_120*tmp_68 + tmp_121*tmp_65 + tmp_122*tmp_73;
      real_t tmp_124 = tmp_120*tmp_77 + tmp_121*tmp_63 + tmp_122*tmp_78;
      real_t tmp_125 = tmp_120*tmp_80 + tmp_121*tmp_51 + tmp_122*tmp_81;
      real_t tmp_126 = -tmp_123 - tmp_124 - tmp_125 + 1;
      real_t tmp_127 = 0.020848748529055869*tmp_89;
      real_t tmp_128 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_16);
      real_t tmp_130 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_23);
      real_t tmp_132 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_133 = tmp_15*(tmp_132 + tmp_30);
      real_t tmp_134 = tmp_129*tmp_4 + tmp_131*tmp_22 + tmp_133*tmp_29;
      real_t tmp_135 = tmp_129*tmp_37 + tmp_131*tmp_38 + tmp_133*tmp_39;
      real_t tmp_136 = tmp_129*tmp_41 + tmp_131*tmp_42 + tmp_133*tmp_43;
      real_t tmp_137 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_138 = tmp_60*(tmp_128 + tmp_69);
      real_t tmp_139 = tmp_60*(tmp_130 + tmp_71);
      real_t tmp_140 = tmp_60*(tmp_132 + tmp_74);
      real_t tmp_141 = tmp_138*tmp_68 + tmp_139*tmp_65 + tmp_140*tmp_73;
      real_t tmp_142 = tmp_138*tmp_77 + tmp_139*tmp_63 + tmp_140*tmp_78;
      real_t tmp_143 = tmp_138*tmp_80 + tmp_139*tmp_51 + tmp_140*tmp_81;
      real_t tmp_144 = -tmp_141 - tmp_142 - tmp_143 + 1;
      real_t tmp_145 = 0.019202922745021479*tmp_89;
      real_t tmp_146 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_147 = tmp_15*(tmp_146 + tmp_16);
      real_t tmp_148 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_149 = tmp_15*(tmp_148 + tmp_23);
      real_t tmp_150 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_151 = tmp_15*(tmp_150 + tmp_30);
      real_t tmp_152 = tmp_147*tmp_4 + tmp_149*tmp_22 + tmp_151*tmp_29;
      real_t tmp_153 = tmp_147*tmp_37 + tmp_149*tmp_38 + tmp_151*tmp_39;
      real_t tmp_154 = tmp_147*tmp_41 + tmp_149*tmp_42 + tmp_151*tmp_43;
      real_t tmp_155 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_156 = tmp_60*(tmp_146 + tmp_69);
      real_t tmp_157 = tmp_60*(tmp_148 + tmp_71);
      real_t tmp_158 = tmp_60*(tmp_150 + tmp_74);
      real_t tmp_159 = tmp_156*tmp_68 + tmp_157*tmp_65 + tmp_158*tmp_73;
      real_t tmp_160 = tmp_156*tmp_77 + tmp_157*tmp_63 + tmp_158*tmp_78;
      real_t tmp_161 = tmp_156*tmp_80 + tmp_157*tmp_51 + tmp_158*tmp_81;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_89;
      real_t tmp_164 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_165 = tmp_15*(tmp_16 + tmp_164);
      real_t tmp_166 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_23);
      real_t tmp_168 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_169 = tmp_15*(tmp_168 + tmp_30);
      real_t tmp_170 = tmp_165*tmp_4 + tmp_167*tmp_22 + tmp_169*tmp_29;
      real_t tmp_171 = tmp_165*tmp_37 + tmp_167*tmp_38 + tmp_169*tmp_39;
      real_t tmp_172 = tmp_165*tmp_41 + tmp_167*tmp_42 + tmp_169*tmp_43;
      real_t tmp_173 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_174 = tmp_60*(tmp_164 + tmp_69);
      real_t tmp_175 = tmp_60*(tmp_166 + tmp_71);
      real_t tmp_176 = tmp_60*(tmp_168 + tmp_74);
      real_t tmp_177 = tmp_174*tmp_68 + tmp_175*tmp_65 + tmp_176*tmp_73;
      real_t tmp_178 = tmp_174*tmp_77 + tmp_175*tmp_63 + tmp_176*tmp_78;
      real_t tmp_179 = tmp_174*tmp_80 + tmp_175*tmp_51 + tmp_176*tmp_81;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = 0.019202922745021479*tmp_89;
      real_t tmp_182 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_183 = tmp_15*(tmp_16 + tmp_182);
      real_t tmp_184 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_185 = tmp_15*(tmp_184 + tmp_23);
      real_t tmp_186 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_187 = tmp_15*(tmp_186 + tmp_30);
      real_t tmp_188 = tmp_183*tmp_4 + tmp_185*tmp_22 + tmp_187*tmp_29;
      real_t tmp_189 = tmp_183*tmp_37 + tmp_185*tmp_38 + tmp_187*tmp_39;
      real_t tmp_190 = tmp_183*tmp_41 + tmp_185*tmp_42 + tmp_187*tmp_43;
      real_t tmp_191 = -tmp_188 - tmp_189 - tmp_190 + 1;
      real_t tmp_192 = tmp_60*(tmp_182 + tmp_69);
      real_t tmp_193 = tmp_60*(tmp_184 + tmp_71);
      real_t tmp_194 = tmp_60*(tmp_186 + tmp_74);
      real_t tmp_195 = tmp_192*tmp_68 + tmp_193*tmp_65 + tmp_194*tmp_73;
      real_t tmp_196 = tmp_192*tmp_77 + tmp_193*tmp_63 + tmp_194*tmp_78;
      real_t tmp_197 = tmp_192*tmp_80 + tmp_193*tmp_51 + tmp_194*tmp_81;
      real_t tmp_198 = -tmp_195 - tmp_196 - tmp_197 + 1;
      real_t tmp_199 = 0.020848748529055869*tmp_89;
      real_t tmp_200 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_201 = tmp_15*(tmp_16 + tmp_200);
      real_t tmp_202 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_203 = tmp_15*(tmp_202 + tmp_23);
      real_t tmp_204 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_205 = tmp_15*(tmp_204 + tmp_30);
      real_t tmp_206 = tmp_201*tmp_4 + tmp_203*tmp_22 + tmp_205*tmp_29;
      real_t tmp_207 = tmp_201*tmp_37 + tmp_203*tmp_38 + tmp_205*tmp_39;
      real_t tmp_208 = tmp_201*tmp_41 + tmp_203*tmp_42 + tmp_205*tmp_43;
      real_t tmp_209 = -tmp_206 - tmp_207 - tmp_208 + 1;
      real_t tmp_210 = tmp_60*(tmp_200 + tmp_69);
      real_t tmp_211 = tmp_60*(tmp_202 + tmp_71);
      real_t tmp_212 = tmp_60*(tmp_204 + tmp_74);
      real_t tmp_213 = tmp_210*tmp_68 + tmp_211*tmp_65 + tmp_212*tmp_73;
      real_t tmp_214 = tmp_210*tmp_77 + tmp_211*tmp_63 + tmp_212*tmp_78;
      real_t tmp_215 = tmp_210*tmp_80 + tmp_211*tmp_51 + tmp_212*tmp_81;
      real_t tmp_216 = -tmp_213 - tmp_214 - tmp_215 + 1;
      real_t tmp_217 = 0.019202922745021479*tmp_89;
      real_t tmp_218 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_219 = tmp_15*(tmp_16 + tmp_218);
      real_t tmp_220 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_221 = tmp_15*(tmp_220 + tmp_23);
      real_t tmp_222 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_223 = tmp_15*(tmp_222 + tmp_30);
      real_t tmp_224 = tmp_219*tmp_4 + tmp_22*tmp_221 + tmp_223*tmp_29;
      real_t tmp_225 = tmp_219*tmp_37 + tmp_221*tmp_38 + tmp_223*tmp_39;
      real_t tmp_226 = tmp_219*tmp_41 + tmp_221*tmp_42 + tmp_223*tmp_43;
      real_t tmp_227 = -tmp_224 - tmp_225 - tmp_226 + 1;
      real_t tmp_228 = tmp_60*(tmp_218 + tmp_69);
      real_t tmp_229 = tmp_60*(tmp_220 + tmp_71);
      real_t tmp_230 = tmp_60*(tmp_222 + tmp_74);
      real_t tmp_231 = tmp_228*tmp_68 + tmp_229*tmp_65 + tmp_230*tmp_73;
      real_t tmp_232 = tmp_228*tmp_77 + tmp_229*tmp_63 + tmp_230*tmp_78;
      real_t tmp_233 = tmp_228*tmp_80 + tmp_229*tmp_51 + tmp_230*tmp_81;
      real_t tmp_234 = -tmp_231 - tmp_232 - tmp_233 + 1;
      real_t tmp_235 = 0.020848748529055869*tmp_89;
      real_t tmp_236 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_237 = tmp_15*(tmp_16 + tmp_236);
      real_t tmp_238 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_239 = tmp_15*(tmp_23 + tmp_238);
      real_t tmp_240 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_241 = tmp_15*(tmp_240 + tmp_30);
      real_t tmp_242 = tmp_22*tmp_239 + tmp_237*tmp_4 + tmp_241*tmp_29;
      real_t tmp_243 = tmp_237*tmp_37 + tmp_239*tmp_38 + tmp_241*tmp_39;
      real_t tmp_244 = tmp_237*tmp_41 + tmp_239*tmp_42 + tmp_241*tmp_43;
      real_t tmp_245 = -tmp_242 - tmp_243 - tmp_244 + 1;
      real_t tmp_246 = tmp_60*(tmp_236 + tmp_69);
      real_t tmp_247 = tmp_60*(tmp_238 + tmp_71);
      real_t tmp_248 = tmp_60*(tmp_240 + tmp_74);
      real_t tmp_249 = tmp_246*tmp_68 + tmp_247*tmp_65 + tmp_248*tmp_73;
      real_t tmp_250 = tmp_246*tmp_77 + tmp_247*tmp_63 + tmp_248*tmp_78;
      real_t tmp_251 = tmp_246*tmp_80 + tmp_247*tmp_51 + tmp_248*tmp_81;
      real_t tmp_252 = -tmp_249 - tmp_250 - tmp_251 + 1;
      real_t tmp_253 = 0.019202922745021479*tmp_89;
      real_t tmp_254 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_255 = tmp_15*(tmp_16 + tmp_254);
      real_t tmp_256 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_257 = tmp_15*(tmp_23 + tmp_256);
      real_t tmp_258 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_259 = tmp_15*(tmp_258 + tmp_30);
      real_t tmp_260 = tmp_22*tmp_257 + tmp_255*tmp_4 + tmp_259*tmp_29;
      real_t tmp_261 = tmp_255*tmp_37 + tmp_257*tmp_38 + tmp_259*tmp_39;
      real_t tmp_262 = tmp_255*tmp_41 + tmp_257*tmp_42 + tmp_259*tmp_43;
      real_t tmp_263 = -tmp_260 - tmp_261 - tmp_262 + 1;
      real_t tmp_264 = tmp_60*(tmp_254 + tmp_69);
      real_t tmp_265 = tmp_60*(tmp_256 + tmp_71);
      real_t tmp_266 = tmp_60*(tmp_258 + tmp_74);
      real_t tmp_267 = tmp_264*tmp_68 + tmp_265*tmp_65 + tmp_266*tmp_73;
      real_t tmp_268 = tmp_264*tmp_77 + tmp_265*tmp_63 + tmp_266*tmp_78;
      real_t tmp_269 = tmp_264*tmp_80 + tmp_265*tmp_51 + tmp_266*tmp_81;
      real_t tmp_270 = -tmp_267 - tmp_268 - tmp_269 + 1;
      real_t tmp_271 = 0.020848748529055869*tmp_89;
      real_t tmp_272 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_273 = tmp_15*(tmp_16 + tmp_272);
      real_t tmp_274 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_275 = tmp_15*(tmp_23 + tmp_274);
      real_t tmp_276 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_277 = tmp_15*(tmp_276 + tmp_30);
      real_t tmp_278 = tmp_22*tmp_275 + tmp_273*tmp_4 + tmp_277*tmp_29;
      real_t tmp_279 = tmp_273*tmp_37 + tmp_275*tmp_38 + tmp_277*tmp_39;
      real_t tmp_280 = tmp_273*tmp_41 + tmp_275*tmp_42 + tmp_277*tmp_43;
      real_t tmp_281 = -tmp_278 - tmp_279 - tmp_280 + 1;
      real_t tmp_282 = tmp_60*(tmp_272 + tmp_69);
      real_t tmp_283 = tmp_60*(tmp_274 + tmp_71);
      real_t tmp_284 = tmp_60*(tmp_276 + tmp_74);
      real_t tmp_285 = tmp_282*tmp_68 + tmp_283*tmp_65 + tmp_284*tmp_73;
      real_t tmp_286 = tmp_282*tmp_77 + tmp_283*tmp_63 + tmp_284*tmp_78;
      real_t tmp_287 = tmp_282*tmp_80 + tmp_283*tmp_51 + tmp_284*tmp_81;
      real_t tmp_288 = -tmp_285 - tmp_286 - tmp_287 + 1;
      real_t tmp_289 = 0.019202922745021479*tmp_89;
      real_t tmp_290 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_291 = tmp_15*(tmp_16 + tmp_290);
      real_t tmp_292 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_293 = tmp_15*(tmp_23 + tmp_292);
      real_t tmp_294 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_295 = tmp_15*(tmp_294 + tmp_30);
      real_t tmp_296 = tmp_22*tmp_293 + tmp_29*tmp_295 + tmp_291*tmp_4;
      real_t tmp_297 = tmp_291*tmp_37 + tmp_293*tmp_38 + tmp_295*tmp_39;
      real_t tmp_298 = tmp_291*tmp_41 + tmp_293*tmp_42 + tmp_295*tmp_43;
      real_t tmp_299 = -tmp_296 - tmp_297 - tmp_298 + 1;
      real_t tmp_300 = tmp_60*(tmp_290 + tmp_69);
      real_t tmp_301 = tmp_60*(tmp_292 + tmp_71);
      real_t tmp_302 = tmp_60*(tmp_294 + tmp_74);
      real_t tmp_303 = tmp_300*tmp_68 + tmp_301*tmp_65 + tmp_302*tmp_73;
      real_t tmp_304 = tmp_300*tmp_77 + tmp_301*tmp_63 + tmp_302*tmp_78;
      real_t tmp_305 = tmp_300*tmp_80 + tmp_301*tmp_51 + tmp_302*tmp_81;
      real_t tmp_306 = -tmp_303 - tmp_304 - tmp_305 + 1;
      real_t tmp_307 = 0.042507265838595799*tmp_89;
      real_t tmp_308 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_309 = tmp_15*(tmp_16 + tmp_308);
      real_t tmp_310 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_311 = tmp_15*(tmp_23 + tmp_310);
      real_t tmp_312 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_313 = tmp_15*(tmp_30 + tmp_312);
      real_t tmp_314 = tmp_22*tmp_311 + tmp_29*tmp_313 + tmp_309*tmp_4;
      real_t tmp_315 = tmp_309*tmp_37 + tmp_311*tmp_38 + tmp_313*tmp_39;
      real_t tmp_316 = tmp_309*tmp_41 + tmp_311*tmp_42 + tmp_313*tmp_43;
      real_t tmp_317 = -tmp_314 - tmp_315 - tmp_316 + 1;
      real_t tmp_318 = tmp_60*(tmp_308 + tmp_69);
      real_t tmp_319 = tmp_60*(tmp_310 + tmp_71);
      real_t tmp_320 = tmp_60*(tmp_312 + tmp_74);
      real_t tmp_321 = tmp_318*tmp_68 + tmp_319*tmp_65 + tmp_320*tmp_73;
      real_t tmp_322 = tmp_318*tmp_77 + tmp_319*tmp_63 + tmp_320*tmp_78;
      real_t tmp_323 = tmp_318*tmp_80 + tmp_319*tmp_51 + tmp_320*tmp_81;
      real_t tmp_324 = -tmp_321 - tmp_322 - tmp_323 + 1;
      real_t tmp_325 = 0.020848748529055869*tmp_89;
      real_t tmp_326 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_327 = tmp_15*(tmp_16 + tmp_326);
      real_t tmp_328 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_329 = tmp_15*(tmp_23 + tmp_328);
      real_t tmp_330 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_331 = tmp_15*(tmp_30 + tmp_330);
      real_t tmp_332 = tmp_22*tmp_329 + tmp_29*tmp_331 + tmp_327*tmp_4;
      real_t tmp_333 = tmp_327*tmp_37 + tmp_329*tmp_38 + tmp_331*tmp_39;
      real_t tmp_334 = tmp_327*tmp_41 + tmp_329*tmp_42 + tmp_331*tmp_43;
      real_t tmp_335 = -tmp_332 - tmp_333 - tmp_334 + 1;
      real_t tmp_336 = tmp_60*(tmp_326 + tmp_69);
      real_t tmp_337 = tmp_60*(tmp_328 + tmp_71);
      real_t tmp_338 = tmp_60*(tmp_330 + tmp_74);
      real_t tmp_339 = tmp_336*tmp_68 + tmp_337*tmp_65 + tmp_338*tmp_73;
      real_t tmp_340 = tmp_336*tmp_77 + tmp_337*tmp_63 + tmp_338*tmp_78;
      real_t tmp_341 = tmp_336*tmp_80 + tmp_337*tmp_51 + tmp_338*tmp_81;
      real_t tmp_342 = -tmp_339 - tmp_340 - tmp_341 + 1;
      real_t tmp_343 = 0.0068572537431980923*tmp_89;
      real_t tmp_344 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_345 = tmp_15*(tmp_16 + tmp_344);
      real_t tmp_346 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_347 = tmp_15*(tmp_23 + tmp_346);
      real_t tmp_348 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_349 = tmp_15*(tmp_30 + tmp_348);
      real_t tmp_350 = tmp_22*tmp_347 + tmp_29*tmp_349 + tmp_345*tmp_4;
      real_t tmp_351 = tmp_345*tmp_37 + tmp_347*tmp_38 + tmp_349*tmp_39;
      real_t tmp_352 = tmp_345*tmp_41 + tmp_347*tmp_42 + tmp_349*tmp_43;
      real_t tmp_353 = -tmp_350 - tmp_351 - tmp_352 + 1;
      real_t tmp_354 = tmp_60*(tmp_344 + tmp_69);
      real_t tmp_355 = tmp_60*(tmp_346 + tmp_71);
      real_t tmp_356 = tmp_60*(tmp_348 + tmp_74);
      real_t tmp_357 = tmp_354*tmp_68 + tmp_355*tmp_65 + tmp_356*tmp_73;
      real_t tmp_358 = tmp_354*tmp_77 + tmp_355*tmp_63 + tmp_356*tmp_78;
      real_t tmp_359 = tmp_354*tmp_80 + tmp_355*tmp_51 + tmp_356*tmp_81;
      real_t tmp_360 = -tmp_357 - tmp_358 - tmp_359 + 1;
      real_t tmp_361 = 0.037198804536718075*tmp_89;
      real_t tmp_362 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_363 = tmp_15*(tmp_16 + tmp_362);
      real_t tmp_364 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_365 = tmp_15*(tmp_23 + tmp_364);
      real_t tmp_366 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_367 = tmp_15*(tmp_30 + tmp_366);
      real_t tmp_368 = tmp_22*tmp_365 + tmp_29*tmp_367 + tmp_363*tmp_4;
      real_t tmp_369 = tmp_363*tmp_37 + tmp_365*tmp_38 + tmp_367*tmp_39;
      real_t tmp_370 = tmp_363*tmp_41 + tmp_365*tmp_42 + tmp_367*tmp_43;
      real_t tmp_371 = -tmp_368 - tmp_369 - tmp_370 + 1;
      real_t tmp_372 = tmp_60*(tmp_362 + tmp_69);
      real_t tmp_373 = tmp_60*(tmp_364 + tmp_71);
      real_t tmp_374 = tmp_60*(tmp_366 + tmp_74);
      real_t tmp_375 = tmp_372*tmp_68 + tmp_373*tmp_65 + tmp_374*tmp_73;
      real_t tmp_376 = tmp_372*tmp_77 + tmp_373*tmp_63 + tmp_374*tmp_78;
      real_t tmp_377 = tmp_372*tmp_80 + tmp_373*tmp_51 + tmp_374*tmp_81;
      real_t tmp_378 = -tmp_375 - tmp_376 - tmp_377 + 1;
      real_t tmp_379 = 0.042507265838595799*tmp_89;
      real_t tmp_380 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_381 = tmp_15*(tmp_16 + tmp_380);
      real_t tmp_382 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_383 = tmp_15*(tmp_23 + tmp_382);
      real_t tmp_384 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_385 = tmp_15*(tmp_30 + tmp_384);
      real_t tmp_386 = tmp_22*tmp_383 + tmp_29*tmp_385 + tmp_381*tmp_4;
      real_t tmp_387 = tmp_37*tmp_381 + tmp_38*tmp_383 + tmp_385*tmp_39;
      real_t tmp_388 = tmp_381*tmp_41 + tmp_383*tmp_42 + tmp_385*tmp_43;
      real_t tmp_389 = -tmp_386 - tmp_387 - tmp_388 + 1;
      real_t tmp_390 = tmp_60*(tmp_380 + tmp_69);
      real_t tmp_391 = tmp_60*(tmp_382 + tmp_71);
      real_t tmp_392 = tmp_60*(tmp_384 + tmp_74);
      real_t tmp_393 = tmp_390*tmp_68 + tmp_391*tmp_65 + tmp_392*tmp_73;
      real_t tmp_394 = tmp_390*tmp_77 + tmp_391*tmp_63 + tmp_392*tmp_78;
      real_t tmp_395 = tmp_390*tmp_80 + tmp_391*tmp_51 + tmp_392*tmp_81;
      real_t tmp_396 = -tmp_393 - tmp_394 - tmp_395 + 1;
      real_t tmp_397 = 0.0068572537431980923*tmp_89;
      real_t tmp_398 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_399 = tmp_15*(tmp_16 + tmp_398);
      real_t tmp_400 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_401 = tmp_15*(tmp_23 + tmp_400);
      real_t tmp_402 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_403 = tmp_15*(tmp_30 + tmp_402);
      real_t tmp_404 = tmp_22*tmp_401 + tmp_29*tmp_403 + tmp_399*tmp_4;
      real_t tmp_405 = tmp_37*tmp_399 + tmp_38*tmp_401 + tmp_39*tmp_403;
      real_t tmp_406 = tmp_399*tmp_41 + tmp_401*tmp_42 + tmp_403*tmp_43;
      real_t tmp_407 = -tmp_404 - tmp_405 - tmp_406 + 1;
      real_t tmp_408 = tmp_60*(tmp_398 + tmp_69);
      real_t tmp_409 = tmp_60*(tmp_400 + tmp_71);
      real_t tmp_410 = tmp_60*(tmp_402 + tmp_74);
      real_t tmp_411 = tmp_408*tmp_68 + tmp_409*tmp_65 + tmp_410*tmp_73;
      real_t tmp_412 = tmp_408*tmp_77 + tmp_409*tmp_63 + tmp_410*tmp_78;
      real_t tmp_413 = tmp_408*tmp_80 + tmp_409*tmp_51 + tmp_410*tmp_81;
      real_t tmp_414 = -tmp_411 - tmp_412 - tmp_413 + 1;
      real_t tmp_415 = 0.037198804536718075*tmp_89;
      real_t tmp_416 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_417 = tmp_15*(tmp_16 + tmp_416);
      real_t tmp_418 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_419 = tmp_15*(tmp_23 + tmp_418);
      real_t tmp_420 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_421 = tmp_15*(tmp_30 + tmp_420);
      real_t tmp_422 = tmp_22*tmp_419 + tmp_29*tmp_421 + tmp_4*tmp_417;
      real_t tmp_423 = tmp_37*tmp_417 + tmp_38*tmp_419 + tmp_39*tmp_421;
      real_t tmp_424 = tmp_41*tmp_417 + tmp_419*tmp_42 + tmp_421*tmp_43;
      real_t tmp_425 = -tmp_422 - tmp_423 - tmp_424 + 1;
      real_t tmp_426 = tmp_60*(tmp_416 + tmp_69);
      real_t tmp_427 = tmp_60*(tmp_418 + tmp_71);
      real_t tmp_428 = tmp_60*(tmp_420 + tmp_74);
      real_t tmp_429 = tmp_426*tmp_68 + tmp_427*tmp_65 + tmp_428*tmp_73;
      real_t tmp_430 = tmp_426*tmp_77 + tmp_427*tmp_63 + tmp_428*tmp_78;
      real_t tmp_431 = tmp_426*tmp_80 + tmp_427*tmp_51 + tmp_428*tmp_81;
      real_t tmp_432 = -tmp_429 - tmp_430 - tmp_431 + 1;
      real_t tmp_433 = 0.042507265838595799*tmp_89;
      real_t tmp_434 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_435 = tmp_15*(tmp_16 + tmp_434);
      real_t tmp_436 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_437 = tmp_15*(tmp_23 + tmp_436);
      real_t tmp_438 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_439 = tmp_15*(tmp_30 + tmp_438);
      real_t tmp_440 = tmp_22*tmp_437 + tmp_29*tmp_439 + tmp_4*tmp_435;
      real_t tmp_441 = tmp_37*tmp_435 + tmp_38*tmp_437 + tmp_39*tmp_439;
      real_t tmp_442 = tmp_41*tmp_435 + tmp_42*tmp_437 + tmp_43*tmp_439;
      real_t tmp_443 = -tmp_440 - tmp_441 - tmp_442 + 1;
      real_t tmp_444 = tmp_60*(tmp_434 + tmp_69);
      real_t tmp_445 = tmp_60*(tmp_436 + tmp_71);
      real_t tmp_446 = tmp_60*(tmp_438 + tmp_74);
      real_t tmp_447 = tmp_444*tmp_68 + tmp_445*tmp_65 + tmp_446*tmp_73;
      real_t tmp_448 = tmp_444*tmp_77 + tmp_445*tmp_63 + tmp_446*tmp_78;
      real_t tmp_449 = tmp_444*tmp_80 + tmp_445*tmp_51 + tmp_446*tmp_81;
      real_t tmp_450 = -tmp_447 - tmp_448 - tmp_449 + 1;
      real_t tmp_451 = 0.019202922745021479*tmp_89;
      real_t tmp_452 = p_affine_13_1*tmp_87;
      real_t tmp_453 = p_affine_13_1*tmp_86;
      real_t tmp_454 = p_affine_13_1*tmp_85;
      real_t tmp_455 = p_affine_13_0*tmp_66;
      real_t tmp_456 = p_affine_13_0*tmp_64;
      real_t tmp_457 = p_affine_13_0*tmp_62;
      real_t a_0_0 = tmp_109*(tmp_100*tmp_67 - tmp_107*tmp_108) + tmp_127*(-tmp_108*tmp_126 + tmp_119*tmp_67) + tmp_145*(-tmp_108*tmp_144 + tmp_137*tmp_67) + tmp_163*(-tmp_108*tmp_162 + tmp_155*tmp_67) + tmp_181*(-tmp_108*tmp_180 + tmp_173*tmp_67) + tmp_199*(-tmp_108*tmp_198 + tmp_191*tmp_67) + tmp_217*(-tmp_108*tmp_216 + tmp_209*tmp_67) + tmp_235*(-tmp_108*tmp_234 + tmp_227*tmp_67) + tmp_253*(-tmp_108*tmp_252 + tmp_245*tmp_67) + tmp_271*(-tmp_108*tmp_270 + tmp_263*tmp_67) + tmp_289*(-tmp_108*tmp_288 + tmp_281*tmp_67) + tmp_307*(-tmp_108*tmp_306 + tmp_299*tmp_67) + tmp_325*(-tmp_108*tmp_324 + tmp_317*tmp_67) + tmp_343*(-tmp_108*tmp_342 + tmp_335*tmp_67) + tmp_361*(-tmp_108*tmp_360 + tmp_353*tmp_67) + tmp_379*(-tmp_108*tmp_378 + tmp_371*tmp_67) + tmp_397*(-tmp_108*tmp_396 + tmp_389*tmp_67) + tmp_415*(-tmp_108*tmp_414 + tmp_407*tmp_67) + tmp_433*(-tmp_108*tmp_432 + tmp_425*tmp_67) + tmp_451*(-tmp_108*tmp_450 + tmp_443*tmp_67) + tmp_90*(tmp_45*tmp_67 - tmp_83*tmp_88);
      real_t a_0_1 = tmp_109*(-tmp_107*tmp_452 + tmp_67*tmp_97) + tmp_127*(tmp_116*tmp_67 - tmp_126*tmp_452) + tmp_145*(tmp_134*tmp_67 - tmp_144*tmp_452) + tmp_163*(tmp_152*tmp_67 - tmp_162*tmp_452) + tmp_181*(tmp_170*tmp_67 - tmp_180*tmp_452) + tmp_199*(tmp_188*tmp_67 - tmp_198*tmp_452) + tmp_217*(tmp_206*tmp_67 - tmp_216*tmp_452) + tmp_235*(tmp_224*tmp_67 - tmp_234*tmp_452) + tmp_253*(tmp_242*tmp_67 - tmp_252*tmp_452) + tmp_271*(tmp_260*tmp_67 - tmp_270*tmp_452) + tmp_289*(tmp_278*tmp_67 - tmp_288*tmp_452) + tmp_307*(tmp_296*tmp_67 - tmp_306*tmp_452) + tmp_325*(tmp_314*tmp_67 - tmp_324*tmp_452) + tmp_343*(tmp_332*tmp_67 - tmp_342*tmp_452) + tmp_361*(tmp_350*tmp_67 - tmp_360*tmp_452) + tmp_379*(tmp_368*tmp_67 - tmp_378*tmp_452) + tmp_397*(tmp_386*tmp_67 - tmp_396*tmp_452) + tmp_415*(tmp_404*tmp_67 - tmp_414*tmp_452) + tmp_433*(tmp_422*tmp_67 - tmp_432*tmp_452) + tmp_451*(tmp_440*tmp_67 - tmp_450*tmp_452) + tmp_90*(tmp_36*tmp_67 - tmp_83*tmp_87);
      real_t a_0_2 = tmp_109*(-tmp_107*tmp_453 + tmp_67*tmp_98) + tmp_127*(tmp_117*tmp_67 - tmp_126*tmp_453) + tmp_145*(tmp_135*tmp_67 - tmp_144*tmp_453) + tmp_163*(tmp_153*tmp_67 - tmp_162*tmp_453) + tmp_181*(tmp_171*tmp_67 - tmp_180*tmp_453) + tmp_199*(tmp_189*tmp_67 - tmp_198*tmp_453) + tmp_217*(tmp_207*tmp_67 - tmp_216*tmp_453) + tmp_235*(tmp_225*tmp_67 - tmp_234*tmp_453) + tmp_253*(tmp_243*tmp_67 - tmp_252*tmp_453) + tmp_271*(tmp_261*tmp_67 - tmp_270*tmp_453) + tmp_289*(tmp_279*tmp_67 - tmp_288*tmp_453) + tmp_307*(tmp_297*tmp_67 - tmp_306*tmp_453) + tmp_325*(tmp_315*tmp_67 - tmp_324*tmp_453) + tmp_343*(tmp_333*tmp_67 - tmp_342*tmp_453) + tmp_361*(tmp_351*tmp_67 - tmp_360*tmp_453) + tmp_379*(tmp_369*tmp_67 - tmp_378*tmp_453) + tmp_397*(tmp_387*tmp_67 - tmp_396*tmp_453) + tmp_415*(tmp_405*tmp_67 - tmp_414*tmp_453) + tmp_433*(tmp_423*tmp_67 - tmp_432*tmp_453) + tmp_451*(tmp_441*tmp_67 - tmp_450*tmp_453) + tmp_90*(tmp_40*tmp_67 - tmp_83*tmp_86);
      real_t a_0_3 = tmp_109*(-tmp_107*tmp_454 + tmp_67*tmp_99) + tmp_127*(tmp_118*tmp_67 - tmp_126*tmp_454) + tmp_145*(tmp_136*tmp_67 - tmp_144*tmp_454) + tmp_163*(tmp_154*tmp_67 - tmp_162*tmp_454) + tmp_181*(tmp_172*tmp_67 - tmp_180*tmp_454) + tmp_199*(tmp_190*tmp_67 - tmp_198*tmp_454) + tmp_217*(tmp_208*tmp_67 - tmp_216*tmp_454) + tmp_235*(tmp_226*tmp_67 - tmp_234*tmp_454) + tmp_253*(tmp_244*tmp_67 - tmp_252*tmp_454) + tmp_271*(tmp_262*tmp_67 - tmp_270*tmp_454) + tmp_289*(tmp_280*tmp_67 - tmp_288*tmp_454) + tmp_307*(tmp_298*tmp_67 - tmp_306*tmp_454) + tmp_325*(tmp_316*tmp_67 - tmp_324*tmp_454) + tmp_343*(tmp_334*tmp_67 - tmp_342*tmp_454) + tmp_361*(tmp_352*tmp_67 - tmp_360*tmp_454) + tmp_379*(tmp_370*tmp_67 - tmp_378*tmp_454) + tmp_397*(tmp_388*tmp_67 - tmp_396*tmp_454) + tmp_415*(tmp_406*tmp_67 - tmp_414*tmp_454) + tmp_433*(tmp_424*tmp_67 - tmp_432*tmp_454) + tmp_451*(tmp_442*tmp_67 - tmp_450*tmp_454) + tmp_90*(tmp_44*tmp_67 - tmp_83*tmp_85);
      real_t a_1_0 = tmp_109*(tmp_100*tmp_455 - tmp_104*tmp_108) + tmp_127*(-tmp_108*tmp_123 + tmp_119*tmp_455) + tmp_145*(-tmp_108*tmp_141 + tmp_137*tmp_455) + tmp_163*(-tmp_108*tmp_159 + tmp_155*tmp_455) + tmp_181*(-tmp_108*tmp_177 + tmp_173*tmp_455) + tmp_199*(-tmp_108*tmp_195 + tmp_191*tmp_455) + tmp_217*(-tmp_108*tmp_213 + tmp_209*tmp_455) + tmp_235*(-tmp_108*tmp_231 + tmp_227*tmp_455) + tmp_253*(-tmp_108*tmp_249 + tmp_245*tmp_455) + tmp_271*(-tmp_108*tmp_267 + tmp_263*tmp_455) + tmp_289*(-tmp_108*tmp_285 + tmp_281*tmp_455) + tmp_307*(-tmp_108*tmp_303 + tmp_299*tmp_455) + tmp_325*(-tmp_108*tmp_321 + tmp_317*tmp_455) + tmp_343*(-tmp_108*tmp_339 + tmp_335*tmp_455) + tmp_361*(-tmp_108*tmp_357 + tmp_353*tmp_455) + tmp_379*(-tmp_108*tmp_375 + tmp_371*tmp_455) + tmp_397*(-tmp_108*tmp_393 + tmp_389*tmp_455) + tmp_415*(-tmp_108*tmp_411 + tmp_407*tmp_455) + tmp_433*(-tmp_108*tmp_429 + tmp_425*tmp_455) + tmp_451*(-tmp_108*tmp_447 + tmp_443*tmp_455) + tmp_90*(-tmp_108*tmp_76 + tmp_45*tmp_455);
      real_t a_1_1 = tmp_109*(-tmp_104*tmp_452 + tmp_455*tmp_97) + tmp_127*(tmp_116*tmp_455 - tmp_123*tmp_452) + tmp_145*(tmp_134*tmp_455 - tmp_141*tmp_452) + tmp_163*(tmp_152*tmp_455 - tmp_159*tmp_452) + tmp_181*(tmp_170*tmp_455 - tmp_177*tmp_452) + tmp_199*(tmp_188*tmp_455 - tmp_195*tmp_452) + tmp_217*(tmp_206*tmp_455 - tmp_213*tmp_452) + tmp_235*(tmp_224*tmp_455 - tmp_231*tmp_452) + tmp_253*(tmp_242*tmp_455 - tmp_249*tmp_452) + tmp_271*(tmp_260*tmp_455 - tmp_267*tmp_452) + tmp_289*(tmp_278*tmp_455 - tmp_285*tmp_452) + tmp_307*(tmp_296*tmp_455 - tmp_303*tmp_452) + tmp_325*(tmp_314*tmp_455 - tmp_321*tmp_452) + tmp_343*(tmp_332*tmp_455 - tmp_339*tmp_452) + tmp_361*(tmp_350*tmp_455 - tmp_357*tmp_452) + tmp_379*(tmp_368*tmp_455 - tmp_375*tmp_452) + tmp_397*(tmp_386*tmp_455 - tmp_393*tmp_452) + tmp_415*(tmp_404*tmp_455 - tmp_411*tmp_452) + tmp_433*(tmp_422*tmp_455 - tmp_429*tmp_452) + tmp_451*(tmp_440*tmp_455 - tmp_447*tmp_452) + tmp_90*(tmp_36*tmp_455 - tmp_452*tmp_76);
      real_t a_1_2 = tmp_109*(-tmp_104*tmp_453 + tmp_455*tmp_98) + tmp_127*(tmp_117*tmp_455 - tmp_123*tmp_453) + tmp_145*(tmp_135*tmp_455 - tmp_141*tmp_453) + tmp_163*(tmp_153*tmp_455 - tmp_159*tmp_453) + tmp_181*(tmp_171*tmp_455 - tmp_177*tmp_453) + tmp_199*(tmp_189*tmp_455 - tmp_195*tmp_453) + tmp_217*(tmp_207*tmp_455 - tmp_213*tmp_453) + tmp_235*(tmp_225*tmp_455 - tmp_231*tmp_453) + tmp_253*(tmp_243*tmp_455 - tmp_249*tmp_453) + tmp_271*(tmp_261*tmp_455 - tmp_267*tmp_453) + tmp_289*(tmp_279*tmp_455 - tmp_285*tmp_453) + tmp_307*(tmp_297*tmp_455 - tmp_303*tmp_453) + tmp_325*(tmp_315*tmp_455 - tmp_321*tmp_453) + tmp_343*(tmp_333*tmp_455 - tmp_339*tmp_453) + tmp_361*(tmp_351*tmp_455 - tmp_357*tmp_453) + tmp_379*(tmp_369*tmp_455 - tmp_375*tmp_453) + tmp_397*(tmp_387*tmp_455 - tmp_393*tmp_453) + tmp_415*(tmp_405*tmp_455 - tmp_411*tmp_453) + tmp_433*(tmp_423*tmp_455 - tmp_429*tmp_453) + tmp_451*(tmp_441*tmp_455 - tmp_447*tmp_453) + tmp_90*(tmp_40*tmp_455 - tmp_453*tmp_76);
      real_t a_1_3 = tmp_109*(-tmp_104*tmp_454 + tmp_455*tmp_99) + tmp_127*(tmp_118*tmp_455 - tmp_123*tmp_454) + tmp_145*(tmp_136*tmp_455 - tmp_141*tmp_454) + tmp_163*(tmp_154*tmp_455 - tmp_159*tmp_454) + tmp_181*(tmp_172*tmp_455 - tmp_177*tmp_454) + tmp_199*(tmp_190*tmp_455 - tmp_195*tmp_454) + tmp_217*(tmp_208*tmp_455 - tmp_213*tmp_454) + tmp_235*(tmp_226*tmp_455 - tmp_231*tmp_454) + tmp_253*(tmp_244*tmp_455 - tmp_249*tmp_454) + tmp_271*(tmp_262*tmp_455 - tmp_267*tmp_454) + tmp_289*(tmp_280*tmp_455 - tmp_285*tmp_454) + tmp_307*(tmp_298*tmp_455 - tmp_303*tmp_454) + tmp_325*(tmp_316*tmp_455 - tmp_321*tmp_454) + tmp_343*(tmp_334*tmp_455 - tmp_339*tmp_454) + tmp_361*(tmp_352*tmp_455 - tmp_357*tmp_454) + tmp_379*(tmp_370*tmp_455 - tmp_375*tmp_454) + tmp_397*(tmp_388*tmp_455 - tmp_393*tmp_454) + tmp_415*(tmp_406*tmp_455 - tmp_411*tmp_454) + tmp_433*(tmp_424*tmp_455 - tmp_429*tmp_454) + tmp_451*(tmp_442*tmp_455 - tmp_447*tmp_454) + tmp_90*(tmp_44*tmp_455 - tmp_454*tmp_76);
      real_t a_2_0 = tmp_109*(tmp_100*tmp_456 - tmp_105*tmp_108) + tmp_127*(-tmp_108*tmp_124 + tmp_119*tmp_456) + tmp_145*(-tmp_108*tmp_142 + tmp_137*tmp_456) + tmp_163*(-tmp_108*tmp_160 + tmp_155*tmp_456) + tmp_181*(-tmp_108*tmp_178 + tmp_173*tmp_456) + tmp_199*(-tmp_108*tmp_196 + tmp_191*tmp_456) + tmp_217*(-tmp_108*tmp_214 + tmp_209*tmp_456) + tmp_235*(-tmp_108*tmp_232 + tmp_227*tmp_456) + tmp_253*(-tmp_108*tmp_250 + tmp_245*tmp_456) + tmp_271*(-tmp_108*tmp_268 + tmp_263*tmp_456) + tmp_289*(-tmp_108*tmp_286 + tmp_281*tmp_456) + tmp_307*(-tmp_108*tmp_304 + tmp_299*tmp_456) + tmp_325*(-tmp_108*tmp_322 + tmp_317*tmp_456) + tmp_343*(-tmp_108*tmp_340 + tmp_335*tmp_456) + tmp_361*(-tmp_108*tmp_358 + tmp_353*tmp_456) + tmp_379*(-tmp_108*tmp_376 + tmp_371*tmp_456) + tmp_397*(-tmp_108*tmp_394 + tmp_389*tmp_456) + tmp_415*(-tmp_108*tmp_412 + tmp_407*tmp_456) + tmp_433*(-tmp_108*tmp_430 + tmp_425*tmp_456) + tmp_451*(-tmp_108*tmp_448 + tmp_443*tmp_456) + tmp_90*(-tmp_108*tmp_79 + tmp_45*tmp_456);
      real_t a_2_1 = tmp_109*(-tmp_105*tmp_452 + tmp_456*tmp_97) + tmp_127*(tmp_116*tmp_456 - tmp_124*tmp_452) + tmp_145*(tmp_134*tmp_456 - tmp_142*tmp_452) + tmp_163*(tmp_152*tmp_456 - tmp_160*tmp_452) + tmp_181*(tmp_170*tmp_456 - tmp_178*tmp_452) + tmp_199*(tmp_188*tmp_456 - tmp_196*tmp_452) + tmp_217*(tmp_206*tmp_456 - tmp_214*tmp_452) + tmp_235*(tmp_224*tmp_456 - tmp_232*tmp_452) + tmp_253*(tmp_242*tmp_456 - tmp_250*tmp_452) + tmp_271*(tmp_260*tmp_456 - tmp_268*tmp_452) + tmp_289*(tmp_278*tmp_456 - tmp_286*tmp_452) + tmp_307*(tmp_296*tmp_456 - tmp_304*tmp_452) + tmp_325*(tmp_314*tmp_456 - tmp_322*tmp_452) + tmp_343*(tmp_332*tmp_456 - tmp_340*tmp_452) + tmp_361*(tmp_350*tmp_456 - tmp_358*tmp_452) + tmp_379*(tmp_368*tmp_456 - tmp_376*tmp_452) + tmp_397*(tmp_386*tmp_456 - tmp_394*tmp_452) + tmp_415*(tmp_404*tmp_456 - tmp_412*tmp_452) + tmp_433*(tmp_422*tmp_456 - tmp_430*tmp_452) + tmp_451*(tmp_440*tmp_456 - tmp_448*tmp_452) + tmp_90*(tmp_36*tmp_456 - tmp_452*tmp_79);
      real_t a_2_2 = tmp_109*(-tmp_105*tmp_453 + tmp_456*tmp_98) + tmp_127*(tmp_117*tmp_456 - tmp_124*tmp_453) + tmp_145*(tmp_135*tmp_456 - tmp_142*tmp_453) + tmp_163*(tmp_153*tmp_456 - tmp_160*tmp_453) + tmp_181*(tmp_171*tmp_456 - tmp_178*tmp_453) + tmp_199*(tmp_189*tmp_456 - tmp_196*tmp_453) + tmp_217*(tmp_207*tmp_456 - tmp_214*tmp_453) + tmp_235*(tmp_225*tmp_456 - tmp_232*tmp_453) + tmp_253*(tmp_243*tmp_456 - tmp_250*tmp_453) + tmp_271*(tmp_261*tmp_456 - tmp_268*tmp_453) + tmp_289*(tmp_279*tmp_456 - tmp_286*tmp_453) + tmp_307*(tmp_297*tmp_456 - tmp_304*tmp_453) + tmp_325*(tmp_315*tmp_456 - tmp_322*tmp_453) + tmp_343*(tmp_333*tmp_456 - tmp_340*tmp_453) + tmp_361*(tmp_351*tmp_456 - tmp_358*tmp_453) + tmp_379*(tmp_369*tmp_456 - tmp_376*tmp_453) + tmp_397*(tmp_387*tmp_456 - tmp_394*tmp_453) + tmp_415*(tmp_405*tmp_456 - tmp_412*tmp_453) + tmp_433*(tmp_423*tmp_456 - tmp_430*tmp_453) + tmp_451*(tmp_441*tmp_456 - tmp_448*tmp_453) + tmp_90*(tmp_40*tmp_456 - tmp_453*tmp_79);
      real_t a_2_3 = tmp_109*(-tmp_105*tmp_454 + tmp_456*tmp_99) + tmp_127*(tmp_118*tmp_456 - tmp_124*tmp_454) + tmp_145*(tmp_136*tmp_456 - tmp_142*tmp_454) + tmp_163*(tmp_154*tmp_456 - tmp_160*tmp_454) + tmp_181*(tmp_172*tmp_456 - tmp_178*tmp_454) + tmp_199*(tmp_190*tmp_456 - tmp_196*tmp_454) + tmp_217*(tmp_208*tmp_456 - tmp_214*tmp_454) + tmp_235*(tmp_226*tmp_456 - tmp_232*tmp_454) + tmp_253*(tmp_244*tmp_456 - tmp_250*tmp_454) + tmp_271*(tmp_262*tmp_456 - tmp_268*tmp_454) + tmp_289*(tmp_280*tmp_456 - tmp_286*tmp_454) + tmp_307*(tmp_298*tmp_456 - tmp_304*tmp_454) + tmp_325*(tmp_316*tmp_456 - tmp_322*tmp_454) + tmp_343*(tmp_334*tmp_456 - tmp_340*tmp_454) + tmp_361*(tmp_352*tmp_456 - tmp_358*tmp_454) + tmp_379*(tmp_370*tmp_456 - tmp_376*tmp_454) + tmp_397*(tmp_388*tmp_456 - tmp_394*tmp_454) + tmp_415*(tmp_406*tmp_456 - tmp_412*tmp_454) + tmp_433*(tmp_424*tmp_456 - tmp_430*tmp_454) + tmp_451*(tmp_442*tmp_456 - tmp_448*tmp_454) + tmp_90*(tmp_44*tmp_456 - tmp_454*tmp_79);
      real_t a_3_0 = tmp_109*(tmp_100*tmp_457 - tmp_106*tmp_108) + tmp_127*(-tmp_108*tmp_125 + tmp_119*tmp_457) + tmp_145*(-tmp_108*tmp_143 + tmp_137*tmp_457) + tmp_163*(-tmp_108*tmp_161 + tmp_155*tmp_457) + tmp_181*(-tmp_108*tmp_179 + tmp_173*tmp_457) + tmp_199*(-tmp_108*tmp_197 + tmp_191*tmp_457) + tmp_217*(-tmp_108*tmp_215 + tmp_209*tmp_457) + tmp_235*(-tmp_108*tmp_233 + tmp_227*tmp_457) + tmp_253*(-tmp_108*tmp_251 + tmp_245*tmp_457) + tmp_271*(-tmp_108*tmp_269 + tmp_263*tmp_457) + tmp_289*(-tmp_108*tmp_287 + tmp_281*tmp_457) + tmp_307*(-tmp_108*tmp_305 + tmp_299*tmp_457) + tmp_325*(-tmp_108*tmp_323 + tmp_317*tmp_457) + tmp_343*(-tmp_108*tmp_341 + tmp_335*tmp_457) + tmp_361*(-tmp_108*tmp_359 + tmp_353*tmp_457) + tmp_379*(-tmp_108*tmp_377 + tmp_371*tmp_457) + tmp_397*(-tmp_108*tmp_395 + tmp_389*tmp_457) + tmp_415*(-tmp_108*tmp_413 + tmp_407*tmp_457) + tmp_433*(-tmp_108*tmp_431 + tmp_425*tmp_457) + tmp_451*(-tmp_108*tmp_449 + tmp_443*tmp_457) + tmp_90*(-tmp_108*tmp_82 + tmp_45*tmp_457);
      real_t a_3_1 = tmp_109*(-tmp_106*tmp_452 + tmp_457*tmp_97) + tmp_127*(tmp_116*tmp_457 - tmp_125*tmp_452) + tmp_145*(tmp_134*tmp_457 - tmp_143*tmp_452) + tmp_163*(tmp_152*tmp_457 - tmp_161*tmp_452) + tmp_181*(tmp_170*tmp_457 - tmp_179*tmp_452) + tmp_199*(tmp_188*tmp_457 - tmp_197*tmp_452) + tmp_217*(tmp_206*tmp_457 - tmp_215*tmp_452) + tmp_235*(tmp_224*tmp_457 - tmp_233*tmp_452) + tmp_253*(tmp_242*tmp_457 - tmp_251*tmp_452) + tmp_271*(tmp_260*tmp_457 - tmp_269*tmp_452) + tmp_289*(tmp_278*tmp_457 - tmp_287*tmp_452) + tmp_307*(tmp_296*tmp_457 - tmp_305*tmp_452) + tmp_325*(tmp_314*tmp_457 - tmp_323*tmp_452) + tmp_343*(tmp_332*tmp_457 - tmp_341*tmp_452) + tmp_361*(tmp_350*tmp_457 - tmp_359*tmp_452) + tmp_379*(tmp_368*tmp_457 - tmp_377*tmp_452) + tmp_397*(tmp_386*tmp_457 - tmp_395*tmp_452) + tmp_415*(tmp_404*tmp_457 - tmp_413*tmp_452) + tmp_433*(tmp_422*tmp_457 - tmp_431*tmp_452) + tmp_451*(tmp_440*tmp_457 - tmp_449*tmp_452) + tmp_90*(tmp_36*tmp_457 - tmp_452*tmp_82);
      real_t a_3_2 = tmp_109*(-tmp_106*tmp_453 + tmp_457*tmp_98) + tmp_127*(tmp_117*tmp_457 - tmp_125*tmp_453) + tmp_145*(tmp_135*tmp_457 - tmp_143*tmp_453) + tmp_163*(tmp_153*tmp_457 - tmp_161*tmp_453) + tmp_181*(tmp_171*tmp_457 - tmp_179*tmp_453) + tmp_199*(tmp_189*tmp_457 - tmp_197*tmp_453) + tmp_217*(tmp_207*tmp_457 - tmp_215*tmp_453) + tmp_235*(tmp_225*tmp_457 - tmp_233*tmp_453) + tmp_253*(tmp_243*tmp_457 - tmp_251*tmp_453) + tmp_271*(tmp_261*tmp_457 - tmp_269*tmp_453) + tmp_289*(tmp_279*tmp_457 - tmp_287*tmp_453) + tmp_307*(tmp_297*tmp_457 - tmp_305*tmp_453) + tmp_325*(tmp_315*tmp_457 - tmp_323*tmp_453) + tmp_343*(tmp_333*tmp_457 - tmp_341*tmp_453) + tmp_361*(tmp_351*tmp_457 - tmp_359*tmp_453) + tmp_379*(tmp_369*tmp_457 - tmp_377*tmp_453) + tmp_397*(tmp_387*tmp_457 - tmp_395*tmp_453) + tmp_415*(tmp_405*tmp_457 - tmp_413*tmp_453) + tmp_433*(tmp_423*tmp_457 - tmp_431*tmp_453) + tmp_451*(tmp_441*tmp_457 - tmp_449*tmp_453) + tmp_90*(tmp_40*tmp_457 - tmp_453*tmp_82);
      real_t a_3_3 = tmp_109*(-tmp_106*tmp_454 + tmp_457*tmp_99) + tmp_127*(tmp_118*tmp_457 - tmp_125*tmp_454) + tmp_145*(tmp_136*tmp_457 - tmp_143*tmp_454) + tmp_163*(tmp_154*tmp_457 - tmp_161*tmp_454) + tmp_181*(tmp_172*tmp_457 - tmp_179*tmp_454) + tmp_199*(tmp_190*tmp_457 - tmp_197*tmp_454) + tmp_217*(tmp_208*tmp_457 - tmp_215*tmp_454) + tmp_235*(tmp_226*tmp_457 - tmp_233*tmp_454) + tmp_253*(tmp_244*tmp_457 - tmp_251*tmp_454) + tmp_271*(tmp_262*tmp_457 - tmp_269*tmp_454) + tmp_289*(tmp_280*tmp_457 - tmp_287*tmp_454) + tmp_307*(tmp_298*tmp_457 - tmp_305*tmp_454) + tmp_325*(tmp_316*tmp_457 - tmp_323*tmp_454) + tmp_343*(tmp_334*tmp_457 - tmp_341*tmp_454) + tmp_361*(tmp_352*tmp_457 - tmp_359*tmp_454) + tmp_379*(tmp_370*tmp_457 - tmp_377*tmp_454) + tmp_397*(tmp_388*tmp_457 - tmp_395*tmp_454) + tmp_415*(tmp_406*tmp_457 - tmp_413*tmp_454) + tmp_433*(tmp_424*tmp_457 - tmp_431*tmp_454) + tmp_451*(tmp_442*tmp_457 - tmp_449*tmp_454) + tmp_90*(tmp_44*tmp_457 - tmp_454*tmp_82);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_0*tmp_6;
      real_t tmp_13 = tmp_2*tmp_8;
      real_t tmp_14 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_1*tmp_11 + tmp_10*tmp_2*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_3 + tmp_3*tmp_7);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_19 = tmp_14*(0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17 + tmp_18);
      real_t tmp_20 = tmp_10*tmp_2 - tmp_12;
      real_t tmp_21 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_22 = -tmp_21;
      real_t tmp_23 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_24 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_25 = tmp_14*(0.031405749086161582*tmp_22 + 0.93718850182767688*tmp_23 + tmp_24);
      real_t tmp_26 = -tmp_1*tmp_10 + tmp_3*tmp_6;
      real_t tmp_27 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_28 = -tmp_27;
      real_t tmp_29 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_30 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_31 = tmp_14*(0.031405749086161582*tmp_28 + 0.93718850182767688*tmp_29 + tmp_30);
      real_t tmp_32 = tmp_19*tmp_4 + tmp_20*tmp_25 + tmp_26*tmp_31;
      real_t tmp_33 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_34 = -tmp_13 + tmp_7;
      real_t tmp_35 = tmp_1*tmp_8 - tmp_6*tmp_9;
      real_t tmp_36 = tmp_19*tmp_33 + tmp_25*tmp_34 + tmp_31*tmp_35;
      real_t tmp_37 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_11;
      real_t tmp_39 = tmp_10*tmp_9 - tmp_3*tmp_8;
      real_t tmp_40 = tmp_19*tmp_37 + tmp_25*tmp_38 + tmp_31*tmp_39;
      real_t tmp_41 = -tmp_32 - tmp_36 - tmp_40 + 1;
      real_t tmp_42 = 0.5*tmp_14;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_34*tmp_42;
      real_t tmp_45 = tmp_20*tmp_42;
      real_t tmp_46 = p_affine_13_0*(-tmp_43 - tmp_44 - tmp_45);
      real_t tmp_47 = tmp_39*tmp_42;
      real_t tmp_48 = tmp_35*tmp_42;
      real_t tmp_49 = tmp_26*tmp_42;
      real_t tmp_50 = p_affine_13_1*(-tmp_47 - tmp_48 - tmp_49);
      real_t tmp_51 = 2.0*std::pow((std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)*std::abs(tmp_15*tmp_23 - tmp_17*tmp_21)) + (std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)*std::abs(tmp_15*tmp_29 - tmp_17*tmp_27)) + (std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)*std::abs(tmp_21*tmp_29 - tmp_23*tmp_27)), 1.0/2.0);
      real_t tmp_52 = 0.0068572537431980923*tmp_51;
      real_t tmp_53 = tmp_14*(0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17 + tmp_18);
      real_t tmp_54 = tmp_14*(0.19601935860219369*tmp_22 + 0.60796128279561268*tmp_23 + tmp_24);
      real_t tmp_55 = tmp_14*(0.19601935860219369*tmp_28 + 0.60796128279561268*tmp_29 + tmp_30);
      real_t tmp_56 = tmp_20*tmp_54 + tmp_26*tmp_55 + tmp_4*tmp_53;
      real_t tmp_57 = tmp_33*tmp_53 + tmp_34*tmp_54 + tmp_35*tmp_55;
      real_t tmp_58 = tmp_37*tmp_53 + tmp_38*tmp_54 + tmp_39*tmp_55;
      real_t tmp_59 = -tmp_56 - tmp_57 - tmp_58 + 1;
      real_t tmp_60 = 0.037198804536718075*tmp_51;
      real_t tmp_61 = tmp_14*(0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_62 = tmp_14*(0.37605877282253791*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_63 = tmp_14*(0.37605877282253791*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_64 = tmp_20*tmp_62 + tmp_26*tmp_63 + tmp_4*tmp_61;
      real_t tmp_65 = tmp_33*tmp_61 + tmp_34*tmp_62 + tmp_35*tmp_63;
      real_t tmp_66 = tmp_37*tmp_61 + tmp_38*tmp_62 + tmp_39*tmp_63;
      real_t tmp_67 = -tmp_64 - tmp_65 - tmp_66 + 1;
      real_t tmp_68 = 0.020848748529055869*tmp_51;
      real_t tmp_69 = tmp_14*(0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_70 = tmp_14*(0.78764240869137092*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_71 = tmp_14*(0.78764240869137092*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_72 = tmp_20*tmp_70 + tmp_26*tmp_71 + tmp_4*tmp_69;
      real_t tmp_73 = tmp_33*tmp_69 + tmp_34*tmp_70 + tmp_35*tmp_71;
      real_t tmp_74 = tmp_37*tmp_69 + tmp_38*tmp_70 + tmp_39*tmp_71;
      real_t tmp_75 = -tmp_72 - tmp_73 - tmp_74 + 1;
      real_t tmp_76 = 0.019202922745021479*tmp_51;
      real_t tmp_77 = tmp_14*(0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_78 = tmp_14*(0.58463275527740355*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_79 = tmp_14*(0.58463275527740355*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_80 = tmp_20*tmp_78 + tmp_26*tmp_79 + tmp_4*tmp_77;
      real_t tmp_81 = tmp_33*tmp_77 + tmp_34*tmp_78 + tmp_35*tmp_79;
      real_t tmp_82 = tmp_37*tmp_77 + tmp_38*tmp_78 + tmp_39*tmp_79;
      real_t tmp_83 = -tmp_80 - tmp_81 - tmp_82 + 1;
      real_t tmp_84 = 0.020848748529055869*tmp_51;
      real_t tmp_85 = tmp_14*(0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_86 = tmp_14*(0.041227165399737475*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_87 = tmp_14*(0.041227165399737475*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_88 = tmp_20*tmp_86 + tmp_26*tmp_87 + tmp_4*tmp_85;
      real_t tmp_89 = tmp_33*tmp_85 + tmp_34*tmp_86 + tmp_35*tmp_87;
      real_t tmp_90 = tmp_37*tmp_85 + tmp_38*tmp_86 + tmp_39*tmp_87;
      real_t tmp_91 = -tmp_88 - tmp_89 - tmp_90 + 1;
      real_t tmp_92 = 0.019202922745021479*tmp_51;
      real_t tmp_93 = tmp_14*(0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_94 = tmp_14*(0.039308471900058539*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_95 = tmp_14*(0.039308471900058539*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_96 = tmp_20*tmp_94 + tmp_26*tmp_95 + tmp_4*tmp_93;
      real_t tmp_97 = tmp_33*tmp_93 + tmp_34*tmp_94 + tmp_35*tmp_95;
      real_t tmp_98 = tmp_37*tmp_93 + tmp_38*tmp_94 + tmp_39*tmp_95;
      real_t tmp_99 = -tmp_96 - tmp_97 - tmp_98 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_51;
      real_t tmp_101 = tmp_14*(0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_102 = tmp_14*(0.78764240869137092*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_103 = tmp_14*(0.78764240869137092*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_104 = tmp_101*tmp_4 + tmp_102*tmp_20 + tmp_103*tmp_26;
      real_t tmp_105 = tmp_101*tmp_33 + tmp_102*tmp_34 + tmp_103*tmp_35;
      real_t tmp_106 = tmp_101*tmp_37 + tmp_102*tmp_38 + tmp_103*tmp_39;
      real_t tmp_107 = -tmp_104 - tmp_105 - tmp_106 + 1;
      real_t tmp_108 = 0.019202922745021479*tmp_51;
      real_t tmp_109 = tmp_14*(0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17 + tmp_18);
      real_t tmp_110 = tmp_14*(0.58463275527740355*tmp_22 + 0.039308471900058539*tmp_23 + tmp_24);
      real_t tmp_111 = tmp_14*(0.58463275527740355*tmp_28 + 0.039308471900058539*tmp_29 + tmp_30);
      real_t tmp_112 = tmp_109*tmp_4 + tmp_110*tmp_20 + tmp_111*tmp_26;
      real_t tmp_113 = tmp_109*tmp_33 + tmp_110*tmp_34 + tmp_111*tmp_35;
      real_t tmp_114 = tmp_109*tmp_37 + tmp_110*tmp_38 + tmp_111*tmp_39;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 0.020848748529055869*tmp_51;
      real_t tmp_117 = tmp_14*(0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17 + tmp_18);
      real_t tmp_118 = tmp_14*(0.1711304259088916*tmp_22 + 0.78764240869137092*tmp_23 + tmp_24);
      real_t tmp_119 = tmp_14*(0.1711304259088916*tmp_28 + 0.78764240869137092*tmp_29 + tmp_30);
      real_t tmp_120 = tmp_117*tmp_4 + tmp_118*tmp_20 + tmp_119*tmp_26;
      real_t tmp_121 = tmp_117*tmp_33 + tmp_118*tmp_34 + tmp_119*tmp_35;
      real_t tmp_122 = tmp_117*tmp_37 + tmp_118*tmp_38 + tmp_119*tmp_39;
      real_t tmp_123 = -tmp_120 - tmp_121 - tmp_122 + 1;
      real_t tmp_124 = 0.019202922745021479*tmp_51;
      real_t tmp_125 = tmp_14*(0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17 + tmp_18);
      real_t tmp_126 = tmp_14*(0.37605877282253791*tmp_22 + 0.58463275527740355*tmp_23 + tmp_24);
      real_t tmp_127 = tmp_14*(0.37605877282253791*tmp_28 + 0.58463275527740355*tmp_29 + tmp_30);
      real_t tmp_128 = tmp_125*tmp_4 + tmp_126*tmp_20 + tmp_127*tmp_26;
      real_t tmp_129 = tmp_125*tmp_33 + tmp_126*tmp_34 + tmp_127*tmp_35;
      real_t tmp_130 = tmp_125*tmp_37 + tmp_126*tmp_38 + tmp_127*tmp_39;
      real_t tmp_131 = -tmp_128 - tmp_129 - tmp_130 + 1;
      real_t tmp_132 = 0.020848748529055869*tmp_51;
      real_t tmp_133 = tmp_14*(0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17 + tmp_18);
      real_t tmp_134 = tmp_14*(0.041227165399737475*tmp_22 + 0.1711304259088916*tmp_23 + tmp_24);
      real_t tmp_135 = tmp_14*(0.041227165399737475*tmp_28 + 0.1711304259088916*tmp_29 + tmp_30);
      real_t tmp_136 = tmp_133*tmp_4 + tmp_134*tmp_20 + tmp_135*tmp_26;
      real_t tmp_137 = tmp_133*tmp_33 + tmp_134*tmp_34 + tmp_135*tmp_35;
      real_t tmp_138 = tmp_133*tmp_37 + tmp_134*tmp_38 + tmp_135*tmp_39;
      real_t tmp_139 = -tmp_136 - tmp_137 - tmp_138 + 1;
      real_t tmp_140 = 0.019202922745021479*tmp_51;
      real_t tmp_141 = tmp_14*(0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17 + tmp_18);
      real_t tmp_142 = tmp_14*(0.40446199974765351*tmp_22 + 0.19107600050469298*tmp_23 + tmp_24);
      real_t tmp_143 = tmp_14*(0.40446199974765351*tmp_28 + 0.19107600050469298*tmp_29 + tmp_30);
      real_t tmp_144 = tmp_141*tmp_4 + tmp_142*tmp_20 + tmp_143*tmp_26;
      real_t tmp_145 = tmp_141*tmp_33 + tmp_142*tmp_34 + tmp_143*tmp_35;
      real_t tmp_146 = tmp_141*tmp_37 + tmp_142*tmp_38 + tmp_143*tmp_39;
      real_t tmp_147 = -tmp_144 - tmp_145 - tmp_146 + 1;
      real_t tmp_148 = 0.042507265838595799*tmp_51;
      real_t tmp_149 = tmp_14*(0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17 + tmp_18);
      real_t tmp_150 = tmp_14*(0.039308471900058539*tmp_22 + 0.37605877282253791*tmp_23 + tmp_24);
      real_t tmp_151 = tmp_14*(0.039308471900058539*tmp_28 + 0.37605877282253791*tmp_29 + tmp_30);
      real_t tmp_152 = tmp_149*tmp_4 + tmp_150*tmp_20 + tmp_151*tmp_26;
      real_t tmp_153 = tmp_149*tmp_33 + tmp_150*tmp_34 + tmp_151*tmp_35;
      real_t tmp_154 = tmp_149*tmp_37 + tmp_150*tmp_38 + tmp_151*tmp_39;
      real_t tmp_155 = -tmp_152 - tmp_153 - tmp_154 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_51;
      real_t tmp_157 = tmp_14*(0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_158 = tmp_14*(0.93718850182767688*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_159 = tmp_14*(0.93718850182767688*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_160 = tmp_157*tmp_4 + tmp_158*tmp_20 + tmp_159*tmp_26;
      real_t tmp_161 = tmp_157*tmp_33 + tmp_158*tmp_34 + tmp_159*tmp_35;
      real_t tmp_162 = tmp_157*tmp_37 + tmp_158*tmp_38 + tmp_159*tmp_39;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = 0.0068572537431980923*tmp_51;
      real_t tmp_165 = tmp_14*(0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_166 = tmp_14*(0.60796128279561268*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_167 = tmp_14*(0.60796128279561268*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_168 = tmp_165*tmp_4 + tmp_166*tmp_20 + tmp_167*tmp_26;
      real_t tmp_169 = tmp_165*tmp_33 + tmp_166*tmp_34 + tmp_167*tmp_35;
      real_t tmp_170 = tmp_165*tmp_37 + tmp_166*tmp_38 + tmp_167*tmp_39;
      real_t tmp_171 = -tmp_168 - tmp_169 - tmp_170 + 1;
      real_t tmp_172 = 0.037198804536718075*tmp_51;
      real_t tmp_173 = tmp_14*(0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_174 = tmp_14*(0.19107600050469298*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_175 = tmp_14*(0.19107600050469298*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_176 = tmp_173*tmp_4 + tmp_174*tmp_20 + tmp_175*tmp_26;
      real_t tmp_177 = tmp_173*tmp_33 + tmp_174*tmp_34 + tmp_175*tmp_35;
      real_t tmp_178 = tmp_173*tmp_37 + tmp_174*tmp_38 + tmp_175*tmp_39;
      real_t tmp_179 = -tmp_176 - tmp_177 - tmp_178 + 1;
      real_t tmp_180 = 0.042507265838595799*tmp_51;
      real_t tmp_181 = tmp_14*(0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17 + tmp_18);
      real_t tmp_182 = tmp_14*(0.031405749086161582*tmp_22 + 0.031405749086161582*tmp_23 + tmp_24);
      real_t tmp_183 = tmp_14*(0.031405749086161582*tmp_28 + 0.031405749086161582*tmp_29 + tmp_30);
      real_t tmp_184 = tmp_181*tmp_4 + tmp_182*tmp_20 + tmp_183*tmp_26;
      real_t tmp_185 = tmp_181*tmp_33 + tmp_182*tmp_34 + tmp_183*tmp_35;
      real_t tmp_186 = tmp_181*tmp_37 + tmp_182*tmp_38 + tmp_183*tmp_39;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 0.0068572537431980923*tmp_51;
      real_t tmp_189 = tmp_14*(0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17 + tmp_18);
      real_t tmp_190 = tmp_14*(0.19601935860219369*tmp_22 + 0.19601935860219369*tmp_23 + tmp_24);
      real_t tmp_191 = tmp_14*(0.19601935860219369*tmp_28 + 0.19601935860219369*tmp_29 + tmp_30);
      real_t tmp_192 = tmp_189*tmp_4 + tmp_190*tmp_20 + tmp_191*tmp_26;
      real_t tmp_193 = tmp_189*tmp_33 + tmp_190*tmp_34 + tmp_191*tmp_35;
      real_t tmp_194 = tmp_189*tmp_37 + tmp_190*tmp_38 + tmp_191*tmp_39;
      real_t tmp_195 = -tmp_192 - tmp_193 - tmp_194 + 1;
      real_t tmp_196 = 0.037198804536718075*tmp_51;
      real_t tmp_197 = tmp_14*(0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17 + tmp_18);
      real_t tmp_198 = tmp_14*(0.40446199974765351*tmp_22 + 0.40446199974765351*tmp_23 + tmp_24);
      real_t tmp_199 = tmp_14*(0.40446199974765351*tmp_28 + 0.40446199974765351*tmp_29 + tmp_30);
      real_t tmp_200 = tmp_197*tmp_4 + tmp_198*tmp_20 + tmp_199*tmp_26;
      real_t tmp_201 = tmp_197*tmp_33 + tmp_198*tmp_34 + tmp_199*tmp_35;
      real_t tmp_202 = tmp_197*tmp_37 + tmp_198*tmp_38 + tmp_199*tmp_39;
      real_t tmp_203 = -tmp_200 - tmp_201 - tmp_202 + 1;
      real_t tmp_204 = 0.042507265838595799*tmp_51;
      real_t tmp_205 = tmp_14*(0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17 + tmp_18);
      real_t tmp_206 = tmp_14*(0.1711304259088916*tmp_22 + 0.041227165399737475*tmp_23 + tmp_24);
      real_t tmp_207 = tmp_14*(0.1711304259088916*tmp_28 + 0.041227165399737475*tmp_29 + tmp_30);
      real_t tmp_208 = tmp_20*tmp_206 + tmp_205*tmp_4 + tmp_207*tmp_26;
      real_t tmp_209 = tmp_205*tmp_33 + tmp_206*tmp_34 + tmp_207*tmp_35;
      real_t tmp_210 = tmp_205*tmp_37 + tmp_206*tmp_38 + tmp_207*tmp_39;
      real_t tmp_211 = -tmp_208 - tmp_209 - tmp_210 + 1;
      real_t tmp_212 = 0.019202922745021479*tmp_51;
      real_t tmp_213 = p_affine_13_1*tmp_49;
      real_t tmp_214 = p_affine_13_1*tmp_48;
      real_t tmp_215 = p_affine_13_1*tmp_47;
      real_t tmp_216 = p_affine_13_0*tmp_45;
      real_t tmp_217 = p_affine_13_0*tmp_44;
      real_t tmp_218 = p_affine_13_0*tmp_43;
      real_t a_0_0 = tmp_100*(-tmp_46*tmp_99 - tmp_50*tmp_99) + tmp_108*(-tmp_107*tmp_46 - tmp_107*tmp_50) + tmp_116*(-tmp_115*tmp_46 - tmp_115*tmp_50) + tmp_124*(-tmp_123*tmp_46 - tmp_123*tmp_50) + tmp_132*(-tmp_131*tmp_46 - tmp_131*tmp_50) + tmp_140*(-tmp_139*tmp_46 - tmp_139*tmp_50) + tmp_148*(-tmp_147*tmp_46 - tmp_147*tmp_50) + tmp_156*(-tmp_155*tmp_46 - tmp_155*tmp_50) + tmp_164*(-tmp_163*tmp_46 - tmp_163*tmp_50) + tmp_172*(-tmp_171*tmp_46 - tmp_171*tmp_50) + tmp_180*(-tmp_179*tmp_46 - tmp_179*tmp_50) + tmp_188*(-tmp_187*tmp_46 - tmp_187*tmp_50) + tmp_196*(-tmp_195*tmp_46 - tmp_195*tmp_50) + tmp_204*(-tmp_203*tmp_46 - tmp_203*tmp_50) + tmp_212*(-tmp_211*tmp_46 - tmp_211*tmp_50) + tmp_52*(-tmp_41*tmp_46 - tmp_41*tmp_50) + tmp_60*(-tmp_46*tmp_59 - tmp_50*tmp_59) + tmp_68*(-tmp_46*tmp_67 - tmp_50*tmp_67) + tmp_76*(-tmp_46*tmp_75 - tmp_50*tmp_75) + tmp_84*(-tmp_46*tmp_83 - tmp_50*tmp_83) + tmp_92*(-tmp_46*tmp_91 - tmp_50*tmp_91);
      real_t a_0_1 = tmp_100*(-tmp_213*tmp_99 - tmp_46*tmp_96) + tmp_108*(-tmp_104*tmp_46 - tmp_107*tmp_213) + tmp_116*(-tmp_112*tmp_46 - tmp_115*tmp_213) + tmp_124*(-tmp_120*tmp_46 - tmp_123*tmp_213) + tmp_132*(-tmp_128*tmp_46 - tmp_131*tmp_213) + tmp_140*(-tmp_136*tmp_46 - tmp_139*tmp_213) + tmp_148*(-tmp_144*tmp_46 - tmp_147*tmp_213) + tmp_156*(-tmp_152*tmp_46 - tmp_155*tmp_213) + tmp_164*(-tmp_160*tmp_46 - tmp_163*tmp_213) + tmp_172*(-tmp_168*tmp_46 - tmp_171*tmp_213) + tmp_180*(-tmp_176*tmp_46 - tmp_179*tmp_213) + tmp_188*(-tmp_184*tmp_46 - tmp_187*tmp_213) + tmp_196*(-tmp_192*tmp_46 - tmp_195*tmp_213) + tmp_204*(-tmp_200*tmp_46 - tmp_203*tmp_213) + tmp_212*(-tmp_208*tmp_46 - tmp_211*tmp_213) + tmp_52*(-tmp_213*tmp_41 - tmp_32*tmp_46) + tmp_60*(-tmp_213*tmp_59 - tmp_46*tmp_56) + tmp_68*(-tmp_213*tmp_67 - tmp_46*tmp_64) + tmp_76*(-tmp_213*tmp_75 - tmp_46*tmp_72) + tmp_84*(-tmp_213*tmp_83 - tmp_46*tmp_80) + tmp_92*(-tmp_213*tmp_91 - tmp_46*tmp_88);
      real_t a_0_2 = tmp_100*(-tmp_214*tmp_99 - tmp_46*tmp_97) + tmp_108*(-tmp_105*tmp_46 - tmp_107*tmp_214) + tmp_116*(-tmp_113*tmp_46 - tmp_115*tmp_214) + tmp_124*(-tmp_121*tmp_46 - tmp_123*tmp_214) + tmp_132*(-tmp_129*tmp_46 - tmp_131*tmp_214) + tmp_140*(-tmp_137*tmp_46 - tmp_139*tmp_214) + tmp_148*(-tmp_145*tmp_46 - tmp_147*tmp_214) + tmp_156*(-tmp_153*tmp_46 - tmp_155*tmp_214) + tmp_164*(-tmp_161*tmp_46 - tmp_163*tmp_214) + tmp_172*(-tmp_169*tmp_46 - tmp_171*tmp_214) + tmp_180*(-tmp_177*tmp_46 - tmp_179*tmp_214) + tmp_188*(-tmp_185*tmp_46 - tmp_187*tmp_214) + tmp_196*(-tmp_193*tmp_46 - tmp_195*tmp_214) + tmp_204*(-tmp_201*tmp_46 - tmp_203*tmp_214) + tmp_212*(-tmp_209*tmp_46 - tmp_211*tmp_214) + tmp_52*(-tmp_214*tmp_41 - tmp_36*tmp_46) + tmp_60*(-tmp_214*tmp_59 - tmp_46*tmp_57) + tmp_68*(-tmp_214*tmp_67 - tmp_46*tmp_65) + tmp_76*(-tmp_214*tmp_75 - tmp_46*tmp_73) + tmp_84*(-tmp_214*tmp_83 - tmp_46*tmp_81) + tmp_92*(-tmp_214*tmp_91 - tmp_46*tmp_89);
      real_t a_0_3 = tmp_100*(-tmp_215*tmp_99 - tmp_46*tmp_98) + tmp_108*(-tmp_106*tmp_46 - tmp_107*tmp_215) + tmp_116*(-tmp_114*tmp_46 - tmp_115*tmp_215) + tmp_124*(-tmp_122*tmp_46 - tmp_123*tmp_215) + tmp_132*(-tmp_130*tmp_46 - tmp_131*tmp_215) + tmp_140*(-tmp_138*tmp_46 - tmp_139*tmp_215) + tmp_148*(-tmp_146*tmp_46 - tmp_147*tmp_215) + tmp_156*(-tmp_154*tmp_46 - tmp_155*tmp_215) + tmp_164*(-tmp_162*tmp_46 - tmp_163*tmp_215) + tmp_172*(-tmp_170*tmp_46 - tmp_171*tmp_215) + tmp_180*(-tmp_178*tmp_46 - tmp_179*tmp_215) + tmp_188*(-tmp_186*tmp_46 - tmp_187*tmp_215) + tmp_196*(-tmp_194*tmp_46 - tmp_195*tmp_215) + tmp_204*(-tmp_202*tmp_46 - tmp_203*tmp_215) + tmp_212*(-tmp_210*tmp_46 - tmp_211*tmp_215) + tmp_52*(-tmp_215*tmp_41 - tmp_40*tmp_46) + tmp_60*(-tmp_215*tmp_59 - tmp_46*tmp_58) + tmp_68*(-tmp_215*tmp_67 - tmp_46*tmp_66) + tmp_76*(-tmp_215*tmp_75 - tmp_46*tmp_74) + tmp_84*(-tmp_215*tmp_83 - tmp_46*tmp_82) + tmp_92*(-tmp_215*tmp_91 - tmp_46*tmp_90);
      real_t a_1_0 = tmp_100*(-tmp_216*tmp_99 - tmp_50*tmp_96) + tmp_108*(-tmp_104*tmp_50 - tmp_107*tmp_216) + tmp_116*(-tmp_112*tmp_50 - tmp_115*tmp_216) + tmp_124*(-tmp_120*tmp_50 - tmp_123*tmp_216) + tmp_132*(-tmp_128*tmp_50 - tmp_131*tmp_216) + tmp_140*(-tmp_136*tmp_50 - tmp_139*tmp_216) + tmp_148*(-tmp_144*tmp_50 - tmp_147*tmp_216) + tmp_156*(-tmp_152*tmp_50 - tmp_155*tmp_216) + tmp_164*(-tmp_160*tmp_50 - tmp_163*tmp_216) + tmp_172*(-tmp_168*tmp_50 - tmp_171*tmp_216) + tmp_180*(-tmp_176*tmp_50 - tmp_179*tmp_216) + tmp_188*(-tmp_184*tmp_50 - tmp_187*tmp_216) + tmp_196*(-tmp_192*tmp_50 - tmp_195*tmp_216) + tmp_204*(-tmp_200*tmp_50 - tmp_203*tmp_216) + tmp_212*(-tmp_208*tmp_50 - tmp_211*tmp_216) + tmp_52*(-tmp_216*tmp_41 - tmp_32*tmp_50) + tmp_60*(-tmp_216*tmp_59 - tmp_50*tmp_56) + tmp_68*(-tmp_216*tmp_67 - tmp_50*tmp_64) + tmp_76*(-tmp_216*tmp_75 - tmp_50*tmp_72) + tmp_84*(-tmp_216*tmp_83 - tmp_50*tmp_80) + tmp_92*(-tmp_216*tmp_91 - tmp_50*tmp_88);
      real_t a_1_1 = tmp_100*(-tmp_213*tmp_96 - tmp_216*tmp_96) + tmp_108*(-tmp_104*tmp_213 - tmp_104*tmp_216) + tmp_116*(-tmp_112*tmp_213 - tmp_112*tmp_216) + tmp_124*(-tmp_120*tmp_213 - tmp_120*tmp_216) + tmp_132*(-tmp_128*tmp_213 - tmp_128*tmp_216) + tmp_140*(-tmp_136*tmp_213 - tmp_136*tmp_216) + tmp_148*(-tmp_144*tmp_213 - tmp_144*tmp_216) + tmp_156*(-tmp_152*tmp_213 - tmp_152*tmp_216) + tmp_164*(-tmp_160*tmp_213 - tmp_160*tmp_216) + tmp_172*(-tmp_168*tmp_213 - tmp_168*tmp_216) + tmp_180*(-tmp_176*tmp_213 - tmp_176*tmp_216) + tmp_188*(-tmp_184*tmp_213 - tmp_184*tmp_216) + tmp_196*(-tmp_192*tmp_213 - tmp_192*tmp_216) + tmp_204*(-tmp_200*tmp_213 - tmp_200*tmp_216) + tmp_212*(-tmp_208*tmp_213 - tmp_208*tmp_216) + tmp_52*(-tmp_213*tmp_32 - tmp_216*tmp_32) + tmp_60*(-tmp_213*tmp_56 - tmp_216*tmp_56) + tmp_68*(-tmp_213*tmp_64 - tmp_216*tmp_64) + tmp_76*(-tmp_213*tmp_72 - tmp_216*tmp_72) + tmp_84*(-tmp_213*tmp_80 - tmp_216*tmp_80) + tmp_92*(-tmp_213*tmp_88 - tmp_216*tmp_88);
      real_t a_1_2 = tmp_100*(-tmp_214*tmp_96 - tmp_216*tmp_97) + tmp_108*(-tmp_104*tmp_214 - tmp_105*tmp_216) + tmp_116*(-tmp_112*tmp_214 - tmp_113*tmp_216) + tmp_124*(-tmp_120*tmp_214 - tmp_121*tmp_216) + tmp_132*(-tmp_128*tmp_214 - tmp_129*tmp_216) + tmp_140*(-tmp_136*tmp_214 - tmp_137*tmp_216) + tmp_148*(-tmp_144*tmp_214 - tmp_145*tmp_216) + tmp_156*(-tmp_152*tmp_214 - tmp_153*tmp_216) + tmp_164*(-tmp_160*tmp_214 - tmp_161*tmp_216) + tmp_172*(-tmp_168*tmp_214 - tmp_169*tmp_216) + tmp_180*(-tmp_176*tmp_214 - tmp_177*tmp_216) + tmp_188*(-tmp_184*tmp_214 - tmp_185*tmp_216) + tmp_196*(-tmp_192*tmp_214 - tmp_193*tmp_216) + tmp_204*(-tmp_200*tmp_214 - tmp_201*tmp_216) + tmp_212*(-tmp_208*tmp_214 - tmp_209*tmp_216) + tmp_52*(-tmp_214*tmp_32 - tmp_216*tmp_36) + tmp_60*(-tmp_214*tmp_56 - tmp_216*tmp_57) + tmp_68*(-tmp_214*tmp_64 - tmp_216*tmp_65) + tmp_76*(-tmp_214*tmp_72 - tmp_216*tmp_73) + tmp_84*(-tmp_214*tmp_80 - tmp_216*tmp_81) + tmp_92*(-tmp_214*tmp_88 - tmp_216*tmp_89);
      real_t a_1_3 = tmp_100*(-tmp_215*tmp_96 - tmp_216*tmp_98) + tmp_108*(-tmp_104*tmp_215 - tmp_106*tmp_216) + tmp_116*(-tmp_112*tmp_215 - tmp_114*tmp_216) + tmp_124*(-tmp_120*tmp_215 - tmp_122*tmp_216) + tmp_132*(-tmp_128*tmp_215 - tmp_130*tmp_216) + tmp_140*(-tmp_136*tmp_215 - tmp_138*tmp_216) + tmp_148*(-tmp_144*tmp_215 - tmp_146*tmp_216) + tmp_156*(-tmp_152*tmp_215 - tmp_154*tmp_216) + tmp_164*(-tmp_160*tmp_215 - tmp_162*tmp_216) + tmp_172*(-tmp_168*tmp_215 - tmp_170*tmp_216) + tmp_180*(-tmp_176*tmp_215 - tmp_178*tmp_216) + tmp_188*(-tmp_184*tmp_215 - tmp_186*tmp_216) + tmp_196*(-tmp_192*tmp_215 - tmp_194*tmp_216) + tmp_204*(-tmp_200*tmp_215 - tmp_202*tmp_216) + tmp_212*(-tmp_208*tmp_215 - tmp_210*tmp_216) + tmp_52*(-tmp_215*tmp_32 - tmp_216*tmp_40) + tmp_60*(-tmp_215*tmp_56 - tmp_216*tmp_58) + tmp_68*(-tmp_215*tmp_64 - tmp_216*tmp_66) + tmp_76*(-tmp_215*tmp_72 - tmp_216*tmp_74) + tmp_84*(-tmp_215*tmp_80 - tmp_216*tmp_82) + tmp_92*(-tmp_215*tmp_88 - tmp_216*tmp_90);
      real_t a_2_0 = tmp_100*(-tmp_217*tmp_99 - tmp_50*tmp_97) + tmp_108*(-tmp_105*tmp_50 - tmp_107*tmp_217) + tmp_116*(-tmp_113*tmp_50 - tmp_115*tmp_217) + tmp_124*(-tmp_121*tmp_50 - tmp_123*tmp_217) + tmp_132*(-tmp_129*tmp_50 - tmp_131*tmp_217) + tmp_140*(-tmp_137*tmp_50 - tmp_139*tmp_217) + tmp_148*(-tmp_145*tmp_50 - tmp_147*tmp_217) + tmp_156*(-tmp_153*tmp_50 - tmp_155*tmp_217) + tmp_164*(-tmp_161*tmp_50 - tmp_163*tmp_217) + tmp_172*(-tmp_169*tmp_50 - tmp_171*tmp_217) + tmp_180*(-tmp_177*tmp_50 - tmp_179*tmp_217) + tmp_188*(-tmp_185*tmp_50 - tmp_187*tmp_217) + tmp_196*(-tmp_193*tmp_50 - tmp_195*tmp_217) + tmp_204*(-tmp_201*tmp_50 - tmp_203*tmp_217) + tmp_212*(-tmp_209*tmp_50 - tmp_211*tmp_217) + tmp_52*(-tmp_217*tmp_41 - tmp_36*tmp_50) + tmp_60*(-tmp_217*tmp_59 - tmp_50*tmp_57) + tmp_68*(-tmp_217*tmp_67 - tmp_50*tmp_65) + tmp_76*(-tmp_217*tmp_75 - tmp_50*tmp_73) + tmp_84*(-tmp_217*tmp_83 - tmp_50*tmp_81) + tmp_92*(-tmp_217*tmp_91 - tmp_50*tmp_89);
      real_t a_2_1 = tmp_100*(-tmp_213*tmp_97 - tmp_217*tmp_96) + tmp_108*(-tmp_104*tmp_217 - tmp_105*tmp_213) + tmp_116*(-tmp_112*tmp_217 - tmp_113*tmp_213) + tmp_124*(-tmp_120*tmp_217 - tmp_121*tmp_213) + tmp_132*(-tmp_128*tmp_217 - tmp_129*tmp_213) + tmp_140*(-tmp_136*tmp_217 - tmp_137*tmp_213) + tmp_148*(-tmp_144*tmp_217 - tmp_145*tmp_213) + tmp_156*(-tmp_152*tmp_217 - tmp_153*tmp_213) + tmp_164*(-tmp_160*tmp_217 - tmp_161*tmp_213) + tmp_172*(-tmp_168*tmp_217 - tmp_169*tmp_213) + tmp_180*(-tmp_176*tmp_217 - tmp_177*tmp_213) + tmp_188*(-tmp_184*tmp_217 - tmp_185*tmp_213) + tmp_196*(-tmp_192*tmp_217 - tmp_193*tmp_213) + tmp_204*(-tmp_200*tmp_217 - tmp_201*tmp_213) + tmp_212*(-tmp_208*tmp_217 - tmp_209*tmp_213) + tmp_52*(-tmp_213*tmp_36 - tmp_217*tmp_32) + tmp_60*(-tmp_213*tmp_57 - tmp_217*tmp_56) + tmp_68*(-tmp_213*tmp_65 - tmp_217*tmp_64) + tmp_76*(-tmp_213*tmp_73 - tmp_217*tmp_72) + tmp_84*(-tmp_213*tmp_81 - tmp_217*tmp_80) + tmp_92*(-tmp_213*tmp_89 - tmp_217*tmp_88);
      real_t a_2_2 = tmp_100*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_108*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_116*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_124*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_132*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_140*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_148*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_156*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_164*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_172*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_180*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_188*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_196*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_204*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_212*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_52*(-tmp_214*tmp_36 - tmp_217*tmp_36) + tmp_60*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_68*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_76*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_84*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_92*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_2_3 = tmp_100*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_108*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_116*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_124*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_132*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_140*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_148*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_156*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_164*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_172*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_180*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_188*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_196*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_204*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_212*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_52*(-tmp_215*tmp_36 - tmp_217*tmp_40) + tmp_60*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_68*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_76*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_84*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_92*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_3_0 = tmp_100*(-tmp_218*tmp_99 - tmp_50*tmp_98) + tmp_108*(-tmp_106*tmp_50 - tmp_107*tmp_218) + tmp_116*(-tmp_114*tmp_50 - tmp_115*tmp_218) + tmp_124*(-tmp_122*tmp_50 - tmp_123*tmp_218) + tmp_132*(-tmp_130*tmp_50 - tmp_131*tmp_218) + tmp_140*(-tmp_138*tmp_50 - tmp_139*tmp_218) + tmp_148*(-tmp_146*tmp_50 - tmp_147*tmp_218) + tmp_156*(-tmp_154*tmp_50 - tmp_155*tmp_218) + tmp_164*(-tmp_162*tmp_50 - tmp_163*tmp_218) + tmp_172*(-tmp_170*tmp_50 - tmp_171*tmp_218) + tmp_180*(-tmp_178*tmp_50 - tmp_179*tmp_218) + tmp_188*(-tmp_186*tmp_50 - tmp_187*tmp_218) + tmp_196*(-tmp_194*tmp_50 - tmp_195*tmp_218) + tmp_204*(-tmp_202*tmp_50 - tmp_203*tmp_218) + tmp_212*(-tmp_210*tmp_50 - tmp_211*tmp_218) + tmp_52*(-tmp_218*tmp_41 - tmp_40*tmp_50) + tmp_60*(-tmp_218*tmp_59 - tmp_50*tmp_58) + tmp_68*(-tmp_218*tmp_67 - tmp_50*tmp_66) + tmp_76*(-tmp_218*tmp_75 - tmp_50*tmp_74) + tmp_84*(-tmp_218*tmp_83 - tmp_50*tmp_82) + tmp_92*(-tmp_218*tmp_91 - tmp_50*tmp_90);
      real_t a_3_1 = tmp_100*(-tmp_213*tmp_98 - tmp_218*tmp_96) + tmp_108*(-tmp_104*tmp_218 - tmp_106*tmp_213) + tmp_116*(-tmp_112*tmp_218 - tmp_114*tmp_213) + tmp_124*(-tmp_120*tmp_218 - tmp_122*tmp_213) + tmp_132*(-tmp_128*tmp_218 - tmp_130*tmp_213) + tmp_140*(-tmp_136*tmp_218 - tmp_138*tmp_213) + tmp_148*(-tmp_144*tmp_218 - tmp_146*tmp_213) + tmp_156*(-tmp_152*tmp_218 - tmp_154*tmp_213) + tmp_164*(-tmp_160*tmp_218 - tmp_162*tmp_213) + tmp_172*(-tmp_168*tmp_218 - tmp_170*tmp_213) + tmp_180*(-tmp_176*tmp_218 - tmp_178*tmp_213) + tmp_188*(-tmp_184*tmp_218 - tmp_186*tmp_213) + tmp_196*(-tmp_192*tmp_218 - tmp_194*tmp_213) + tmp_204*(-tmp_200*tmp_218 - tmp_202*tmp_213) + tmp_212*(-tmp_208*tmp_218 - tmp_210*tmp_213) + tmp_52*(-tmp_213*tmp_40 - tmp_218*tmp_32) + tmp_60*(-tmp_213*tmp_58 - tmp_218*tmp_56) + tmp_68*(-tmp_213*tmp_66 - tmp_218*tmp_64) + tmp_76*(-tmp_213*tmp_74 - tmp_218*tmp_72) + tmp_84*(-tmp_213*tmp_82 - tmp_218*tmp_80) + tmp_92*(-tmp_213*tmp_90 - tmp_218*tmp_88);
      real_t a_3_2 = tmp_100*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_108*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_116*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_124*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_132*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_140*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_148*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_156*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_164*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_172*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_180*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_188*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_196*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_204*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_212*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_52*(-tmp_214*tmp_40 - tmp_218*tmp_36) + tmp_60*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_68*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_76*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_84*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_92*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_3_3 = tmp_100*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_108*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_116*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_124*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_132*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_140*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_148*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_156*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_164*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_172*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_180*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_188*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_196*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_204*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_212*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_52*(-tmp_215*tmp_40 - tmp_218*tmp_40) + tmp_60*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_68*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_76*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_84*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_92*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_11 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_11()
: callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g0 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g1( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g1( Point3D( {in_0, in_1, 0} ) );
}
void Scalar_Variable_Coefficient_2D_g0( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g0( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = 1.0 / (tmp_4);
      real_t tmp_6 = 2.0*tmp_5;
      real_t tmp_7 = tmp_0*tmp_6;
      real_t tmp_8 = tmp_2*tmp_6;
      real_t tmp_9 = -tmp_7 - tmp_8;
      real_t tmp_10 = 1.0*tmp_5;
      real_t tmp_11 = tmp_0*tmp_10;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = -tmp_11 - tmp_12;
      real_t tmp_14 = tmp_1*tmp_10;
      real_t tmp_15 = tmp_10*tmp_3;
      real_t tmp_16 = -tmp_14 - tmp_15;
      real_t tmp_17 = 0.5*tmp_5;
      real_t tmp_18 = -tmp_1*tmp_17 - tmp_17*tmp_3;
      real_t tmp_19 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_20 = tmp_19*(tmp_13*tmp_9 + 2*tmp_16*tmp_18);
      real_t tmp_21 = tmp_18*tmp_6;
      real_t tmp_22 = tmp_19*(tmp_1*tmp_21 + tmp_13*tmp_8);
      real_t tmp_23 = tmp_19*(tmp_13*tmp_7 + tmp_21*tmp_3);
      real_t tmp_24 = tmp_19*(tmp_12*tmp_9 + tmp_14*tmp_16);
      real_t tmp_25 = 1.0 / (tmp_4*tmp_4);
      real_t tmp_26 = 2.0*tmp_25;
      real_t tmp_27 = 1.0*tmp_25;
      real_t tmp_28 = tmp_19*((tmp_1*tmp_1)*tmp_27 + (tmp_2*tmp_2)*tmp_26);
      real_t tmp_29 = tmp_19*(tmp_0*tmp_2*tmp_26 + tmp_1*tmp_27*tmp_3);
      real_t tmp_30 = 0.5*tmp_29;
      real_t tmp_31 = tmp_19*(tmp_11*tmp_9 + tmp_15*tmp_16);
      real_t tmp_32 = tmp_19*((tmp_0*tmp_0)*tmp_26 + tmp_27*(tmp_3*tmp_3));
      real_t a_0_0 = 0.5*tmp_20;
      real_t a_0_1 = 0.5*tmp_22;
      real_t a_0_2 = 0.5*tmp_23;
      real_t a_1_0 = 0.5*tmp_24;
      real_t a_1_1 = 0.5*tmp_28;
      real_t a_1_2 = tmp_30;
      real_t a_2_0 = 0.5*tmp_31;
      real_t a_2_1 = tmp_30;
      real_t a_2_2 = 0.5*tmp_32;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_8 = 1.0 / (-tmp_4*tmp_7 + tmp_5*tmp_6);
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_8*(0.046910077030668018*tmp_1 + tmp_9);
      real_t tmp_11 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_12 = tmp_8*(0.046910077030668018*tmp_0 + tmp_11);
      real_t tmp_13 = tmp_10*tmp_4 + tmp_12*tmp_6;
      real_t tmp_14 = tmp_10*tmp_5 + tmp_12*tmp_7;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = 0.5*tmp_8;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_16*tmp_7;
      real_t tmp_19 = 1.0*tmp_8;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = tmp_19*tmp_4;
      real_t tmp_22 = p_affine_10_0*(-tmp_17 - tmp_18) + p_affine_10_1*(-tmp_20 - tmp_21);
      real_t tmp_23 = 2.0*tmp_22;
      real_t tmp_24 = 0.11846344252809471*tmp_2;
      real_t tmp_25 = tmp_8*(0.23076534494715845*tmp_1 + tmp_9);
      real_t tmp_26 = tmp_8*(0.23076534494715845*tmp_0 + tmp_11);
      real_t tmp_27 = tmp_25*tmp_4 + tmp_26*tmp_6;
      real_t tmp_28 = tmp_25*tmp_5 + tmp_26*tmp_7;
      real_t tmp_29 = -tmp_27 - tmp_28 + 1;
      real_t tmp_30 = 0.2393143352496831*tmp_2;
      real_t tmp_31 = tmp_8*(0.5*tmp_1 + tmp_9);
      real_t tmp_32 = tmp_8*(0.5*tmp_0 + tmp_11);
      real_t tmp_33 = tmp_31*tmp_4 + tmp_32*tmp_6;
      real_t tmp_34 = tmp_31*tmp_5 + tmp_32*tmp_7;
      real_t tmp_35 = -tmp_33 - tmp_34 + 1;
      real_t tmp_36 = 0.2844444444444445*tmp_2;
      real_t tmp_37 = tmp_8*(0.7692346550528415*tmp_1 + tmp_9);
      real_t tmp_38 = tmp_8*(0.7692346550528415*tmp_0 + tmp_11);
      real_t tmp_39 = tmp_37*tmp_4 + tmp_38*tmp_6;
      real_t tmp_40 = tmp_37*tmp_5 + tmp_38*tmp_7;
      real_t tmp_41 = -tmp_39 - tmp_40 + 1;
      real_t tmp_42 = 0.2393143352496831*tmp_2;
      real_t tmp_43 = tmp_8*(0.95308992296933193*tmp_1 + tmp_9);
      real_t tmp_44 = tmp_8*(0.95308992296933193*tmp_0 + tmp_11);
      real_t tmp_45 = tmp_4*tmp_43 + tmp_44*tmp_6;
      real_t tmp_46 = tmp_43*tmp_5 + tmp_44*tmp_7;
      real_t tmp_47 = -tmp_45 - tmp_46 + 1;
      real_t tmp_48 = 0.11846344252809471*tmp_2;
      real_t tmp_49 = 1.0*tmp_22;
      real_t tmp_50 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_21;
      real_t tmp_51 = 1.0*tmp_50;
      real_t tmp_52 = tmp_24*(14*tmp_13*tmp_15*tmp_3 - tmp_13*tmp_49 - tmp_15*tmp_51) + tmp_30*(14*tmp_27*tmp_29*tmp_3 - tmp_27*tmp_49 - tmp_29*tmp_51) + tmp_36*(14*tmp_3*tmp_33*tmp_35 - tmp_33*tmp_49 - tmp_35*tmp_51) + tmp_42*(14*tmp_3*tmp_39*tmp_41 - tmp_39*tmp_49 - tmp_41*tmp_51) + tmp_48*(14*tmp_3*tmp_45*tmp_47 - tmp_45*tmp_49 - tmp_47*tmp_51);
      real_t tmp_53 = p_affine_10_0*tmp_18 + p_affine_10_1*tmp_20;
      real_t tmp_54 = 1.0*tmp_53;
      real_t tmp_55 = tmp_24*(14*tmp_14*tmp_15*tmp_3 - tmp_14*tmp_49 - tmp_15*tmp_54) + tmp_30*(14*tmp_28*tmp_29*tmp_3 - tmp_28*tmp_49 - tmp_29*tmp_54) + tmp_36*(14*tmp_3*tmp_34*tmp_35 - tmp_34*tmp_49 - tmp_35*tmp_54) + tmp_42*(14*tmp_3*tmp_40*tmp_41 - tmp_40*tmp_49 - tmp_41*tmp_54) + tmp_48*(14*tmp_3*tmp_46*tmp_47 - tmp_46*tmp_49 - tmp_47*tmp_54);
      real_t tmp_56 = 2.0*tmp_50;
      real_t tmp_57 = tmp_24*(14*tmp_13*tmp_14*tmp_3 - tmp_13*tmp_54 - tmp_14*tmp_51) + tmp_30*(14*tmp_27*tmp_28*tmp_3 - tmp_27*tmp_54 - tmp_28*tmp_51) + tmp_36*(14*tmp_3*tmp_33*tmp_34 - tmp_33*tmp_54 - tmp_34*tmp_51) + tmp_42*(14*tmp_3*tmp_39*tmp_40 - tmp_39*tmp_54 - tmp_40*tmp_51) + tmp_48*(14*tmp_3*tmp_45*tmp_46 - tmp_45*tmp_54 - tmp_46*tmp_51);
      real_t tmp_58 = 2.0*tmp_53;
      real_t a_0_0 = tmp_24*(14*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_23) + tmp_30*(-tmp_23*tmp_29 + 14*(tmp_29*tmp_29)*tmp_3) + tmp_36*(-tmp_23*tmp_35 + 14*tmp_3*(tmp_35*tmp_35)) + tmp_42*(-tmp_23*tmp_41 + 14*tmp_3*(tmp_41*tmp_41)) + tmp_48*(-tmp_23*tmp_47 + 14*tmp_3*(tmp_47*tmp_47));
      real_t a_0_1 = tmp_52;
      real_t a_0_2 = tmp_55;
      real_t a_1_0 = tmp_52;
      real_t a_1_1 = tmp_24*(14*(tmp_13*tmp_13)*tmp_3 - tmp_13*tmp_56) + tmp_30*(14*(tmp_27*tmp_27)*tmp_3 - tmp_27*tmp_56) + tmp_36*(14*tmp_3*(tmp_33*tmp_33) - tmp_33*tmp_56) + tmp_42*(14*tmp_3*(tmp_39*tmp_39) - tmp_39*tmp_56) + tmp_48*(14*tmp_3*(tmp_45*tmp_45) - tmp_45*tmp_56);
      real_t a_1_2 = tmp_57;
      real_t a_2_0 = tmp_55;
      real_t a_2_1 = tmp_57;
      real_t a_2_2 = tmp_24*(14*(tmp_14*tmp_14)*tmp_3 - tmp_14*tmp_58) + tmp_30*(14*(tmp_28*tmp_28)*tmp_3 - tmp_28*tmp_58) + tmp_36*(14*tmp_3*(tmp_34*tmp_34) - tmp_34*tmp_58) + tmp_42*(14*tmp_3*(tmp_40*tmp_40) - tmp_40*tmp_58) + tmp_48*(14*tmp_3*(tmp_46*tmp_46) - tmp_46*tmp_58);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_4 = 1.0 / (-tmp_0*tmp_3 + tmp_1*tmp_2);
      real_t tmp_5 = -p_affine_0_1;
      real_t tmp_6 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_7 = p_affine_6_1 + 0.046910077030668018*tmp_6;
      real_t tmp_8 = tmp_4*(tmp_5 + tmp_7);
      real_t tmp_9 = -p_affine_0_0;
      real_t tmp_10 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_11 = p_affine_6_0 + 0.046910077030668018*tmp_10;
      real_t tmp_12 = tmp_4*(tmp_11 + tmp_9);
      real_t tmp_13 = tmp_0*tmp_8 + tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8 + tmp_12*tmp_3;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_17 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_18 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_19 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_20 = 1.0 / (tmp_16*tmp_17 - tmp_18*tmp_19);
      real_t tmp_21 = 0.5*tmp_20;
      real_t tmp_22 = tmp_16*tmp_21;
      real_t tmp_23 = tmp_19*tmp_21;
      real_t tmp_24 = 1.0*tmp_20;
      real_t tmp_25 = tmp_17*tmp_24;
      real_t tmp_26 = tmp_18*tmp_24;
      real_t tmp_27 = 1.0*p_affine_10_0*(-tmp_22 - tmp_23) + 1.0*p_affine_10_1*(-tmp_25 - tmp_26);
      real_t tmp_28 = 0.5*tmp_4;
      real_t tmp_29 = tmp_2*tmp_28;
      real_t tmp_30 = tmp_28*tmp_3;
      real_t tmp_31 = 1.0*tmp_4;
      real_t tmp_32 = tmp_1*tmp_31;
      real_t tmp_33 = tmp_0*tmp_31;
      real_t tmp_34 = p_affine_10_0*(-tmp_29 - tmp_30) + p_affine_10_1*(-tmp_32 - tmp_33);
      real_t tmp_35 = -p_affine_3_1;
      real_t tmp_36 = tmp_20*(tmp_35 + tmp_7);
      real_t tmp_37 = -p_affine_3_0;
      real_t tmp_38 = tmp_20*(tmp_11 + tmp_37);
      real_t tmp_39 = tmp_16*tmp_38 + tmp_18*tmp_36;
      real_t tmp_40 = tmp_17*tmp_36 + tmp_19*tmp_38;
      real_t tmp_41 = -tmp_39 - tmp_40 + 1;
      real_t tmp_42 = std::abs(std::pow((tmp_10*tmp_10) + (tmp_6*tmp_6), 1.0/2.0));
      real_t tmp_43 = 14/tmp_42;
      real_t tmp_44 = tmp_15*tmp_43;
      real_t tmp_45 = 0.11846344252809471*tmp_42;
      real_t tmp_46 = p_affine_6_1 + 0.23076534494715845*tmp_6;
      real_t tmp_47 = tmp_4*(tmp_46 + tmp_5);
      real_t tmp_48 = p_affine_6_0 + 0.23076534494715845*tmp_10;
      real_t tmp_49 = tmp_4*(tmp_48 + tmp_9);
      real_t tmp_50 = tmp_0*tmp_47 + tmp_2*tmp_49;
      real_t tmp_51 = tmp_1*tmp_47 + tmp_3*tmp_49;
      real_t tmp_52 = -tmp_50 - tmp_51 + 1;
      real_t tmp_53 = tmp_20*(tmp_35 + tmp_46);
      real_t tmp_54 = tmp_20*(tmp_37 + tmp_48);
      real_t tmp_55 = tmp_16*tmp_54 + tmp_18*tmp_53;
      real_t tmp_56 = tmp_17*tmp_53 + tmp_19*tmp_54;
      real_t tmp_57 = -tmp_55 - tmp_56 + 1;
      real_t tmp_58 = tmp_43*tmp_52;
      real_t tmp_59 = 0.2393143352496831*tmp_42;
      real_t tmp_60 = p_affine_6_1 + 0.5*tmp_6;
      real_t tmp_61 = tmp_4*(tmp_5 + tmp_60);
      real_t tmp_62 = p_affine_6_0 + 0.5*tmp_10;
      real_t tmp_63 = tmp_4*(tmp_62 + tmp_9);
      real_t tmp_64 = tmp_0*tmp_61 + tmp_2*tmp_63;
      real_t tmp_65 = tmp_1*tmp_61 + tmp_3*tmp_63;
      real_t tmp_66 = -tmp_64 - tmp_65 + 1;
      real_t tmp_67 = tmp_20*(tmp_35 + tmp_60);
      real_t tmp_68 = tmp_20*(tmp_37 + tmp_62);
      real_t tmp_69 = tmp_16*tmp_68 + tmp_18*tmp_67;
      real_t tmp_70 = tmp_17*tmp_67 + tmp_19*tmp_68;
      real_t tmp_71 = -tmp_69 - tmp_70 + 1;
      real_t tmp_72 = tmp_43*tmp_66;
      real_t tmp_73 = 0.2844444444444445*tmp_42;
      real_t tmp_74 = p_affine_6_1 + 0.7692346550528415*tmp_6;
      real_t tmp_75 = tmp_4*(tmp_5 + tmp_74);
      real_t tmp_76 = p_affine_6_0 + 0.7692346550528415*tmp_10;
      real_t tmp_77 = tmp_4*(tmp_76 + tmp_9);
      real_t tmp_78 = tmp_0*tmp_75 + tmp_2*tmp_77;
      real_t tmp_79 = tmp_1*tmp_75 + tmp_3*tmp_77;
      real_t tmp_80 = -tmp_78 - tmp_79 + 1;
      real_t tmp_81 = tmp_20*(tmp_35 + tmp_74);
      real_t tmp_82 = tmp_20*(tmp_37 + tmp_76);
      real_t tmp_83 = tmp_16*tmp_82 + tmp_18*tmp_81;
      real_t tmp_84 = tmp_17*tmp_81 + tmp_19*tmp_82;
      real_t tmp_85 = -tmp_83 - tmp_84 + 1;
      real_t tmp_86 = tmp_43*tmp_80;
      real_t tmp_87 = 0.2393143352496831*tmp_42;
      real_t tmp_88 = p_affine_6_1 + 0.95308992296933193*tmp_6;
      real_t tmp_89 = tmp_4*(tmp_5 + tmp_88);
      real_t tmp_90 = p_affine_6_0 + 0.95308992296933193*tmp_10;
      real_t tmp_91 = tmp_4*(tmp_9 + tmp_90);
      real_t tmp_92 = tmp_0*tmp_89 + tmp_2*tmp_91;
      real_t tmp_93 = tmp_1*tmp_89 + tmp_3*tmp_91;
      real_t tmp_94 = -tmp_92 - tmp_93 + 1;
      real_t tmp_95 = tmp_20*(tmp_35 + tmp_88);
      real_t tmp_96 = tmp_20*(tmp_37 + tmp_90);
      real_t tmp_97 = tmp_16*tmp_96 + tmp_18*tmp_95;
      real_t tmp_98 = tmp_17*tmp_95 + tmp_19*tmp_96;
      real_t tmp_99 = -tmp_97 - tmp_98 + 1;
      real_t tmp_100 = tmp_43*tmp_94;
      real_t tmp_101 = 0.11846344252809471*tmp_42;
      real_t tmp_102 = 1.0*p_affine_10_0*tmp_22 + 1.0*p_affine_10_1*tmp_26;
      real_t tmp_103 = 1.0*p_affine_10_0*tmp_23 + 1.0*p_affine_10_1*tmp_25;
      real_t tmp_104 = p_affine_10_0*tmp_29 + p_affine_10_1*tmp_33;
      real_t tmp_105 = tmp_13*tmp_43;
      real_t tmp_106 = tmp_43*tmp_50;
      real_t tmp_107 = tmp_43*tmp_64;
      real_t tmp_108 = tmp_43*tmp_78;
      real_t tmp_109 = tmp_43*tmp_92;
      real_t tmp_110 = p_affine_10_0*tmp_30 + p_affine_10_1*tmp_32;
      real_t tmp_111 = tmp_14*tmp_43;
      real_t tmp_112 = tmp_43*tmp_51;
      real_t tmp_113 = tmp_43*tmp_65;
      real_t tmp_114 = tmp_43*tmp_79;
      real_t tmp_115 = tmp_43*tmp_93;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_99 - tmp_27*tmp_94 + tmp_34*tmp_99) + tmp_45*(-tmp_15*tmp_27 + tmp_34*tmp_41 - tmp_41*tmp_44) + tmp_59*(-tmp_27*tmp_52 + tmp_34*tmp_57 - tmp_57*tmp_58) + tmp_73*(-tmp_27*tmp_66 + tmp_34*tmp_71 - tmp_71*tmp_72) + tmp_87*(-tmp_27*tmp_80 + tmp_34*tmp_85 - tmp_85*tmp_86);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_97 - tmp_102*tmp_94 + tmp_34*tmp_97) + tmp_45*(-tmp_102*tmp_15 + tmp_34*tmp_39 - tmp_39*tmp_44) + tmp_59*(-tmp_102*tmp_52 + tmp_34*tmp_55 - tmp_55*tmp_58) + tmp_73*(-tmp_102*tmp_66 + tmp_34*tmp_69 - tmp_69*tmp_72) + tmp_87*(-tmp_102*tmp_80 + tmp_34*tmp_83 - tmp_83*tmp_86);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_98 - tmp_103*tmp_94 + tmp_34*tmp_98) + tmp_45*(-tmp_103*tmp_15 + tmp_34*tmp_40 - tmp_40*tmp_44) + tmp_59*(-tmp_103*tmp_52 + tmp_34*tmp_56 - tmp_56*tmp_58) + tmp_73*(-tmp_103*tmp_66 + tmp_34*tmp_70 - tmp_70*tmp_72) + tmp_87*(-tmp_103*tmp_80 + tmp_34*tmp_84 - tmp_84*tmp_86);
      real_t a_1_0 = tmp_101*(tmp_104*tmp_99 - tmp_109*tmp_99 - tmp_27*tmp_92) + tmp_45*(tmp_104*tmp_41 - tmp_105*tmp_41 - tmp_13*tmp_27) + tmp_59*(tmp_104*tmp_57 - tmp_106*tmp_57 - tmp_27*tmp_50) + tmp_73*(tmp_104*tmp_71 - tmp_107*tmp_71 - tmp_27*tmp_64) + tmp_87*(tmp_104*tmp_85 - tmp_108*tmp_85 - tmp_27*tmp_78);
      real_t a_1_1 = tmp_101*(-tmp_102*tmp_92 + tmp_104*tmp_97 - tmp_109*tmp_97) + tmp_45*(-tmp_102*tmp_13 + tmp_104*tmp_39 - tmp_105*tmp_39) + tmp_59*(-tmp_102*tmp_50 + tmp_104*tmp_55 - tmp_106*tmp_55) + tmp_73*(-tmp_102*tmp_64 + tmp_104*tmp_69 - tmp_107*tmp_69) + tmp_87*(-tmp_102*tmp_78 + tmp_104*tmp_83 - tmp_108*tmp_83);
      real_t a_1_2 = tmp_101*(-tmp_103*tmp_92 + tmp_104*tmp_98 - tmp_109*tmp_98) + tmp_45*(-tmp_103*tmp_13 + tmp_104*tmp_40 - tmp_105*tmp_40) + tmp_59*(-tmp_103*tmp_50 + tmp_104*tmp_56 - tmp_106*tmp_56) + tmp_73*(-tmp_103*tmp_64 + tmp_104*tmp_70 - tmp_107*tmp_70) + tmp_87*(-tmp_103*tmp_78 + tmp_104*tmp_84 - tmp_108*tmp_84);
      real_t a_2_0 = tmp_101*(tmp_110*tmp_99 - tmp_115*tmp_99 - tmp_27*tmp_93) + tmp_45*(tmp_110*tmp_41 - tmp_111*tmp_41 - tmp_14*tmp_27) + tmp_59*(tmp_110*tmp_57 - tmp_112*tmp_57 - tmp_27*tmp_51) + tmp_73*(tmp_110*tmp_71 - tmp_113*tmp_71 - tmp_27*tmp_65) + tmp_87*(tmp_110*tmp_85 - tmp_114*tmp_85 - tmp_27*tmp_79);
      real_t a_2_1 = tmp_101*(-tmp_102*tmp_93 + tmp_110*tmp_97 - tmp_115*tmp_97) + tmp_45*(-tmp_102*tmp_14 + tmp_110*tmp_39 - tmp_111*tmp_39) + tmp_59*(-tmp_102*tmp_51 + tmp_110*tmp_55 - tmp_112*tmp_55) + tmp_73*(-tmp_102*tmp_65 + tmp_110*tmp_69 - tmp_113*tmp_69) + tmp_87*(-tmp_102*tmp_79 + tmp_110*tmp_83 - tmp_114*tmp_83);
      real_t a_2_2 = tmp_101*(-tmp_103*tmp_93 + tmp_110*tmp_98 - tmp_115*tmp_98) + tmp_45*(-tmp_103*tmp_14 + tmp_110*tmp_40 - tmp_111*tmp_40) + tmp_59*(-tmp_103*tmp_51 + tmp_110*tmp_56 - tmp_112*tmp_56) + tmp_73*(-tmp_103*tmp_65 + tmp_110*tmp_70 - tmp_113*tmp_70) + tmp_87*(-tmp_103*tmp_79 + tmp_110*tmp_84 - tmp_114*tmp_84);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_8 = 1.0 / (-tmp_4*tmp_7 + tmp_5*tmp_6);
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_8*(0.046910077030668018*tmp_1 + tmp_9);
      real_t tmp_11 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_12 = tmp_8*(0.046910077030668018*tmp_0 + tmp_11);
      real_t tmp_13 = tmp_10*tmp_4 + tmp_12*tmp_6;
      real_t tmp_14 = tmp_10*tmp_5 + tmp_12*tmp_7;
      real_t tmp_15 = -tmp_13 - tmp_14 + 1;
      real_t tmp_16 = 0.5*tmp_8;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_16*tmp_7;
      real_t tmp_19 = 1.0*tmp_8;
      real_t tmp_20 = tmp_19*tmp_5;
      real_t tmp_21 = tmp_19*tmp_4;
      real_t tmp_22 = p_affine_10_0*(-tmp_17 - tmp_18) + p_affine_10_1*(-tmp_20 - tmp_21);
      real_t tmp_23 = 2*tmp_22;
      real_t tmp_24 = 2*tmp_2;
      real_t tmp_25 = 0.11846344252809471*tmp_24;
      real_t tmp_26 = tmp_8*(0.23076534494715845*tmp_1 + tmp_9);
      real_t tmp_27 = tmp_8*(0.23076534494715845*tmp_0 + tmp_11);
      real_t tmp_28 = tmp_26*tmp_4 + tmp_27*tmp_6;
      real_t tmp_29 = tmp_26*tmp_5 + tmp_27*tmp_7;
      real_t tmp_30 = -tmp_28 - tmp_29 + 1;
      real_t tmp_31 = 0.2393143352496831*tmp_24;
      real_t tmp_32 = tmp_8*(0.5*tmp_1 + tmp_9);
      real_t tmp_33 = tmp_8*(0.5*tmp_0 + tmp_11);
      real_t tmp_34 = tmp_32*tmp_4 + tmp_33*tmp_6;
      real_t tmp_35 = tmp_32*tmp_5 + tmp_33*tmp_7;
      real_t tmp_36 = -tmp_34 - tmp_35 + 1;
      real_t tmp_37 = 0.2844444444444445*tmp_24;
      real_t tmp_38 = tmp_8*(0.7692346550528415*tmp_1 + tmp_9);
      real_t tmp_39 = tmp_8*(0.7692346550528415*tmp_0 + tmp_11);
      real_t tmp_40 = tmp_38*tmp_4 + tmp_39*tmp_6;
      real_t tmp_41 = tmp_38*tmp_5 + tmp_39*tmp_7;
      real_t tmp_42 = -tmp_40 - tmp_41 + 1;
      real_t tmp_43 = 0.2393143352496831*tmp_24;
      real_t tmp_44 = tmp_8*(0.95308992296933193*tmp_1 + tmp_9);
      real_t tmp_45 = tmp_8*(0.95308992296933193*tmp_0 + tmp_11);
      real_t tmp_46 = tmp_4*tmp_44 + tmp_45*tmp_6;
      real_t tmp_47 = tmp_44*tmp_5 + tmp_45*tmp_7;
      real_t tmp_48 = -tmp_46 - tmp_47 + 1;
      real_t tmp_49 = 0.11846344252809471*tmp_24;
      real_t tmp_50 = p_affine_10_0*tmp_17 + p_affine_10_1*tmp_21;
      real_t tmp_51 = tmp_25*(7*tmp_13*tmp_15*tmp_3 - tmp_13*tmp_22 - tmp_15*tmp_50) + tmp_31*(-tmp_22*tmp_28 + 7*tmp_28*tmp_3*tmp_30 - tmp_30*tmp_50) + tmp_37*(-tmp_22*tmp_34 + 7*tmp_3*tmp_34*tmp_36 - tmp_36*tmp_50) + tmp_43*(-tmp_22*tmp_40 + 7*tmp_3*tmp_40*tmp_42 - tmp_42*tmp_50) + tmp_49*(-tmp_22*tmp_46 + 7*tmp_3*tmp_46*tmp_48 - tmp_48*tmp_50);
      real_t tmp_52 = p_affine_10_0*tmp_18 + p_affine_10_1*tmp_20;
      real_t tmp_53 = tmp_25*(7*tmp_14*tmp_15*tmp_3 - tmp_14*tmp_22 - tmp_15*tmp_52) + tmp_31*(-tmp_22*tmp_29 + 7*tmp_29*tmp_3*tmp_30 - tmp_30*tmp_52) + tmp_37*(-tmp_22*tmp_35 + 7*tmp_3*tmp_35*tmp_36 - tmp_36*tmp_52) + tmp_43*(-tmp_22*tmp_41 + 7*tmp_3*tmp_41*tmp_42 - tmp_42*tmp_52) + tmp_49*(-tmp_22*tmp_47 + 7*tmp_3*tmp_47*tmp_48 - tmp_48*tmp_52);
      real_t tmp_54 = 2*tmp_50;
      real_t tmp_55 = tmp_25*(7*tmp_13*tmp_14*tmp_3 - tmp_13*tmp_52 - tmp_14*tmp_50) + tmp_31*(7*tmp_28*tmp_29*tmp_3 - tmp_28*tmp_52 - tmp_29*tmp_50) + tmp_37*(7*tmp_3*tmp_34*tmp_35 - tmp_34*tmp_52 - tmp_35*tmp_50) + tmp_43*(7*tmp_3*tmp_40*tmp_41 - tmp_40*tmp_52 - tmp_41*tmp_50) + tmp_49*(7*tmp_3*tmp_46*tmp_47 - tmp_46*tmp_52 - tmp_47*tmp_50);
      real_t tmp_56 = 2*tmp_52;
      real_t a_0_0 = tmp_25*(7*(tmp_15*tmp_15)*tmp_3 - tmp_15*tmp_23) + tmp_31*(-tmp_23*tmp_30 + 7*tmp_3*(tmp_30*tmp_30)) + tmp_37*(-tmp_23*tmp_36 + 7*tmp_3*(tmp_36*tmp_36)) + tmp_43*(-tmp_23*tmp_42 + 7*tmp_3*(tmp_42*tmp_42)) + tmp_49*(-tmp_23*tmp_48 + 7*tmp_3*(tmp_48*tmp_48));
      real_t a_0_1 = tmp_51;
      real_t a_0_2 = tmp_53;
      real_t a_1_0 = tmp_51;
      real_t a_1_1 = tmp_25*(7*(tmp_13*tmp_13)*tmp_3 - tmp_13*tmp_54) + tmp_31*(7*(tmp_28*tmp_28)*tmp_3 - tmp_28*tmp_54) + tmp_37*(7*tmp_3*(tmp_34*tmp_34) - tmp_34*tmp_54) + tmp_43*(7*tmp_3*(tmp_40*tmp_40) - tmp_40*tmp_54) + tmp_49*(7*tmp_3*(tmp_46*tmp_46) - tmp_46*tmp_54);
      real_t a_1_2 = tmp_55;
      real_t a_2_0 = tmp_53;
      real_t a_2_1 = tmp_55;
      real_t a_2_2 = tmp_25*(7*(tmp_14*tmp_14)*tmp_3 - tmp_14*tmp_56) + tmp_31*(7*(tmp_29*tmp_29)*tmp_3 - tmp_29*tmp_56) + tmp_37*(7*tmp_3*(tmp_35*tmp_35) - tmp_35*tmp_56) + tmp_43*(7*tmp_3*(tmp_41*tmp_41) - tmp_41*tmp_56) + tmp_49*(7*tmp_3*(tmp_47*tmp_47) - tmp_47*tmp_56);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g1_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id9 = 0;
      Scalar_Variable_Coefficient_2D_g1( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id0 );
      Scalar_Variable_Coefficient_2D_g0( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id1 );
      Scalar_Variable_Coefficient_2D_g1( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id2 );
      Scalar_Variable_Coefficient_2D_g0( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id3 );
      Scalar_Variable_Coefficient_2D_g1( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id4 );
      Scalar_Variable_Coefficient_2D_g0( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id5 );
      Scalar_Variable_Coefficient_2D_g1( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id6 );
      Scalar_Variable_Coefficient_2D_g0( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id7 );
      Scalar_Variable_Coefficient_2D_g1( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id8 );
      Scalar_Variable_Coefficient_2D_g0( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id9 );
      real_t tmp_0 = Scalar_Variable_Coefficient_2D_g0_out0_id1*p_affine_10_1;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_5 = 1.0 / (tmp_1*tmp_2 - tmp_3*tmp_4);
      real_t tmp_6 = 0.5*tmp_5;
      real_t tmp_7 = tmp_1*tmp_6;
      real_t tmp_8 = tmp_4*tmp_6;
      real_t tmp_9 = -tmp_7 - tmp_8;
      real_t tmp_10 = 2*tmp_9;
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_13 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_12*tmp_12), 1.0/2.0));
      real_t tmp_14 = 1.0 / (tmp_13);
      real_t tmp_15 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_16 = tmp_5*(0.046910077030668018*tmp_12 + tmp_15);
      real_t tmp_17 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_18 = tmp_5*(0.046910077030668018*tmp_11 + tmp_17);
      real_t tmp_19 = tmp_1*tmp_18 + tmp_16*tmp_3;
      real_t tmp_20 = tmp_16*tmp_2 + tmp_18*tmp_4;
      real_t tmp_21 = 1.0*tmp_5;
      real_t tmp_22 = tmp_2*tmp_21;
      real_t tmp_23 = tmp_21*tmp_3;
      real_t tmp_24 = p_affine_10_0*tmp_9 + p_affine_10_1*(-tmp_22 - tmp_23);
      real_t tmp_25 = 0.11846344252809471*tmp_13;
      real_t tmp_26 = p_affine_10_1*tmp_10;
      real_t tmp_27 = tmp_5*(0.23076534494715845*tmp_12 + tmp_15);
      real_t tmp_28 = tmp_5*(0.23076534494715845*tmp_11 + tmp_17);
      real_t tmp_29 = tmp_1*tmp_28 + tmp_27*tmp_3;
      real_t tmp_30 = tmp_2*tmp_27 + tmp_28*tmp_4;
      real_t tmp_31 = 0.2393143352496831*tmp_13;
      real_t tmp_32 = tmp_5*(0.5*tmp_12 + tmp_15);
      real_t tmp_33 = tmp_5*(0.5*tmp_11 + tmp_17);
      real_t tmp_34 = tmp_1*tmp_33 + tmp_3*tmp_32;
      real_t tmp_35 = tmp_2*tmp_32 + tmp_33*tmp_4;
      real_t tmp_36 = 0.2844444444444445*tmp_13;
      real_t tmp_37 = tmp_5*(0.7692346550528415*tmp_12 + tmp_15);
      real_t tmp_38 = tmp_5*(0.7692346550528415*tmp_11 + tmp_17);
      real_t tmp_39 = tmp_1*tmp_38 + tmp_3*tmp_37;
      real_t tmp_40 = tmp_2*tmp_37 + tmp_38*tmp_4;
      real_t tmp_41 = 0.2393143352496831*tmp_13;
      real_t tmp_42 = tmp_5*(0.95308992296933193*tmp_12 + tmp_15);
      real_t tmp_43 = tmp_5*(0.95308992296933193*tmp_11 + tmp_17);
      real_t tmp_44 = tmp_1*tmp_43 + tmp_3*tmp_42;
      real_t tmp_45 = tmp_2*tmp_42 + tmp_4*tmp_43;
      real_t tmp_46 = 0.11846344252809471*tmp_13;
      real_t tmp_47 = tmp_1*tmp_21;
      real_t tmp_48 = p_affine_10_0*tmp_7 + p_affine_10_1*tmp_23;
      real_t tmp_49 = p_affine_10_1*tmp_47;
      real_t tmp_50 = tmp_21*tmp_4;
      real_t tmp_51 = p_affine_10_0*tmp_8 + p_affine_10_1*tmp_22;
      real_t tmp_52 = p_affine_10_1*tmp_50;
      real_t a_0_0 = tmp_25*(2*Scalar_Variable_Coefficient_2D_g1_out0_id0*(7*tmp_14*(-tmp_19 - tmp_20 + 1) - tmp_24) - tmp_0*tmp_10) + tmp_31*(-Scalar_Variable_Coefficient_2D_g0_out0_id3*tmp_26 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id2*(7*tmp_14*(-tmp_29 - tmp_30 + 1) - tmp_24)) + tmp_36*(-Scalar_Variable_Coefficient_2D_g0_out0_id5*tmp_26 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id4*(7*tmp_14*(-tmp_34 - tmp_35 + 1) - tmp_24)) + tmp_41*(-Scalar_Variable_Coefficient_2D_g0_out0_id7*tmp_26 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id6*(7*tmp_14*(-tmp_39 - tmp_40 + 1) - tmp_24)) + tmp_46*(-Scalar_Variable_Coefficient_2D_g0_out0_id9*tmp_26 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id8*(7*tmp_14*(-tmp_44 - tmp_45 + 1) - tmp_24));
      real_t a_1_0 = tmp_25*(2*Scalar_Variable_Coefficient_2D_g1_out0_id0*(7*tmp_14*tmp_19 - tmp_48) - tmp_0*tmp_47) + tmp_31*(-Scalar_Variable_Coefficient_2D_g0_out0_id3*tmp_49 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id2*(7*tmp_14*tmp_29 - tmp_48)) + tmp_36*(-Scalar_Variable_Coefficient_2D_g0_out0_id5*tmp_49 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id4*(7*tmp_14*tmp_34 - tmp_48)) + tmp_41*(-Scalar_Variable_Coefficient_2D_g0_out0_id7*tmp_49 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id6*(7*tmp_14*tmp_39 - tmp_48)) + tmp_46*(-Scalar_Variable_Coefficient_2D_g0_out0_id9*tmp_49 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id8*(7*tmp_14*tmp_44 - tmp_48));
      real_t a_2_0 = tmp_25*(2*Scalar_Variable_Coefficient_2D_g1_out0_id0*(7*tmp_14*tmp_20 - tmp_51) - tmp_0*tmp_50) + tmp_31*(-Scalar_Variable_Coefficient_2D_g0_out0_id3*tmp_52 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id2*(7*tmp_14*tmp_30 - tmp_51)) + tmp_36*(-Scalar_Variable_Coefficient_2D_g0_out0_id5*tmp_52 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id4*(7*tmp_14*tmp_35 - tmp_51)) + tmp_41*(-Scalar_Variable_Coefficient_2D_g0_out0_id7*tmp_52 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id6*(7*tmp_14*tmp_40 - tmp_51)) + tmp_46*(-Scalar_Variable_Coefficient_2D_g0_out0_id9*tmp_52 + 2*Scalar_Variable_Coefficient_2D_g1_out0_id8*(7*tmp_14*tmp_45 - tmp_51));
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g1_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id20 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id21 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id22 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id23 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id24 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id25 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id26 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id27 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id28 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id29 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id30 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id31 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id32 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id33 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id34 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id35 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id36 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id37 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id38 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id39 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id40 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id41 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id42 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id43 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id44 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id45 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id46 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id47 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id48 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id49 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id50 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id51 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id52 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id53 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id54 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id55 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id56 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id57 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id58 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id59 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id60 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id61 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id62 = 0;
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id0 );
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id1 );
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id2 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id3 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id4 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id5 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id6 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id7 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id8 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id9 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id10 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id11 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id12 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id13 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id14 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id15 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id16 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id17 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id18 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id19 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id20 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id21 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id22 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id23 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id24 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id25 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id26 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id27 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id28 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id29 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id30 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id31 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id32 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id33 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id34 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id35 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id36 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id37 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id38 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id39 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id40 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id41 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id42 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id43 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id44 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id45 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id46 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id47 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id48 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id49 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id50 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id51 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id52 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id53 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id54 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id55 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id56 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id57 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id58 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id59 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id60 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id61 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id62 );
      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = 0.5*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = -tmp_13 + tmp_9;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = 2*p_affine_13_1;
      real_t tmp_24 = tmp_22*tmp_23;
      real_t tmp_25 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_30 = tmp_16*tmp_29;
      real_t tmp_31 = -tmp_26 - tmp_28 - tmp_30;
      real_t tmp_32 = tmp_23*tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_35 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_36 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_37 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_38 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_39 = (std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)*std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)) + (std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)*std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)) + (std::abs(tmp_34*tmp_38 - tmp_35*tmp_37)*std::abs(tmp_34*tmp_38 - tmp_35*tmp_37));
      real_t tmp_40 = std::pow(tmp_39, -0.25);
      real_t tmp_41 = -tmp_37;
      real_t tmp_42 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_43 = tmp_15*(0.93718850182767688*tmp_38 + 0.031405749086161582*tmp_41 + tmp_42);
      real_t tmp_44 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_45 = -tmp_34;
      real_t tmp_46 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_47 = tmp_15*(0.93718850182767688*tmp_35 + 0.031405749086161582*tmp_45 + tmp_46);
      real_t tmp_48 = -tmp_36;
      real_t tmp_49 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_50 = tmp_15*(0.93718850182767688*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_51 = tmp_20*tmp_50 + tmp_29*tmp_43 + tmp_44*tmp_47;
      real_t tmp_52 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_53 = tmp_18*tmp_50 + tmp_27*tmp_43 + tmp_47*tmp_52;
      real_t tmp_54 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_55 = tmp_25*tmp_43 + tmp_47*tmp_54 + tmp_50*tmp_6;
      real_t tmp_56 = 1.0*tmp_15;
      real_t tmp_57 = tmp_54*tmp_56;
      real_t tmp_58 = tmp_52*tmp_56;
      real_t tmp_59 = tmp_44*tmp_56;
      real_t tmp_60 = p_affine_13_0*tmp_22 + p_affine_13_1*(-tmp_57 - tmp_58 - tmp_59) + p_affine_13_2*tmp_31;
      real_t tmp_61 = 1.0*std::pow(tmp_39, 1.0/2.0);
      real_t tmp_62 = 0.0068572537431980923*tmp_61;
      real_t tmp_63 = tmp_15*(0.60796128279561268*tmp_38 + 0.19601935860219369*tmp_41 + tmp_42);
      real_t tmp_64 = tmp_15*(0.60796128279561268*tmp_35 + 0.19601935860219369*tmp_45 + tmp_46);
      real_t tmp_65 = tmp_15*(0.60796128279561268*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_66 = tmp_20*tmp_65 + tmp_29*tmp_63 + tmp_44*tmp_64;
      real_t tmp_67 = tmp_18*tmp_65 + tmp_27*tmp_63 + tmp_52*tmp_64;
      real_t tmp_68 = tmp_25*tmp_63 + tmp_54*tmp_64 + tmp_6*tmp_65;
      real_t tmp_69 = 0.037198804536718075*tmp_61;
      real_t tmp_70 = tmp_15*(0.039308471900058539*tmp_38 + 0.37605877282253791*tmp_41 + tmp_42);
      real_t tmp_71 = tmp_15*(0.039308471900058539*tmp_35 + 0.37605877282253791*tmp_45 + tmp_46);
      real_t tmp_72 = tmp_15*(0.039308471900058539*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_73 = tmp_20*tmp_72 + tmp_29*tmp_70 + tmp_44*tmp_71;
      real_t tmp_74 = tmp_18*tmp_72 + tmp_27*tmp_70 + tmp_52*tmp_71;
      real_t tmp_75 = tmp_25*tmp_70 + tmp_54*tmp_71 + tmp_6*tmp_72;
      real_t tmp_76 = 0.020848748529055869*tmp_61;
      real_t tmp_77 = tmp_15*(0.1711304259088916*tmp_38 + 0.78764240869137092*tmp_41 + tmp_42);
      real_t tmp_78 = tmp_15*(0.1711304259088916*tmp_35 + 0.78764240869137092*tmp_45 + tmp_46);
      real_t tmp_79 = tmp_15*(0.1711304259088916*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_80 = tmp_20*tmp_79 + tmp_29*tmp_77 + tmp_44*tmp_78;
      real_t tmp_81 = tmp_18*tmp_79 + tmp_27*tmp_77 + tmp_52*tmp_78;
      real_t tmp_82 = tmp_25*tmp_77 + tmp_54*tmp_78 + tmp_6*tmp_79;
      real_t tmp_83 = 0.019202922745021479*tmp_61;
      real_t tmp_84 = tmp_15*(0.37605877282253791*tmp_38 + 0.58463275527740355*tmp_41 + tmp_42);
      real_t tmp_85 = tmp_15*(0.37605877282253791*tmp_35 + 0.58463275527740355*tmp_45 + tmp_46);
      real_t tmp_86 = tmp_15*(0.37605877282253791*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_87 = tmp_20*tmp_86 + tmp_29*tmp_84 + tmp_44*tmp_85;
      real_t tmp_88 = tmp_18*tmp_86 + tmp_27*tmp_84 + tmp_52*tmp_85;
      real_t tmp_89 = tmp_25*tmp_84 + tmp_54*tmp_85 + tmp_6*tmp_86;
      real_t tmp_90 = 0.020848748529055869*tmp_61;
      real_t tmp_91 = tmp_15*(0.78764240869137092*tmp_38 + 0.041227165399737475*tmp_41 + tmp_42);
      real_t tmp_92 = tmp_15*(0.78764240869137092*tmp_35 + 0.041227165399737475*tmp_45 + tmp_46);
      real_t tmp_93 = tmp_15*(0.78764240869137092*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_94 = tmp_20*tmp_93 + tmp_29*tmp_91 + tmp_44*tmp_92;
      real_t tmp_95 = tmp_18*tmp_93 + tmp_27*tmp_91 + tmp_52*tmp_92;
      real_t tmp_96 = tmp_25*tmp_91 + tmp_54*tmp_92 + tmp_6*tmp_93;
      real_t tmp_97 = 0.019202922745021479*tmp_61;
      real_t tmp_98 = tmp_15*(0.58463275527740355*tmp_38 + 0.039308471900058539*tmp_41 + tmp_42);
      real_t tmp_99 = tmp_15*(0.58463275527740355*tmp_35 + 0.039308471900058539*tmp_45 + tmp_46);
      real_t tmp_100 = tmp_15*(0.58463275527740355*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_101 = tmp_100*tmp_20 + tmp_29*tmp_98 + tmp_44*tmp_99;
      real_t tmp_102 = tmp_100*tmp_18 + tmp_27*tmp_98 + tmp_52*tmp_99;
      real_t tmp_103 = tmp_100*tmp_6 + tmp_25*tmp_98 + tmp_54*tmp_99;
      real_t tmp_104 = 0.020848748529055869*tmp_61;
      real_t tmp_105 = tmp_15*(0.041227165399737475*tmp_38 + 0.78764240869137092*tmp_41 + tmp_42);
      real_t tmp_106 = tmp_15*(0.041227165399737475*tmp_35 + 0.78764240869137092*tmp_45 + tmp_46);
      real_t tmp_107 = tmp_15*(0.041227165399737475*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_108 = tmp_105*tmp_29 + tmp_106*tmp_44 + tmp_107*tmp_20;
      real_t tmp_109 = tmp_105*tmp_27 + tmp_106*tmp_52 + tmp_107*tmp_18;
      real_t tmp_110 = tmp_105*tmp_25 + tmp_106*tmp_54 + tmp_107*tmp_6;
      real_t tmp_111 = 0.019202922745021479*tmp_61;
      real_t tmp_112 = tmp_15*(0.039308471900058539*tmp_38 + 0.58463275527740355*tmp_41 + tmp_42);
      real_t tmp_113 = tmp_15*(0.039308471900058539*tmp_35 + 0.58463275527740355*tmp_45 + tmp_46);
      real_t tmp_114 = tmp_15*(0.039308471900058539*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_115 = tmp_112*tmp_29 + tmp_113*tmp_44 + tmp_114*tmp_20;
      real_t tmp_116 = tmp_112*tmp_27 + tmp_113*tmp_52 + tmp_114*tmp_18;
      real_t tmp_117 = tmp_112*tmp_25 + tmp_113*tmp_54 + tmp_114*tmp_6;
      real_t tmp_118 = 0.020848748529055869*tmp_61;
      real_t tmp_119 = tmp_15*(0.78764240869137092*tmp_38 + 0.1711304259088916*tmp_41 + tmp_42);
      real_t tmp_120 = tmp_15*(0.78764240869137092*tmp_35 + 0.1711304259088916*tmp_45 + tmp_46);
      real_t tmp_121 = tmp_15*(0.78764240869137092*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_122 = tmp_119*tmp_29 + tmp_120*tmp_44 + tmp_121*tmp_20;
      real_t tmp_123 = tmp_119*tmp_27 + tmp_120*tmp_52 + tmp_121*tmp_18;
      real_t tmp_124 = tmp_119*tmp_25 + tmp_120*tmp_54 + tmp_121*tmp_6;
      real_t tmp_125 = 0.019202922745021479*tmp_61;
      real_t tmp_126 = tmp_15*(0.58463275527740355*tmp_38 + 0.37605877282253791*tmp_41 + tmp_42);
      real_t tmp_127 = tmp_15*(0.58463275527740355*tmp_35 + 0.37605877282253791*tmp_45 + tmp_46);
      real_t tmp_128 = tmp_15*(0.58463275527740355*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_129 = tmp_126*tmp_29 + tmp_127*tmp_44 + tmp_128*tmp_20;
      real_t tmp_130 = tmp_126*tmp_27 + tmp_127*tmp_52 + tmp_128*tmp_18;
      real_t tmp_131 = tmp_126*tmp_25 + tmp_127*tmp_54 + tmp_128*tmp_6;
      real_t tmp_132 = 0.020848748529055869*tmp_61;
      real_t tmp_133 = tmp_15*(0.1711304259088916*tmp_38 + 0.041227165399737475*tmp_41 + tmp_42);
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_35 + 0.041227165399737475*tmp_45 + tmp_46);
      real_t tmp_135 = tmp_15*(0.1711304259088916*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_136 = tmp_133*tmp_29 + tmp_134*tmp_44 + tmp_135*tmp_20;
      real_t tmp_137 = tmp_133*tmp_27 + tmp_134*tmp_52 + tmp_135*tmp_18;
      real_t tmp_138 = tmp_133*tmp_25 + tmp_134*tmp_54 + tmp_135*tmp_6;
      real_t tmp_139 = 0.019202922745021479*tmp_61;
      real_t tmp_140 = tmp_15*(0.19107600050469298*tmp_38 + 0.40446199974765351*tmp_41 + tmp_42);
      real_t tmp_141 = tmp_15*(0.19107600050469298*tmp_35 + 0.40446199974765351*tmp_45 + tmp_46);
      real_t tmp_142 = tmp_15*(0.19107600050469298*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_143 = tmp_140*tmp_29 + tmp_141*tmp_44 + tmp_142*tmp_20;
      real_t tmp_144 = tmp_140*tmp_27 + tmp_141*tmp_52 + tmp_142*tmp_18;
      real_t tmp_145 = tmp_140*tmp_25 + tmp_141*tmp_54 + tmp_142*tmp_6;
      real_t tmp_146 = 0.042507265838595799*tmp_61;
      real_t tmp_147 = tmp_15*(0.37605877282253791*tmp_38 + 0.039308471900058539*tmp_41 + tmp_42);
      real_t tmp_148 = tmp_15*(0.37605877282253791*tmp_35 + 0.039308471900058539*tmp_45 + tmp_46);
      real_t tmp_149 = tmp_15*(0.37605877282253791*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_150 = tmp_147*tmp_29 + tmp_148*tmp_44 + tmp_149*tmp_20;
      real_t tmp_151 = tmp_147*tmp_27 + tmp_148*tmp_52 + tmp_149*tmp_18;
      real_t tmp_152 = tmp_147*tmp_25 + tmp_148*tmp_54 + tmp_149*tmp_6;
      real_t tmp_153 = 0.020848748529055869*tmp_61;
      real_t tmp_154 = tmp_15*(0.031405749086161582*tmp_38 + 0.93718850182767688*tmp_41 + tmp_42);
      real_t tmp_155 = tmp_15*(0.031405749086161582*tmp_35 + 0.93718850182767688*tmp_45 + tmp_46);
      real_t tmp_156 = tmp_15*(0.031405749086161582*tmp_33 + 0.93718850182767688*tmp_48 + tmp_49);
      real_t tmp_157 = tmp_154*tmp_29 + tmp_155*tmp_44 + tmp_156*tmp_20;
      real_t tmp_158 = tmp_154*tmp_27 + tmp_155*tmp_52 + tmp_156*tmp_18;
      real_t tmp_159 = tmp_154*tmp_25 + tmp_155*tmp_54 + tmp_156*tmp_6;
      real_t tmp_160 = 0.0068572537431980923*tmp_61;
      real_t tmp_161 = tmp_15*(0.19601935860219369*tmp_38 + 0.60796128279561268*tmp_41 + tmp_42);
      real_t tmp_162 = tmp_15*(0.19601935860219369*tmp_35 + 0.60796128279561268*tmp_45 + tmp_46);
      real_t tmp_163 = tmp_15*(0.19601935860219369*tmp_33 + 0.60796128279561268*tmp_48 + tmp_49);
      real_t tmp_164 = tmp_161*tmp_29 + tmp_162*tmp_44 + tmp_163*tmp_20;
      real_t tmp_165 = tmp_161*tmp_27 + tmp_162*tmp_52 + tmp_163*tmp_18;
      real_t tmp_166 = tmp_161*tmp_25 + tmp_162*tmp_54 + tmp_163*tmp_6;
      real_t tmp_167 = 0.037198804536718075*tmp_61;
      real_t tmp_168 = tmp_15*(0.40446199974765351*tmp_38 + 0.19107600050469298*tmp_41 + tmp_42);
      real_t tmp_169 = tmp_15*(0.40446199974765351*tmp_35 + 0.19107600050469298*tmp_45 + tmp_46);
      real_t tmp_170 = tmp_15*(0.40446199974765351*tmp_33 + 0.19107600050469298*tmp_48 + tmp_49);
      real_t tmp_171 = tmp_168*tmp_29 + tmp_169*tmp_44 + tmp_170*tmp_20;
      real_t tmp_172 = tmp_168*tmp_27 + tmp_169*tmp_52 + tmp_170*tmp_18;
      real_t tmp_173 = tmp_168*tmp_25 + tmp_169*tmp_54 + tmp_170*tmp_6;
      real_t tmp_174 = 0.042507265838595799*tmp_61;
      real_t tmp_175 = tmp_15*(0.031405749086161582*tmp_38 + 0.031405749086161582*tmp_41 + tmp_42);
      real_t tmp_176 = tmp_15*(0.031405749086161582*tmp_35 + 0.031405749086161582*tmp_45 + tmp_46);
      real_t tmp_177 = tmp_15*(0.031405749086161582*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_178 = tmp_175*tmp_29 + tmp_176*tmp_44 + tmp_177*tmp_20;
      real_t tmp_179 = tmp_175*tmp_27 + tmp_176*tmp_52 + tmp_177*tmp_18;
      real_t tmp_180 = tmp_175*tmp_25 + tmp_176*tmp_54 + tmp_177*tmp_6;
      real_t tmp_181 = 0.0068572537431980923*tmp_61;
      real_t tmp_182 = tmp_15*(0.19601935860219369*tmp_38 + 0.19601935860219369*tmp_41 + tmp_42);
      real_t tmp_183 = tmp_15*(0.19601935860219369*tmp_35 + 0.19601935860219369*tmp_45 + tmp_46);
      real_t tmp_184 = tmp_15*(0.19601935860219369*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_185 = tmp_182*tmp_29 + tmp_183*tmp_44 + tmp_184*tmp_20;
      real_t tmp_186 = tmp_18*tmp_184 + tmp_182*tmp_27 + tmp_183*tmp_52;
      real_t tmp_187 = tmp_182*tmp_25 + tmp_183*tmp_54 + tmp_184*tmp_6;
      real_t tmp_188 = 0.037198804536718075*tmp_61;
      real_t tmp_189 = tmp_15*(0.40446199974765351*tmp_38 + 0.40446199974765351*tmp_41 + tmp_42);
      real_t tmp_190 = tmp_15*(0.40446199974765351*tmp_35 + 0.40446199974765351*tmp_45 + tmp_46);
      real_t tmp_191 = tmp_15*(0.40446199974765351*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_192 = tmp_189*tmp_29 + tmp_190*tmp_44 + tmp_191*tmp_20;
      real_t tmp_193 = tmp_18*tmp_191 + tmp_189*tmp_27 + tmp_190*tmp_52;
      real_t tmp_194 = tmp_189*tmp_25 + tmp_190*tmp_54 + tmp_191*tmp_6;
      real_t tmp_195 = 0.042507265838595799*tmp_61;
      real_t tmp_196 = tmp_15*(0.041227165399737475*tmp_38 + 0.1711304259088916*tmp_41 + tmp_42);
      real_t tmp_197 = tmp_15*(0.041227165399737475*tmp_35 + 0.1711304259088916*tmp_45 + tmp_46);
      real_t tmp_198 = tmp_15*(0.041227165399737475*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_199 = tmp_196*tmp_29 + tmp_197*tmp_44 + tmp_198*tmp_20;
      real_t tmp_200 = tmp_18*tmp_198 + tmp_196*tmp_27 + tmp_197*tmp_52;
      real_t tmp_201 = tmp_196*tmp_25 + tmp_197*tmp_54 + tmp_198*tmp_6;
      real_t tmp_202 = 0.019202922745021479*tmp_61;
      real_t tmp_203 = p_affine_13_1*tmp_56;
      real_t tmp_204 = tmp_20*tmp_203;
      real_t tmp_205 = tmp_203*tmp_29;
      real_t tmp_206 = p_affine_13_0*tmp_21 + p_affine_13_1*tmp_59 + p_affine_13_2*tmp_30;
      real_t tmp_207 = tmp_18*tmp_203;
      real_t tmp_208 = tmp_203*tmp_27;
      real_t tmp_209 = p_affine_13_0*tmp_19 + p_affine_13_1*tmp_58 + p_affine_13_2*tmp_28;
      real_t tmp_210 = tmp_203*tmp_6;
      real_t tmp_211 = tmp_203*tmp_25;
      real_t tmp_212 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_57 + p_affine_13_2*tmp_26;
      real_t a_0_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id18*(7.0*tmp_40*(-tmp_101 - tmp_102 - tmp_103 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_32) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id21*(7.0*tmp_40*(-tmp_108 - tmp_109 - tmp_110 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_32) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id24*(7.0*tmp_40*(-tmp_115 - tmp_116 - tmp_117 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_32) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id27*(7.0*tmp_40*(-tmp_122 - tmp_123 - tmp_124 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_32) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id30*(7.0*tmp_40*(-tmp_129 - tmp_130 - tmp_131 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_32) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id33*(7.0*tmp_40*(-tmp_136 - tmp_137 - tmp_138 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_32) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id36*(7.0*tmp_40*(-tmp_143 - tmp_144 - tmp_145 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_32) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id39*(7.0*tmp_40*(-tmp_150 - tmp_151 - tmp_152 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_32) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id42*(7.0*tmp_40*(-tmp_157 - tmp_158 - tmp_159 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_32) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id45*(7.0*tmp_40*(-tmp_164 - tmp_165 - tmp_166 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_32) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id48*(7.0*tmp_40*(-tmp_171 - tmp_172 - tmp_173 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_32) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id51*(7.0*tmp_40*(-tmp_178 - tmp_179 - tmp_180 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_32) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id54*(7.0*tmp_40*(-tmp_185 - tmp_186 - tmp_187 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_32) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id57*(7.0*tmp_40*(-tmp_192 - tmp_193 - tmp_194 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_32) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id60*(7.0*tmp_40*(-tmp_199 - tmp_200 - tmp_201 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_32) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id0*(7.0*tmp_40*(-tmp_51 - tmp_53 - tmp_55 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_32) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id3*(7.0*tmp_40*(-tmp_66 - tmp_67 - tmp_68 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_32) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id6*(7.0*tmp_40*(-tmp_73 - tmp_74 - tmp_75 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_32) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id9*(7.0*tmp_40*(-tmp_80 - tmp_81 - tmp_82 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_32) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id12*(7.0*tmp_40*(-tmp_87 - tmp_88 - tmp_89 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_32) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_24 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id15*(7.0*tmp_40*(-tmp_94 - tmp_95 - tmp_96 + 1) - tmp_60) - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_32);
      real_t a_1_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id18*(7.0*tmp_101*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_205) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id21*(7.0*tmp_108*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_205) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id24*(7.0*tmp_115*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_205) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id27*(7.0*tmp_122*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_205) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id30*(7.0*tmp_129*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_205) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id33*(7.0*tmp_136*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_205) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id36*(7.0*tmp_143*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_205) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id39*(7.0*tmp_150*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_205) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id42*(7.0*tmp_157*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_205) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id45*(7.0*tmp_164*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_205) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id48*(7.0*tmp_171*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_205) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id51*(7.0*tmp_178*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_205) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id54*(7.0*tmp_185*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_205) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id57*(7.0*tmp_192*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_205) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id60*(7.0*tmp_199*tmp_40 - tmp_206) - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_205) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id0*(-tmp_206 + 7.0*tmp_40*tmp_51) - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_205) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id3*(-tmp_206 + 7.0*tmp_40*tmp_66) - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_205) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id6*(-tmp_206 + 7.0*tmp_40*tmp_73) - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_205) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id9*(-tmp_206 + 7.0*tmp_40*tmp_80) - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_205) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id12*(-tmp_206 + 7.0*tmp_40*tmp_87) - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_205) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_204 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id15*(-tmp_206 + 7.0*tmp_40*tmp_94) - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_205);
      real_t a_2_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id18*(7.0*tmp_102*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_208) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id21*(7.0*tmp_109*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_208) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id24*(7.0*tmp_116*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_208) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id27*(7.0*tmp_123*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_208) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id30*(7.0*tmp_130*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_208) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id33*(7.0*tmp_137*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_208) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id36*(7.0*tmp_144*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_208) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id39*(7.0*tmp_151*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_208) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id42*(7.0*tmp_158*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_208) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id45*(7.0*tmp_165*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_208) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id48*(7.0*tmp_172*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_208) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id51*(7.0*tmp_179*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_208) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id54*(7.0*tmp_186*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_208) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id57*(7.0*tmp_193*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_208) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id60*(7.0*tmp_200*tmp_40 - tmp_209) - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_208) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id0*(-tmp_209 + 7.0*tmp_40*tmp_53) - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_208) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id3*(-tmp_209 + 7.0*tmp_40*tmp_67) - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_208) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id6*(-tmp_209 + 7.0*tmp_40*tmp_74) - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_208) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id9*(-tmp_209 + 7.0*tmp_40*tmp_81) - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_208) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id12*(-tmp_209 + 7.0*tmp_40*tmp_88) - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_208) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_207 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id15*(-tmp_209 + 7.0*tmp_40*tmp_95) - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_208);
      real_t a_3_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id18*(7.0*tmp_103*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id19*tmp_211) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id21*(7.0*tmp_110*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id22*tmp_211) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id24*(7.0*tmp_117*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id25*tmp_211) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id27*(7.0*tmp_124*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id28*tmp_211) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id30*(7.0*tmp_131*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id31*tmp_211) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id33*(7.0*tmp_138*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id34*tmp_211) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id36*(7.0*tmp_145*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id37*tmp_211) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id39*(7.0*tmp_152*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id40*tmp_211) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id42*(7.0*tmp_159*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id43*tmp_211) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id45*(7.0*tmp_166*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id46*tmp_211) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id48*(7.0*tmp_173*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id49*tmp_211) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id51*(7.0*tmp_180*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id52*tmp_211) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id54*(7.0*tmp_187*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id55*tmp_211) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id57*(7.0*tmp_194*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id58*tmp_211) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id60*(7.0*tmp_201*tmp_40 - tmp_212) - Scalar_Variable_Coefficient_3D_g2_out0_id61*tmp_211) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id0*(-tmp_212 + 7.0*tmp_40*tmp_55) - Scalar_Variable_Coefficient_3D_g2_out0_id1*tmp_211) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id3*(-tmp_212 + 7.0*tmp_40*tmp_68) - Scalar_Variable_Coefficient_3D_g2_out0_id4*tmp_211) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id6*(-tmp_212 + 7.0*tmp_40*tmp_75) - Scalar_Variable_Coefficient_3D_g2_out0_id7*tmp_211) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id9*(-tmp_212 + 7.0*tmp_40*tmp_82) - Scalar_Variable_Coefficient_3D_g2_out0_id10*tmp_211) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id12*(-tmp_212 + 7.0*tmp_40*tmp_89) - Scalar_Variable_Coefficient_3D_g2_out0_id13*tmp_211) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_210 + 2*Scalar_Variable_Coefficient_3D_g1_out0_id15*(-tmp_212 + 7.0*tmp_40*tmp_96) - Scalar_Variable_Coefficient_3D_g2_out0_id16*tmp_211);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = -tmp_2 + tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_0*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_3*tmp_7;
      real_t tmp_13 = tmp_11*tmp_4;
      real_t tmp_14 = tmp_1*tmp_10*tmp_11 - tmp_10*tmp_12 - tmp_13*tmp_6 - tmp_2*tmp_9 + tmp_3*tmp_4*tmp_9 + tmp_6*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_14);
      real_t tmp_16 = 2.0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_5;
      real_t tmp_18 = -tmp_13 + tmp_8;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_1*tmp_11 - tmp_12;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = 1.0*tmp_15;
      real_t tmp_24 = tmp_23*tmp_5;
      real_t tmp_25 = tmp_18*tmp_23;
      real_t tmp_26 = tmp_20*tmp_23;
      real_t tmp_27 = -tmp_24 - tmp_25 - tmp_26;
      real_t tmp_28 = tmp_0*tmp_6 - tmp_10*tmp_3;
      real_t tmp_29 = tmp_23*tmp_28;
      real_t tmp_30 = -tmp_0*tmp_9 + tmp_10*tmp_11;
      real_t tmp_31 = tmp_23*tmp_30;
      real_t tmp_32 = -tmp_11*tmp_6 + tmp_3*tmp_9;
      real_t tmp_33 = tmp_23*tmp_32;
      real_t tmp_34 = -tmp_29 - tmp_31 - tmp_33;
      real_t tmp_35 = 0.5*tmp_15;
      real_t tmp_36 = -tmp_28*tmp_35 - tmp_30*tmp_35 - tmp_32*tmp_35;
      real_t tmp_37 = tmp_1*tmp_10 - tmp_4*tmp_6;
      real_t tmp_38 = tmp_23*tmp_37;
      real_t tmp_39 = -tmp_10*tmp_7 + tmp_4*tmp_9;
      real_t tmp_40 = tmp_23*tmp_39;
      real_t tmp_41 = -tmp_1*tmp_9 + tmp_6*tmp_7;
      real_t tmp_42 = tmp_23*tmp_41;
      real_t tmp_43 = -tmp_38 - tmp_40 - tmp_42;
      real_t tmp_44 = -tmp_35*tmp_37 - tmp_35*tmp_39 - tmp_35*tmp_41;
      real_t tmp_45 = p_affine_0_0*p_affine_1_1;
      real_t tmp_46 = p_affine_0_0*p_affine_1_2;
      real_t tmp_47 = p_affine_2_1*p_affine_3_2;
      real_t tmp_48 = p_affine_0_1*p_affine_1_0;
      real_t tmp_49 = p_affine_0_1*p_affine_1_2;
      real_t tmp_50 = p_affine_2_2*p_affine_3_0;
      real_t tmp_51 = p_affine_0_2*p_affine_1_0;
      real_t tmp_52 = p_affine_0_2*p_affine_1_1;
      real_t tmp_53 = p_affine_2_0*p_affine_3_1;
      real_t tmp_54 = p_affine_2_2*p_affine_3_1;
      real_t tmp_55 = p_affine_2_0*p_affine_3_2;
      real_t tmp_56 = p_affine_2_1*p_affine_3_0;
      real_t tmp_57 = std::abs(p_affine_0_0*tmp_47 - p_affine_0_0*tmp_54 + p_affine_0_1*tmp_50 - p_affine_0_1*tmp_55 + p_affine_0_2*tmp_53 - p_affine_0_2*tmp_56 - p_affine_1_0*tmp_47 + p_affine_1_0*tmp_54 - p_affine_1_1*tmp_50 + p_affine_1_1*tmp_55 - p_affine_1_2*tmp_53 + p_affine_1_2*tmp_56 + p_affine_2_0*tmp_49 - p_affine_2_0*tmp_52 - p_affine_2_1*tmp_46 + p_affine_2_1*tmp_51 + p_affine_2_2*tmp_45 - p_affine_2_2*tmp_48 - p_affine_3_0*tmp_49 + p_affine_3_0*tmp_52 + p_affine_3_1*tmp_46 - p_affine_3_1*tmp_51 - p_affine_3_2*tmp_45 + p_affine_3_2*tmp_48);
      real_t tmp_58 = tmp_57*(tmp_22*tmp_27 + 2*tmp_34*tmp_36 + 2*tmp_43*tmp_44);
      real_t tmp_59 = tmp_16*tmp_36;
      real_t tmp_60 = tmp_16*tmp_44;
      real_t tmp_61 = tmp_57*(tmp_21*tmp_27 + tmp_32*tmp_59 + tmp_41*tmp_60);
      real_t tmp_62 = tmp_57*(tmp_19*tmp_27 + tmp_30*tmp_59 + tmp_39*tmp_60);
      real_t tmp_63 = tmp_57*(tmp_17*tmp_27 + tmp_28*tmp_59 + tmp_37*tmp_60);
      real_t tmp_64 = tmp_57*(tmp_22*tmp_26 + tmp_33*tmp_34 + tmp_42*tmp_43);
      real_t tmp_65 = 1.0 / (tmp_14*tmp_14);
      real_t tmp_66 = 1.0*tmp_65;
      real_t tmp_67 = 2.0*tmp_65;
      real_t tmp_68 = tmp_57*((tmp_20*tmp_20)*tmp_67 + (tmp_32*tmp_32)*tmp_66 + (tmp_41*tmp_41)*tmp_66);
      real_t tmp_69 = tmp_32*tmp_66;
      real_t tmp_70 = tmp_20*tmp_67;
      real_t tmp_71 = tmp_41*tmp_66;
      real_t tmp_72 = tmp_57*(tmp_18*tmp_70 + tmp_30*tmp_69 + tmp_39*tmp_71);
      real_t tmp_73 = 0.1666666666666668*tmp_72;
      real_t tmp_74 = tmp_57*(tmp_28*tmp_69 + tmp_37*tmp_71 + tmp_5*tmp_70);
      real_t tmp_75 = 0.1666666666666668*tmp_74;
      real_t tmp_76 = tmp_57*(tmp_22*tmp_25 + tmp_31*tmp_34 + tmp_40*tmp_43);
      real_t tmp_77 = tmp_57*((tmp_18*tmp_18)*tmp_67 + (tmp_30*tmp_30)*tmp_66 + (tmp_39*tmp_39)*tmp_66);
      real_t tmp_78 = tmp_57*(tmp_18*tmp_5*tmp_67 + tmp_28*tmp_30*tmp_66 + tmp_37*tmp_39*tmp_66);
      real_t tmp_79 = 0.1666666666666668*tmp_78;
      real_t tmp_80 = tmp_57*(tmp_22*tmp_24 + tmp_29*tmp_34 + tmp_38*tmp_43);
      real_t tmp_81 = tmp_57*((tmp_28*tmp_28)*tmp_66 + (tmp_37*tmp_37)*tmp_66 + (tmp_5*tmp_5)*tmp_67);
      real_t a_0_0 = 0.1666666666666668*tmp_58;
      real_t a_0_1 = 0.1666666666666668*tmp_61;
      real_t a_0_2 = 0.1666666666666668*tmp_62;
      real_t a_0_3 = 0.1666666666666668*tmp_63;
      real_t a_1_0 = 0.1666666666666668*tmp_64;
      real_t a_1_1 = 0.1666666666666668*tmp_68;
      real_t a_1_2 = tmp_73;
      real_t a_1_3 = tmp_75;
      real_t a_2_0 = 0.1666666666666668*tmp_76;
      real_t a_2_1 = tmp_73;
      real_t a_2_2 = 0.1666666666666668*tmp_77;
      real_t a_2_3 = tmp_79;
      real_t a_3_0 = 0.1666666666666668*tmp_80;
      real_t a_3_1 = tmp_75;
      real_t a_3_2 = tmp_79;
      real_t a_3_3 = 0.1666666666666668*tmp_81;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_14 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_14*tmp_9;
      real_t tmp_21 = tmp_17*tmp_8;
      real_t tmp_22 = tmp_10*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_11*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_21 + tmp_16*tmp_8*tmp_9 - tmp_18*tmp_20);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_13*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_11*tmp_13 - tmp_18*tmp_9;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_20;
      real_t tmp_37 = tmp_13*tmp_14 - tmp_22;
      real_t tmp_38 = -tmp_13*tmp_17 + tmp_16*tmp_9;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_15 - tmp_21;
      real_t tmp_41 = -tmp_14*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = -tmp_11*tmp_16 + tmp_19;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 0.5*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = 1.0*tmp_23;
      real_t tmp_50 = tmp_41*tmp_49;
      real_t tmp_51 = tmp_37*tmp_49;
      real_t tmp_52 = tmp_27*tmp_49;
      real_t tmp_53 = tmp_40*tmp_45;
      real_t tmp_54 = tmp_36*tmp_45;
      real_t tmp_55 = tmp_12*tmp_45;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_50 - tmp_51 - tmp_52) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2.0*tmp_56;
      real_t tmp_58 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = 1.0*tmp_56;
      real_t tmp_221 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_52 + p_affine_13_2*tmp_55;
      real_t tmp_222 = 1.0*tmp_221;
      real_t tmp_223 = tmp_107*(14.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_220 - tmp_106*tmp_222) + tmp_115*(14.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_220 - tmp_114*tmp_222) + tmp_123*(14.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_220 - tmp_122*tmp_222) + tmp_131*(14.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_220 - tmp_130*tmp_222) + tmp_139*(14.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_220 - tmp_138*tmp_222) + tmp_147*(14.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_220 - tmp_146*tmp_222) + tmp_155*(14.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_220 - tmp_154*tmp_222) + tmp_163*(14.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_220 - tmp_162*tmp_222) + tmp_171*(14.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_220 - tmp_170*tmp_222) + tmp_179*(14.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_220 - tmp_178*tmp_222) + tmp_187*(14.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_220 - tmp_186*tmp_222) + tmp_195*(14.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_220 - tmp_194*tmp_222) + tmp_203*(14.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_220 - tmp_202*tmp_222) + tmp_211*(14.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_220 - tmp_210*tmp_222) + tmp_219*(14.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_220 - tmp_218*tmp_222) + tmp_59*(-tmp_220*tmp_35 - tmp_222*tmp_44 + 14.0*tmp_35*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_63 - tmp_222*tmp_66 + 14.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_71 - tmp_222*tmp_74 + 14.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_79 - tmp_222*tmp_82 + 14.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_87 - tmp_222*tmp_90 + 14.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_95 - tmp_222*tmp_98 + 14.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_54;
      real_t tmp_225 = 1.0*tmp_224;
      real_t tmp_226 = tmp_107*(14.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_220 - tmp_106*tmp_225) + tmp_115*(14.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_220 - tmp_114*tmp_225) + tmp_123*(14.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_220 - tmp_122*tmp_225) + tmp_131*(14.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_220 - tmp_130*tmp_225) + tmp_139*(14.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_220 - tmp_138*tmp_225) + tmp_147*(14.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_220 - tmp_146*tmp_225) + tmp_155*(14.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_220 - tmp_154*tmp_225) + tmp_163*(14.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_220 - tmp_162*tmp_225) + tmp_171*(14.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_220 - tmp_170*tmp_225) + tmp_179*(14.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_220 - tmp_178*tmp_225) + tmp_187*(14.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_220 - tmp_186*tmp_225) + tmp_195*(14.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_220 - tmp_194*tmp_225) + tmp_203*(14.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_220 - tmp_202*tmp_225) + tmp_211*(14.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_220 - tmp_210*tmp_225) + tmp_219*(14.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_220 - tmp_218*tmp_225) + tmp_59*(-tmp_220*tmp_39 - tmp_225*tmp_44 + 14.0*tmp_39*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_225*tmp_66 + 14.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_225*tmp_74 + 14.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_220*tmp_80 - tmp_225*tmp_82 + 14.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_220*tmp_88 - tmp_225*tmp_90 + 14.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_220*tmp_96 - tmp_225*tmp_98 + 14.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_227 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_53;
      real_t tmp_228 = 1.0*tmp_227;
      real_t tmp_229 = tmp_107*(14.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_220 - tmp_106*tmp_228) + tmp_115*(14.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_220 - tmp_114*tmp_228) + tmp_123*(14.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_220 - tmp_122*tmp_228) + tmp_131*(14.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_220 - tmp_130*tmp_228) + tmp_139*(14.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_220 - tmp_138*tmp_228) + tmp_147*(14.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_220 - tmp_146*tmp_228) + tmp_155*(14.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_220 - tmp_154*tmp_228) + tmp_163*(14.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_220 - tmp_162*tmp_228) + tmp_171*(14.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_220 - tmp_170*tmp_228) + tmp_179*(14.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_220 - tmp_178*tmp_228) + tmp_187*(14.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_220 - tmp_186*tmp_228) + tmp_195*(14.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_220 - tmp_194*tmp_228) + tmp_203*(14.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_220 - tmp_202*tmp_228) + tmp_211*(14.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_220 - tmp_210*tmp_228) + tmp_219*(14.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_220 - tmp_218*tmp_228) + tmp_59*(-tmp_220*tmp_43 - tmp_228*tmp_44 + 14.0*tmp_43*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_228*tmp_66 + 14.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_228*tmp_74 + 14.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_220*tmp_81 - tmp_228*tmp_82 + 14.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_220*tmp_89 - tmp_228*tmp_90 + 14.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_220*tmp_97 - tmp_228*tmp_98 + 14.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_230 = 2.0*tmp_221;
      real_t tmp_231 = tmp_107*(14.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_225 - tmp_104*tmp_222) + tmp_115*(14.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_225 - tmp_112*tmp_222) + tmp_123*(14.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_225 - tmp_120*tmp_222) + tmp_131*(14.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_225 - tmp_128*tmp_222) + tmp_139*(14.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_225 - tmp_136*tmp_222) + tmp_147*(14.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_225 - tmp_144*tmp_222) + tmp_155*(14.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_225 - tmp_152*tmp_222) + tmp_163*(14.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_225 - tmp_160*tmp_222) + tmp_171*(14.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_225 - tmp_168*tmp_222) + tmp_179*(14.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_225 - tmp_176*tmp_222) + tmp_187*(14.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_225 - tmp_184*tmp_222) + tmp_195*(14.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_225 - tmp_192*tmp_222) + tmp_203*(14.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_225 - tmp_200*tmp_222) + tmp_211*(14.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_225 - tmp_208*tmp_222) + tmp_219*(14.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_225 - tmp_216*tmp_222) + tmp_59*(-tmp_222*tmp_39 - tmp_225*tmp_35 + 14.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_222*tmp_64 - tmp_225*tmp_63 + 14.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_222*tmp_72 - tmp_225*tmp_71 + 14.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_222*tmp_80 - tmp_225*tmp_79 + 14.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_222*tmp_88 - tmp_225*tmp_87 + 14.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_222*tmp_96 - tmp_225*tmp_95 + 14.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_232 = tmp_107*(14.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_228 - tmp_105*tmp_222) + tmp_115*(14.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_228 - tmp_113*tmp_222) + tmp_123*(14.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_228 - tmp_121*tmp_222) + tmp_131*(14.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_228 - tmp_129*tmp_222) + tmp_139*(14.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_228 - tmp_137*tmp_222) + tmp_147*(14.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_228 - tmp_145*tmp_222) + tmp_155*(14.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_228 - tmp_153*tmp_222) + tmp_163*(14.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_228 - tmp_161*tmp_222) + tmp_171*(14.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_228 - tmp_169*tmp_222) + tmp_179*(14.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_228 - tmp_177*tmp_222) + tmp_187*(14.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_228 - tmp_185*tmp_222) + tmp_195*(14.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_228 - tmp_193*tmp_222) + tmp_203*(14.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_228 - tmp_201*tmp_222) + tmp_211*(14.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_228 - tmp_209*tmp_222) + tmp_219*(14.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_228 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_228*tmp_35 + 14.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_228*tmp_63 + 14.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_228*tmp_71 + 14.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_228*tmp_79 + 14.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_228*tmp_87 + 14.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_228*tmp_95 + 14.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_233 = 2.0*tmp_224;
      real_t tmp_234 = tmp_107*(14.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_228 - tmp_105*tmp_225) + tmp_115*(14.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_228 - tmp_113*tmp_225) + tmp_123*(14.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_228 - tmp_121*tmp_225) + tmp_131*(14.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_228 - tmp_129*tmp_225) + tmp_139*(14.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_228 - tmp_137*tmp_225) + tmp_147*(14.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_228 - tmp_145*tmp_225) + tmp_155*(14.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_228 - tmp_153*tmp_225) + tmp_163*(14.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_228 - tmp_161*tmp_225) + tmp_171*(14.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_228 - tmp_169*tmp_225) + tmp_179*(14.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_228 - tmp_177*tmp_225) + tmp_187*(14.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_228 - tmp_185*tmp_225) + tmp_195*(14.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_228 - tmp_193*tmp_225) + tmp_203*(14.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_228 - tmp_201*tmp_225) + tmp_211*(14.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_228 - tmp_209*tmp_225) + tmp_219*(14.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_228 - tmp_217*tmp_225) + tmp_59*(-tmp_225*tmp_43 - tmp_228*tmp_39 + 14.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_225*tmp_65 - tmp_228*tmp_64 + 14.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_225*tmp_73 - tmp_228*tmp_72 + 14.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_225*tmp_81 - tmp_228*tmp_80 + 14.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_225*tmp_89 - tmp_228*tmp_88 + 14.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_225*tmp_97 - tmp_228*tmp_96 + 14.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_235 = 2.0*tmp_227;
      real_t a_0_0 = tmp_107*(14.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(14.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(14.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(14.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(14.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(14.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(14.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(14.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(14.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(14.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(14.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(14.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(14.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(14.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(14.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(14.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 14.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 14.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 14.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 14.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 14.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_223;
      real_t a_0_2 = tmp_226;
      real_t a_0_3 = tmp_229;
      real_t a_1_0 = tmp_223;
      real_t a_1_1 = tmp_107*(14.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_230) + tmp_115*(14.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_230) + tmp_123*(14.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_230) + tmp_131*(14.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_230) + tmp_139*(14.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_230) + tmp_147*(14.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_230) + tmp_155*(14.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_230) + tmp_163*(14.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_230) + tmp_171*(14.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_230) + tmp_179*(14.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_230) + tmp_187*(14.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_230) + tmp_195*(14.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_230) + tmp_203*(14.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_230) + tmp_211*(14.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_230) + tmp_219*(14.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_230) + tmp_59*(-tmp_230*tmp_35 + 14.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_230*tmp_63 + 14.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_230*tmp_71 + 14.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_230*tmp_79 + 14.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_230*tmp_87 + 14.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_230*tmp_95 + 14.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_231;
      real_t a_1_3 = tmp_232;
      real_t a_2_0 = tmp_226;
      real_t a_2_1 = tmp_231;
      real_t a_2_2 = tmp_107*(14.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_233) + tmp_115*(14.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_233) + tmp_123*(14.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_233) + tmp_131*(14.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_233) + tmp_139*(14.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_233) + tmp_147*(14.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_233) + tmp_155*(14.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_233) + tmp_163*(14.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_233) + tmp_171*(14.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_233) + tmp_179*(14.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_233) + tmp_187*(14.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_233) + tmp_195*(14.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_233) + tmp_203*(14.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_233) + tmp_211*(14.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_233) + tmp_219*(14.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_233) + tmp_59*(-tmp_233*tmp_39 + 14.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_233*tmp_64 + 14.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_233*tmp_72 + 14.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_233*tmp_80 + 14.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_233*tmp_88 + 14.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_233*tmp_96 + 14.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_234;
      real_t a_3_0 = tmp_229;
      real_t a_3_1 = tmp_232;
      real_t a_3_2 = tmp_234;
      real_t a_3_3 = tmp_107*(14.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_235) + tmp_115*(14.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_235) + tmp_123*(14.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_235) + tmp_131*(14.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_235) + tmp_139*(14.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_235) + tmp_147*(14.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_235) + tmp_155*(14.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_235) + tmp_163*(14.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_235) + tmp_171*(14.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_235) + tmp_179*(14.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_235) + tmp_187*(14.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_235) + tmp_195*(14.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_235) + tmp_203*(14.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_235) + tmp_211*(14.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_235) + tmp_219*(14.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_235) + tmp_59*(-tmp_235*tmp_43 + 14.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_235*tmp_65 + 14.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_235*tmp_73 + 14.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_235*tmp_81 + 14.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_235*tmp_89 + 14.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_235*tmp_97 + 14.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_3*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_0*tmp_13 + tmp_11*tmp_2 - tmp_12*tmp_5 - tmp_14*tmp_2 + tmp_5*tmp_7);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_6 + tmp_10*tmp_2;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_2*tmp_8 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_13;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_5;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_50 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_51 = tmp_48 - tmp_49*tmp_50;
      real_t tmp_52 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_53 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_54 = tmp_49*tmp_53;
      real_t tmp_55 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_56 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_57 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_58 = tmp_53*tmp_55;
      real_t tmp_59 = tmp_46*tmp_56;
      real_t tmp_60 = tmp_50*tmp_57;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_57 - tmp_49*tmp_60 + tmp_50*tmp_55*tmp_56 + tmp_52*tmp_54 - tmp_52*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_51*tmp_62;
      real_t tmp_64 = -tmp_46*tmp_52 + tmp_50*tmp_55;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = -tmp_47*tmp_55 + tmp_49*tmp_52;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_69 = 1.0*tmp_61;
      real_t tmp_70 = tmp_68*tmp_69;
      real_t tmp_71 = tmp_52*tmp_53 - tmp_60;
      real_t tmp_72 = tmp_69*tmp_71;
      real_t tmp_73 = tmp_47*tmp_57 - tmp_52*tmp_56;
      real_t tmp_74 = tmp_69*tmp_73;
      real_t tmp_75 = tmp_54 - tmp_59;
      real_t tmp_76 = tmp_62*tmp_75;
      real_t tmp_77 = tmp_46*tmp_57 - tmp_58;
      real_t tmp_78 = tmp_62*tmp_77;
      real_t tmp_79 = -tmp_49*tmp_57 + tmp_55*tmp_56;
      real_t tmp_80 = tmp_62*tmp_79;
      real_t tmp_81 = 1.0*p_affine_13_0*(-tmp_63 - tmp_65 - tmp_67) + 1.0*p_affine_13_1*(-tmp_70 - tmp_72 - tmp_74) + 1.0*p_affine_13_2*(-tmp_76 - tmp_78 - tmp_80);
      real_t tmp_82 = 0.5*tmp_15;
      real_t tmp_83 = tmp_43*tmp_82;
      real_t tmp_84 = tmp_39*tmp_82;
      real_t tmp_85 = tmp_29*tmp_82;
      real_t tmp_86 = 1.0*tmp_15;
      real_t tmp_87 = tmp_42*tmp_86;
      real_t tmp_88 = tmp_38*tmp_86;
      real_t tmp_89 = tmp_22*tmp_86;
      real_t tmp_90 = tmp_41*tmp_82;
      real_t tmp_91 = tmp_37*tmp_82;
      real_t tmp_92 = tmp_4*tmp_82;
      real_t tmp_93 = p_affine_13_0*(-tmp_83 - tmp_84 - tmp_85) + p_affine_13_1*(-tmp_87 - tmp_88 - tmp_89) + p_affine_13_2*(-tmp_90 - tmp_91 - tmp_92);
      real_t tmp_94 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_95 = tmp_61*(tmp_19 + tmp_94);
      real_t tmp_96 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_97 = tmp_61*(tmp_26 + tmp_96);
      real_t tmp_98 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_99 = tmp_61*(tmp_33 + tmp_98);
      real_t tmp_100 = tmp_66*tmp_99 + tmp_73*tmp_97 + tmp_79*tmp_95;
      real_t tmp_101 = tmp_64*tmp_99 + tmp_71*tmp_97 + tmp_77*tmp_95;
      real_t tmp_102 = tmp_51*tmp_99 + tmp_68*tmp_97 + tmp_75*tmp_95;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_105 = 14.0*std::pow(tmp_104, -0.25);
      real_t tmp_106 = tmp_105*tmp_45;
      real_t tmp_107 = 1.0*std::pow(tmp_104, 1.0/2.0);
      real_t tmp_108 = 0.0068572537431980923*tmp_107;
      real_t tmp_109 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_110 = tmp_15*(tmp_109 + tmp_20);
      real_t tmp_111 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_112 = tmp_15*(tmp_111 + tmp_27);
      real_t tmp_113 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_34);
      real_t tmp_115 = tmp_110*tmp_4 + tmp_112*tmp_22 + tmp_114*tmp_29;
      real_t tmp_116 = tmp_110*tmp_37 + tmp_112*tmp_38 + tmp_114*tmp_39;
      real_t tmp_117 = tmp_110*tmp_41 + tmp_112*tmp_42 + tmp_114*tmp_43;
      real_t tmp_118 = -tmp_115 - tmp_116 - tmp_117 + 1;
      real_t tmp_119 = tmp_61*(tmp_109 + tmp_94);
      real_t tmp_120 = tmp_61*(tmp_111 + tmp_96);
      real_t tmp_121 = tmp_61*(tmp_113 + tmp_98);
      real_t tmp_122 = tmp_119*tmp_79 + tmp_120*tmp_73 + tmp_121*tmp_66;
      real_t tmp_123 = tmp_119*tmp_77 + tmp_120*tmp_71 + tmp_121*tmp_64;
      real_t tmp_124 = tmp_119*tmp_75 + tmp_120*tmp_68 + tmp_121*tmp_51;
      real_t tmp_125 = -tmp_122 - tmp_123 - tmp_124 + 1;
      real_t tmp_126 = tmp_105*tmp_118;
      real_t tmp_127 = 0.037198804536718075*tmp_107;
      real_t tmp_128 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_20);
      real_t tmp_130 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_27);
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_133 = tmp_15*(tmp_132 + tmp_34);
      real_t tmp_134 = tmp_129*tmp_4 + tmp_131*tmp_22 + tmp_133*tmp_29;
      real_t tmp_135 = tmp_129*tmp_37 + tmp_131*tmp_38 + tmp_133*tmp_39;
      real_t tmp_136 = tmp_129*tmp_41 + tmp_131*tmp_42 + tmp_133*tmp_43;
      real_t tmp_137 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_138 = tmp_61*(tmp_128 + tmp_94);
      real_t tmp_139 = tmp_61*(tmp_130 + tmp_96);
      real_t tmp_140 = tmp_61*(tmp_132 + tmp_98);
      real_t tmp_141 = tmp_138*tmp_79 + tmp_139*tmp_73 + tmp_140*tmp_66;
      real_t tmp_142 = tmp_138*tmp_77 + tmp_139*tmp_71 + tmp_140*tmp_64;
      real_t tmp_143 = tmp_138*tmp_75 + tmp_139*tmp_68 + tmp_140*tmp_51;
      real_t tmp_144 = -tmp_141 - tmp_142 - tmp_143 + 1;
      real_t tmp_145 = tmp_105*tmp_137;
      real_t tmp_146 = 0.020848748529055869*tmp_107;
      real_t tmp_147 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_148 = tmp_15*(tmp_147 + tmp_20);
      real_t tmp_149 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_150 = tmp_15*(tmp_149 + tmp_27);
      real_t tmp_151 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_34);
      real_t tmp_153 = tmp_148*tmp_4 + tmp_150*tmp_22 + tmp_152*tmp_29;
      real_t tmp_154 = tmp_148*tmp_37 + tmp_150*tmp_38 + tmp_152*tmp_39;
      real_t tmp_155 = tmp_148*tmp_41 + tmp_150*tmp_42 + tmp_152*tmp_43;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = tmp_61*(tmp_147 + tmp_94);
      real_t tmp_158 = tmp_61*(tmp_149 + tmp_96);
      real_t tmp_159 = tmp_61*(tmp_151 + tmp_98);
      real_t tmp_160 = tmp_157*tmp_79 + tmp_158*tmp_73 + tmp_159*tmp_66;
      real_t tmp_161 = tmp_157*tmp_77 + tmp_158*tmp_71 + tmp_159*tmp_64;
      real_t tmp_162 = tmp_157*tmp_75 + tmp_158*tmp_68 + tmp_159*tmp_51;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = tmp_105*tmp_156;
      real_t tmp_165 = 0.019202922745021479*tmp_107;
      real_t tmp_166 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_20);
      real_t tmp_168 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_169 = tmp_15*(tmp_168 + tmp_27);
      real_t tmp_170 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_171 = tmp_15*(tmp_170 + tmp_34);
      real_t tmp_172 = tmp_167*tmp_4 + tmp_169*tmp_22 + tmp_171*tmp_29;
      real_t tmp_173 = tmp_167*tmp_37 + tmp_169*tmp_38 + tmp_171*tmp_39;
      real_t tmp_174 = tmp_167*tmp_41 + tmp_169*tmp_42 + tmp_171*tmp_43;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = tmp_61*(tmp_166 + tmp_94);
      real_t tmp_177 = tmp_61*(tmp_168 + tmp_96);
      real_t tmp_178 = tmp_61*(tmp_170 + tmp_98);
      real_t tmp_179 = tmp_176*tmp_79 + tmp_177*tmp_73 + tmp_178*tmp_66;
      real_t tmp_180 = tmp_176*tmp_77 + tmp_177*tmp_71 + tmp_178*tmp_64;
      real_t tmp_181 = tmp_176*tmp_75 + tmp_177*tmp_68 + tmp_178*tmp_51;
      real_t tmp_182 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_183 = tmp_105*tmp_175;
      real_t tmp_184 = 0.020848748529055869*tmp_107;
      real_t tmp_185 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_20);
      real_t tmp_187 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_27);
      real_t tmp_189 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_190 = tmp_15*(tmp_189 + tmp_34);
      real_t tmp_191 = tmp_186*tmp_4 + tmp_188*tmp_22 + tmp_190*tmp_29;
      real_t tmp_192 = tmp_186*tmp_37 + tmp_188*tmp_38 + tmp_190*tmp_39;
      real_t tmp_193 = tmp_186*tmp_41 + tmp_188*tmp_42 + tmp_190*tmp_43;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = tmp_61*(tmp_185 + tmp_94);
      real_t tmp_196 = tmp_61*(tmp_187 + tmp_96);
      real_t tmp_197 = tmp_61*(tmp_189 + tmp_98);
      real_t tmp_198 = tmp_195*tmp_79 + tmp_196*tmp_73 + tmp_197*tmp_66;
      real_t tmp_199 = tmp_195*tmp_77 + tmp_196*tmp_71 + tmp_197*tmp_64;
      real_t tmp_200 = tmp_195*tmp_75 + tmp_196*tmp_68 + tmp_197*tmp_51;
      real_t tmp_201 = -tmp_198 - tmp_199 - tmp_200 + 1;
      real_t tmp_202 = tmp_105*tmp_194;
      real_t tmp_203 = 0.019202922745021479*tmp_107;
      real_t tmp_204 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_205 = tmp_15*(tmp_20 + tmp_204);
      real_t tmp_206 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_207 = tmp_15*(tmp_206 + tmp_27);
      real_t tmp_208 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_209 = tmp_15*(tmp_208 + tmp_34);
      real_t tmp_210 = tmp_205*tmp_4 + tmp_207*tmp_22 + tmp_209*tmp_29;
      real_t tmp_211 = tmp_205*tmp_37 + tmp_207*tmp_38 + tmp_209*tmp_39;
      real_t tmp_212 = tmp_205*tmp_41 + tmp_207*tmp_42 + tmp_209*tmp_43;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = tmp_61*(tmp_204 + tmp_94);
      real_t tmp_215 = tmp_61*(tmp_206 + tmp_96);
      real_t tmp_216 = tmp_61*(tmp_208 + tmp_98);
      real_t tmp_217 = tmp_214*tmp_79 + tmp_215*tmp_73 + tmp_216*tmp_66;
      real_t tmp_218 = tmp_214*tmp_77 + tmp_215*tmp_71 + tmp_216*tmp_64;
      real_t tmp_219 = tmp_214*tmp_75 + tmp_215*tmp_68 + tmp_216*tmp_51;
      real_t tmp_220 = -tmp_217 - tmp_218 - tmp_219 + 1;
      real_t tmp_221 = tmp_105*tmp_213;
      real_t tmp_222 = 0.020848748529055869*tmp_107;
      real_t tmp_223 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_224 = tmp_15*(tmp_20 + tmp_223);
      real_t tmp_225 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_226 = tmp_15*(tmp_225 + tmp_27);
      real_t tmp_227 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_228 = tmp_15*(tmp_227 + tmp_34);
      real_t tmp_229 = tmp_22*tmp_226 + tmp_224*tmp_4 + tmp_228*tmp_29;
      real_t tmp_230 = tmp_224*tmp_37 + tmp_226*tmp_38 + tmp_228*tmp_39;
      real_t tmp_231 = tmp_224*tmp_41 + tmp_226*tmp_42 + tmp_228*tmp_43;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = tmp_61*(tmp_223 + tmp_94);
      real_t tmp_234 = tmp_61*(tmp_225 + tmp_96);
      real_t tmp_235 = tmp_61*(tmp_227 + tmp_98);
      real_t tmp_236 = tmp_233*tmp_79 + tmp_234*tmp_73 + tmp_235*tmp_66;
      real_t tmp_237 = tmp_233*tmp_77 + tmp_234*tmp_71 + tmp_235*tmp_64;
      real_t tmp_238 = tmp_233*tmp_75 + tmp_234*tmp_68 + tmp_235*tmp_51;
      real_t tmp_239 = -tmp_236 - tmp_237 - tmp_238 + 1;
      real_t tmp_240 = tmp_105*tmp_232;
      real_t tmp_241 = 0.019202922745021479*tmp_107;
      real_t tmp_242 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_243 = tmp_15*(tmp_20 + tmp_242);
      real_t tmp_244 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_245 = tmp_15*(tmp_244 + tmp_27);
      real_t tmp_246 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_247 = tmp_15*(tmp_246 + tmp_34);
      real_t tmp_248 = tmp_22*tmp_245 + tmp_243*tmp_4 + tmp_247*tmp_29;
      real_t tmp_249 = tmp_243*tmp_37 + tmp_245*tmp_38 + tmp_247*tmp_39;
      real_t tmp_250 = tmp_243*tmp_41 + tmp_245*tmp_42 + tmp_247*tmp_43;
      real_t tmp_251 = -tmp_248 - tmp_249 - tmp_250 + 1;
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_94);
      real_t tmp_253 = tmp_61*(tmp_244 + tmp_96);
      real_t tmp_254 = tmp_61*(tmp_246 + tmp_98);
      real_t tmp_255 = tmp_252*tmp_79 + tmp_253*tmp_73 + tmp_254*tmp_66;
      real_t tmp_256 = tmp_252*tmp_77 + tmp_253*tmp_71 + tmp_254*tmp_64;
      real_t tmp_257 = tmp_252*tmp_75 + tmp_253*tmp_68 + tmp_254*tmp_51;
      real_t tmp_258 = -tmp_255 - tmp_256 - tmp_257 + 1;
      real_t tmp_259 = tmp_105*tmp_251;
      real_t tmp_260 = 0.020848748529055869*tmp_107;
      real_t tmp_261 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_262 = tmp_15*(tmp_20 + tmp_261);
      real_t tmp_263 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_27);
      real_t tmp_265 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_34);
      real_t tmp_267 = tmp_22*tmp_264 + tmp_262*tmp_4 + tmp_266*tmp_29;
      real_t tmp_268 = tmp_262*tmp_37 + tmp_264*tmp_38 + tmp_266*tmp_39;
      real_t tmp_269 = tmp_262*tmp_41 + tmp_264*tmp_42 + tmp_266*tmp_43;
      real_t tmp_270 = -tmp_267 - tmp_268 - tmp_269 + 1;
      real_t tmp_271 = tmp_61*(tmp_261 + tmp_94);
      real_t tmp_272 = tmp_61*(tmp_263 + tmp_96);
      real_t tmp_273 = tmp_61*(tmp_265 + tmp_98);
      real_t tmp_274 = tmp_271*tmp_79 + tmp_272*tmp_73 + tmp_273*tmp_66;
      real_t tmp_275 = tmp_271*tmp_77 + tmp_272*tmp_71 + tmp_273*tmp_64;
      real_t tmp_276 = tmp_271*tmp_75 + tmp_272*tmp_68 + tmp_273*tmp_51;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_105*tmp_270;
      real_t tmp_279 = 0.019202922745021479*tmp_107;
      real_t tmp_280 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_281 = tmp_15*(tmp_20 + tmp_280);
      real_t tmp_282 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_283 = tmp_15*(tmp_27 + tmp_282);
      real_t tmp_284 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_34);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_4 + tmp_285*tmp_29;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43;
      real_t tmp_289 = -tmp_286 - tmp_287 - tmp_288 + 1;
      real_t tmp_290 = tmp_61*(tmp_280 + tmp_94);
      real_t tmp_291 = tmp_61*(tmp_282 + tmp_96);
      real_t tmp_292 = tmp_61*(tmp_284 + tmp_98);
      real_t tmp_293 = tmp_290*tmp_79 + tmp_291*tmp_73 + tmp_292*tmp_66;
      real_t tmp_294 = tmp_290*tmp_77 + tmp_291*tmp_71 + tmp_292*tmp_64;
      real_t tmp_295 = tmp_290*tmp_75 + tmp_291*tmp_68 + tmp_292*tmp_51;
      real_t tmp_296 = -tmp_293 - tmp_294 - tmp_295 + 1;
      real_t tmp_297 = tmp_105*tmp_289;
      real_t tmp_298 = 0.020848748529055869*tmp_107;
      real_t tmp_299 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_300 = tmp_15*(tmp_20 + tmp_299);
      real_t tmp_301 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_302 = tmp_15*(tmp_27 + tmp_301);
      real_t tmp_303 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_304 = tmp_15*(tmp_303 + tmp_34);
      real_t tmp_305 = tmp_22*tmp_302 + tmp_29*tmp_304 + tmp_300*tmp_4;
      real_t tmp_306 = tmp_300*tmp_37 + tmp_302*tmp_38 + tmp_304*tmp_39;
      real_t tmp_307 = tmp_300*tmp_41 + tmp_302*tmp_42 + tmp_304*tmp_43;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_61*(tmp_299 + tmp_94);
      real_t tmp_310 = tmp_61*(tmp_301 + tmp_96);
      real_t tmp_311 = tmp_61*(tmp_303 + tmp_98);
      real_t tmp_312 = tmp_309*tmp_79 + tmp_310*tmp_73 + tmp_311*tmp_66;
      real_t tmp_313 = tmp_309*tmp_77 + tmp_310*tmp_71 + tmp_311*tmp_64;
      real_t tmp_314 = tmp_309*tmp_75 + tmp_310*tmp_68 + tmp_311*tmp_51;
      real_t tmp_315 = -tmp_312 - tmp_313 - tmp_314 + 1;
      real_t tmp_316 = tmp_105*tmp_308;
      real_t tmp_317 = 0.019202922745021479*tmp_107;
      real_t tmp_318 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_319 = tmp_15*(tmp_20 + tmp_318);
      real_t tmp_320 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_321 = tmp_15*(tmp_27 + tmp_320);
      real_t tmp_322 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_323 = tmp_15*(tmp_322 + tmp_34);
      real_t tmp_324 = tmp_22*tmp_321 + tmp_29*tmp_323 + tmp_319*tmp_4;
      real_t tmp_325 = tmp_319*tmp_37 + tmp_321*tmp_38 + tmp_323*tmp_39;
      real_t tmp_326 = tmp_319*tmp_41 + tmp_321*tmp_42 + tmp_323*tmp_43;
      real_t tmp_327 = -tmp_324 - tmp_325 - tmp_326 + 1;
      real_t tmp_328 = tmp_61*(tmp_318 + tmp_94);
      real_t tmp_329 = tmp_61*(tmp_320 + tmp_96);
      real_t tmp_330 = tmp_61*(tmp_322 + tmp_98);
      real_t tmp_331 = tmp_328*tmp_79 + tmp_329*tmp_73 + tmp_330*tmp_66;
      real_t tmp_332 = tmp_328*tmp_77 + tmp_329*tmp_71 + tmp_330*tmp_64;
      real_t tmp_333 = tmp_328*tmp_75 + tmp_329*tmp_68 + tmp_330*tmp_51;
      real_t tmp_334 = -tmp_331 - tmp_332 - tmp_333 + 1;
      real_t tmp_335 = tmp_105*tmp_327;
      real_t tmp_336 = 0.042507265838595799*tmp_107;
      real_t tmp_337 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_338 = tmp_15*(tmp_20 + tmp_337);
      real_t tmp_339 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_340 = tmp_15*(tmp_27 + tmp_339);
      real_t tmp_341 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_342 = tmp_15*(tmp_34 + tmp_341);
      real_t tmp_343 = tmp_22*tmp_340 + tmp_29*tmp_342 + tmp_338*tmp_4;
      real_t tmp_344 = tmp_338*tmp_37 + tmp_340*tmp_38 + tmp_342*tmp_39;
      real_t tmp_345 = tmp_338*tmp_41 + tmp_340*tmp_42 + tmp_342*tmp_43;
      real_t tmp_346 = -tmp_343 - tmp_344 - tmp_345 + 1;
      real_t tmp_347 = tmp_61*(tmp_337 + tmp_94);
      real_t tmp_348 = tmp_61*(tmp_339 + tmp_96);
      real_t tmp_349 = tmp_61*(tmp_341 + tmp_98);
      real_t tmp_350 = tmp_347*tmp_79 + tmp_348*tmp_73 + tmp_349*tmp_66;
      real_t tmp_351 = tmp_347*tmp_77 + tmp_348*tmp_71 + tmp_349*tmp_64;
      real_t tmp_352 = tmp_347*tmp_75 + tmp_348*tmp_68 + tmp_349*tmp_51;
      real_t tmp_353 = -tmp_350 - tmp_351 - tmp_352 + 1;
      real_t tmp_354 = tmp_105*tmp_346;
      real_t tmp_355 = 0.020848748529055869*tmp_107;
      real_t tmp_356 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_357 = tmp_15*(tmp_20 + tmp_356);
      real_t tmp_358 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_359 = tmp_15*(tmp_27 + tmp_358);
      real_t tmp_360 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_361 = tmp_15*(tmp_34 + tmp_360);
      real_t tmp_362 = tmp_22*tmp_359 + tmp_29*tmp_361 + tmp_357*tmp_4;
      real_t tmp_363 = tmp_357*tmp_37 + tmp_359*tmp_38 + tmp_361*tmp_39;
      real_t tmp_364 = tmp_357*tmp_41 + tmp_359*tmp_42 + tmp_361*tmp_43;
      real_t tmp_365 = -tmp_362 - tmp_363 - tmp_364 + 1;
      real_t tmp_366 = tmp_61*(tmp_356 + tmp_94);
      real_t tmp_367 = tmp_61*(tmp_358 + tmp_96);
      real_t tmp_368 = tmp_61*(tmp_360 + tmp_98);
      real_t tmp_369 = tmp_366*tmp_79 + tmp_367*tmp_73 + tmp_368*tmp_66;
      real_t tmp_370 = tmp_366*tmp_77 + tmp_367*tmp_71 + tmp_368*tmp_64;
      real_t tmp_371 = tmp_366*tmp_75 + tmp_367*tmp_68 + tmp_368*tmp_51;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_105*tmp_365;
      real_t tmp_374 = 0.0068572537431980923*tmp_107;
      real_t tmp_375 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_4;
      real_t tmp_382 = tmp_37*tmp_376 + tmp_378*tmp_38 + tmp_380*tmp_39;
      real_t tmp_383 = tmp_376*tmp_41 + tmp_378*tmp_42 + tmp_380*tmp_43;
      real_t tmp_384 = -tmp_381 - tmp_382 - tmp_383 + 1;
      real_t tmp_385 = tmp_61*(tmp_375 + tmp_94);
      real_t tmp_386 = tmp_61*(tmp_377 + tmp_96);
      real_t tmp_387 = tmp_61*(tmp_379 + tmp_98);
      real_t tmp_388 = tmp_385*tmp_79 + tmp_386*tmp_73 + tmp_387*tmp_66;
      real_t tmp_389 = tmp_385*tmp_77 + tmp_386*tmp_71 + tmp_387*tmp_64;
      real_t tmp_390 = tmp_385*tmp_75 + tmp_386*tmp_68 + tmp_387*tmp_51;
      real_t tmp_391 = -tmp_388 - tmp_389 - tmp_390 + 1;
      real_t tmp_392 = tmp_105*tmp_384;
      real_t tmp_393 = 0.037198804536718075*tmp_107;
      real_t tmp_394 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_395 = tmp_15*(tmp_20 + tmp_394);
      real_t tmp_396 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_397 = tmp_15*(tmp_27 + tmp_396);
      real_t tmp_398 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_399 = tmp_15*(tmp_34 + tmp_398);
      real_t tmp_400 = tmp_22*tmp_397 + tmp_29*tmp_399 + tmp_395*tmp_4;
      real_t tmp_401 = tmp_37*tmp_395 + tmp_38*tmp_397 + tmp_39*tmp_399;
      real_t tmp_402 = tmp_395*tmp_41 + tmp_397*tmp_42 + tmp_399*tmp_43;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_61*(tmp_394 + tmp_94);
      real_t tmp_405 = tmp_61*(tmp_396 + tmp_96);
      real_t tmp_406 = tmp_61*(tmp_398 + tmp_98);
      real_t tmp_407 = tmp_404*tmp_79 + tmp_405*tmp_73 + tmp_406*tmp_66;
      real_t tmp_408 = tmp_404*tmp_77 + tmp_405*tmp_71 + tmp_406*tmp_64;
      real_t tmp_409 = tmp_404*tmp_75 + tmp_405*tmp_68 + tmp_406*tmp_51;
      real_t tmp_410 = -tmp_407 - tmp_408 - tmp_409 + 1;
      real_t tmp_411 = tmp_105*tmp_403;
      real_t tmp_412 = 0.042507265838595799*tmp_107;
      real_t tmp_413 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_414 = tmp_15*(tmp_20 + tmp_413);
      real_t tmp_415 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_416 = tmp_15*(tmp_27 + tmp_415);
      real_t tmp_417 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_418 = tmp_15*(tmp_34 + tmp_417);
      real_t tmp_419 = tmp_22*tmp_416 + tmp_29*tmp_418 + tmp_4*tmp_414;
      real_t tmp_420 = tmp_37*tmp_414 + tmp_38*tmp_416 + tmp_39*tmp_418;
      real_t tmp_421 = tmp_41*tmp_414 + tmp_416*tmp_42 + tmp_418*tmp_43;
      real_t tmp_422 = -tmp_419 - tmp_420 - tmp_421 + 1;
      real_t tmp_423 = tmp_61*(tmp_413 + tmp_94);
      real_t tmp_424 = tmp_61*(tmp_415 + tmp_96);
      real_t tmp_425 = tmp_61*(tmp_417 + tmp_98);
      real_t tmp_426 = tmp_423*tmp_79 + tmp_424*tmp_73 + tmp_425*tmp_66;
      real_t tmp_427 = tmp_423*tmp_77 + tmp_424*tmp_71 + tmp_425*tmp_64;
      real_t tmp_428 = tmp_423*tmp_75 + tmp_424*tmp_68 + tmp_425*tmp_51;
      real_t tmp_429 = -tmp_426 - tmp_427 - tmp_428 + 1;
      real_t tmp_430 = tmp_105*tmp_422;
      real_t tmp_431 = 0.0068572537431980923*tmp_107;
      real_t tmp_432 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_433 = tmp_15*(tmp_20 + tmp_432);
      real_t tmp_434 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_435 = tmp_15*(tmp_27 + tmp_434);
      real_t tmp_436 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_437 = tmp_15*(tmp_34 + tmp_436);
      real_t tmp_438 = tmp_22*tmp_435 + tmp_29*tmp_437 + tmp_4*tmp_433;
      real_t tmp_439 = tmp_37*tmp_433 + tmp_38*tmp_435 + tmp_39*tmp_437;
      real_t tmp_440 = tmp_41*tmp_433 + tmp_42*tmp_435 + tmp_43*tmp_437;
      real_t tmp_441 = -tmp_438 - tmp_439 - tmp_440 + 1;
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_94);
      real_t tmp_443 = tmp_61*(tmp_434 + tmp_96);
      real_t tmp_444 = tmp_61*(tmp_436 + tmp_98);
      real_t tmp_445 = tmp_442*tmp_79 + tmp_443*tmp_73 + tmp_444*tmp_66;
      real_t tmp_446 = tmp_442*tmp_77 + tmp_443*tmp_71 + tmp_444*tmp_64;
      real_t tmp_447 = tmp_442*tmp_75 + tmp_443*tmp_68 + tmp_444*tmp_51;
      real_t tmp_448 = -tmp_445 - tmp_446 - tmp_447 + 1;
      real_t tmp_449 = tmp_105*tmp_441;
      real_t tmp_450 = 0.037198804536718075*tmp_107;
      real_t tmp_451 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_452 = tmp_15*(tmp_20 + tmp_451);
      real_t tmp_453 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_454 = tmp_15*(tmp_27 + tmp_453);
      real_t tmp_455 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_456 = tmp_15*(tmp_34 + tmp_455);
      real_t tmp_457 = tmp_22*tmp_454 + tmp_29*tmp_456 + tmp_4*tmp_452;
      real_t tmp_458 = tmp_37*tmp_452 + tmp_38*tmp_454 + tmp_39*tmp_456;
      real_t tmp_459 = tmp_41*tmp_452 + tmp_42*tmp_454 + tmp_43*tmp_456;
      real_t tmp_460 = -tmp_457 - tmp_458 - tmp_459 + 1;
      real_t tmp_461 = tmp_61*(tmp_451 + tmp_94);
      real_t tmp_462 = tmp_61*(tmp_453 + tmp_96);
      real_t tmp_463 = tmp_61*(tmp_455 + tmp_98);
      real_t tmp_464 = tmp_461*tmp_79 + tmp_462*tmp_73 + tmp_463*tmp_66;
      real_t tmp_465 = tmp_461*tmp_77 + tmp_462*tmp_71 + tmp_463*tmp_64;
      real_t tmp_466 = tmp_461*tmp_75 + tmp_462*tmp_68 + tmp_463*tmp_51;
      real_t tmp_467 = -tmp_464 - tmp_465 - tmp_466 + 1;
      real_t tmp_468 = tmp_105*tmp_460;
      real_t tmp_469 = 0.042507265838595799*tmp_107;
      real_t tmp_470 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_471 = tmp_15*(tmp_20 + tmp_470);
      real_t tmp_472 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_473 = tmp_15*(tmp_27 + tmp_472);
      real_t tmp_474 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_475 = tmp_15*(tmp_34 + tmp_474);
      real_t tmp_476 = tmp_22*tmp_473 + tmp_29*tmp_475 + tmp_4*tmp_471;
      real_t tmp_477 = tmp_37*tmp_471 + tmp_38*tmp_473 + tmp_39*tmp_475;
      real_t tmp_478 = tmp_41*tmp_471 + tmp_42*tmp_473 + tmp_43*tmp_475;
      real_t tmp_479 = -tmp_476 - tmp_477 - tmp_478 + 1;
      real_t tmp_480 = tmp_61*(tmp_470 + tmp_94);
      real_t tmp_481 = tmp_61*(tmp_472 + tmp_96);
      real_t tmp_482 = tmp_61*(tmp_474 + tmp_98);
      real_t tmp_483 = tmp_480*tmp_79 + tmp_481*tmp_73 + tmp_482*tmp_66;
      real_t tmp_484 = tmp_480*tmp_77 + tmp_481*tmp_71 + tmp_482*tmp_64;
      real_t tmp_485 = tmp_480*tmp_75 + tmp_481*tmp_68 + tmp_482*tmp_51;
      real_t tmp_486 = -tmp_483 - tmp_484 - tmp_485 + 1;
      real_t tmp_487 = tmp_105*tmp_479;
      real_t tmp_488 = 0.019202922745021479*tmp_107;
      real_t tmp_489 = 1.0*p_affine_13_0*tmp_67 + 1.0*p_affine_13_1*tmp_74 + 1.0*p_affine_13_2*tmp_80;
      real_t tmp_490 = 1.0*p_affine_13_0*tmp_65 + 1.0*p_affine_13_1*tmp_72 + 1.0*p_affine_13_2*tmp_78;
      real_t tmp_491 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_70 + 1.0*p_affine_13_2*tmp_76;
      real_t tmp_492 = p_affine_13_0*tmp_85 + p_affine_13_1*tmp_89 + p_affine_13_2*tmp_92;
      real_t tmp_493 = tmp_105*tmp_36;
      real_t tmp_494 = tmp_105*tmp_115;
      real_t tmp_495 = tmp_105*tmp_134;
      real_t tmp_496 = tmp_105*tmp_153;
      real_t tmp_497 = tmp_105*tmp_172;
      real_t tmp_498 = tmp_105*tmp_191;
      real_t tmp_499 = tmp_105*tmp_210;
      real_t tmp_500 = tmp_105*tmp_229;
      real_t tmp_501 = tmp_105*tmp_248;
      real_t tmp_502 = tmp_105*tmp_267;
      real_t tmp_503 = tmp_105*tmp_286;
      real_t tmp_504 = tmp_105*tmp_305;
      real_t tmp_505 = tmp_105*tmp_324;
      real_t tmp_506 = tmp_105*tmp_343;
      real_t tmp_507 = tmp_105*tmp_362;
      real_t tmp_508 = tmp_105*tmp_381;
      real_t tmp_509 = tmp_105*tmp_400;
      real_t tmp_510 = tmp_105*tmp_419;
      real_t tmp_511 = tmp_105*tmp_438;
      real_t tmp_512 = tmp_105*tmp_457;
      real_t tmp_513 = tmp_105*tmp_476;
      real_t tmp_514 = p_affine_13_0*tmp_84 + p_affine_13_1*tmp_88 + p_affine_13_2*tmp_91;
      real_t tmp_515 = tmp_105*tmp_40;
      real_t tmp_516 = tmp_105*tmp_116;
      real_t tmp_517 = tmp_105*tmp_135;
      real_t tmp_518 = tmp_105*tmp_154;
      real_t tmp_519 = tmp_105*tmp_173;
      real_t tmp_520 = tmp_105*tmp_192;
      real_t tmp_521 = tmp_105*tmp_211;
      real_t tmp_522 = tmp_105*tmp_230;
      real_t tmp_523 = tmp_105*tmp_249;
      real_t tmp_524 = tmp_105*tmp_268;
      real_t tmp_525 = tmp_105*tmp_287;
      real_t tmp_526 = tmp_105*tmp_306;
      real_t tmp_527 = tmp_105*tmp_325;
      real_t tmp_528 = tmp_105*tmp_344;
      real_t tmp_529 = tmp_105*tmp_363;
      real_t tmp_530 = tmp_105*tmp_382;
      real_t tmp_531 = tmp_105*tmp_401;
      real_t tmp_532 = tmp_105*tmp_420;
      real_t tmp_533 = tmp_105*tmp_439;
      real_t tmp_534 = tmp_105*tmp_458;
      real_t tmp_535 = tmp_105*tmp_477;
      real_t tmp_536 = p_affine_13_0*tmp_83 + p_affine_13_1*tmp_87 + p_affine_13_2*tmp_90;
      real_t tmp_537 = tmp_105*tmp_44;
      real_t tmp_538 = tmp_105*tmp_117;
      real_t tmp_539 = tmp_105*tmp_136;
      real_t tmp_540 = tmp_105*tmp_155;
      real_t tmp_541 = tmp_105*tmp_174;
      real_t tmp_542 = tmp_105*tmp_193;
      real_t tmp_543 = tmp_105*tmp_212;
      real_t tmp_544 = tmp_105*tmp_231;
      real_t tmp_545 = tmp_105*tmp_250;
      real_t tmp_546 = tmp_105*tmp_269;
      real_t tmp_547 = tmp_105*tmp_288;
      real_t tmp_548 = tmp_105*tmp_307;
      real_t tmp_549 = tmp_105*tmp_326;
      real_t tmp_550 = tmp_105*tmp_345;
      real_t tmp_551 = tmp_105*tmp_364;
      real_t tmp_552 = tmp_105*tmp_383;
      real_t tmp_553 = tmp_105*tmp_402;
      real_t tmp_554 = tmp_105*tmp_421;
      real_t tmp_555 = tmp_105*tmp_440;
      real_t tmp_556 = tmp_105*tmp_459;
      real_t tmp_557 = tmp_105*tmp_478;
      real_t a_0_0 = tmp_108*(-tmp_103*tmp_106 + tmp_103*tmp_93 - tmp_45*tmp_81) + tmp_127*(-tmp_118*tmp_81 - tmp_125*tmp_126 + tmp_125*tmp_93) + tmp_146*(-tmp_137*tmp_81 - tmp_144*tmp_145 + tmp_144*tmp_93) + tmp_165*(-tmp_156*tmp_81 - tmp_163*tmp_164 + tmp_163*tmp_93) + tmp_184*(-tmp_175*tmp_81 - tmp_182*tmp_183 + tmp_182*tmp_93) + tmp_203*(-tmp_194*tmp_81 - tmp_201*tmp_202 + tmp_201*tmp_93) + tmp_222*(-tmp_213*tmp_81 - tmp_220*tmp_221 + tmp_220*tmp_93) + tmp_241*(-tmp_232*tmp_81 - tmp_239*tmp_240 + tmp_239*tmp_93) + tmp_260*(-tmp_251*tmp_81 - tmp_258*tmp_259 + tmp_258*tmp_93) + tmp_279*(-tmp_270*tmp_81 - tmp_277*tmp_278 + tmp_277*tmp_93) + tmp_298*(-tmp_289*tmp_81 - tmp_296*tmp_297 + tmp_296*tmp_93) + tmp_317*(-tmp_308*tmp_81 - tmp_315*tmp_316 + tmp_315*tmp_93) + tmp_336*(-tmp_327*tmp_81 - tmp_334*tmp_335 + tmp_334*tmp_93) + tmp_355*(-tmp_346*tmp_81 - tmp_353*tmp_354 + tmp_353*tmp_93) + tmp_374*(-tmp_365*tmp_81 - tmp_372*tmp_373 + tmp_372*tmp_93) + tmp_393*(-tmp_384*tmp_81 - tmp_391*tmp_392 + tmp_391*tmp_93) + tmp_412*(-tmp_403*tmp_81 - tmp_410*tmp_411 + tmp_410*tmp_93) + tmp_431*(-tmp_422*tmp_81 - tmp_429*tmp_430 + tmp_429*tmp_93) + tmp_450*(-tmp_441*tmp_81 - tmp_448*tmp_449 + tmp_448*tmp_93) + tmp_469*(-tmp_460*tmp_81 - tmp_467*tmp_468 + tmp_467*tmp_93) + tmp_488*(-tmp_479*tmp_81 - tmp_486*tmp_487 + tmp_486*tmp_93);
      real_t a_0_1 = tmp_108*(-tmp_100*tmp_106 + tmp_100*tmp_93 - tmp_45*tmp_489) + tmp_127*(-tmp_118*tmp_489 - tmp_122*tmp_126 + tmp_122*tmp_93) + tmp_146*(-tmp_137*tmp_489 - tmp_141*tmp_145 + tmp_141*tmp_93) + tmp_165*(-tmp_156*tmp_489 - tmp_160*tmp_164 + tmp_160*tmp_93) + tmp_184*(-tmp_175*tmp_489 - tmp_179*tmp_183 + tmp_179*tmp_93) + tmp_203*(-tmp_194*tmp_489 - tmp_198*tmp_202 + tmp_198*tmp_93) + tmp_222*(-tmp_213*tmp_489 - tmp_217*tmp_221 + tmp_217*tmp_93) + tmp_241*(-tmp_232*tmp_489 - tmp_236*tmp_240 + tmp_236*tmp_93) + tmp_260*(-tmp_251*tmp_489 - tmp_255*tmp_259 + tmp_255*tmp_93) + tmp_279*(-tmp_270*tmp_489 - tmp_274*tmp_278 + tmp_274*tmp_93) + tmp_298*(-tmp_289*tmp_489 - tmp_293*tmp_297 + tmp_293*tmp_93) + tmp_317*(-tmp_308*tmp_489 - tmp_312*tmp_316 + tmp_312*tmp_93) + tmp_336*(-tmp_327*tmp_489 - tmp_331*tmp_335 + tmp_331*tmp_93) + tmp_355*(-tmp_346*tmp_489 - tmp_350*tmp_354 + tmp_350*tmp_93) + tmp_374*(-tmp_365*tmp_489 - tmp_369*tmp_373 + tmp_369*tmp_93) + tmp_393*(-tmp_384*tmp_489 - tmp_388*tmp_392 + tmp_388*tmp_93) + tmp_412*(-tmp_403*tmp_489 - tmp_407*tmp_411 + tmp_407*tmp_93) + tmp_431*(-tmp_422*tmp_489 - tmp_426*tmp_430 + tmp_426*tmp_93) + tmp_450*(-tmp_441*tmp_489 - tmp_445*tmp_449 + tmp_445*tmp_93) + tmp_469*(-tmp_460*tmp_489 - tmp_464*tmp_468 + tmp_464*tmp_93) + tmp_488*(-tmp_479*tmp_489 - tmp_483*tmp_487 + tmp_483*tmp_93);
      real_t a_0_2 = tmp_108*(-tmp_101*tmp_106 + tmp_101*tmp_93 - tmp_45*tmp_490) + tmp_127*(-tmp_118*tmp_490 - tmp_123*tmp_126 + tmp_123*tmp_93) + tmp_146*(-tmp_137*tmp_490 - tmp_142*tmp_145 + tmp_142*tmp_93) + tmp_165*(-tmp_156*tmp_490 - tmp_161*tmp_164 + tmp_161*tmp_93) + tmp_184*(-tmp_175*tmp_490 - tmp_180*tmp_183 + tmp_180*tmp_93) + tmp_203*(-tmp_194*tmp_490 - tmp_199*tmp_202 + tmp_199*tmp_93) + tmp_222*(-tmp_213*tmp_490 - tmp_218*tmp_221 + tmp_218*tmp_93) + tmp_241*(-tmp_232*tmp_490 - tmp_237*tmp_240 + tmp_237*tmp_93) + tmp_260*(-tmp_251*tmp_490 - tmp_256*tmp_259 + tmp_256*tmp_93) + tmp_279*(-tmp_270*tmp_490 - tmp_275*tmp_278 + tmp_275*tmp_93) + tmp_298*(-tmp_289*tmp_490 - tmp_294*tmp_297 + tmp_294*tmp_93) + tmp_317*(-tmp_308*tmp_490 - tmp_313*tmp_316 + tmp_313*tmp_93) + tmp_336*(-tmp_327*tmp_490 - tmp_332*tmp_335 + tmp_332*tmp_93) + tmp_355*(-tmp_346*tmp_490 - tmp_351*tmp_354 + tmp_351*tmp_93) + tmp_374*(-tmp_365*tmp_490 - tmp_370*tmp_373 + tmp_370*tmp_93) + tmp_393*(-tmp_384*tmp_490 - tmp_389*tmp_392 + tmp_389*tmp_93) + tmp_412*(-tmp_403*tmp_490 - tmp_408*tmp_411 + tmp_408*tmp_93) + tmp_431*(-tmp_422*tmp_490 - tmp_427*tmp_430 + tmp_427*tmp_93) + tmp_450*(-tmp_441*tmp_490 - tmp_446*tmp_449 + tmp_446*tmp_93) + tmp_469*(-tmp_460*tmp_490 - tmp_465*tmp_468 + tmp_465*tmp_93) + tmp_488*(-tmp_479*tmp_490 - tmp_484*tmp_487 + tmp_484*tmp_93);
      real_t a_0_3 = tmp_108*(-tmp_102*tmp_106 + tmp_102*tmp_93 - tmp_45*tmp_491) + tmp_127*(-tmp_118*tmp_491 - tmp_124*tmp_126 + tmp_124*tmp_93) + tmp_146*(-tmp_137*tmp_491 - tmp_143*tmp_145 + tmp_143*tmp_93) + tmp_165*(-tmp_156*tmp_491 - tmp_162*tmp_164 + tmp_162*tmp_93) + tmp_184*(-tmp_175*tmp_491 - tmp_181*tmp_183 + tmp_181*tmp_93) + tmp_203*(-tmp_194*tmp_491 - tmp_200*tmp_202 + tmp_200*tmp_93) + tmp_222*(-tmp_213*tmp_491 - tmp_219*tmp_221 + tmp_219*tmp_93) + tmp_241*(-tmp_232*tmp_491 - tmp_238*tmp_240 + tmp_238*tmp_93) + tmp_260*(-tmp_251*tmp_491 - tmp_257*tmp_259 + tmp_257*tmp_93) + tmp_279*(-tmp_270*tmp_491 - tmp_276*tmp_278 + tmp_276*tmp_93) + tmp_298*(-tmp_289*tmp_491 - tmp_295*tmp_297 + tmp_295*tmp_93) + tmp_317*(-tmp_308*tmp_491 - tmp_314*tmp_316 + tmp_314*tmp_93) + tmp_336*(-tmp_327*tmp_491 - tmp_333*tmp_335 + tmp_333*tmp_93) + tmp_355*(-tmp_346*tmp_491 - tmp_352*tmp_354 + tmp_352*tmp_93) + tmp_374*(-tmp_365*tmp_491 - tmp_371*tmp_373 + tmp_371*tmp_93) + tmp_393*(-tmp_384*tmp_491 - tmp_390*tmp_392 + tmp_390*tmp_93) + tmp_412*(-tmp_403*tmp_491 - tmp_409*tmp_411 + tmp_409*tmp_93) + tmp_431*(-tmp_422*tmp_491 - tmp_428*tmp_430 + tmp_428*tmp_93) + tmp_450*(-tmp_441*tmp_491 - tmp_447*tmp_449 + tmp_447*tmp_93) + tmp_469*(-tmp_460*tmp_491 - tmp_466*tmp_468 + tmp_466*tmp_93) + tmp_488*(-tmp_479*tmp_491 - tmp_485*tmp_487 + tmp_485*tmp_93);
      real_t a_1_0 = tmp_108*(tmp_103*tmp_492 - tmp_103*tmp_493 - tmp_36*tmp_81) + tmp_127*(-tmp_115*tmp_81 + tmp_125*tmp_492 - tmp_125*tmp_494) + tmp_146*(-tmp_134*tmp_81 + tmp_144*tmp_492 - tmp_144*tmp_495) + tmp_165*(-tmp_153*tmp_81 + tmp_163*tmp_492 - tmp_163*tmp_496) + tmp_184*(-tmp_172*tmp_81 + tmp_182*tmp_492 - tmp_182*tmp_497) + tmp_203*(-tmp_191*tmp_81 + tmp_201*tmp_492 - tmp_201*tmp_498) + tmp_222*(-tmp_210*tmp_81 + tmp_220*tmp_492 - tmp_220*tmp_499) + tmp_241*(-tmp_229*tmp_81 + tmp_239*tmp_492 - tmp_239*tmp_500) + tmp_260*(-tmp_248*tmp_81 + tmp_258*tmp_492 - tmp_258*tmp_501) + tmp_279*(-tmp_267*tmp_81 + tmp_277*tmp_492 - tmp_277*tmp_502) + tmp_298*(-tmp_286*tmp_81 + tmp_296*tmp_492 - tmp_296*tmp_503) + tmp_317*(-tmp_305*tmp_81 + tmp_315*tmp_492 - tmp_315*tmp_504) + tmp_336*(-tmp_324*tmp_81 + tmp_334*tmp_492 - tmp_334*tmp_505) + tmp_355*(-tmp_343*tmp_81 + tmp_353*tmp_492 - tmp_353*tmp_506) + tmp_374*(-tmp_362*tmp_81 + tmp_372*tmp_492 - tmp_372*tmp_507) + tmp_393*(-tmp_381*tmp_81 + tmp_391*tmp_492 - tmp_391*tmp_508) + tmp_412*(-tmp_400*tmp_81 + tmp_410*tmp_492 - tmp_410*tmp_509) + tmp_431*(-tmp_419*tmp_81 + tmp_429*tmp_492 - tmp_429*tmp_510) + tmp_450*(-tmp_438*tmp_81 + tmp_448*tmp_492 - tmp_448*tmp_511) + tmp_469*(-tmp_457*tmp_81 + tmp_467*tmp_492 - tmp_467*tmp_512) + tmp_488*(-tmp_476*tmp_81 + tmp_486*tmp_492 - tmp_486*tmp_513);
      real_t a_1_1 = tmp_108*(tmp_100*tmp_492 - tmp_100*tmp_493 - tmp_36*tmp_489) + tmp_127*(-tmp_115*tmp_489 + tmp_122*tmp_492 - tmp_122*tmp_494) + tmp_146*(-tmp_134*tmp_489 + tmp_141*tmp_492 - tmp_141*tmp_495) + tmp_165*(-tmp_153*tmp_489 + tmp_160*tmp_492 - tmp_160*tmp_496) + tmp_184*(-tmp_172*tmp_489 + tmp_179*tmp_492 - tmp_179*tmp_497) + tmp_203*(-tmp_191*tmp_489 + tmp_198*tmp_492 - tmp_198*tmp_498) + tmp_222*(-tmp_210*tmp_489 + tmp_217*tmp_492 - tmp_217*tmp_499) + tmp_241*(-tmp_229*tmp_489 + tmp_236*tmp_492 - tmp_236*tmp_500) + tmp_260*(-tmp_248*tmp_489 + tmp_255*tmp_492 - tmp_255*tmp_501) + tmp_279*(-tmp_267*tmp_489 + tmp_274*tmp_492 - tmp_274*tmp_502) + tmp_298*(-tmp_286*tmp_489 + tmp_293*tmp_492 - tmp_293*tmp_503) + tmp_317*(-tmp_305*tmp_489 + tmp_312*tmp_492 - tmp_312*tmp_504) + tmp_336*(-tmp_324*tmp_489 + tmp_331*tmp_492 - tmp_331*tmp_505) + tmp_355*(-tmp_343*tmp_489 + tmp_350*tmp_492 - tmp_350*tmp_506) + tmp_374*(-tmp_362*tmp_489 + tmp_369*tmp_492 - tmp_369*tmp_507) + tmp_393*(-tmp_381*tmp_489 + tmp_388*tmp_492 - tmp_388*tmp_508) + tmp_412*(-tmp_400*tmp_489 + tmp_407*tmp_492 - tmp_407*tmp_509) + tmp_431*(-tmp_419*tmp_489 + tmp_426*tmp_492 - tmp_426*tmp_510) + tmp_450*(-tmp_438*tmp_489 + tmp_445*tmp_492 - tmp_445*tmp_511) + tmp_469*(-tmp_457*tmp_489 + tmp_464*tmp_492 - tmp_464*tmp_512) + tmp_488*(-tmp_476*tmp_489 + tmp_483*tmp_492 - tmp_483*tmp_513);
      real_t a_1_2 = tmp_108*(tmp_101*tmp_492 - tmp_101*tmp_493 - tmp_36*tmp_490) + tmp_127*(-tmp_115*tmp_490 + tmp_123*tmp_492 - tmp_123*tmp_494) + tmp_146*(-tmp_134*tmp_490 + tmp_142*tmp_492 - tmp_142*tmp_495) + tmp_165*(-tmp_153*tmp_490 + tmp_161*tmp_492 - tmp_161*tmp_496) + tmp_184*(-tmp_172*tmp_490 + tmp_180*tmp_492 - tmp_180*tmp_497) + tmp_203*(-tmp_191*tmp_490 + tmp_199*tmp_492 - tmp_199*tmp_498) + tmp_222*(-tmp_210*tmp_490 + tmp_218*tmp_492 - tmp_218*tmp_499) + tmp_241*(-tmp_229*tmp_490 + tmp_237*tmp_492 - tmp_237*tmp_500) + tmp_260*(-tmp_248*tmp_490 + tmp_256*tmp_492 - tmp_256*tmp_501) + tmp_279*(-tmp_267*tmp_490 + tmp_275*tmp_492 - tmp_275*tmp_502) + tmp_298*(-tmp_286*tmp_490 + tmp_294*tmp_492 - tmp_294*tmp_503) + tmp_317*(-tmp_305*tmp_490 + tmp_313*tmp_492 - tmp_313*tmp_504) + tmp_336*(-tmp_324*tmp_490 + tmp_332*tmp_492 - tmp_332*tmp_505) + tmp_355*(-tmp_343*tmp_490 + tmp_351*tmp_492 - tmp_351*tmp_506) + tmp_374*(-tmp_362*tmp_490 + tmp_370*tmp_492 - tmp_370*tmp_507) + tmp_393*(-tmp_381*tmp_490 + tmp_389*tmp_492 - tmp_389*tmp_508) + tmp_412*(-tmp_400*tmp_490 + tmp_408*tmp_492 - tmp_408*tmp_509) + tmp_431*(-tmp_419*tmp_490 + tmp_427*tmp_492 - tmp_427*tmp_510) + tmp_450*(-tmp_438*tmp_490 + tmp_446*tmp_492 - tmp_446*tmp_511) + tmp_469*(-tmp_457*tmp_490 + tmp_465*tmp_492 - tmp_465*tmp_512) + tmp_488*(-tmp_476*tmp_490 + tmp_484*tmp_492 - tmp_484*tmp_513);
      real_t a_1_3 = tmp_108*(tmp_102*tmp_492 - tmp_102*tmp_493 - tmp_36*tmp_491) + tmp_127*(-tmp_115*tmp_491 + tmp_124*tmp_492 - tmp_124*tmp_494) + tmp_146*(-tmp_134*tmp_491 + tmp_143*tmp_492 - tmp_143*tmp_495) + tmp_165*(-tmp_153*tmp_491 + tmp_162*tmp_492 - tmp_162*tmp_496) + tmp_184*(-tmp_172*tmp_491 + tmp_181*tmp_492 - tmp_181*tmp_497) + tmp_203*(-tmp_191*tmp_491 + tmp_200*tmp_492 - tmp_200*tmp_498) + tmp_222*(-tmp_210*tmp_491 + tmp_219*tmp_492 - tmp_219*tmp_499) + tmp_241*(-tmp_229*tmp_491 + tmp_238*tmp_492 - tmp_238*tmp_500) + tmp_260*(-tmp_248*tmp_491 + tmp_257*tmp_492 - tmp_257*tmp_501) + tmp_279*(-tmp_267*tmp_491 + tmp_276*tmp_492 - tmp_276*tmp_502) + tmp_298*(-tmp_286*tmp_491 + tmp_295*tmp_492 - tmp_295*tmp_503) + tmp_317*(-tmp_305*tmp_491 + tmp_314*tmp_492 - tmp_314*tmp_504) + tmp_336*(-tmp_324*tmp_491 + tmp_333*tmp_492 - tmp_333*tmp_505) + tmp_355*(-tmp_343*tmp_491 + tmp_352*tmp_492 - tmp_352*tmp_506) + tmp_374*(-tmp_362*tmp_491 + tmp_371*tmp_492 - tmp_371*tmp_507) + tmp_393*(-tmp_381*tmp_491 + tmp_390*tmp_492 - tmp_390*tmp_508) + tmp_412*(-tmp_400*tmp_491 + tmp_409*tmp_492 - tmp_409*tmp_509) + tmp_431*(-tmp_419*tmp_491 + tmp_428*tmp_492 - tmp_428*tmp_510) + tmp_450*(-tmp_438*tmp_491 + tmp_447*tmp_492 - tmp_447*tmp_511) + tmp_469*(-tmp_457*tmp_491 + tmp_466*tmp_492 - tmp_466*tmp_512) + tmp_488*(-tmp_476*tmp_491 + tmp_485*tmp_492 - tmp_485*tmp_513);
      real_t a_2_0 = tmp_108*(tmp_103*tmp_514 - tmp_103*tmp_515 - tmp_40*tmp_81) + tmp_127*(-tmp_116*tmp_81 + tmp_125*tmp_514 - tmp_125*tmp_516) + tmp_146*(-tmp_135*tmp_81 + tmp_144*tmp_514 - tmp_144*tmp_517) + tmp_165*(-tmp_154*tmp_81 + tmp_163*tmp_514 - tmp_163*tmp_518) + tmp_184*(-tmp_173*tmp_81 + tmp_182*tmp_514 - tmp_182*tmp_519) + tmp_203*(-tmp_192*tmp_81 + tmp_201*tmp_514 - tmp_201*tmp_520) + tmp_222*(-tmp_211*tmp_81 + tmp_220*tmp_514 - tmp_220*tmp_521) + tmp_241*(-tmp_230*tmp_81 + tmp_239*tmp_514 - tmp_239*tmp_522) + tmp_260*(-tmp_249*tmp_81 + tmp_258*tmp_514 - tmp_258*tmp_523) + tmp_279*(-tmp_268*tmp_81 + tmp_277*tmp_514 - tmp_277*tmp_524) + tmp_298*(-tmp_287*tmp_81 + tmp_296*tmp_514 - tmp_296*tmp_525) + tmp_317*(-tmp_306*tmp_81 + tmp_315*tmp_514 - tmp_315*tmp_526) + tmp_336*(-tmp_325*tmp_81 + tmp_334*tmp_514 - tmp_334*tmp_527) + tmp_355*(-tmp_344*tmp_81 + tmp_353*tmp_514 - tmp_353*tmp_528) + tmp_374*(-tmp_363*tmp_81 + tmp_372*tmp_514 - tmp_372*tmp_529) + tmp_393*(-tmp_382*tmp_81 + tmp_391*tmp_514 - tmp_391*tmp_530) + tmp_412*(-tmp_401*tmp_81 + tmp_410*tmp_514 - tmp_410*tmp_531) + tmp_431*(-tmp_420*tmp_81 + tmp_429*tmp_514 - tmp_429*tmp_532) + tmp_450*(-tmp_439*tmp_81 + tmp_448*tmp_514 - tmp_448*tmp_533) + tmp_469*(-tmp_458*tmp_81 + tmp_467*tmp_514 - tmp_467*tmp_534) + tmp_488*(-tmp_477*tmp_81 + tmp_486*tmp_514 - tmp_486*tmp_535);
      real_t a_2_1 = tmp_108*(tmp_100*tmp_514 - tmp_100*tmp_515 - tmp_40*tmp_489) + tmp_127*(-tmp_116*tmp_489 + tmp_122*tmp_514 - tmp_122*tmp_516) + tmp_146*(-tmp_135*tmp_489 + tmp_141*tmp_514 - tmp_141*tmp_517) + tmp_165*(-tmp_154*tmp_489 + tmp_160*tmp_514 - tmp_160*tmp_518) + tmp_184*(-tmp_173*tmp_489 + tmp_179*tmp_514 - tmp_179*tmp_519) + tmp_203*(-tmp_192*tmp_489 + tmp_198*tmp_514 - tmp_198*tmp_520) + tmp_222*(-tmp_211*tmp_489 + tmp_217*tmp_514 - tmp_217*tmp_521) + tmp_241*(-tmp_230*tmp_489 + tmp_236*tmp_514 - tmp_236*tmp_522) + tmp_260*(-tmp_249*tmp_489 + tmp_255*tmp_514 - tmp_255*tmp_523) + tmp_279*(-tmp_268*tmp_489 + tmp_274*tmp_514 - tmp_274*tmp_524) + tmp_298*(-tmp_287*tmp_489 + tmp_293*tmp_514 - tmp_293*tmp_525) + tmp_317*(-tmp_306*tmp_489 + tmp_312*tmp_514 - tmp_312*tmp_526) + tmp_336*(-tmp_325*tmp_489 + tmp_331*tmp_514 - tmp_331*tmp_527) + tmp_355*(-tmp_344*tmp_489 + tmp_350*tmp_514 - tmp_350*tmp_528) + tmp_374*(-tmp_363*tmp_489 + tmp_369*tmp_514 - tmp_369*tmp_529) + tmp_393*(-tmp_382*tmp_489 + tmp_388*tmp_514 - tmp_388*tmp_530) + tmp_412*(-tmp_401*tmp_489 + tmp_407*tmp_514 - tmp_407*tmp_531) + tmp_431*(-tmp_420*tmp_489 + tmp_426*tmp_514 - tmp_426*tmp_532) + tmp_450*(-tmp_439*tmp_489 + tmp_445*tmp_514 - tmp_445*tmp_533) + tmp_469*(-tmp_458*tmp_489 + tmp_464*tmp_514 - tmp_464*tmp_534) + tmp_488*(-tmp_477*tmp_489 + tmp_483*tmp_514 - tmp_483*tmp_535);
      real_t a_2_2 = tmp_108*(tmp_101*tmp_514 - tmp_101*tmp_515 - tmp_40*tmp_490) + tmp_127*(-tmp_116*tmp_490 + tmp_123*tmp_514 - tmp_123*tmp_516) + tmp_146*(-tmp_135*tmp_490 + tmp_142*tmp_514 - tmp_142*tmp_517) + tmp_165*(-tmp_154*tmp_490 + tmp_161*tmp_514 - tmp_161*tmp_518) + tmp_184*(-tmp_173*tmp_490 + tmp_180*tmp_514 - tmp_180*tmp_519) + tmp_203*(-tmp_192*tmp_490 + tmp_199*tmp_514 - tmp_199*tmp_520) + tmp_222*(-tmp_211*tmp_490 + tmp_218*tmp_514 - tmp_218*tmp_521) + tmp_241*(-tmp_230*tmp_490 + tmp_237*tmp_514 - tmp_237*tmp_522) + tmp_260*(-tmp_249*tmp_490 + tmp_256*tmp_514 - tmp_256*tmp_523) + tmp_279*(-tmp_268*tmp_490 + tmp_275*tmp_514 - tmp_275*tmp_524) + tmp_298*(-tmp_287*tmp_490 + tmp_294*tmp_514 - tmp_294*tmp_525) + tmp_317*(-tmp_306*tmp_490 + tmp_313*tmp_514 - tmp_313*tmp_526) + tmp_336*(-tmp_325*tmp_490 + tmp_332*tmp_514 - tmp_332*tmp_527) + tmp_355*(-tmp_344*tmp_490 + tmp_351*tmp_514 - tmp_351*tmp_528) + tmp_374*(-tmp_363*tmp_490 + tmp_370*tmp_514 - tmp_370*tmp_529) + tmp_393*(-tmp_382*tmp_490 + tmp_389*tmp_514 - tmp_389*tmp_530) + tmp_412*(-tmp_401*tmp_490 + tmp_408*tmp_514 - tmp_408*tmp_531) + tmp_431*(-tmp_420*tmp_490 + tmp_427*tmp_514 - tmp_427*tmp_532) + tmp_450*(-tmp_439*tmp_490 + tmp_446*tmp_514 - tmp_446*tmp_533) + tmp_469*(-tmp_458*tmp_490 + tmp_465*tmp_514 - tmp_465*tmp_534) + tmp_488*(-tmp_477*tmp_490 + tmp_484*tmp_514 - tmp_484*tmp_535);
      real_t a_2_3 = tmp_108*(tmp_102*tmp_514 - tmp_102*tmp_515 - tmp_40*tmp_491) + tmp_127*(-tmp_116*tmp_491 + tmp_124*tmp_514 - tmp_124*tmp_516) + tmp_146*(-tmp_135*tmp_491 + tmp_143*tmp_514 - tmp_143*tmp_517) + tmp_165*(-tmp_154*tmp_491 + tmp_162*tmp_514 - tmp_162*tmp_518) + tmp_184*(-tmp_173*tmp_491 + tmp_181*tmp_514 - tmp_181*tmp_519) + tmp_203*(-tmp_192*tmp_491 + tmp_200*tmp_514 - tmp_200*tmp_520) + tmp_222*(-tmp_211*tmp_491 + tmp_219*tmp_514 - tmp_219*tmp_521) + tmp_241*(-tmp_230*tmp_491 + tmp_238*tmp_514 - tmp_238*tmp_522) + tmp_260*(-tmp_249*tmp_491 + tmp_257*tmp_514 - tmp_257*tmp_523) + tmp_279*(-tmp_268*tmp_491 + tmp_276*tmp_514 - tmp_276*tmp_524) + tmp_298*(-tmp_287*tmp_491 + tmp_295*tmp_514 - tmp_295*tmp_525) + tmp_317*(-tmp_306*tmp_491 + tmp_314*tmp_514 - tmp_314*tmp_526) + tmp_336*(-tmp_325*tmp_491 + tmp_333*tmp_514 - tmp_333*tmp_527) + tmp_355*(-tmp_344*tmp_491 + tmp_352*tmp_514 - tmp_352*tmp_528) + tmp_374*(-tmp_363*tmp_491 + tmp_371*tmp_514 - tmp_371*tmp_529) + tmp_393*(-tmp_382*tmp_491 + tmp_390*tmp_514 - tmp_390*tmp_530) + tmp_412*(-tmp_401*tmp_491 + tmp_409*tmp_514 - tmp_409*tmp_531) + tmp_431*(-tmp_420*tmp_491 + tmp_428*tmp_514 - tmp_428*tmp_532) + tmp_450*(-tmp_439*tmp_491 + tmp_447*tmp_514 - tmp_447*tmp_533) + tmp_469*(-tmp_458*tmp_491 + tmp_466*tmp_514 - tmp_466*tmp_534) + tmp_488*(-tmp_477*tmp_491 + tmp_485*tmp_514 - tmp_485*tmp_535);
      real_t a_3_0 = tmp_108*(tmp_103*tmp_536 - tmp_103*tmp_537 - tmp_44*tmp_81) + tmp_127*(-tmp_117*tmp_81 + tmp_125*tmp_536 - tmp_125*tmp_538) + tmp_146*(-tmp_136*tmp_81 + tmp_144*tmp_536 - tmp_144*tmp_539) + tmp_165*(-tmp_155*tmp_81 + tmp_163*tmp_536 - tmp_163*tmp_540) + tmp_184*(-tmp_174*tmp_81 + tmp_182*tmp_536 - tmp_182*tmp_541) + tmp_203*(-tmp_193*tmp_81 + tmp_201*tmp_536 - tmp_201*tmp_542) + tmp_222*(-tmp_212*tmp_81 + tmp_220*tmp_536 - tmp_220*tmp_543) + tmp_241*(-tmp_231*tmp_81 + tmp_239*tmp_536 - tmp_239*tmp_544) + tmp_260*(-tmp_250*tmp_81 + tmp_258*tmp_536 - tmp_258*tmp_545) + tmp_279*(-tmp_269*tmp_81 + tmp_277*tmp_536 - tmp_277*tmp_546) + tmp_298*(-tmp_288*tmp_81 + tmp_296*tmp_536 - tmp_296*tmp_547) + tmp_317*(-tmp_307*tmp_81 + tmp_315*tmp_536 - tmp_315*tmp_548) + tmp_336*(-tmp_326*tmp_81 + tmp_334*tmp_536 - tmp_334*tmp_549) + tmp_355*(-tmp_345*tmp_81 + tmp_353*tmp_536 - tmp_353*tmp_550) + tmp_374*(-tmp_364*tmp_81 + tmp_372*tmp_536 - tmp_372*tmp_551) + tmp_393*(-tmp_383*tmp_81 + tmp_391*tmp_536 - tmp_391*tmp_552) + tmp_412*(-tmp_402*tmp_81 + tmp_410*tmp_536 - tmp_410*tmp_553) + tmp_431*(-tmp_421*tmp_81 + tmp_429*tmp_536 - tmp_429*tmp_554) + tmp_450*(-tmp_440*tmp_81 + tmp_448*tmp_536 - tmp_448*tmp_555) + tmp_469*(-tmp_459*tmp_81 + tmp_467*tmp_536 - tmp_467*tmp_556) + tmp_488*(-tmp_478*tmp_81 + tmp_486*tmp_536 - tmp_486*tmp_557);
      real_t a_3_1 = tmp_108*(tmp_100*tmp_536 - tmp_100*tmp_537 - tmp_44*tmp_489) + tmp_127*(-tmp_117*tmp_489 + tmp_122*tmp_536 - tmp_122*tmp_538) + tmp_146*(-tmp_136*tmp_489 + tmp_141*tmp_536 - tmp_141*tmp_539) + tmp_165*(-tmp_155*tmp_489 + tmp_160*tmp_536 - tmp_160*tmp_540) + tmp_184*(-tmp_174*tmp_489 + tmp_179*tmp_536 - tmp_179*tmp_541) + tmp_203*(-tmp_193*tmp_489 + tmp_198*tmp_536 - tmp_198*tmp_542) + tmp_222*(-tmp_212*tmp_489 + tmp_217*tmp_536 - tmp_217*tmp_543) + tmp_241*(-tmp_231*tmp_489 + tmp_236*tmp_536 - tmp_236*tmp_544) + tmp_260*(-tmp_250*tmp_489 + tmp_255*tmp_536 - tmp_255*tmp_545) + tmp_279*(-tmp_269*tmp_489 + tmp_274*tmp_536 - tmp_274*tmp_546) + tmp_298*(-tmp_288*tmp_489 + tmp_293*tmp_536 - tmp_293*tmp_547) + tmp_317*(-tmp_307*tmp_489 + tmp_312*tmp_536 - tmp_312*tmp_548) + tmp_336*(-tmp_326*tmp_489 + tmp_331*tmp_536 - tmp_331*tmp_549) + tmp_355*(-tmp_345*tmp_489 + tmp_350*tmp_536 - tmp_350*tmp_550) + tmp_374*(-tmp_364*tmp_489 + tmp_369*tmp_536 - tmp_369*tmp_551) + tmp_393*(-tmp_383*tmp_489 + tmp_388*tmp_536 - tmp_388*tmp_552) + tmp_412*(-tmp_402*tmp_489 + tmp_407*tmp_536 - tmp_407*tmp_553) + tmp_431*(-tmp_421*tmp_489 + tmp_426*tmp_536 - tmp_426*tmp_554) + tmp_450*(-tmp_440*tmp_489 + tmp_445*tmp_536 - tmp_445*tmp_555) + tmp_469*(-tmp_459*tmp_489 + tmp_464*tmp_536 - tmp_464*tmp_556) + tmp_488*(-tmp_478*tmp_489 + tmp_483*tmp_536 - tmp_483*tmp_557);
      real_t a_3_2 = tmp_108*(tmp_101*tmp_536 - tmp_101*tmp_537 - tmp_44*tmp_490) + tmp_127*(-tmp_117*tmp_490 + tmp_123*tmp_536 - tmp_123*tmp_538) + tmp_146*(-tmp_136*tmp_490 + tmp_142*tmp_536 - tmp_142*tmp_539) + tmp_165*(-tmp_155*tmp_490 + tmp_161*tmp_536 - tmp_161*tmp_540) + tmp_184*(-tmp_174*tmp_490 + tmp_180*tmp_536 - tmp_180*tmp_541) + tmp_203*(-tmp_193*tmp_490 + tmp_199*tmp_536 - tmp_199*tmp_542) + tmp_222*(-tmp_212*tmp_490 + tmp_218*tmp_536 - tmp_218*tmp_543) + tmp_241*(-tmp_231*tmp_490 + tmp_237*tmp_536 - tmp_237*tmp_544) + tmp_260*(-tmp_250*tmp_490 + tmp_256*tmp_536 - tmp_256*tmp_545) + tmp_279*(-tmp_269*tmp_490 + tmp_275*tmp_536 - tmp_275*tmp_546) + tmp_298*(-tmp_288*tmp_490 + tmp_294*tmp_536 - tmp_294*tmp_547) + tmp_317*(-tmp_307*tmp_490 + tmp_313*tmp_536 - tmp_313*tmp_548) + tmp_336*(-tmp_326*tmp_490 + tmp_332*tmp_536 - tmp_332*tmp_549) + tmp_355*(-tmp_345*tmp_490 + tmp_351*tmp_536 - tmp_351*tmp_550) + tmp_374*(-tmp_364*tmp_490 + tmp_370*tmp_536 - tmp_370*tmp_551) + tmp_393*(-tmp_383*tmp_490 + tmp_389*tmp_536 - tmp_389*tmp_552) + tmp_412*(-tmp_402*tmp_490 + tmp_408*tmp_536 - tmp_408*tmp_553) + tmp_431*(-tmp_421*tmp_490 + tmp_427*tmp_536 - tmp_427*tmp_554) + tmp_450*(-tmp_440*tmp_490 + tmp_446*tmp_536 - tmp_446*tmp_555) + tmp_469*(-tmp_459*tmp_490 + tmp_465*tmp_536 - tmp_465*tmp_556) + tmp_488*(-tmp_478*tmp_490 + tmp_484*tmp_536 - tmp_484*tmp_557);
      real_t a_3_3 = tmp_108*(tmp_102*tmp_536 - tmp_102*tmp_537 - tmp_44*tmp_491) + tmp_127*(-tmp_117*tmp_491 + tmp_124*tmp_536 - tmp_124*tmp_538) + tmp_146*(-tmp_136*tmp_491 + tmp_143*tmp_536 - tmp_143*tmp_539) + tmp_165*(-tmp_155*tmp_491 + tmp_162*tmp_536 - tmp_162*tmp_540) + tmp_184*(-tmp_174*tmp_491 + tmp_181*tmp_536 - tmp_181*tmp_541) + tmp_203*(-tmp_193*tmp_491 + tmp_200*tmp_536 - tmp_200*tmp_542) + tmp_222*(-tmp_212*tmp_491 + tmp_219*tmp_536 - tmp_219*tmp_543) + tmp_241*(-tmp_231*tmp_491 + tmp_238*tmp_536 - tmp_238*tmp_544) + tmp_260*(-tmp_250*tmp_491 + tmp_257*tmp_536 - tmp_257*tmp_545) + tmp_279*(-tmp_269*tmp_491 + tmp_276*tmp_536 - tmp_276*tmp_546) + tmp_298*(-tmp_288*tmp_491 + tmp_295*tmp_536 - tmp_295*tmp_547) + tmp_317*(-tmp_307*tmp_491 + tmp_314*tmp_536 - tmp_314*tmp_548) + tmp_336*(-tmp_326*tmp_491 + tmp_333*tmp_536 - tmp_333*tmp_549) + tmp_355*(-tmp_345*tmp_491 + tmp_352*tmp_536 - tmp_352*tmp_550) + tmp_374*(-tmp_364*tmp_491 + tmp_371*tmp_536 - tmp_371*tmp_551) + tmp_393*(-tmp_383*tmp_491 + tmp_390*tmp_536 - tmp_390*tmp_552) + tmp_412*(-tmp_402*tmp_491 + tmp_409*tmp_536 - tmp_409*tmp_553) + tmp_431*(-tmp_421*tmp_491 + tmp_428*tmp_536 - tmp_428*tmp_554) + tmp_450*(-tmp_440*tmp_491 + tmp_447*tmp_536 - tmp_447*tmp_555) + tmp_469*(-tmp_459*tmp_491 + tmp_466*tmp_536 - tmp_466*tmp_556) + tmp_488*(-tmp_478*tmp_491 + tmp_485*tmp_536 - tmp_485*tmp_557);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_14 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_18*tmp_9;
      real_t tmp_21 = tmp_14*tmp_17;
      real_t tmp_22 = tmp_11*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_10*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_20 + tmp_16*tmp_8*tmp_9 - tmp_21*tmp_8);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_14*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_15 - tmp_20;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_13*tmp_9;
      real_t tmp_37 = -tmp_10*tmp_16 + tmp_13*tmp_14;
      real_t tmp_38 = tmp_16*tmp_9 - tmp_21;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_11*tmp_13 - tmp_17*tmp_8;
      real_t tmp_41 = -tmp_13*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = tmp_19 - tmp_22;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 0.5*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = 1.0*tmp_23;
      real_t tmp_50 = tmp_41*tmp_49;
      real_t tmp_51 = tmp_37*tmp_49;
      real_t tmp_52 = tmp_27*tmp_49;
      real_t tmp_53 = tmp_40*tmp_45;
      real_t tmp_54 = tmp_36*tmp_45;
      real_t tmp_55 = tmp_12*tmp_45;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_50 - tmp_51 - tmp_52) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2*tmp_56;
      real_t tmp_58 = 2.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_52 + p_affine_13_2*tmp_55;
      real_t tmp_221 = tmp_107*(7.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_56 - tmp_106*tmp_220) + tmp_115*(7.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_56 - tmp_114*tmp_220) + tmp_123*(7.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_56 - tmp_122*tmp_220) + tmp_131*(7.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_56 - tmp_130*tmp_220) + tmp_139*(7.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_56 - tmp_138*tmp_220) + tmp_147*(7.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_56 - tmp_146*tmp_220) + tmp_155*(7.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_56 - tmp_154*tmp_220) + tmp_163*(7.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_56 - tmp_162*tmp_220) + tmp_171*(7.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_56 - tmp_170*tmp_220) + tmp_179*(7.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_56 - tmp_178*tmp_220) + tmp_187*(7.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_56 - tmp_186*tmp_220) + tmp_195*(7.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_56 - tmp_194*tmp_220) + tmp_203*(7.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_56 - tmp_202*tmp_220) + tmp_211*(7.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_56 - tmp_210*tmp_220) + tmp_219*(7.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_56 - tmp_218*tmp_220) + tmp_59*(-tmp_220*tmp_44 + 7.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_56) + tmp_67*(-tmp_220*tmp_66 - tmp_56*tmp_63 + 7.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_74 - tmp_56*tmp_71 + 7.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_82 - tmp_56*tmp_79 + 7.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_90 - tmp_56*tmp_87 + 7.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_98 - tmp_56*tmp_95 + 7.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_222 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_54;
      real_t tmp_223 = tmp_107*(7.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_56 - tmp_106*tmp_222) + tmp_115*(7.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_56 - tmp_114*tmp_222) + tmp_123*(7.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_56 - tmp_122*tmp_222) + tmp_131*(7.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_56 - tmp_130*tmp_222) + tmp_139*(7.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_56 - tmp_138*tmp_222) + tmp_147*(7.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_56 - tmp_146*tmp_222) + tmp_155*(7.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_56 - tmp_154*tmp_222) + tmp_163*(7.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_56 - tmp_162*tmp_222) + tmp_171*(7.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_56 - tmp_170*tmp_222) + tmp_179*(7.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_56 - tmp_178*tmp_222) + tmp_187*(7.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_56 - tmp_186*tmp_222) + tmp_195*(7.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_56 - tmp_194*tmp_222) + tmp_203*(7.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_56 - tmp_202*tmp_222) + tmp_211*(7.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_56 - tmp_210*tmp_222) + tmp_219*(7.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_56 - tmp_218*tmp_222) + tmp_59*(-tmp_222*tmp_44 + 7.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_56) + tmp_67*(-tmp_222*tmp_66 - tmp_56*tmp_64 + 7.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_222*tmp_74 - tmp_56*tmp_72 + 7.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_222*tmp_82 - tmp_56*tmp_80 + 7.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_222*tmp_90 - tmp_56*tmp_88 + 7.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_222*tmp_98 - tmp_56*tmp_96 + 7.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_53;
      real_t tmp_225 = tmp_107*(7.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_56 - tmp_106*tmp_224) + tmp_115*(7.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_56 - tmp_114*tmp_224) + tmp_123*(7.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_56 - tmp_122*tmp_224) + tmp_131*(7.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_56 - tmp_130*tmp_224) + tmp_139*(7.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_56 - tmp_138*tmp_224) + tmp_147*(7.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_56 - tmp_146*tmp_224) + tmp_155*(7.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_56 - tmp_154*tmp_224) + tmp_163*(7.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_56 - tmp_162*tmp_224) + tmp_171*(7.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_56 - tmp_170*tmp_224) + tmp_179*(7.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_56 - tmp_178*tmp_224) + tmp_187*(7.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_56 - tmp_186*tmp_224) + tmp_195*(7.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_56 - tmp_194*tmp_224) + tmp_203*(7.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_56 - tmp_202*tmp_224) + tmp_211*(7.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_56 - tmp_210*tmp_224) + tmp_219*(7.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_56 - tmp_218*tmp_224) + tmp_59*(-tmp_224*tmp_44 + 7.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_56) + tmp_67*(-tmp_224*tmp_66 - tmp_56*tmp_65 + 7.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_224*tmp_74 - tmp_56*tmp_73 + 7.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_224*tmp_82 - tmp_56*tmp_81 + 7.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_224*tmp_90 - tmp_56*tmp_89 + 7.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_224*tmp_98 - tmp_56*tmp_97 + 7.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_226 = 2*tmp_220;
      real_t tmp_227 = tmp_107*(7.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_222 - tmp_104*tmp_220) + tmp_115*(7.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_222 - tmp_112*tmp_220) + tmp_123*(7.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_222 - tmp_120*tmp_220) + tmp_131*(7.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_222 - tmp_128*tmp_220) + tmp_139*(7.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_222 - tmp_136*tmp_220) + tmp_147*(7.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_222 - tmp_144*tmp_220) + tmp_155*(7.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_222 - tmp_152*tmp_220) + tmp_163*(7.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_222 - tmp_160*tmp_220) + tmp_171*(7.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_222 - tmp_168*tmp_220) + tmp_179*(7.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_222 - tmp_176*tmp_220) + tmp_187*(7.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_222 - tmp_184*tmp_220) + tmp_195*(7.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_222 - tmp_192*tmp_220) + tmp_203*(7.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_222 - tmp_200*tmp_220) + tmp_211*(7.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_222 - tmp_208*tmp_220) + tmp_219*(7.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_222 - tmp_216*tmp_220) + tmp_59*(-tmp_220*tmp_39 - tmp_222*tmp_35 + 7.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_222*tmp_63 + 7.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_222*tmp_71 + 7.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_220*tmp_80 - tmp_222*tmp_79 + 7.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_220*tmp_88 - tmp_222*tmp_87 + 7.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_220*tmp_96 - tmp_222*tmp_95 + 7.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_228 = tmp_107*(7.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_224 - tmp_105*tmp_220) + tmp_115*(7.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_224 - tmp_113*tmp_220) + tmp_123*(7.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_224 - tmp_121*tmp_220) + tmp_131*(7.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_224 - tmp_129*tmp_220) + tmp_139*(7.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_224 - tmp_137*tmp_220) + tmp_147*(7.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_224 - tmp_145*tmp_220) + tmp_155*(7.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_224 - tmp_153*tmp_220) + tmp_163*(7.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_224 - tmp_161*tmp_220) + tmp_171*(7.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_224 - tmp_169*tmp_220) + tmp_179*(7.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_224 - tmp_177*tmp_220) + tmp_187*(7.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_224 - tmp_185*tmp_220) + tmp_195*(7.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_224 - tmp_193*tmp_220) + tmp_203*(7.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_224 - tmp_201*tmp_220) + tmp_211*(7.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_224 - tmp_209*tmp_220) + tmp_219*(7.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_224 - tmp_217*tmp_220) + tmp_59*(-tmp_220*tmp_43 - tmp_224*tmp_35 + 7.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_224*tmp_63 + 7.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_224*tmp_71 + 7.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_220*tmp_81 - tmp_224*tmp_79 + 7.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_220*tmp_89 - tmp_224*tmp_87 + 7.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_220*tmp_97 - tmp_224*tmp_95 + 7.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_229 = 2*tmp_222;
      real_t tmp_230 = tmp_107*(7.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_224 - tmp_105*tmp_222) + tmp_115*(7.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_224 - tmp_113*tmp_222) + tmp_123*(7.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_224 - tmp_121*tmp_222) + tmp_131*(7.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_224 - tmp_129*tmp_222) + tmp_139*(7.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_224 - tmp_137*tmp_222) + tmp_147*(7.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_224 - tmp_145*tmp_222) + tmp_155*(7.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_224 - tmp_153*tmp_222) + tmp_163*(7.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_224 - tmp_161*tmp_222) + tmp_171*(7.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_224 - tmp_169*tmp_222) + tmp_179*(7.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_224 - tmp_177*tmp_222) + tmp_187*(7.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_224 - tmp_185*tmp_222) + tmp_195*(7.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_224 - tmp_193*tmp_222) + tmp_203*(7.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_224 - tmp_201*tmp_222) + tmp_211*(7.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_224 - tmp_209*tmp_222) + tmp_219*(7.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_224 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_224*tmp_39 + 7.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_224*tmp_64 + 7.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_224*tmp_72 + 7.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_224*tmp_80 + 7.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_224*tmp_88 + 7.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_224*tmp_96 + 7.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_231 = 2*tmp_224;
      real_t a_0_0 = tmp_107*(7.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(7.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(7.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(7.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(7.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(7.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(7.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(7.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(7.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(7.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(7.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(7.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(7.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(7.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(7.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(7.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 7.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 7.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 7.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 7.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 7.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_221;
      real_t a_0_2 = tmp_223;
      real_t a_0_3 = tmp_225;
      real_t a_1_0 = tmp_221;
      real_t a_1_1 = tmp_107*(7.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_226) + tmp_115*(7.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_226) + tmp_123*(7.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_226) + tmp_131*(7.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_226) + tmp_139*(7.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_226) + tmp_147*(7.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_226) + tmp_155*(7.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_226) + tmp_163*(7.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_226) + tmp_171*(7.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_226) + tmp_179*(7.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_226) + tmp_187*(7.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_226) + tmp_195*(7.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_226) + tmp_203*(7.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_226) + tmp_211*(7.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_226) + tmp_219*(7.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_226) + tmp_59*(-tmp_226*tmp_35 + 7.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_226*tmp_63 + 7.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_226*tmp_71 + 7.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_226*tmp_79 + 7.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_226*tmp_87 + 7.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_226*tmp_95 + 7.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_227;
      real_t a_1_3 = tmp_228;
      real_t a_2_0 = tmp_223;
      real_t a_2_1 = tmp_227;
      real_t a_2_2 = tmp_107*(7.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_229) + tmp_115*(7.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_229) + tmp_123*(7.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_229) + tmp_131*(7.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_229) + tmp_139*(7.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_229) + tmp_147*(7.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_229) + tmp_155*(7.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_229) + tmp_163*(7.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_229) + tmp_171*(7.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_229) + tmp_179*(7.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_229) + tmp_187*(7.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_229) + tmp_195*(7.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_229) + tmp_203*(7.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_229) + tmp_211*(7.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_229) + tmp_219*(7.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_229) + tmp_59*(-tmp_229*tmp_39 + 7.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_229*tmp_64 + 7.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_229*tmp_72 + 7.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_229*tmp_80 + 7.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_229*tmp_88 + 7.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_229*tmp_96 + 7.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_230;
      real_t a_3_0 = tmp_225;
      real_t a_3_1 = tmp_228;
      real_t a_3_2 = tmp_230;
      real_t a_3_3 = tmp_107*(7.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_231) + tmp_115*(7.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_231) + tmp_123*(7.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_231) + tmp_131*(7.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_231) + tmp_139*(7.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_231) + tmp_147*(7.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_231) + tmp_155*(7.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_231) + tmp_163*(7.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_231) + tmp_171*(7.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_231) + tmp_179*(7.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_231) + tmp_187*(7.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_231) + tmp_195*(7.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_231) + tmp_203*(7.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_231) + tmp_211*(7.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_231) + tmp_219*(7.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_231) + tmp_59*(-tmp_231*tmp_43 + 7.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_231*tmp_65 + 7.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_231*tmp_73 + 7.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_231*tmp_81 + 7.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_231*tmp_89 + 7.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_231*tmp_97 + 7.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g1;


private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_21 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_21()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = -tmp_2 + tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_0*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_3*tmp_7;
      real_t tmp_13 = tmp_11*tmp_4;
      real_t tmp_14 = tmp_1*tmp_10*tmp_11 - tmp_10*tmp_12 - tmp_13*tmp_6 - tmp_2*tmp_9 + tmp_3*tmp_4*tmp_9 + tmp_6*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_14);
      real_t tmp_16 = 0.5*tmp_15;
      real_t tmp_17 = -tmp_13 + tmp_8;
      real_t tmp_18 = tmp_1*tmp_11 - tmp_12;
      real_t tmp_19 = p_affine_0_0*p_affine_1_1;
      real_t tmp_20 = p_affine_0_0*p_affine_1_2;
      real_t tmp_21 = p_affine_2_1*p_affine_3_2;
      real_t tmp_22 = p_affine_0_1*p_affine_1_0;
      real_t tmp_23 = p_affine_0_1*p_affine_1_2;
      real_t tmp_24 = p_affine_2_2*p_affine_3_0;
      real_t tmp_25 = p_affine_0_2*p_affine_1_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_1;
      real_t tmp_27 = p_affine_2_0*p_affine_3_1;
      real_t tmp_28 = p_affine_2_2*p_affine_3_1;
      real_t tmp_29 = p_affine_2_0*p_affine_3_2;
      real_t tmp_30 = p_affine_2_1*p_affine_3_0;
      real_t tmp_31 = std::abs(p_affine_0_0*tmp_21 - p_affine_0_0*tmp_28 + p_affine_0_1*tmp_24 - p_affine_0_1*tmp_29 + p_affine_0_2*tmp_27 - p_affine_0_2*tmp_30 - p_affine_1_0*tmp_21 + p_affine_1_0*tmp_28 - p_affine_1_1*tmp_24 + p_affine_1_1*tmp_29 - p_affine_1_2*tmp_27 + p_affine_1_2*tmp_30 + p_affine_2_0*tmp_23 - p_affine_2_0*tmp_26 - p_affine_2_1*tmp_20 + p_affine_2_1*tmp_25 + p_affine_2_2*tmp_19 - p_affine_2_2*tmp_22 - p_affine_3_0*tmp_23 + p_affine_3_0*tmp_26 + p_affine_3_1*tmp_20 - p_affine_3_1*tmp_25 - p_affine_3_2*tmp_19 + p_affine_3_2*tmp_22);
      real_t tmp_32 = tmp_31*(-tmp_16*tmp_17 - tmp_16*tmp_18 - tmp_16*tmp_5);
      real_t tmp_33 = 0.0044044418180681378*tmp_32;
      real_t tmp_34 = tmp_0*tmp_6 - tmp_10*tmp_3;
      real_t tmp_35 = 1.0*tmp_15;
      real_t tmp_36 = -tmp_0*tmp_9 + tmp_10*tmp_11;
      real_t tmp_37 = -tmp_11*tmp_6 + tmp_3*tmp_9;
      real_t tmp_38 = -tmp_34*tmp_35 - tmp_35*tmp_36 - tmp_35*tmp_37;
      real_t tmp_39 = 2*tmp_38;
      real_t tmp_40 = tmp_32*tmp_39;
      real_t tmp_41 = 2.0*tmp_15;
      real_t tmp_42 = tmp_37*tmp_41;
      real_t tmp_43 = tmp_32*tmp_42;
      real_t tmp_44 = tmp_36*tmp_41;
      real_t tmp_45 = tmp_32*tmp_44;
      real_t tmp_46 = tmp_34*tmp_41;
      real_t tmp_47 = tmp_32*tmp_46;
      real_t tmp_48 = tmp_18*tmp_31;
      real_t tmp_49 = 0.0044044418180681378*tmp_48;
      real_t tmp_50 = tmp_35*tmp_38;
      real_t tmp_51 = tmp_48*tmp_50;
      real_t tmp_52 = 1.0/(tmp_14*tmp_14);
      real_t tmp_53 = tmp_37*tmp_52;
      real_t tmp_54 = tmp_48*tmp_53;
      real_t tmp_55 = tmp_36*tmp_52;
      real_t tmp_56 = tmp_48*tmp_55;
      real_t tmp_57 = tmp_34*tmp_52;
      real_t tmp_58 = tmp_48*tmp_57;
      real_t tmp_59 = tmp_17*tmp_31;
      real_t tmp_60 = tmp_50*tmp_59;
      real_t tmp_61 = tmp_53*tmp_59;
      real_t tmp_62 = tmp_55*tmp_59;
      real_t tmp_63 = tmp_57*tmp_59;
      real_t tmp_64 = tmp_31*tmp_5;
      real_t tmp_65 = tmp_50*tmp_64;
      real_t tmp_66 = tmp_53*tmp_64;
      real_t tmp_67 = tmp_55*tmp_64;
      real_t tmp_68 = tmp_57*tmp_64;
      real_t a_0_0 = tmp_33*tmp_39 + 0.16226222484859867*tmp_40;
      real_t a_0_1 = tmp_33*tmp_42 + 0.16226222484859867*tmp_43;
      real_t a_0_2 = tmp_33*tmp_44 + 0.16226222484859867*tmp_45;
      real_t a_0_3 = tmp_33*tmp_46 + 0.16226222484859867*tmp_47;
      real_t a_1_0 = tmp_49*tmp_50 + 0.16226222484859867*tmp_51;
      real_t a_1_1 = tmp_49*tmp_53 + 0.16226222484859867*tmp_54;
      real_t a_1_2 = tmp_49*tmp_55 + 0.16226222484859867*tmp_56;
      real_t a_1_3 = tmp_49*tmp_57 + 0.16226222484859867*tmp_58;
      real_t a_2_0 = 0.1666666666666668*tmp_60;
      real_t a_2_1 = 0.1666666666666668*tmp_61;
      real_t a_2_2 = 0.1666666666666668*tmp_62;
      real_t a_2_3 = 0.1666666666666668*tmp_63;
      real_t a_3_0 = 0.1666666666666668*tmp_65;
      real_t a_3_1 = 0.1666666666666668*tmp_66;
      real_t a_3_2 = 0.1666666666666668*tmp_67;
      real_t a_3_3 = 0.1666666666666668*tmp_68;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_38*tmp_44;
      real_t tmp_46 = tmp_34*tmp_44;
      real_t tmp_47 = tmp_44*tmp_6;
      real_t tmp_48 = p_affine_13_1*(-tmp_45 - tmp_46 - tmp_47);
      real_t tmp_49 = tmp_39*tmp_44;
      real_t tmp_50 = tmp_35*tmp_44;
      real_t tmp_51 = tmp_21*tmp_44;
      real_t tmp_52 = p_affine_13_2*(-tmp_49 - tmp_50 - tmp_51);
      real_t tmp_53 = 1.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_54 = 0.0068572537431980923*tmp_53;
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_57 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_58 = tmp_21*tmp_56 + tmp_27*tmp_57 + tmp_55*tmp_6;
      real_t tmp_59 = tmp_34*tmp_55 + tmp_35*tmp_56 + tmp_36*tmp_57;
      real_t tmp_60 = tmp_38*tmp_55 + tmp_39*tmp_56 + tmp_40*tmp_57;
      real_t tmp_61 = -tmp_58 - tmp_59 - tmp_60 + 1;
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = 0.037198804536718075*tmp_53;
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_65 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_66 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_67 = tmp_21*tmp_65 + tmp_27*tmp_66 + tmp_6*tmp_64;
      real_t tmp_68 = tmp_34*tmp_64 + tmp_35*tmp_65 + tmp_36*tmp_66;
      real_t tmp_69 = tmp_38*tmp_64 + tmp_39*tmp_65 + tmp_40*tmp_66;
      real_t tmp_70 = -tmp_67 - tmp_68 - tmp_69 + 1;
      real_t tmp_71 = 1.0*tmp_70;
      real_t tmp_72 = 0.020848748529055869*tmp_53;
      real_t tmp_73 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_6*tmp_73;
      real_t tmp_77 = tmp_34*tmp_73 + tmp_35*tmp_74 + tmp_36*tmp_75;
      real_t tmp_78 = tmp_38*tmp_73 + tmp_39*tmp_74 + tmp_40*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 1.0*tmp_79;
      real_t tmp_81 = 0.019202922745021479*tmp_53;
      real_t tmp_82 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_83 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_84 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_85 = tmp_21*tmp_83 + tmp_27*tmp_84 + tmp_6*tmp_82;
      real_t tmp_86 = tmp_34*tmp_82 + tmp_35*tmp_83 + tmp_36*tmp_84;
      real_t tmp_87 = tmp_38*tmp_82 + tmp_39*tmp_83 + tmp_40*tmp_84;
      real_t tmp_88 = -tmp_85 - tmp_86 - tmp_87 + 1;
      real_t tmp_89 = 1.0*tmp_88;
      real_t tmp_90 = 0.020848748529055869*tmp_53;
      real_t tmp_91 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_92 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_93 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_94 = tmp_21*tmp_92 + tmp_27*tmp_93 + tmp_6*tmp_91;
      real_t tmp_95 = tmp_34*tmp_91 + tmp_35*tmp_92 + tmp_36*tmp_93;
      real_t tmp_96 = tmp_38*tmp_91 + tmp_39*tmp_92 + tmp_40*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = 1.0*tmp_97;
      real_t tmp_99 = 0.019202922745021479*tmp_53;
      real_t tmp_100 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_101 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_102 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_103 = tmp_100*tmp_6 + tmp_101*tmp_21 + tmp_102*tmp_27;
      real_t tmp_104 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_102*tmp_36;
      real_t tmp_105 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_102*tmp_40;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 1.0*tmp_106;
      real_t tmp_108 = 0.020848748529055869*tmp_53;
      real_t tmp_109 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_110 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_111 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_112 = tmp_109*tmp_6 + tmp_110*tmp_21 + tmp_111*tmp_27;
      real_t tmp_113 = tmp_109*tmp_34 + tmp_110*tmp_35 + tmp_111*tmp_36;
      real_t tmp_114 = tmp_109*tmp_38 + tmp_110*tmp_39 + tmp_111*tmp_40;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 1.0*tmp_115;
      real_t tmp_117 = 0.019202922745021479*tmp_53;
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 1.0*tmp_124;
      real_t tmp_126 = 0.020848748529055869*tmp_53;
      real_t tmp_127 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_128 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_129 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_130 = tmp_127*tmp_6 + tmp_128*tmp_21 + tmp_129*tmp_27;
      real_t tmp_131 = tmp_127*tmp_34 + tmp_128*tmp_35 + tmp_129*tmp_36;
      real_t tmp_132 = tmp_127*tmp_38 + tmp_128*tmp_39 + tmp_129*tmp_40;
      real_t tmp_133 = -tmp_130 - tmp_131 - tmp_132 + 1;
      real_t tmp_134 = 1.0*tmp_133;
      real_t tmp_135 = 0.019202922745021479*tmp_53;
      real_t tmp_136 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_137 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_138 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_139 = tmp_136*tmp_6 + tmp_137*tmp_21 + tmp_138*tmp_27;
      real_t tmp_140 = tmp_136*tmp_34 + tmp_137*tmp_35 + tmp_138*tmp_36;
      real_t tmp_141 = tmp_136*tmp_38 + tmp_137*tmp_39 + tmp_138*tmp_40;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 1.0*tmp_142;
      real_t tmp_144 = 0.020848748529055869*tmp_53;
      real_t tmp_145 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_146 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_147 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_148 = tmp_145*tmp_6 + tmp_146*tmp_21 + tmp_147*tmp_27;
      real_t tmp_149 = tmp_145*tmp_34 + tmp_146*tmp_35 + tmp_147*tmp_36;
      real_t tmp_150 = tmp_145*tmp_38 + tmp_146*tmp_39 + tmp_147*tmp_40;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 1.0*tmp_151;
      real_t tmp_153 = 0.019202922745021479*tmp_53;
      real_t tmp_154 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_155 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_156 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_157 = tmp_154*tmp_6 + tmp_155*tmp_21 + tmp_156*tmp_27;
      real_t tmp_158 = tmp_154*tmp_34 + tmp_155*tmp_35 + tmp_156*tmp_36;
      real_t tmp_159 = tmp_154*tmp_38 + tmp_155*tmp_39 + tmp_156*tmp_40;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 1.0*tmp_160;
      real_t tmp_162 = 0.042507265838595799*tmp_53;
      real_t tmp_163 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_164 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_165 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_166 = tmp_163*tmp_6 + tmp_164*tmp_21 + tmp_165*tmp_27;
      real_t tmp_167 = tmp_163*tmp_34 + tmp_164*tmp_35 + tmp_165*tmp_36;
      real_t tmp_168 = tmp_163*tmp_38 + tmp_164*tmp_39 + tmp_165*tmp_40;
      real_t tmp_169 = -tmp_166 - tmp_167 - tmp_168 + 1;
      real_t tmp_170 = 1.0*tmp_169;
      real_t tmp_171 = 0.020848748529055869*tmp_53;
      real_t tmp_172 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_6 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_172*tmp_34 + tmp_173*tmp_35 + tmp_174*tmp_36;
      real_t tmp_177 = tmp_172*tmp_38 + tmp_173*tmp_39 + tmp_174*tmp_40;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 1.0*tmp_178;
      real_t tmp_180 = 0.0068572537431980923*tmp_53;
      real_t tmp_181 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_182 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_183 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_184 = tmp_181*tmp_6 + tmp_182*tmp_21 + tmp_183*tmp_27;
      real_t tmp_185 = tmp_181*tmp_34 + tmp_182*tmp_35 + tmp_183*tmp_36;
      real_t tmp_186 = tmp_181*tmp_38 + tmp_182*tmp_39 + tmp_183*tmp_40;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 1.0*tmp_187;
      real_t tmp_189 = 0.037198804536718075*tmp_53;
      real_t tmp_190 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 1.0*tmp_196;
      real_t tmp_198 = 0.042507265838595799*tmp_53;
      real_t tmp_199 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_6 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_199*tmp_34 + tmp_200*tmp_35 + tmp_201*tmp_36;
      real_t tmp_204 = tmp_199*tmp_38 + tmp_200*tmp_39 + tmp_201*tmp_40;
      real_t tmp_205 = -tmp_202 - tmp_203 - tmp_204 + 1;
      real_t tmp_206 = 1.0*tmp_205;
      real_t tmp_207 = 0.0068572537431980923*tmp_53;
      real_t tmp_208 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_209 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_210 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_211 = tmp_208*tmp_6 + tmp_209*tmp_21 + tmp_210*tmp_27;
      real_t tmp_212 = tmp_208*tmp_34 + tmp_209*tmp_35 + tmp_210*tmp_36;
      real_t tmp_213 = tmp_208*tmp_38 + tmp_209*tmp_39 + tmp_210*tmp_40;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 1.0*tmp_214;
      real_t tmp_216 = 0.037198804536718075*tmp_53;
      real_t tmp_217 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_218 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_219 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_220 = tmp_21*tmp_218 + tmp_217*tmp_6 + tmp_219*tmp_27;
      real_t tmp_221 = tmp_217*tmp_34 + tmp_218*tmp_35 + tmp_219*tmp_36;
      real_t tmp_222 = tmp_217*tmp_38 + tmp_218*tmp_39 + tmp_219*tmp_40;
      real_t tmp_223 = -tmp_220 - tmp_221 - tmp_222 + 1;
      real_t tmp_224 = 1.0*tmp_223;
      real_t tmp_225 = 0.042507265838595799*tmp_53;
      real_t tmp_226 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_227 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_228 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_229 = tmp_21*tmp_227 + tmp_226*tmp_6 + tmp_228*tmp_27;
      real_t tmp_230 = tmp_226*tmp_34 + tmp_227*tmp_35 + tmp_228*tmp_36;
      real_t tmp_231 = tmp_226*tmp_38 + tmp_227*tmp_39 + tmp_228*tmp_40;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 1.0*tmp_232;
      real_t tmp_234 = 0.019202922745021479*tmp_53;
      real_t tmp_235 = 1.0*tmp_52;
      real_t tmp_236 = p_affine_13_1*tmp_47;
      real_t tmp_237 = p_affine_13_1*tmp_46;
      real_t tmp_238 = p_affine_13_1*tmp_45;
      real_t tmp_239 = 1.0*tmp_48;
      real_t tmp_240 = p_affine_13_2*tmp_51;
      real_t tmp_241 = p_affine_13_2*tmp_50;
      real_t tmp_242 = p_affine_13_2*tmp_49;
      real_t a_0_0 = tmp_108*(-tmp_107*tmp_48 - tmp_107*tmp_52) + tmp_117*(-tmp_116*tmp_48 - tmp_116*tmp_52) + tmp_126*(-tmp_125*tmp_48 - tmp_125*tmp_52) + tmp_135*(-tmp_134*tmp_48 - tmp_134*tmp_52) + tmp_144*(-tmp_143*tmp_48 - tmp_143*tmp_52) + tmp_153*(-tmp_152*tmp_48 - tmp_152*tmp_52) + tmp_162*(-tmp_161*tmp_48 - tmp_161*tmp_52) + tmp_171*(-tmp_170*tmp_48 - tmp_170*tmp_52) + tmp_180*(-tmp_179*tmp_48 - tmp_179*tmp_52) + tmp_189*(-tmp_188*tmp_48 - tmp_188*tmp_52) + tmp_198*(-tmp_197*tmp_48 - tmp_197*tmp_52) + tmp_207*(-tmp_206*tmp_48 - tmp_206*tmp_52) + tmp_216*(-tmp_215*tmp_48 - tmp_215*tmp_52) + tmp_225*(-tmp_224*tmp_48 - tmp_224*tmp_52) + tmp_234*(-tmp_233*tmp_48 - tmp_233*tmp_52) + tmp_54*(-tmp_43*tmp_48 - tmp_43*tmp_52) + tmp_63*(-tmp_48*tmp_62 - tmp_52*tmp_62) + tmp_72*(-tmp_48*tmp_71 - tmp_52*tmp_71) + tmp_81*(-tmp_48*tmp_80 - tmp_52*tmp_80) + tmp_90*(-tmp_48*tmp_89 - tmp_52*tmp_89) + tmp_99*(-tmp_48*tmp_98 - tmp_52*tmp_98);
      real_t a_0_1 = tmp_108*(-tmp_103*tmp_235 - tmp_106*tmp_236) + tmp_117*(-tmp_112*tmp_235 - tmp_115*tmp_236) + tmp_126*(-tmp_121*tmp_235 - tmp_124*tmp_236) + tmp_135*(-tmp_130*tmp_235 - tmp_133*tmp_236) + tmp_144*(-tmp_139*tmp_235 - tmp_142*tmp_236) + tmp_153*(-tmp_148*tmp_235 - tmp_151*tmp_236) + tmp_162*(-tmp_157*tmp_235 - tmp_160*tmp_236) + tmp_171*(-tmp_166*tmp_235 - tmp_169*tmp_236) + tmp_180*(-tmp_175*tmp_235 - tmp_178*tmp_236) + tmp_189*(-tmp_184*tmp_235 - tmp_187*tmp_236) + tmp_198*(-tmp_193*tmp_235 - tmp_196*tmp_236) + tmp_207*(-tmp_202*tmp_235 - tmp_205*tmp_236) + tmp_216*(-tmp_211*tmp_235 - tmp_214*tmp_236) + tmp_225*(-tmp_220*tmp_235 - tmp_223*tmp_236) + tmp_234*(-tmp_229*tmp_235 - tmp_232*tmp_236) + tmp_54*(-tmp_235*tmp_33 - tmp_236*tmp_42) + tmp_63*(-tmp_235*tmp_58 - tmp_236*tmp_61) + tmp_72*(-tmp_235*tmp_67 - tmp_236*tmp_70) + tmp_81*(-tmp_235*tmp_76 - tmp_236*tmp_79) + tmp_90*(-tmp_235*tmp_85 - tmp_236*tmp_88) + tmp_99*(-tmp_235*tmp_94 - tmp_236*tmp_97);
      real_t a_0_2 = tmp_108*(-tmp_104*tmp_235 - tmp_106*tmp_237) + tmp_117*(-tmp_113*tmp_235 - tmp_115*tmp_237) + tmp_126*(-tmp_122*tmp_235 - tmp_124*tmp_237) + tmp_135*(-tmp_131*tmp_235 - tmp_133*tmp_237) + tmp_144*(-tmp_140*tmp_235 - tmp_142*tmp_237) + tmp_153*(-tmp_149*tmp_235 - tmp_151*tmp_237) + tmp_162*(-tmp_158*tmp_235 - tmp_160*tmp_237) + tmp_171*(-tmp_167*tmp_235 - tmp_169*tmp_237) + tmp_180*(-tmp_176*tmp_235 - tmp_178*tmp_237) + tmp_189*(-tmp_185*tmp_235 - tmp_187*tmp_237) + tmp_198*(-tmp_194*tmp_235 - tmp_196*tmp_237) + tmp_207*(-tmp_203*tmp_235 - tmp_205*tmp_237) + tmp_216*(-tmp_212*tmp_235 - tmp_214*tmp_237) + tmp_225*(-tmp_221*tmp_235 - tmp_223*tmp_237) + tmp_234*(-tmp_230*tmp_235 - tmp_232*tmp_237) + tmp_54*(-tmp_235*tmp_37 - tmp_237*tmp_42) + tmp_63*(-tmp_235*tmp_59 - tmp_237*tmp_61) + tmp_72*(-tmp_235*tmp_68 - tmp_237*tmp_70) + tmp_81*(-tmp_235*tmp_77 - tmp_237*tmp_79) + tmp_90*(-tmp_235*tmp_86 - tmp_237*tmp_88) + tmp_99*(-tmp_235*tmp_95 - tmp_237*tmp_97);
      real_t a_0_3 = tmp_108*(-tmp_105*tmp_235 - tmp_106*tmp_238) + tmp_117*(-tmp_114*tmp_235 - tmp_115*tmp_238) + tmp_126*(-tmp_123*tmp_235 - tmp_124*tmp_238) + tmp_135*(-tmp_132*tmp_235 - tmp_133*tmp_238) + tmp_144*(-tmp_141*tmp_235 - tmp_142*tmp_238) + tmp_153*(-tmp_150*tmp_235 - tmp_151*tmp_238) + tmp_162*(-tmp_159*tmp_235 - tmp_160*tmp_238) + tmp_171*(-tmp_168*tmp_235 - tmp_169*tmp_238) + tmp_180*(-tmp_177*tmp_235 - tmp_178*tmp_238) + tmp_189*(-tmp_186*tmp_235 - tmp_187*tmp_238) + tmp_198*(-tmp_195*tmp_235 - tmp_196*tmp_238) + tmp_207*(-tmp_204*tmp_235 - tmp_205*tmp_238) + tmp_216*(-tmp_213*tmp_235 - tmp_214*tmp_238) + tmp_225*(-tmp_222*tmp_235 - tmp_223*tmp_238) + tmp_234*(-tmp_231*tmp_235 - tmp_232*tmp_238) + tmp_54*(-tmp_235*tmp_41 - tmp_238*tmp_42) + tmp_63*(-tmp_235*tmp_60 - tmp_238*tmp_61) + tmp_72*(-tmp_235*tmp_69 - tmp_238*tmp_70) + tmp_81*(-tmp_235*tmp_78 - tmp_238*tmp_79) + tmp_90*(-tmp_235*tmp_87 - tmp_238*tmp_88) + tmp_99*(-tmp_235*tmp_96 - tmp_238*tmp_97);
      real_t a_1_0 = tmp_108*(-tmp_103*tmp_239 - tmp_106*tmp_240) + tmp_117*(-tmp_112*tmp_239 - tmp_115*tmp_240) + tmp_126*(-tmp_121*tmp_239 - tmp_124*tmp_240) + tmp_135*(-tmp_130*tmp_239 - tmp_133*tmp_240) + tmp_144*(-tmp_139*tmp_239 - tmp_142*tmp_240) + tmp_153*(-tmp_148*tmp_239 - tmp_151*tmp_240) + tmp_162*(-tmp_157*tmp_239 - tmp_160*tmp_240) + tmp_171*(-tmp_166*tmp_239 - tmp_169*tmp_240) + tmp_180*(-tmp_175*tmp_239 - tmp_178*tmp_240) + tmp_189*(-tmp_184*tmp_239 - tmp_187*tmp_240) + tmp_198*(-tmp_193*tmp_239 - tmp_196*tmp_240) + tmp_207*(-tmp_202*tmp_239 - tmp_205*tmp_240) + tmp_216*(-tmp_211*tmp_239 - tmp_214*tmp_240) + tmp_225*(-tmp_220*tmp_239 - tmp_223*tmp_240) + tmp_234*(-tmp_229*tmp_239 - tmp_232*tmp_240) + tmp_54*(-tmp_239*tmp_33 - tmp_240*tmp_42) + tmp_63*(-tmp_239*tmp_58 - tmp_240*tmp_61) + tmp_72*(-tmp_239*tmp_67 - tmp_240*tmp_70) + tmp_81*(-tmp_239*tmp_76 - tmp_240*tmp_79) + tmp_90*(-tmp_239*tmp_85 - tmp_240*tmp_88) + tmp_99*(-tmp_239*tmp_94 - tmp_240*tmp_97);
      real_t a_1_1 = tmp_108*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_117*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_126*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_135*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_144*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_153*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_162*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_171*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_180*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_189*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_198*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_207*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_216*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_225*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_234*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_54*(-tmp_236*tmp_33 - tmp_240*tmp_33) + tmp_63*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_72*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_81*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_90*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_99*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_1_2 = tmp_108*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_117*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_126*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_135*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_144*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_153*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_162*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_171*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_180*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_189*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_198*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_207*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_216*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_225*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_234*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_54*(-tmp_237*tmp_33 - tmp_240*tmp_37) + tmp_63*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_72*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_81*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_90*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_99*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_1_3 = tmp_108*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_117*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_126*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_135*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_144*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_153*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_162*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_171*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_180*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_189*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_198*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_207*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_216*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_225*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_234*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_54*(-tmp_238*tmp_33 - tmp_240*tmp_41) + tmp_63*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_72*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_81*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_90*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_99*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_0 = tmp_108*(-tmp_104*tmp_239 - tmp_106*tmp_241) + tmp_117*(-tmp_113*tmp_239 - tmp_115*tmp_241) + tmp_126*(-tmp_122*tmp_239 - tmp_124*tmp_241) + tmp_135*(-tmp_131*tmp_239 - tmp_133*tmp_241) + tmp_144*(-tmp_140*tmp_239 - tmp_142*tmp_241) + tmp_153*(-tmp_149*tmp_239 - tmp_151*tmp_241) + tmp_162*(-tmp_158*tmp_239 - tmp_160*tmp_241) + tmp_171*(-tmp_167*tmp_239 - tmp_169*tmp_241) + tmp_180*(-tmp_176*tmp_239 - tmp_178*tmp_241) + tmp_189*(-tmp_185*tmp_239 - tmp_187*tmp_241) + tmp_198*(-tmp_194*tmp_239 - tmp_196*tmp_241) + tmp_207*(-tmp_203*tmp_239 - tmp_205*tmp_241) + tmp_216*(-tmp_212*tmp_239 - tmp_214*tmp_241) + tmp_225*(-tmp_221*tmp_239 - tmp_223*tmp_241) + tmp_234*(-tmp_230*tmp_239 - tmp_232*tmp_241) + tmp_54*(-tmp_239*tmp_37 - tmp_241*tmp_42) + tmp_63*(-tmp_239*tmp_59 - tmp_241*tmp_61) + tmp_72*(-tmp_239*tmp_68 - tmp_241*tmp_70) + tmp_81*(-tmp_239*tmp_77 - tmp_241*tmp_79) + tmp_90*(-tmp_239*tmp_86 - tmp_241*tmp_88) + tmp_99*(-tmp_239*tmp_95 - tmp_241*tmp_97);
      real_t a_2_1 = tmp_108*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_117*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_126*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_135*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_144*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_153*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_162*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_171*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_180*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_189*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_198*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_207*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_216*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_225*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_234*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_54*(-tmp_236*tmp_37 - tmp_241*tmp_33) + tmp_63*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_72*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_81*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_90*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_99*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_2_2 = tmp_108*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_117*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_126*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_135*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_144*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_153*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_162*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_171*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_180*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_189*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_198*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_207*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_216*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_225*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_234*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_54*(-tmp_237*tmp_37 - tmp_241*tmp_37) + tmp_63*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_72*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_81*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_90*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_99*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      real_t a_2_3 = tmp_108*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_117*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_126*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_135*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_144*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_153*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_162*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_171*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_180*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_189*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_198*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_207*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_216*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_225*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_234*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_54*(-tmp_238*tmp_37 - tmp_241*tmp_41) + tmp_63*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_72*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_81*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_90*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_99*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_0 = tmp_108*(-tmp_105*tmp_239 - tmp_106*tmp_242) + tmp_117*(-tmp_114*tmp_239 - tmp_115*tmp_242) + tmp_126*(-tmp_123*tmp_239 - tmp_124*tmp_242) + tmp_135*(-tmp_132*tmp_239 - tmp_133*tmp_242) + tmp_144*(-tmp_141*tmp_239 - tmp_142*tmp_242) + tmp_153*(-tmp_150*tmp_239 - tmp_151*tmp_242) + tmp_162*(-tmp_159*tmp_239 - tmp_160*tmp_242) + tmp_171*(-tmp_168*tmp_239 - tmp_169*tmp_242) + tmp_180*(-tmp_177*tmp_239 - tmp_178*tmp_242) + tmp_189*(-tmp_186*tmp_239 - tmp_187*tmp_242) + tmp_198*(-tmp_195*tmp_239 - tmp_196*tmp_242) + tmp_207*(-tmp_204*tmp_239 - tmp_205*tmp_242) + tmp_216*(-tmp_213*tmp_239 - tmp_214*tmp_242) + tmp_225*(-tmp_222*tmp_239 - tmp_223*tmp_242) + tmp_234*(-tmp_231*tmp_239 - tmp_232*tmp_242) + tmp_54*(-tmp_239*tmp_41 - tmp_242*tmp_42) + tmp_63*(-tmp_239*tmp_60 - tmp_242*tmp_61) + tmp_72*(-tmp_239*tmp_69 - tmp_242*tmp_70) + tmp_81*(-tmp_239*tmp_78 - tmp_242*tmp_79) + tmp_90*(-tmp_239*tmp_87 - tmp_242*tmp_88) + tmp_99*(-tmp_239*tmp_96 - tmp_242*tmp_97);
      real_t a_3_1 = tmp_108*(-tmp_103*tmp_242 - tmp_105*tmp_236) + tmp_117*(-tmp_112*tmp_242 - tmp_114*tmp_236) + tmp_126*(-tmp_121*tmp_242 - tmp_123*tmp_236) + tmp_135*(-tmp_130*tmp_242 - tmp_132*tmp_236) + tmp_144*(-tmp_139*tmp_242 - tmp_141*tmp_236) + tmp_153*(-tmp_148*tmp_242 - tmp_150*tmp_236) + tmp_162*(-tmp_157*tmp_242 - tmp_159*tmp_236) + tmp_171*(-tmp_166*tmp_242 - tmp_168*tmp_236) + tmp_180*(-tmp_175*tmp_242 - tmp_177*tmp_236) + tmp_189*(-tmp_184*tmp_242 - tmp_186*tmp_236) + tmp_198*(-tmp_193*tmp_242 - tmp_195*tmp_236) + tmp_207*(-tmp_202*tmp_242 - tmp_204*tmp_236) + tmp_216*(-tmp_211*tmp_242 - tmp_213*tmp_236) + tmp_225*(-tmp_220*tmp_242 - tmp_222*tmp_236) + tmp_234*(-tmp_229*tmp_242 - tmp_231*tmp_236) + tmp_54*(-tmp_236*tmp_41 - tmp_242*tmp_33) + tmp_63*(-tmp_236*tmp_60 - tmp_242*tmp_58) + tmp_72*(-tmp_236*tmp_69 - tmp_242*tmp_67) + tmp_81*(-tmp_236*tmp_78 - tmp_242*tmp_76) + tmp_90*(-tmp_236*tmp_87 - tmp_242*tmp_85) + tmp_99*(-tmp_236*tmp_96 - tmp_242*tmp_94);
      real_t a_3_2 = tmp_108*(-tmp_104*tmp_242 - tmp_105*tmp_237) + tmp_117*(-tmp_113*tmp_242 - tmp_114*tmp_237) + tmp_126*(-tmp_122*tmp_242 - tmp_123*tmp_237) + tmp_135*(-tmp_131*tmp_242 - tmp_132*tmp_237) + tmp_144*(-tmp_140*tmp_242 - tmp_141*tmp_237) + tmp_153*(-tmp_149*tmp_242 - tmp_150*tmp_237) + tmp_162*(-tmp_158*tmp_242 - tmp_159*tmp_237) + tmp_171*(-tmp_167*tmp_242 - tmp_168*tmp_237) + tmp_180*(-tmp_176*tmp_242 - tmp_177*tmp_237) + tmp_189*(-tmp_185*tmp_242 - tmp_186*tmp_237) + tmp_198*(-tmp_194*tmp_242 - tmp_195*tmp_237) + tmp_207*(-tmp_203*tmp_242 - tmp_204*tmp_237) + tmp_216*(-tmp_212*tmp_242 - tmp_213*tmp_237) + tmp_225*(-tmp_221*tmp_242 - tmp_222*tmp_237) + tmp_234*(-tmp_230*tmp_242 - tmp_231*tmp_237) + tmp_54*(-tmp_237*tmp_41 - tmp_242*tmp_37) + tmp_63*(-tmp_237*tmp_60 - tmp_242*tmp_59) + tmp_72*(-tmp_237*tmp_69 - tmp_242*tmp_68) + tmp_81*(-tmp_237*tmp_78 - tmp_242*tmp_77) + tmp_90*(-tmp_237*tmp_87 - tmp_242*tmp_86) + tmp_99*(-tmp_237*tmp_96 - tmp_242*tmp_95);
      real_t a_3_3 = tmp_108*(-tmp_105*tmp_238 - tmp_105*tmp_242) + tmp_117*(-tmp_114*tmp_238 - tmp_114*tmp_242) + tmp_126*(-tmp_123*tmp_238 - tmp_123*tmp_242) + tmp_135*(-tmp_132*tmp_238 - tmp_132*tmp_242) + tmp_144*(-tmp_141*tmp_238 - tmp_141*tmp_242) + tmp_153*(-tmp_150*tmp_238 - tmp_150*tmp_242) + tmp_162*(-tmp_159*tmp_238 - tmp_159*tmp_242) + tmp_171*(-tmp_168*tmp_238 - tmp_168*tmp_242) + tmp_180*(-tmp_177*tmp_238 - tmp_177*tmp_242) + tmp_189*(-tmp_186*tmp_238 - tmp_186*tmp_242) + tmp_198*(-tmp_195*tmp_238 - tmp_195*tmp_242) + tmp_207*(-tmp_204*tmp_238 - tmp_204*tmp_242) + tmp_216*(-tmp_213*tmp_238 - tmp_213*tmp_242) + tmp_225*(-tmp_222*tmp_238 - tmp_222*tmp_242) + tmp_234*(-tmp_231*tmp_238 - tmp_231*tmp_242) + tmp_54*(-tmp_238*tmp_41 - tmp_242*tmp_41) + tmp_63*(-tmp_238*tmp_60 - tmp_242*tmp_60) + tmp_72*(-tmp_238*tmp_69 - tmp_242*tmp_69) + tmp_81*(-tmp_238*tmp_78 - tmp_242*tmp_78) + tmp_90*(-tmp_238*tmp_87 - tmp_242*tmp_87) + tmp_99*(-tmp_238*tmp_96 - tmp_242*tmp_96);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_5*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_5;
      real_t tmp_12 = tmp_0*tmp_6;
      real_t tmp_13 = tmp_2*tmp_8;
      real_t tmp_14 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_1*tmp_11 + tmp_10*tmp_2*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_3 + tmp_3*tmp_7);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = 0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_14*(tmp_18 + tmp_19);
      real_t tmp_21 = tmp_10*tmp_2 - tmp_12;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24;
      real_t tmp_26 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_27 = tmp_14*(tmp_25 + tmp_26);
      real_t tmp_28 = -tmp_1*tmp_10 + tmp_3*tmp_6;
      real_t tmp_29 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_30 = -tmp_29;
      real_t tmp_31 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_32 = 0.031405749086161582*tmp_30 + 0.93718850182767688*tmp_31;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_14*(tmp_32 + tmp_33);
      real_t tmp_35 = tmp_20*tmp_4 + tmp_21*tmp_27 + tmp_28*tmp_34;
      real_t tmp_36 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_37 = -tmp_13 + tmp_7;
      real_t tmp_38 = tmp_1*tmp_8 - tmp_6*tmp_9;
      real_t tmp_39 = tmp_20*tmp_36 + tmp_27*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_41 = tmp_0*tmp_8 - tmp_11;
      real_t tmp_42 = tmp_10*tmp_9 - tmp_3*tmp_8;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_27*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = p_affine_13_1*(-tmp_35 - tmp_39 - tmp_43 + 1);
      real_t tmp_45 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_46 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_47 = tmp_45*tmp_46;
      real_t tmp_48 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_49 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_50 = tmp_48*tmp_49;
      real_t tmp_51 = tmp_47 - tmp_50;
      real_t tmp_52 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_53 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_54 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_55 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_56 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_57 = tmp_49*tmp_56;
      real_t tmp_58 = tmp_45*tmp_53;
      real_t tmp_59 = tmp_54*tmp_55;
      real_t tmp_60 = 1.0 / (-tmp_46*tmp_59 + tmp_47*tmp_52 + tmp_48*tmp_53*tmp_54 - tmp_50*tmp_52 + tmp_55*tmp_57 - tmp_56*tmp_58);
      real_t tmp_61 = 0.5*tmp_60;
      real_t tmp_62 = tmp_51*tmp_61;
      real_t tmp_63 = tmp_49*tmp_55 - tmp_58;
      real_t tmp_64 = tmp_61*tmp_63;
      real_t tmp_65 = -tmp_46*tmp_55 + tmp_48*tmp_53;
      real_t tmp_66 = tmp_61*tmp_65;
      real_t tmp_67 = -1.0*tmp_62 - 1.0*tmp_64 - 1.0*tmp_66;
      real_t tmp_68 = 0.5*tmp_14;
      real_t tmp_69 = -tmp_21*tmp_68 - tmp_37*tmp_68 - tmp_41*tmp_68;
      real_t tmp_70 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_71 = tmp_60*(tmp_18 + tmp_70);
      real_t tmp_72 = -tmp_48*tmp_52 + tmp_55*tmp_56;
      real_t tmp_73 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_74 = tmp_60*(tmp_25 + tmp_73);
      real_t tmp_75 = tmp_46*tmp_52 - tmp_53*tmp_56;
      real_t tmp_76 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_77 = tmp_60*(tmp_32 + tmp_76);
      real_t tmp_78 = tmp_65*tmp_71 + tmp_72*tmp_74 + tmp_75*tmp_77;
      real_t tmp_79 = tmp_45*tmp_52 - tmp_59;
      real_t tmp_80 = -tmp_49*tmp_52 + tmp_53*tmp_54;
      real_t tmp_81 = tmp_63*tmp_71 + tmp_74*tmp_79 + tmp_77*tmp_80;
      real_t tmp_82 = -tmp_45*tmp_56 + tmp_48*tmp_54;
      real_t tmp_83 = -tmp_46*tmp_54 + tmp_57;
      real_t tmp_84 = tmp_51*tmp_71 + tmp_74*tmp_82 + tmp_77*tmp_83;
      real_t tmp_85 = -tmp_78 - tmp_81 - tmp_84 + 1;
      real_t tmp_86 = 1.0*std::pow((std::abs(tmp_15*tmp_24 - tmp_17*tmp_22)*std::abs(tmp_15*tmp_24 - tmp_17*tmp_22)) + (std::abs(tmp_15*tmp_31 - tmp_17*tmp_29)*std::abs(tmp_15*tmp_31 - tmp_17*tmp_29)) + (std::abs(tmp_22*tmp_31 - tmp_24*tmp_29)*std::abs(tmp_22*tmp_31 - tmp_24*tmp_29)), 1.0/2.0);
      real_t tmp_87 = 0.0068572537431980923*tmp_86;
      real_t tmp_88 = 0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17;
      real_t tmp_89 = tmp_14*(tmp_19 + tmp_88);
      real_t tmp_90 = 0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24;
      real_t tmp_91 = tmp_14*(tmp_26 + tmp_90);
      real_t tmp_92 = 0.19601935860219369*tmp_30 + 0.60796128279561268*tmp_31;
      real_t tmp_93 = tmp_14*(tmp_33 + tmp_92);
      real_t tmp_94 = tmp_21*tmp_91 + tmp_28*tmp_93 + tmp_4*tmp_89;
      real_t tmp_95 = tmp_36*tmp_89 + tmp_37*tmp_91 + tmp_38*tmp_93;
      real_t tmp_96 = tmp_40*tmp_89 + tmp_41*tmp_91 + tmp_42*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = p_affine_13_1*tmp_67;
      real_t tmp_99 = tmp_60*(tmp_70 + tmp_88);
      real_t tmp_100 = tmp_60*(tmp_73 + tmp_90);
      real_t tmp_101 = tmp_60*(tmp_76 + tmp_92);
      real_t tmp_102 = tmp_100*tmp_72 + tmp_101*tmp_75 + tmp_65*tmp_99;
      real_t tmp_103 = tmp_100*tmp_79 + tmp_101*tmp_80 + tmp_63*tmp_99;
      real_t tmp_104 = tmp_100*tmp_82 + tmp_101*tmp_83 + tmp_51*tmp_99;
      real_t tmp_105 = -tmp_102 - tmp_103 - tmp_104 + 1;
      real_t tmp_106 = 0.037198804536718075*tmp_86;
      real_t tmp_107 = 0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17;
      real_t tmp_108 = tmp_14*(tmp_107 + tmp_19);
      real_t tmp_109 = 0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24;
      real_t tmp_110 = tmp_14*(tmp_109 + tmp_26);
      real_t tmp_111 = 0.37605877282253791*tmp_30 + 0.039308471900058539*tmp_31;
      real_t tmp_112 = tmp_14*(tmp_111 + tmp_33);
      real_t tmp_113 = tmp_108*tmp_4 + tmp_110*tmp_21 + tmp_112*tmp_28;
      real_t tmp_114 = tmp_108*tmp_36 + tmp_110*tmp_37 + tmp_112*tmp_38;
      real_t tmp_115 = tmp_108*tmp_40 + tmp_110*tmp_41 + tmp_112*tmp_42;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = tmp_60*(tmp_107 + tmp_70);
      real_t tmp_118 = tmp_60*(tmp_109 + tmp_73);
      real_t tmp_119 = tmp_60*(tmp_111 + tmp_76);
      real_t tmp_120 = tmp_117*tmp_65 + tmp_118*tmp_72 + tmp_119*tmp_75;
      real_t tmp_121 = tmp_117*tmp_63 + tmp_118*tmp_79 + tmp_119*tmp_80;
      real_t tmp_122 = tmp_117*tmp_51 + tmp_118*tmp_82 + tmp_119*tmp_83;
      real_t tmp_123 = -tmp_120 - tmp_121 - tmp_122 + 1;
      real_t tmp_124 = 0.020848748529055869*tmp_86;
      real_t tmp_125 = 0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17;
      real_t tmp_126 = tmp_14*(tmp_125 + tmp_19);
      real_t tmp_127 = 0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24;
      real_t tmp_128 = tmp_14*(tmp_127 + tmp_26);
      real_t tmp_129 = 0.78764240869137092*tmp_30 + 0.1711304259088916*tmp_31;
      real_t tmp_130 = tmp_14*(tmp_129 + tmp_33);
      real_t tmp_131 = tmp_126*tmp_4 + tmp_128*tmp_21 + tmp_130*tmp_28;
      real_t tmp_132 = tmp_126*tmp_36 + tmp_128*tmp_37 + tmp_130*tmp_38;
      real_t tmp_133 = tmp_126*tmp_40 + tmp_128*tmp_41 + tmp_130*tmp_42;
      real_t tmp_134 = -tmp_131 - tmp_132 - tmp_133 + 1;
      real_t tmp_135 = tmp_60*(tmp_125 + tmp_70);
      real_t tmp_136 = tmp_60*(tmp_127 + tmp_73);
      real_t tmp_137 = tmp_60*(tmp_129 + tmp_76);
      real_t tmp_138 = tmp_135*tmp_65 + tmp_136*tmp_72 + tmp_137*tmp_75;
      real_t tmp_139 = tmp_135*tmp_63 + tmp_136*tmp_79 + tmp_137*tmp_80;
      real_t tmp_140 = tmp_135*tmp_51 + tmp_136*tmp_82 + tmp_137*tmp_83;
      real_t tmp_141 = -tmp_138 - tmp_139 - tmp_140 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_86;
      real_t tmp_143 = 0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17;
      real_t tmp_144 = tmp_14*(tmp_143 + tmp_19);
      real_t tmp_145 = 0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24;
      real_t tmp_146 = tmp_14*(tmp_145 + tmp_26);
      real_t tmp_147 = 0.58463275527740355*tmp_30 + 0.37605877282253791*tmp_31;
      real_t tmp_148 = tmp_14*(tmp_147 + tmp_33);
      real_t tmp_149 = tmp_144*tmp_4 + tmp_146*tmp_21 + tmp_148*tmp_28;
      real_t tmp_150 = tmp_144*tmp_36 + tmp_146*tmp_37 + tmp_148*tmp_38;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_146*tmp_41 + tmp_148*tmp_42;
      real_t tmp_152 = -tmp_149 - tmp_150 - tmp_151 + 1;
      real_t tmp_153 = tmp_60*(tmp_143 + tmp_70);
      real_t tmp_154 = tmp_60*(tmp_145 + tmp_73);
      real_t tmp_155 = tmp_60*(tmp_147 + tmp_76);
      real_t tmp_156 = tmp_153*tmp_65 + tmp_154*tmp_72 + tmp_155*tmp_75;
      real_t tmp_157 = tmp_153*tmp_63 + tmp_154*tmp_79 + tmp_155*tmp_80;
      real_t tmp_158 = tmp_153*tmp_51 + tmp_154*tmp_82 + tmp_155*tmp_83;
      real_t tmp_159 = -tmp_156 - tmp_157 - tmp_158 + 1;
      real_t tmp_160 = 0.020848748529055869*tmp_86;
      real_t tmp_161 = 0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17;
      real_t tmp_162 = tmp_14*(tmp_161 + tmp_19);
      real_t tmp_163 = 0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24;
      real_t tmp_164 = tmp_14*(tmp_163 + tmp_26);
      real_t tmp_165 = 0.041227165399737475*tmp_30 + 0.78764240869137092*tmp_31;
      real_t tmp_166 = tmp_14*(tmp_165 + tmp_33);
      real_t tmp_167 = tmp_162*tmp_4 + tmp_164*tmp_21 + tmp_166*tmp_28;
      real_t tmp_168 = tmp_162*tmp_36 + tmp_164*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_162*tmp_40 + tmp_164*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = tmp_60*(tmp_161 + tmp_70);
      real_t tmp_172 = tmp_60*(tmp_163 + tmp_73);
      real_t tmp_173 = tmp_60*(tmp_165 + tmp_76);
      real_t tmp_174 = tmp_171*tmp_65 + tmp_172*tmp_72 + tmp_173*tmp_75;
      real_t tmp_175 = tmp_171*tmp_63 + tmp_172*tmp_79 + tmp_173*tmp_80;
      real_t tmp_176 = tmp_171*tmp_51 + tmp_172*tmp_82 + tmp_173*tmp_83;
      real_t tmp_177 = -tmp_174 - tmp_175 - tmp_176 + 1;
      real_t tmp_178 = 0.019202922745021479*tmp_86;
      real_t tmp_179 = 0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17;
      real_t tmp_180 = tmp_14*(tmp_179 + tmp_19);
      real_t tmp_181 = 0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24;
      real_t tmp_182 = tmp_14*(tmp_181 + tmp_26);
      real_t tmp_183 = 0.039308471900058539*tmp_30 + 0.58463275527740355*tmp_31;
      real_t tmp_184 = tmp_14*(tmp_183 + tmp_33);
      real_t tmp_185 = tmp_180*tmp_4 + tmp_182*tmp_21 + tmp_184*tmp_28;
      real_t tmp_186 = tmp_180*tmp_36 + tmp_182*tmp_37 + tmp_184*tmp_38;
      real_t tmp_187 = tmp_180*tmp_40 + tmp_182*tmp_41 + tmp_184*tmp_42;
      real_t tmp_188 = -tmp_185 - tmp_186 - tmp_187 + 1;
      real_t tmp_189 = tmp_60*(tmp_179 + tmp_70);
      real_t tmp_190 = tmp_60*(tmp_181 + tmp_73);
      real_t tmp_191 = tmp_60*(tmp_183 + tmp_76);
      real_t tmp_192 = tmp_189*tmp_65 + tmp_190*tmp_72 + tmp_191*tmp_75;
      real_t tmp_193 = tmp_189*tmp_63 + tmp_190*tmp_79 + tmp_191*tmp_80;
      real_t tmp_194 = tmp_189*tmp_51 + tmp_190*tmp_82 + tmp_191*tmp_83;
      real_t tmp_195 = -tmp_192 - tmp_193 - tmp_194 + 1;
      real_t tmp_196 = 0.020848748529055869*tmp_86;
      real_t tmp_197 = 0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17;
      real_t tmp_198 = tmp_14*(tmp_19 + tmp_197);
      real_t tmp_199 = 0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24;
      real_t tmp_200 = tmp_14*(tmp_199 + tmp_26);
      real_t tmp_201 = 0.78764240869137092*tmp_30 + 0.041227165399737475*tmp_31;
      real_t tmp_202 = tmp_14*(tmp_201 + tmp_33);
      real_t tmp_203 = tmp_198*tmp_4 + tmp_200*tmp_21 + tmp_202*tmp_28;
      real_t tmp_204 = tmp_198*tmp_36 + tmp_200*tmp_37 + tmp_202*tmp_38;
      real_t tmp_205 = tmp_198*tmp_40 + tmp_200*tmp_41 + tmp_202*tmp_42;
      real_t tmp_206 = -tmp_203 - tmp_204 - tmp_205 + 1;
      real_t tmp_207 = tmp_60*(tmp_197 + tmp_70);
      real_t tmp_208 = tmp_60*(tmp_199 + tmp_73);
      real_t tmp_209 = tmp_60*(tmp_201 + tmp_76);
      real_t tmp_210 = tmp_207*tmp_65 + tmp_208*tmp_72 + tmp_209*tmp_75;
      real_t tmp_211 = tmp_207*tmp_63 + tmp_208*tmp_79 + tmp_209*tmp_80;
      real_t tmp_212 = tmp_207*tmp_51 + tmp_208*tmp_82 + tmp_209*tmp_83;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = 0.019202922745021479*tmp_86;
      real_t tmp_215 = 0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17;
      real_t tmp_216 = tmp_14*(tmp_19 + tmp_215);
      real_t tmp_217 = 0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24;
      real_t tmp_218 = tmp_14*(tmp_217 + tmp_26);
      real_t tmp_219 = 0.58463275527740355*tmp_30 + 0.039308471900058539*tmp_31;
      real_t tmp_220 = tmp_14*(tmp_219 + tmp_33);
      real_t tmp_221 = tmp_21*tmp_218 + tmp_216*tmp_4 + tmp_220*tmp_28;
      real_t tmp_222 = tmp_216*tmp_36 + tmp_218*tmp_37 + tmp_220*tmp_38;
      real_t tmp_223 = tmp_216*tmp_40 + tmp_218*tmp_41 + tmp_220*tmp_42;
      real_t tmp_224 = -tmp_221 - tmp_222 - tmp_223 + 1;
      real_t tmp_225 = tmp_60*(tmp_215 + tmp_70);
      real_t tmp_226 = tmp_60*(tmp_217 + tmp_73);
      real_t tmp_227 = tmp_60*(tmp_219 + tmp_76);
      real_t tmp_228 = tmp_225*tmp_65 + tmp_226*tmp_72 + tmp_227*tmp_75;
      real_t tmp_229 = tmp_225*tmp_63 + tmp_226*tmp_79 + tmp_227*tmp_80;
      real_t tmp_230 = tmp_225*tmp_51 + tmp_226*tmp_82 + tmp_227*tmp_83;
      real_t tmp_231 = -tmp_228 - tmp_229 - tmp_230 + 1;
      real_t tmp_232 = 0.020848748529055869*tmp_86;
      real_t tmp_233 = 0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17;
      real_t tmp_234 = tmp_14*(tmp_19 + tmp_233);
      real_t tmp_235 = 0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24;
      real_t tmp_236 = tmp_14*(tmp_235 + tmp_26);
      real_t tmp_237 = 0.1711304259088916*tmp_30 + 0.78764240869137092*tmp_31;
      real_t tmp_238 = tmp_14*(tmp_237 + tmp_33);
      real_t tmp_239 = tmp_21*tmp_236 + tmp_234*tmp_4 + tmp_238*tmp_28;
      real_t tmp_240 = tmp_234*tmp_36 + tmp_236*tmp_37 + tmp_238*tmp_38;
      real_t tmp_241 = tmp_234*tmp_40 + tmp_236*tmp_41 + tmp_238*tmp_42;
      real_t tmp_242 = -tmp_239 - tmp_240 - tmp_241 + 1;
      real_t tmp_243 = tmp_60*(tmp_233 + tmp_70);
      real_t tmp_244 = tmp_60*(tmp_235 + tmp_73);
      real_t tmp_245 = tmp_60*(tmp_237 + tmp_76);
      real_t tmp_246 = tmp_243*tmp_65 + tmp_244*tmp_72 + tmp_245*tmp_75;
      real_t tmp_247 = tmp_243*tmp_63 + tmp_244*tmp_79 + tmp_245*tmp_80;
      real_t tmp_248 = tmp_243*tmp_51 + tmp_244*tmp_82 + tmp_245*tmp_83;
      real_t tmp_249 = -tmp_246 - tmp_247 - tmp_248 + 1;
      real_t tmp_250 = 0.019202922745021479*tmp_86;
      real_t tmp_251 = 0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17;
      real_t tmp_252 = tmp_14*(tmp_19 + tmp_251);
      real_t tmp_253 = 0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24;
      real_t tmp_254 = tmp_14*(tmp_253 + tmp_26);
      real_t tmp_255 = 0.37605877282253791*tmp_30 + 0.58463275527740355*tmp_31;
      real_t tmp_256 = tmp_14*(tmp_255 + tmp_33);
      real_t tmp_257 = tmp_21*tmp_254 + tmp_252*tmp_4 + tmp_256*tmp_28;
      real_t tmp_258 = tmp_252*tmp_36 + tmp_254*tmp_37 + tmp_256*tmp_38;
      real_t tmp_259 = tmp_252*tmp_40 + tmp_254*tmp_41 + tmp_256*tmp_42;
      real_t tmp_260 = -tmp_257 - tmp_258 - tmp_259 + 1;
      real_t tmp_261 = tmp_60*(tmp_251 + tmp_70);
      real_t tmp_262 = tmp_60*(tmp_253 + tmp_73);
      real_t tmp_263 = tmp_60*(tmp_255 + tmp_76);
      real_t tmp_264 = tmp_261*tmp_65 + tmp_262*tmp_72 + tmp_263*tmp_75;
      real_t tmp_265 = tmp_261*tmp_63 + tmp_262*tmp_79 + tmp_263*tmp_80;
      real_t tmp_266 = tmp_261*tmp_51 + tmp_262*tmp_82 + tmp_263*tmp_83;
      real_t tmp_267 = -tmp_264 - tmp_265 - tmp_266 + 1;
      real_t tmp_268 = 0.020848748529055869*tmp_86;
      real_t tmp_269 = 0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17;
      real_t tmp_270 = tmp_14*(tmp_19 + tmp_269);
      real_t tmp_271 = 0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24;
      real_t tmp_272 = tmp_14*(tmp_26 + tmp_271);
      real_t tmp_273 = 0.041227165399737475*tmp_30 + 0.1711304259088916*tmp_31;
      real_t tmp_274 = tmp_14*(tmp_273 + tmp_33);
      real_t tmp_275 = tmp_21*tmp_272 + tmp_270*tmp_4 + tmp_274*tmp_28;
      real_t tmp_276 = tmp_270*tmp_36 + tmp_272*tmp_37 + tmp_274*tmp_38;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_272*tmp_41 + tmp_274*tmp_42;
      real_t tmp_278 = -tmp_275 - tmp_276 - tmp_277 + 1;
      real_t tmp_279 = tmp_60*(tmp_269 + tmp_70);
      real_t tmp_280 = tmp_60*(tmp_271 + tmp_73);
      real_t tmp_281 = tmp_60*(tmp_273 + tmp_76);
      real_t tmp_282 = tmp_279*tmp_65 + tmp_280*tmp_72 + tmp_281*tmp_75;
      real_t tmp_283 = tmp_279*tmp_63 + tmp_280*tmp_79 + tmp_281*tmp_80;
      real_t tmp_284 = tmp_279*tmp_51 + tmp_280*tmp_82 + tmp_281*tmp_83;
      real_t tmp_285 = -tmp_282 - tmp_283 - tmp_284 + 1;
      real_t tmp_286 = 0.019202922745021479*tmp_86;
      real_t tmp_287 = 0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17;
      real_t tmp_288 = tmp_14*(tmp_19 + tmp_287);
      real_t tmp_289 = 0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24;
      real_t tmp_290 = tmp_14*(tmp_26 + tmp_289);
      real_t tmp_291 = 0.40446199974765351*tmp_30 + 0.19107600050469298*tmp_31;
      real_t tmp_292 = tmp_14*(tmp_291 + tmp_33);
      real_t tmp_293 = tmp_21*tmp_290 + tmp_28*tmp_292 + tmp_288*tmp_4;
      real_t tmp_294 = tmp_288*tmp_36 + tmp_290*tmp_37 + tmp_292*tmp_38;
      real_t tmp_295 = tmp_288*tmp_40 + tmp_290*tmp_41 + tmp_292*tmp_42;
      real_t tmp_296 = -tmp_293 - tmp_294 - tmp_295 + 1;
      real_t tmp_297 = tmp_60*(tmp_287 + tmp_70);
      real_t tmp_298 = tmp_60*(tmp_289 + tmp_73);
      real_t tmp_299 = tmp_60*(tmp_291 + tmp_76);
      real_t tmp_300 = tmp_297*tmp_65 + tmp_298*tmp_72 + tmp_299*tmp_75;
      real_t tmp_301 = tmp_297*tmp_63 + tmp_298*tmp_79 + tmp_299*tmp_80;
      real_t tmp_302 = tmp_297*tmp_51 + tmp_298*tmp_82 + tmp_299*tmp_83;
      real_t tmp_303 = -tmp_300 - tmp_301 - tmp_302 + 1;
      real_t tmp_304 = 0.042507265838595799*tmp_86;
      real_t tmp_305 = 0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17;
      real_t tmp_306 = tmp_14*(tmp_19 + tmp_305);
      real_t tmp_307 = 0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24;
      real_t tmp_308 = tmp_14*(tmp_26 + tmp_307);
      real_t tmp_309 = 0.039308471900058539*tmp_30 + 0.37605877282253791*tmp_31;
      real_t tmp_310 = tmp_14*(tmp_309 + tmp_33);
      real_t tmp_311 = tmp_21*tmp_308 + tmp_28*tmp_310 + tmp_306*tmp_4;
      real_t tmp_312 = tmp_306*tmp_36 + tmp_308*tmp_37 + tmp_310*tmp_38;
      real_t tmp_313 = tmp_306*tmp_40 + tmp_308*tmp_41 + tmp_310*tmp_42;
      real_t tmp_314 = -tmp_311 - tmp_312 - tmp_313 + 1;
      real_t tmp_315 = tmp_60*(tmp_305 + tmp_70);
      real_t tmp_316 = tmp_60*(tmp_307 + tmp_73);
      real_t tmp_317 = tmp_60*(tmp_309 + tmp_76);
      real_t tmp_318 = tmp_315*tmp_65 + tmp_316*tmp_72 + tmp_317*tmp_75;
      real_t tmp_319 = tmp_315*tmp_63 + tmp_316*tmp_79 + tmp_317*tmp_80;
      real_t tmp_320 = tmp_315*tmp_51 + tmp_316*tmp_82 + tmp_317*tmp_83;
      real_t tmp_321 = -tmp_318 - tmp_319 - tmp_320 + 1;
      real_t tmp_322 = 0.020848748529055869*tmp_86;
      real_t tmp_323 = 0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17;
      real_t tmp_324 = tmp_14*(tmp_19 + tmp_323);
      real_t tmp_325 = 0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24;
      real_t tmp_326 = tmp_14*(tmp_26 + tmp_325);
      real_t tmp_327 = 0.93718850182767688*tmp_30 + 0.031405749086161582*tmp_31;
      real_t tmp_328 = tmp_14*(tmp_327 + tmp_33);
      real_t tmp_329 = tmp_21*tmp_326 + tmp_28*tmp_328 + tmp_324*tmp_4;
      real_t tmp_330 = tmp_324*tmp_36 + tmp_326*tmp_37 + tmp_328*tmp_38;
      real_t tmp_331 = tmp_324*tmp_40 + tmp_326*tmp_41 + tmp_328*tmp_42;
      real_t tmp_332 = -tmp_329 - tmp_330 - tmp_331 + 1;
      real_t tmp_333 = tmp_60*(tmp_323 + tmp_70);
      real_t tmp_334 = tmp_60*(tmp_325 + tmp_73);
      real_t tmp_335 = tmp_60*(tmp_327 + tmp_76);
      real_t tmp_336 = tmp_333*tmp_65 + tmp_334*tmp_72 + tmp_335*tmp_75;
      real_t tmp_337 = tmp_333*tmp_63 + tmp_334*tmp_79 + tmp_335*tmp_80;
      real_t tmp_338 = tmp_333*tmp_51 + tmp_334*tmp_82 + tmp_335*tmp_83;
      real_t tmp_339 = -tmp_336 - tmp_337 - tmp_338 + 1;
      real_t tmp_340 = 0.0068572537431980923*tmp_86;
      real_t tmp_341 = 0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17;
      real_t tmp_342 = tmp_14*(tmp_19 + tmp_341);
      real_t tmp_343 = 0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24;
      real_t tmp_344 = tmp_14*(tmp_26 + tmp_343);
      real_t tmp_345 = 0.60796128279561268*tmp_30 + 0.19601935860219369*tmp_31;
      real_t tmp_346 = tmp_14*(tmp_33 + tmp_345);
      real_t tmp_347 = tmp_21*tmp_344 + tmp_28*tmp_346 + tmp_342*tmp_4;
      real_t tmp_348 = tmp_342*tmp_36 + tmp_344*tmp_37 + tmp_346*tmp_38;
      real_t tmp_349 = tmp_342*tmp_40 + tmp_344*tmp_41 + tmp_346*tmp_42;
      real_t tmp_350 = -tmp_347 - tmp_348 - tmp_349 + 1;
      real_t tmp_351 = tmp_60*(tmp_341 + tmp_70);
      real_t tmp_352 = tmp_60*(tmp_343 + tmp_73);
      real_t tmp_353 = tmp_60*(tmp_345 + tmp_76);
      real_t tmp_354 = tmp_351*tmp_65 + tmp_352*tmp_72 + tmp_353*tmp_75;
      real_t tmp_355 = tmp_351*tmp_63 + tmp_352*tmp_79 + tmp_353*tmp_80;
      real_t tmp_356 = tmp_351*tmp_51 + tmp_352*tmp_82 + tmp_353*tmp_83;
      real_t tmp_357 = -tmp_354 - tmp_355 - tmp_356 + 1;
      real_t tmp_358 = 0.037198804536718075*tmp_86;
      real_t tmp_359 = 0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17;
      real_t tmp_360 = tmp_14*(tmp_19 + tmp_359);
      real_t tmp_361 = 0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24;
      real_t tmp_362 = tmp_14*(tmp_26 + tmp_361);
      real_t tmp_363 = 0.19107600050469298*tmp_30 + 0.40446199974765351*tmp_31;
      real_t tmp_364 = tmp_14*(tmp_33 + tmp_363);
      real_t tmp_365 = tmp_21*tmp_362 + tmp_28*tmp_364 + tmp_360*tmp_4;
      real_t tmp_366 = tmp_36*tmp_360 + tmp_362*tmp_37 + tmp_364*tmp_38;
      real_t tmp_367 = tmp_360*tmp_40 + tmp_362*tmp_41 + tmp_364*tmp_42;
      real_t tmp_368 = -tmp_365 - tmp_366 - tmp_367 + 1;
      real_t tmp_369 = tmp_60*(tmp_359 + tmp_70);
      real_t tmp_370 = tmp_60*(tmp_361 + tmp_73);
      real_t tmp_371 = tmp_60*(tmp_363 + tmp_76);
      real_t tmp_372 = tmp_369*tmp_65 + tmp_370*tmp_72 + tmp_371*tmp_75;
      real_t tmp_373 = tmp_369*tmp_63 + tmp_370*tmp_79 + tmp_371*tmp_80;
      real_t tmp_374 = tmp_369*tmp_51 + tmp_370*tmp_82 + tmp_371*tmp_83;
      real_t tmp_375 = -tmp_372 - tmp_373 - tmp_374 + 1;
      real_t tmp_376 = 0.042507265838595799*tmp_86;
      real_t tmp_377 = 0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17;
      real_t tmp_378 = tmp_14*(tmp_19 + tmp_377);
      real_t tmp_379 = 0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24;
      real_t tmp_380 = tmp_14*(tmp_26 + tmp_379);
      real_t tmp_381 = 0.031405749086161582*tmp_30 + 0.031405749086161582*tmp_31;
      real_t tmp_382 = tmp_14*(tmp_33 + tmp_381);
      real_t tmp_383 = tmp_21*tmp_380 + tmp_28*tmp_382 + tmp_378*tmp_4;
      real_t tmp_384 = tmp_36*tmp_378 + tmp_37*tmp_380 + tmp_38*tmp_382;
      real_t tmp_385 = tmp_378*tmp_40 + tmp_380*tmp_41 + tmp_382*tmp_42;
      real_t tmp_386 = -tmp_383 - tmp_384 - tmp_385 + 1;
      real_t tmp_387 = tmp_60*(tmp_377 + tmp_70);
      real_t tmp_388 = tmp_60*(tmp_379 + tmp_73);
      real_t tmp_389 = tmp_60*(tmp_381 + tmp_76);
      real_t tmp_390 = tmp_387*tmp_65 + tmp_388*tmp_72 + tmp_389*tmp_75;
      real_t tmp_391 = tmp_387*tmp_63 + tmp_388*tmp_79 + tmp_389*tmp_80;
      real_t tmp_392 = tmp_387*tmp_51 + tmp_388*tmp_82 + tmp_389*tmp_83;
      real_t tmp_393 = -tmp_390 - tmp_391 - tmp_392 + 1;
      real_t tmp_394 = 0.0068572537431980923*tmp_86;
      real_t tmp_395 = 0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17;
      real_t tmp_396 = tmp_14*(tmp_19 + tmp_395);
      real_t tmp_397 = 0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24;
      real_t tmp_398 = tmp_14*(tmp_26 + tmp_397);
      real_t tmp_399 = 0.19601935860219369*tmp_30 + 0.19601935860219369*tmp_31;
      real_t tmp_400 = tmp_14*(tmp_33 + tmp_399);
      real_t tmp_401 = tmp_21*tmp_398 + tmp_28*tmp_400 + tmp_396*tmp_4;
      real_t tmp_402 = tmp_36*tmp_396 + tmp_37*tmp_398 + tmp_38*tmp_400;
      real_t tmp_403 = tmp_396*tmp_40 + tmp_398*tmp_41 + tmp_400*tmp_42;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_60*(tmp_395 + tmp_70);
      real_t tmp_406 = tmp_60*(tmp_397 + tmp_73);
      real_t tmp_407 = tmp_60*(tmp_399 + tmp_76);
      real_t tmp_408 = tmp_405*tmp_65 + tmp_406*tmp_72 + tmp_407*tmp_75;
      real_t tmp_409 = tmp_405*tmp_63 + tmp_406*tmp_79 + tmp_407*tmp_80;
      real_t tmp_410 = tmp_405*tmp_51 + tmp_406*tmp_82 + tmp_407*tmp_83;
      real_t tmp_411 = -tmp_408 - tmp_409 - tmp_410 + 1;
      real_t tmp_412 = 0.037198804536718075*tmp_86;
      real_t tmp_413 = 0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17;
      real_t tmp_414 = tmp_14*(tmp_19 + tmp_413);
      real_t tmp_415 = 0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24;
      real_t tmp_416 = tmp_14*(tmp_26 + tmp_415);
      real_t tmp_417 = 0.40446199974765351*tmp_30 + 0.40446199974765351*tmp_31;
      real_t tmp_418 = tmp_14*(tmp_33 + tmp_417);
      real_t tmp_419 = tmp_21*tmp_416 + tmp_28*tmp_418 + tmp_4*tmp_414;
      real_t tmp_420 = tmp_36*tmp_414 + tmp_37*tmp_416 + tmp_38*tmp_418;
      real_t tmp_421 = tmp_40*tmp_414 + tmp_41*tmp_416 + tmp_418*tmp_42;
      real_t tmp_422 = -tmp_419 - tmp_420 - tmp_421 + 1;
      real_t tmp_423 = tmp_60*(tmp_413 + tmp_70);
      real_t tmp_424 = tmp_60*(tmp_415 + tmp_73);
      real_t tmp_425 = tmp_60*(tmp_417 + tmp_76);
      real_t tmp_426 = tmp_423*tmp_65 + tmp_424*tmp_72 + tmp_425*tmp_75;
      real_t tmp_427 = tmp_423*tmp_63 + tmp_424*tmp_79 + tmp_425*tmp_80;
      real_t tmp_428 = tmp_423*tmp_51 + tmp_424*tmp_82 + tmp_425*tmp_83;
      real_t tmp_429 = -tmp_426 - tmp_427 - tmp_428 + 1;
      real_t tmp_430 = 0.042507265838595799*tmp_86;
      real_t tmp_431 = 0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17;
      real_t tmp_432 = tmp_14*(tmp_19 + tmp_431);
      real_t tmp_433 = 0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24;
      real_t tmp_434 = tmp_14*(tmp_26 + tmp_433);
      real_t tmp_435 = 0.1711304259088916*tmp_30 + 0.041227165399737475*tmp_31;
      real_t tmp_436 = tmp_14*(tmp_33 + tmp_435);
      real_t tmp_437 = tmp_21*tmp_434 + tmp_28*tmp_436 + tmp_4*tmp_432;
      real_t tmp_438 = tmp_36*tmp_432 + tmp_37*tmp_434 + tmp_38*tmp_436;
      real_t tmp_439 = tmp_40*tmp_432 + tmp_41*tmp_434 + tmp_42*tmp_436;
      real_t tmp_440 = -tmp_437 - tmp_438 - tmp_439 + 1;
      real_t tmp_441 = tmp_60*(tmp_431 + tmp_70);
      real_t tmp_442 = tmp_60*(tmp_433 + tmp_73);
      real_t tmp_443 = tmp_60*(tmp_435 + tmp_76);
      real_t tmp_444 = tmp_441*tmp_65 + tmp_442*tmp_72 + tmp_443*tmp_75;
      real_t tmp_445 = tmp_441*tmp_63 + tmp_442*tmp_79 + tmp_443*tmp_80;
      real_t tmp_446 = tmp_441*tmp_51 + tmp_442*tmp_82 + tmp_443*tmp_83;
      real_t tmp_447 = -tmp_444 - tmp_445 - tmp_446 + 1;
      real_t tmp_448 = 0.019202922745021479*tmp_86;
      real_t tmp_449 = p_affine_13_1*tmp_66;
      real_t tmp_450 = p_affine_13_1*tmp_64;
      real_t tmp_451 = p_affine_13_1*tmp_62;
      real_t a_0_0 = tmp_106*(p_affine_13_2*tmp_105*tmp_69 - tmp_97*tmp_98) + tmp_124*(p_affine_13_2*tmp_123*tmp_69 - tmp_116*tmp_98) + tmp_142*(p_affine_13_2*tmp_141*tmp_69 - tmp_134*tmp_98) + tmp_160*(p_affine_13_2*tmp_159*tmp_69 - tmp_152*tmp_98) + tmp_178*(p_affine_13_2*tmp_177*tmp_69 - tmp_170*tmp_98) + tmp_196*(p_affine_13_2*tmp_195*tmp_69 - tmp_188*tmp_98) + tmp_214*(p_affine_13_2*tmp_213*tmp_69 - tmp_206*tmp_98) + tmp_232*(p_affine_13_2*tmp_231*tmp_69 - tmp_224*tmp_98) + tmp_250*(p_affine_13_2*tmp_249*tmp_69 - tmp_242*tmp_98) + tmp_268*(p_affine_13_2*tmp_267*tmp_69 - tmp_260*tmp_98) + tmp_286*(p_affine_13_2*tmp_285*tmp_69 - tmp_278*tmp_98) + tmp_304*(p_affine_13_2*tmp_303*tmp_69 - tmp_296*tmp_98) + tmp_322*(p_affine_13_2*tmp_321*tmp_69 - tmp_314*tmp_98) + tmp_340*(p_affine_13_2*tmp_339*tmp_69 - tmp_332*tmp_98) + tmp_358*(p_affine_13_2*tmp_357*tmp_69 - tmp_350*tmp_98) + tmp_376*(p_affine_13_2*tmp_375*tmp_69 - tmp_368*tmp_98) + tmp_394*(p_affine_13_2*tmp_393*tmp_69 - tmp_386*tmp_98) + tmp_412*(p_affine_13_2*tmp_411*tmp_69 - tmp_404*tmp_98) + tmp_430*(p_affine_13_2*tmp_429*tmp_69 - tmp_422*tmp_98) + tmp_448*(p_affine_13_2*tmp_447*tmp_69 - tmp_440*tmp_98) + tmp_87*(p_affine_13_2*tmp_69*tmp_85 - tmp_44*tmp_67);
      real_t a_0_1 = tmp_106*(p_affine_13_2*tmp_102*tmp_69 - tmp_449*tmp_97) + tmp_124*(p_affine_13_2*tmp_120*tmp_69 - tmp_116*tmp_449) + tmp_142*(p_affine_13_2*tmp_138*tmp_69 - tmp_134*tmp_449) + tmp_160*(p_affine_13_2*tmp_156*tmp_69 - tmp_152*tmp_449) + tmp_178*(p_affine_13_2*tmp_174*tmp_69 - tmp_170*tmp_449) + tmp_196*(p_affine_13_2*tmp_192*tmp_69 - tmp_188*tmp_449) + tmp_214*(p_affine_13_2*tmp_210*tmp_69 - tmp_206*tmp_449) + tmp_232*(p_affine_13_2*tmp_228*tmp_69 - tmp_224*tmp_449) + tmp_250*(p_affine_13_2*tmp_246*tmp_69 - tmp_242*tmp_449) + tmp_268*(p_affine_13_2*tmp_264*tmp_69 - tmp_260*tmp_449) + tmp_286*(p_affine_13_2*tmp_282*tmp_69 - tmp_278*tmp_449) + tmp_304*(p_affine_13_2*tmp_300*tmp_69 - tmp_296*tmp_449) + tmp_322*(p_affine_13_2*tmp_318*tmp_69 - tmp_314*tmp_449) + tmp_340*(p_affine_13_2*tmp_336*tmp_69 - tmp_332*tmp_449) + tmp_358*(p_affine_13_2*tmp_354*tmp_69 - tmp_350*tmp_449) + tmp_376*(p_affine_13_2*tmp_372*tmp_69 - tmp_368*tmp_449) + tmp_394*(p_affine_13_2*tmp_390*tmp_69 - tmp_386*tmp_449) + tmp_412*(p_affine_13_2*tmp_408*tmp_69 - tmp_404*tmp_449) + tmp_430*(p_affine_13_2*tmp_426*tmp_69 - tmp_422*tmp_449) + tmp_448*(p_affine_13_2*tmp_444*tmp_69 - tmp_440*tmp_449) + tmp_87*(p_affine_13_2*tmp_69*tmp_78 - tmp_44*tmp_66);
      real_t a_0_2 = tmp_106*(p_affine_13_2*tmp_103*tmp_69 - tmp_450*tmp_97) + tmp_124*(p_affine_13_2*tmp_121*tmp_69 - tmp_116*tmp_450) + tmp_142*(p_affine_13_2*tmp_139*tmp_69 - tmp_134*tmp_450) + tmp_160*(p_affine_13_2*tmp_157*tmp_69 - tmp_152*tmp_450) + tmp_178*(p_affine_13_2*tmp_175*tmp_69 - tmp_170*tmp_450) + tmp_196*(p_affine_13_2*tmp_193*tmp_69 - tmp_188*tmp_450) + tmp_214*(p_affine_13_2*tmp_211*tmp_69 - tmp_206*tmp_450) + tmp_232*(p_affine_13_2*tmp_229*tmp_69 - tmp_224*tmp_450) + tmp_250*(p_affine_13_2*tmp_247*tmp_69 - tmp_242*tmp_450) + tmp_268*(p_affine_13_2*tmp_265*tmp_69 - tmp_260*tmp_450) + tmp_286*(p_affine_13_2*tmp_283*tmp_69 - tmp_278*tmp_450) + tmp_304*(p_affine_13_2*tmp_301*tmp_69 - tmp_296*tmp_450) + tmp_322*(p_affine_13_2*tmp_319*tmp_69 - tmp_314*tmp_450) + tmp_340*(p_affine_13_2*tmp_337*tmp_69 - tmp_332*tmp_450) + tmp_358*(p_affine_13_2*tmp_355*tmp_69 - tmp_350*tmp_450) + tmp_376*(p_affine_13_2*tmp_373*tmp_69 - tmp_368*tmp_450) + tmp_394*(p_affine_13_2*tmp_391*tmp_69 - tmp_386*tmp_450) + tmp_412*(p_affine_13_2*tmp_409*tmp_69 - tmp_404*tmp_450) + tmp_430*(p_affine_13_2*tmp_427*tmp_69 - tmp_422*tmp_450) + tmp_448*(p_affine_13_2*tmp_445*tmp_69 - tmp_440*tmp_450) + tmp_87*(p_affine_13_2*tmp_69*tmp_81 - tmp_44*tmp_64);
      real_t a_0_3 = tmp_106*(p_affine_13_2*tmp_104*tmp_69 - tmp_451*tmp_97) + tmp_124*(p_affine_13_2*tmp_122*tmp_69 - tmp_116*tmp_451) + tmp_142*(p_affine_13_2*tmp_140*tmp_69 - tmp_134*tmp_451) + tmp_160*(p_affine_13_2*tmp_158*tmp_69 - tmp_152*tmp_451) + tmp_178*(p_affine_13_2*tmp_176*tmp_69 - tmp_170*tmp_451) + tmp_196*(p_affine_13_2*tmp_194*tmp_69 - tmp_188*tmp_451) + tmp_214*(p_affine_13_2*tmp_212*tmp_69 - tmp_206*tmp_451) + tmp_232*(p_affine_13_2*tmp_230*tmp_69 - tmp_224*tmp_451) + tmp_250*(p_affine_13_2*tmp_248*tmp_69 - tmp_242*tmp_451) + tmp_268*(p_affine_13_2*tmp_266*tmp_69 - tmp_260*tmp_451) + tmp_286*(p_affine_13_2*tmp_284*tmp_69 - tmp_278*tmp_451) + tmp_304*(p_affine_13_2*tmp_302*tmp_69 - tmp_296*tmp_451) + tmp_322*(p_affine_13_2*tmp_320*tmp_69 - tmp_314*tmp_451) + tmp_340*(p_affine_13_2*tmp_338*tmp_69 - tmp_332*tmp_451) + tmp_358*(p_affine_13_2*tmp_356*tmp_69 - tmp_350*tmp_451) + tmp_376*(p_affine_13_2*tmp_374*tmp_69 - tmp_368*tmp_451) + tmp_394*(p_affine_13_2*tmp_392*tmp_69 - tmp_386*tmp_451) + tmp_412*(p_affine_13_2*tmp_410*tmp_69 - tmp_404*tmp_451) + tmp_430*(p_affine_13_2*tmp_428*tmp_69 - tmp_422*tmp_451) + tmp_448*(p_affine_13_2*tmp_446*tmp_69 - tmp_440*tmp_451) + tmp_87*(p_affine_13_2*tmp_69*tmp_84 - tmp_44*tmp_62);
      real_t a_1_0 = tmp_106*(0.5*p_affine_13_2*tmp_105*tmp_14*tmp_21 - tmp_94*tmp_98) + tmp_124*(0.5*p_affine_13_2*tmp_123*tmp_14*tmp_21 - tmp_113*tmp_98) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_141*tmp_21 - tmp_131*tmp_98) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_159*tmp_21 - tmp_149*tmp_98) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_177*tmp_21 - tmp_167*tmp_98) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_195*tmp_21 - tmp_185*tmp_98) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_213 - tmp_203*tmp_98) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_231 - tmp_221*tmp_98) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_249 - tmp_239*tmp_98) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_267 - tmp_257*tmp_98) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_285 - tmp_275*tmp_98) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_303 - tmp_293*tmp_98) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_321 - tmp_311*tmp_98) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_339 - tmp_329*tmp_98) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_357 - tmp_347*tmp_98) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_375 - tmp_365*tmp_98) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_393 - tmp_383*tmp_98) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_411 - tmp_401*tmp_98) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_429 - tmp_419*tmp_98) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_447 - tmp_437*tmp_98) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_85 - tmp_35*tmp_98);
      real_t a_1_1 = tmp_106*(0.5*p_affine_13_2*tmp_102*tmp_14*tmp_21 - tmp_449*tmp_94) + tmp_124*(0.5*p_affine_13_2*tmp_120*tmp_14*tmp_21 - tmp_113*tmp_449) + tmp_142*(0.5*p_affine_13_2*tmp_138*tmp_14*tmp_21 - tmp_131*tmp_449) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_156*tmp_21 - tmp_149*tmp_449) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_174*tmp_21 - tmp_167*tmp_449) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_192*tmp_21 - tmp_185*tmp_449) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_210 - tmp_203*tmp_449) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_228 - tmp_221*tmp_449) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_246 - tmp_239*tmp_449) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_264 - tmp_257*tmp_449) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_282 - tmp_275*tmp_449) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_300 - tmp_293*tmp_449) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_318 - tmp_311*tmp_449) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_336 - tmp_329*tmp_449) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_354 - tmp_347*tmp_449) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_372 - tmp_365*tmp_449) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_390 - tmp_383*tmp_449) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_408 - tmp_401*tmp_449) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_426 - tmp_419*tmp_449) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_444 - tmp_437*tmp_449) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_78 - tmp_35*tmp_449);
      real_t a_1_2 = tmp_106*(0.5*p_affine_13_2*tmp_103*tmp_14*tmp_21 - tmp_450*tmp_94) + tmp_124*(0.5*p_affine_13_2*tmp_121*tmp_14*tmp_21 - tmp_113*tmp_450) + tmp_142*(0.5*p_affine_13_2*tmp_139*tmp_14*tmp_21 - tmp_131*tmp_450) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_157*tmp_21 - tmp_149*tmp_450) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_175*tmp_21 - tmp_167*tmp_450) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_193*tmp_21 - tmp_185*tmp_450) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_211 - tmp_203*tmp_450) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_229 - tmp_221*tmp_450) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_247 - tmp_239*tmp_450) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_265 - tmp_257*tmp_450) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_283 - tmp_275*tmp_450) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_301 - tmp_293*tmp_450) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_319 - tmp_311*tmp_450) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_337 - tmp_329*tmp_450) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_355 - tmp_347*tmp_450) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_373 - tmp_365*tmp_450) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_391 - tmp_383*tmp_450) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_409 - tmp_401*tmp_450) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_427 - tmp_419*tmp_450) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_445 - tmp_437*tmp_450) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_81 - tmp_35*tmp_450);
      real_t a_1_3 = tmp_106*(0.5*p_affine_13_2*tmp_104*tmp_14*tmp_21 - tmp_451*tmp_94) + tmp_124*(0.5*p_affine_13_2*tmp_122*tmp_14*tmp_21 - tmp_113*tmp_451) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_140*tmp_21 - tmp_131*tmp_451) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_158*tmp_21 - tmp_149*tmp_451) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_176*tmp_21 - tmp_167*tmp_451) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_194*tmp_21 - tmp_185*tmp_451) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_212 - tmp_203*tmp_451) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_230 - tmp_221*tmp_451) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_248 - tmp_239*tmp_451) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_266 - tmp_257*tmp_451) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_284 - tmp_275*tmp_451) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_302 - tmp_293*tmp_451) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_320 - tmp_311*tmp_451) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_338 - tmp_329*tmp_451) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_356 - tmp_347*tmp_451) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_374 - tmp_365*tmp_451) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_392 - tmp_383*tmp_451) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_410 - tmp_401*tmp_451) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_428 - tmp_419*tmp_451) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_446 - tmp_437*tmp_451) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_21*tmp_84 - tmp_35*tmp_451);
      real_t a_2_0 = tmp_106*(0.5*p_affine_13_2*tmp_105*tmp_14*tmp_37 - tmp_95*tmp_98) + tmp_124*(0.5*p_affine_13_2*tmp_123*tmp_14*tmp_37 - tmp_114*tmp_98) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_141*tmp_37 - tmp_132*tmp_98) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_159*tmp_37 - tmp_150*tmp_98) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_177*tmp_37 - tmp_168*tmp_98) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_195*tmp_37 - tmp_186*tmp_98) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_213*tmp_37 - tmp_204*tmp_98) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_231*tmp_37 - tmp_222*tmp_98) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_249*tmp_37 - tmp_240*tmp_98) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_267*tmp_37 - tmp_258*tmp_98) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_285*tmp_37 - tmp_276*tmp_98) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_303*tmp_37 - tmp_294*tmp_98) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_321*tmp_37 - tmp_312*tmp_98) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_339*tmp_37 - tmp_330*tmp_98) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_357*tmp_37 - tmp_348*tmp_98) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_375 - tmp_366*tmp_98) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_393 - tmp_384*tmp_98) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_411 - tmp_402*tmp_98) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_429 - tmp_420*tmp_98) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_447 - tmp_438*tmp_98) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_85 - tmp_39*tmp_98);
      real_t a_2_1 = tmp_106*(0.5*p_affine_13_2*tmp_102*tmp_14*tmp_37 - tmp_449*tmp_95) + tmp_124*(0.5*p_affine_13_2*tmp_120*tmp_14*tmp_37 - tmp_114*tmp_449) + tmp_142*(0.5*p_affine_13_2*tmp_138*tmp_14*tmp_37 - tmp_132*tmp_449) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_156*tmp_37 - tmp_150*tmp_449) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_174*tmp_37 - tmp_168*tmp_449) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_192*tmp_37 - tmp_186*tmp_449) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_210*tmp_37 - tmp_204*tmp_449) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_228*tmp_37 - tmp_222*tmp_449) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_246*tmp_37 - tmp_240*tmp_449) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_264*tmp_37 - tmp_258*tmp_449) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_282*tmp_37 - tmp_276*tmp_449) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_300*tmp_37 - tmp_294*tmp_449) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_318*tmp_37 - tmp_312*tmp_449) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_336*tmp_37 - tmp_330*tmp_449) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_354*tmp_37 - tmp_348*tmp_449) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_372 - tmp_366*tmp_449) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_390 - tmp_384*tmp_449) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_408 - tmp_402*tmp_449) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_426 - tmp_420*tmp_449) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_444 - tmp_438*tmp_449) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_78 - tmp_39*tmp_449);
      real_t a_2_2 = tmp_106*(0.5*p_affine_13_2*tmp_103*tmp_14*tmp_37 - tmp_450*tmp_95) + tmp_124*(0.5*p_affine_13_2*tmp_121*tmp_14*tmp_37 - tmp_114*tmp_450) + tmp_142*(0.5*p_affine_13_2*tmp_139*tmp_14*tmp_37 - tmp_132*tmp_450) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_157*tmp_37 - tmp_150*tmp_450) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_175*tmp_37 - tmp_168*tmp_450) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_193*tmp_37 - tmp_186*tmp_450) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_211*tmp_37 - tmp_204*tmp_450) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_229*tmp_37 - tmp_222*tmp_450) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_247*tmp_37 - tmp_240*tmp_450) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_265*tmp_37 - tmp_258*tmp_450) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_283*tmp_37 - tmp_276*tmp_450) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_301*tmp_37 - tmp_294*tmp_450) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_319*tmp_37 - tmp_312*tmp_450) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_337*tmp_37 - tmp_330*tmp_450) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_355*tmp_37 - tmp_348*tmp_450) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_373 - tmp_366*tmp_450) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_391 - tmp_384*tmp_450) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_409 - tmp_402*tmp_450) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_427 - tmp_420*tmp_450) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_445 - tmp_438*tmp_450) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_81 - tmp_39*tmp_450);
      real_t a_2_3 = tmp_106*(0.5*p_affine_13_2*tmp_104*tmp_14*tmp_37 - tmp_451*tmp_95) + tmp_124*(0.5*p_affine_13_2*tmp_122*tmp_14*tmp_37 - tmp_114*tmp_451) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_140*tmp_37 - tmp_132*tmp_451) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_158*tmp_37 - tmp_150*tmp_451) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_176*tmp_37 - tmp_168*tmp_451) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_194*tmp_37 - tmp_186*tmp_451) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_212*tmp_37 - tmp_204*tmp_451) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_230*tmp_37 - tmp_222*tmp_451) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_248*tmp_37 - tmp_240*tmp_451) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_266*tmp_37 - tmp_258*tmp_451) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_284*tmp_37 - tmp_276*tmp_451) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_302*tmp_37 - tmp_294*tmp_451) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_320*tmp_37 - tmp_312*tmp_451) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_338*tmp_37 - tmp_330*tmp_451) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_356*tmp_37 - tmp_348*tmp_451) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_374 - tmp_366*tmp_451) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_392 - tmp_384*tmp_451) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_410 - tmp_402*tmp_451) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_428 - tmp_420*tmp_451) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_446 - tmp_438*tmp_451) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_37*tmp_84 - tmp_39*tmp_451);
      real_t a_3_0 = tmp_106*(0.5*p_affine_13_2*tmp_105*tmp_14*tmp_41 - tmp_96*tmp_98) + tmp_124*(0.5*p_affine_13_2*tmp_123*tmp_14*tmp_41 - tmp_115*tmp_98) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_141*tmp_41 - tmp_133*tmp_98) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_159*tmp_41 - tmp_151*tmp_98) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_177*tmp_41 - tmp_169*tmp_98) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_195*tmp_41 - tmp_187*tmp_98) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_213*tmp_41 - tmp_205*tmp_98) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_231*tmp_41 - tmp_223*tmp_98) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_249*tmp_41 - tmp_241*tmp_98) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_267*tmp_41 - tmp_259*tmp_98) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_285*tmp_41 - tmp_277*tmp_98) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_303*tmp_41 - tmp_295*tmp_98) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_321*tmp_41 - tmp_313*tmp_98) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_339*tmp_41 - tmp_331*tmp_98) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_357*tmp_41 - tmp_349*tmp_98) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_375*tmp_41 - tmp_367*tmp_98) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_393*tmp_41 - tmp_385*tmp_98) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_411 - tmp_403*tmp_98) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_429 - tmp_421*tmp_98) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_447 - tmp_439*tmp_98) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_85 - tmp_43*tmp_98);
      real_t a_3_1 = tmp_106*(0.5*p_affine_13_2*tmp_102*tmp_14*tmp_41 - tmp_449*tmp_96) + tmp_124*(0.5*p_affine_13_2*tmp_120*tmp_14*tmp_41 - tmp_115*tmp_449) + tmp_142*(0.5*p_affine_13_2*tmp_138*tmp_14*tmp_41 - tmp_133*tmp_449) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_156*tmp_41 - tmp_151*tmp_449) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_174*tmp_41 - tmp_169*tmp_449) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_192*tmp_41 - tmp_187*tmp_449) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_210*tmp_41 - tmp_205*tmp_449) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_228*tmp_41 - tmp_223*tmp_449) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_246*tmp_41 - tmp_241*tmp_449) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_264*tmp_41 - tmp_259*tmp_449) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_282*tmp_41 - tmp_277*tmp_449) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_300*tmp_41 - tmp_295*tmp_449) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_318*tmp_41 - tmp_313*tmp_449) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_336*tmp_41 - tmp_331*tmp_449) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_354*tmp_41 - tmp_349*tmp_449) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_372*tmp_41 - tmp_367*tmp_449) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_390*tmp_41 - tmp_385*tmp_449) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_408*tmp_41 - tmp_403*tmp_449) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_426 - tmp_421*tmp_449) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_444 - tmp_439*tmp_449) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_78 - tmp_43*tmp_449);
      real_t a_3_2 = tmp_106*(0.5*p_affine_13_2*tmp_103*tmp_14*tmp_41 - tmp_450*tmp_96) + tmp_124*(0.5*p_affine_13_2*tmp_121*tmp_14*tmp_41 - tmp_115*tmp_450) + tmp_142*(0.5*p_affine_13_2*tmp_139*tmp_14*tmp_41 - tmp_133*tmp_450) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_157*tmp_41 - tmp_151*tmp_450) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_175*tmp_41 - tmp_169*tmp_450) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_193*tmp_41 - tmp_187*tmp_450) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_211*tmp_41 - tmp_205*tmp_450) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_229*tmp_41 - tmp_223*tmp_450) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_247*tmp_41 - tmp_241*tmp_450) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_265*tmp_41 - tmp_259*tmp_450) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_283*tmp_41 - tmp_277*tmp_450) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_301*tmp_41 - tmp_295*tmp_450) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_319*tmp_41 - tmp_313*tmp_450) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_337*tmp_41 - tmp_331*tmp_450) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_355*tmp_41 - tmp_349*tmp_450) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_373*tmp_41 - tmp_367*tmp_450) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_391*tmp_41 - tmp_385*tmp_450) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_409*tmp_41 - tmp_403*tmp_450) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_427 - tmp_421*tmp_450) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_445 - tmp_439*tmp_450) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_81 - tmp_43*tmp_450);
      real_t a_3_3 = tmp_106*(0.5*p_affine_13_2*tmp_104*tmp_14*tmp_41 - tmp_451*tmp_96) + tmp_124*(0.5*p_affine_13_2*tmp_122*tmp_14*tmp_41 - tmp_115*tmp_451) + tmp_142*(0.5*p_affine_13_2*tmp_14*tmp_140*tmp_41 - tmp_133*tmp_451) + tmp_160*(0.5*p_affine_13_2*tmp_14*tmp_158*tmp_41 - tmp_151*tmp_451) + tmp_178*(0.5*p_affine_13_2*tmp_14*tmp_176*tmp_41 - tmp_169*tmp_451) + tmp_196*(0.5*p_affine_13_2*tmp_14*tmp_194*tmp_41 - tmp_187*tmp_451) + tmp_214*(0.5*p_affine_13_2*tmp_14*tmp_212*tmp_41 - tmp_205*tmp_451) + tmp_232*(0.5*p_affine_13_2*tmp_14*tmp_230*tmp_41 - tmp_223*tmp_451) + tmp_250*(0.5*p_affine_13_2*tmp_14*tmp_248*tmp_41 - tmp_241*tmp_451) + tmp_268*(0.5*p_affine_13_2*tmp_14*tmp_266*tmp_41 - tmp_259*tmp_451) + tmp_286*(0.5*p_affine_13_2*tmp_14*tmp_284*tmp_41 - tmp_277*tmp_451) + tmp_304*(0.5*p_affine_13_2*tmp_14*tmp_302*tmp_41 - tmp_295*tmp_451) + tmp_322*(0.5*p_affine_13_2*tmp_14*tmp_320*tmp_41 - tmp_313*tmp_451) + tmp_340*(0.5*p_affine_13_2*tmp_14*tmp_338*tmp_41 - tmp_331*tmp_451) + tmp_358*(0.5*p_affine_13_2*tmp_14*tmp_356*tmp_41 - tmp_349*tmp_451) + tmp_376*(0.5*p_affine_13_2*tmp_14*tmp_374*tmp_41 - tmp_367*tmp_451) + tmp_394*(0.5*p_affine_13_2*tmp_14*tmp_392*tmp_41 - tmp_385*tmp_451) + tmp_412*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_410 - tmp_403*tmp_451) + tmp_430*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_428 - tmp_421*tmp_451) + tmp_448*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_446 - tmp_439*tmp_451) + tmp_87*(0.5*p_affine_13_2*tmp_14*tmp_41*tmp_84 - tmp_43*tmp_451);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 0.5*tmp_15;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_43*tmp_6;
      real_t tmp_47 = p_affine_13_1*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_39*tmp_43;
      real_t tmp_49 = tmp_35*tmp_43;
      real_t tmp_50 = tmp_21*tmp_43;
      real_t tmp_51 = p_affine_13_2*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 2.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_57 = tmp_21*tmp_55 + tmp_27*tmp_56 + tmp_54*tmp_6;
      real_t tmp_58 = tmp_34*tmp_54 + tmp_35*tmp_55 + tmp_36*tmp_56;
      real_t tmp_59 = tmp_38*tmp_54 + tmp_39*tmp_55 + tmp_40*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 0.037198804536718075*tmp_52;
      real_t tmp_62 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_6*tmp_62;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64;
      real_t tmp_68 = -tmp_65 - tmp_66 - tmp_67 + 1;
      real_t tmp_69 = 0.020848748529055869*tmp_52;
      real_t tmp_70 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_71 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_72 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_73 = tmp_21*tmp_71 + tmp_27*tmp_72 + tmp_6*tmp_70;
      real_t tmp_74 = tmp_34*tmp_70 + tmp_35*tmp_71 + tmp_36*tmp_72;
      real_t tmp_75 = tmp_38*tmp_70 + tmp_39*tmp_71 + tmp_40*tmp_72;
      real_t tmp_76 = -tmp_73 - tmp_74 - tmp_75 + 1;
      real_t tmp_77 = 0.019202922745021479*tmp_52;
      real_t tmp_78 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_6*tmp_78;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80;
      real_t tmp_84 = -tmp_81 - tmp_82 - tmp_83 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_52;
      real_t tmp_86 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_87 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_88 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_89 = tmp_21*tmp_87 + tmp_27*tmp_88 + tmp_6*tmp_86;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_93 = 0.019202922745021479*tmp_52;
      real_t tmp_94 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_95 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_96 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_97 = tmp_21*tmp_95 + tmp_27*tmp_96 + tmp_6*tmp_94;
      real_t tmp_98 = tmp_34*tmp_94 + tmp_35*tmp_95 + tmp_36*tmp_96;
      real_t tmp_99 = tmp_38*tmp_94 + tmp_39*tmp_95 + tmp_40*tmp_96;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_52;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_6 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_102*tmp_34 + tmp_103*tmp_35 + tmp_104*tmp_36;
      real_t tmp_107 = tmp_102*tmp_38 + tmp_103*tmp_39 + tmp_104*tmp_40;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = 0.019202922745021479*tmp_52;
      real_t tmp_110 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_111 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_112 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_113 = tmp_110*tmp_6 + tmp_111*tmp_21 + tmp_112*tmp_27;
      real_t tmp_114 = tmp_110*tmp_34 + tmp_111*tmp_35 + tmp_112*tmp_36;
      real_t tmp_115 = tmp_110*tmp_38 + tmp_111*tmp_39 + tmp_112*tmp_40;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = 0.020848748529055869*tmp_52;
      real_t tmp_118 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.019202922745021479*tmp_52;
      real_t tmp_126 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_127 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_128 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_129 = tmp_126*tmp_6 + tmp_127*tmp_21 + tmp_128*tmp_27;
      real_t tmp_130 = tmp_126*tmp_34 + tmp_127*tmp_35 + tmp_128*tmp_36;
      real_t tmp_131 = tmp_126*tmp_38 + tmp_127*tmp_39 + tmp_128*tmp_40;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 0.020848748529055869*tmp_52;
      real_t tmp_134 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_6 + tmp_135*tmp_21 + tmp_136*tmp_27;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40;
      real_t tmp_140 = -tmp_137 - tmp_138 - tmp_139 + 1;
      real_t tmp_141 = 0.019202922745021479*tmp_52;
      real_t tmp_142 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_143 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_144 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_145 = tmp_142*tmp_6 + tmp_143*tmp_21 + tmp_144*tmp_27;
      real_t tmp_146 = tmp_142*tmp_34 + tmp_143*tmp_35 + tmp_144*tmp_36;
      real_t tmp_147 = tmp_142*tmp_38 + tmp_143*tmp_39 + tmp_144*tmp_40;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = 0.042507265838595799*tmp_52;
      real_t tmp_150 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_6 + tmp_151*tmp_21 + tmp_152*tmp_27;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_52;
      real_t tmp_158 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_6 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = 0.0068572537431980923*tmp_52;
      real_t tmp_166 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_167 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_168 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_169 = tmp_166*tmp_6 + tmp_167*tmp_21 + tmp_168*tmp_27;
      real_t tmp_170 = tmp_166*tmp_34 + tmp_167*tmp_35 + tmp_168*tmp_36;
      real_t tmp_171 = tmp_166*tmp_38 + tmp_167*tmp_39 + tmp_168*tmp_40;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = 0.037198804536718075*tmp_52;
      real_t tmp_174 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_175 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_176 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_177 = tmp_174*tmp_6 + tmp_175*tmp_21 + tmp_176*tmp_27;
      real_t tmp_178 = tmp_174*tmp_34 + tmp_175*tmp_35 + tmp_176*tmp_36;
      real_t tmp_179 = tmp_174*tmp_38 + tmp_175*tmp_39 + tmp_176*tmp_40;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = 0.042507265838595799*tmp_52;
      real_t tmp_182 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_183 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_184 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_185 = tmp_182*tmp_6 + tmp_183*tmp_21 + tmp_184*tmp_27;
      real_t tmp_186 = tmp_182*tmp_34 + tmp_183*tmp_35 + tmp_184*tmp_36;
      real_t tmp_187 = tmp_182*tmp_38 + tmp_183*tmp_39 + tmp_184*tmp_40;
      real_t tmp_188 = -tmp_185 - tmp_186 - tmp_187 + 1;
      real_t tmp_189 = 0.0068572537431980923*tmp_52;
      real_t tmp_190 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.037198804536718075*tmp_52;
      real_t tmp_198 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_199 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_200 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_201 = tmp_198*tmp_6 + tmp_199*tmp_21 + tmp_200*tmp_27;
      real_t tmp_202 = tmp_198*tmp_34 + tmp_199*tmp_35 + tmp_200*tmp_36;
      real_t tmp_203 = tmp_198*tmp_38 + tmp_199*tmp_39 + tmp_200*tmp_40;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 0.042507265838595799*tmp_52;
      real_t tmp_206 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_6 + tmp_207*tmp_21 + tmp_208*tmp_27;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = 0.019202922745021479*tmp_52;
      real_t tmp_214 = p_affine_13_1*tmp_46;
      real_t tmp_215 = p_affine_13_1*tmp_45;
      real_t tmp_216 = p_affine_13_1*tmp_44;
      real_t tmp_217 = p_affine_13_2*tmp_50;
      real_t tmp_218 = p_affine_13_2*tmp_49;
      real_t tmp_219 = p_affine_13_2*tmp_48;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_47 - tmp_100*tmp_51) + tmp_109*(-tmp_108*tmp_47 - tmp_108*tmp_51) + tmp_117*(-tmp_116*tmp_47 - tmp_116*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_133*(-tmp_132*tmp_47 - tmp_132*tmp_51) + tmp_141*(-tmp_140*tmp_47 - tmp_140*tmp_51) + tmp_149*(-tmp_148*tmp_47 - tmp_148*tmp_51) + tmp_157*(-tmp_156*tmp_47 - tmp_156*tmp_51) + tmp_165*(-tmp_164*tmp_47 - tmp_164*tmp_51) + tmp_173*(-tmp_172*tmp_47 - tmp_172*tmp_51) + tmp_181*(-tmp_180*tmp_47 - tmp_180*tmp_51) + tmp_189*(-tmp_188*tmp_47 - tmp_188*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_205*(-tmp_204*tmp_47 - tmp_204*tmp_51) + tmp_213*(-tmp_212*tmp_47 - tmp_212*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_61*(-tmp_47*tmp_60 - tmp_51*tmp_60) + tmp_69*(-tmp_47*tmp_68 - tmp_51*tmp_68) + tmp_77*(-tmp_47*tmp_76 - tmp_51*tmp_76) + tmp_85*(-tmp_47*tmp_84 - tmp_51*tmp_84) + tmp_93*(-tmp_47*tmp_92 - tmp_51*tmp_92);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_214 - tmp_51*tmp_97) + tmp_109*(-tmp_105*tmp_51 - tmp_108*tmp_214) + tmp_117*(-tmp_113*tmp_51 - tmp_116*tmp_214) + tmp_125*(-tmp_121*tmp_51 - tmp_124*tmp_214) + tmp_133*(-tmp_129*tmp_51 - tmp_132*tmp_214) + tmp_141*(-tmp_137*tmp_51 - tmp_140*tmp_214) + tmp_149*(-tmp_145*tmp_51 - tmp_148*tmp_214) + tmp_157*(-tmp_153*tmp_51 - tmp_156*tmp_214) + tmp_165*(-tmp_161*tmp_51 - tmp_164*tmp_214) + tmp_173*(-tmp_169*tmp_51 - tmp_172*tmp_214) + tmp_181*(-tmp_177*tmp_51 - tmp_180*tmp_214) + tmp_189*(-tmp_185*tmp_51 - tmp_188*tmp_214) + tmp_197*(-tmp_193*tmp_51 - tmp_196*tmp_214) + tmp_205*(-tmp_201*tmp_51 - tmp_204*tmp_214) + tmp_213*(-tmp_209*tmp_51 - tmp_212*tmp_214) + tmp_53*(-tmp_214*tmp_42 - tmp_33*tmp_51) + tmp_61*(-tmp_214*tmp_60 - tmp_51*tmp_57) + tmp_69*(-tmp_214*tmp_68 - tmp_51*tmp_65) + tmp_77*(-tmp_214*tmp_76 - tmp_51*tmp_73) + tmp_85*(-tmp_214*tmp_84 - tmp_51*tmp_81) + tmp_93*(-tmp_214*tmp_92 - tmp_51*tmp_89);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_215 - tmp_51*tmp_98) + tmp_109*(-tmp_106*tmp_51 - tmp_108*tmp_215) + tmp_117*(-tmp_114*tmp_51 - tmp_116*tmp_215) + tmp_125*(-tmp_122*tmp_51 - tmp_124*tmp_215) + tmp_133*(-tmp_130*tmp_51 - tmp_132*tmp_215) + tmp_141*(-tmp_138*tmp_51 - tmp_140*tmp_215) + tmp_149*(-tmp_146*tmp_51 - tmp_148*tmp_215) + tmp_157*(-tmp_154*tmp_51 - tmp_156*tmp_215) + tmp_165*(-tmp_162*tmp_51 - tmp_164*tmp_215) + tmp_173*(-tmp_170*tmp_51 - tmp_172*tmp_215) + tmp_181*(-tmp_178*tmp_51 - tmp_180*tmp_215) + tmp_189*(-tmp_186*tmp_51 - tmp_188*tmp_215) + tmp_197*(-tmp_194*tmp_51 - tmp_196*tmp_215) + tmp_205*(-tmp_202*tmp_51 - tmp_204*tmp_215) + tmp_213*(-tmp_210*tmp_51 - tmp_212*tmp_215) + tmp_53*(-tmp_215*tmp_42 - tmp_37*tmp_51) + tmp_61*(-tmp_215*tmp_60 - tmp_51*tmp_58) + tmp_69*(-tmp_215*tmp_68 - tmp_51*tmp_66) + tmp_77*(-tmp_215*tmp_76 - tmp_51*tmp_74) + tmp_85*(-tmp_215*tmp_84 - tmp_51*tmp_82) + tmp_93*(-tmp_215*tmp_92 - tmp_51*tmp_90);
      real_t a_0_3 = tmp_101*(-tmp_100*tmp_216 - tmp_51*tmp_99) + tmp_109*(-tmp_107*tmp_51 - tmp_108*tmp_216) + tmp_117*(-tmp_115*tmp_51 - tmp_116*tmp_216) + tmp_125*(-tmp_123*tmp_51 - tmp_124*tmp_216) + tmp_133*(-tmp_131*tmp_51 - tmp_132*tmp_216) + tmp_141*(-tmp_139*tmp_51 - tmp_140*tmp_216) + tmp_149*(-tmp_147*tmp_51 - tmp_148*tmp_216) + tmp_157*(-tmp_155*tmp_51 - tmp_156*tmp_216) + tmp_165*(-tmp_163*tmp_51 - tmp_164*tmp_216) + tmp_173*(-tmp_171*tmp_51 - tmp_172*tmp_216) + tmp_181*(-tmp_179*tmp_51 - tmp_180*tmp_216) + tmp_189*(-tmp_187*tmp_51 - tmp_188*tmp_216) + tmp_197*(-tmp_195*tmp_51 - tmp_196*tmp_216) + tmp_205*(-tmp_203*tmp_51 - tmp_204*tmp_216) + tmp_213*(-tmp_211*tmp_51 - tmp_212*tmp_216) + tmp_53*(-tmp_216*tmp_42 - tmp_41*tmp_51) + tmp_61*(-tmp_216*tmp_60 - tmp_51*tmp_59) + tmp_69*(-tmp_216*tmp_68 - tmp_51*tmp_67) + tmp_77*(-tmp_216*tmp_76 - tmp_51*tmp_75) + tmp_85*(-tmp_216*tmp_84 - tmp_51*tmp_83) + tmp_93*(-tmp_216*tmp_92 - tmp_51*tmp_91);
      real_t a_1_0 = tmp_101*(-tmp_100*tmp_217 - tmp_47*tmp_97) + tmp_109*(-tmp_105*tmp_47 - tmp_108*tmp_217) + tmp_117*(-tmp_113*tmp_47 - tmp_116*tmp_217) + tmp_125*(-tmp_121*tmp_47 - tmp_124*tmp_217) + tmp_133*(-tmp_129*tmp_47 - tmp_132*tmp_217) + tmp_141*(-tmp_137*tmp_47 - tmp_140*tmp_217) + tmp_149*(-tmp_145*tmp_47 - tmp_148*tmp_217) + tmp_157*(-tmp_153*tmp_47 - tmp_156*tmp_217) + tmp_165*(-tmp_161*tmp_47 - tmp_164*tmp_217) + tmp_173*(-tmp_169*tmp_47 - tmp_172*tmp_217) + tmp_181*(-tmp_177*tmp_47 - tmp_180*tmp_217) + tmp_189*(-tmp_185*tmp_47 - tmp_188*tmp_217) + tmp_197*(-tmp_193*tmp_47 - tmp_196*tmp_217) + tmp_205*(-tmp_201*tmp_47 - tmp_204*tmp_217) + tmp_213*(-tmp_209*tmp_47 - tmp_212*tmp_217) + tmp_53*(-tmp_217*tmp_42 - tmp_33*tmp_47) + tmp_61*(-tmp_217*tmp_60 - tmp_47*tmp_57) + tmp_69*(-tmp_217*tmp_68 - tmp_47*tmp_65) + tmp_77*(-tmp_217*tmp_76 - tmp_47*tmp_73) + tmp_85*(-tmp_217*tmp_84 - tmp_47*tmp_81) + tmp_93*(-tmp_217*tmp_92 - tmp_47*tmp_89);
      real_t a_1_1 = tmp_101*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_109*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_117*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_125*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_133*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_141*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_149*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_157*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_165*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_173*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_181*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_189*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_197*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_205*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_213*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_53*(-tmp_214*tmp_33 - tmp_217*tmp_33) + tmp_61*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_69*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_77*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_85*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_93*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_1_2 = tmp_101*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_109*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_117*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_125*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_133*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_141*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_149*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_157*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_165*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_173*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_181*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_189*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_197*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_205*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_213*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_53*(-tmp_215*tmp_33 - tmp_217*tmp_37) + tmp_61*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_69*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_77*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_85*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_93*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_1_3 = tmp_101*(-tmp_216*tmp_97 - tmp_217*tmp_99) + tmp_109*(-tmp_105*tmp_216 - tmp_107*tmp_217) + tmp_117*(-tmp_113*tmp_216 - tmp_115*tmp_217) + tmp_125*(-tmp_121*tmp_216 - tmp_123*tmp_217) + tmp_133*(-tmp_129*tmp_216 - tmp_131*tmp_217) + tmp_141*(-tmp_137*tmp_216 - tmp_139*tmp_217) + tmp_149*(-tmp_145*tmp_216 - tmp_147*tmp_217) + tmp_157*(-tmp_153*tmp_216 - tmp_155*tmp_217) + tmp_165*(-tmp_161*tmp_216 - tmp_163*tmp_217) + tmp_173*(-tmp_169*tmp_216 - tmp_171*tmp_217) + tmp_181*(-tmp_177*tmp_216 - tmp_179*tmp_217) + tmp_189*(-tmp_185*tmp_216 - tmp_187*tmp_217) + tmp_197*(-tmp_193*tmp_216 - tmp_195*tmp_217) + tmp_205*(-tmp_201*tmp_216 - tmp_203*tmp_217) + tmp_213*(-tmp_209*tmp_216 - tmp_211*tmp_217) + tmp_53*(-tmp_216*tmp_33 - tmp_217*tmp_41) + tmp_61*(-tmp_216*tmp_57 - tmp_217*tmp_59) + tmp_69*(-tmp_216*tmp_65 - tmp_217*tmp_67) + tmp_77*(-tmp_216*tmp_73 - tmp_217*tmp_75) + tmp_85*(-tmp_216*tmp_81 - tmp_217*tmp_83) + tmp_93*(-tmp_216*tmp_89 - tmp_217*tmp_91);
      real_t a_2_0 = tmp_101*(-tmp_100*tmp_218 - tmp_47*tmp_98) + tmp_109*(-tmp_106*tmp_47 - tmp_108*tmp_218) + tmp_117*(-tmp_114*tmp_47 - tmp_116*tmp_218) + tmp_125*(-tmp_122*tmp_47 - tmp_124*tmp_218) + tmp_133*(-tmp_130*tmp_47 - tmp_132*tmp_218) + tmp_141*(-tmp_138*tmp_47 - tmp_140*tmp_218) + tmp_149*(-tmp_146*tmp_47 - tmp_148*tmp_218) + tmp_157*(-tmp_154*tmp_47 - tmp_156*tmp_218) + tmp_165*(-tmp_162*tmp_47 - tmp_164*tmp_218) + tmp_173*(-tmp_170*tmp_47 - tmp_172*tmp_218) + tmp_181*(-tmp_178*tmp_47 - tmp_180*tmp_218) + tmp_189*(-tmp_186*tmp_47 - tmp_188*tmp_218) + tmp_197*(-tmp_194*tmp_47 - tmp_196*tmp_218) + tmp_205*(-tmp_202*tmp_47 - tmp_204*tmp_218) + tmp_213*(-tmp_210*tmp_47 - tmp_212*tmp_218) + tmp_53*(-tmp_218*tmp_42 - tmp_37*tmp_47) + tmp_61*(-tmp_218*tmp_60 - tmp_47*tmp_58) + tmp_69*(-tmp_218*tmp_68 - tmp_47*tmp_66) + tmp_77*(-tmp_218*tmp_76 - tmp_47*tmp_74) + tmp_85*(-tmp_218*tmp_84 - tmp_47*tmp_82) + tmp_93*(-tmp_218*tmp_92 - tmp_47*tmp_90);
      real_t a_2_1 = tmp_101*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_109*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_117*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_125*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_133*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_141*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_149*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_157*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_165*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_173*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_181*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_189*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_197*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_205*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_213*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_53*(-tmp_214*tmp_37 - tmp_218*tmp_33) + tmp_61*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_69*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_77*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_85*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_93*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_2_2 = tmp_101*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_109*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_117*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_125*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_133*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_141*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_149*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_157*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_165*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_173*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_181*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_189*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_197*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_205*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_213*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_53*(-tmp_215*tmp_37 - tmp_218*tmp_37) + tmp_61*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_69*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_77*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_85*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_93*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      real_t a_2_3 = tmp_101*(-tmp_216*tmp_98 - tmp_218*tmp_99) + tmp_109*(-tmp_106*tmp_216 - tmp_107*tmp_218) + tmp_117*(-tmp_114*tmp_216 - tmp_115*tmp_218) + tmp_125*(-tmp_122*tmp_216 - tmp_123*tmp_218) + tmp_133*(-tmp_130*tmp_216 - tmp_131*tmp_218) + tmp_141*(-tmp_138*tmp_216 - tmp_139*tmp_218) + tmp_149*(-tmp_146*tmp_216 - tmp_147*tmp_218) + tmp_157*(-tmp_154*tmp_216 - tmp_155*tmp_218) + tmp_165*(-tmp_162*tmp_216 - tmp_163*tmp_218) + tmp_173*(-tmp_170*tmp_216 - tmp_171*tmp_218) + tmp_181*(-tmp_178*tmp_216 - tmp_179*tmp_218) + tmp_189*(-tmp_186*tmp_216 - tmp_187*tmp_218) + tmp_197*(-tmp_194*tmp_216 - tmp_195*tmp_218) + tmp_205*(-tmp_202*tmp_216 - tmp_203*tmp_218) + tmp_213*(-tmp_210*tmp_216 - tmp_211*tmp_218) + tmp_53*(-tmp_216*tmp_37 - tmp_218*tmp_41) + tmp_61*(-tmp_216*tmp_58 - tmp_218*tmp_59) + tmp_69*(-tmp_216*tmp_66 - tmp_218*tmp_67) + tmp_77*(-tmp_216*tmp_74 - tmp_218*tmp_75) + tmp_85*(-tmp_216*tmp_82 - tmp_218*tmp_83) + tmp_93*(-tmp_216*tmp_90 - tmp_218*tmp_91);
      real_t a_3_0 = tmp_101*(-tmp_100*tmp_219 - tmp_47*tmp_99) + tmp_109*(-tmp_107*tmp_47 - tmp_108*tmp_219) + tmp_117*(-tmp_115*tmp_47 - tmp_116*tmp_219) + tmp_125*(-tmp_123*tmp_47 - tmp_124*tmp_219) + tmp_133*(-tmp_131*tmp_47 - tmp_132*tmp_219) + tmp_141*(-tmp_139*tmp_47 - tmp_140*tmp_219) + tmp_149*(-tmp_147*tmp_47 - tmp_148*tmp_219) + tmp_157*(-tmp_155*tmp_47 - tmp_156*tmp_219) + tmp_165*(-tmp_163*tmp_47 - tmp_164*tmp_219) + tmp_173*(-tmp_171*tmp_47 - tmp_172*tmp_219) + tmp_181*(-tmp_179*tmp_47 - tmp_180*tmp_219) + tmp_189*(-tmp_187*tmp_47 - tmp_188*tmp_219) + tmp_197*(-tmp_195*tmp_47 - tmp_196*tmp_219) + tmp_205*(-tmp_203*tmp_47 - tmp_204*tmp_219) + tmp_213*(-tmp_211*tmp_47 - tmp_212*tmp_219) + tmp_53*(-tmp_219*tmp_42 - tmp_41*tmp_47) + tmp_61*(-tmp_219*tmp_60 - tmp_47*tmp_59) + tmp_69*(-tmp_219*tmp_68 - tmp_47*tmp_67) + tmp_77*(-tmp_219*tmp_76 - tmp_47*tmp_75) + tmp_85*(-tmp_219*tmp_84 - tmp_47*tmp_83) + tmp_93*(-tmp_219*tmp_92 - tmp_47*tmp_91);
      real_t a_3_1 = tmp_101*(-tmp_214*tmp_99 - tmp_219*tmp_97) + tmp_109*(-tmp_105*tmp_219 - tmp_107*tmp_214) + tmp_117*(-tmp_113*tmp_219 - tmp_115*tmp_214) + tmp_125*(-tmp_121*tmp_219 - tmp_123*tmp_214) + tmp_133*(-tmp_129*tmp_219 - tmp_131*tmp_214) + tmp_141*(-tmp_137*tmp_219 - tmp_139*tmp_214) + tmp_149*(-tmp_145*tmp_219 - tmp_147*tmp_214) + tmp_157*(-tmp_153*tmp_219 - tmp_155*tmp_214) + tmp_165*(-tmp_161*tmp_219 - tmp_163*tmp_214) + tmp_173*(-tmp_169*tmp_219 - tmp_171*tmp_214) + tmp_181*(-tmp_177*tmp_219 - tmp_179*tmp_214) + tmp_189*(-tmp_185*tmp_219 - tmp_187*tmp_214) + tmp_197*(-tmp_193*tmp_219 - tmp_195*tmp_214) + tmp_205*(-tmp_201*tmp_219 - tmp_203*tmp_214) + tmp_213*(-tmp_209*tmp_219 - tmp_211*tmp_214) + tmp_53*(-tmp_214*tmp_41 - tmp_219*tmp_33) + tmp_61*(-tmp_214*tmp_59 - tmp_219*tmp_57) + tmp_69*(-tmp_214*tmp_67 - tmp_219*tmp_65) + tmp_77*(-tmp_214*tmp_75 - tmp_219*tmp_73) + tmp_85*(-tmp_214*tmp_83 - tmp_219*tmp_81) + tmp_93*(-tmp_214*tmp_91 - tmp_219*tmp_89);
      real_t a_3_2 = tmp_101*(-tmp_215*tmp_99 - tmp_219*tmp_98) + tmp_109*(-tmp_106*tmp_219 - tmp_107*tmp_215) + tmp_117*(-tmp_114*tmp_219 - tmp_115*tmp_215) + tmp_125*(-tmp_122*tmp_219 - tmp_123*tmp_215) + tmp_133*(-tmp_130*tmp_219 - tmp_131*tmp_215) + tmp_141*(-tmp_138*tmp_219 - tmp_139*tmp_215) + tmp_149*(-tmp_146*tmp_219 - tmp_147*tmp_215) + tmp_157*(-tmp_154*tmp_219 - tmp_155*tmp_215) + tmp_165*(-tmp_162*tmp_219 - tmp_163*tmp_215) + tmp_173*(-tmp_170*tmp_219 - tmp_171*tmp_215) + tmp_181*(-tmp_178*tmp_219 - tmp_179*tmp_215) + tmp_189*(-tmp_186*tmp_219 - tmp_187*tmp_215) + tmp_197*(-tmp_194*tmp_219 - tmp_195*tmp_215) + tmp_205*(-tmp_202*tmp_219 - tmp_203*tmp_215) + tmp_213*(-tmp_210*tmp_219 - tmp_211*tmp_215) + tmp_53*(-tmp_215*tmp_41 - tmp_219*tmp_37) + tmp_61*(-tmp_215*tmp_59 - tmp_219*tmp_58) + tmp_69*(-tmp_215*tmp_67 - tmp_219*tmp_66) + tmp_77*(-tmp_215*tmp_75 - tmp_219*tmp_74) + tmp_85*(-tmp_215*tmp_83 - tmp_219*tmp_82) + tmp_93*(-tmp_215*tmp_91 - tmp_219*tmp_90);
      real_t a_3_3 = tmp_101*(-tmp_216*tmp_99 - tmp_219*tmp_99) + tmp_109*(-tmp_107*tmp_216 - tmp_107*tmp_219) + tmp_117*(-tmp_115*tmp_216 - tmp_115*tmp_219) + tmp_125*(-tmp_123*tmp_216 - tmp_123*tmp_219) + tmp_133*(-tmp_131*tmp_216 - tmp_131*tmp_219) + tmp_141*(-tmp_139*tmp_216 - tmp_139*tmp_219) + tmp_149*(-tmp_147*tmp_216 - tmp_147*tmp_219) + tmp_157*(-tmp_155*tmp_216 - tmp_155*tmp_219) + tmp_165*(-tmp_163*tmp_216 - tmp_163*tmp_219) + tmp_173*(-tmp_171*tmp_216 - tmp_171*tmp_219) + tmp_181*(-tmp_179*tmp_216 - tmp_179*tmp_219) + tmp_189*(-tmp_187*tmp_216 - tmp_187*tmp_219) + tmp_197*(-tmp_195*tmp_216 - tmp_195*tmp_219) + tmp_205*(-tmp_203*tmp_216 - tmp_203*tmp_219) + tmp_213*(-tmp_211*tmp_216 - tmp_211*tmp_219) + tmp_53*(-tmp_216*tmp_41 - tmp_219*tmp_41) + tmp_61*(-tmp_216*tmp_59 - tmp_219*tmp_59) + tmp_69*(-tmp_216*tmp_67 - tmp_219*tmp_67) + tmp_77*(-tmp_216*tmp_75 - tmp_219*tmp_75) + tmp_85*(-tmp_216*tmp_83 - tmp_219*tmp_83) + tmp_93*(-tmp_216*tmp_91 - tmp_219*tmp_91);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_EP1_1 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_EP1_1()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_2 - tmp_4*tmp_6);
      real_t tmp_8 = 2.0*tmp_7;
      real_t tmp_9 = tmp_0*tmp_8;
      real_t tmp_10 = tmp_3*tmp_8;
      real_t tmp_11 = 1.0*tmp_7;
      real_t tmp_12 = tmp_11*tmp_2 + tmp_11*tmp_3*tmp_6;
      real_t tmp_13 = 0.5*tmp_7;
      real_t tmp_14 = tmp_0*tmp_13;
      real_t tmp_15 = tmp_1*tmp_13;
      real_t tmp_16 = tmp_14*tmp_3 + tmp_14*tmp_4 + tmp_15*tmp_5 + tmp_15*tmp_6;
      real_t tmp_17 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_18 = tmp_17*(tmp_12*(-tmp_10 - tmp_9) + 2*tmp_16*(-tmp_1*tmp_11 - tmp_11*tmp_5));
      real_t tmp_19 = tmp_16*tmp_8;
      real_t tmp_20 = tmp_17*(tmp_1*tmp_19 + tmp_10*tmp_12);
      real_t tmp_21 = tmp_17*(tmp_12*tmp_9 + tmp_19*tmp_5);
      real_t a_0_0 = 0.5*tmp_18;
      real_t a_0_1 = 0.5*tmp_20;
      real_t a_0_2 = 0.5*tmp_21;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_1*tmp_10 + tmp_13*tmp_2;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_10 + tmp_13*tmp_5;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_1*(tmp_0*tmp_15 + tmp_17*tmp_4);
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_2;
      real_t tmp_21 = tmp_19*tmp_5;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = 1.0*tmp_22;
      real_t tmp_24 = tmp_15*tmp_6 + tmp_17*tmp_2;
      real_t tmp_25 = 1.0*tmp_7;
      real_t tmp_26 = tmp_0*tmp_25;
      real_t tmp_27 = tmp_1*tmp_25;
      real_t tmp_28 = 1.0*p_affine_10_0*tmp_22 + 1.0*p_affine_10_1*(-tmp_26 - tmp_27);
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_0*tmp_19;
      real_t tmp_33 = 1.0*p_affine_10_0*(tmp_1*tmp_32 + tmp_2*tmp_21 + tmp_20*tmp_6 + tmp_32*tmp_4) + 1.0*p_affine_10_1*(tmp_25*tmp_3 + tmp_27*tmp_6);
      real_t tmp_34 = 0.11846344252809471*tmp_29;
      real_t tmp_35 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_37 = tmp_1*tmp_35 + tmp_2*tmp_36;
      real_t tmp_38 = tmp_37 - 1.0/3.0;
      real_t tmp_39 = tmp_0*tmp_35 + tmp_36*tmp_5;
      real_t tmp_40 = tmp_39 - 1.0/3.0;
      real_t tmp_41 = tmp_0*tmp_38 + tmp_4*tmp_40;
      real_t tmp_42 = p_affine_10_1*tmp_23;
      real_t tmp_43 = tmp_2*tmp_40 + tmp_38*tmp_6;
      real_t tmp_44 = -tmp_37 - tmp_39 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_29;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_1*tmp_46 + tmp_2*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_46 + tmp_47*tmp_5;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_0*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_2*tmp_51 + tmp_49*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_29;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_1*tmp_56 + tmp_2*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_56 + tmp_5*tmp_57;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_0*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_2*tmp_61 + tmp_59*tmp_6;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_29;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_1*tmp_66 + tmp_2*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_66 + tmp_5*tmp_67;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_0*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_2*tmp_71 + tmp_6*tmp_69;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_29;
      real_t tmp_76 = 1.0*p_affine_10_0*tmp_20 + 1.0*p_affine_10_1*tmp_27;
      real_t tmp_77 = p_affine_10_1*tmp_20;
      real_t tmp_78 = 1.0*p_affine_10_0*tmp_21 + 1.0*p_affine_10_1*tmp_26;
      real_t tmp_79 = p_affine_10_1*tmp_21;
      real_t a_0_0 = tmp_34*(-tmp_18*tmp_23 - tmp_24*tmp_28 + 14*tmp_24*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_28*tmp_43 + 14*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44 - tmp_41*tmp_42) + tmp_55*(-tmp_28*tmp_53 + 14*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54 - tmp_42*tmp_52) + tmp_65*(-tmp_28*tmp_63 + 14*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64 - tmp_42*tmp_62) + tmp_75*(-tmp_28*tmp_73 + 14*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74 - tmp_42*tmp_72);
      real_t a_0_1 = tmp_34*(14*tmp_14*tmp_24*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_20 - tmp_24*tmp_76) + tmp_45*(14*tmp_30*tmp_37*tmp_43 - tmp_33*tmp_37 - tmp_41*tmp_77 - tmp_43*tmp_76) + tmp_55*(14*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_77 - tmp_53*tmp_76) + tmp_65*(14*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_77 - tmp_63*tmp_76) + tmp_75*(14*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_77 - tmp_73*tmp_76);
      real_t a_0_2 = tmp_34*(14*tmp_16*tmp_24*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_21 - tmp_24*tmp_78) + tmp_45*(14*tmp_30*tmp_39*tmp_43 - tmp_33*tmp_39 - tmp_41*tmp_79 - tmp_43*tmp_78) + tmp_55*(14*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_79 - tmp_53*tmp_78) + tmp_65*(14*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_79 - tmp_63*tmp_78) + tmp_75*(14*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_79 - tmp_73*tmp_78);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_0_1;
      real_t tmp_9 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_10 = p_affine_6_1 + 0.046910077030668018*tmp_9;
      real_t tmp_11 = tmp_7*(tmp_10 + tmp_8);
      real_t tmp_12 = -p_affine_0_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_7*(tmp_12 + tmp_14);
      real_t tmp_16 = tmp_1*tmp_11 + tmp_15*tmp_2 - 1.0/3.0;
      real_t tmp_17 = tmp_0*tmp_11 + tmp_15*tmp_5 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_1*(tmp_0*tmp_16 + tmp_17*tmp_4);
      real_t tmp_19 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_20 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_21 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_22 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_23 = 1.0 / (tmp_19*tmp_20 - tmp_21*tmp_22);
      real_t tmp_24 = 0.5*tmp_23;
      real_t tmp_25 = tmp_19*tmp_24;
      real_t tmp_26 = tmp_22*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26;
      real_t tmp_28 = 1.0*tmp_27;
      real_t tmp_29 = tmp_16*tmp_6 + tmp_17*tmp_2;
      real_t tmp_30 = 1.0*tmp_23;
      real_t tmp_31 = tmp_20*tmp_30;
      real_t tmp_32 = tmp_21*tmp_30;
      real_t tmp_33 = 1.0*p_affine_10_0*tmp_27 + 1.0*p_affine_10_1*(-tmp_31 - tmp_32);
      real_t tmp_34 = -p_affine_3_1;
      real_t tmp_35 = tmp_23*(tmp_10 + tmp_34);
      real_t tmp_36 = -p_affine_3_0;
      real_t tmp_37 = tmp_23*(tmp_14 + tmp_36);
      real_t tmp_38 = tmp_19*tmp_37 + tmp_21*tmp_35;
      real_t tmp_39 = tmp_20*tmp_35 + tmp_22*tmp_37;
      real_t tmp_40 = -tmp_38 - tmp_39 + 1;
      real_t tmp_41 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_9*tmp_9), 1.0/2.0));
      real_t tmp_42 = 14/tmp_41;
      real_t tmp_43 = tmp_29*tmp_42;
      real_t tmp_44 = 1.0*tmp_7;
      real_t tmp_45 = 0.5*tmp_7;
      real_t tmp_46 = tmp_0*tmp_45;
      real_t tmp_47 = tmp_2*tmp_45;
      real_t tmp_48 = p_affine_10_0*(tmp_1*tmp_46 + tmp_4*tmp_46 + tmp_47*tmp_5 + tmp_47*tmp_6) + p_affine_10_1*(tmp_1*tmp_44*tmp_6 + tmp_3*tmp_44);
      real_t tmp_49 = 0.11846344252809471*tmp_41;
      real_t tmp_50 = p_affine_6_1 + 0.23076534494715845*tmp_9;
      real_t tmp_51 = tmp_7*(tmp_50 + tmp_8);
      real_t tmp_52 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_53 = tmp_7*(tmp_12 + tmp_52);
      real_t tmp_54 = tmp_1*tmp_51 + tmp_2*tmp_53 - 1.0/3.0;
      real_t tmp_55 = tmp_0*tmp_51 + tmp_5*tmp_53 - 1.0/3.0;
      real_t tmp_56 = tmp_0*tmp_54 + tmp_4*tmp_55;
      real_t tmp_57 = p_affine_10_1*tmp_28;
      real_t tmp_58 = tmp_2*tmp_55 + tmp_54*tmp_6;
      real_t tmp_59 = tmp_23*(tmp_34 + tmp_50);
      real_t tmp_60 = tmp_23*(tmp_36 + tmp_52);
      real_t tmp_61 = tmp_19*tmp_60 + tmp_21*tmp_59;
      real_t tmp_62 = tmp_20*tmp_59 + tmp_22*tmp_60;
      real_t tmp_63 = -tmp_61 - tmp_62 + 1;
      real_t tmp_64 = tmp_42*tmp_58;
      real_t tmp_65 = 0.2393143352496831*tmp_41;
      real_t tmp_66 = p_affine_6_1 + 0.5*tmp_9;
      real_t tmp_67 = tmp_7*(tmp_66 + tmp_8);
      real_t tmp_68 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_69 = tmp_7*(tmp_12 + tmp_68);
      real_t tmp_70 = tmp_1*tmp_67 + tmp_2*tmp_69 - 1.0/3.0;
      real_t tmp_71 = tmp_0*tmp_67 + tmp_5*tmp_69 - 1.0/3.0;
      real_t tmp_72 = tmp_0*tmp_70 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_2*tmp_71 + tmp_6*tmp_70;
      real_t tmp_74 = tmp_23*(tmp_34 + tmp_66);
      real_t tmp_75 = tmp_23*(tmp_36 + tmp_68);
      real_t tmp_76 = tmp_19*tmp_75 + tmp_21*tmp_74;
      real_t tmp_77 = tmp_20*tmp_74 + tmp_22*tmp_75;
      real_t tmp_78 = -tmp_76 - tmp_77 + 1;
      real_t tmp_79 = tmp_42*tmp_73;
      real_t tmp_80 = 0.2844444444444445*tmp_41;
      real_t tmp_81 = p_affine_6_1 + 0.7692346550528415*tmp_9;
      real_t tmp_82 = tmp_7*(tmp_8 + tmp_81);
      real_t tmp_83 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_84 = tmp_7*(tmp_12 + tmp_83);
      real_t tmp_85 = tmp_1*tmp_82 + tmp_2*tmp_84 - 1.0/3.0;
      real_t tmp_86 = tmp_0*tmp_82 + tmp_5*tmp_84 - 1.0/3.0;
      real_t tmp_87 = tmp_0*tmp_85 + tmp_4*tmp_86;
      real_t tmp_88 = tmp_2*tmp_86 + tmp_6*tmp_85;
      real_t tmp_89 = tmp_23*(tmp_34 + tmp_81);
      real_t tmp_90 = tmp_23*(tmp_36 + tmp_83);
      real_t tmp_91 = tmp_19*tmp_90 + tmp_21*tmp_89;
      real_t tmp_92 = tmp_20*tmp_89 + tmp_22*tmp_90;
      real_t tmp_93 = -tmp_91 - tmp_92 + 1;
      real_t tmp_94 = tmp_42*tmp_88;
      real_t tmp_95 = 0.2393143352496831*tmp_41;
      real_t tmp_96 = p_affine_6_1 + 0.95308992296933193*tmp_9;
      real_t tmp_97 = tmp_7*(tmp_8 + tmp_96);
      real_t tmp_98 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_99 = tmp_7*(tmp_12 + tmp_98);
      real_t tmp_100 = tmp_1*tmp_97 + tmp_2*tmp_99 - 1.0/3.0;
      real_t tmp_101 = tmp_0*tmp_97 + tmp_5*tmp_99 - 1.0/3.0;
      real_t tmp_102 = tmp_0*tmp_100 + tmp_101*tmp_4;
      real_t tmp_103 = tmp_100*tmp_6 + tmp_101*tmp_2;
      real_t tmp_104 = tmp_23*(tmp_34 + tmp_96);
      real_t tmp_105 = tmp_23*(tmp_36 + tmp_98);
      real_t tmp_106 = tmp_104*tmp_21 + tmp_105*tmp_19;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_22;
      real_t tmp_108 = -tmp_106 - tmp_107 + 1;
      real_t tmp_109 = tmp_103*tmp_42;
      real_t tmp_110 = 0.11846344252809471*tmp_41;
      real_t tmp_111 = 1.0*p_affine_10_0*tmp_25 + 1.0*p_affine_10_1*tmp_32;
      real_t tmp_112 = p_affine_10_1*tmp_25;
      real_t tmp_113 = 1.0*p_affine_10_0*tmp_26 + 1.0*p_affine_10_1*tmp_31;
      real_t tmp_114 = p_affine_10_1*tmp_26;
      real_t a_0_0 = tmp_110*(-tmp_102*tmp_57 - tmp_103*tmp_33 - tmp_108*tmp_109 + tmp_108*tmp_48) + tmp_49*(-tmp_18*tmp_28 - tmp_29*tmp_33 - tmp_40*tmp_43 + tmp_40*tmp_48) + tmp_65*(-tmp_33*tmp_58 + tmp_48*tmp_63 - tmp_56*tmp_57 - tmp_63*tmp_64) + tmp_80*(-tmp_33*tmp_73 + tmp_48*tmp_78 - tmp_57*tmp_72 - tmp_78*tmp_79) + tmp_95*(-tmp_33*tmp_88 + tmp_48*tmp_93 - tmp_57*tmp_87 - tmp_93*tmp_94);
      real_t a_0_1 = tmp_110*(-tmp_102*tmp_112 - tmp_103*tmp_111 - tmp_106*tmp_109 + tmp_106*tmp_48) + tmp_49*(-tmp_111*tmp_29 - tmp_18*tmp_25 - tmp_38*tmp_43 + tmp_38*tmp_48) + tmp_65*(-tmp_111*tmp_58 - tmp_112*tmp_56 + tmp_48*tmp_61 - tmp_61*tmp_64) + tmp_80*(-tmp_111*tmp_73 - tmp_112*tmp_72 + tmp_48*tmp_76 - tmp_76*tmp_79) + tmp_95*(-tmp_111*tmp_88 - tmp_112*tmp_87 + tmp_48*tmp_91 - tmp_91*tmp_94);
      real_t a_0_2 = tmp_110*(-tmp_102*tmp_114 - tmp_103*tmp_113 - tmp_107*tmp_109 + tmp_107*tmp_48) + tmp_49*(-tmp_113*tmp_29 - tmp_18*tmp_26 - tmp_39*tmp_43 + tmp_39*tmp_48) + tmp_65*(-tmp_113*tmp_58 - tmp_114*tmp_56 + tmp_48*tmp_62 - tmp_62*tmp_64) + tmp_80*(-tmp_113*tmp_73 - tmp_114*tmp_72 + tmp_48*tmp_77 - tmp_77*tmp_79) + tmp_95*(-tmp_113*tmp_88 - tmp_114*tmp_87 + tmp_48*tmp_92 - tmp_92*tmp_94);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_1*tmp_10 + tmp_13*tmp_2;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_10 + tmp_13*tmp_5;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = tmp_0*tmp_15 + tmp_17*tmp_4;
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_2;
      real_t tmp_21 = tmp_19*tmp_5;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = p_affine_10_1*tmp_22;
      real_t tmp_24 = 1.0*tmp_7;
      real_t tmp_25 = tmp_0*tmp_24;
      real_t tmp_26 = tmp_1*tmp_24;
      real_t tmp_27 = p_affine_10_0*tmp_22 + p_affine_10_1*(-tmp_25 - tmp_26);
      real_t tmp_28 = tmp_15*tmp_6 + tmp_17*tmp_2;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_0*tmp_19;
      real_t tmp_33 = p_affine_10_0*(tmp_1*tmp_32 + tmp_2*tmp_21 + tmp_20*tmp_6 + tmp_32*tmp_4) + p_affine_10_1*(tmp_24*tmp_3 + tmp_26*tmp_6);
      real_t tmp_34 = 2*tmp_29;
      real_t tmp_35 = 0.11846344252809471*tmp_34;
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_38 = tmp_1*tmp_36 + tmp_2*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/3.0;
      real_t tmp_40 = tmp_0*tmp_36 + tmp_37*tmp_5;
      real_t tmp_41 = tmp_40 - 1.0/3.0;
      real_t tmp_42 = tmp_0*tmp_39 + tmp_4*tmp_41;
      real_t tmp_43 = tmp_2*tmp_41 + tmp_39*tmp_6;
      real_t tmp_44 = -tmp_38 - tmp_40 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_34;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_1*tmp_46 + tmp_2*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_46 + tmp_47*tmp_5;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_0*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_2*tmp_51 + tmp_49*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_34;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_1*tmp_56 + tmp_2*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_56 + tmp_5*tmp_57;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_0*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_2*tmp_61 + tmp_59*tmp_6;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_34;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_1*tmp_66 + tmp_2*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_66 + tmp_5*tmp_67;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_0*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_2*tmp_71 + tmp_6*tmp_69;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_34;
      real_t tmp_76 = p_affine_10_1*tmp_20;
      real_t tmp_77 = p_affine_10_0*tmp_20 + p_affine_10_1*tmp_26;
      real_t tmp_78 = p_affine_10_1*tmp_21;
      real_t tmp_79 = p_affine_10_0*tmp_21 + p_affine_10_1*tmp_25;
      real_t a_0_0 = tmp_35*(-tmp_18*tmp_23 - tmp_27*tmp_28 + 7*tmp_28*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_23*tmp_42 - tmp_27*tmp_43 + 7*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44) + tmp_55*(-tmp_23*tmp_52 - tmp_27*tmp_53 + 7*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54) + tmp_65*(-tmp_23*tmp_62 - tmp_27*tmp_63 + 7*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64) + tmp_75*(-tmp_23*tmp_72 - tmp_27*tmp_73 + 7*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74);
      real_t a_0_1 = tmp_35*(7*tmp_14*tmp_28*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_76 - tmp_28*tmp_77) + tmp_45*(7*tmp_30*tmp_38*tmp_43 - tmp_33*tmp_38 - tmp_42*tmp_76 - tmp_43*tmp_77) + tmp_55*(7*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_76 - tmp_53*tmp_77) + tmp_65*(7*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_76 - tmp_63*tmp_77) + tmp_75*(7*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_76 - tmp_73*tmp_77);
      real_t a_0_2 = tmp_35*(7*tmp_16*tmp_28*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_78 - tmp_28*tmp_79) + tmp_45*(7*tmp_30*tmp_40*tmp_43 - tmp_33*tmp_40 - tmp_42*tmp_78 - tmp_43*tmp_79) + tmp_55*(7*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_78 - tmp_53*tmp_79) + tmp_65*(7*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_78 - tmp_63*tmp_79) + tmp_75*(7*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_78 - tmp_73*tmp_79);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = -tmp_2 + tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_0*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_3*tmp_7;
      real_t tmp_13 = tmp_11*tmp_4;
      real_t tmp_14 = 1.0 / (tmp_1*tmp_10*tmp_11 - tmp_10*tmp_12 - tmp_13*tmp_6 - tmp_2*tmp_9 + tmp_3*tmp_4*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = 2.0*tmp_14;
      real_t tmp_16 = tmp_15*tmp_5;
      real_t tmp_17 = -tmp_13 + tmp_8;
      real_t tmp_18 = tmp_15*tmp_17;
      real_t tmp_19 = tmp_1*tmp_11 - tmp_12;
      real_t tmp_20 = tmp_15*tmp_19;
      real_t tmp_21 = 1.0*tmp_14;
      real_t tmp_22 = tmp_10*tmp_19*tmp_21 + tmp_17*tmp_21*tmp_6 + tmp_21*tmp_5*tmp_9;
      real_t tmp_23 = tmp_0*tmp_6 - tmp_10*tmp_3;
      real_t tmp_24 = -tmp_0*tmp_9 + tmp_10*tmp_11;
      real_t tmp_25 = -tmp_11*tmp_6 + tmp_3*tmp_9;
      real_t tmp_26 = 0.5*tmp_14;
      real_t tmp_27 = tmp_10*tmp_26;
      real_t tmp_28 = tmp_26*tmp_6;
      real_t tmp_29 = tmp_26*tmp_9;
      real_t tmp_30 = tmp_19*tmp_26;
      real_t tmp_31 = tmp_17*tmp_26;
      real_t tmp_32 = tmp_26*tmp_5;
      real_t tmp_33 = tmp_1*tmp_31 + tmp_23*tmp_29 + tmp_24*tmp_28 + tmp_25*tmp_27 + tmp_30*tmp_4 + tmp_32*tmp_7;
      real_t tmp_34 = tmp_1*tmp_10 - tmp_4*tmp_6;
      real_t tmp_35 = -tmp_10*tmp_7 + tmp_4*tmp_9;
      real_t tmp_36 = -tmp_1*tmp_9 + tmp_6*tmp_7;
      real_t tmp_37 = tmp_0*tmp_30 + tmp_11*tmp_32 + tmp_27*tmp_36 + tmp_28*tmp_35 + tmp_29*tmp_34 + tmp_3*tmp_31;
      real_t tmp_38 = p_affine_0_0*p_affine_1_1;
      real_t tmp_39 = p_affine_0_0*p_affine_1_2;
      real_t tmp_40 = p_affine_2_1*p_affine_3_2;
      real_t tmp_41 = p_affine_0_1*p_affine_1_0;
      real_t tmp_42 = p_affine_0_1*p_affine_1_2;
      real_t tmp_43 = p_affine_2_2*p_affine_3_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_0;
      real_t tmp_45 = p_affine_0_2*p_affine_1_1;
      real_t tmp_46 = p_affine_2_0*p_affine_3_1;
      real_t tmp_47 = p_affine_2_2*p_affine_3_1;
      real_t tmp_48 = p_affine_2_0*p_affine_3_2;
      real_t tmp_49 = p_affine_2_1*p_affine_3_0;
      real_t tmp_50 = std::abs(p_affine_0_0*tmp_40 - p_affine_0_0*tmp_47 + p_affine_0_1*tmp_43 - p_affine_0_1*tmp_48 + p_affine_0_2*tmp_46 - p_affine_0_2*tmp_49 - p_affine_1_0*tmp_40 + p_affine_1_0*tmp_47 - p_affine_1_1*tmp_43 + p_affine_1_1*tmp_48 - p_affine_1_2*tmp_46 + p_affine_1_2*tmp_49 + p_affine_2_0*tmp_42 - p_affine_2_0*tmp_45 - p_affine_2_1*tmp_39 + p_affine_2_1*tmp_44 + p_affine_2_2*tmp_38 - p_affine_2_2*tmp_41 - p_affine_3_0*tmp_42 + p_affine_3_0*tmp_45 + p_affine_3_1*tmp_39 - p_affine_3_1*tmp_44 - p_affine_3_2*tmp_38 + p_affine_3_2*tmp_41);
      real_t tmp_51 = tmp_50*(tmp_22*(-tmp_16 - tmp_18 - tmp_20) + 2*tmp_33*(-tmp_21*tmp_23 - tmp_21*tmp_24 - tmp_21*tmp_25) + 2*tmp_37*(-tmp_21*tmp_34 - tmp_21*tmp_35 - tmp_21*tmp_36));
      real_t tmp_52 = tmp_15*tmp_33;
      real_t tmp_53 = tmp_15*tmp_37;
      real_t tmp_54 = tmp_50*(tmp_20*tmp_22 + tmp_25*tmp_52 + tmp_36*tmp_53);
      real_t tmp_55 = tmp_50*(tmp_18*tmp_22 + tmp_24*tmp_52 + tmp_35*tmp_53);
      real_t tmp_56 = tmp_50*(tmp_16*tmp_22 + tmp_23*tmp_52 + tmp_34*tmp_53);
      real_t a_0_0 = 0.1666666666666668*tmp_51;
      real_t a_0_1 = 0.1666666666666668*tmp_54;
      real_t a_0_2 = 0.1666666666666668*tmp_55;
      real_t a_0_3 = 0.1666666666666668*tmp_56;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_1;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_54 = tmp_40*tmp_46;
      real_t tmp_55 = tmp_35*tmp_46;
      real_t tmp_56 = tmp_46*tmp_5;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_41*tmp_60;
      real_t tmp_62 = tmp_36*tmp_60;
      real_t tmp_63 = tmp_21*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*tmp_50 + 1.0*p_affine_13_1*(-tmp_61 - tmp_62 - tmp_63) + 1.0*p_affine_13_2*tmp_57;
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_21*tmp_46;
      real_t tmp_69 = tmp_36*tmp_46;
      real_t tmp_70 = tmp_41*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_0*tmp_68 + tmp_1*tmp_69 + tmp_2*tmp_47 + tmp_3*tmp_70 + tmp_4*tmp_48 + tmp_49*tmp_9) + 1.0*p_affine_13_1*(tmp_2*tmp_61 + tmp_4*tmp_62 + tmp_63*tmp_9) + 1.0*p_affine_13_2*(tmp_10*tmp_69 + tmp_2*tmp_54 + tmp_4*tmp_55 + tmp_56*tmp_9 + tmp_6*tmp_70 + tmp_68*tmp_8);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_1*tmp_80 + tmp_3*tmp_82;
      real_t tmp_84 = tmp_10*tmp_80 + tmp_6*tmp_82 + tmp_78*tmp_8;
      real_t tmp_85 = tmp_2*tmp_82 + tmp_4*tmp_80 + tmp_78*tmp_9;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_1*tmp_94 + tmp_3*tmp_96;
      real_t tmp_98 = tmp_10*tmp_94 + tmp_6*tmp_96 + tmp_8*tmp_92;
      real_t tmp_99 = tmp_2*tmp_96 + tmp_4*tmp_94 + tmp_9*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_1*tmp_108 + tmp_110*tmp_3;
      real_t tmp_112 = tmp_10*tmp_108 + tmp_106*tmp_8 + tmp_110*tmp_6;
      real_t tmp_113 = tmp_106*tmp_9 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_1*tmp_122 + tmp_124*tmp_3;
      real_t tmp_126 = tmp_10*tmp_122 + tmp_120*tmp_8 + tmp_124*tmp_6;
      real_t tmp_127 = tmp_120*tmp_9 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_1*tmp_136 + tmp_138*tmp_3;
      real_t tmp_140 = tmp_10*tmp_136 + tmp_134*tmp_8 + tmp_138*tmp_6;
      real_t tmp_141 = tmp_134*tmp_9 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_1*tmp_150 + tmp_152*tmp_3;
      real_t tmp_154 = tmp_10*tmp_150 + tmp_148*tmp_8 + tmp_152*tmp_6;
      real_t tmp_155 = tmp_148*tmp_9 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_1*tmp_164 + tmp_166*tmp_3;
      real_t tmp_168 = tmp_10*tmp_164 + tmp_162*tmp_8 + tmp_166*tmp_6;
      real_t tmp_169 = tmp_162*tmp_9 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_1*tmp_178 + tmp_180*tmp_3;
      real_t tmp_182 = tmp_10*tmp_178 + tmp_176*tmp_8 + tmp_180*tmp_6;
      real_t tmp_183 = tmp_176*tmp_9 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_1*tmp_192 + tmp_194*tmp_3;
      real_t tmp_196 = tmp_10*tmp_192 + tmp_190*tmp_8 + tmp_194*tmp_6;
      real_t tmp_197 = tmp_190*tmp_9 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_1*tmp_206 + tmp_208*tmp_3;
      real_t tmp_210 = tmp_10*tmp_206 + tmp_204*tmp_8 + tmp_208*tmp_6;
      real_t tmp_211 = tmp_2*tmp_208 + tmp_204*tmp_9 + tmp_206*tmp_4;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_1*tmp_220 + tmp_222*tmp_3;
      real_t tmp_224 = tmp_10*tmp_220 + tmp_218*tmp_8 + tmp_222*tmp_6;
      real_t tmp_225 = tmp_2*tmp_222 + tmp_218*tmp_9 + tmp_220*tmp_4;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_1*tmp_234 + tmp_236*tmp_3;
      real_t tmp_238 = tmp_10*tmp_234 + tmp_232*tmp_8 + tmp_236*tmp_6;
      real_t tmp_239 = tmp_2*tmp_236 + tmp_232*tmp_9 + tmp_234*tmp_4;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_1*tmp_248 + tmp_250*tmp_3;
      real_t tmp_252 = tmp_10*tmp_248 + tmp_246*tmp_8 + tmp_250*tmp_6;
      real_t tmp_253 = tmp_2*tmp_250 + tmp_246*tmp_9 + tmp_248*tmp_4;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_1*tmp_262 + tmp_264*tmp_3;
      real_t tmp_266 = tmp_10*tmp_262 + tmp_260*tmp_8 + tmp_264*tmp_6;
      real_t tmp_267 = tmp_2*tmp_264 + tmp_260*tmp_9 + tmp_262*tmp_4;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_1*tmp_276 + tmp_278*tmp_3;
      real_t tmp_280 = tmp_10*tmp_276 + tmp_274*tmp_8 + tmp_278*tmp_6;
      real_t tmp_281 = tmp_2*tmp_278 + tmp_274*tmp_9 + tmp_276*tmp_4;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_1*tmp_290 + tmp_292*tmp_3;
      real_t tmp_294 = tmp_10*tmp_290 + tmp_288*tmp_8 + tmp_292*tmp_6;
      real_t tmp_295 = tmp_2*tmp_292 + tmp_288*tmp_9 + tmp_290*tmp_4;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_1*tmp_304 + tmp_3*tmp_306;
      real_t tmp_308 = tmp_10*tmp_304 + tmp_302*tmp_8 + tmp_306*tmp_6;
      real_t tmp_309 = tmp_2*tmp_306 + tmp_302*tmp_9 + tmp_304*tmp_4;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_1*tmp_318 + tmp_3*tmp_320;
      real_t tmp_322 = tmp_10*tmp_318 + tmp_316*tmp_8 + tmp_320*tmp_6;
      real_t tmp_323 = tmp_2*tmp_320 + tmp_316*tmp_9 + tmp_318*tmp_4;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_1*tmp_332 + tmp_3*tmp_334;
      real_t tmp_336 = tmp_10*tmp_332 + tmp_330*tmp_8 + tmp_334*tmp_6;
      real_t tmp_337 = tmp_2*tmp_334 + tmp_330*tmp_9 + tmp_332*tmp_4;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_1*tmp_346 + tmp_3*tmp_348;
      real_t tmp_350 = tmp_10*tmp_346 + tmp_344*tmp_8 + tmp_348*tmp_6;
      real_t tmp_351 = tmp_2*tmp_348 + tmp_344*tmp_9 + tmp_346*tmp_4;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_1*tmp_56;
      real_t tmp_355 = p_affine_13_1*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_49 + 1.0*p_affine_13_1*tmp_63 + 1.0*p_affine_13_2*tmp_56;
      real_t tmp_357 = p_affine_13_1*tmp_55;
      real_t tmp_358 = p_affine_13_1*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_48 + 1.0*p_affine_13_1*tmp_62 + 1.0*p_affine_13_2*tmp_55;
      real_t tmp_360 = p_affine_13_1*tmp_54;
      real_t tmp_361 = p_affine_13_1*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_47 + 1.0*p_affine_13_1*tmp_61 + 1.0*p_affine_13_2*tmp_54;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_0_1 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_0_2 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_0_3 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_2;
      real_t tmp_12 = tmp_1*tmp_6;
      real_t tmp_13 = tmp_3*tmp_8;
      real_t tmp_14 = 1.0 / (-tmp_0*tmp_11 + tmp_0*tmp_7 + tmp_1*tmp_2*tmp_8 + tmp_10*tmp_3*tmp_9 - tmp_12*tmp_9 - tmp_13*tmp_4);
      real_t tmp_15 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_16 = -tmp_15;
      real_t tmp_17 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_18 = 0.031405749086161582*tmp_16 + 0.93718850182767688*tmp_17;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_14*(tmp_18 + tmp_19);
      real_t tmp_21 = tmp_10*tmp_3 - tmp_12;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = 0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24;
      real_t tmp_26 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_27 = tmp_14*(tmp_25 + tmp_26);
      real_t tmp_28 = -tmp_11 + tmp_7;
      real_t tmp_29 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_30 = -tmp_29;
      real_t tmp_31 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_32 = 0.031405749086161582*tmp_30 + 0.93718850182767688*tmp_31;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_14*(tmp_32 + tmp_33);
      real_t tmp_35 = tmp_20*tmp_5 + tmp_21*tmp_27 + tmp_28*tmp_34 - 1.0/4.0;
      real_t tmp_36 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_37 = tmp_0*tmp_6 - tmp_13;
      real_t tmp_38 = tmp_2*tmp_8 - tmp_6*tmp_9;
      real_t tmp_39 = tmp_20*tmp_36 + tmp_27*tmp_37 + tmp_34*tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_10*tmp_9 - tmp_4*tmp_8;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_27*tmp_41 + tmp_34*tmp_42 - 1.0/4.0;
      real_t tmp_44 = tmp_0*tmp_35 + tmp_1*tmp_39 + tmp_3*tmp_43;
      real_t tmp_45 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_46 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_47 = tmp_45*tmp_46;
      real_t tmp_48 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_49 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_50 = tmp_47 - tmp_48*tmp_49;
      real_t tmp_51 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_52 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_53 = tmp_48*tmp_52;
      real_t tmp_54 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_55 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_56 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_57 = tmp_52*tmp_54;
      real_t tmp_58 = tmp_45*tmp_55;
      real_t tmp_59 = tmp_49*tmp_56;
      real_t tmp_60 = 1.0 / (-tmp_46*tmp_57 + tmp_47*tmp_56 - tmp_48*tmp_59 + tmp_49*tmp_54*tmp_55 + tmp_51*tmp_53 - tmp_51*tmp_58);
      real_t tmp_61 = 0.5*tmp_60;
      real_t tmp_62 = tmp_50*tmp_61;
      real_t tmp_63 = -tmp_45*tmp_51 + tmp_49*tmp_54;
      real_t tmp_64 = tmp_61*tmp_63;
      real_t tmp_65 = -tmp_46*tmp_54 + tmp_48*tmp_51;
      real_t tmp_66 = tmp_61*tmp_65;
      real_t tmp_67 = -tmp_62 - tmp_64 - tmp_66;
      real_t tmp_68 = 1.0*p_affine_13_1;
      real_t tmp_69 = tmp_67*tmp_68;
      real_t tmp_70 = tmp_10*tmp_39 + tmp_35*tmp_8 + tmp_43*tmp_6;
      real_t tmp_71 = tmp_53 - tmp_58;
      real_t tmp_72 = tmp_61*tmp_71;
      real_t tmp_73 = tmp_45*tmp_56 - tmp_57;
      real_t tmp_74 = tmp_61*tmp_73;
      real_t tmp_75 = -tmp_48*tmp_56 + tmp_54*tmp_55;
      real_t tmp_76 = tmp_61*tmp_75;
      real_t tmp_77 = -tmp_72 - tmp_74 - tmp_76;
      real_t tmp_78 = tmp_68*tmp_77;
      real_t tmp_79 = tmp_2*tmp_43 + tmp_35*tmp_9 + tmp_39*tmp_4;
      real_t tmp_80 = -tmp_46*tmp_52 + tmp_49*tmp_55;
      real_t tmp_81 = 1.0*tmp_60;
      real_t tmp_82 = tmp_80*tmp_81;
      real_t tmp_83 = tmp_51*tmp_52 - tmp_59;
      real_t tmp_84 = tmp_81*tmp_83;
      real_t tmp_85 = tmp_46*tmp_56 - tmp_51*tmp_55;
      real_t tmp_86 = tmp_81*tmp_85;
      real_t tmp_87 = 1.0*p_affine_13_0*tmp_67 + 1.0*p_affine_13_1*(-tmp_82 - tmp_84 - tmp_86) + 1.0*p_affine_13_2*tmp_77;
      real_t tmp_88 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_89 = tmp_60*(tmp_18 + tmp_88);
      real_t tmp_90 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_91 = tmp_60*(tmp_25 + tmp_90);
      real_t tmp_92 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_93 = tmp_60*(tmp_32 + tmp_92);
      real_t tmp_94 = tmp_65*tmp_93 + tmp_75*tmp_89 + tmp_85*tmp_91;
      real_t tmp_95 = tmp_63*tmp_93 + tmp_73*tmp_89 + tmp_83*tmp_91;
      real_t tmp_96 = tmp_50*tmp_93 + tmp_71*tmp_89 + tmp_80*tmp_91;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = (std::abs(tmp_15*tmp_24 - tmp_17*tmp_22)*std::abs(tmp_15*tmp_24 - tmp_17*tmp_22)) + (std::abs(tmp_15*tmp_31 - tmp_17*tmp_29)*std::abs(tmp_15*tmp_31 - tmp_17*tmp_29)) + (std::abs(tmp_22*tmp_31 - tmp_24*tmp_29)*std::abs(tmp_22*tmp_31 - tmp_24*tmp_29));
      real_t tmp_99 = 14.0*std::pow(tmp_98, -0.25);
      real_t tmp_100 = tmp_79*tmp_99;
      real_t tmp_101 = 1.0*tmp_14;
      real_t tmp_102 = 0.5*tmp_14;
      real_t tmp_103 = tmp_102*tmp_21;
      real_t tmp_104 = tmp_102*tmp_37;
      real_t tmp_105 = tmp_102*tmp_41;
      real_t tmp_106 = tmp_102*tmp_9;
      real_t tmp_107 = tmp_102*tmp_4;
      real_t tmp_108 = tmp_102*tmp_2;
      real_t tmp_109 = p_affine_13_0*(tmp_0*tmp_103 + tmp_1*tmp_104 + tmp_105*tmp_3 + tmp_106*tmp_28 + tmp_107*tmp_38 + tmp_108*tmp_42) + p_affine_13_1*(tmp_101*tmp_2*tmp_41 + tmp_101*tmp_21*tmp_9 + tmp_101*tmp_37*tmp_4) + p_affine_13_2*(tmp_10*tmp_104 + tmp_103*tmp_8 + tmp_105*tmp_6 + tmp_106*tmp_5 + tmp_107*tmp_36 + tmp_108*tmp_40);
      real_t tmp_110 = 1.0*std::pow(tmp_98, 1.0/2.0);
      real_t tmp_111 = 0.0068572537431980923*tmp_110;
      real_t tmp_112 = 0.19601935860219369*tmp_16 + 0.60796128279561268*tmp_17;
      real_t tmp_113 = tmp_14*(tmp_112 + tmp_19);
      real_t tmp_114 = 0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24;
      real_t tmp_115 = tmp_14*(tmp_114 + tmp_26);
      real_t tmp_116 = 0.19601935860219369*tmp_30 + 0.60796128279561268*tmp_31;
      real_t tmp_117 = tmp_14*(tmp_116 + tmp_33);
      real_t tmp_118 = tmp_113*tmp_5 + tmp_115*tmp_21 + tmp_117*tmp_28 - 1.0/4.0;
      real_t tmp_119 = tmp_113*tmp_36 + tmp_115*tmp_37 + tmp_117*tmp_38 - 1.0/4.0;
      real_t tmp_120 = tmp_113*tmp_40 + tmp_115*tmp_41 + tmp_117*tmp_42 - 1.0/4.0;
      real_t tmp_121 = tmp_0*tmp_118 + tmp_1*tmp_119 + tmp_120*tmp_3;
      real_t tmp_122 = tmp_10*tmp_119 + tmp_118*tmp_8 + tmp_120*tmp_6;
      real_t tmp_123 = tmp_118*tmp_9 + tmp_119*tmp_4 + tmp_120*tmp_2;
      real_t tmp_124 = tmp_60*(tmp_112 + tmp_88);
      real_t tmp_125 = tmp_60*(tmp_114 + tmp_90);
      real_t tmp_126 = tmp_60*(tmp_116 + tmp_92);
      real_t tmp_127 = tmp_124*tmp_75 + tmp_125*tmp_85 + tmp_126*tmp_65;
      real_t tmp_128 = tmp_124*tmp_73 + tmp_125*tmp_83 + tmp_126*tmp_63;
      real_t tmp_129 = tmp_124*tmp_71 + tmp_125*tmp_80 + tmp_126*tmp_50;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = tmp_123*tmp_99;
      real_t tmp_132 = 0.037198804536718075*tmp_110;
      real_t tmp_133 = 0.37605877282253791*tmp_16 + 0.039308471900058539*tmp_17;
      real_t tmp_134 = tmp_14*(tmp_133 + tmp_19);
      real_t tmp_135 = 0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24;
      real_t tmp_136 = tmp_14*(tmp_135 + tmp_26);
      real_t tmp_137 = 0.37605877282253791*tmp_30 + 0.039308471900058539*tmp_31;
      real_t tmp_138 = tmp_14*(tmp_137 + tmp_33);
      real_t tmp_139 = tmp_134*tmp_5 + tmp_136*tmp_21 + tmp_138*tmp_28 - 1.0/4.0;
      real_t tmp_140 = tmp_134*tmp_36 + tmp_136*tmp_37 + tmp_138*tmp_38 - 1.0/4.0;
      real_t tmp_141 = tmp_134*tmp_40 + tmp_136*tmp_41 + tmp_138*tmp_42 - 1.0/4.0;
      real_t tmp_142 = tmp_0*tmp_139 + tmp_1*tmp_140 + tmp_141*tmp_3;
      real_t tmp_143 = tmp_10*tmp_140 + tmp_139*tmp_8 + tmp_141*tmp_6;
      real_t tmp_144 = tmp_139*tmp_9 + tmp_140*tmp_4 + tmp_141*tmp_2;
      real_t tmp_145 = tmp_60*(tmp_133 + tmp_88);
      real_t tmp_146 = tmp_60*(tmp_135 + tmp_90);
      real_t tmp_147 = tmp_60*(tmp_137 + tmp_92);
      real_t tmp_148 = tmp_145*tmp_75 + tmp_146*tmp_85 + tmp_147*tmp_65;
      real_t tmp_149 = tmp_145*tmp_73 + tmp_146*tmp_83 + tmp_147*tmp_63;
      real_t tmp_150 = tmp_145*tmp_71 + tmp_146*tmp_80 + tmp_147*tmp_50;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = tmp_144*tmp_99;
      real_t tmp_153 = 0.020848748529055869*tmp_110;
      real_t tmp_154 = 0.78764240869137092*tmp_16 + 0.1711304259088916*tmp_17;
      real_t tmp_155 = tmp_14*(tmp_154 + tmp_19);
      real_t tmp_156 = 0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24;
      real_t tmp_157 = tmp_14*(tmp_156 + tmp_26);
      real_t tmp_158 = 0.78764240869137092*tmp_30 + 0.1711304259088916*tmp_31;
      real_t tmp_159 = tmp_14*(tmp_158 + tmp_33);
      real_t tmp_160 = tmp_155*tmp_5 + tmp_157*tmp_21 + tmp_159*tmp_28 - 1.0/4.0;
      real_t tmp_161 = tmp_155*tmp_36 + tmp_157*tmp_37 + tmp_159*tmp_38 - 1.0/4.0;
      real_t tmp_162 = tmp_155*tmp_40 + tmp_157*tmp_41 + tmp_159*tmp_42 - 1.0/4.0;
      real_t tmp_163 = tmp_0*tmp_160 + tmp_1*tmp_161 + tmp_162*tmp_3;
      real_t tmp_164 = tmp_10*tmp_161 + tmp_160*tmp_8 + tmp_162*tmp_6;
      real_t tmp_165 = tmp_160*tmp_9 + tmp_161*tmp_4 + tmp_162*tmp_2;
      real_t tmp_166 = tmp_60*(tmp_154 + tmp_88);
      real_t tmp_167 = tmp_60*(tmp_156 + tmp_90);
      real_t tmp_168 = tmp_60*(tmp_158 + tmp_92);
      real_t tmp_169 = tmp_166*tmp_75 + tmp_167*tmp_85 + tmp_168*tmp_65;
      real_t tmp_170 = tmp_166*tmp_73 + tmp_167*tmp_83 + tmp_168*tmp_63;
      real_t tmp_171 = tmp_166*tmp_71 + tmp_167*tmp_80 + tmp_168*tmp_50;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_165*tmp_99;
      real_t tmp_174 = 0.019202922745021479*tmp_110;
      real_t tmp_175 = 0.58463275527740355*tmp_16 + 0.37605877282253791*tmp_17;
      real_t tmp_176 = tmp_14*(tmp_175 + tmp_19);
      real_t tmp_177 = 0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24;
      real_t tmp_178 = tmp_14*(tmp_177 + tmp_26);
      real_t tmp_179 = 0.58463275527740355*tmp_30 + 0.37605877282253791*tmp_31;
      real_t tmp_180 = tmp_14*(tmp_179 + tmp_33);
      real_t tmp_181 = tmp_176*tmp_5 + tmp_178*tmp_21 + tmp_180*tmp_28 - 1.0/4.0;
      real_t tmp_182 = tmp_176*tmp_36 + tmp_178*tmp_37 + tmp_180*tmp_38 - 1.0/4.0;
      real_t tmp_183 = tmp_176*tmp_40 + tmp_178*tmp_41 + tmp_180*tmp_42 - 1.0/4.0;
      real_t tmp_184 = tmp_0*tmp_181 + tmp_1*tmp_182 + tmp_183*tmp_3;
      real_t tmp_185 = tmp_10*tmp_182 + tmp_181*tmp_8 + tmp_183*tmp_6;
      real_t tmp_186 = tmp_181*tmp_9 + tmp_182*tmp_4 + tmp_183*tmp_2;
      real_t tmp_187 = tmp_60*(tmp_175 + tmp_88);
      real_t tmp_188 = tmp_60*(tmp_177 + tmp_90);
      real_t tmp_189 = tmp_60*(tmp_179 + tmp_92);
      real_t tmp_190 = tmp_187*tmp_75 + tmp_188*tmp_85 + tmp_189*tmp_65;
      real_t tmp_191 = tmp_187*tmp_73 + tmp_188*tmp_83 + tmp_189*tmp_63;
      real_t tmp_192 = tmp_187*tmp_71 + tmp_188*tmp_80 + tmp_189*tmp_50;
      real_t tmp_193 = -tmp_190 - tmp_191 - tmp_192 + 1;
      real_t tmp_194 = tmp_186*tmp_99;
      real_t tmp_195 = 0.020848748529055869*tmp_110;
      real_t tmp_196 = 0.041227165399737475*tmp_16 + 0.78764240869137092*tmp_17;
      real_t tmp_197 = tmp_14*(tmp_19 + tmp_196);
      real_t tmp_198 = 0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24;
      real_t tmp_199 = tmp_14*(tmp_198 + tmp_26);
      real_t tmp_200 = 0.041227165399737475*tmp_30 + 0.78764240869137092*tmp_31;
      real_t tmp_201 = tmp_14*(tmp_200 + tmp_33);
      real_t tmp_202 = tmp_197*tmp_5 + tmp_199*tmp_21 + tmp_201*tmp_28 - 1.0/4.0;
      real_t tmp_203 = tmp_197*tmp_36 + tmp_199*tmp_37 + tmp_201*tmp_38 - 1.0/4.0;
      real_t tmp_204 = tmp_197*tmp_40 + tmp_199*tmp_41 + tmp_201*tmp_42 - 1.0/4.0;
      real_t tmp_205 = tmp_0*tmp_202 + tmp_1*tmp_203 + tmp_204*tmp_3;
      real_t tmp_206 = tmp_10*tmp_203 + tmp_202*tmp_8 + tmp_204*tmp_6;
      real_t tmp_207 = tmp_2*tmp_204 + tmp_202*tmp_9 + tmp_203*tmp_4;
      real_t tmp_208 = tmp_60*(tmp_196 + tmp_88);
      real_t tmp_209 = tmp_60*(tmp_198 + tmp_90);
      real_t tmp_210 = tmp_60*(tmp_200 + tmp_92);
      real_t tmp_211 = tmp_208*tmp_75 + tmp_209*tmp_85 + tmp_210*tmp_65;
      real_t tmp_212 = tmp_208*tmp_73 + tmp_209*tmp_83 + tmp_210*tmp_63;
      real_t tmp_213 = tmp_208*tmp_71 + tmp_209*tmp_80 + tmp_210*tmp_50;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = tmp_207*tmp_99;
      real_t tmp_216 = 0.019202922745021479*tmp_110;
      real_t tmp_217 = 0.039308471900058539*tmp_16 + 0.58463275527740355*tmp_17;
      real_t tmp_218 = tmp_14*(tmp_19 + tmp_217);
      real_t tmp_219 = 0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24;
      real_t tmp_220 = tmp_14*(tmp_219 + tmp_26);
      real_t tmp_221 = 0.039308471900058539*tmp_30 + 0.58463275527740355*tmp_31;
      real_t tmp_222 = tmp_14*(tmp_221 + tmp_33);
      real_t tmp_223 = tmp_21*tmp_220 + tmp_218*tmp_5 + tmp_222*tmp_28 - 1.0/4.0;
      real_t tmp_224 = tmp_218*tmp_36 + tmp_220*tmp_37 + tmp_222*tmp_38 - 1.0/4.0;
      real_t tmp_225 = tmp_218*tmp_40 + tmp_220*tmp_41 + tmp_222*tmp_42 - 1.0/4.0;
      real_t tmp_226 = tmp_0*tmp_223 + tmp_1*tmp_224 + tmp_225*tmp_3;
      real_t tmp_227 = tmp_10*tmp_224 + tmp_223*tmp_8 + tmp_225*tmp_6;
      real_t tmp_228 = tmp_2*tmp_225 + tmp_223*tmp_9 + tmp_224*tmp_4;
      real_t tmp_229 = tmp_60*(tmp_217 + tmp_88);
      real_t tmp_230 = tmp_60*(tmp_219 + tmp_90);
      real_t tmp_231 = tmp_60*(tmp_221 + tmp_92);
      real_t tmp_232 = tmp_229*tmp_75 + tmp_230*tmp_85 + tmp_231*tmp_65;
      real_t tmp_233 = tmp_229*tmp_73 + tmp_230*tmp_83 + tmp_231*tmp_63;
      real_t tmp_234 = tmp_229*tmp_71 + tmp_230*tmp_80 + tmp_231*tmp_50;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = tmp_228*tmp_99;
      real_t tmp_237 = 0.020848748529055869*tmp_110;
      real_t tmp_238 = 0.78764240869137092*tmp_16 + 0.041227165399737475*tmp_17;
      real_t tmp_239 = tmp_14*(tmp_19 + tmp_238);
      real_t tmp_240 = 0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24;
      real_t tmp_241 = tmp_14*(tmp_240 + tmp_26);
      real_t tmp_242 = 0.78764240869137092*tmp_30 + 0.041227165399737475*tmp_31;
      real_t tmp_243 = tmp_14*(tmp_242 + tmp_33);
      real_t tmp_244 = tmp_21*tmp_241 + tmp_239*tmp_5 + tmp_243*tmp_28 - 1.0/4.0;
      real_t tmp_245 = tmp_239*tmp_36 + tmp_241*tmp_37 + tmp_243*tmp_38 - 1.0/4.0;
      real_t tmp_246 = tmp_239*tmp_40 + tmp_241*tmp_41 + tmp_243*tmp_42 - 1.0/4.0;
      real_t tmp_247 = tmp_0*tmp_244 + tmp_1*tmp_245 + tmp_246*tmp_3;
      real_t tmp_248 = tmp_10*tmp_245 + tmp_244*tmp_8 + tmp_246*tmp_6;
      real_t tmp_249 = tmp_2*tmp_246 + tmp_244*tmp_9 + tmp_245*tmp_4;
      real_t tmp_250 = tmp_60*(tmp_238 + tmp_88);
      real_t tmp_251 = tmp_60*(tmp_240 + tmp_90);
      real_t tmp_252 = tmp_60*(tmp_242 + tmp_92);
      real_t tmp_253 = tmp_250*tmp_75 + tmp_251*tmp_85 + tmp_252*tmp_65;
      real_t tmp_254 = tmp_250*tmp_73 + tmp_251*tmp_83 + tmp_252*tmp_63;
      real_t tmp_255 = tmp_250*tmp_71 + tmp_251*tmp_80 + tmp_252*tmp_50;
      real_t tmp_256 = -tmp_253 - tmp_254 - tmp_255 + 1;
      real_t tmp_257 = tmp_249*tmp_99;
      real_t tmp_258 = 0.019202922745021479*tmp_110;
      real_t tmp_259 = 0.58463275527740355*tmp_16 + 0.039308471900058539*tmp_17;
      real_t tmp_260 = tmp_14*(tmp_19 + tmp_259);
      real_t tmp_261 = 0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24;
      real_t tmp_262 = tmp_14*(tmp_26 + tmp_261);
      real_t tmp_263 = 0.58463275527740355*tmp_30 + 0.039308471900058539*tmp_31;
      real_t tmp_264 = tmp_14*(tmp_263 + tmp_33);
      real_t tmp_265 = tmp_21*tmp_262 + tmp_260*tmp_5 + tmp_264*tmp_28 - 1.0/4.0;
      real_t tmp_266 = tmp_260*tmp_36 + tmp_262*tmp_37 + tmp_264*tmp_38 - 1.0/4.0;
      real_t tmp_267 = tmp_260*tmp_40 + tmp_262*tmp_41 + tmp_264*tmp_42 - 1.0/4.0;
      real_t tmp_268 = tmp_0*tmp_265 + tmp_1*tmp_266 + tmp_267*tmp_3;
      real_t tmp_269 = tmp_10*tmp_266 + tmp_265*tmp_8 + tmp_267*tmp_6;
      real_t tmp_270 = tmp_2*tmp_267 + tmp_265*tmp_9 + tmp_266*tmp_4;
      real_t tmp_271 = tmp_60*(tmp_259 + tmp_88);
      real_t tmp_272 = tmp_60*(tmp_261 + tmp_90);
      real_t tmp_273 = tmp_60*(tmp_263 + tmp_92);
      real_t tmp_274 = tmp_271*tmp_75 + tmp_272*tmp_85 + tmp_273*tmp_65;
      real_t tmp_275 = tmp_271*tmp_73 + tmp_272*tmp_83 + tmp_273*tmp_63;
      real_t tmp_276 = tmp_271*tmp_71 + tmp_272*tmp_80 + tmp_273*tmp_50;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_270*tmp_99;
      real_t tmp_279 = 0.020848748529055869*tmp_110;
      real_t tmp_280 = 0.1711304259088916*tmp_16 + 0.78764240869137092*tmp_17;
      real_t tmp_281 = tmp_14*(tmp_19 + tmp_280);
      real_t tmp_282 = 0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24;
      real_t tmp_283 = tmp_14*(tmp_26 + tmp_282);
      real_t tmp_284 = 0.1711304259088916*tmp_30 + 0.78764240869137092*tmp_31;
      real_t tmp_285 = tmp_14*(tmp_284 + tmp_33);
      real_t tmp_286 = tmp_21*tmp_283 + tmp_28*tmp_285 + tmp_281*tmp_5 - 1.0/4.0;
      real_t tmp_287 = tmp_281*tmp_36 + tmp_283*tmp_37 + tmp_285*tmp_38 - 1.0/4.0;
      real_t tmp_288 = tmp_281*tmp_40 + tmp_283*tmp_41 + tmp_285*tmp_42 - 1.0/4.0;
      real_t tmp_289 = tmp_0*tmp_286 + tmp_1*tmp_287 + tmp_288*tmp_3;
      real_t tmp_290 = tmp_10*tmp_287 + tmp_286*tmp_8 + tmp_288*tmp_6;
      real_t tmp_291 = tmp_2*tmp_288 + tmp_286*tmp_9 + tmp_287*tmp_4;
      real_t tmp_292 = tmp_60*(tmp_280 + tmp_88);
      real_t tmp_293 = tmp_60*(tmp_282 + tmp_90);
      real_t tmp_294 = tmp_60*(tmp_284 + tmp_92);
      real_t tmp_295 = tmp_292*tmp_75 + tmp_293*tmp_85 + tmp_294*tmp_65;
      real_t tmp_296 = tmp_292*tmp_73 + tmp_293*tmp_83 + tmp_294*tmp_63;
      real_t tmp_297 = tmp_292*tmp_71 + tmp_293*tmp_80 + tmp_294*tmp_50;
      real_t tmp_298 = -tmp_295 - tmp_296 - tmp_297 + 1;
      real_t tmp_299 = tmp_291*tmp_99;
      real_t tmp_300 = 0.019202922745021479*tmp_110;
      real_t tmp_301 = 0.37605877282253791*tmp_16 + 0.58463275527740355*tmp_17;
      real_t tmp_302 = tmp_14*(tmp_19 + tmp_301);
      real_t tmp_303 = 0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24;
      real_t tmp_304 = tmp_14*(tmp_26 + tmp_303);
      real_t tmp_305 = 0.37605877282253791*tmp_30 + 0.58463275527740355*tmp_31;
      real_t tmp_306 = tmp_14*(tmp_305 + tmp_33);
      real_t tmp_307 = tmp_21*tmp_304 + tmp_28*tmp_306 + tmp_302*tmp_5 - 1.0/4.0;
      real_t tmp_308 = tmp_302*tmp_36 + tmp_304*tmp_37 + tmp_306*tmp_38 - 1.0/4.0;
      real_t tmp_309 = tmp_302*tmp_40 + tmp_304*tmp_41 + tmp_306*tmp_42 - 1.0/4.0;
      real_t tmp_310 = tmp_0*tmp_307 + tmp_1*tmp_308 + tmp_3*tmp_309;
      real_t tmp_311 = tmp_10*tmp_308 + tmp_307*tmp_8 + tmp_309*tmp_6;
      real_t tmp_312 = tmp_2*tmp_309 + tmp_307*tmp_9 + tmp_308*tmp_4;
      real_t tmp_313 = tmp_60*(tmp_301 + tmp_88);
      real_t tmp_314 = tmp_60*(tmp_303 + tmp_90);
      real_t tmp_315 = tmp_60*(tmp_305 + tmp_92);
      real_t tmp_316 = tmp_313*tmp_75 + tmp_314*tmp_85 + tmp_315*tmp_65;
      real_t tmp_317 = tmp_313*tmp_73 + tmp_314*tmp_83 + tmp_315*tmp_63;
      real_t tmp_318 = tmp_313*tmp_71 + tmp_314*tmp_80 + tmp_315*tmp_50;
      real_t tmp_319 = -tmp_316 - tmp_317 - tmp_318 + 1;
      real_t tmp_320 = tmp_312*tmp_99;
      real_t tmp_321 = 0.020848748529055869*tmp_110;
      real_t tmp_322 = 0.041227165399737475*tmp_16 + 0.1711304259088916*tmp_17;
      real_t tmp_323 = tmp_14*(tmp_19 + tmp_322);
      real_t tmp_324 = 0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24;
      real_t tmp_325 = tmp_14*(tmp_26 + tmp_324);
      real_t tmp_326 = 0.041227165399737475*tmp_30 + 0.1711304259088916*tmp_31;
      real_t tmp_327 = tmp_14*(tmp_326 + tmp_33);
      real_t tmp_328 = tmp_21*tmp_325 + tmp_28*tmp_327 + tmp_323*tmp_5 - 1.0/4.0;
      real_t tmp_329 = tmp_323*tmp_36 + tmp_325*tmp_37 + tmp_327*tmp_38 - 1.0/4.0;
      real_t tmp_330 = tmp_323*tmp_40 + tmp_325*tmp_41 + tmp_327*tmp_42 - 1.0/4.0;
      real_t tmp_331 = tmp_0*tmp_328 + tmp_1*tmp_329 + tmp_3*tmp_330;
      real_t tmp_332 = tmp_10*tmp_329 + tmp_328*tmp_8 + tmp_330*tmp_6;
      real_t tmp_333 = tmp_2*tmp_330 + tmp_328*tmp_9 + tmp_329*tmp_4;
      real_t tmp_334 = tmp_60*(tmp_322 + tmp_88);
      real_t tmp_335 = tmp_60*(tmp_324 + tmp_90);
      real_t tmp_336 = tmp_60*(tmp_326 + tmp_92);
      real_t tmp_337 = tmp_334*tmp_75 + tmp_335*tmp_85 + tmp_336*tmp_65;
      real_t tmp_338 = tmp_334*tmp_73 + tmp_335*tmp_83 + tmp_336*tmp_63;
      real_t tmp_339 = tmp_334*tmp_71 + tmp_335*tmp_80 + tmp_336*tmp_50;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_99;
      real_t tmp_342 = 0.019202922745021479*tmp_110;
      real_t tmp_343 = 0.40446199974765351*tmp_16 + 0.19107600050469298*tmp_17;
      real_t tmp_344 = tmp_14*(tmp_19 + tmp_343);
      real_t tmp_345 = 0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24;
      real_t tmp_346 = tmp_14*(tmp_26 + tmp_345);
      real_t tmp_347 = 0.40446199974765351*tmp_30 + 0.19107600050469298*tmp_31;
      real_t tmp_348 = tmp_14*(tmp_33 + tmp_347);
      real_t tmp_349 = tmp_21*tmp_346 + tmp_28*tmp_348 + tmp_344*tmp_5 - 1.0/4.0;
      real_t tmp_350 = tmp_344*tmp_36 + tmp_346*tmp_37 + tmp_348*tmp_38 - 1.0/4.0;
      real_t tmp_351 = tmp_344*tmp_40 + tmp_346*tmp_41 + tmp_348*tmp_42 - 1.0/4.0;
      real_t tmp_352 = tmp_0*tmp_349 + tmp_1*tmp_350 + tmp_3*tmp_351;
      real_t tmp_353 = tmp_10*tmp_350 + tmp_349*tmp_8 + tmp_351*tmp_6;
      real_t tmp_354 = tmp_2*tmp_351 + tmp_349*tmp_9 + tmp_350*tmp_4;
      real_t tmp_355 = tmp_60*(tmp_343 + tmp_88);
      real_t tmp_356 = tmp_60*(tmp_345 + tmp_90);
      real_t tmp_357 = tmp_60*(tmp_347 + tmp_92);
      real_t tmp_358 = tmp_355*tmp_75 + tmp_356*tmp_85 + tmp_357*tmp_65;
      real_t tmp_359 = tmp_355*tmp_73 + tmp_356*tmp_83 + tmp_357*tmp_63;
      real_t tmp_360 = tmp_355*tmp_71 + tmp_356*tmp_80 + tmp_357*tmp_50;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = tmp_354*tmp_99;
      real_t tmp_363 = 0.042507265838595799*tmp_110;
      real_t tmp_364 = 0.039308471900058539*tmp_16 + 0.37605877282253791*tmp_17;
      real_t tmp_365 = tmp_14*(tmp_19 + tmp_364);
      real_t tmp_366 = 0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24;
      real_t tmp_367 = tmp_14*(tmp_26 + tmp_366);
      real_t tmp_368 = 0.039308471900058539*tmp_30 + 0.37605877282253791*tmp_31;
      real_t tmp_369 = tmp_14*(tmp_33 + tmp_368);
      real_t tmp_370 = tmp_21*tmp_367 + tmp_28*tmp_369 + tmp_365*tmp_5 - 1.0/4.0;
      real_t tmp_371 = tmp_36*tmp_365 + tmp_367*tmp_37 + tmp_369*tmp_38 - 1.0/4.0;
      real_t tmp_372 = tmp_365*tmp_40 + tmp_367*tmp_41 + tmp_369*tmp_42 - 1.0/4.0;
      real_t tmp_373 = tmp_0*tmp_370 + tmp_1*tmp_371 + tmp_3*tmp_372;
      real_t tmp_374 = tmp_10*tmp_371 + tmp_370*tmp_8 + tmp_372*tmp_6;
      real_t tmp_375 = tmp_2*tmp_372 + tmp_370*tmp_9 + tmp_371*tmp_4;
      real_t tmp_376 = tmp_60*(tmp_364 + tmp_88);
      real_t tmp_377 = tmp_60*(tmp_366 + tmp_90);
      real_t tmp_378 = tmp_60*(tmp_368 + tmp_92);
      real_t tmp_379 = tmp_376*tmp_75 + tmp_377*tmp_85 + tmp_378*tmp_65;
      real_t tmp_380 = tmp_376*tmp_73 + tmp_377*tmp_83 + tmp_378*tmp_63;
      real_t tmp_381 = tmp_376*tmp_71 + tmp_377*tmp_80 + tmp_378*tmp_50;
      real_t tmp_382 = -tmp_379 - tmp_380 - tmp_381 + 1;
      real_t tmp_383 = tmp_375*tmp_99;
      real_t tmp_384 = 0.020848748529055869*tmp_110;
      real_t tmp_385 = 0.93718850182767688*tmp_16 + 0.031405749086161582*tmp_17;
      real_t tmp_386 = tmp_14*(tmp_19 + tmp_385);
      real_t tmp_387 = 0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24;
      real_t tmp_388 = tmp_14*(tmp_26 + tmp_387);
      real_t tmp_389 = 0.93718850182767688*tmp_30 + 0.031405749086161582*tmp_31;
      real_t tmp_390 = tmp_14*(tmp_33 + tmp_389);
      real_t tmp_391 = tmp_21*tmp_388 + tmp_28*tmp_390 + tmp_386*tmp_5 - 1.0/4.0;
      real_t tmp_392 = tmp_36*tmp_386 + tmp_37*tmp_388 + tmp_38*tmp_390 - 1.0/4.0;
      real_t tmp_393 = tmp_386*tmp_40 + tmp_388*tmp_41 + tmp_390*tmp_42 - 1.0/4.0;
      real_t tmp_394 = tmp_0*tmp_391 + tmp_1*tmp_392 + tmp_3*tmp_393;
      real_t tmp_395 = tmp_10*tmp_392 + tmp_391*tmp_8 + tmp_393*tmp_6;
      real_t tmp_396 = tmp_2*tmp_393 + tmp_391*tmp_9 + tmp_392*tmp_4;
      real_t tmp_397 = tmp_60*(tmp_385 + tmp_88);
      real_t tmp_398 = tmp_60*(tmp_387 + tmp_90);
      real_t tmp_399 = tmp_60*(tmp_389 + tmp_92);
      real_t tmp_400 = tmp_397*tmp_75 + tmp_398*tmp_85 + tmp_399*tmp_65;
      real_t tmp_401 = tmp_397*tmp_73 + tmp_398*tmp_83 + tmp_399*tmp_63;
      real_t tmp_402 = tmp_397*tmp_71 + tmp_398*tmp_80 + tmp_399*tmp_50;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_396*tmp_99;
      real_t tmp_405 = 0.0068572537431980923*tmp_110;
      real_t tmp_406 = 0.60796128279561268*tmp_16 + 0.19601935860219369*tmp_17;
      real_t tmp_407 = tmp_14*(tmp_19 + tmp_406);
      real_t tmp_408 = 0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24;
      real_t tmp_409 = tmp_14*(tmp_26 + tmp_408);
      real_t tmp_410 = 0.60796128279561268*tmp_30 + 0.19601935860219369*tmp_31;
      real_t tmp_411 = tmp_14*(tmp_33 + tmp_410);
      real_t tmp_412 = tmp_21*tmp_409 + tmp_28*tmp_411 + tmp_407*tmp_5 - 1.0/4.0;
      real_t tmp_413 = tmp_36*tmp_407 + tmp_37*tmp_409 + tmp_38*tmp_411 - 1.0/4.0;
      real_t tmp_414 = tmp_40*tmp_407 + tmp_409*tmp_41 + tmp_411*tmp_42 - 1.0/4.0;
      real_t tmp_415 = tmp_0*tmp_412 + tmp_1*tmp_413 + tmp_3*tmp_414;
      real_t tmp_416 = tmp_10*tmp_413 + tmp_412*tmp_8 + tmp_414*tmp_6;
      real_t tmp_417 = tmp_2*tmp_414 + tmp_4*tmp_413 + tmp_412*tmp_9;
      real_t tmp_418 = tmp_60*(tmp_406 + tmp_88);
      real_t tmp_419 = tmp_60*(tmp_408 + tmp_90);
      real_t tmp_420 = tmp_60*(tmp_410 + tmp_92);
      real_t tmp_421 = tmp_418*tmp_75 + tmp_419*tmp_85 + tmp_420*tmp_65;
      real_t tmp_422 = tmp_418*tmp_73 + tmp_419*tmp_83 + tmp_420*tmp_63;
      real_t tmp_423 = tmp_418*tmp_71 + tmp_419*tmp_80 + tmp_420*tmp_50;
      real_t tmp_424 = -tmp_421 - tmp_422 - tmp_423 + 1;
      real_t tmp_425 = tmp_417*tmp_99;
      real_t tmp_426 = 0.037198804536718075*tmp_110;
      real_t tmp_427 = 0.19107600050469298*tmp_16 + 0.40446199974765351*tmp_17;
      real_t tmp_428 = tmp_14*(tmp_19 + tmp_427);
      real_t tmp_429 = 0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24;
      real_t tmp_430 = tmp_14*(tmp_26 + tmp_429);
      real_t tmp_431 = 0.19107600050469298*tmp_30 + 0.40446199974765351*tmp_31;
      real_t tmp_432 = tmp_14*(tmp_33 + tmp_431);
      real_t tmp_433 = tmp_21*tmp_430 + tmp_28*tmp_432 + tmp_428*tmp_5 - 1.0/4.0;
      real_t tmp_434 = tmp_36*tmp_428 + tmp_37*tmp_430 + tmp_38*tmp_432 - 1.0/4.0;
      real_t tmp_435 = tmp_40*tmp_428 + tmp_41*tmp_430 + tmp_42*tmp_432 - 1.0/4.0;
      real_t tmp_436 = tmp_0*tmp_433 + tmp_1*tmp_434 + tmp_3*tmp_435;
      real_t tmp_437 = tmp_10*tmp_434 + tmp_433*tmp_8 + tmp_435*tmp_6;
      real_t tmp_438 = tmp_2*tmp_435 + tmp_4*tmp_434 + tmp_433*tmp_9;
      real_t tmp_439 = tmp_60*(tmp_427 + tmp_88);
      real_t tmp_440 = tmp_60*(tmp_429 + tmp_90);
      real_t tmp_441 = tmp_60*(tmp_431 + tmp_92);
      real_t tmp_442 = tmp_439*tmp_75 + tmp_440*tmp_85 + tmp_441*tmp_65;
      real_t tmp_443 = tmp_439*tmp_73 + tmp_440*tmp_83 + tmp_441*tmp_63;
      real_t tmp_444 = tmp_439*tmp_71 + tmp_440*tmp_80 + tmp_441*tmp_50;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_438*tmp_99;
      real_t tmp_447 = 0.042507265838595799*tmp_110;
      real_t tmp_448 = 0.031405749086161582*tmp_16 + 0.031405749086161582*tmp_17;
      real_t tmp_449 = tmp_14*(tmp_19 + tmp_448);
      real_t tmp_450 = 0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24;
      real_t tmp_451 = tmp_14*(tmp_26 + tmp_450);
      real_t tmp_452 = 0.031405749086161582*tmp_30 + 0.031405749086161582*tmp_31;
      real_t tmp_453 = tmp_14*(tmp_33 + tmp_452);
      real_t tmp_454 = tmp_21*tmp_451 + tmp_28*tmp_453 + tmp_449*tmp_5 - 1.0/4.0;
      real_t tmp_455 = tmp_36*tmp_449 + tmp_37*tmp_451 + tmp_38*tmp_453 - 1.0/4.0;
      real_t tmp_456 = tmp_40*tmp_449 + tmp_41*tmp_451 + tmp_42*tmp_453 - 1.0/4.0;
      real_t tmp_457 = tmp_0*tmp_454 + tmp_1*tmp_455 + tmp_3*tmp_456;
      real_t tmp_458 = tmp_10*tmp_455 + tmp_454*tmp_8 + tmp_456*tmp_6;
      real_t tmp_459 = tmp_2*tmp_456 + tmp_4*tmp_455 + tmp_454*tmp_9;
      real_t tmp_460 = tmp_60*(tmp_448 + tmp_88);
      real_t tmp_461 = tmp_60*(tmp_450 + tmp_90);
      real_t tmp_462 = tmp_60*(tmp_452 + tmp_92);
      real_t tmp_463 = tmp_460*tmp_75 + tmp_461*tmp_85 + tmp_462*tmp_65;
      real_t tmp_464 = tmp_460*tmp_73 + tmp_461*tmp_83 + tmp_462*tmp_63;
      real_t tmp_465 = tmp_460*tmp_71 + tmp_461*tmp_80 + tmp_462*tmp_50;
      real_t tmp_466 = -tmp_463 - tmp_464 - tmp_465 + 1;
      real_t tmp_467 = tmp_459*tmp_99;
      real_t tmp_468 = 0.0068572537431980923*tmp_110;
      real_t tmp_469 = 0.19601935860219369*tmp_16 + 0.19601935860219369*tmp_17;
      real_t tmp_470 = tmp_14*(tmp_19 + tmp_469);
      real_t tmp_471 = 0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24;
      real_t tmp_472 = tmp_14*(tmp_26 + tmp_471);
      real_t tmp_473 = 0.19601935860219369*tmp_30 + 0.19601935860219369*tmp_31;
      real_t tmp_474 = tmp_14*(tmp_33 + tmp_473);
      real_t tmp_475 = tmp_21*tmp_472 + tmp_28*tmp_474 + tmp_470*tmp_5 - 1.0/4.0;
      real_t tmp_476 = tmp_36*tmp_470 + tmp_37*tmp_472 + tmp_38*tmp_474 - 1.0/4.0;
      real_t tmp_477 = tmp_40*tmp_470 + tmp_41*tmp_472 + tmp_42*tmp_474 - 1.0/4.0;
      real_t tmp_478 = tmp_0*tmp_475 + tmp_1*tmp_476 + tmp_3*tmp_477;
      real_t tmp_479 = tmp_10*tmp_476 + tmp_475*tmp_8 + tmp_477*tmp_6;
      real_t tmp_480 = tmp_2*tmp_477 + tmp_4*tmp_476 + tmp_475*tmp_9;
      real_t tmp_481 = tmp_60*(tmp_469 + tmp_88);
      real_t tmp_482 = tmp_60*(tmp_471 + tmp_90);
      real_t tmp_483 = tmp_60*(tmp_473 + tmp_92);
      real_t tmp_484 = tmp_481*tmp_75 + tmp_482*tmp_85 + tmp_483*tmp_65;
      real_t tmp_485 = tmp_481*tmp_73 + tmp_482*tmp_83 + tmp_483*tmp_63;
      real_t tmp_486 = tmp_481*tmp_71 + tmp_482*tmp_80 + tmp_483*tmp_50;
      real_t tmp_487 = -tmp_484 - tmp_485 - tmp_486 + 1;
      real_t tmp_488 = tmp_480*tmp_99;
      real_t tmp_489 = 0.037198804536718075*tmp_110;
      real_t tmp_490 = 0.40446199974765351*tmp_16 + 0.40446199974765351*tmp_17;
      real_t tmp_491 = tmp_14*(tmp_19 + tmp_490);
      real_t tmp_492 = 0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24;
      real_t tmp_493 = tmp_14*(tmp_26 + tmp_492);
      real_t tmp_494 = 0.40446199974765351*tmp_30 + 0.40446199974765351*tmp_31;
      real_t tmp_495 = tmp_14*(tmp_33 + tmp_494);
      real_t tmp_496 = tmp_21*tmp_493 + tmp_28*tmp_495 + tmp_491*tmp_5 - 1.0/4.0;
      real_t tmp_497 = tmp_36*tmp_491 + tmp_37*tmp_493 + tmp_38*tmp_495 - 1.0/4.0;
      real_t tmp_498 = tmp_40*tmp_491 + tmp_41*tmp_493 + tmp_42*tmp_495 - 1.0/4.0;
      real_t tmp_499 = tmp_0*tmp_496 + tmp_1*tmp_497 + tmp_3*tmp_498;
      real_t tmp_500 = tmp_10*tmp_497 + tmp_496*tmp_8 + tmp_498*tmp_6;
      real_t tmp_501 = tmp_2*tmp_498 + tmp_4*tmp_497 + tmp_496*tmp_9;
      real_t tmp_502 = tmp_60*(tmp_490 + tmp_88);
      real_t tmp_503 = tmp_60*(tmp_492 + tmp_90);
      real_t tmp_504 = tmp_60*(tmp_494 + tmp_92);
      real_t tmp_505 = tmp_502*tmp_75 + tmp_503*tmp_85 + tmp_504*tmp_65;
      real_t tmp_506 = tmp_502*tmp_73 + tmp_503*tmp_83 + tmp_504*tmp_63;
      real_t tmp_507 = tmp_50*tmp_504 + tmp_502*tmp_71 + tmp_503*tmp_80;
      real_t tmp_508 = -tmp_505 - tmp_506 - tmp_507 + 1;
      real_t tmp_509 = tmp_501*tmp_99;
      real_t tmp_510 = 0.042507265838595799*tmp_110;
      real_t tmp_511 = 0.1711304259088916*tmp_16 + 0.041227165399737475*tmp_17;
      real_t tmp_512 = tmp_14*(tmp_19 + tmp_511);
      real_t tmp_513 = 0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24;
      real_t tmp_514 = tmp_14*(tmp_26 + tmp_513);
      real_t tmp_515 = 0.1711304259088916*tmp_30 + 0.041227165399737475*tmp_31;
      real_t tmp_516 = tmp_14*(tmp_33 + tmp_515);
      real_t tmp_517 = tmp_21*tmp_514 + tmp_28*tmp_516 + tmp_5*tmp_512 - 1.0/4.0;
      real_t tmp_518 = tmp_36*tmp_512 + tmp_37*tmp_514 + tmp_38*tmp_516 - 1.0/4.0;
      real_t tmp_519 = tmp_40*tmp_512 + tmp_41*tmp_514 + tmp_42*tmp_516 - 1.0/4.0;
      real_t tmp_520 = tmp_0*tmp_517 + tmp_1*tmp_518 + tmp_3*tmp_519;
      real_t tmp_521 = tmp_10*tmp_518 + tmp_517*tmp_8 + tmp_519*tmp_6;
      real_t tmp_522 = tmp_2*tmp_519 + tmp_4*tmp_518 + tmp_517*tmp_9;
      real_t tmp_523 = tmp_60*(tmp_511 + tmp_88);
      real_t tmp_524 = tmp_60*(tmp_513 + tmp_90);
      real_t tmp_525 = tmp_60*(tmp_515 + tmp_92);
      real_t tmp_526 = tmp_523*tmp_75 + tmp_524*tmp_85 + tmp_525*tmp_65;
      real_t tmp_527 = tmp_523*tmp_73 + tmp_524*tmp_83 + tmp_525*tmp_63;
      real_t tmp_528 = tmp_50*tmp_525 + tmp_523*tmp_71 + tmp_524*tmp_80;
      real_t tmp_529 = -tmp_526 - tmp_527 - tmp_528 + 1;
      real_t tmp_530 = tmp_522*tmp_99;
      real_t tmp_531 = 0.019202922745021479*tmp_110;
      real_t tmp_532 = p_affine_13_1*tmp_76;
      real_t tmp_533 = p_affine_13_1*tmp_66;
      real_t tmp_534 = 1.0*p_affine_13_0*tmp_66 + 1.0*p_affine_13_1*tmp_86 + 1.0*p_affine_13_2*tmp_76;
      real_t tmp_535 = p_affine_13_1*tmp_74;
      real_t tmp_536 = p_affine_13_1*tmp_64;
      real_t tmp_537 = 1.0*p_affine_13_0*tmp_64 + 1.0*p_affine_13_1*tmp_84 + 1.0*p_affine_13_2*tmp_74;
      real_t tmp_538 = p_affine_13_1*tmp_72;
      real_t tmp_539 = p_affine_13_1*tmp_62;
      real_t tmp_540 = 1.0*p_affine_13_0*tmp_62 + 1.0*p_affine_13_1*tmp_82 + 1.0*p_affine_13_2*tmp_72;
      real_t a_0_0 = tmp_111*(-tmp_100*tmp_97 + tmp_109*tmp_97 - tmp_44*tmp_69 - tmp_70*tmp_78 - tmp_79*tmp_87) + tmp_132*(tmp_109*tmp_130 - tmp_121*tmp_69 - tmp_122*tmp_78 - tmp_123*tmp_87 - tmp_130*tmp_131) + tmp_153*(tmp_109*tmp_151 - tmp_142*tmp_69 - tmp_143*tmp_78 - tmp_144*tmp_87 - tmp_151*tmp_152) + tmp_174*(tmp_109*tmp_172 - tmp_163*tmp_69 - tmp_164*tmp_78 - tmp_165*tmp_87 - tmp_172*tmp_173) + tmp_195*(tmp_109*tmp_193 - tmp_184*tmp_69 - tmp_185*tmp_78 - tmp_186*tmp_87 - tmp_193*tmp_194) + tmp_216*(tmp_109*tmp_214 - tmp_205*tmp_69 - tmp_206*tmp_78 - tmp_207*tmp_87 - tmp_214*tmp_215) + tmp_237*(tmp_109*tmp_235 - tmp_226*tmp_69 - tmp_227*tmp_78 - tmp_228*tmp_87 - tmp_235*tmp_236) + tmp_258*(tmp_109*tmp_256 - tmp_247*tmp_69 - tmp_248*tmp_78 - tmp_249*tmp_87 - tmp_256*tmp_257) + tmp_279*(tmp_109*tmp_277 - tmp_268*tmp_69 - tmp_269*tmp_78 - tmp_270*tmp_87 - tmp_277*tmp_278) + tmp_300*(tmp_109*tmp_298 - tmp_289*tmp_69 - tmp_290*tmp_78 - tmp_291*tmp_87 - tmp_298*tmp_299) + tmp_321*(tmp_109*tmp_319 - tmp_310*tmp_69 - tmp_311*tmp_78 - tmp_312*tmp_87 - tmp_319*tmp_320) + tmp_342*(tmp_109*tmp_340 - tmp_331*tmp_69 - tmp_332*tmp_78 - tmp_333*tmp_87 - tmp_340*tmp_341) + tmp_363*(tmp_109*tmp_361 - tmp_352*tmp_69 - tmp_353*tmp_78 - tmp_354*tmp_87 - tmp_361*tmp_362) + tmp_384*(tmp_109*tmp_382 - tmp_373*tmp_69 - tmp_374*tmp_78 - tmp_375*tmp_87 - tmp_382*tmp_383) + tmp_405*(tmp_109*tmp_403 - tmp_394*tmp_69 - tmp_395*tmp_78 - tmp_396*tmp_87 - tmp_403*tmp_404) + tmp_426*(tmp_109*tmp_424 - tmp_415*tmp_69 - tmp_416*tmp_78 - tmp_417*tmp_87 - tmp_424*tmp_425) + tmp_447*(tmp_109*tmp_445 - tmp_436*tmp_69 - tmp_437*tmp_78 - tmp_438*tmp_87 - tmp_445*tmp_446) + tmp_468*(tmp_109*tmp_466 - tmp_457*tmp_69 - tmp_458*tmp_78 - tmp_459*tmp_87 - tmp_466*tmp_467) + tmp_489*(tmp_109*tmp_487 - tmp_478*tmp_69 - tmp_479*tmp_78 - tmp_480*tmp_87 - tmp_487*tmp_488) + tmp_510*(tmp_109*tmp_508 - tmp_499*tmp_69 - tmp_500*tmp_78 - tmp_501*tmp_87 - tmp_508*tmp_509) + tmp_531*(tmp_109*tmp_529 - tmp_520*tmp_69 - tmp_521*tmp_78 - tmp_522*tmp_87 - tmp_529*tmp_530);
      real_t a_0_1 = tmp_111*(-tmp_100*tmp_94 + tmp_109*tmp_94 - tmp_44*tmp_533 - tmp_532*tmp_70 - tmp_534*tmp_79) + tmp_132*(tmp_109*tmp_127 - tmp_121*tmp_533 - tmp_122*tmp_532 - tmp_123*tmp_534 - tmp_127*tmp_131) + tmp_153*(tmp_109*tmp_148 - tmp_142*tmp_533 - tmp_143*tmp_532 - tmp_144*tmp_534 - tmp_148*tmp_152) + tmp_174*(tmp_109*tmp_169 - tmp_163*tmp_533 - tmp_164*tmp_532 - tmp_165*tmp_534 - tmp_169*tmp_173) + tmp_195*(tmp_109*tmp_190 - tmp_184*tmp_533 - tmp_185*tmp_532 - tmp_186*tmp_534 - tmp_190*tmp_194) + tmp_216*(tmp_109*tmp_211 - tmp_205*tmp_533 - tmp_206*tmp_532 - tmp_207*tmp_534 - tmp_211*tmp_215) + tmp_237*(tmp_109*tmp_232 - tmp_226*tmp_533 - tmp_227*tmp_532 - tmp_228*tmp_534 - tmp_232*tmp_236) + tmp_258*(tmp_109*tmp_253 - tmp_247*tmp_533 - tmp_248*tmp_532 - tmp_249*tmp_534 - tmp_253*tmp_257) + tmp_279*(tmp_109*tmp_274 - tmp_268*tmp_533 - tmp_269*tmp_532 - tmp_270*tmp_534 - tmp_274*tmp_278) + tmp_300*(tmp_109*tmp_295 - tmp_289*tmp_533 - tmp_290*tmp_532 - tmp_291*tmp_534 - tmp_295*tmp_299) + tmp_321*(tmp_109*tmp_316 - tmp_310*tmp_533 - tmp_311*tmp_532 - tmp_312*tmp_534 - tmp_316*tmp_320) + tmp_342*(tmp_109*tmp_337 - tmp_331*tmp_533 - tmp_332*tmp_532 - tmp_333*tmp_534 - tmp_337*tmp_341) + tmp_363*(tmp_109*tmp_358 - tmp_352*tmp_533 - tmp_353*tmp_532 - tmp_354*tmp_534 - tmp_358*tmp_362) + tmp_384*(tmp_109*tmp_379 - tmp_373*tmp_533 - tmp_374*tmp_532 - tmp_375*tmp_534 - tmp_379*tmp_383) + tmp_405*(tmp_109*tmp_400 - tmp_394*tmp_533 - tmp_395*tmp_532 - tmp_396*tmp_534 - tmp_400*tmp_404) + tmp_426*(tmp_109*tmp_421 - tmp_415*tmp_533 - tmp_416*tmp_532 - tmp_417*tmp_534 - tmp_421*tmp_425) + tmp_447*(tmp_109*tmp_442 - tmp_436*tmp_533 - tmp_437*tmp_532 - tmp_438*tmp_534 - tmp_442*tmp_446) + tmp_468*(tmp_109*tmp_463 - tmp_457*tmp_533 - tmp_458*tmp_532 - tmp_459*tmp_534 - tmp_463*tmp_467) + tmp_489*(tmp_109*tmp_484 - tmp_478*tmp_533 - tmp_479*tmp_532 - tmp_480*tmp_534 - tmp_484*tmp_488) + tmp_510*(tmp_109*tmp_505 - tmp_499*tmp_533 - tmp_500*tmp_532 - tmp_501*tmp_534 - tmp_505*tmp_509) + tmp_531*(tmp_109*tmp_526 - tmp_520*tmp_533 - tmp_521*tmp_532 - tmp_522*tmp_534 - tmp_526*tmp_530);
      real_t a_0_2 = tmp_111*(-tmp_100*tmp_95 + tmp_109*tmp_95 - tmp_44*tmp_536 - tmp_535*tmp_70 - tmp_537*tmp_79) + tmp_132*(tmp_109*tmp_128 - tmp_121*tmp_536 - tmp_122*tmp_535 - tmp_123*tmp_537 - tmp_128*tmp_131) + tmp_153*(tmp_109*tmp_149 - tmp_142*tmp_536 - tmp_143*tmp_535 - tmp_144*tmp_537 - tmp_149*tmp_152) + tmp_174*(tmp_109*tmp_170 - tmp_163*tmp_536 - tmp_164*tmp_535 - tmp_165*tmp_537 - tmp_170*tmp_173) + tmp_195*(tmp_109*tmp_191 - tmp_184*tmp_536 - tmp_185*tmp_535 - tmp_186*tmp_537 - tmp_191*tmp_194) + tmp_216*(tmp_109*tmp_212 - tmp_205*tmp_536 - tmp_206*tmp_535 - tmp_207*tmp_537 - tmp_212*tmp_215) + tmp_237*(tmp_109*tmp_233 - tmp_226*tmp_536 - tmp_227*tmp_535 - tmp_228*tmp_537 - tmp_233*tmp_236) + tmp_258*(tmp_109*tmp_254 - tmp_247*tmp_536 - tmp_248*tmp_535 - tmp_249*tmp_537 - tmp_254*tmp_257) + tmp_279*(tmp_109*tmp_275 - tmp_268*tmp_536 - tmp_269*tmp_535 - tmp_270*tmp_537 - tmp_275*tmp_278) + tmp_300*(tmp_109*tmp_296 - tmp_289*tmp_536 - tmp_290*tmp_535 - tmp_291*tmp_537 - tmp_296*tmp_299) + tmp_321*(tmp_109*tmp_317 - tmp_310*tmp_536 - tmp_311*tmp_535 - tmp_312*tmp_537 - tmp_317*tmp_320) + tmp_342*(tmp_109*tmp_338 - tmp_331*tmp_536 - tmp_332*tmp_535 - tmp_333*tmp_537 - tmp_338*tmp_341) + tmp_363*(tmp_109*tmp_359 - tmp_352*tmp_536 - tmp_353*tmp_535 - tmp_354*tmp_537 - tmp_359*tmp_362) + tmp_384*(tmp_109*tmp_380 - tmp_373*tmp_536 - tmp_374*tmp_535 - tmp_375*tmp_537 - tmp_380*tmp_383) + tmp_405*(tmp_109*tmp_401 - tmp_394*tmp_536 - tmp_395*tmp_535 - tmp_396*tmp_537 - tmp_401*tmp_404) + tmp_426*(tmp_109*tmp_422 - tmp_415*tmp_536 - tmp_416*tmp_535 - tmp_417*tmp_537 - tmp_422*tmp_425) + tmp_447*(tmp_109*tmp_443 - tmp_436*tmp_536 - tmp_437*tmp_535 - tmp_438*tmp_537 - tmp_443*tmp_446) + tmp_468*(tmp_109*tmp_464 - tmp_457*tmp_536 - tmp_458*tmp_535 - tmp_459*tmp_537 - tmp_464*tmp_467) + tmp_489*(tmp_109*tmp_485 - tmp_478*tmp_536 - tmp_479*tmp_535 - tmp_480*tmp_537 - tmp_485*tmp_488) + tmp_510*(tmp_109*tmp_506 - tmp_499*tmp_536 - tmp_500*tmp_535 - tmp_501*tmp_537 - tmp_506*tmp_509) + tmp_531*(tmp_109*tmp_527 - tmp_520*tmp_536 - tmp_521*tmp_535 - tmp_522*tmp_537 - tmp_527*tmp_530);
      real_t a_0_3 = tmp_111*(-tmp_100*tmp_96 + tmp_109*tmp_96 - tmp_44*tmp_539 - tmp_538*tmp_70 - tmp_540*tmp_79) + tmp_132*(tmp_109*tmp_129 - tmp_121*tmp_539 - tmp_122*tmp_538 - tmp_123*tmp_540 - tmp_129*tmp_131) + tmp_153*(tmp_109*tmp_150 - tmp_142*tmp_539 - tmp_143*tmp_538 - tmp_144*tmp_540 - tmp_150*tmp_152) + tmp_174*(tmp_109*tmp_171 - tmp_163*tmp_539 - tmp_164*tmp_538 - tmp_165*tmp_540 - tmp_171*tmp_173) + tmp_195*(tmp_109*tmp_192 - tmp_184*tmp_539 - tmp_185*tmp_538 - tmp_186*tmp_540 - tmp_192*tmp_194) + tmp_216*(tmp_109*tmp_213 - tmp_205*tmp_539 - tmp_206*tmp_538 - tmp_207*tmp_540 - tmp_213*tmp_215) + tmp_237*(tmp_109*tmp_234 - tmp_226*tmp_539 - tmp_227*tmp_538 - tmp_228*tmp_540 - tmp_234*tmp_236) + tmp_258*(tmp_109*tmp_255 - tmp_247*tmp_539 - tmp_248*tmp_538 - tmp_249*tmp_540 - tmp_255*tmp_257) + tmp_279*(tmp_109*tmp_276 - tmp_268*tmp_539 - tmp_269*tmp_538 - tmp_270*tmp_540 - tmp_276*tmp_278) + tmp_300*(tmp_109*tmp_297 - tmp_289*tmp_539 - tmp_290*tmp_538 - tmp_291*tmp_540 - tmp_297*tmp_299) + tmp_321*(tmp_109*tmp_318 - tmp_310*tmp_539 - tmp_311*tmp_538 - tmp_312*tmp_540 - tmp_318*tmp_320) + tmp_342*(tmp_109*tmp_339 - tmp_331*tmp_539 - tmp_332*tmp_538 - tmp_333*tmp_540 - tmp_339*tmp_341) + tmp_363*(tmp_109*tmp_360 - tmp_352*tmp_539 - tmp_353*tmp_538 - tmp_354*tmp_540 - tmp_360*tmp_362) + tmp_384*(tmp_109*tmp_381 - tmp_373*tmp_539 - tmp_374*tmp_538 - tmp_375*tmp_540 - tmp_381*tmp_383) + tmp_405*(tmp_109*tmp_402 - tmp_394*tmp_539 - tmp_395*tmp_538 - tmp_396*tmp_540 - tmp_402*tmp_404) + tmp_426*(tmp_109*tmp_423 - tmp_415*tmp_539 - tmp_416*tmp_538 - tmp_417*tmp_540 - tmp_423*tmp_425) + tmp_447*(tmp_109*tmp_444 - tmp_436*tmp_539 - tmp_437*tmp_538 - tmp_438*tmp_540 - tmp_444*tmp_446) + tmp_468*(tmp_109*tmp_465 - tmp_457*tmp_539 - tmp_458*tmp_538 - tmp_459*tmp_540 - tmp_465*tmp_467) + tmp_489*(tmp_109*tmp_486 - tmp_478*tmp_539 - tmp_479*tmp_538 - tmp_480*tmp_540 - tmp_486*tmp_488) + tmp_510*(tmp_109*tmp_507 - tmp_499*tmp_539 - tmp_500*tmp_538 - tmp_501*tmp_540 - tmp_507*tmp_509) + tmp_531*(tmp_109*tmp_528 - tmp_520*tmp_539 - tmp_521*tmp_538 - tmp_522*tmp_540 - tmp_528*tmp_530);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_1*tmp_50;
      real_t tmp_52 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_53 = tmp_40*tmp_46;
      real_t tmp_54 = tmp_35*tmp_46;
      real_t tmp_55 = tmp_46*tmp_5;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_1*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_41*tmp_58;
      real_t tmp_60 = tmp_36*tmp_58;
      real_t tmp_61 = tmp_21*tmp_58;
      real_t tmp_62 = p_affine_13_0*tmp_50 + p_affine_13_1*(-tmp_59 - tmp_60 - tmp_61) + p_affine_13_2*tmp_56;
      real_t tmp_63 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_21*tmp_46;
      real_t tmp_68 = tmp_36*tmp_46;
      real_t tmp_69 = tmp_41*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_0*tmp_67 + tmp_1*tmp_68 + tmp_2*tmp_47 + tmp_3*tmp_69 + tmp_4*tmp_48 + tmp_49*tmp_9) + p_affine_13_1*(tmp_2*tmp_59 + tmp_4*tmp_60 + tmp_61*tmp_9) + p_affine_13_2*(tmp_10*tmp_68 + tmp_2*tmp_53 + tmp_4*tmp_54 + tmp_55*tmp_9 + tmp_6*tmp_69 + tmp_67*tmp_8);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_1*tmp_79 + tmp_3*tmp_81;
      real_t tmp_83 = tmp_10*tmp_79 + tmp_6*tmp_81 + tmp_77*tmp_8;
      real_t tmp_84 = tmp_2*tmp_81 + tmp_4*tmp_79 + tmp_77*tmp_9;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_1*tmp_93 + tmp_3*tmp_95;
      real_t tmp_97 = tmp_10*tmp_93 + tmp_6*tmp_95 + tmp_8*tmp_91;
      real_t tmp_98 = tmp_2*tmp_95 + tmp_4*tmp_93 + tmp_9*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_1*tmp_107 + tmp_109*tmp_3;
      real_t tmp_111 = tmp_10*tmp_107 + tmp_105*tmp_8 + tmp_109*tmp_6;
      real_t tmp_112 = tmp_105*tmp_9 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_1*tmp_121 + tmp_123*tmp_3;
      real_t tmp_125 = tmp_10*tmp_121 + tmp_119*tmp_8 + tmp_123*tmp_6;
      real_t tmp_126 = tmp_119*tmp_9 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_1*tmp_135 + tmp_137*tmp_3;
      real_t tmp_139 = tmp_10*tmp_135 + tmp_133*tmp_8 + tmp_137*tmp_6;
      real_t tmp_140 = tmp_133*tmp_9 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_1*tmp_149 + tmp_151*tmp_3;
      real_t tmp_153 = tmp_10*tmp_149 + tmp_147*tmp_8 + tmp_151*tmp_6;
      real_t tmp_154 = tmp_147*tmp_9 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_1*tmp_163 + tmp_165*tmp_3;
      real_t tmp_167 = tmp_10*tmp_163 + tmp_161*tmp_8 + tmp_165*tmp_6;
      real_t tmp_168 = tmp_161*tmp_9 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_1*tmp_177 + tmp_179*tmp_3;
      real_t tmp_181 = tmp_10*tmp_177 + tmp_175*tmp_8 + tmp_179*tmp_6;
      real_t tmp_182 = tmp_175*tmp_9 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_1*tmp_191 + tmp_193*tmp_3;
      real_t tmp_195 = tmp_10*tmp_191 + tmp_189*tmp_8 + tmp_193*tmp_6;
      real_t tmp_196 = tmp_189*tmp_9 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_1*tmp_205 + tmp_207*tmp_3;
      real_t tmp_209 = tmp_10*tmp_205 + tmp_203*tmp_8 + tmp_207*tmp_6;
      real_t tmp_210 = tmp_2*tmp_207 + tmp_203*tmp_9 + tmp_205*tmp_4;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_1*tmp_219 + tmp_221*tmp_3;
      real_t tmp_223 = tmp_10*tmp_219 + tmp_217*tmp_8 + tmp_221*tmp_6;
      real_t tmp_224 = tmp_2*tmp_221 + tmp_217*tmp_9 + tmp_219*tmp_4;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_1*tmp_233 + tmp_235*tmp_3;
      real_t tmp_237 = tmp_10*tmp_233 + tmp_231*tmp_8 + tmp_235*tmp_6;
      real_t tmp_238 = tmp_2*tmp_235 + tmp_231*tmp_9 + tmp_233*tmp_4;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_1*tmp_247 + tmp_249*tmp_3;
      real_t tmp_251 = tmp_10*tmp_247 + tmp_245*tmp_8 + tmp_249*tmp_6;
      real_t tmp_252 = tmp_2*tmp_249 + tmp_245*tmp_9 + tmp_247*tmp_4;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_1*tmp_261 + tmp_263*tmp_3;
      real_t tmp_265 = tmp_10*tmp_261 + tmp_259*tmp_8 + tmp_263*tmp_6;
      real_t tmp_266 = tmp_2*tmp_263 + tmp_259*tmp_9 + tmp_261*tmp_4;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_1*tmp_275 + tmp_277*tmp_3;
      real_t tmp_279 = tmp_10*tmp_275 + tmp_273*tmp_8 + tmp_277*tmp_6;
      real_t tmp_280 = tmp_2*tmp_277 + tmp_273*tmp_9 + tmp_275*tmp_4;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_1*tmp_289 + tmp_291*tmp_3;
      real_t tmp_293 = tmp_10*tmp_289 + tmp_287*tmp_8 + tmp_291*tmp_6;
      real_t tmp_294 = tmp_2*tmp_291 + tmp_287*tmp_9 + tmp_289*tmp_4;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_1*tmp_303 + tmp_3*tmp_305;
      real_t tmp_307 = tmp_10*tmp_303 + tmp_301*tmp_8 + tmp_305*tmp_6;
      real_t tmp_308 = tmp_2*tmp_305 + tmp_301*tmp_9 + tmp_303*tmp_4;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_1*tmp_317 + tmp_3*tmp_319;
      real_t tmp_321 = tmp_10*tmp_317 + tmp_315*tmp_8 + tmp_319*tmp_6;
      real_t tmp_322 = tmp_2*tmp_319 + tmp_315*tmp_9 + tmp_317*tmp_4;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_1*tmp_331 + tmp_3*tmp_333;
      real_t tmp_335 = tmp_10*tmp_331 + tmp_329*tmp_8 + tmp_333*tmp_6;
      real_t tmp_336 = tmp_2*tmp_333 + tmp_329*tmp_9 + tmp_331*tmp_4;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_1*tmp_345 + tmp_3*tmp_347;
      real_t tmp_349 = tmp_10*tmp_345 + tmp_343*tmp_8 + tmp_347*tmp_6;
      real_t tmp_350 = tmp_2*tmp_347 + tmp_343*tmp_9 + tmp_345*tmp_4;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_1*tmp_55;
      real_t tmp_354 = p_affine_13_1*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_49 + p_affine_13_1*tmp_61 + p_affine_13_2*tmp_55;
      real_t tmp_356 = p_affine_13_1*tmp_54;
      real_t tmp_357 = p_affine_13_1*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_60 + p_affine_13_2*tmp_54;
      real_t tmp_359 = p_affine_13_1*tmp_53;
      real_t tmp_360 = p_affine_13_1*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_59 + p_affine_13_2*tmp_53;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_0_1 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_0_2 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_0_3 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1E_1 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1E_1()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_2 - tmp_4*tmp_6);
      real_t tmp_8 = 1.0*tmp_7;
      real_t tmp_9 = tmp_0*tmp_8;
      real_t tmp_10 = tmp_3*tmp_8;
      real_t tmp_11 = 2.0*tmp_7;
      real_t tmp_12 = tmp_11*tmp_2 + tmp_11*tmp_3*tmp_6;
      real_t tmp_13 = 0.5*tmp_7;
      real_t tmp_14 = tmp_0*tmp_7;
      real_t tmp_15 = tmp_1*tmp_7;
      real_t tmp_16 = tmp_14*tmp_3 + tmp_14*tmp_4 + tmp_15*tmp_5 + tmp_15*tmp_6;
      real_t tmp_17 = std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t tmp_18 = tmp_17*(tmp_12*(-tmp_10 - tmp_9) + 2*tmp_16*(-tmp_1*tmp_13 - tmp_13*tmp_5));
      real_t tmp_19 = tmp_16*tmp_8;
      real_t tmp_20 = tmp_17*(tmp_1*tmp_19 + tmp_10*tmp_12);
      real_t tmp_21 = tmp_17*(tmp_12*tmp_9 + tmp_19*tmp_5);
      real_t a_0_0 = 0.5*tmp_18;
      real_t a_1_0 = 0.5*tmp_20;
      real_t a_2_0 = 0.5*tmp_21;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_1*tmp_10 + tmp_13*tmp_2;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_10 + tmp_13*tmp_5;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = p_affine_10_1*(tmp_0*tmp_15 + tmp_17*tmp_4);
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_2;
      real_t tmp_21 = tmp_19*tmp_5;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = 1.0*tmp_22;
      real_t tmp_24 = tmp_15*tmp_6 + tmp_17*tmp_2;
      real_t tmp_25 = 1.0*tmp_7;
      real_t tmp_26 = tmp_0*tmp_25;
      real_t tmp_27 = tmp_1*tmp_25;
      real_t tmp_28 = 1.0*p_affine_10_0*tmp_22 + 1.0*p_affine_10_1*(-tmp_26 - tmp_27);
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_0*tmp_19;
      real_t tmp_33 = 1.0*p_affine_10_0*(tmp_1*tmp_32 + tmp_2*tmp_21 + tmp_20*tmp_6 + tmp_32*tmp_4) + 1.0*p_affine_10_1*(tmp_25*tmp_3 + tmp_27*tmp_6);
      real_t tmp_34 = 0.11846344252809471*tmp_29;
      real_t tmp_35 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_37 = tmp_1*tmp_35 + tmp_2*tmp_36;
      real_t tmp_38 = tmp_37 - 1.0/3.0;
      real_t tmp_39 = tmp_0*tmp_35 + tmp_36*tmp_5;
      real_t tmp_40 = tmp_39 - 1.0/3.0;
      real_t tmp_41 = tmp_0*tmp_38 + tmp_4*tmp_40;
      real_t tmp_42 = p_affine_10_1*tmp_23;
      real_t tmp_43 = tmp_2*tmp_40 + tmp_38*tmp_6;
      real_t tmp_44 = -tmp_37 - tmp_39 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_29;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_1*tmp_46 + tmp_2*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_46 + tmp_47*tmp_5;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_0*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_2*tmp_51 + tmp_49*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_29;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_1*tmp_56 + tmp_2*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_56 + tmp_5*tmp_57;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_0*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_2*tmp_61 + tmp_59*tmp_6;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_29;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_1*tmp_66 + tmp_2*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_66 + tmp_5*tmp_67;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_0*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_2*tmp_71 + tmp_6*tmp_69;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_29;
      real_t tmp_76 = 1.0*p_affine_10_0*tmp_20 + 1.0*p_affine_10_1*tmp_27;
      real_t tmp_77 = p_affine_10_1*tmp_20;
      real_t tmp_78 = 1.0*p_affine_10_0*tmp_21 + 1.0*p_affine_10_1*tmp_26;
      real_t tmp_79 = p_affine_10_1*tmp_21;
      real_t a_0_0 = tmp_34*(-tmp_18*tmp_23 - tmp_24*tmp_28 + 14*tmp_24*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_28*tmp_43 + 14*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44 - tmp_41*tmp_42) + tmp_55*(-tmp_28*tmp_53 + 14*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54 - tmp_42*tmp_52) + tmp_65*(-tmp_28*tmp_63 + 14*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64 - tmp_42*tmp_62) + tmp_75*(-tmp_28*tmp_73 + 14*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74 - tmp_42*tmp_72);
      real_t a_1_0 = tmp_34*(14*tmp_14*tmp_24*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_20 - tmp_24*tmp_76) + tmp_45*(14*tmp_30*tmp_37*tmp_43 - tmp_33*tmp_37 - tmp_41*tmp_77 - tmp_43*tmp_76) + tmp_55*(14*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_77 - tmp_53*tmp_76) + tmp_65*(14*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_77 - tmp_63*tmp_76) + tmp_75*(14*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_77 - tmp_73*tmp_76);
      real_t a_2_0 = tmp_34*(14*tmp_16*tmp_24*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_21 - tmp_24*tmp_78) + tmp_45*(14*tmp_30*tmp_39*tmp_43 - tmp_33*tmp_39 - tmp_41*tmp_79 - tmp_43*tmp_78) + tmp_55*(14*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_79 - tmp_53*tmp_78) + tmp_65*(14*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_79 - tmp_63*tmp_78) + tmp_75*(14*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_79 - tmp_73*tmp_78);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_1 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_2 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_3_1;
      real_t tmp_9 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_10 = p_affine_6_1 + 0.046910077030668018*tmp_9;
      real_t tmp_11 = tmp_7*(tmp_10 + tmp_8);
      real_t tmp_12 = -p_affine_3_0;
      real_t tmp_13 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_14 = p_affine_6_0 + 0.046910077030668018*tmp_13;
      real_t tmp_15 = tmp_7*(tmp_12 + tmp_14);
      real_t tmp_16 = tmp_1*tmp_11 + tmp_15*tmp_2 - 1.0/3.0;
      real_t tmp_17 = tmp_0*tmp_11 + tmp_15*tmp_5 - 1.0/3.0;
      real_t tmp_18 = tmp_0*tmp_16 + tmp_17*tmp_4;
      real_t tmp_19 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_20 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_21 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_22 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_23 = 1.0 / (tmp_19*tmp_20 - tmp_21*tmp_22);
      real_t tmp_24 = 0.5*tmp_23;
      real_t tmp_25 = tmp_19*tmp_24;
      real_t tmp_26 = tmp_22*tmp_24;
      real_t tmp_27 = -tmp_25 - tmp_26;
      real_t tmp_28 = p_affine_10_1*tmp_27;
      real_t tmp_29 = 1.0*tmp_23;
      real_t tmp_30 = tmp_20*tmp_29;
      real_t tmp_31 = tmp_21*tmp_29;
      real_t tmp_32 = p_affine_10_0*tmp_27 + p_affine_10_1*(-tmp_30 - tmp_31);
      real_t tmp_33 = tmp_16*tmp_6 + tmp_17*tmp_2;
      real_t tmp_34 = -p_affine_0_1;
      real_t tmp_35 = tmp_23*(tmp_10 + tmp_34);
      real_t tmp_36 = -p_affine_0_0;
      real_t tmp_37 = tmp_23*(tmp_14 + tmp_36);
      real_t tmp_38 = tmp_19*tmp_37 + tmp_21*tmp_35;
      real_t tmp_39 = tmp_20*tmp_35 + tmp_22*tmp_37;
      real_t tmp_40 = -tmp_38 - tmp_39 + 1;
      real_t tmp_41 = std::abs(std::pow((tmp_13*tmp_13) + (tmp_9*tmp_9), 1.0/2.0));
      real_t tmp_42 = 14/tmp_41;
      real_t tmp_43 = tmp_33*tmp_42;
      real_t tmp_44 = 1.0*tmp_7;
      real_t tmp_45 = 0.5*tmp_7;
      real_t tmp_46 = tmp_0*tmp_45;
      real_t tmp_47 = tmp_2*tmp_45;
      real_t tmp_48 = 1.0*p_affine_10_0*(tmp_1*tmp_46 + tmp_4*tmp_46 + tmp_47*tmp_5 + tmp_47*tmp_6) + 1.0*p_affine_10_1*(tmp_1*tmp_44*tmp_6 + tmp_3*tmp_44);
      real_t tmp_49 = 0.11846344252809471*tmp_41;
      real_t tmp_50 = p_affine_6_1 + 0.23076534494715845*tmp_9;
      real_t tmp_51 = tmp_7*(tmp_50 + tmp_8);
      real_t tmp_52 = p_affine_6_0 + 0.23076534494715845*tmp_13;
      real_t tmp_53 = tmp_7*(tmp_12 + tmp_52);
      real_t tmp_54 = tmp_1*tmp_51 + tmp_2*tmp_53 - 1.0/3.0;
      real_t tmp_55 = tmp_0*tmp_51 + tmp_5*tmp_53 - 1.0/3.0;
      real_t tmp_56 = tmp_0*tmp_54 + tmp_4*tmp_55;
      real_t tmp_57 = tmp_2*tmp_55 + tmp_54*tmp_6;
      real_t tmp_58 = tmp_23*(tmp_34 + tmp_50);
      real_t tmp_59 = tmp_23*(tmp_36 + tmp_52);
      real_t tmp_60 = tmp_19*tmp_59 + tmp_21*tmp_58;
      real_t tmp_61 = tmp_20*tmp_58 + tmp_22*tmp_59;
      real_t tmp_62 = -tmp_60 - tmp_61 + 1;
      real_t tmp_63 = tmp_42*tmp_57;
      real_t tmp_64 = 0.2393143352496831*tmp_41;
      real_t tmp_65 = p_affine_6_1 + 0.5*tmp_9;
      real_t tmp_66 = tmp_7*(tmp_65 + tmp_8);
      real_t tmp_67 = p_affine_6_0 + 0.5*tmp_13;
      real_t tmp_68 = tmp_7*(tmp_12 + tmp_67);
      real_t tmp_69 = tmp_1*tmp_66 + tmp_2*tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_66 + tmp_5*tmp_68 - 1.0/3.0;
      real_t tmp_71 = tmp_0*tmp_69 + tmp_4*tmp_70;
      real_t tmp_72 = tmp_2*tmp_70 + tmp_6*tmp_69;
      real_t tmp_73 = tmp_23*(tmp_34 + tmp_65);
      real_t tmp_74 = tmp_23*(tmp_36 + tmp_67);
      real_t tmp_75 = tmp_19*tmp_74 + tmp_21*tmp_73;
      real_t tmp_76 = tmp_20*tmp_73 + tmp_22*tmp_74;
      real_t tmp_77 = -tmp_75 - tmp_76 + 1;
      real_t tmp_78 = tmp_42*tmp_72;
      real_t tmp_79 = 0.2844444444444445*tmp_41;
      real_t tmp_80 = p_affine_6_1 + 0.7692346550528415*tmp_9;
      real_t tmp_81 = tmp_7*(tmp_8 + tmp_80);
      real_t tmp_82 = p_affine_6_0 + 0.7692346550528415*tmp_13;
      real_t tmp_83 = tmp_7*(tmp_12 + tmp_82);
      real_t tmp_84 = tmp_1*tmp_81 + tmp_2*tmp_83 - 1.0/3.0;
      real_t tmp_85 = tmp_0*tmp_81 + tmp_5*tmp_83 - 1.0/3.0;
      real_t tmp_86 = tmp_0*tmp_84 + tmp_4*tmp_85;
      real_t tmp_87 = tmp_2*tmp_85 + tmp_6*tmp_84;
      real_t tmp_88 = tmp_23*(tmp_34 + tmp_80);
      real_t tmp_89 = tmp_23*(tmp_36 + tmp_82);
      real_t tmp_90 = tmp_19*tmp_89 + tmp_21*tmp_88;
      real_t tmp_91 = tmp_20*tmp_88 + tmp_22*tmp_89;
      real_t tmp_92 = -tmp_90 - tmp_91 + 1;
      real_t tmp_93 = tmp_42*tmp_87;
      real_t tmp_94 = 0.2393143352496831*tmp_41;
      real_t tmp_95 = p_affine_6_1 + 0.95308992296933193*tmp_9;
      real_t tmp_96 = tmp_7*(tmp_8 + tmp_95);
      real_t tmp_97 = p_affine_6_0 + 0.95308992296933193*tmp_13;
      real_t tmp_98 = tmp_7*(tmp_12 + tmp_97);
      real_t tmp_99 = tmp_1*tmp_96 + tmp_2*tmp_98 - 1.0/3.0;
      real_t tmp_100 = tmp_0*tmp_96 + tmp_5*tmp_98 - 1.0/3.0;
      real_t tmp_101 = tmp_0*tmp_99 + tmp_100*tmp_4;
      real_t tmp_102 = tmp_100*tmp_2 + tmp_6*tmp_99;
      real_t tmp_103 = tmp_23*(tmp_34 + tmp_95);
      real_t tmp_104 = tmp_23*(tmp_36 + tmp_97);
      real_t tmp_105 = tmp_103*tmp_21 + tmp_104*tmp_19;
      real_t tmp_106 = tmp_103*tmp_20 + tmp_104*tmp_22;
      real_t tmp_107 = -tmp_105 - tmp_106 + 1;
      real_t tmp_108 = tmp_102*tmp_42;
      real_t tmp_109 = 0.11846344252809471*tmp_41;
      real_t tmp_110 = p_affine_10_1*tmp_25;
      real_t tmp_111 = p_affine_10_0*tmp_25 + p_affine_10_1*tmp_31;
      real_t tmp_112 = p_affine_10_1*tmp_26;
      real_t tmp_113 = p_affine_10_0*tmp_26 + p_affine_10_1*tmp_30;
      real_t a_0_0 = tmp_109*(tmp_101*tmp_28 + tmp_102*tmp_32 - tmp_107*tmp_108 - tmp_107*tmp_48) + tmp_49*(tmp_18*tmp_28 + tmp_32*tmp_33 - tmp_40*tmp_43 - tmp_40*tmp_48) + tmp_64*(tmp_28*tmp_56 + tmp_32*tmp_57 - tmp_48*tmp_62 - tmp_62*tmp_63) + tmp_79*(tmp_28*tmp_71 + tmp_32*tmp_72 - tmp_48*tmp_77 - tmp_77*tmp_78) + tmp_94*(tmp_28*tmp_86 + tmp_32*tmp_87 - tmp_48*tmp_92 - tmp_92*tmp_93);
      real_t a_1_0 = tmp_109*(tmp_101*tmp_110 + tmp_102*tmp_111 - tmp_105*tmp_108 - tmp_105*tmp_48) + tmp_49*(tmp_110*tmp_18 + tmp_111*tmp_33 - tmp_38*tmp_43 - tmp_38*tmp_48) + tmp_64*(tmp_110*tmp_56 + tmp_111*tmp_57 - tmp_48*tmp_60 - tmp_60*tmp_63) + tmp_79*(tmp_110*tmp_71 + tmp_111*tmp_72 - tmp_48*tmp_75 - tmp_75*tmp_78) + tmp_94*(tmp_110*tmp_86 + tmp_111*tmp_87 - tmp_48*tmp_90 - tmp_90*tmp_93);
      real_t a_2_0 = tmp_109*(tmp_101*tmp_112 + tmp_102*tmp_113 - tmp_106*tmp_108 - tmp_106*tmp_48) + tmp_49*(tmp_112*tmp_18 + tmp_113*tmp_33 - tmp_39*tmp_43 - tmp_39*tmp_48) + tmp_64*(tmp_112*tmp_56 + tmp_113*tmp_57 - tmp_48*tmp_61 - tmp_61*tmp_63) + tmp_79*(tmp_112*tmp_71 + tmp_113*tmp_72 - tmp_48*tmp_76 - tmp_76*tmp_78) + tmp_94*(tmp_112*tmp_86 + tmp_113*tmp_87 - tmp_48*tmp_91 - tmp_91*tmp_93);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_3 = tmp_0*tmp_2;
      real_t tmp_4 = -tmp_1;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_3 - tmp_4*tmp_6);
      real_t tmp_8 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_9 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_10 = tmp_7*(0.046910077030668018*tmp_8 + tmp_9);
      real_t tmp_11 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_12 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_13 = tmp_7*(0.046910077030668018*tmp_11 + tmp_12);
      real_t tmp_14 = tmp_1*tmp_10 + tmp_13*tmp_2;
      real_t tmp_15 = tmp_14 - 1.0/3.0;
      real_t tmp_16 = tmp_0*tmp_10 + tmp_13*tmp_5;
      real_t tmp_17 = tmp_16 - 1.0/3.0;
      real_t tmp_18 = tmp_0*tmp_15 + tmp_17*tmp_4;
      real_t tmp_19 = 0.5*tmp_7;
      real_t tmp_20 = tmp_19*tmp_2;
      real_t tmp_21 = tmp_19*tmp_5;
      real_t tmp_22 = -tmp_20 - tmp_21;
      real_t tmp_23 = p_affine_10_1*tmp_22;
      real_t tmp_24 = 1.0*tmp_7;
      real_t tmp_25 = tmp_0*tmp_24;
      real_t tmp_26 = tmp_1*tmp_24;
      real_t tmp_27 = p_affine_10_0*tmp_22 + p_affine_10_1*(-tmp_25 - tmp_26);
      real_t tmp_28 = tmp_15*tmp_6 + tmp_17*tmp_2;
      real_t tmp_29 = std::abs(std::pow((tmp_11*tmp_11) + (tmp_8*tmp_8), 1.0/2.0));
      real_t tmp_30 = 1.0 / (tmp_29);
      real_t tmp_31 = -tmp_14 - tmp_16 + 1;
      real_t tmp_32 = tmp_0*tmp_19;
      real_t tmp_33 = p_affine_10_0*(tmp_1*tmp_32 + tmp_2*tmp_21 + tmp_20*tmp_6 + tmp_32*tmp_4) + p_affine_10_1*(tmp_24*tmp_3 + tmp_26*tmp_6);
      real_t tmp_34 = 2*tmp_29;
      real_t tmp_35 = 0.11846344252809471*tmp_34;
      real_t tmp_36 = tmp_7*(0.23076534494715845*tmp_8 + tmp_9);
      real_t tmp_37 = tmp_7*(0.23076534494715845*tmp_11 + tmp_12);
      real_t tmp_38 = tmp_1*tmp_36 + tmp_2*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/3.0;
      real_t tmp_40 = tmp_0*tmp_36 + tmp_37*tmp_5;
      real_t tmp_41 = tmp_40 - 1.0/3.0;
      real_t tmp_42 = tmp_0*tmp_39 + tmp_4*tmp_41;
      real_t tmp_43 = tmp_2*tmp_41 + tmp_39*tmp_6;
      real_t tmp_44 = -tmp_38 - tmp_40 + 1;
      real_t tmp_45 = 0.2393143352496831*tmp_34;
      real_t tmp_46 = tmp_7*(0.5*tmp_8 + tmp_9);
      real_t tmp_47 = tmp_7*(0.5*tmp_11 + tmp_12);
      real_t tmp_48 = tmp_1*tmp_46 + tmp_2*tmp_47;
      real_t tmp_49 = tmp_48 - 1.0/3.0;
      real_t tmp_50 = tmp_0*tmp_46 + tmp_47*tmp_5;
      real_t tmp_51 = tmp_50 - 1.0/3.0;
      real_t tmp_52 = tmp_0*tmp_49 + tmp_4*tmp_51;
      real_t tmp_53 = tmp_2*tmp_51 + tmp_49*tmp_6;
      real_t tmp_54 = -tmp_48 - tmp_50 + 1;
      real_t tmp_55 = 0.2844444444444445*tmp_34;
      real_t tmp_56 = tmp_7*(0.7692346550528415*tmp_8 + tmp_9);
      real_t tmp_57 = tmp_7*(0.7692346550528415*tmp_11 + tmp_12);
      real_t tmp_58 = tmp_1*tmp_56 + tmp_2*tmp_57;
      real_t tmp_59 = tmp_58 - 1.0/3.0;
      real_t tmp_60 = tmp_0*tmp_56 + tmp_5*tmp_57;
      real_t tmp_61 = tmp_60 - 1.0/3.0;
      real_t tmp_62 = tmp_0*tmp_59 + tmp_4*tmp_61;
      real_t tmp_63 = tmp_2*tmp_61 + tmp_59*tmp_6;
      real_t tmp_64 = -tmp_58 - tmp_60 + 1;
      real_t tmp_65 = 0.2393143352496831*tmp_34;
      real_t tmp_66 = tmp_7*(0.95308992296933193*tmp_8 + tmp_9);
      real_t tmp_67 = tmp_7*(0.95308992296933193*tmp_11 + tmp_12);
      real_t tmp_68 = tmp_1*tmp_66 + tmp_2*tmp_67;
      real_t tmp_69 = tmp_68 - 1.0/3.0;
      real_t tmp_70 = tmp_0*tmp_66 + tmp_5*tmp_67;
      real_t tmp_71 = tmp_70 - 1.0/3.0;
      real_t tmp_72 = tmp_0*tmp_69 + tmp_4*tmp_71;
      real_t tmp_73 = tmp_2*tmp_71 + tmp_6*tmp_69;
      real_t tmp_74 = -tmp_68 - tmp_70 + 1;
      real_t tmp_75 = 0.11846344252809471*tmp_34;
      real_t tmp_76 = p_affine_10_1*tmp_20;
      real_t tmp_77 = p_affine_10_0*tmp_20 + p_affine_10_1*tmp_26;
      real_t tmp_78 = p_affine_10_1*tmp_21;
      real_t tmp_79 = p_affine_10_0*tmp_21 + p_affine_10_1*tmp_25;
      real_t a_0_0 = tmp_35*(-tmp_18*tmp_23 - tmp_27*tmp_28 + 7*tmp_28*tmp_30*tmp_31 - tmp_31*tmp_33) + tmp_45*(-tmp_23*tmp_42 - tmp_27*tmp_43 + 7*tmp_30*tmp_43*tmp_44 - tmp_33*tmp_44) + tmp_55*(-tmp_23*tmp_52 - tmp_27*tmp_53 + 7*tmp_30*tmp_53*tmp_54 - tmp_33*tmp_54) + tmp_65*(-tmp_23*tmp_62 - tmp_27*tmp_63 + 7*tmp_30*tmp_63*tmp_64 - tmp_33*tmp_64) + tmp_75*(-tmp_23*tmp_72 - tmp_27*tmp_73 + 7*tmp_30*tmp_73*tmp_74 - tmp_33*tmp_74);
      real_t a_1_0 = tmp_35*(7*tmp_14*tmp_28*tmp_30 - tmp_14*tmp_33 - tmp_18*tmp_76 - tmp_28*tmp_77) + tmp_45*(7*tmp_30*tmp_38*tmp_43 - tmp_33*tmp_38 - tmp_42*tmp_76 - tmp_43*tmp_77) + tmp_55*(7*tmp_30*tmp_48*tmp_53 - tmp_33*tmp_48 - tmp_52*tmp_76 - tmp_53*tmp_77) + tmp_65*(7*tmp_30*tmp_58*tmp_63 - tmp_33*tmp_58 - tmp_62*tmp_76 - tmp_63*tmp_77) + tmp_75*(7*tmp_30*tmp_68*tmp_73 - tmp_33*tmp_68 - tmp_72*tmp_76 - tmp_73*tmp_77);
      real_t a_2_0 = tmp_35*(7*tmp_16*tmp_28*tmp_30 - tmp_16*tmp_33 - tmp_18*tmp_78 - tmp_28*tmp_79) + tmp_45*(7*tmp_30*tmp_40*tmp_43 - tmp_33*tmp_40 - tmp_42*tmp_78 - tmp_43*tmp_79) + tmp_55*(7*tmp_30*tmp_50*tmp_53 - tmp_33*tmp_50 - tmp_52*tmp_78 - tmp_53*tmp_79) + tmp_65*(7*tmp_30*tmp_60*tmp_63 - tmp_33*tmp_60 - tmp_62*tmp_78 - tmp_63*tmp_79) + tmp_75*(7*tmp_30*tmp_70*tmp_73 - tmp_33*tmp_70 - tmp_72*tmp_78 - tmp_73*tmp_79);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = -tmp_2 + tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = tmp_0*tmp_7;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = tmp_3*tmp_7;
      real_t tmp_13 = tmp_11*tmp_4;
      real_t tmp_14 = 1.0 / (tmp_1*tmp_10*tmp_11 - tmp_10*tmp_12 - tmp_13*tmp_6 - tmp_2*tmp_9 + tmp_3*tmp_4*tmp_9 + tmp_6*tmp_8);
      real_t tmp_15 = 1.0*tmp_14;
      real_t tmp_16 = tmp_15*tmp_5;
      real_t tmp_17 = -tmp_13 + tmp_8;
      real_t tmp_18 = tmp_15*tmp_17;
      real_t tmp_19 = tmp_1*tmp_11 - tmp_12;
      real_t tmp_20 = tmp_15*tmp_19;
      real_t tmp_21 = tmp_10*tmp_14;
      real_t tmp_22 = tmp_14*tmp_6;
      real_t tmp_23 = tmp_14*tmp_9;
      real_t tmp_24 = 2.0*tmp_17*tmp_22 + 2.0*tmp_19*tmp_21 + 2.0*tmp_23*tmp_5;
      real_t tmp_25 = tmp_0*tmp_6 - tmp_10*tmp_3;
      real_t tmp_26 = 0.5*tmp_14;
      real_t tmp_27 = -tmp_0*tmp_9 + tmp_10*tmp_11;
      real_t tmp_28 = -tmp_11*tmp_6 + tmp_3*tmp_9;
      real_t tmp_29 = tmp_14*tmp_19;
      real_t tmp_30 = tmp_14*tmp_17;
      real_t tmp_31 = tmp_14*tmp_5;
      real_t tmp_32 = tmp_1*tmp_30 + tmp_21*tmp_28 + tmp_22*tmp_27 + tmp_23*tmp_25 + tmp_29*tmp_4 + tmp_31*tmp_7;
      real_t tmp_33 = tmp_1*tmp_10 - tmp_4*tmp_6;
      real_t tmp_34 = -tmp_10*tmp_7 + tmp_4*tmp_9;
      real_t tmp_35 = -tmp_1*tmp_9 + tmp_6*tmp_7;
      real_t tmp_36 = tmp_0*tmp_29 + tmp_11*tmp_31 + tmp_21*tmp_35 + tmp_22*tmp_34 + tmp_23*tmp_33 + tmp_3*tmp_30;
      real_t tmp_37 = p_affine_0_0*p_affine_1_1;
      real_t tmp_38 = p_affine_0_0*p_affine_1_2;
      real_t tmp_39 = p_affine_2_1*p_affine_3_2;
      real_t tmp_40 = p_affine_0_1*p_affine_1_0;
      real_t tmp_41 = p_affine_0_1*p_affine_1_2;
      real_t tmp_42 = p_affine_2_2*p_affine_3_0;
      real_t tmp_43 = p_affine_0_2*p_affine_1_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_1;
      real_t tmp_45 = p_affine_2_0*p_affine_3_1;
      real_t tmp_46 = p_affine_2_2*p_affine_3_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_0;
      real_t tmp_49 = std::abs(p_affine_0_0*tmp_39 - p_affine_0_0*tmp_46 + p_affine_0_1*tmp_42 - p_affine_0_1*tmp_47 + p_affine_0_2*tmp_45 - p_affine_0_2*tmp_48 - p_affine_1_0*tmp_39 + p_affine_1_0*tmp_46 - p_affine_1_1*tmp_42 + p_affine_1_1*tmp_47 - p_affine_1_2*tmp_45 + p_affine_1_2*tmp_48 + p_affine_2_0*tmp_41 - p_affine_2_0*tmp_44 - p_affine_2_1*tmp_38 + p_affine_2_1*tmp_43 + p_affine_2_2*tmp_37 - p_affine_2_2*tmp_40 - p_affine_3_0*tmp_41 + p_affine_3_0*tmp_44 + p_affine_3_1*tmp_38 - p_affine_3_1*tmp_43 - p_affine_3_2*tmp_37 + p_affine_3_2*tmp_40);
      real_t tmp_50 = tmp_49*(tmp_24*(-tmp_16 - tmp_18 - tmp_20) + 2*tmp_32*(-tmp_25*tmp_26 - tmp_26*tmp_27 - tmp_26*tmp_28) + 2*tmp_36*(-tmp_26*tmp_33 - tmp_26*tmp_34 - tmp_26*tmp_35));
      real_t tmp_51 = tmp_15*tmp_32;
      real_t tmp_52 = tmp_15*tmp_36;
      real_t tmp_53 = tmp_49*(tmp_20*tmp_24 + tmp_28*tmp_51 + tmp_35*tmp_52);
      real_t tmp_54 = tmp_49*(tmp_18*tmp_24 + tmp_27*tmp_51 + tmp_34*tmp_52);
      real_t tmp_55 = tmp_49*(tmp_16*tmp_24 + tmp_25*tmp_51 + tmp_33*tmp_52);
      real_t a_0_0 = 0.1666666666666668*tmp_50;
      real_t a_1_0 = 0.1666666666666668*tmp_53;
      real_t a_2_0 = 0.1666666666666668*tmp_54;
      real_t a_3_0 = 0.1666666666666668*tmp_55;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_1;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_54 = tmp_40*tmp_46;
      real_t tmp_55 = tmp_35*tmp_46;
      real_t tmp_56 = tmp_46*tmp_5;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_41*tmp_60;
      real_t tmp_62 = tmp_36*tmp_60;
      real_t tmp_63 = tmp_21*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*tmp_50 + 1.0*p_affine_13_1*(-tmp_61 - tmp_62 - tmp_63) + 1.0*p_affine_13_2*tmp_57;
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_21*tmp_46;
      real_t tmp_69 = tmp_36*tmp_46;
      real_t tmp_70 = tmp_41*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_0*tmp_68 + tmp_1*tmp_69 + tmp_2*tmp_47 + tmp_3*tmp_70 + tmp_4*tmp_48 + tmp_49*tmp_9) + 1.0*p_affine_13_1*(tmp_2*tmp_61 + tmp_4*tmp_62 + tmp_63*tmp_9) + 1.0*p_affine_13_2*(tmp_10*tmp_69 + tmp_2*tmp_54 + tmp_4*tmp_55 + tmp_56*tmp_9 + tmp_6*tmp_70 + tmp_68*tmp_8);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_1*tmp_80 + tmp_3*tmp_82;
      real_t tmp_84 = tmp_10*tmp_80 + tmp_6*tmp_82 + tmp_78*tmp_8;
      real_t tmp_85 = tmp_2*tmp_82 + tmp_4*tmp_80 + tmp_78*tmp_9;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_1*tmp_94 + tmp_3*tmp_96;
      real_t tmp_98 = tmp_10*tmp_94 + tmp_6*tmp_96 + tmp_8*tmp_92;
      real_t tmp_99 = tmp_2*tmp_96 + tmp_4*tmp_94 + tmp_9*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_1*tmp_108 + tmp_110*tmp_3;
      real_t tmp_112 = tmp_10*tmp_108 + tmp_106*tmp_8 + tmp_110*tmp_6;
      real_t tmp_113 = tmp_106*tmp_9 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_1*tmp_122 + tmp_124*tmp_3;
      real_t tmp_126 = tmp_10*tmp_122 + tmp_120*tmp_8 + tmp_124*tmp_6;
      real_t tmp_127 = tmp_120*tmp_9 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_1*tmp_136 + tmp_138*tmp_3;
      real_t tmp_140 = tmp_10*tmp_136 + tmp_134*tmp_8 + tmp_138*tmp_6;
      real_t tmp_141 = tmp_134*tmp_9 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_1*tmp_150 + tmp_152*tmp_3;
      real_t tmp_154 = tmp_10*tmp_150 + tmp_148*tmp_8 + tmp_152*tmp_6;
      real_t tmp_155 = tmp_148*tmp_9 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_1*tmp_164 + tmp_166*tmp_3;
      real_t tmp_168 = tmp_10*tmp_164 + tmp_162*tmp_8 + tmp_166*tmp_6;
      real_t tmp_169 = tmp_162*tmp_9 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_1*tmp_178 + tmp_180*tmp_3;
      real_t tmp_182 = tmp_10*tmp_178 + tmp_176*tmp_8 + tmp_180*tmp_6;
      real_t tmp_183 = tmp_176*tmp_9 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_1*tmp_192 + tmp_194*tmp_3;
      real_t tmp_196 = tmp_10*tmp_192 + tmp_190*tmp_8 + tmp_194*tmp_6;
      real_t tmp_197 = tmp_190*tmp_9 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_1*tmp_206 + tmp_208*tmp_3;
      real_t tmp_210 = tmp_10*tmp_206 + tmp_204*tmp_8 + tmp_208*tmp_6;
      real_t tmp_211 = tmp_2*tmp_208 + tmp_204*tmp_9 + tmp_206*tmp_4;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_1*tmp_220 + tmp_222*tmp_3;
      real_t tmp_224 = tmp_10*tmp_220 + tmp_218*tmp_8 + tmp_222*tmp_6;
      real_t tmp_225 = tmp_2*tmp_222 + tmp_218*tmp_9 + tmp_220*tmp_4;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_1*tmp_234 + tmp_236*tmp_3;
      real_t tmp_238 = tmp_10*tmp_234 + tmp_232*tmp_8 + tmp_236*tmp_6;
      real_t tmp_239 = tmp_2*tmp_236 + tmp_232*tmp_9 + tmp_234*tmp_4;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_1*tmp_248 + tmp_250*tmp_3;
      real_t tmp_252 = tmp_10*tmp_248 + tmp_246*tmp_8 + tmp_250*tmp_6;
      real_t tmp_253 = tmp_2*tmp_250 + tmp_246*tmp_9 + tmp_248*tmp_4;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_1*tmp_262 + tmp_264*tmp_3;
      real_t tmp_266 = tmp_10*tmp_262 + tmp_260*tmp_8 + tmp_264*tmp_6;
      real_t tmp_267 = tmp_2*tmp_264 + tmp_260*tmp_9 + tmp_262*tmp_4;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_1*tmp_276 + tmp_278*tmp_3;
      real_t tmp_280 = tmp_10*tmp_276 + tmp_274*tmp_8 + tmp_278*tmp_6;
      real_t tmp_281 = tmp_2*tmp_278 + tmp_274*tmp_9 + tmp_276*tmp_4;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_1*tmp_290 + tmp_292*tmp_3;
      real_t tmp_294 = tmp_10*tmp_290 + tmp_288*tmp_8 + tmp_292*tmp_6;
      real_t tmp_295 = tmp_2*tmp_292 + tmp_288*tmp_9 + tmp_290*tmp_4;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_1*tmp_304 + tmp_3*tmp_306;
      real_t tmp_308 = tmp_10*tmp_304 + tmp_302*tmp_8 + tmp_306*tmp_6;
      real_t tmp_309 = tmp_2*tmp_306 + tmp_302*tmp_9 + tmp_304*tmp_4;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_1*tmp_318 + tmp_3*tmp_320;
      real_t tmp_322 = tmp_10*tmp_318 + tmp_316*tmp_8 + tmp_320*tmp_6;
      real_t tmp_323 = tmp_2*tmp_320 + tmp_316*tmp_9 + tmp_318*tmp_4;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_1*tmp_332 + tmp_3*tmp_334;
      real_t tmp_336 = tmp_10*tmp_332 + tmp_330*tmp_8 + tmp_334*tmp_6;
      real_t tmp_337 = tmp_2*tmp_334 + tmp_330*tmp_9 + tmp_332*tmp_4;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_1*tmp_346 + tmp_3*tmp_348;
      real_t tmp_350 = tmp_10*tmp_346 + tmp_344*tmp_8 + tmp_348*tmp_6;
      real_t tmp_351 = tmp_2*tmp_348 + tmp_344*tmp_9 + tmp_346*tmp_4;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_1*tmp_56;
      real_t tmp_355 = p_affine_13_1*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_49 + 1.0*p_affine_13_1*tmp_63 + 1.0*p_affine_13_2*tmp_56;
      real_t tmp_357 = p_affine_13_1*tmp_55;
      real_t tmp_358 = p_affine_13_1*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_48 + 1.0*p_affine_13_1*tmp_62 + 1.0*p_affine_13_2*tmp_55;
      real_t tmp_360 = p_affine_13_1*tmp_54;
      real_t tmp_361 = p_affine_13_1*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_47 + 1.0*p_affine_13_1*tmp_61 + 1.0*p_affine_13_2*tmp_54;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_1_0 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_2_0 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_3_0 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_1 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_2 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_5 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_9 = tmp_5*tmp_8;
      real_t tmp_10 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_11 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_12 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_13 = tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_13 + tmp_0*tmp_9 + tmp_10*tmp_3 - tmp_10*tmp_6 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_14);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = tmp_12*tmp_4 - tmp_14;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = -tmp_13 + tmp_9;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_7 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = -tmp_0*tmp_2 + tmp_11*tmp_4;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_10*tmp_4;
      real_t tmp_39 = tmp_10*tmp_2 - tmp_11*tmp_8;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = tmp_0*tmp_5 - tmp_1*tmp_11;
      real_t tmp_42 = -tmp_0*tmp_12 + tmp_1*tmp_10;
      real_t tmp_43 = -tmp_10*tmp_5 + tmp_11*tmp_12;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_1*tmp_40 + tmp_4*tmp_44;
      real_t tmp_46 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_47 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_50 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_51 = tmp_49*tmp_50;
      real_t tmp_52 = tmp_48 - tmp_51;
      real_t tmp_53 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_54 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_57 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_58 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_59 = tmp_47*tmp_57;
      real_t tmp_60 = tmp_46*tmp_54;
      real_t tmp_61 = 1.0 / (tmp_48*tmp_58 + tmp_50*tmp_56*tmp_57 - tmp_51*tmp_58 + tmp_53*tmp_55 - tmp_53*tmp_59 - tmp_56*tmp_60);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_52*tmp_62;
      real_t tmp_64 = tmp_50*tmp_57 - tmp_60;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_55 - tmp_59;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_63 - tmp_65 - tmp_67;
      real_t tmp_69 = p_affine_13_1*tmp_68;
      real_t tmp_70 = tmp_10*tmp_36 + tmp_12*tmp_40 + tmp_44*tmp_8;
      real_t tmp_71 = -tmp_46*tmp_56 + tmp_49*tmp_53;
      real_t tmp_72 = tmp_62*tmp_71;
      real_t tmp_73 = tmp_46*tmp_58 - tmp_53*tmp_57;
      real_t tmp_74 = tmp_62*tmp_73;
      real_t tmp_75 = -tmp_49*tmp_58 + tmp_56*tmp_57;
      real_t tmp_76 = tmp_62*tmp_75;
      real_t tmp_77 = -tmp_72 - tmp_74 - tmp_76;
      real_t tmp_78 = p_affine_13_1*tmp_77;
      real_t tmp_79 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_80 = 1.0*tmp_61;
      real_t tmp_81 = tmp_79*tmp_80;
      real_t tmp_82 = -tmp_50*tmp_58 + tmp_53*tmp_54;
      real_t tmp_83 = tmp_80*tmp_82;
      real_t tmp_84 = tmp_47*tmp_58 - tmp_54*tmp_56;
      real_t tmp_85 = tmp_80*tmp_84;
      real_t tmp_86 = p_affine_13_0*tmp_68 + p_affine_13_1*(-tmp_81 - tmp_83 - tmp_85) + p_affine_13_2*tmp_77;
      real_t tmp_87 = tmp_11*tmp_36 + tmp_2*tmp_44 + tmp_40*tmp_5;
      real_t tmp_88 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_89 = tmp_61*(tmp_20 + tmp_88);
      real_t tmp_90 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_91 = tmp_61*(tmp_27 + tmp_90);
      real_t tmp_92 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_93 = tmp_61*(tmp_34 + tmp_92);
      real_t tmp_94 = tmp_66*tmp_93 + tmp_75*tmp_89 + tmp_84*tmp_91;
      real_t tmp_95 = tmp_64*tmp_93 + tmp_73*tmp_89 + tmp_82*tmp_91;
      real_t tmp_96 = tmp_52*tmp_93 + tmp_71*tmp_89 + tmp_79*tmp_91;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = (std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31));
      real_t tmp_99 = 14.0*std::pow(tmp_98, -0.25);
      real_t tmp_100 = tmp_87*tmp_99;
      real_t tmp_101 = 1.0*tmp_15;
      real_t tmp_102 = 0.5*tmp_15;
      real_t tmp_103 = tmp_102*tmp_22;
      real_t tmp_104 = tmp_102*tmp_38;
      real_t tmp_105 = tmp_102*tmp_42;
      real_t tmp_106 = tmp_102*tmp_11;
      real_t tmp_107 = tmp_102*tmp_5;
      real_t tmp_108 = tmp_102*tmp_2;
      real_t tmp_109 = 1.0*p_affine_13_0*(tmp_0*tmp_103 + tmp_1*tmp_104 + tmp_105*tmp_4 + tmp_106*tmp_29 + tmp_107*tmp_39 + tmp_108*tmp_43) + 1.0*p_affine_13_1*(tmp_101*tmp_11*tmp_22 + tmp_101*tmp_2*tmp_42 + tmp_101*tmp_38*tmp_5) + 1.0*p_affine_13_2*(tmp_10*tmp_103 + tmp_104*tmp_12 + tmp_105*tmp_8 + tmp_106*tmp_7 + tmp_107*tmp_37 + tmp_108*tmp_41);
      real_t tmp_110 = 1.0*std::pow(tmp_98, 1.0/2.0);
      real_t tmp_111 = 0.0068572537431980923*tmp_110;
      real_t tmp_112 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_16);
      real_t tmp_114 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_115 = tmp_15*(tmp_114 + tmp_23);
      real_t tmp_116 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_117 = tmp_15*(tmp_116 + tmp_30);
      real_t tmp_118 = tmp_113*tmp_7 + tmp_115*tmp_22 + tmp_117*tmp_29 - 1.0/4.0;
      real_t tmp_119 = tmp_113*tmp_37 + tmp_115*tmp_38 + tmp_117*tmp_39 - 1.0/4.0;
      real_t tmp_120 = tmp_113*tmp_41 + tmp_115*tmp_42 + tmp_117*tmp_43 - 1.0/4.0;
      real_t tmp_121 = tmp_0*tmp_118 + tmp_1*tmp_119 + tmp_120*tmp_4;
      real_t tmp_122 = tmp_10*tmp_118 + tmp_119*tmp_12 + tmp_120*tmp_8;
      real_t tmp_123 = tmp_11*tmp_118 + tmp_119*tmp_5 + tmp_120*tmp_2;
      real_t tmp_124 = tmp_61*(tmp_112 + tmp_88);
      real_t tmp_125 = tmp_61*(tmp_114 + tmp_90);
      real_t tmp_126 = tmp_61*(tmp_116 + tmp_92);
      real_t tmp_127 = tmp_124*tmp_75 + tmp_125*tmp_84 + tmp_126*tmp_66;
      real_t tmp_128 = tmp_124*tmp_73 + tmp_125*tmp_82 + tmp_126*tmp_64;
      real_t tmp_129 = tmp_124*tmp_71 + tmp_125*tmp_79 + tmp_126*tmp_52;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = tmp_123*tmp_99;
      real_t tmp_132 = 0.037198804536718075*tmp_110;
      real_t tmp_133 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_134 = tmp_15*(tmp_133 + tmp_16);
      real_t tmp_135 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_23);
      real_t tmp_137 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_30);
      real_t tmp_139 = tmp_134*tmp_7 + tmp_136*tmp_22 + tmp_138*tmp_29 - 1.0/4.0;
      real_t tmp_140 = tmp_134*tmp_37 + tmp_136*tmp_38 + tmp_138*tmp_39 - 1.0/4.0;
      real_t tmp_141 = tmp_134*tmp_41 + tmp_136*tmp_42 + tmp_138*tmp_43 - 1.0/4.0;
      real_t tmp_142 = tmp_0*tmp_139 + tmp_1*tmp_140 + tmp_141*tmp_4;
      real_t tmp_143 = tmp_10*tmp_139 + tmp_12*tmp_140 + tmp_141*tmp_8;
      real_t tmp_144 = tmp_11*tmp_139 + tmp_140*tmp_5 + tmp_141*tmp_2;
      real_t tmp_145 = tmp_61*(tmp_133 + tmp_88);
      real_t tmp_146 = tmp_61*(tmp_135 + tmp_90);
      real_t tmp_147 = tmp_61*(tmp_137 + tmp_92);
      real_t tmp_148 = tmp_145*tmp_75 + tmp_146*tmp_84 + tmp_147*tmp_66;
      real_t tmp_149 = tmp_145*tmp_73 + tmp_146*tmp_82 + tmp_147*tmp_64;
      real_t tmp_150 = tmp_145*tmp_71 + tmp_146*tmp_79 + tmp_147*tmp_52;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = tmp_144*tmp_99;
      real_t tmp_153 = 0.020848748529055869*tmp_110;
      real_t tmp_154 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_155 = tmp_15*(tmp_154 + tmp_16);
      real_t tmp_156 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_157 = tmp_15*(tmp_156 + tmp_23);
      real_t tmp_158 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_159 = tmp_15*(tmp_158 + tmp_30);
      real_t tmp_160 = tmp_155*tmp_7 + tmp_157*tmp_22 + tmp_159*tmp_29 - 1.0/4.0;
      real_t tmp_161 = tmp_155*tmp_37 + tmp_157*tmp_38 + tmp_159*tmp_39 - 1.0/4.0;
      real_t tmp_162 = tmp_155*tmp_41 + tmp_157*tmp_42 + tmp_159*tmp_43 - 1.0/4.0;
      real_t tmp_163 = tmp_0*tmp_160 + tmp_1*tmp_161 + tmp_162*tmp_4;
      real_t tmp_164 = tmp_10*tmp_160 + tmp_12*tmp_161 + tmp_162*tmp_8;
      real_t tmp_165 = tmp_11*tmp_160 + tmp_161*tmp_5 + tmp_162*tmp_2;
      real_t tmp_166 = tmp_61*(tmp_154 + tmp_88);
      real_t tmp_167 = tmp_61*(tmp_156 + tmp_90);
      real_t tmp_168 = tmp_61*(tmp_158 + tmp_92);
      real_t tmp_169 = tmp_166*tmp_75 + tmp_167*tmp_84 + tmp_168*tmp_66;
      real_t tmp_170 = tmp_166*tmp_73 + tmp_167*tmp_82 + tmp_168*tmp_64;
      real_t tmp_171 = tmp_166*tmp_71 + tmp_167*tmp_79 + tmp_168*tmp_52;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_165*tmp_99;
      real_t tmp_174 = 0.019202922745021479*tmp_110;
      real_t tmp_175 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_176 = tmp_15*(tmp_16 + tmp_175);
      real_t tmp_177 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_178 = tmp_15*(tmp_177 + tmp_23);
      real_t tmp_179 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_180 = tmp_15*(tmp_179 + tmp_30);
      real_t tmp_181 = tmp_176*tmp_7 + tmp_178*tmp_22 + tmp_180*tmp_29 - 1.0/4.0;
      real_t tmp_182 = tmp_176*tmp_37 + tmp_178*tmp_38 + tmp_180*tmp_39 - 1.0/4.0;
      real_t tmp_183 = tmp_176*tmp_41 + tmp_178*tmp_42 + tmp_180*tmp_43 - 1.0/4.0;
      real_t tmp_184 = tmp_0*tmp_181 + tmp_1*tmp_182 + tmp_183*tmp_4;
      real_t tmp_185 = tmp_10*tmp_181 + tmp_12*tmp_182 + tmp_183*tmp_8;
      real_t tmp_186 = tmp_11*tmp_181 + tmp_182*tmp_5 + tmp_183*tmp_2;
      real_t tmp_187 = tmp_61*(tmp_175 + tmp_88);
      real_t tmp_188 = tmp_61*(tmp_177 + tmp_90);
      real_t tmp_189 = tmp_61*(tmp_179 + tmp_92);
      real_t tmp_190 = tmp_187*tmp_75 + tmp_188*tmp_84 + tmp_189*tmp_66;
      real_t tmp_191 = tmp_187*tmp_73 + tmp_188*tmp_82 + tmp_189*tmp_64;
      real_t tmp_192 = tmp_187*tmp_71 + tmp_188*tmp_79 + tmp_189*tmp_52;
      real_t tmp_193 = -tmp_190 - tmp_191 - tmp_192 + 1;
      real_t tmp_194 = tmp_186*tmp_99;
      real_t tmp_195 = 0.020848748529055869*tmp_110;
      real_t tmp_196 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_197 = tmp_15*(tmp_16 + tmp_196);
      real_t tmp_198 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_199 = tmp_15*(tmp_198 + tmp_23);
      real_t tmp_200 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_201 = tmp_15*(tmp_200 + tmp_30);
      real_t tmp_202 = tmp_197*tmp_7 + tmp_199*tmp_22 + tmp_201*tmp_29 - 1.0/4.0;
      real_t tmp_203 = tmp_197*tmp_37 + tmp_199*tmp_38 + tmp_201*tmp_39 - 1.0/4.0;
      real_t tmp_204 = tmp_197*tmp_41 + tmp_199*tmp_42 + tmp_201*tmp_43 - 1.0/4.0;
      real_t tmp_205 = tmp_0*tmp_202 + tmp_1*tmp_203 + tmp_204*tmp_4;
      real_t tmp_206 = tmp_10*tmp_202 + tmp_12*tmp_203 + tmp_204*tmp_8;
      real_t tmp_207 = tmp_11*tmp_202 + tmp_2*tmp_204 + tmp_203*tmp_5;
      real_t tmp_208 = tmp_61*(tmp_196 + tmp_88);
      real_t tmp_209 = tmp_61*(tmp_198 + tmp_90);
      real_t tmp_210 = tmp_61*(tmp_200 + tmp_92);
      real_t tmp_211 = tmp_208*tmp_75 + tmp_209*tmp_84 + tmp_210*tmp_66;
      real_t tmp_212 = tmp_208*tmp_73 + tmp_209*tmp_82 + tmp_210*tmp_64;
      real_t tmp_213 = tmp_208*tmp_71 + tmp_209*tmp_79 + tmp_210*tmp_52;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = tmp_207*tmp_99;
      real_t tmp_216 = 0.019202922745021479*tmp_110;
      real_t tmp_217 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_218 = tmp_15*(tmp_16 + tmp_217);
      real_t tmp_219 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_23);
      real_t tmp_221 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_222 = tmp_15*(tmp_221 + tmp_30);
      real_t tmp_223 = tmp_218*tmp_7 + tmp_22*tmp_220 + tmp_222*tmp_29 - 1.0/4.0;
      real_t tmp_224 = tmp_218*tmp_37 + tmp_220*tmp_38 + tmp_222*tmp_39 - 1.0/4.0;
      real_t tmp_225 = tmp_218*tmp_41 + tmp_220*tmp_42 + tmp_222*tmp_43 - 1.0/4.0;
      real_t tmp_226 = tmp_0*tmp_223 + tmp_1*tmp_224 + tmp_225*tmp_4;
      real_t tmp_227 = tmp_10*tmp_223 + tmp_12*tmp_224 + tmp_225*tmp_8;
      real_t tmp_228 = tmp_11*tmp_223 + tmp_2*tmp_225 + tmp_224*tmp_5;
      real_t tmp_229 = tmp_61*(tmp_217 + tmp_88);
      real_t tmp_230 = tmp_61*(tmp_219 + tmp_90);
      real_t tmp_231 = tmp_61*(tmp_221 + tmp_92);
      real_t tmp_232 = tmp_229*tmp_75 + tmp_230*tmp_84 + tmp_231*tmp_66;
      real_t tmp_233 = tmp_229*tmp_73 + tmp_230*tmp_82 + tmp_231*tmp_64;
      real_t tmp_234 = tmp_229*tmp_71 + tmp_230*tmp_79 + tmp_231*tmp_52;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = tmp_228*tmp_99;
      real_t tmp_237 = 0.020848748529055869*tmp_110;
      real_t tmp_238 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_239 = tmp_15*(tmp_16 + tmp_238);
      real_t tmp_240 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_241 = tmp_15*(tmp_23 + tmp_240);
      real_t tmp_242 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_243 = tmp_15*(tmp_242 + tmp_30);
      real_t tmp_244 = tmp_22*tmp_241 + tmp_239*tmp_7 + tmp_243*tmp_29 - 1.0/4.0;
      real_t tmp_245 = tmp_239*tmp_37 + tmp_241*tmp_38 + tmp_243*tmp_39 - 1.0/4.0;
      real_t tmp_246 = tmp_239*tmp_41 + tmp_241*tmp_42 + tmp_243*tmp_43 - 1.0/4.0;
      real_t tmp_247 = tmp_0*tmp_244 + tmp_1*tmp_245 + tmp_246*tmp_4;
      real_t tmp_248 = tmp_10*tmp_244 + tmp_12*tmp_245 + tmp_246*tmp_8;
      real_t tmp_249 = tmp_11*tmp_244 + tmp_2*tmp_246 + tmp_245*tmp_5;
      real_t tmp_250 = tmp_61*(tmp_238 + tmp_88);
      real_t tmp_251 = tmp_61*(tmp_240 + tmp_90);
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_92);
      real_t tmp_253 = tmp_250*tmp_75 + tmp_251*tmp_84 + tmp_252*tmp_66;
      real_t tmp_254 = tmp_250*tmp_73 + tmp_251*tmp_82 + tmp_252*tmp_64;
      real_t tmp_255 = tmp_250*tmp_71 + tmp_251*tmp_79 + tmp_252*tmp_52;
      real_t tmp_256 = -tmp_253 - tmp_254 - tmp_255 + 1;
      real_t tmp_257 = tmp_249*tmp_99;
      real_t tmp_258 = 0.019202922745021479*tmp_110;
      real_t tmp_259 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_260 = tmp_15*(tmp_16 + tmp_259);
      real_t tmp_261 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_262 = tmp_15*(tmp_23 + tmp_261);
      real_t tmp_263 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_30);
      real_t tmp_265 = tmp_22*tmp_262 + tmp_260*tmp_7 + tmp_264*tmp_29 - 1.0/4.0;
      real_t tmp_266 = tmp_260*tmp_37 + tmp_262*tmp_38 + tmp_264*tmp_39 - 1.0/4.0;
      real_t tmp_267 = tmp_260*tmp_41 + tmp_262*tmp_42 + tmp_264*tmp_43 - 1.0/4.0;
      real_t tmp_268 = tmp_0*tmp_265 + tmp_1*tmp_266 + tmp_267*tmp_4;
      real_t tmp_269 = tmp_10*tmp_265 + tmp_12*tmp_266 + tmp_267*tmp_8;
      real_t tmp_270 = tmp_11*tmp_265 + tmp_2*tmp_267 + tmp_266*tmp_5;
      real_t tmp_271 = tmp_61*(tmp_259 + tmp_88);
      real_t tmp_272 = tmp_61*(tmp_261 + tmp_90);
      real_t tmp_273 = tmp_61*(tmp_263 + tmp_92);
      real_t tmp_274 = tmp_271*tmp_75 + tmp_272*tmp_84 + tmp_273*tmp_66;
      real_t tmp_275 = tmp_271*tmp_73 + tmp_272*tmp_82 + tmp_273*tmp_64;
      real_t tmp_276 = tmp_271*tmp_71 + tmp_272*tmp_79 + tmp_273*tmp_52;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_270*tmp_99;
      real_t tmp_279 = 0.020848748529055869*tmp_110;
      real_t tmp_280 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_281 = tmp_15*(tmp_16 + tmp_280);
      real_t tmp_282 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_283 = tmp_15*(tmp_23 + tmp_282);
      real_t tmp_284 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_30);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_7 + tmp_285*tmp_29 - 1.0/4.0;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39 - 1.0/4.0;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43 - 1.0/4.0;
      real_t tmp_289 = tmp_0*tmp_286 + tmp_1*tmp_287 + tmp_288*tmp_4;
      real_t tmp_290 = tmp_10*tmp_286 + tmp_12*tmp_287 + tmp_288*tmp_8;
      real_t tmp_291 = tmp_11*tmp_286 + tmp_2*tmp_288 + tmp_287*tmp_5;
      real_t tmp_292 = tmp_61*(tmp_280 + tmp_88);
      real_t tmp_293 = tmp_61*(tmp_282 + tmp_90);
      real_t tmp_294 = tmp_61*(tmp_284 + tmp_92);
      real_t tmp_295 = tmp_292*tmp_75 + tmp_293*tmp_84 + tmp_294*tmp_66;
      real_t tmp_296 = tmp_292*tmp_73 + tmp_293*tmp_82 + tmp_294*tmp_64;
      real_t tmp_297 = tmp_292*tmp_71 + tmp_293*tmp_79 + tmp_294*tmp_52;
      real_t tmp_298 = -tmp_295 - tmp_296 - tmp_297 + 1;
      real_t tmp_299 = tmp_291*tmp_99;
      real_t tmp_300 = 0.019202922745021479*tmp_110;
      real_t tmp_301 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_302 = tmp_15*(tmp_16 + tmp_301);
      real_t tmp_303 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_304 = tmp_15*(tmp_23 + tmp_303);
      real_t tmp_305 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_306 = tmp_15*(tmp_30 + tmp_305);
      real_t tmp_307 = tmp_22*tmp_304 + tmp_29*tmp_306 + tmp_302*tmp_7 - 1.0/4.0;
      real_t tmp_308 = tmp_302*tmp_37 + tmp_304*tmp_38 + tmp_306*tmp_39 - 1.0/4.0;
      real_t tmp_309 = tmp_302*tmp_41 + tmp_304*tmp_42 + tmp_306*tmp_43 - 1.0/4.0;
      real_t tmp_310 = tmp_0*tmp_307 + tmp_1*tmp_308 + tmp_309*tmp_4;
      real_t tmp_311 = tmp_10*tmp_307 + tmp_12*tmp_308 + tmp_309*tmp_8;
      real_t tmp_312 = tmp_11*tmp_307 + tmp_2*tmp_309 + tmp_308*tmp_5;
      real_t tmp_313 = tmp_61*(tmp_301 + tmp_88);
      real_t tmp_314 = tmp_61*(tmp_303 + tmp_90);
      real_t tmp_315 = tmp_61*(tmp_305 + tmp_92);
      real_t tmp_316 = tmp_313*tmp_75 + tmp_314*tmp_84 + tmp_315*tmp_66;
      real_t tmp_317 = tmp_313*tmp_73 + tmp_314*tmp_82 + tmp_315*tmp_64;
      real_t tmp_318 = tmp_313*tmp_71 + tmp_314*tmp_79 + tmp_315*tmp_52;
      real_t tmp_319 = -tmp_316 - tmp_317 - tmp_318 + 1;
      real_t tmp_320 = tmp_312*tmp_99;
      real_t tmp_321 = 0.020848748529055869*tmp_110;
      real_t tmp_322 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_323 = tmp_15*(tmp_16 + tmp_322);
      real_t tmp_324 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_325 = tmp_15*(tmp_23 + tmp_324);
      real_t tmp_326 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_327 = tmp_15*(tmp_30 + tmp_326);
      real_t tmp_328 = tmp_22*tmp_325 + tmp_29*tmp_327 + tmp_323*tmp_7 - 1.0/4.0;
      real_t tmp_329 = tmp_323*tmp_37 + tmp_325*tmp_38 + tmp_327*tmp_39 - 1.0/4.0;
      real_t tmp_330 = tmp_323*tmp_41 + tmp_325*tmp_42 + tmp_327*tmp_43 - 1.0/4.0;
      real_t tmp_331 = tmp_0*tmp_328 + tmp_1*tmp_329 + tmp_330*tmp_4;
      real_t tmp_332 = tmp_10*tmp_328 + tmp_12*tmp_329 + tmp_330*tmp_8;
      real_t tmp_333 = tmp_11*tmp_328 + tmp_2*tmp_330 + tmp_329*tmp_5;
      real_t tmp_334 = tmp_61*(tmp_322 + tmp_88);
      real_t tmp_335 = tmp_61*(tmp_324 + tmp_90);
      real_t tmp_336 = tmp_61*(tmp_326 + tmp_92);
      real_t tmp_337 = tmp_334*tmp_75 + tmp_335*tmp_84 + tmp_336*tmp_66;
      real_t tmp_338 = tmp_334*tmp_73 + tmp_335*tmp_82 + tmp_336*tmp_64;
      real_t tmp_339 = tmp_334*tmp_71 + tmp_335*tmp_79 + tmp_336*tmp_52;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_99;
      real_t tmp_342 = 0.019202922745021479*tmp_110;
      real_t tmp_343 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_344 = tmp_15*(tmp_16 + tmp_343);
      real_t tmp_345 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_346 = tmp_15*(tmp_23 + tmp_345);
      real_t tmp_347 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_348 = tmp_15*(tmp_30 + tmp_347);
      real_t tmp_349 = tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_7 - 1.0/4.0;
      real_t tmp_350 = tmp_344*tmp_37 + tmp_346*tmp_38 + tmp_348*tmp_39 - 1.0/4.0;
      real_t tmp_351 = tmp_344*tmp_41 + tmp_346*tmp_42 + tmp_348*tmp_43 - 1.0/4.0;
      real_t tmp_352 = tmp_0*tmp_349 + tmp_1*tmp_350 + tmp_351*tmp_4;
      real_t tmp_353 = tmp_10*tmp_349 + tmp_12*tmp_350 + tmp_351*tmp_8;
      real_t tmp_354 = tmp_11*tmp_349 + tmp_2*tmp_351 + tmp_350*tmp_5;
      real_t tmp_355 = tmp_61*(tmp_343 + tmp_88);
      real_t tmp_356 = tmp_61*(tmp_345 + tmp_90);
      real_t tmp_357 = tmp_61*(tmp_347 + tmp_92);
      real_t tmp_358 = tmp_355*tmp_75 + tmp_356*tmp_84 + tmp_357*tmp_66;
      real_t tmp_359 = tmp_355*tmp_73 + tmp_356*tmp_82 + tmp_357*tmp_64;
      real_t tmp_360 = tmp_355*tmp_71 + tmp_356*tmp_79 + tmp_357*tmp_52;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = tmp_354*tmp_99;
      real_t tmp_363 = 0.042507265838595799*tmp_110;
      real_t tmp_364 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_365 = tmp_15*(tmp_16 + tmp_364);
      real_t tmp_366 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_367 = tmp_15*(tmp_23 + tmp_366);
      real_t tmp_368 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_369 = tmp_15*(tmp_30 + tmp_368);
      real_t tmp_370 = tmp_22*tmp_367 + tmp_29*tmp_369 + tmp_365*tmp_7 - 1.0/4.0;
      real_t tmp_371 = tmp_365*tmp_37 + tmp_367*tmp_38 + tmp_369*tmp_39 - 1.0/4.0;
      real_t tmp_372 = tmp_365*tmp_41 + tmp_367*tmp_42 + tmp_369*tmp_43 - 1.0/4.0;
      real_t tmp_373 = tmp_0*tmp_370 + tmp_1*tmp_371 + tmp_372*tmp_4;
      real_t tmp_374 = tmp_10*tmp_370 + tmp_12*tmp_371 + tmp_372*tmp_8;
      real_t tmp_375 = tmp_11*tmp_370 + tmp_2*tmp_372 + tmp_371*tmp_5;
      real_t tmp_376 = tmp_61*(tmp_364 + tmp_88);
      real_t tmp_377 = tmp_61*(tmp_366 + tmp_90);
      real_t tmp_378 = tmp_61*(tmp_368 + tmp_92);
      real_t tmp_379 = tmp_376*tmp_75 + tmp_377*tmp_84 + tmp_378*tmp_66;
      real_t tmp_380 = tmp_376*tmp_73 + tmp_377*tmp_82 + tmp_378*tmp_64;
      real_t tmp_381 = tmp_376*tmp_71 + tmp_377*tmp_79 + tmp_378*tmp_52;
      real_t tmp_382 = -tmp_379 - tmp_380 - tmp_381 + 1;
      real_t tmp_383 = tmp_375*tmp_99;
      real_t tmp_384 = 0.020848748529055869*tmp_110;
      real_t tmp_385 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_386 = tmp_15*(tmp_16 + tmp_385);
      real_t tmp_387 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_388 = tmp_15*(tmp_23 + tmp_387);
      real_t tmp_389 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_390 = tmp_15*(tmp_30 + tmp_389);
      real_t tmp_391 = tmp_22*tmp_388 + tmp_29*tmp_390 + tmp_386*tmp_7 - 1.0/4.0;
      real_t tmp_392 = tmp_37*tmp_386 + tmp_38*tmp_388 + tmp_39*tmp_390 - 1.0/4.0;
      real_t tmp_393 = tmp_386*tmp_41 + tmp_388*tmp_42 + tmp_390*tmp_43 - 1.0/4.0;
      real_t tmp_394 = tmp_0*tmp_391 + tmp_1*tmp_392 + tmp_393*tmp_4;
      real_t tmp_395 = tmp_10*tmp_391 + tmp_12*tmp_392 + tmp_393*tmp_8;
      real_t tmp_396 = tmp_11*tmp_391 + tmp_2*tmp_393 + tmp_392*tmp_5;
      real_t tmp_397 = tmp_61*(tmp_385 + tmp_88);
      real_t tmp_398 = tmp_61*(tmp_387 + tmp_90);
      real_t tmp_399 = tmp_61*(tmp_389 + tmp_92);
      real_t tmp_400 = tmp_397*tmp_75 + tmp_398*tmp_84 + tmp_399*tmp_66;
      real_t tmp_401 = tmp_397*tmp_73 + tmp_398*tmp_82 + tmp_399*tmp_64;
      real_t tmp_402 = tmp_397*tmp_71 + tmp_398*tmp_79 + tmp_399*tmp_52;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_396*tmp_99;
      real_t tmp_405 = 0.0068572537431980923*tmp_110;
      real_t tmp_406 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_407 = tmp_15*(tmp_16 + tmp_406);
      real_t tmp_408 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_409 = tmp_15*(tmp_23 + tmp_408);
      real_t tmp_410 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_411 = tmp_15*(tmp_30 + tmp_410);
      real_t tmp_412 = tmp_22*tmp_409 + tmp_29*tmp_411 + tmp_407*tmp_7 - 1.0/4.0;
      real_t tmp_413 = tmp_37*tmp_407 + tmp_38*tmp_409 + tmp_39*tmp_411 - 1.0/4.0;
      real_t tmp_414 = tmp_407*tmp_41 + tmp_409*tmp_42 + tmp_411*tmp_43 - 1.0/4.0;
      real_t tmp_415 = tmp_0*tmp_412 + tmp_1*tmp_413 + tmp_4*tmp_414;
      real_t tmp_416 = tmp_10*tmp_412 + tmp_12*tmp_413 + tmp_414*tmp_8;
      real_t tmp_417 = tmp_11*tmp_412 + tmp_2*tmp_414 + tmp_413*tmp_5;
      real_t tmp_418 = tmp_61*(tmp_406 + tmp_88);
      real_t tmp_419 = tmp_61*(tmp_408 + tmp_90);
      real_t tmp_420 = tmp_61*(tmp_410 + tmp_92);
      real_t tmp_421 = tmp_418*tmp_75 + tmp_419*tmp_84 + tmp_420*tmp_66;
      real_t tmp_422 = tmp_418*tmp_73 + tmp_419*tmp_82 + tmp_420*tmp_64;
      real_t tmp_423 = tmp_418*tmp_71 + tmp_419*tmp_79 + tmp_420*tmp_52;
      real_t tmp_424 = -tmp_421 - tmp_422 - tmp_423 + 1;
      real_t tmp_425 = tmp_417*tmp_99;
      real_t tmp_426 = 0.037198804536718075*tmp_110;
      real_t tmp_427 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_428 = tmp_15*(tmp_16 + tmp_427);
      real_t tmp_429 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_430 = tmp_15*(tmp_23 + tmp_429);
      real_t tmp_431 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_432 = tmp_15*(tmp_30 + tmp_431);
      real_t tmp_433 = tmp_22*tmp_430 + tmp_29*tmp_432 + tmp_428*tmp_7 - 1.0/4.0;
      real_t tmp_434 = tmp_37*tmp_428 + tmp_38*tmp_430 + tmp_39*tmp_432 - 1.0/4.0;
      real_t tmp_435 = tmp_41*tmp_428 + tmp_42*tmp_430 + tmp_43*tmp_432 - 1.0/4.0;
      real_t tmp_436 = tmp_0*tmp_433 + tmp_1*tmp_434 + tmp_4*tmp_435;
      real_t tmp_437 = tmp_10*tmp_433 + tmp_12*tmp_434 + tmp_435*tmp_8;
      real_t tmp_438 = tmp_11*tmp_433 + tmp_2*tmp_435 + tmp_434*tmp_5;
      real_t tmp_439 = tmp_61*(tmp_427 + tmp_88);
      real_t tmp_440 = tmp_61*(tmp_429 + tmp_90);
      real_t tmp_441 = tmp_61*(tmp_431 + tmp_92);
      real_t tmp_442 = tmp_439*tmp_75 + tmp_440*tmp_84 + tmp_441*tmp_66;
      real_t tmp_443 = tmp_439*tmp_73 + tmp_440*tmp_82 + tmp_441*tmp_64;
      real_t tmp_444 = tmp_439*tmp_71 + tmp_440*tmp_79 + tmp_441*tmp_52;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_438*tmp_99;
      real_t tmp_447 = 0.042507265838595799*tmp_110;
      real_t tmp_448 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_449 = tmp_15*(tmp_16 + tmp_448);
      real_t tmp_450 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_451 = tmp_15*(tmp_23 + tmp_450);
      real_t tmp_452 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_453 = tmp_15*(tmp_30 + tmp_452);
      real_t tmp_454 = tmp_22*tmp_451 + tmp_29*tmp_453 + tmp_449*tmp_7 - 1.0/4.0;
      real_t tmp_455 = tmp_37*tmp_449 + tmp_38*tmp_451 + tmp_39*tmp_453 - 1.0/4.0;
      real_t tmp_456 = tmp_41*tmp_449 + tmp_42*tmp_451 + tmp_43*tmp_453 - 1.0/4.0;
      real_t tmp_457 = tmp_0*tmp_454 + tmp_1*tmp_455 + tmp_4*tmp_456;
      real_t tmp_458 = tmp_10*tmp_454 + tmp_12*tmp_455 + tmp_456*tmp_8;
      real_t tmp_459 = tmp_11*tmp_454 + tmp_2*tmp_456 + tmp_455*tmp_5;
      real_t tmp_460 = tmp_61*(tmp_448 + tmp_88);
      real_t tmp_461 = tmp_61*(tmp_450 + tmp_90);
      real_t tmp_462 = tmp_61*(tmp_452 + tmp_92);
      real_t tmp_463 = tmp_460*tmp_75 + tmp_461*tmp_84 + tmp_462*tmp_66;
      real_t tmp_464 = tmp_460*tmp_73 + tmp_461*tmp_82 + tmp_462*tmp_64;
      real_t tmp_465 = tmp_460*tmp_71 + tmp_461*tmp_79 + tmp_462*tmp_52;
      real_t tmp_466 = -tmp_463 - tmp_464 - tmp_465 + 1;
      real_t tmp_467 = tmp_459*tmp_99;
      real_t tmp_468 = 0.0068572537431980923*tmp_110;
      real_t tmp_469 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_470 = tmp_15*(tmp_16 + tmp_469);
      real_t tmp_471 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_472 = tmp_15*(tmp_23 + tmp_471);
      real_t tmp_473 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_474 = tmp_15*(tmp_30 + tmp_473);
      real_t tmp_475 = tmp_22*tmp_472 + tmp_29*tmp_474 + tmp_470*tmp_7 - 1.0/4.0;
      real_t tmp_476 = tmp_37*tmp_470 + tmp_38*tmp_472 + tmp_39*tmp_474 - 1.0/4.0;
      real_t tmp_477 = tmp_41*tmp_470 + tmp_42*tmp_472 + tmp_43*tmp_474 - 1.0/4.0;
      real_t tmp_478 = tmp_0*tmp_475 + tmp_1*tmp_476 + tmp_4*tmp_477;
      real_t tmp_479 = tmp_10*tmp_475 + tmp_12*tmp_476 + tmp_477*tmp_8;
      real_t tmp_480 = tmp_11*tmp_475 + tmp_2*tmp_477 + tmp_476*tmp_5;
      real_t tmp_481 = tmp_61*(tmp_469 + tmp_88);
      real_t tmp_482 = tmp_61*(tmp_471 + tmp_90);
      real_t tmp_483 = tmp_61*(tmp_473 + tmp_92);
      real_t tmp_484 = tmp_481*tmp_75 + tmp_482*tmp_84 + tmp_483*tmp_66;
      real_t tmp_485 = tmp_481*tmp_73 + tmp_482*tmp_82 + tmp_483*tmp_64;
      real_t tmp_486 = tmp_481*tmp_71 + tmp_482*tmp_79 + tmp_483*tmp_52;
      real_t tmp_487 = -tmp_484 - tmp_485 - tmp_486 + 1;
      real_t tmp_488 = tmp_480*tmp_99;
      real_t tmp_489 = 0.037198804536718075*tmp_110;
      real_t tmp_490 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_491 = tmp_15*(tmp_16 + tmp_490);
      real_t tmp_492 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_493 = tmp_15*(tmp_23 + tmp_492);
      real_t tmp_494 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_495 = tmp_15*(tmp_30 + tmp_494);
      real_t tmp_496 = tmp_22*tmp_493 + tmp_29*tmp_495 + tmp_491*tmp_7 - 1.0/4.0;
      real_t tmp_497 = tmp_37*tmp_491 + tmp_38*tmp_493 + tmp_39*tmp_495 - 1.0/4.0;
      real_t tmp_498 = tmp_41*tmp_491 + tmp_42*tmp_493 + tmp_43*tmp_495 - 1.0/4.0;
      real_t tmp_499 = tmp_0*tmp_496 + tmp_1*tmp_497 + tmp_4*tmp_498;
      real_t tmp_500 = tmp_10*tmp_496 + tmp_12*tmp_497 + tmp_498*tmp_8;
      real_t tmp_501 = tmp_11*tmp_496 + tmp_2*tmp_498 + tmp_497*tmp_5;
      real_t tmp_502 = tmp_61*(tmp_490 + tmp_88);
      real_t tmp_503 = tmp_61*(tmp_492 + tmp_90);
      real_t tmp_504 = tmp_61*(tmp_494 + tmp_92);
      real_t tmp_505 = tmp_502*tmp_75 + tmp_503*tmp_84 + tmp_504*tmp_66;
      real_t tmp_506 = tmp_502*tmp_73 + tmp_503*tmp_82 + tmp_504*tmp_64;
      real_t tmp_507 = tmp_502*tmp_71 + tmp_503*tmp_79 + tmp_504*tmp_52;
      real_t tmp_508 = -tmp_505 - tmp_506 - tmp_507 + 1;
      real_t tmp_509 = tmp_501*tmp_99;
      real_t tmp_510 = 0.042507265838595799*tmp_110;
      real_t tmp_511 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_512 = tmp_15*(tmp_16 + tmp_511);
      real_t tmp_513 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_514 = tmp_15*(tmp_23 + tmp_513);
      real_t tmp_515 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_516 = tmp_15*(tmp_30 + tmp_515);
      real_t tmp_517 = tmp_22*tmp_514 + tmp_29*tmp_516 + tmp_512*tmp_7 - 1.0/4.0;
      real_t tmp_518 = tmp_37*tmp_512 + tmp_38*tmp_514 + tmp_39*tmp_516 - 1.0/4.0;
      real_t tmp_519 = tmp_41*tmp_512 + tmp_42*tmp_514 + tmp_43*tmp_516 - 1.0/4.0;
      real_t tmp_520 = tmp_0*tmp_517 + tmp_1*tmp_518 + tmp_4*tmp_519;
      real_t tmp_521 = tmp_10*tmp_517 + tmp_12*tmp_518 + tmp_519*tmp_8;
      real_t tmp_522 = tmp_11*tmp_517 + tmp_2*tmp_519 + tmp_5*tmp_518;
      real_t tmp_523 = tmp_61*(tmp_511 + tmp_88);
      real_t tmp_524 = tmp_61*(tmp_513 + tmp_90);
      real_t tmp_525 = tmp_61*(tmp_515 + tmp_92);
      real_t tmp_526 = tmp_523*tmp_75 + tmp_524*tmp_84 + tmp_525*tmp_66;
      real_t tmp_527 = tmp_523*tmp_73 + tmp_524*tmp_82 + tmp_525*tmp_64;
      real_t tmp_528 = tmp_52*tmp_525 + tmp_523*tmp_71 + tmp_524*tmp_79;
      real_t tmp_529 = -tmp_526 - tmp_527 - tmp_528 + 1;
      real_t tmp_530 = tmp_522*tmp_99;
      real_t tmp_531 = 0.019202922745021479*tmp_110;
      real_t tmp_532 = p_affine_13_1*tmp_76;
      real_t tmp_533 = p_affine_13_1*tmp_67;
      real_t tmp_534 = p_affine_13_0*tmp_67 + p_affine_13_1*tmp_85 + p_affine_13_2*tmp_76;
      real_t tmp_535 = p_affine_13_1*tmp_74;
      real_t tmp_536 = p_affine_13_1*tmp_65;
      real_t tmp_537 = p_affine_13_0*tmp_65 + p_affine_13_1*tmp_83 + p_affine_13_2*tmp_74;
      real_t tmp_538 = p_affine_13_1*tmp_72;
      real_t tmp_539 = p_affine_13_1*tmp_63;
      real_t tmp_540 = p_affine_13_0*tmp_63 + p_affine_13_1*tmp_81 + p_affine_13_2*tmp_72;
      real_t a_0_0 = tmp_111*(-tmp_100*tmp_97 - tmp_109*tmp_97 + tmp_45*tmp_69 + tmp_70*tmp_78 + tmp_86*tmp_87) + tmp_132*(-tmp_109*tmp_130 + tmp_121*tmp_69 + tmp_122*tmp_78 + tmp_123*tmp_86 - tmp_130*tmp_131) + tmp_153*(-tmp_109*tmp_151 + tmp_142*tmp_69 + tmp_143*tmp_78 + tmp_144*tmp_86 - tmp_151*tmp_152) + tmp_174*(-tmp_109*tmp_172 + tmp_163*tmp_69 + tmp_164*tmp_78 + tmp_165*tmp_86 - tmp_172*tmp_173) + tmp_195*(-tmp_109*tmp_193 + tmp_184*tmp_69 + tmp_185*tmp_78 + tmp_186*tmp_86 - tmp_193*tmp_194) + tmp_216*(-tmp_109*tmp_214 + tmp_205*tmp_69 + tmp_206*tmp_78 + tmp_207*tmp_86 - tmp_214*tmp_215) + tmp_237*(-tmp_109*tmp_235 + tmp_226*tmp_69 + tmp_227*tmp_78 + tmp_228*tmp_86 - tmp_235*tmp_236) + tmp_258*(-tmp_109*tmp_256 + tmp_247*tmp_69 + tmp_248*tmp_78 + tmp_249*tmp_86 - tmp_256*tmp_257) + tmp_279*(-tmp_109*tmp_277 + tmp_268*tmp_69 + tmp_269*tmp_78 + tmp_270*tmp_86 - tmp_277*tmp_278) + tmp_300*(-tmp_109*tmp_298 + tmp_289*tmp_69 + tmp_290*tmp_78 + tmp_291*tmp_86 - tmp_298*tmp_299) + tmp_321*(-tmp_109*tmp_319 + tmp_310*tmp_69 + tmp_311*tmp_78 + tmp_312*tmp_86 - tmp_319*tmp_320) + tmp_342*(-tmp_109*tmp_340 + tmp_331*tmp_69 + tmp_332*tmp_78 + tmp_333*tmp_86 - tmp_340*tmp_341) + tmp_363*(-tmp_109*tmp_361 + tmp_352*tmp_69 + tmp_353*tmp_78 + tmp_354*tmp_86 - tmp_361*tmp_362) + tmp_384*(-tmp_109*tmp_382 + tmp_373*tmp_69 + tmp_374*tmp_78 + tmp_375*tmp_86 - tmp_382*tmp_383) + tmp_405*(-tmp_109*tmp_403 + tmp_394*tmp_69 + tmp_395*tmp_78 + tmp_396*tmp_86 - tmp_403*tmp_404) + tmp_426*(-tmp_109*tmp_424 + tmp_415*tmp_69 + tmp_416*tmp_78 + tmp_417*tmp_86 - tmp_424*tmp_425) + tmp_447*(-tmp_109*tmp_445 + tmp_436*tmp_69 + tmp_437*tmp_78 + tmp_438*tmp_86 - tmp_445*tmp_446) + tmp_468*(-tmp_109*tmp_466 + tmp_457*tmp_69 + tmp_458*tmp_78 + tmp_459*tmp_86 - tmp_466*tmp_467) + tmp_489*(-tmp_109*tmp_487 + tmp_478*tmp_69 + tmp_479*tmp_78 + tmp_480*tmp_86 - tmp_487*tmp_488) + tmp_510*(-tmp_109*tmp_508 + tmp_499*tmp_69 + tmp_500*tmp_78 + tmp_501*tmp_86 - tmp_508*tmp_509) + tmp_531*(-tmp_109*tmp_529 + tmp_520*tmp_69 + tmp_521*tmp_78 + tmp_522*tmp_86 - tmp_529*tmp_530);
      real_t a_1_0 = tmp_111*(-tmp_100*tmp_94 - tmp_109*tmp_94 + tmp_45*tmp_533 + tmp_532*tmp_70 + tmp_534*tmp_87) + tmp_132*(-tmp_109*tmp_127 + tmp_121*tmp_533 + tmp_122*tmp_532 + tmp_123*tmp_534 - tmp_127*tmp_131) + tmp_153*(-tmp_109*tmp_148 + tmp_142*tmp_533 + tmp_143*tmp_532 + tmp_144*tmp_534 - tmp_148*tmp_152) + tmp_174*(-tmp_109*tmp_169 + tmp_163*tmp_533 + tmp_164*tmp_532 + tmp_165*tmp_534 - tmp_169*tmp_173) + tmp_195*(-tmp_109*tmp_190 + tmp_184*tmp_533 + tmp_185*tmp_532 + tmp_186*tmp_534 - tmp_190*tmp_194) + tmp_216*(-tmp_109*tmp_211 + tmp_205*tmp_533 + tmp_206*tmp_532 + tmp_207*tmp_534 - tmp_211*tmp_215) + tmp_237*(-tmp_109*tmp_232 + tmp_226*tmp_533 + tmp_227*tmp_532 + tmp_228*tmp_534 - tmp_232*tmp_236) + tmp_258*(-tmp_109*tmp_253 + tmp_247*tmp_533 + tmp_248*tmp_532 + tmp_249*tmp_534 - tmp_253*tmp_257) + tmp_279*(-tmp_109*tmp_274 + tmp_268*tmp_533 + tmp_269*tmp_532 + tmp_270*tmp_534 - tmp_274*tmp_278) + tmp_300*(-tmp_109*tmp_295 + tmp_289*tmp_533 + tmp_290*tmp_532 + tmp_291*tmp_534 - tmp_295*tmp_299) + tmp_321*(-tmp_109*tmp_316 + tmp_310*tmp_533 + tmp_311*tmp_532 + tmp_312*tmp_534 - tmp_316*tmp_320) + tmp_342*(-tmp_109*tmp_337 + tmp_331*tmp_533 + tmp_332*tmp_532 + tmp_333*tmp_534 - tmp_337*tmp_341) + tmp_363*(-tmp_109*tmp_358 + tmp_352*tmp_533 + tmp_353*tmp_532 + tmp_354*tmp_534 - tmp_358*tmp_362) + tmp_384*(-tmp_109*tmp_379 + tmp_373*tmp_533 + tmp_374*tmp_532 + tmp_375*tmp_534 - tmp_379*tmp_383) + tmp_405*(-tmp_109*tmp_400 + tmp_394*tmp_533 + tmp_395*tmp_532 + tmp_396*tmp_534 - tmp_400*tmp_404) + tmp_426*(-tmp_109*tmp_421 + tmp_415*tmp_533 + tmp_416*tmp_532 + tmp_417*tmp_534 - tmp_421*tmp_425) + tmp_447*(-tmp_109*tmp_442 + tmp_436*tmp_533 + tmp_437*tmp_532 + tmp_438*tmp_534 - tmp_442*tmp_446) + tmp_468*(-tmp_109*tmp_463 + tmp_457*tmp_533 + tmp_458*tmp_532 + tmp_459*tmp_534 - tmp_463*tmp_467) + tmp_489*(-tmp_109*tmp_484 + tmp_478*tmp_533 + tmp_479*tmp_532 + tmp_480*tmp_534 - tmp_484*tmp_488) + tmp_510*(-tmp_109*tmp_505 + tmp_499*tmp_533 + tmp_500*tmp_532 + tmp_501*tmp_534 - tmp_505*tmp_509) + tmp_531*(-tmp_109*tmp_526 + tmp_520*tmp_533 + tmp_521*tmp_532 + tmp_522*tmp_534 - tmp_526*tmp_530);
      real_t a_2_0 = tmp_111*(-tmp_100*tmp_95 - tmp_109*tmp_95 + tmp_45*tmp_536 + tmp_535*tmp_70 + tmp_537*tmp_87) + tmp_132*(-tmp_109*tmp_128 + tmp_121*tmp_536 + tmp_122*tmp_535 + tmp_123*tmp_537 - tmp_128*tmp_131) + tmp_153*(-tmp_109*tmp_149 + tmp_142*tmp_536 + tmp_143*tmp_535 + tmp_144*tmp_537 - tmp_149*tmp_152) + tmp_174*(-tmp_109*tmp_170 + tmp_163*tmp_536 + tmp_164*tmp_535 + tmp_165*tmp_537 - tmp_170*tmp_173) + tmp_195*(-tmp_109*tmp_191 + tmp_184*tmp_536 + tmp_185*tmp_535 + tmp_186*tmp_537 - tmp_191*tmp_194) + tmp_216*(-tmp_109*tmp_212 + tmp_205*tmp_536 + tmp_206*tmp_535 + tmp_207*tmp_537 - tmp_212*tmp_215) + tmp_237*(-tmp_109*tmp_233 + tmp_226*tmp_536 + tmp_227*tmp_535 + tmp_228*tmp_537 - tmp_233*tmp_236) + tmp_258*(-tmp_109*tmp_254 + tmp_247*tmp_536 + tmp_248*tmp_535 + tmp_249*tmp_537 - tmp_254*tmp_257) + tmp_279*(-tmp_109*tmp_275 + tmp_268*tmp_536 + tmp_269*tmp_535 + tmp_270*tmp_537 - tmp_275*tmp_278) + tmp_300*(-tmp_109*tmp_296 + tmp_289*tmp_536 + tmp_290*tmp_535 + tmp_291*tmp_537 - tmp_296*tmp_299) + tmp_321*(-tmp_109*tmp_317 + tmp_310*tmp_536 + tmp_311*tmp_535 + tmp_312*tmp_537 - tmp_317*tmp_320) + tmp_342*(-tmp_109*tmp_338 + tmp_331*tmp_536 + tmp_332*tmp_535 + tmp_333*tmp_537 - tmp_338*tmp_341) + tmp_363*(-tmp_109*tmp_359 + tmp_352*tmp_536 + tmp_353*tmp_535 + tmp_354*tmp_537 - tmp_359*tmp_362) + tmp_384*(-tmp_109*tmp_380 + tmp_373*tmp_536 + tmp_374*tmp_535 + tmp_375*tmp_537 - tmp_380*tmp_383) + tmp_405*(-tmp_109*tmp_401 + tmp_394*tmp_536 + tmp_395*tmp_535 + tmp_396*tmp_537 - tmp_401*tmp_404) + tmp_426*(-tmp_109*tmp_422 + tmp_415*tmp_536 + tmp_416*tmp_535 + tmp_417*tmp_537 - tmp_422*tmp_425) + tmp_447*(-tmp_109*tmp_443 + tmp_436*tmp_536 + tmp_437*tmp_535 + tmp_438*tmp_537 - tmp_443*tmp_446) + tmp_468*(-tmp_109*tmp_464 + tmp_457*tmp_536 + tmp_458*tmp_535 + tmp_459*tmp_537 - tmp_464*tmp_467) + tmp_489*(-tmp_109*tmp_485 + tmp_478*tmp_536 + tmp_479*tmp_535 + tmp_480*tmp_537 - tmp_485*tmp_488) + tmp_510*(-tmp_109*tmp_506 + tmp_499*tmp_536 + tmp_500*tmp_535 + tmp_501*tmp_537 - tmp_506*tmp_509) + tmp_531*(-tmp_109*tmp_527 + tmp_520*tmp_536 + tmp_521*tmp_535 + tmp_522*tmp_537 - tmp_527*tmp_530);
      real_t a_3_0 = tmp_111*(-tmp_100*tmp_96 - tmp_109*tmp_96 + tmp_45*tmp_539 + tmp_538*tmp_70 + tmp_540*tmp_87) + tmp_132*(-tmp_109*tmp_129 + tmp_121*tmp_539 + tmp_122*tmp_538 + tmp_123*tmp_540 - tmp_129*tmp_131) + tmp_153*(-tmp_109*tmp_150 + tmp_142*tmp_539 + tmp_143*tmp_538 + tmp_144*tmp_540 - tmp_150*tmp_152) + tmp_174*(-tmp_109*tmp_171 + tmp_163*tmp_539 + tmp_164*tmp_538 + tmp_165*tmp_540 - tmp_171*tmp_173) + tmp_195*(-tmp_109*tmp_192 + tmp_184*tmp_539 + tmp_185*tmp_538 + tmp_186*tmp_540 - tmp_192*tmp_194) + tmp_216*(-tmp_109*tmp_213 + tmp_205*tmp_539 + tmp_206*tmp_538 + tmp_207*tmp_540 - tmp_213*tmp_215) + tmp_237*(-tmp_109*tmp_234 + tmp_226*tmp_539 + tmp_227*tmp_538 + tmp_228*tmp_540 - tmp_234*tmp_236) + tmp_258*(-tmp_109*tmp_255 + tmp_247*tmp_539 + tmp_248*tmp_538 + tmp_249*tmp_540 - tmp_255*tmp_257) + tmp_279*(-tmp_109*tmp_276 + tmp_268*tmp_539 + tmp_269*tmp_538 + tmp_270*tmp_540 - tmp_276*tmp_278) + tmp_300*(-tmp_109*tmp_297 + tmp_289*tmp_539 + tmp_290*tmp_538 + tmp_291*tmp_540 - tmp_297*tmp_299) + tmp_321*(-tmp_109*tmp_318 + tmp_310*tmp_539 + tmp_311*tmp_538 + tmp_312*tmp_540 - tmp_318*tmp_320) + tmp_342*(-tmp_109*tmp_339 + tmp_331*tmp_539 + tmp_332*tmp_538 + tmp_333*tmp_540 - tmp_339*tmp_341) + tmp_363*(-tmp_109*tmp_360 + tmp_352*tmp_539 + tmp_353*tmp_538 + tmp_354*tmp_540 - tmp_360*tmp_362) + tmp_384*(-tmp_109*tmp_381 + tmp_373*tmp_539 + tmp_374*tmp_538 + tmp_375*tmp_540 - tmp_381*tmp_383) + tmp_405*(-tmp_109*tmp_402 + tmp_394*tmp_539 + tmp_395*tmp_538 + tmp_396*tmp_540 - tmp_402*tmp_404) + tmp_426*(-tmp_109*tmp_423 + tmp_415*tmp_539 + tmp_416*tmp_538 + tmp_417*tmp_540 - tmp_423*tmp_425) + tmp_447*(-tmp_109*tmp_444 + tmp_436*tmp_539 + tmp_437*tmp_538 + tmp_438*tmp_540 - tmp_444*tmp_446) + tmp_468*(-tmp_109*tmp_465 + tmp_457*tmp_539 + tmp_458*tmp_538 + tmp_459*tmp_540 - tmp_465*tmp_467) + tmp_489*(-tmp_109*tmp_486 + tmp_478*tmp_539 + tmp_479*tmp_538 + tmp_480*tmp_540 - tmp_486*tmp_488) + tmp_510*(-tmp_109*tmp_507 + tmp_499*tmp_539 + tmp_500*tmp_538 + tmp_501*tmp_540 - tmp_507*tmp_509) + tmp_531*(-tmp_109*tmp_528 + tmp_520*tmp_539 + tmp_521*tmp_538 + tmp_522*tmp_540 - tmp_528*tmp_530);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_1*tmp_50;
      real_t tmp_52 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_53 = tmp_40*tmp_46;
      real_t tmp_54 = tmp_35*tmp_46;
      real_t tmp_55 = tmp_46*tmp_5;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_1*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_41*tmp_58;
      real_t tmp_60 = tmp_36*tmp_58;
      real_t tmp_61 = tmp_21*tmp_58;
      real_t tmp_62 = p_affine_13_0*tmp_50 + p_affine_13_1*(-tmp_59 - tmp_60 - tmp_61) + p_affine_13_2*tmp_56;
      real_t tmp_63 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_21*tmp_46;
      real_t tmp_68 = tmp_36*tmp_46;
      real_t tmp_69 = tmp_41*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_0*tmp_67 + tmp_1*tmp_68 + tmp_2*tmp_47 + tmp_3*tmp_69 + tmp_4*tmp_48 + tmp_49*tmp_9) + p_affine_13_1*(tmp_2*tmp_59 + tmp_4*tmp_60 + tmp_61*tmp_9) + p_affine_13_2*(tmp_10*tmp_68 + tmp_2*tmp_53 + tmp_4*tmp_54 + tmp_55*tmp_9 + tmp_6*tmp_69 + tmp_67*tmp_8);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_1*tmp_79 + tmp_3*tmp_81;
      real_t tmp_83 = tmp_10*tmp_79 + tmp_6*tmp_81 + tmp_77*tmp_8;
      real_t tmp_84 = tmp_2*tmp_81 + tmp_4*tmp_79 + tmp_77*tmp_9;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_1*tmp_93 + tmp_3*tmp_95;
      real_t tmp_97 = tmp_10*tmp_93 + tmp_6*tmp_95 + tmp_8*tmp_91;
      real_t tmp_98 = tmp_2*tmp_95 + tmp_4*tmp_93 + tmp_9*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_1*tmp_107 + tmp_109*tmp_3;
      real_t tmp_111 = tmp_10*tmp_107 + tmp_105*tmp_8 + tmp_109*tmp_6;
      real_t tmp_112 = tmp_105*tmp_9 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_1*tmp_121 + tmp_123*tmp_3;
      real_t tmp_125 = tmp_10*tmp_121 + tmp_119*tmp_8 + tmp_123*tmp_6;
      real_t tmp_126 = tmp_119*tmp_9 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_1*tmp_135 + tmp_137*tmp_3;
      real_t tmp_139 = tmp_10*tmp_135 + tmp_133*tmp_8 + tmp_137*tmp_6;
      real_t tmp_140 = tmp_133*tmp_9 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_1*tmp_149 + tmp_151*tmp_3;
      real_t tmp_153 = tmp_10*tmp_149 + tmp_147*tmp_8 + tmp_151*tmp_6;
      real_t tmp_154 = tmp_147*tmp_9 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_1*tmp_163 + tmp_165*tmp_3;
      real_t tmp_167 = tmp_10*tmp_163 + tmp_161*tmp_8 + tmp_165*tmp_6;
      real_t tmp_168 = tmp_161*tmp_9 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_1*tmp_177 + tmp_179*tmp_3;
      real_t tmp_181 = tmp_10*tmp_177 + tmp_175*tmp_8 + tmp_179*tmp_6;
      real_t tmp_182 = tmp_175*tmp_9 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_1*tmp_191 + tmp_193*tmp_3;
      real_t tmp_195 = tmp_10*tmp_191 + tmp_189*tmp_8 + tmp_193*tmp_6;
      real_t tmp_196 = tmp_189*tmp_9 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_1*tmp_205 + tmp_207*tmp_3;
      real_t tmp_209 = tmp_10*tmp_205 + tmp_203*tmp_8 + tmp_207*tmp_6;
      real_t tmp_210 = tmp_2*tmp_207 + tmp_203*tmp_9 + tmp_205*tmp_4;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_1*tmp_219 + tmp_221*tmp_3;
      real_t tmp_223 = tmp_10*tmp_219 + tmp_217*tmp_8 + tmp_221*tmp_6;
      real_t tmp_224 = tmp_2*tmp_221 + tmp_217*tmp_9 + tmp_219*tmp_4;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_1*tmp_233 + tmp_235*tmp_3;
      real_t tmp_237 = tmp_10*tmp_233 + tmp_231*tmp_8 + tmp_235*tmp_6;
      real_t tmp_238 = tmp_2*tmp_235 + tmp_231*tmp_9 + tmp_233*tmp_4;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_1*tmp_247 + tmp_249*tmp_3;
      real_t tmp_251 = tmp_10*tmp_247 + tmp_245*tmp_8 + tmp_249*tmp_6;
      real_t tmp_252 = tmp_2*tmp_249 + tmp_245*tmp_9 + tmp_247*tmp_4;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_1*tmp_261 + tmp_263*tmp_3;
      real_t tmp_265 = tmp_10*tmp_261 + tmp_259*tmp_8 + tmp_263*tmp_6;
      real_t tmp_266 = tmp_2*tmp_263 + tmp_259*tmp_9 + tmp_261*tmp_4;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_1*tmp_275 + tmp_277*tmp_3;
      real_t tmp_279 = tmp_10*tmp_275 + tmp_273*tmp_8 + tmp_277*tmp_6;
      real_t tmp_280 = tmp_2*tmp_277 + tmp_273*tmp_9 + tmp_275*tmp_4;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_1*tmp_289 + tmp_291*tmp_3;
      real_t tmp_293 = tmp_10*tmp_289 + tmp_287*tmp_8 + tmp_291*tmp_6;
      real_t tmp_294 = tmp_2*tmp_291 + tmp_287*tmp_9 + tmp_289*tmp_4;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_1*tmp_303 + tmp_3*tmp_305;
      real_t tmp_307 = tmp_10*tmp_303 + tmp_301*tmp_8 + tmp_305*tmp_6;
      real_t tmp_308 = tmp_2*tmp_305 + tmp_301*tmp_9 + tmp_303*tmp_4;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_1*tmp_317 + tmp_3*tmp_319;
      real_t tmp_321 = tmp_10*tmp_317 + tmp_315*tmp_8 + tmp_319*tmp_6;
      real_t tmp_322 = tmp_2*tmp_319 + tmp_315*tmp_9 + tmp_317*tmp_4;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_1*tmp_331 + tmp_3*tmp_333;
      real_t tmp_335 = tmp_10*tmp_331 + tmp_329*tmp_8 + tmp_333*tmp_6;
      real_t tmp_336 = tmp_2*tmp_333 + tmp_329*tmp_9 + tmp_331*tmp_4;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_1*tmp_345 + tmp_3*tmp_347;
      real_t tmp_349 = tmp_10*tmp_345 + tmp_343*tmp_8 + tmp_347*tmp_6;
      real_t tmp_350 = tmp_2*tmp_347 + tmp_343*tmp_9 + tmp_345*tmp_4;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_1*tmp_55;
      real_t tmp_354 = p_affine_13_1*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_49 + p_affine_13_1*tmp_61 + p_affine_13_2*tmp_55;
      real_t tmp_356 = p_affine_13_1*tmp_54;
      real_t tmp_357 = p_affine_13_1*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_60 + p_affine_13_2*tmp_54;
      real_t tmp_359 = p_affine_13_1*tmp_53;
      real_t tmp_360 = p_affine_13_1*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_59 + p_affine_13_2*tmp_53;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_1_0 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_2_0 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_3_0 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_02 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_02()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_10 - tmp_14;
      real_t tmp_20 = p_affine_0_0*p_affine_1_1;
      real_t tmp_21 = p_affine_0_0*p_affine_1_2;
      real_t tmp_22 = p_affine_2_1*p_affine_3_2;
      real_t tmp_23 = p_affine_0_1*p_affine_1_0;
      real_t tmp_24 = p_affine_0_1*p_affine_1_2;
      real_t tmp_25 = p_affine_2_2*p_affine_3_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_0;
      real_t tmp_27 = p_affine_0_2*p_affine_1_1;
      real_t tmp_28 = p_affine_2_0*p_affine_3_1;
      real_t tmp_29 = p_affine_2_2*p_affine_3_1;
      real_t tmp_30 = p_affine_2_0*p_affine_3_2;
      real_t tmp_31 = p_affine_2_1*p_affine_3_0;
      real_t tmp_32 = std::abs(p_affine_0_0*tmp_22 - p_affine_0_0*tmp_29 + p_affine_0_1*tmp_25 - p_affine_0_1*tmp_30 + p_affine_0_2*tmp_28 - p_affine_0_2*tmp_31 - p_affine_1_0*tmp_22 + p_affine_1_0*tmp_29 - p_affine_1_1*tmp_25 + p_affine_1_1*tmp_30 - p_affine_1_2*tmp_28 + p_affine_1_2*tmp_31 + p_affine_2_0*tmp_24 - p_affine_2_0*tmp_27 - p_affine_2_1*tmp_21 + p_affine_2_1*tmp_26 + p_affine_2_2*tmp_20 - p_affine_2_2*tmp_23 - p_affine_3_0*tmp_24 + p_affine_3_0*tmp_27 + p_affine_3_1*tmp_21 - p_affine_3_1*tmp_26 - p_affine_3_2*tmp_20 + p_affine_3_2*tmp_23);
      real_t tmp_33 = tmp_32*(-tmp_17*tmp_18 - tmp_17*tmp_19 - tmp_17*tmp_6);
      real_t tmp_34 = 0.0044044418180681378*tmp_33;
      real_t tmp_35 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_36 = 1.0*tmp_16;
      real_t tmp_37 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_38 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_39 = -tmp_35*tmp_36 - tmp_36*tmp_37 - tmp_36*tmp_38;
      real_t tmp_40 = 2*tmp_39;
      real_t tmp_41 = tmp_33*tmp_40;
      real_t tmp_42 = 2.0*tmp_16;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_33*tmp_43;
      real_t tmp_45 = tmp_37*tmp_42;
      real_t tmp_46 = tmp_33*tmp_45;
      real_t tmp_47 = tmp_35*tmp_42;
      real_t tmp_48 = tmp_33*tmp_47;
      real_t tmp_49 = tmp_19*tmp_32;
      real_t tmp_50 = 0.0044044418180681378*tmp_49;
      real_t tmp_51 = tmp_36*tmp_39;
      real_t tmp_52 = tmp_49*tmp_51;
      real_t tmp_53 = 1.0/(tmp_15*tmp_15);
      real_t tmp_54 = tmp_38*tmp_53;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = tmp_37*tmp_53;
      real_t tmp_57 = tmp_49*tmp_56;
      real_t tmp_58 = tmp_35*tmp_53;
      real_t tmp_59 = tmp_49*tmp_58;
      real_t tmp_60 = tmp_18*tmp_32;
      real_t tmp_61 = tmp_51*tmp_60;
      real_t tmp_62 = tmp_54*tmp_60;
      real_t tmp_63 = tmp_56*tmp_60;
      real_t tmp_64 = tmp_58*tmp_60;
      real_t tmp_65 = tmp_32*tmp_6;
      real_t tmp_66 = tmp_51*tmp_65;
      real_t tmp_67 = tmp_54*tmp_65;
      real_t tmp_68 = tmp_56*tmp_65;
      real_t tmp_69 = tmp_58*tmp_65;
      real_t a_0_0 = tmp_34*tmp_40 + 0.16226222484859867*tmp_41;
      real_t a_0_1 = tmp_34*tmp_43 + 0.16226222484859867*tmp_44;
      real_t a_0_2 = tmp_34*tmp_45 + 0.16226222484859867*tmp_46;
      real_t a_0_3 = tmp_34*tmp_47 + 0.16226222484859867*tmp_48;
      real_t a_1_0 = tmp_50*tmp_51 + 0.16226222484859867*tmp_52;
      real_t a_1_1 = tmp_50*tmp_54 + 0.16226222484859867*tmp_55;
      real_t a_1_2 = tmp_50*tmp_56 + 0.16226222484859867*tmp_57;
      real_t a_1_3 = tmp_50*tmp_58 + 0.16226222484859867*tmp_59;
      real_t a_2_0 = 0.1666666666666668*tmp_61;
      real_t a_2_1 = 0.1666666666666668*tmp_62;
      real_t a_2_2 = 0.1666666666666668*tmp_63;
      real_t a_2_3 = 0.1666666666666668*tmp_64;
      real_t a_3_0 = 0.1666666666666668*tmp_66;
      real_t a_3_1 = 0.1666666666666668*tmp_67;
      real_t a_3_2 = 0.1666666666666668*tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_38*tmp_44;
      real_t tmp_46 = tmp_34*tmp_44;
      real_t tmp_47 = tmp_44*tmp_6;
      real_t tmp_48 = p_affine_13_0*(-tmp_45 - tmp_46 - tmp_47);
      real_t tmp_49 = tmp_40*tmp_44;
      real_t tmp_50 = tmp_36*tmp_44;
      real_t tmp_51 = tmp_27*tmp_44;
      real_t tmp_52 = p_affine_13_2*(-tmp_49 - tmp_50 - tmp_51);
      real_t tmp_53 = 1.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_54 = 0.0068572537431980923*tmp_53;
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_57 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_58 = tmp_21*tmp_56 + tmp_27*tmp_57 + tmp_55*tmp_6;
      real_t tmp_59 = tmp_34*tmp_55 + tmp_35*tmp_56 + tmp_36*tmp_57;
      real_t tmp_60 = tmp_38*tmp_55 + tmp_39*tmp_56 + tmp_40*tmp_57;
      real_t tmp_61 = -tmp_58 - tmp_59 - tmp_60 + 1;
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = 0.037198804536718075*tmp_53;
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_65 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_66 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_67 = tmp_21*tmp_65 + tmp_27*tmp_66 + tmp_6*tmp_64;
      real_t tmp_68 = tmp_34*tmp_64 + tmp_35*tmp_65 + tmp_36*tmp_66;
      real_t tmp_69 = tmp_38*tmp_64 + tmp_39*tmp_65 + tmp_40*tmp_66;
      real_t tmp_70 = -tmp_67 - tmp_68 - tmp_69 + 1;
      real_t tmp_71 = 1.0*tmp_70;
      real_t tmp_72 = 0.020848748529055869*tmp_53;
      real_t tmp_73 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_6*tmp_73;
      real_t tmp_77 = tmp_34*tmp_73 + tmp_35*tmp_74 + tmp_36*tmp_75;
      real_t tmp_78 = tmp_38*tmp_73 + tmp_39*tmp_74 + tmp_40*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 1.0*tmp_79;
      real_t tmp_81 = 0.019202922745021479*tmp_53;
      real_t tmp_82 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_83 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_84 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_85 = tmp_21*tmp_83 + tmp_27*tmp_84 + tmp_6*tmp_82;
      real_t tmp_86 = tmp_34*tmp_82 + tmp_35*tmp_83 + tmp_36*tmp_84;
      real_t tmp_87 = tmp_38*tmp_82 + tmp_39*tmp_83 + tmp_40*tmp_84;
      real_t tmp_88 = -tmp_85 - tmp_86 - tmp_87 + 1;
      real_t tmp_89 = 1.0*tmp_88;
      real_t tmp_90 = 0.020848748529055869*tmp_53;
      real_t tmp_91 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_92 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_93 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_94 = tmp_21*tmp_92 + tmp_27*tmp_93 + tmp_6*tmp_91;
      real_t tmp_95 = tmp_34*tmp_91 + tmp_35*tmp_92 + tmp_36*tmp_93;
      real_t tmp_96 = tmp_38*tmp_91 + tmp_39*tmp_92 + tmp_40*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = 1.0*tmp_97;
      real_t tmp_99 = 0.019202922745021479*tmp_53;
      real_t tmp_100 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_101 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_102 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_103 = tmp_100*tmp_6 + tmp_101*tmp_21 + tmp_102*tmp_27;
      real_t tmp_104 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_102*tmp_36;
      real_t tmp_105 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_102*tmp_40;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 1.0*tmp_106;
      real_t tmp_108 = 0.020848748529055869*tmp_53;
      real_t tmp_109 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_110 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_111 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_112 = tmp_109*tmp_6 + tmp_110*tmp_21 + tmp_111*tmp_27;
      real_t tmp_113 = tmp_109*tmp_34 + tmp_110*tmp_35 + tmp_111*tmp_36;
      real_t tmp_114 = tmp_109*tmp_38 + tmp_110*tmp_39 + tmp_111*tmp_40;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 1.0*tmp_115;
      real_t tmp_117 = 0.019202922745021479*tmp_53;
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 1.0*tmp_124;
      real_t tmp_126 = 0.020848748529055869*tmp_53;
      real_t tmp_127 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_128 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_129 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_130 = tmp_127*tmp_6 + tmp_128*tmp_21 + tmp_129*tmp_27;
      real_t tmp_131 = tmp_127*tmp_34 + tmp_128*tmp_35 + tmp_129*tmp_36;
      real_t tmp_132 = tmp_127*tmp_38 + tmp_128*tmp_39 + tmp_129*tmp_40;
      real_t tmp_133 = -tmp_130 - tmp_131 - tmp_132 + 1;
      real_t tmp_134 = 1.0*tmp_133;
      real_t tmp_135 = 0.019202922745021479*tmp_53;
      real_t tmp_136 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_137 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_138 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_139 = tmp_136*tmp_6 + tmp_137*tmp_21 + tmp_138*tmp_27;
      real_t tmp_140 = tmp_136*tmp_34 + tmp_137*tmp_35 + tmp_138*tmp_36;
      real_t tmp_141 = tmp_136*tmp_38 + tmp_137*tmp_39 + tmp_138*tmp_40;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 1.0*tmp_142;
      real_t tmp_144 = 0.020848748529055869*tmp_53;
      real_t tmp_145 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_146 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_147 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_148 = tmp_145*tmp_6 + tmp_146*tmp_21 + tmp_147*tmp_27;
      real_t tmp_149 = tmp_145*tmp_34 + tmp_146*tmp_35 + tmp_147*tmp_36;
      real_t tmp_150 = tmp_145*tmp_38 + tmp_146*tmp_39 + tmp_147*tmp_40;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 1.0*tmp_151;
      real_t tmp_153 = 0.019202922745021479*tmp_53;
      real_t tmp_154 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_155 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_156 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_157 = tmp_154*tmp_6 + tmp_155*tmp_21 + tmp_156*tmp_27;
      real_t tmp_158 = tmp_154*tmp_34 + tmp_155*tmp_35 + tmp_156*tmp_36;
      real_t tmp_159 = tmp_154*tmp_38 + tmp_155*tmp_39 + tmp_156*tmp_40;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 1.0*tmp_160;
      real_t tmp_162 = 0.042507265838595799*tmp_53;
      real_t tmp_163 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_164 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_165 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_166 = tmp_163*tmp_6 + tmp_164*tmp_21 + tmp_165*tmp_27;
      real_t tmp_167 = tmp_163*tmp_34 + tmp_164*tmp_35 + tmp_165*tmp_36;
      real_t tmp_168 = tmp_163*tmp_38 + tmp_164*tmp_39 + tmp_165*tmp_40;
      real_t tmp_169 = -tmp_166 - tmp_167 - tmp_168 + 1;
      real_t tmp_170 = 1.0*tmp_169;
      real_t tmp_171 = 0.020848748529055869*tmp_53;
      real_t tmp_172 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_6 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_172*tmp_34 + tmp_173*tmp_35 + tmp_174*tmp_36;
      real_t tmp_177 = tmp_172*tmp_38 + tmp_173*tmp_39 + tmp_174*tmp_40;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 1.0*tmp_178;
      real_t tmp_180 = 0.0068572537431980923*tmp_53;
      real_t tmp_181 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_182 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_183 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_184 = tmp_181*tmp_6 + tmp_182*tmp_21 + tmp_183*tmp_27;
      real_t tmp_185 = tmp_181*tmp_34 + tmp_182*tmp_35 + tmp_183*tmp_36;
      real_t tmp_186 = tmp_181*tmp_38 + tmp_182*tmp_39 + tmp_183*tmp_40;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 1.0*tmp_187;
      real_t tmp_189 = 0.037198804536718075*tmp_53;
      real_t tmp_190 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 1.0*tmp_196;
      real_t tmp_198 = 0.042507265838595799*tmp_53;
      real_t tmp_199 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_6 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_199*tmp_34 + tmp_200*tmp_35 + tmp_201*tmp_36;
      real_t tmp_204 = tmp_199*tmp_38 + tmp_200*tmp_39 + tmp_201*tmp_40;
      real_t tmp_205 = -tmp_202 - tmp_203 - tmp_204 + 1;
      real_t tmp_206 = 1.0*tmp_205;
      real_t tmp_207 = 0.0068572537431980923*tmp_53;
      real_t tmp_208 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_209 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_210 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_211 = tmp_208*tmp_6 + tmp_209*tmp_21 + tmp_210*tmp_27;
      real_t tmp_212 = tmp_208*tmp_34 + tmp_209*tmp_35 + tmp_210*tmp_36;
      real_t tmp_213 = tmp_208*tmp_38 + tmp_209*tmp_39 + tmp_210*tmp_40;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 1.0*tmp_214;
      real_t tmp_216 = 0.037198804536718075*tmp_53;
      real_t tmp_217 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_218 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_219 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_220 = tmp_21*tmp_218 + tmp_217*tmp_6 + tmp_219*tmp_27;
      real_t tmp_221 = tmp_217*tmp_34 + tmp_218*tmp_35 + tmp_219*tmp_36;
      real_t tmp_222 = tmp_217*tmp_38 + tmp_218*tmp_39 + tmp_219*tmp_40;
      real_t tmp_223 = -tmp_220 - tmp_221 - tmp_222 + 1;
      real_t tmp_224 = 1.0*tmp_223;
      real_t tmp_225 = 0.042507265838595799*tmp_53;
      real_t tmp_226 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_227 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_228 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_229 = tmp_21*tmp_227 + tmp_226*tmp_6 + tmp_228*tmp_27;
      real_t tmp_230 = tmp_226*tmp_34 + tmp_227*tmp_35 + tmp_228*tmp_36;
      real_t tmp_231 = tmp_226*tmp_38 + tmp_227*tmp_39 + tmp_228*tmp_40;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 1.0*tmp_232;
      real_t tmp_234 = 0.019202922745021479*tmp_53;
      real_t tmp_235 = 1.0*tmp_48;
      real_t tmp_236 = p_affine_13_2*tmp_51;
      real_t tmp_237 = p_affine_13_2*tmp_50;
      real_t tmp_238 = p_affine_13_2*tmp_49;
      real_t tmp_239 = 1.0*tmp_52;
      real_t tmp_240 = p_affine_13_0*tmp_47;
      real_t tmp_241 = p_affine_13_0*tmp_46;
      real_t tmp_242 = p_affine_13_0*tmp_45;
      real_t a_0_0 = tmp_108*(-tmp_107*tmp_48 - tmp_107*tmp_52) + tmp_117*(-tmp_116*tmp_48 - tmp_116*tmp_52) + tmp_126*(-tmp_125*tmp_48 - tmp_125*tmp_52) + tmp_135*(-tmp_134*tmp_48 - tmp_134*tmp_52) + tmp_144*(-tmp_143*tmp_48 - tmp_143*tmp_52) + tmp_153*(-tmp_152*tmp_48 - tmp_152*tmp_52) + tmp_162*(-tmp_161*tmp_48 - tmp_161*tmp_52) + tmp_171*(-tmp_170*tmp_48 - tmp_170*tmp_52) + tmp_180*(-tmp_179*tmp_48 - tmp_179*tmp_52) + tmp_189*(-tmp_188*tmp_48 - tmp_188*tmp_52) + tmp_198*(-tmp_197*tmp_48 - tmp_197*tmp_52) + tmp_207*(-tmp_206*tmp_48 - tmp_206*tmp_52) + tmp_216*(-tmp_215*tmp_48 - tmp_215*tmp_52) + tmp_225*(-tmp_224*tmp_48 - tmp_224*tmp_52) + tmp_234*(-tmp_233*tmp_48 - tmp_233*tmp_52) + tmp_54*(-tmp_43*tmp_48 - tmp_43*tmp_52) + tmp_63*(-tmp_48*tmp_62 - tmp_52*tmp_62) + tmp_72*(-tmp_48*tmp_71 - tmp_52*tmp_71) + tmp_81*(-tmp_48*tmp_80 - tmp_52*tmp_80) + tmp_90*(-tmp_48*tmp_89 - tmp_52*tmp_89) + tmp_99*(-tmp_48*tmp_98 - tmp_52*tmp_98);
      real_t a_0_1 = tmp_108*(-tmp_103*tmp_235 - tmp_106*tmp_236) + tmp_117*(-tmp_112*tmp_235 - tmp_115*tmp_236) + tmp_126*(-tmp_121*tmp_235 - tmp_124*tmp_236) + tmp_135*(-tmp_130*tmp_235 - tmp_133*tmp_236) + tmp_144*(-tmp_139*tmp_235 - tmp_142*tmp_236) + tmp_153*(-tmp_148*tmp_235 - tmp_151*tmp_236) + tmp_162*(-tmp_157*tmp_235 - tmp_160*tmp_236) + tmp_171*(-tmp_166*tmp_235 - tmp_169*tmp_236) + tmp_180*(-tmp_175*tmp_235 - tmp_178*tmp_236) + tmp_189*(-tmp_184*tmp_235 - tmp_187*tmp_236) + tmp_198*(-tmp_193*tmp_235 - tmp_196*tmp_236) + tmp_207*(-tmp_202*tmp_235 - tmp_205*tmp_236) + tmp_216*(-tmp_211*tmp_235 - tmp_214*tmp_236) + tmp_225*(-tmp_220*tmp_235 - tmp_223*tmp_236) + tmp_234*(-tmp_229*tmp_235 - tmp_232*tmp_236) + tmp_54*(-tmp_235*tmp_33 - tmp_236*tmp_42) + tmp_63*(-tmp_235*tmp_58 - tmp_236*tmp_61) + tmp_72*(-tmp_235*tmp_67 - tmp_236*tmp_70) + tmp_81*(-tmp_235*tmp_76 - tmp_236*tmp_79) + tmp_90*(-tmp_235*tmp_85 - tmp_236*tmp_88) + tmp_99*(-tmp_235*tmp_94 - tmp_236*tmp_97);
      real_t a_0_2 = tmp_108*(-tmp_104*tmp_235 - tmp_106*tmp_237) + tmp_117*(-tmp_113*tmp_235 - tmp_115*tmp_237) + tmp_126*(-tmp_122*tmp_235 - tmp_124*tmp_237) + tmp_135*(-tmp_131*tmp_235 - tmp_133*tmp_237) + tmp_144*(-tmp_140*tmp_235 - tmp_142*tmp_237) + tmp_153*(-tmp_149*tmp_235 - tmp_151*tmp_237) + tmp_162*(-tmp_158*tmp_235 - tmp_160*tmp_237) + tmp_171*(-tmp_167*tmp_235 - tmp_169*tmp_237) + tmp_180*(-tmp_176*tmp_235 - tmp_178*tmp_237) + tmp_189*(-tmp_185*tmp_235 - tmp_187*tmp_237) + tmp_198*(-tmp_194*tmp_235 - tmp_196*tmp_237) + tmp_207*(-tmp_203*tmp_235 - tmp_205*tmp_237) + tmp_216*(-tmp_212*tmp_235 - tmp_214*tmp_237) + tmp_225*(-tmp_221*tmp_235 - tmp_223*tmp_237) + tmp_234*(-tmp_230*tmp_235 - tmp_232*tmp_237) + tmp_54*(-tmp_235*tmp_37 - tmp_237*tmp_42) + tmp_63*(-tmp_235*tmp_59 - tmp_237*tmp_61) + tmp_72*(-tmp_235*tmp_68 - tmp_237*tmp_70) + tmp_81*(-tmp_235*tmp_77 - tmp_237*tmp_79) + tmp_90*(-tmp_235*tmp_86 - tmp_237*tmp_88) + tmp_99*(-tmp_235*tmp_95 - tmp_237*tmp_97);
      real_t a_0_3 = tmp_108*(-tmp_105*tmp_235 - tmp_106*tmp_238) + tmp_117*(-tmp_114*tmp_235 - tmp_115*tmp_238) + tmp_126*(-tmp_123*tmp_235 - tmp_124*tmp_238) + tmp_135*(-tmp_132*tmp_235 - tmp_133*tmp_238) + tmp_144*(-tmp_141*tmp_235 - tmp_142*tmp_238) + tmp_153*(-tmp_150*tmp_235 - tmp_151*tmp_238) + tmp_162*(-tmp_159*tmp_235 - tmp_160*tmp_238) + tmp_171*(-tmp_168*tmp_235 - tmp_169*tmp_238) + tmp_180*(-tmp_177*tmp_235 - tmp_178*tmp_238) + tmp_189*(-tmp_186*tmp_235 - tmp_187*tmp_238) + tmp_198*(-tmp_195*tmp_235 - tmp_196*tmp_238) + tmp_207*(-tmp_204*tmp_235 - tmp_205*tmp_238) + tmp_216*(-tmp_213*tmp_235 - tmp_214*tmp_238) + tmp_225*(-tmp_222*tmp_235 - tmp_223*tmp_238) + tmp_234*(-tmp_231*tmp_235 - tmp_232*tmp_238) + tmp_54*(-tmp_235*tmp_41 - tmp_238*tmp_42) + tmp_63*(-tmp_235*tmp_60 - tmp_238*tmp_61) + tmp_72*(-tmp_235*tmp_69 - tmp_238*tmp_70) + tmp_81*(-tmp_235*tmp_78 - tmp_238*tmp_79) + tmp_90*(-tmp_235*tmp_87 - tmp_238*tmp_88) + tmp_99*(-tmp_235*tmp_96 - tmp_238*tmp_97);
      real_t a_1_0 = tmp_108*(-tmp_103*tmp_239 - tmp_106*tmp_240) + tmp_117*(-tmp_112*tmp_239 - tmp_115*tmp_240) + tmp_126*(-tmp_121*tmp_239 - tmp_124*tmp_240) + tmp_135*(-tmp_130*tmp_239 - tmp_133*tmp_240) + tmp_144*(-tmp_139*tmp_239 - tmp_142*tmp_240) + tmp_153*(-tmp_148*tmp_239 - tmp_151*tmp_240) + tmp_162*(-tmp_157*tmp_239 - tmp_160*tmp_240) + tmp_171*(-tmp_166*tmp_239 - tmp_169*tmp_240) + tmp_180*(-tmp_175*tmp_239 - tmp_178*tmp_240) + tmp_189*(-tmp_184*tmp_239 - tmp_187*tmp_240) + tmp_198*(-tmp_193*tmp_239 - tmp_196*tmp_240) + tmp_207*(-tmp_202*tmp_239 - tmp_205*tmp_240) + tmp_216*(-tmp_211*tmp_239 - tmp_214*tmp_240) + tmp_225*(-tmp_220*tmp_239 - tmp_223*tmp_240) + tmp_234*(-tmp_229*tmp_239 - tmp_232*tmp_240) + tmp_54*(-tmp_239*tmp_33 - tmp_240*tmp_42) + tmp_63*(-tmp_239*tmp_58 - tmp_240*tmp_61) + tmp_72*(-tmp_239*tmp_67 - tmp_240*tmp_70) + tmp_81*(-tmp_239*tmp_76 - tmp_240*tmp_79) + tmp_90*(-tmp_239*tmp_85 - tmp_240*tmp_88) + tmp_99*(-tmp_239*tmp_94 - tmp_240*tmp_97);
      real_t a_1_1 = tmp_108*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_117*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_126*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_135*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_144*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_153*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_162*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_171*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_180*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_189*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_198*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_207*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_216*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_225*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_234*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_54*(-tmp_236*tmp_33 - tmp_240*tmp_33) + tmp_63*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_72*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_81*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_90*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_99*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_1_2 = tmp_108*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_117*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_126*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_135*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_144*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_153*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_162*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_171*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_180*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_189*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_198*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_207*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_216*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_225*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_234*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_54*(-tmp_237*tmp_33 - tmp_240*tmp_37) + tmp_63*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_72*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_81*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_90*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_99*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_1_3 = tmp_108*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_117*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_126*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_135*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_144*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_153*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_162*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_171*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_180*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_189*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_198*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_207*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_216*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_225*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_234*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_54*(-tmp_238*tmp_33 - tmp_240*tmp_41) + tmp_63*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_72*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_81*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_90*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_99*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_0 = tmp_108*(-tmp_104*tmp_239 - tmp_106*tmp_241) + tmp_117*(-tmp_113*tmp_239 - tmp_115*tmp_241) + tmp_126*(-tmp_122*tmp_239 - tmp_124*tmp_241) + tmp_135*(-tmp_131*tmp_239 - tmp_133*tmp_241) + tmp_144*(-tmp_140*tmp_239 - tmp_142*tmp_241) + tmp_153*(-tmp_149*tmp_239 - tmp_151*tmp_241) + tmp_162*(-tmp_158*tmp_239 - tmp_160*tmp_241) + tmp_171*(-tmp_167*tmp_239 - tmp_169*tmp_241) + tmp_180*(-tmp_176*tmp_239 - tmp_178*tmp_241) + tmp_189*(-tmp_185*tmp_239 - tmp_187*tmp_241) + tmp_198*(-tmp_194*tmp_239 - tmp_196*tmp_241) + tmp_207*(-tmp_203*tmp_239 - tmp_205*tmp_241) + tmp_216*(-tmp_212*tmp_239 - tmp_214*tmp_241) + tmp_225*(-tmp_221*tmp_239 - tmp_223*tmp_241) + tmp_234*(-tmp_230*tmp_239 - tmp_232*tmp_241) + tmp_54*(-tmp_239*tmp_37 - tmp_241*tmp_42) + tmp_63*(-tmp_239*tmp_59 - tmp_241*tmp_61) + tmp_72*(-tmp_239*tmp_68 - tmp_241*tmp_70) + tmp_81*(-tmp_239*tmp_77 - tmp_241*tmp_79) + tmp_90*(-tmp_239*tmp_86 - tmp_241*tmp_88) + tmp_99*(-tmp_239*tmp_95 - tmp_241*tmp_97);
      real_t a_2_1 = tmp_108*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_117*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_126*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_135*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_144*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_153*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_162*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_171*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_180*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_189*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_198*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_207*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_216*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_225*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_234*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_54*(-tmp_236*tmp_37 - tmp_241*tmp_33) + tmp_63*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_72*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_81*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_90*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_99*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_2_2 = tmp_108*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_117*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_126*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_135*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_144*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_153*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_162*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_171*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_180*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_189*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_198*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_207*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_216*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_225*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_234*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_54*(-tmp_237*tmp_37 - tmp_241*tmp_37) + tmp_63*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_72*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_81*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_90*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_99*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      real_t a_2_3 = tmp_108*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_117*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_126*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_135*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_144*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_153*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_162*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_171*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_180*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_189*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_198*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_207*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_216*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_225*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_234*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_54*(-tmp_238*tmp_37 - tmp_241*tmp_41) + tmp_63*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_72*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_81*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_90*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_99*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_0 = tmp_108*(-tmp_105*tmp_239 - tmp_106*tmp_242) + tmp_117*(-tmp_114*tmp_239 - tmp_115*tmp_242) + tmp_126*(-tmp_123*tmp_239 - tmp_124*tmp_242) + tmp_135*(-tmp_132*tmp_239 - tmp_133*tmp_242) + tmp_144*(-tmp_141*tmp_239 - tmp_142*tmp_242) + tmp_153*(-tmp_150*tmp_239 - tmp_151*tmp_242) + tmp_162*(-tmp_159*tmp_239 - tmp_160*tmp_242) + tmp_171*(-tmp_168*tmp_239 - tmp_169*tmp_242) + tmp_180*(-tmp_177*tmp_239 - tmp_178*tmp_242) + tmp_189*(-tmp_186*tmp_239 - tmp_187*tmp_242) + tmp_198*(-tmp_195*tmp_239 - tmp_196*tmp_242) + tmp_207*(-tmp_204*tmp_239 - tmp_205*tmp_242) + tmp_216*(-tmp_213*tmp_239 - tmp_214*tmp_242) + tmp_225*(-tmp_222*tmp_239 - tmp_223*tmp_242) + tmp_234*(-tmp_231*tmp_239 - tmp_232*tmp_242) + tmp_54*(-tmp_239*tmp_41 - tmp_242*tmp_42) + tmp_63*(-tmp_239*tmp_60 - tmp_242*tmp_61) + tmp_72*(-tmp_239*tmp_69 - tmp_242*tmp_70) + tmp_81*(-tmp_239*tmp_78 - tmp_242*tmp_79) + tmp_90*(-tmp_239*tmp_87 - tmp_242*tmp_88) + tmp_99*(-tmp_239*tmp_96 - tmp_242*tmp_97);
      real_t a_3_1 = tmp_108*(-tmp_103*tmp_242 - tmp_105*tmp_236) + tmp_117*(-tmp_112*tmp_242 - tmp_114*tmp_236) + tmp_126*(-tmp_121*tmp_242 - tmp_123*tmp_236) + tmp_135*(-tmp_130*tmp_242 - tmp_132*tmp_236) + tmp_144*(-tmp_139*tmp_242 - tmp_141*tmp_236) + tmp_153*(-tmp_148*tmp_242 - tmp_150*tmp_236) + tmp_162*(-tmp_157*tmp_242 - tmp_159*tmp_236) + tmp_171*(-tmp_166*tmp_242 - tmp_168*tmp_236) + tmp_180*(-tmp_175*tmp_242 - tmp_177*tmp_236) + tmp_189*(-tmp_184*tmp_242 - tmp_186*tmp_236) + tmp_198*(-tmp_193*tmp_242 - tmp_195*tmp_236) + tmp_207*(-tmp_202*tmp_242 - tmp_204*tmp_236) + tmp_216*(-tmp_211*tmp_242 - tmp_213*tmp_236) + tmp_225*(-tmp_220*tmp_242 - tmp_222*tmp_236) + tmp_234*(-tmp_229*tmp_242 - tmp_231*tmp_236) + tmp_54*(-tmp_236*tmp_41 - tmp_242*tmp_33) + tmp_63*(-tmp_236*tmp_60 - tmp_242*tmp_58) + tmp_72*(-tmp_236*tmp_69 - tmp_242*tmp_67) + tmp_81*(-tmp_236*tmp_78 - tmp_242*tmp_76) + tmp_90*(-tmp_236*tmp_87 - tmp_242*tmp_85) + tmp_99*(-tmp_236*tmp_96 - tmp_242*tmp_94);
      real_t a_3_2 = tmp_108*(-tmp_104*tmp_242 - tmp_105*tmp_237) + tmp_117*(-tmp_113*tmp_242 - tmp_114*tmp_237) + tmp_126*(-tmp_122*tmp_242 - tmp_123*tmp_237) + tmp_135*(-tmp_131*tmp_242 - tmp_132*tmp_237) + tmp_144*(-tmp_140*tmp_242 - tmp_141*tmp_237) + tmp_153*(-tmp_149*tmp_242 - tmp_150*tmp_237) + tmp_162*(-tmp_158*tmp_242 - tmp_159*tmp_237) + tmp_171*(-tmp_167*tmp_242 - tmp_168*tmp_237) + tmp_180*(-tmp_176*tmp_242 - tmp_177*tmp_237) + tmp_189*(-tmp_185*tmp_242 - tmp_186*tmp_237) + tmp_198*(-tmp_194*tmp_242 - tmp_195*tmp_237) + tmp_207*(-tmp_203*tmp_242 - tmp_204*tmp_237) + tmp_216*(-tmp_212*tmp_242 - tmp_213*tmp_237) + tmp_225*(-tmp_221*tmp_242 - tmp_222*tmp_237) + tmp_234*(-tmp_230*tmp_242 - tmp_231*tmp_237) + tmp_54*(-tmp_237*tmp_41 - tmp_242*tmp_37) + tmp_63*(-tmp_237*tmp_60 - tmp_242*tmp_59) + tmp_72*(-tmp_237*tmp_69 - tmp_242*tmp_68) + tmp_81*(-tmp_237*tmp_78 - tmp_242*tmp_77) + tmp_90*(-tmp_237*tmp_87 - tmp_242*tmp_86) + tmp_99*(-tmp_237*tmp_96 - tmp_242*tmp_95);
      real_t a_3_3 = tmp_108*(-tmp_105*tmp_238 - tmp_105*tmp_242) + tmp_117*(-tmp_114*tmp_238 - tmp_114*tmp_242) + tmp_126*(-tmp_123*tmp_238 - tmp_123*tmp_242) + tmp_135*(-tmp_132*tmp_238 - tmp_132*tmp_242) + tmp_144*(-tmp_141*tmp_238 - tmp_141*tmp_242) + tmp_153*(-tmp_150*tmp_238 - tmp_150*tmp_242) + tmp_162*(-tmp_159*tmp_238 - tmp_159*tmp_242) + tmp_171*(-tmp_168*tmp_238 - tmp_168*tmp_242) + tmp_180*(-tmp_177*tmp_238 - tmp_177*tmp_242) + tmp_189*(-tmp_186*tmp_238 - tmp_186*tmp_242) + tmp_198*(-tmp_195*tmp_238 - tmp_195*tmp_242) + tmp_207*(-tmp_204*tmp_238 - tmp_204*tmp_242) + tmp_216*(-tmp_213*tmp_238 - tmp_213*tmp_242) + tmp_225*(-tmp_222*tmp_238 - tmp_222*tmp_242) + tmp_234*(-tmp_231*tmp_238 - tmp_231*tmp_242) + tmp_54*(-tmp_238*tmp_41 - tmp_242*tmp_41) + tmp_63*(-tmp_238*tmp_60 - tmp_242*tmp_60) + tmp_72*(-tmp_238*tmp_69 - tmp_242*tmp_69) + tmp_81*(-tmp_238*tmp_78 - tmp_242*tmp_78) + tmp_90*(-tmp_238*tmp_87 - tmp_242*tmp_87) + tmp_99*(-tmp_238*tmp_96 - tmp_242*tmp_96);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_1 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_2 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_3 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_6 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_9 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_10 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_6;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_2*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_10*tmp_12 + tmp_11*tmp_2 - tmp_13*tmp_5 - tmp_14*tmp_3 + tmp_5*tmp_7);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_5 + tmp_10*tmp_2;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = -tmp_1*tmp_10 + tmp_3*tmp_5;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_12 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_14 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_5*tmp_9;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_13 + tmp_7;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_6;
      real_t tmp_43 = tmp_11 - tmp_3*tmp_8;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_47 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_50 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_51 = tmp_49*tmp_50;
      real_t tmp_52 = tmp_48 - tmp_51;
      real_t tmp_53 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_54 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_55 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_56 = tmp_49*tmp_55;
      real_t tmp_57 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_58 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_59 = tmp_46*tmp_55;
      real_t tmp_60 = tmp_47*tmp_58;
      real_t tmp_61 = 1.0 / (tmp_48*tmp_53 + tmp_50*tmp_57*tmp_58 - tmp_51*tmp_53 + tmp_54*tmp_56 - tmp_54*tmp_60 - tmp_57*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_52*tmp_62;
      real_t tmp_64 = tmp_50*tmp_58 - tmp_59;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_56 - tmp_60;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = p_affine_13_0*(-tmp_63 - tmp_65 - tmp_67);
      real_t tmp_69 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_70 = tmp_61*(tmp_20 + tmp_69);
      real_t tmp_71 = -tmp_49*tmp_53 + tmp_57*tmp_58;
      real_t tmp_72 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_73 = tmp_61*(tmp_27 + tmp_72);
      real_t tmp_74 = tmp_47*tmp_53 - tmp_55*tmp_57;
      real_t tmp_75 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_76 = tmp_61*(tmp_34 + tmp_75);
      real_t tmp_77 = tmp_66*tmp_70 + tmp_71*tmp_73 + tmp_74*tmp_76;
      real_t tmp_78 = tmp_46*tmp_53 - tmp_54*tmp_58;
      real_t tmp_79 = -tmp_50*tmp_53 + tmp_54*tmp_55;
      real_t tmp_80 = tmp_64*tmp_70 + tmp_73*tmp_78 + tmp_76*tmp_79;
      real_t tmp_81 = -tmp_46*tmp_57 + tmp_49*tmp_54;
      real_t tmp_82 = -tmp_47*tmp_54 + tmp_50*tmp_57;
      real_t tmp_83 = tmp_52*tmp_70 + tmp_73*tmp_81 + tmp_76*tmp_82;
      real_t tmp_84 = p_affine_13_2*(-tmp_77 - tmp_80 - tmp_83 + 1);
      real_t tmp_85 = 0.5*tmp_15;
      real_t tmp_86 = tmp_43*tmp_85;
      real_t tmp_87 = tmp_39*tmp_85;
      real_t tmp_88 = tmp_29*tmp_85;
      real_t tmp_89 = -1.0*tmp_86 - 1.0*tmp_87 - 1.0*tmp_88;
      real_t tmp_90 = 1.0*std::pow((std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)), 1.0/2.0);
      real_t tmp_91 = 0.0068572537431980923*tmp_90;
      real_t tmp_92 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_93 = tmp_15*(tmp_16 + tmp_92);
      real_t tmp_94 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_95 = tmp_15*(tmp_23 + tmp_94);
      real_t tmp_96 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_97 = tmp_15*(tmp_30 + tmp_96);
      real_t tmp_98 = tmp_22*tmp_95 + tmp_29*tmp_97 + tmp_4*tmp_93;
      real_t tmp_99 = tmp_37*tmp_93 + tmp_38*tmp_95 + tmp_39*tmp_97;
      real_t tmp_100 = tmp_41*tmp_93 + tmp_42*tmp_95 + tmp_43*tmp_97;
      real_t tmp_101 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_102 = tmp_61*(tmp_69 + tmp_92);
      real_t tmp_103 = tmp_61*(tmp_72 + tmp_94);
      real_t tmp_104 = tmp_61*(tmp_75 + tmp_96);
      real_t tmp_105 = tmp_102*tmp_66 + tmp_103*tmp_71 + tmp_104*tmp_74;
      real_t tmp_106 = tmp_102*tmp_64 + tmp_103*tmp_78 + tmp_104*tmp_79;
      real_t tmp_107 = tmp_102*tmp_52 + tmp_103*tmp_81 + tmp_104*tmp_82;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = p_affine_13_2*tmp_89;
      real_t tmp_110 = 0.037198804536718075*tmp_90;
      real_t tmp_111 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_112 = tmp_15*(tmp_111 + tmp_16);
      real_t tmp_113 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_23);
      real_t tmp_115 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_116 = tmp_15*(tmp_115 + tmp_30);
      real_t tmp_117 = tmp_112*tmp_4 + tmp_114*tmp_22 + tmp_116*tmp_29;
      real_t tmp_118 = tmp_112*tmp_37 + tmp_114*tmp_38 + tmp_116*tmp_39;
      real_t tmp_119 = tmp_112*tmp_41 + tmp_114*tmp_42 + tmp_116*tmp_43;
      real_t tmp_120 = -tmp_117 - tmp_118 - tmp_119 + 1;
      real_t tmp_121 = tmp_61*(tmp_111 + tmp_69);
      real_t tmp_122 = tmp_61*(tmp_113 + tmp_72);
      real_t tmp_123 = tmp_61*(tmp_115 + tmp_75);
      real_t tmp_124 = tmp_121*tmp_66 + tmp_122*tmp_71 + tmp_123*tmp_74;
      real_t tmp_125 = tmp_121*tmp_64 + tmp_122*tmp_78 + tmp_123*tmp_79;
      real_t tmp_126 = tmp_121*tmp_52 + tmp_122*tmp_81 + tmp_123*tmp_82;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_90;
      real_t tmp_129 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_130 = tmp_15*(tmp_129 + tmp_16);
      real_t tmp_131 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_132 = tmp_15*(tmp_131 + tmp_23);
      real_t tmp_133 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_134 = tmp_15*(tmp_133 + tmp_30);
      real_t tmp_135 = tmp_130*tmp_4 + tmp_132*tmp_22 + tmp_134*tmp_29;
      real_t tmp_136 = tmp_130*tmp_37 + tmp_132*tmp_38 + tmp_134*tmp_39;
      real_t tmp_137 = tmp_130*tmp_41 + tmp_132*tmp_42 + tmp_134*tmp_43;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = tmp_61*(tmp_129 + tmp_69);
      real_t tmp_140 = tmp_61*(tmp_131 + tmp_72);
      real_t tmp_141 = tmp_61*(tmp_133 + tmp_75);
      real_t tmp_142 = tmp_139*tmp_66 + tmp_140*tmp_71 + tmp_141*tmp_74;
      real_t tmp_143 = tmp_139*tmp_64 + tmp_140*tmp_78 + tmp_141*tmp_79;
      real_t tmp_144 = tmp_139*tmp_52 + tmp_140*tmp_81 + tmp_141*tmp_82;
      real_t tmp_145 = -tmp_142 - tmp_143 - tmp_144 + 1;
      real_t tmp_146 = 0.019202922745021479*tmp_90;
      real_t tmp_147 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_148 = tmp_15*(tmp_147 + tmp_16);
      real_t tmp_149 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_150 = tmp_15*(tmp_149 + tmp_23);
      real_t tmp_151 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_30);
      real_t tmp_153 = tmp_148*tmp_4 + tmp_150*tmp_22 + tmp_152*tmp_29;
      real_t tmp_154 = tmp_148*tmp_37 + tmp_150*tmp_38 + tmp_152*tmp_39;
      real_t tmp_155 = tmp_148*tmp_41 + tmp_150*tmp_42 + tmp_152*tmp_43;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = tmp_61*(tmp_147 + tmp_69);
      real_t tmp_158 = tmp_61*(tmp_149 + tmp_72);
      real_t tmp_159 = tmp_61*(tmp_151 + tmp_75);
      real_t tmp_160 = tmp_157*tmp_66 + tmp_158*tmp_71 + tmp_159*tmp_74;
      real_t tmp_161 = tmp_157*tmp_64 + tmp_158*tmp_78 + tmp_159*tmp_79;
      real_t tmp_162 = tmp_157*tmp_52 + tmp_158*tmp_81 + tmp_159*tmp_82;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = 0.020848748529055869*tmp_90;
      real_t tmp_165 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_166 = tmp_15*(tmp_16 + tmp_165);
      real_t tmp_167 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_168 = tmp_15*(tmp_167 + tmp_23);
      real_t tmp_169 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_170 = tmp_15*(tmp_169 + tmp_30);
      real_t tmp_171 = tmp_166*tmp_4 + tmp_168*tmp_22 + tmp_170*tmp_29;
      real_t tmp_172 = tmp_166*tmp_37 + tmp_168*tmp_38 + tmp_170*tmp_39;
      real_t tmp_173 = tmp_166*tmp_41 + tmp_168*tmp_42 + tmp_170*tmp_43;
      real_t tmp_174 = -tmp_171 - tmp_172 - tmp_173 + 1;
      real_t tmp_175 = tmp_61*(tmp_165 + tmp_69);
      real_t tmp_176 = tmp_61*(tmp_167 + tmp_72);
      real_t tmp_177 = tmp_61*(tmp_169 + tmp_75);
      real_t tmp_178 = tmp_175*tmp_66 + tmp_176*tmp_71 + tmp_177*tmp_74;
      real_t tmp_179 = tmp_175*tmp_64 + tmp_176*tmp_78 + tmp_177*tmp_79;
      real_t tmp_180 = tmp_175*tmp_52 + tmp_176*tmp_81 + tmp_177*tmp_82;
      real_t tmp_181 = -tmp_178 - tmp_179 - tmp_180 + 1;
      real_t tmp_182 = 0.019202922745021479*tmp_90;
      real_t tmp_183 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_184 = tmp_15*(tmp_16 + tmp_183);
      real_t tmp_185 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_23);
      real_t tmp_187 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_30);
      real_t tmp_189 = tmp_184*tmp_4 + tmp_186*tmp_22 + tmp_188*tmp_29;
      real_t tmp_190 = tmp_184*tmp_37 + tmp_186*tmp_38 + tmp_188*tmp_39;
      real_t tmp_191 = tmp_184*tmp_41 + tmp_186*tmp_42 + tmp_188*tmp_43;
      real_t tmp_192 = -tmp_189 - tmp_190 - tmp_191 + 1;
      real_t tmp_193 = tmp_61*(tmp_183 + tmp_69);
      real_t tmp_194 = tmp_61*(tmp_185 + tmp_72);
      real_t tmp_195 = tmp_61*(tmp_187 + tmp_75);
      real_t tmp_196 = tmp_193*tmp_66 + tmp_194*tmp_71 + tmp_195*tmp_74;
      real_t tmp_197 = tmp_193*tmp_64 + tmp_194*tmp_78 + tmp_195*tmp_79;
      real_t tmp_198 = tmp_193*tmp_52 + tmp_194*tmp_81 + tmp_195*tmp_82;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.020848748529055869*tmp_90;
      real_t tmp_201 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_202 = tmp_15*(tmp_16 + tmp_201);
      real_t tmp_203 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_23);
      real_t tmp_205 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_206 = tmp_15*(tmp_205 + tmp_30);
      real_t tmp_207 = tmp_202*tmp_4 + tmp_204*tmp_22 + tmp_206*tmp_29;
      real_t tmp_208 = tmp_202*tmp_37 + tmp_204*tmp_38 + tmp_206*tmp_39;
      real_t tmp_209 = tmp_202*tmp_41 + tmp_204*tmp_42 + tmp_206*tmp_43;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = tmp_61*(tmp_201 + tmp_69);
      real_t tmp_212 = tmp_61*(tmp_203 + tmp_72);
      real_t tmp_213 = tmp_61*(tmp_205 + tmp_75);
      real_t tmp_214 = tmp_211*tmp_66 + tmp_212*tmp_71 + tmp_213*tmp_74;
      real_t tmp_215 = tmp_211*tmp_64 + tmp_212*tmp_78 + tmp_213*tmp_79;
      real_t tmp_216 = tmp_211*tmp_52 + tmp_212*tmp_81 + tmp_213*tmp_82;
      real_t tmp_217 = -tmp_214 - tmp_215 - tmp_216 + 1;
      real_t tmp_218 = 0.019202922745021479*tmp_90;
      real_t tmp_219 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_220 = tmp_15*(tmp_16 + tmp_219);
      real_t tmp_221 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_222 = tmp_15*(tmp_221 + tmp_23);
      real_t tmp_223 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_224 = tmp_15*(tmp_223 + tmp_30);
      real_t tmp_225 = tmp_22*tmp_222 + tmp_220*tmp_4 + tmp_224*tmp_29;
      real_t tmp_226 = tmp_220*tmp_37 + tmp_222*tmp_38 + tmp_224*tmp_39;
      real_t tmp_227 = tmp_220*tmp_41 + tmp_222*tmp_42 + tmp_224*tmp_43;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_61*(tmp_219 + tmp_69);
      real_t tmp_230 = tmp_61*(tmp_221 + tmp_72);
      real_t tmp_231 = tmp_61*(tmp_223 + tmp_75);
      real_t tmp_232 = tmp_229*tmp_66 + tmp_230*tmp_71 + tmp_231*tmp_74;
      real_t tmp_233 = tmp_229*tmp_64 + tmp_230*tmp_78 + tmp_231*tmp_79;
      real_t tmp_234 = tmp_229*tmp_52 + tmp_230*tmp_81 + tmp_231*tmp_82;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = 0.020848748529055869*tmp_90;
      real_t tmp_237 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_238 = tmp_15*(tmp_16 + tmp_237);
      real_t tmp_239 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_240 = tmp_15*(tmp_23 + tmp_239);
      real_t tmp_241 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_242 = tmp_15*(tmp_241 + tmp_30);
      real_t tmp_243 = tmp_22*tmp_240 + tmp_238*tmp_4 + tmp_242*tmp_29;
      real_t tmp_244 = tmp_238*tmp_37 + tmp_240*tmp_38 + tmp_242*tmp_39;
      real_t tmp_245 = tmp_238*tmp_41 + tmp_240*tmp_42 + tmp_242*tmp_43;
      real_t tmp_246 = -tmp_243 - tmp_244 - tmp_245 + 1;
      real_t tmp_247 = tmp_61*(tmp_237 + tmp_69);
      real_t tmp_248 = tmp_61*(tmp_239 + tmp_72);
      real_t tmp_249 = tmp_61*(tmp_241 + tmp_75);
      real_t tmp_250 = tmp_247*tmp_66 + tmp_248*tmp_71 + tmp_249*tmp_74;
      real_t tmp_251 = tmp_247*tmp_64 + tmp_248*tmp_78 + tmp_249*tmp_79;
      real_t tmp_252 = tmp_247*tmp_52 + tmp_248*tmp_81 + tmp_249*tmp_82;
      real_t tmp_253 = -tmp_250 - tmp_251 - tmp_252 + 1;
      real_t tmp_254 = 0.019202922745021479*tmp_90;
      real_t tmp_255 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_256 = tmp_15*(tmp_16 + tmp_255);
      real_t tmp_257 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_258 = tmp_15*(tmp_23 + tmp_257);
      real_t tmp_259 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_260 = tmp_15*(tmp_259 + tmp_30);
      real_t tmp_261 = tmp_22*tmp_258 + tmp_256*tmp_4 + tmp_260*tmp_29;
      real_t tmp_262 = tmp_256*tmp_37 + tmp_258*tmp_38 + tmp_260*tmp_39;
      real_t tmp_263 = tmp_256*tmp_41 + tmp_258*tmp_42 + tmp_260*tmp_43;
      real_t tmp_264 = -tmp_261 - tmp_262 - tmp_263 + 1;
      real_t tmp_265 = tmp_61*(tmp_255 + tmp_69);
      real_t tmp_266 = tmp_61*(tmp_257 + tmp_72);
      real_t tmp_267 = tmp_61*(tmp_259 + tmp_75);
      real_t tmp_268 = tmp_265*tmp_66 + tmp_266*tmp_71 + tmp_267*tmp_74;
      real_t tmp_269 = tmp_265*tmp_64 + tmp_266*tmp_78 + tmp_267*tmp_79;
      real_t tmp_270 = tmp_265*tmp_52 + tmp_266*tmp_81 + tmp_267*tmp_82;
      real_t tmp_271 = -tmp_268 - tmp_269 - tmp_270 + 1;
      real_t tmp_272 = 0.020848748529055869*tmp_90;
      real_t tmp_273 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_274 = tmp_15*(tmp_16 + tmp_273);
      real_t tmp_275 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_276 = tmp_15*(tmp_23 + tmp_275);
      real_t tmp_277 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_278 = tmp_15*(tmp_277 + tmp_30);
      real_t tmp_279 = tmp_22*tmp_276 + tmp_274*tmp_4 + tmp_278*tmp_29;
      real_t tmp_280 = tmp_274*tmp_37 + tmp_276*tmp_38 + tmp_278*tmp_39;
      real_t tmp_281 = tmp_274*tmp_41 + tmp_276*tmp_42 + tmp_278*tmp_43;
      real_t tmp_282 = -tmp_279 - tmp_280 - tmp_281 + 1;
      real_t tmp_283 = tmp_61*(tmp_273 + tmp_69);
      real_t tmp_284 = tmp_61*(tmp_275 + tmp_72);
      real_t tmp_285 = tmp_61*(tmp_277 + tmp_75);
      real_t tmp_286 = tmp_283*tmp_66 + tmp_284*tmp_71 + tmp_285*tmp_74;
      real_t tmp_287 = tmp_283*tmp_64 + tmp_284*tmp_78 + tmp_285*tmp_79;
      real_t tmp_288 = tmp_283*tmp_52 + tmp_284*tmp_81 + tmp_285*tmp_82;
      real_t tmp_289 = -tmp_286 - tmp_287 - tmp_288 + 1;
      real_t tmp_290 = 0.019202922745021479*tmp_90;
      real_t tmp_291 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_292 = tmp_15*(tmp_16 + tmp_291);
      real_t tmp_293 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_294 = tmp_15*(tmp_23 + tmp_293);
      real_t tmp_295 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_296 = tmp_15*(tmp_295 + tmp_30);
      real_t tmp_297 = tmp_22*tmp_294 + tmp_29*tmp_296 + tmp_292*tmp_4;
      real_t tmp_298 = tmp_292*tmp_37 + tmp_294*tmp_38 + tmp_296*tmp_39;
      real_t tmp_299 = tmp_292*tmp_41 + tmp_294*tmp_42 + tmp_296*tmp_43;
      real_t tmp_300 = -tmp_297 - tmp_298 - tmp_299 + 1;
      real_t tmp_301 = tmp_61*(tmp_291 + tmp_69);
      real_t tmp_302 = tmp_61*(tmp_293 + tmp_72);
      real_t tmp_303 = tmp_61*(tmp_295 + tmp_75);
      real_t tmp_304 = tmp_301*tmp_66 + tmp_302*tmp_71 + tmp_303*tmp_74;
      real_t tmp_305 = tmp_301*tmp_64 + tmp_302*tmp_78 + tmp_303*tmp_79;
      real_t tmp_306 = tmp_301*tmp_52 + tmp_302*tmp_81 + tmp_303*tmp_82;
      real_t tmp_307 = -tmp_304 - tmp_305 - tmp_306 + 1;
      real_t tmp_308 = 0.042507265838595799*tmp_90;
      real_t tmp_309 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_310 = tmp_15*(tmp_16 + tmp_309);
      real_t tmp_311 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_312 = tmp_15*(tmp_23 + tmp_311);
      real_t tmp_313 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_314 = tmp_15*(tmp_30 + tmp_313);
      real_t tmp_315 = tmp_22*tmp_312 + tmp_29*tmp_314 + tmp_310*tmp_4;
      real_t tmp_316 = tmp_310*tmp_37 + tmp_312*tmp_38 + tmp_314*tmp_39;
      real_t tmp_317 = tmp_310*tmp_41 + tmp_312*tmp_42 + tmp_314*tmp_43;
      real_t tmp_318 = -tmp_315 - tmp_316 - tmp_317 + 1;
      real_t tmp_319 = tmp_61*(tmp_309 + tmp_69);
      real_t tmp_320 = tmp_61*(tmp_311 + tmp_72);
      real_t tmp_321 = tmp_61*(tmp_313 + tmp_75);
      real_t tmp_322 = tmp_319*tmp_66 + tmp_320*tmp_71 + tmp_321*tmp_74;
      real_t tmp_323 = tmp_319*tmp_64 + tmp_320*tmp_78 + tmp_321*tmp_79;
      real_t tmp_324 = tmp_319*tmp_52 + tmp_320*tmp_81 + tmp_321*tmp_82;
      real_t tmp_325 = -tmp_322 - tmp_323 - tmp_324 + 1;
      real_t tmp_326 = 0.020848748529055869*tmp_90;
      real_t tmp_327 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_328 = tmp_15*(tmp_16 + tmp_327);
      real_t tmp_329 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_330 = tmp_15*(tmp_23 + tmp_329);
      real_t tmp_331 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_332 = tmp_15*(tmp_30 + tmp_331);
      real_t tmp_333 = tmp_22*tmp_330 + tmp_29*tmp_332 + tmp_328*tmp_4;
      real_t tmp_334 = tmp_328*tmp_37 + tmp_330*tmp_38 + tmp_332*tmp_39;
      real_t tmp_335 = tmp_328*tmp_41 + tmp_330*tmp_42 + tmp_332*tmp_43;
      real_t tmp_336 = -tmp_333 - tmp_334 - tmp_335 + 1;
      real_t tmp_337 = tmp_61*(tmp_327 + tmp_69);
      real_t tmp_338 = tmp_61*(tmp_329 + tmp_72);
      real_t tmp_339 = tmp_61*(tmp_331 + tmp_75);
      real_t tmp_340 = tmp_337*tmp_66 + tmp_338*tmp_71 + tmp_339*tmp_74;
      real_t tmp_341 = tmp_337*tmp_64 + tmp_338*tmp_78 + tmp_339*tmp_79;
      real_t tmp_342 = tmp_337*tmp_52 + tmp_338*tmp_81 + tmp_339*tmp_82;
      real_t tmp_343 = -tmp_340 - tmp_341 - tmp_342 + 1;
      real_t tmp_344 = 0.0068572537431980923*tmp_90;
      real_t tmp_345 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_346 = tmp_15*(tmp_16 + tmp_345);
      real_t tmp_347 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_348 = tmp_15*(tmp_23 + tmp_347);
      real_t tmp_349 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_350 = tmp_15*(tmp_30 + tmp_349);
      real_t tmp_351 = tmp_22*tmp_348 + tmp_29*tmp_350 + tmp_346*tmp_4;
      real_t tmp_352 = tmp_346*tmp_37 + tmp_348*tmp_38 + tmp_350*tmp_39;
      real_t tmp_353 = tmp_346*tmp_41 + tmp_348*tmp_42 + tmp_350*tmp_43;
      real_t tmp_354 = -tmp_351 - tmp_352 - tmp_353 + 1;
      real_t tmp_355 = tmp_61*(tmp_345 + tmp_69);
      real_t tmp_356 = tmp_61*(tmp_347 + tmp_72);
      real_t tmp_357 = tmp_61*(tmp_349 + tmp_75);
      real_t tmp_358 = tmp_355*tmp_66 + tmp_356*tmp_71 + tmp_357*tmp_74;
      real_t tmp_359 = tmp_355*tmp_64 + tmp_356*tmp_78 + tmp_357*tmp_79;
      real_t tmp_360 = tmp_355*tmp_52 + tmp_356*tmp_81 + tmp_357*tmp_82;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = 0.037198804536718075*tmp_90;
      real_t tmp_363 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_364 = tmp_15*(tmp_16 + tmp_363);
      real_t tmp_365 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_366 = tmp_15*(tmp_23 + tmp_365);
      real_t tmp_367 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_368 = tmp_15*(tmp_30 + tmp_367);
      real_t tmp_369 = tmp_22*tmp_366 + tmp_29*tmp_368 + tmp_364*tmp_4;
      real_t tmp_370 = tmp_364*tmp_37 + tmp_366*tmp_38 + tmp_368*tmp_39;
      real_t tmp_371 = tmp_364*tmp_41 + tmp_366*tmp_42 + tmp_368*tmp_43;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_61*(tmp_363 + tmp_69);
      real_t tmp_374 = tmp_61*(tmp_365 + tmp_72);
      real_t tmp_375 = tmp_61*(tmp_367 + tmp_75);
      real_t tmp_376 = tmp_373*tmp_66 + tmp_374*tmp_71 + tmp_375*tmp_74;
      real_t tmp_377 = tmp_373*tmp_64 + tmp_374*tmp_78 + tmp_375*tmp_79;
      real_t tmp_378 = tmp_373*tmp_52 + tmp_374*tmp_81 + tmp_375*tmp_82;
      real_t tmp_379 = -tmp_376 - tmp_377 - tmp_378 + 1;
      real_t tmp_380 = 0.042507265838595799*tmp_90;
      real_t tmp_381 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_382 = tmp_15*(tmp_16 + tmp_381);
      real_t tmp_383 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_384 = tmp_15*(tmp_23 + tmp_383);
      real_t tmp_385 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_386 = tmp_15*(tmp_30 + tmp_385);
      real_t tmp_387 = tmp_22*tmp_384 + tmp_29*tmp_386 + tmp_382*tmp_4;
      real_t tmp_388 = tmp_37*tmp_382 + tmp_38*tmp_384 + tmp_386*tmp_39;
      real_t tmp_389 = tmp_382*tmp_41 + tmp_384*tmp_42 + tmp_386*tmp_43;
      real_t tmp_390 = -tmp_387 - tmp_388 - tmp_389 + 1;
      real_t tmp_391 = tmp_61*(tmp_381 + tmp_69);
      real_t tmp_392 = tmp_61*(tmp_383 + tmp_72);
      real_t tmp_393 = tmp_61*(tmp_385 + tmp_75);
      real_t tmp_394 = tmp_391*tmp_66 + tmp_392*tmp_71 + tmp_393*tmp_74;
      real_t tmp_395 = tmp_391*tmp_64 + tmp_392*tmp_78 + tmp_393*tmp_79;
      real_t tmp_396 = tmp_391*tmp_52 + tmp_392*tmp_81 + tmp_393*tmp_82;
      real_t tmp_397 = -tmp_394 - tmp_395 - tmp_396 + 1;
      real_t tmp_398 = 0.0068572537431980923*tmp_90;
      real_t tmp_399 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_400 = tmp_15*(tmp_16 + tmp_399);
      real_t tmp_401 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_402 = tmp_15*(tmp_23 + tmp_401);
      real_t tmp_403 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_404 = tmp_15*(tmp_30 + tmp_403);
      real_t tmp_405 = tmp_22*tmp_402 + tmp_29*tmp_404 + tmp_4*tmp_400;
      real_t tmp_406 = tmp_37*tmp_400 + tmp_38*tmp_402 + tmp_39*tmp_404;
      real_t tmp_407 = tmp_400*tmp_41 + tmp_402*tmp_42 + tmp_404*tmp_43;
      real_t tmp_408 = -tmp_405 - tmp_406 - tmp_407 + 1;
      real_t tmp_409 = tmp_61*(tmp_399 + tmp_69);
      real_t tmp_410 = tmp_61*(tmp_401 + tmp_72);
      real_t tmp_411 = tmp_61*(tmp_403 + tmp_75);
      real_t tmp_412 = tmp_409*tmp_66 + tmp_410*tmp_71 + tmp_411*tmp_74;
      real_t tmp_413 = tmp_409*tmp_64 + tmp_410*tmp_78 + tmp_411*tmp_79;
      real_t tmp_414 = tmp_409*tmp_52 + tmp_410*tmp_81 + tmp_411*tmp_82;
      real_t tmp_415 = -tmp_412 - tmp_413 - tmp_414 + 1;
      real_t tmp_416 = 0.037198804536718075*tmp_90;
      real_t tmp_417 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_418 = tmp_15*(tmp_16 + tmp_417);
      real_t tmp_419 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_420 = tmp_15*(tmp_23 + tmp_419);
      real_t tmp_421 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_422 = tmp_15*(tmp_30 + tmp_421);
      real_t tmp_423 = tmp_22*tmp_420 + tmp_29*tmp_422 + tmp_4*tmp_418;
      real_t tmp_424 = tmp_37*tmp_418 + tmp_38*tmp_420 + tmp_39*tmp_422;
      real_t tmp_425 = tmp_41*tmp_418 + tmp_42*tmp_420 + tmp_422*tmp_43;
      real_t tmp_426 = -tmp_423 - tmp_424 - tmp_425 + 1;
      real_t tmp_427 = tmp_61*(tmp_417 + tmp_69);
      real_t tmp_428 = tmp_61*(tmp_419 + tmp_72);
      real_t tmp_429 = tmp_61*(tmp_421 + tmp_75);
      real_t tmp_430 = tmp_427*tmp_66 + tmp_428*tmp_71 + tmp_429*tmp_74;
      real_t tmp_431 = tmp_427*tmp_64 + tmp_428*tmp_78 + tmp_429*tmp_79;
      real_t tmp_432 = tmp_427*tmp_52 + tmp_428*tmp_81 + tmp_429*tmp_82;
      real_t tmp_433 = -tmp_430 - tmp_431 - tmp_432 + 1;
      real_t tmp_434 = 0.042507265838595799*tmp_90;
      real_t tmp_435 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_436 = tmp_15*(tmp_16 + tmp_435);
      real_t tmp_437 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_438 = tmp_15*(tmp_23 + tmp_437);
      real_t tmp_439 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_440 = tmp_15*(tmp_30 + tmp_439);
      real_t tmp_441 = tmp_22*tmp_438 + tmp_29*tmp_440 + tmp_4*tmp_436;
      real_t tmp_442 = tmp_37*tmp_436 + tmp_38*tmp_438 + tmp_39*tmp_440;
      real_t tmp_443 = tmp_41*tmp_436 + tmp_42*tmp_438 + tmp_43*tmp_440;
      real_t tmp_444 = -tmp_441 - tmp_442 - tmp_443 + 1;
      real_t tmp_445 = tmp_61*(tmp_435 + tmp_69);
      real_t tmp_446 = tmp_61*(tmp_437 + tmp_72);
      real_t tmp_447 = tmp_61*(tmp_439 + tmp_75);
      real_t tmp_448 = tmp_445*tmp_66 + tmp_446*tmp_71 + tmp_447*tmp_74;
      real_t tmp_449 = tmp_445*tmp_64 + tmp_446*tmp_78 + tmp_447*tmp_79;
      real_t tmp_450 = tmp_445*tmp_52 + tmp_446*tmp_81 + tmp_447*tmp_82;
      real_t tmp_451 = -tmp_448 - tmp_449 - tmp_450 + 1;
      real_t tmp_452 = 0.019202922745021479*tmp_90;
      real_t tmp_453 = p_affine_13_2*tmp_88;
      real_t tmp_454 = p_affine_13_2*tmp_87;
      real_t tmp_455 = p_affine_13_2*tmp_86;
      real_t tmp_456 = p_affine_13_0*tmp_67;
      real_t tmp_457 = p_affine_13_0*tmp_65;
      real_t tmp_458 = p_affine_13_0*tmp_63;
      real_t a_0_0 = tmp_110*(tmp_101*tmp_68 - tmp_108*tmp_109) + tmp_128*(-tmp_109*tmp_127 + tmp_120*tmp_68) + tmp_146*(-tmp_109*tmp_145 + tmp_138*tmp_68) + tmp_164*(-tmp_109*tmp_163 + tmp_156*tmp_68) + tmp_182*(-tmp_109*tmp_181 + tmp_174*tmp_68) + tmp_200*(-tmp_109*tmp_199 + tmp_192*tmp_68) + tmp_218*(-tmp_109*tmp_217 + tmp_210*tmp_68) + tmp_236*(-tmp_109*tmp_235 + tmp_228*tmp_68) + tmp_254*(-tmp_109*tmp_253 + tmp_246*tmp_68) + tmp_272*(-tmp_109*tmp_271 + tmp_264*tmp_68) + tmp_290*(-tmp_109*tmp_289 + tmp_282*tmp_68) + tmp_308*(-tmp_109*tmp_307 + tmp_300*tmp_68) + tmp_326*(-tmp_109*tmp_325 + tmp_318*tmp_68) + tmp_344*(-tmp_109*tmp_343 + tmp_336*tmp_68) + tmp_362*(-tmp_109*tmp_361 + tmp_354*tmp_68) + tmp_380*(-tmp_109*tmp_379 + tmp_372*tmp_68) + tmp_398*(-tmp_109*tmp_397 + tmp_390*tmp_68) + tmp_416*(-tmp_109*tmp_415 + tmp_408*tmp_68) + tmp_434*(-tmp_109*tmp_433 + tmp_426*tmp_68) + tmp_452*(-tmp_109*tmp_451 + tmp_444*tmp_68) + tmp_91*(tmp_45*tmp_68 - tmp_84*tmp_89);
      real_t a_0_1 = tmp_110*(-tmp_108*tmp_453 + tmp_68*tmp_98) + tmp_128*(tmp_117*tmp_68 - tmp_127*tmp_453) + tmp_146*(tmp_135*tmp_68 - tmp_145*tmp_453) + tmp_164*(tmp_153*tmp_68 - tmp_163*tmp_453) + tmp_182*(tmp_171*tmp_68 - tmp_181*tmp_453) + tmp_200*(tmp_189*tmp_68 - tmp_199*tmp_453) + tmp_218*(tmp_207*tmp_68 - tmp_217*tmp_453) + tmp_236*(tmp_225*tmp_68 - tmp_235*tmp_453) + tmp_254*(tmp_243*tmp_68 - tmp_253*tmp_453) + tmp_272*(tmp_261*tmp_68 - tmp_271*tmp_453) + tmp_290*(tmp_279*tmp_68 - tmp_289*tmp_453) + tmp_308*(tmp_297*tmp_68 - tmp_307*tmp_453) + tmp_326*(tmp_315*tmp_68 - tmp_325*tmp_453) + tmp_344*(tmp_333*tmp_68 - tmp_343*tmp_453) + tmp_362*(tmp_351*tmp_68 - tmp_361*tmp_453) + tmp_380*(tmp_369*tmp_68 - tmp_379*tmp_453) + tmp_398*(tmp_387*tmp_68 - tmp_397*tmp_453) + tmp_416*(tmp_405*tmp_68 - tmp_415*tmp_453) + tmp_434*(tmp_423*tmp_68 - tmp_433*tmp_453) + tmp_452*(tmp_441*tmp_68 - tmp_451*tmp_453) + tmp_91*(tmp_36*tmp_68 - tmp_84*tmp_88);
      real_t a_0_2 = tmp_110*(-tmp_108*tmp_454 + tmp_68*tmp_99) + tmp_128*(tmp_118*tmp_68 - tmp_127*tmp_454) + tmp_146*(tmp_136*tmp_68 - tmp_145*tmp_454) + tmp_164*(tmp_154*tmp_68 - tmp_163*tmp_454) + tmp_182*(tmp_172*tmp_68 - tmp_181*tmp_454) + tmp_200*(tmp_190*tmp_68 - tmp_199*tmp_454) + tmp_218*(tmp_208*tmp_68 - tmp_217*tmp_454) + tmp_236*(tmp_226*tmp_68 - tmp_235*tmp_454) + tmp_254*(tmp_244*tmp_68 - tmp_253*tmp_454) + tmp_272*(tmp_262*tmp_68 - tmp_271*tmp_454) + tmp_290*(tmp_280*tmp_68 - tmp_289*tmp_454) + tmp_308*(tmp_298*tmp_68 - tmp_307*tmp_454) + tmp_326*(tmp_316*tmp_68 - tmp_325*tmp_454) + tmp_344*(tmp_334*tmp_68 - tmp_343*tmp_454) + tmp_362*(tmp_352*tmp_68 - tmp_361*tmp_454) + tmp_380*(tmp_370*tmp_68 - tmp_379*tmp_454) + tmp_398*(tmp_388*tmp_68 - tmp_397*tmp_454) + tmp_416*(tmp_406*tmp_68 - tmp_415*tmp_454) + tmp_434*(tmp_424*tmp_68 - tmp_433*tmp_454) + tmp_452*(tmp_442*tmp_68 - tmp_451*tmp_454) + tmp_91*(tmp_40*tmp_68 - tmp_84*tmp_87);
      real_t a_0_3 = tmp_110*(tmp_100*tmp_68 - tmp_108*tmp_455) + tmp_128*(tmp_119*tmp_68 - tmp_127*tmp_455) + tmp_146*(tmp_137*tmp_68 - tmp_145*tmp_455) + tmp_164*(tmp_155*tmp_68 - tmp_163*tmp_455) + tmp_182*(tmp_173*tmp_68 - tmp_181*tmp_455) + tmp_200*(tmp_191*tmp_68 - tmp_199*tmp_455) + tmp_218*(tmp_209*tmp_68 - tmp_217*tmp_455) + tmp_236*(tmp_227*tmp_68 - tmp_235*tmp_455) + tmp_254*(tmp_245*tmp_68 - tmp_253*tmp_455) + tmp_272*(tmp_263*tmp_68 - tmp_271*tmp_455) + tmp_290*(tmp_281*tmp_68 - tmp_289*tmp_455) + tmp_308*(tmp_299*tmp_68 - tmp_307*tmp_455) + tmp_326*(tmp_317*tmp_68 - tmp_325*tmp_455) + tmp_344*(tmp_335*tmp_68 - tmp_343*tmp_455) + tmp_362*(tmp_353*tmp_68 - tmp_361*tmp_455) + tmp_380*(tmp_371*tmp_68 - tmp_379*tmp_455) + tmp_398*(tmp_389*tmp_68 - tmp_397*tmp_455) + tmp_416*(tmp_407*tmp_68 - tmp_415*tmp_455) + tmp_434*(tmp_425*tmp_68 - tmp_433*tmp_455) + tmp_452*(tmp_443*tmp_68 - tmp_451*tmp_455) + tmp_91*(tmp_44*tmp_68 - tmp_84*tmp_86);
      real_t a_1_0 = tmp_110*(tmp_101*tmp_456 - tmp_105*tmp_109) + tmp_128*(-tmp_109*tmp_124 + tmp_120*tmp_456) + tmp_146*(-tmp_109*tmp_142 + tmp_138*tmp_456) + tmp_164*(-tmp_109*tmp_160 + tmp_156*tmp_456) + tmp_182*(-tmp_109*tmp_178 + tmp_174*tmp_456) + tmp_200*(-tmp_109*tmp_196 + tmp_192*tmp_456) + tmp_218*(-tmp_109*tmp_214 + tmp_210*tmp_456) + tmp_236*(-tmp_109*tmp_232 + tmp_228*tmp_456) + tmp_254*(-tmp_109*tmp_250 + tmp_246*tmp_456) + tmp_272*(-tmp_109*tmp_268 + tmp_264*tmp_456) + tmp_290*(-tmp_109*tmp_286 + tmp_282*tmp_456) + tmp_308*(-tmp_109*tmp_304 + tmp_300*tmp_456) + tmp_326*(-tmp_109*tmp_322 + tmp_318*tmp_456) + tmp_344*(-tmp_109*tmp_340 + tmp_336*tmp_456) + tmp_362*(-tmp_109*tmp_358 + tmp_354*tmp_456) + tmp_380*(-tmp_109*tmp_376 + tmp_372*tmp_456) + tmp_398*(-tmp_109*tmp_394 + tmp_390*tmp_456) + tmp_416*(-tmp_109*tmp_412 + tmp_408*tmp_456) + tmp_434*(-tmp_109*tmp_430 + tmp_426*tmp_456) + tmp_452*(-tmp_109*tmp_448 + tmp_444*tmp_456) + tmp_91*(-tmp_109*tmp_77 + tmp_45*tmp_456);
      real_t a_1_1 = tmp_110*(-tmp_105*tmp_453 + tmp_456*tmp_98) + tmp_128*(tmp_117*tmp_456 - tmp_124*tmp_453) + tmp_146*(tmp_135*tmp_456 - tmp_142*tmp_453) + tmp_164*(tmp_153*tmp_456 - tmp_160*tmp_453) + tmp_182*(tmp_171*tmp_456 - tmp_178*tmp_453) + tmp_200*(tmp_189*tmp_456 - tmp_196*tmp_453) + tmp_218*(tmp_207*tmp_456 - tmp_214*tmp_453) + tmp_236*(tmp_225*tmp_456 - tmp_232*tmp_453) + tmp_254*(tmp_243*tmp_456 - tmp_250*tmp_453) + tmp_272*(tmp_261*tmp_456 - tmp_268*tmp_453) + tmp_290*(tmp_279*tmp_456 - tmp_286*tmp_453) + tmp_308*(tmp_297*tmp_456 - tmp_304*tmp_453) + tmp_326*(tmp_315*tmp_456 - tmp_322*tmp_453) + tmp_344*(tmp_333*tmp_456 - tmp_340*tmp_453) + tmp_362*(tmp_351*tmp_456 - tmp_358*tmp_453) + tmp_380*(tmp_369*tmp_456 - tmp_376*tmp_453) + tmp_398*(tmp_387*tmp_456 - tmp_394*tmp_453) + tmp_416*(tmp_405*tmp_456 - tmp_412*tmp_453) + tmp_434*(tmp_423*tmp_456 - tmp_430*tmp_453) + tmp_452*(tmp_441*tmp_456 - tmp_448*tmp_453) + tmp_91*(tmp_36*tmp_456 - tmp_453*tmp_77);
      real_t a_1_2 = tmp_110*(-tmp_105*tmp_454 + tmp_456*tmp_99) + tmp_128*(tmp_118*tmp_456 - tmp_124*tmp_454) + tmp_146*(tmp_136*tmp_456 - tmp_142*tmp_454) + tmp_164*(tmp_154*tmp_456 - tmp_160*tmp_454) + tmp_182*(tmp_172*tmp_456 - tmp_178*tmp_454) + tmp_200*(tmp_190*tmp_456 - tmp_196*tmp_454) + tmp_218*(tmp_208*tmp_456 - tmp_214*tmp_454) + tmp_236*(tmp_226*tmp_456 - tmp_232*tmp_454) + tmp_254*(tmp_244*tmp_456 - tmp_250*tmp_454) + tmp_272*(tmp_262*tmp_456 - tmp_268*tmp_454) + tmp_290*(tmp_280*tmp_456 - tmp_286*tmp_454) + tmp_308*(tmp_298*tmp_456 - tmp_304*tmp_454) + tmp_326*(tmp_316*tmp_456 - tmp_322*tmp_454) + tmp_344*(tmp_334*tmp_456 - tmp_340*tmp_454) + tmp_362*(tmp_352*tmp_456 - tmp_358*tmp_454) + tmp_380*(tmp_370*tmp_456 - tmp_376*tmp_454) + tmp_398*(tmp_388*tmp_456 - tmp_394*tmp_454) + tmp_416*(tmp_406*tmp_456 - tmp_412*tmp_454) + tmp_434*(tmp_424*tmp_456 - tmp_430*tmp_454) + tmp_452*(tmp_442*tmp_456 - tmp_448*tmp_454) + tmp_91*(tmp_40*tmp_456 - tmp_454*tmp_77);
      real_t a_1_3 = tmp_110*(tmp_100*tmp_456 - tmp_105*tmp_455) + tmp_128*(tmp_119*tmp_456 - tmp_124*tmp_455) + tmp_146*(tmp_137*tmp_456 - tmp_142*tmp_455) + tmp_164*(tmp_155*tmp_456 - tmp_160*tmp_455) + tmp_182*(tmp_173*tmp_456 - tmp_178*tmp_455) + tmp_200*(tmp_191*tmp_456 - tmp_196*tmp_455) + tmp_218*(tmp_209*tmp_456 - tmp_214*tmp_455) + tmp_236*(tmp_227*tmp_456 - tmp_232*tmp_455) + tmp_254*(tmp_245*tmp_456 - tmp_250*tmp_455) + tmp_272*(tmp_263*tmp_456 - tmp_268*tmp_455) + tmp_290*(tmp_281*tmp_456 - tmp_286*tmp_455) + tmp_308*(tmp_299*tmp_456 - tmp_304*tmp_455) + tmp_326*(tmp_317*tmp_456 - tmp_322*tmp_455) + tmp_344*(tmp_335*tmp_456 - tmp_340*tmp_455) + tmp_362*(tmp_353*tmp_456 - tmp_358*tmp_455) + tmp_380*(tmp_371*tmp_456 - tmp_376*tmp_455) + tmp_398*(tmp_389*tmp_456 - tmp_394*tmp_455) + tmp_416*(tmp_407*tmp_456 - tmp_412*tmp_455) + tmp_434*(tmp_425*tmp_456 - tmp_430*tmp_455) + tmp_452*(tmp_443*tmp_456 - tmp_448*tmp_455) + tmp_91*(tmp_44*tmp_456 - tmp_455*tmp_77);
      real_t a_2_0 = tmp_110*(tmp_101*tmp_457 - tmp_106*tmp_109) + tmp_128*(-tmp_109*tmp_125 + tmp_120*tmp_457) + tmp_146*(-tmp_109*tmp_143 + tmp_138*tmp_457) + tmp_164*(-tmp_109*tmp_161 + tmp_156*tmp_457) + tmp_182*(-tmp_109*tmp_179 + tmp_174*tmp_457) + tmp_200*(-tmp_109*tmp_197 + tmp_192*tmp_457) + tmp_218*(-tmp_109*tmp_215 + tmp_210*tmp_457) + tmp_236*(-tmp_109*tmp_233 + tmp_228*tmp_457) + tmp_254*(-tmp_109*tmp_251 + tmp_246*tmp_457) + tmp_272*(-tmp_109*tmp_269 + tmp_264*tmp_457) + tmp_290*(-tmp_109*tmp_287 + tmp_282*tmp_457) + tmp_308*(-tmp_109*tmp_305 + tmp_300*tmp_457) + tmp_326*(-tmp_109*tmp_323 + tmp_318*tmp_457) + tmp_344*(-tmp_109*tmp_341 + tmp_336*tmp_457) + tmp_362*(-tmp_109*tmp_359 + tmp_354*tmp_457) + tmp_380*(-tmp_109*tmp_377 + tmp_372*tmp_457) + tmp_398*(-tmp_109*tmp_395 + tmp_390*tmp_457) + tmp_416*(-tmp_109*tmp_413 + tmp_408*tmp_457) + tmp_434*(-tmp_109*tmp_431 + tmp_426*tmp_457) + tmp_452*(-tmp_109*tmp_449 + tmp_444*tmp_457) + tmp_91*(-tmp_109*tmp_80 + tmp_45*tmp_457);
      real_t a_2_1 = tmp_110*(-tmp_106*tmp_453 + tmp_457*tmp_98) + tmp_128*(tmp_117*tmp_457 - tmp_125*tmp_453) + tmp_146*(tmp_135*tmp_457 - tmp_143*tmp_453) + tmp_164*(tmp_153*tmp_457 - tmp_161*tmp_453) + tmp_182*(tmp_171*tmp_457 - tmp_179*tmp_453) + tmp_200*(tmp_189*tmp_457 - tmp_197*tmp_453) + tmp_218*(tmp_207*tmp_457 - tmp_215*tmp_453) + tmp_236*(tmp_225*tmp_457 - tmp_233*tmp_453) + tmp_254*(tmp_243*tmp_457 - tmp_251*tmp_453) + tmp_272*(tmp_261*tmp_457 - tmp_269*tmp_453) + tmp_290*(tmp_279*tmp_457 - tmp_287*tmp_453) + tmp_308*(tmp_297*tmp_457 - tmp_305*tmp_453) + tmp_326*(tmp_315*tmp_457 - tmp_323*tmp_453) + tmp_344*(tmp_333*tmp_457 - tmp_341*tmp_453) + tmp_362*(tmp_351*tmp_457 - tmp_359*tmp_453) + tmp_380*(tmp_369*tmp_457 - tmp_377*tmp_453) + tmp_398*(tmp_387*tmp_457 - tmp_395*tmp_453) + tmp_416*(tmp_405*tmp_457 - tmp_413*tmp_453) + tmp_434*(tmp_423*tmp_457 - tmp_431*tmp_453) + tmp_452*(tmp_441*tmp_457 - tmp_449*tmp_453) + tmp_91*(tmp_36*tmp_457 - tmp_453*tmp_80);
      real_t a_2_2 = tmp_110*(-tmp_106*tmp_454 + tmp_457*tmp_99) + tmp_128*(tmp_118*tmp_457 - tmp_125*tmp_454) + tmp_146*(tmp_136*tmp_457 - tmp_143*tmp_454) + tmp_164*(tmp_154*tmp_457 - tmp_161*tmp_454) + tmp_182*(tmp_172*tmp_457 - tmp_179*tmp_454) + tmp_200*(tmp_190*tmp_457 - tmp_197*tmp_454) + tmp_218*(tmp_208*tmp_457 - tmp_215*tmp_454) + tmp_236*(tmp_226*tmp_457 - tmp_233*tmp_454) + tmp_254*(tmp_244*tmp_457 - tmp_251*tmp_454) + tmp_272*(tmp_262*tmp_457 - tmp_269*tmp_454) + tmp_290*(tmp_280*tmp_457 - tmp_287*tmp_454) + tmp_308*(tmp_298*tmp_457 - tmp_305*tmp_454) + tmp_326*(tmp_316*tmp_457 - tmp_323*tmp_454) + tmp_344*(tmp_334*tmp_457 - tmp_341*tmp_454) + tmp_362*(tmp_352*tmp_457 - tmp_359*tmp_454) + tmp_380*(tmp_370*tmp_457 - tmp_377*tmp_454) + tmp_398*(tmp_388*tmp_457 - tmp_395*tmp_454) + tmp_416*(tmp_406*tmp_457 - tmp_413*tmp_454) + tmp_434*(tmp_424*tmp_457 - tmp_431*tmp_454) + tmp_452*(tmp_442*tmp_457 - tmp_449*tmp_454) + tmp_91*(tmp_40*tmp_457 - tmp_454*tmp_80);
      real_t a_2_3 = tmp_110*(tmp_100*tmp_457 - tmp_106*tmp_455) + tmp_128*(tmp_119*tmp_457 - tmp_125*tmp_455) + tmp_146*(tmp_137*tmp_457 - tmp_143*tmp_455) + tmp_164*(tmp_155*tmp_457 - tmp_161*tmp_455) + tmp_182*(tmp_173*tmp_457 - tmp_179*tmp_455) + tmp_200*(tmp_191*tmp_457 - tmp_197*tmp_455) + tmp_218*(tmp_209*tmp_457 - tmp_215*tmp_455) + tmp_236*(tmp_227*tmp_457 - tmp_233*tmp_455) + tmp_254*(tmp_245*tmp_457 - tmp_251*tmp_455) + tmp_272*(tmp_263*tmp_457 - tmp_269*tmp_455) + tmp_290*(tmp_281*tmp_457 - tmp_287*tmp_455) + tmp_308*(tmp_299*tmp_457 - tmp_305*tmp_455) + tmp_326*(tmp_317*tmp_457 - tmp_323*tmp_455) + tmp_344*(tmp_335*tmp_457 - tmp_341*tmp_455) + tmp_362*(tmp_353*tmp_457 - tmp_359*tmp_455) + tmp_380*(tmp_371*tmp_457 - tmp_377*tmp_455) + tmp_398*(tmp_389*tmp_457 - tmp_395*tmp_455) + tmp_416*(tmp_407*tmp_457 - tmp_413*tmp_455) + tmp_434*(tmp_425*tmp_457 - tmp_431*tmp_455) + tmp_452*(tmp_443*tmp_457 - tmp_449*tmp_455) + tmp_91*(tmp_44*tmp_457 - tmp_455*tmp_80);
      real_t a_3_0 = tmp_110*(tmp_101*tmp_458 - tmp_107*tmp_109) + tmp_128*(-tmp_109*tmp_126 + tmp_120*tmp_458) + tmp_146*(-tmp_109*tmp_144 + tmp_138*tmp_458) + tmp_164*(-tmp_109*tmp_162 + tmp_156*tmp_458) + tmp_182*(-tmp_109*tmp_180 + tmp_174*tmp_458) + tmp_200*(-tmp_109*tmp_198 + tmp_192*tmp_458) + tmp_218*(-tmp_109*tmp_216 + tmp_210*tmp_458) + tmp_236*(-tmp_109*tmp_234 + tmp_228*tmp_458) + tmp_254*(-tmp_109*tmp_252 + tmp_246*tmp_458) + tmp_272*(-tmp_109*tmp_270 + tmp_264*tmp_458) + tmp_290*(-tmp_109*tmp_288 + tmp_282*tmp_458) + tmp_308*(-tmp_109*tmp_306 + tmp_300*tmp_458) + tmp_326*(-tmp_109*tmp_324 + tmp_318*tmp_458) + tmp_344*(-tmp_109*tmp_342 + tmp_336*tmp_458) + tmp_362*(-tmp_109*tmp_360 + tmp_354*tmp_458) + tmp_380*(-tmp_109*tmp_378 + tmp_372*tmp_458) + tmp_398*(-tmp_109*tmp_396 + tmp_390*tmp_458) + tmp_416*(-tmp_109*tmp_414 + tmp_408*tmp_458) + tmp_434*(-tmp_109*tmp_432 + tmp_426*tmp_458) + tmp_452*(-tmp_109*tmp_450 + tmp_444*tmp_458) + tmp_91*(-tmp_109*tmp_83 + tmp_45*tmp_458);
      real_t a_3_1 = tmp_110*(-tmp_107*tmp_453 + tmp_458*tmp_98) + tmp_128*(tmp_117*tmp_458 - tmp_126*tmp_453) + tmp_146*(tmp_135*tmp_458 - tmp_144*tmp_453) + tmp_164*(tmp_153*tmp_458 - tmp_162*tmp_453) + tmp_182*(tmp_171*tmp_458 - tmp_180*tmp_453) + tmp_200*(tmp_189*tmp_458 - tmp_198*tmp_453) + tmp_218*(tmp_207*tmp_458 - tmp_216*tmp_453) + tmp_236*(tmp_225*tmp_458 - tmp_234*tmp_453) + tmp_254*(tmp_243*tmp_458 - tmp_252*tmp_453) + tmp_272*(tmp_261*tmp_458 - tmp_270*tmp_453) + tmp_290*(tmp_279*tmp_458 - tmp_288*tmp_453) + tmp_308*(tmp_297*tmp_458 - tmp_306*tmp_453) + tmp_326*(tmp_315*tmp_458 - tmp_324*tmp_453) + tmp_344*(tmp_333*tmp_458 - tmp_342*tmp_453) + tmp_362*(tmp_351*tmp_458 - tmp_360*tmp_453) + tmp_380*(tmp_369*tmp_458 - tmp_378*tmp_453) + tmp_398*(tmp_387*tmp_458 - tmp_396*tmp_453) + tmp_416*(tmp_405*tmp_458 - tmp_414*tmp_453) + tmp_434*(tmp_423*tmp_458 - tmp_432*tmp_453) + tmp_452*(tmp_441*tmp_458 - tmp_450*tmp_453) + tmp_91*(tmp_36*tmp_458 - tmp_453*tmp_83);
      real_t a_3_2 = tmp_110*(-tmp_107*tmp_454 + tmp_458*tmp_99) + tmp_128*(tmp_118*tmp_458 - tmp_126*tmp_454) + tmp_146*(tmp_136*tmp_458 - tmp_144*tmp_454) + tmp_164*(tmp_154*tmp_458 - tmp_162*tmp_454) + tmp_182*(tmp_172*tmp_458 - tmp_180*tmp_454) + tmp_200*(tmp_190*tmp_458 - tmp_198*tmp_454) + tmp_218*(tmp_208*tmp_458 - tmp_216*tmp_454) + tmp_236*(tmp_226*tmp_458 - tmp_234*tmp_454) + tmp_254*(tmp_244*tmp_458 - tmp_252*tmp_454) + tmp_272*(tmp_262*tmp_458 - tmp_270*tmp_454) + tmp_290*(tmp_280*tmp_458 - tmp_288*tmp_454) + tmp_308*(tmp_298*tmp_458 - tmp_306*tmp_454) + tmp_326*(tmp_316*tmp_458 - tmp_324*tmp_454) + tmp_344*(tmp_334*tmp_458 - tmp_342*tmp_454) + tmp_362*(tmp_352*tmp_458 - tmp_360*tmp_454) + tmp_380*(tmp_370*tmp_458 - tmp_378*tmp_454) + tmp_398*(tmp_388*tmp_458 - tmp_396*tmp_454) + tmp_416*(tmp_406*tmp_458 - tmp_414*tmp_454) + tmp_434*(tmp_424*tmp_458 - tmp_432*tmp_454) + tmp_452*(tmp_442*tmp_458 - tmp_450*tmp_454) + tmp_91*(tmp_40*tmp_458 - tmp_454*tmp_83);
      real_t a_3_3 = tmp_110*(tmp_100*tmp_458 - tmp_107*tmp_455) + tmp_128*(tmp_119*tmp_458 - tmp_126*tmp_455) + tmp_146*(tmp_137*tmp_458 - tmp_144*tmp_455) + tmp_164*(tmp_155*tmp_458 - tmp_162*tmp_455) + tmp_182*(tmp_173*tmp_458 - tmp_180*tmp_455) + tmp_200*(tmp_191*tmp_458 - tmp_198*tmp_455) + tmp_218*(tmp_209*tmp_458 - tmp_216*tmp_455) + tmp_236*(tmp_227*tmp_458 - tmp_234*tmp_455) + tmp_254*(tmp_245*tmp_458 - tmp_252*tmp_455) + tmp_272*(tmp_263*tmp_458 - tmp_270*tmp_455) + tmp_290*(tmp_281*tmp_458 - tmp_288*tmp_455) + tmp_308*(tmp_299*tmp_458 - tmp_306*tmp_455) + tmp_326*(tmp_317*tmp_458 - tmp_324*tmp_455) + tmp_344*(tmp_335*tmp_458 - tmp_342*tmp_455) + tmp_362*(tmp_353*tmp_458 - tmp_360*tmp_455) + tmp_380*(tmp_371*tmp_458 - tmp_378*tmp_455) + tmp_398*(tmp_389*tmp_458 - tmp_396*tmp_455) + tmp_416*(tmp_407*tmp_458 - tmp_414*tmp_455) + tmp_434*(tmp_425*tmp_458 - tmp_432*tmp_455) + tmp_452*(tmp_443*tmp_458 - tmp_450*tmp_455) + tmp_91*(tmp_44*tmp_458 - tmp_455*tmp_83);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 0.5*tmp_15;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_43*tmp_6;
      real_t tmp_47 = p_affine_13_0*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_40*tmp_43;
      real_t tmp_49 = tmp_36*tmp_43;
      real_t tmp_50 = tmp_27*tmp_43;
      real_t tmp_51 = p_affine_13_2*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 2.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_57 = tmp_21*tmp_55 + tmp_27*tmp_56 + tmp_54*tmp_6;
      real_t tmp_58 = tmp_34*tmp_54 + tmp_35*tmp_55 + tmp_36*tmp_56;
      real_t tmp_59 = tmp_38*tmp_54 + tmp_39*tmp_55 + tmp_40*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 0.037198804536718075*tmp_52;
      real_t tmp_62 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_6*tmp_62;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64;
      real_t tmp_68 = -tmp_65 - tmp_66 - tmp_67 + 1;
      real_t tmp_69 = 0.020848748529055869*tmp_52;
      real_t tmp_70 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_71 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_72 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_73 = tmp_21*tmp_71 + tmp_27*tmp_72 + tmp_6*tmp_70;
      real_t tmp_74 = tmp_34*tmp_70 + tmp_35*tmp_71 + tmp_36*tmp_72;
      real_t tmp_75 = tmp_38*tmp_70 + tmp_39*tmp_71 + tmp_40*tmp_72;
      real_t tmp_76 = -tmp_73 - tmp_74 - tmp_75 + 1;
      real_t tmp_77 = 0.019202922745021479*tmp_52;
      real_t tmp_78 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_6*tmp_78;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80;
      real_t tmp_84 = -tmp_81 - tmp_82 - tmp_83 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_52;
      real_t tmp_86 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_87 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_88 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_89 = tmp_21*tmp_87 + tmp_27*tmp_88 + tmp_6*tmp_86;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_93 = 0.019202922745021479*tmp_52;
      real_t tmp_94 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_95 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_96 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_97 = tmp_21*tmp_95 + tmp_27*tmp_96 + tmp_6*tmp_94;
      real_t tmp_98 = tmp_34*tmp_94 + tmp_35*tmp_95 + tmp_36*tmp_96;
      real_t tmp_99 = tmp_38*tmp_94 + tmp_39*tmp_95 + tmp_40*tmp_96;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_52;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_6 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_102*tmp_34 + tmp_103*tmp_35 + tmp_104*tmp_36;
      real_t tmp_107 = tmp_102*tmp_38 + tmp_103*tmp_39 + tmp_104*tmp_40;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = 0.019202922745021479*tmp_52;
      real_t tmp_110 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_111 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_112 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_113 = tmp_110*tmp_6 + tmp_111*tmp_21 + tmp_112*tmp_27;
      real_t tmp_114 = tmp_110*tmp_34 + tmp_111*tmp_35 + tmp_112*tmp_36;
      real_t tmp_115 = tmp_110*tmp_38 + tmp_111*tmp_39 + tmp_112*tmp_40;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = 0.020848748529055869*tmp_52;
      real_t tmp_118 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.019202922745021479*tmp_52;
      real_t tmp_126 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_127 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_128 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_129 = tmp_126*tmp_6 + tmp_127*tmp_21 + tmp_128*tmp_27;
      real_t tmp_130 = tmp_126*tmp_34 + tmp_127*tmp_35 + tmp_128*tmp_36;
      real_t tmp_131 = tmp_126*tmp_38 + tmp_127*tmp_39 + tmp_128*tmp_40;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 0.020848748529055869*tmp_52;
      real_t tmp_134 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_6 + tmp_135*tmp_21 + tmp_136*tmp_27;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40;
      real_t tmp_140 = -tmp_137 - tmp_138 - tmp_139 + 1;
      real_t tmp_141 = 0.019202922745021479*tmp_52;
      real_t tmp_142 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_143 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_144 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_145 = tmp_142*tmp_6 + tmp_143*tmp_21 + tmp_144*tmp_27;
      real_t tmp_146 = tmp_142*tmp_34 + tmp_143*tmp_35 + tmp_144*tmp_36;
      real_t tmp_147 = tmp_142*tmp_38 + tmp_143*tmp_39 + tmp_144*tmp_40;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = 0.042507265838595799*tmp_52;
      real_t tmp_150 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_6 + tmp_151*tmp_21 + tmp_152*tmp_27;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_52;
      real_t tmp_158 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_6 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = 0.0068572537431980923*tmp_52;
      real_t tmp_166 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_167 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_168 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_169 = tmp_166*tmp_6 + tmp_167*tmp_21 + tmp_168*tmp_27;
      real_t tmp_170 = tmp_166*tmp_34 + tmp_167*tmp_35 + tmp_168*tmp_36;
      real_t tmp_171 = tmp_166*tmp_38 + tmp_167*tmp_39 + tmp_168*tmp_40;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = 0.037198804536718075*tmp_52;
      real_t tmp_174 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_175 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_176 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_177 = tmp_174*tmp_6 + tmp_175*tmp_21 + tmp_176*tmp_27;
      real_t tmp_178 = tmp_174*tmp_34 + tmp_175*tmp_35 + tmp_176*tmp_36;
      real_t tmp_179 = tmp_174*tmp_38 + tmp_175*tmp_39 + tmp_176*tmp_40;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = 0.042507265838595799*tmp_52;
      real_t tmp_182 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_183 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_184 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_185 = tmp_182*tmp_6 + tmp_183*tmp_21 + tmp_184*tmp_27;
      real_t tmp_186 = tmp_182*tmp_34 + tmp_183*tmp_35 + tmp_184*tmp_36;
      real_t tmp_187 = tmp_182*tmp_38 + tmp_183*tmp_39 + tmp_184*tmp_40;
      real_t tmp_188 = -tmp_185 - tmp_186 - tmp_187 + 1;
      real_t tmp_189 = 0.0068572537431980923*tmp_52;
      real_t tmp_190 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.037198804536718075*tmp_52;
      real_t tmp_198 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_199 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_200 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_201 = tmp_198*tmp_6 + tmp_199*tmp_21 + tmp_200*tmp_27;
      real_t tmp_202 = tmp_198*tmp_34 + tmp_199*tmp_35 + tmp_200*tmp_36;
      real_t tmp_203 = tmp_198*tmp_38 + tmp_199*tmp_39 + tmp_200*tmp_40;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 0.042507265838595799*tmp_52;
      real_t tmp_206 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_6 + tmp_207*tmp_21 + tmp_208*tmp_27;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = 0.019202922745021479*tmp_52;
      real_t tmp_214 = p_affine_13_2*tmp_50;
      real_t tmp_215 = p_affine_13_2*tmp_49;
      real_t tmp_216 = p_affine_13_2*tmp_48;
      real_t tmp_217 = p_affine_13_0*tmp_46;
      real_t tmp_218 = p_affine_13_0*tmp_45;
      real_t tmp_219 = p_affine_13_0*tmp_44;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_47 - tmp_100*tmp_51) + tmp_109*(-tmp_108*tmp_47 - tmp_108*tmp_51) + tmp_117*(-tmp_116*tmp_47 - tmp_116*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_133*(-tmp_132*tmp_47 - tmp_132*tmp_51) + tmp_141*(-tmp_140*tmp_47 - tmp_140*tmp_51) + tmp_149*(-tmp_148*tmp_47 - tmp_148*tmp_51) + tmp_157*(-tmp_156*tmp_47 - tmp_156*tmp_51) + tmp_165*(-tmp_164*tmp_47 - tmp_164*tmp_51) + tmp_173*(-tmp_172*tmp_47 - tmp_172*tmp_51) + tmp_181*(-tmp_180*tmp_47 - tmp_180*tmp_51) + tmp_189*(-tmp_188*tmp_47 - tmp_188*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_205*(-tmp_204*tmp_47 - tmp_204*tmp_51) + tmp_213*(-tmp_212*tmp_47 - tmp_212*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_61*(-tmp_47*tmp_60 - tmp_51*tmp_60) + tmp_69*(-tmp_47*tmp_68 - tmp_51*tmp_68) + tmp_77*(-tmp_47*tmp_76 - tmp_51*tmp_76) + tmp_85*(-tmp_47*tmp_84 - tmp_51*tmp_84) + tmp_93*(-tmp_47*tmp_92 - tmp_51*tmp_92);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_214 - tmp_47*tmp_97) + tmp_109*(-tmp_105*tmp_47 - tmp_108*tmp_214) + tmp_117*(-tmp_113*tmp_47 - tmp_116*tmp_214) + tmp_125*(-tmp_121*tmp_47 - tmp_124*tmp_214) + tmp_133*(-tmp_129*tmp_47 - tmp_132*tmp_214) + tmp_141*(-tmp_137*tmp_47 - tmp_140*tmp_214) + tmp_149*(-tmp_145*tmp_47 - tmp_148*tmp_214) + tmp_157*(-tmp_153*tmp_47 - tmp_156*tmp_214) + tmp_165*(-tmp_161*tmp_47 - tmp_164*tmp_214) + tmp_173*(-tmp_169*tmp_47 - tmp_172*tmp_214) + tmp_181*(-tmp_177*tmp_47 - tmp_180*tmp_214) + tmp_189*(-tmp_185*tmp_47 - tmp_188*tmp_214) + tmp_197*(-tmp_193*tmp_47 - tmp_196*tmp_214) + tmp_205*(-tmp_201*tmp_47 - tmp_204*tmp_214) + tmp_213*(-tmp_209*tmp_47 - tmp_212*tmp_214) + tmp_53*(-tmp_214*tmp_42 - tmp_33*tmp_47) + tmp_61*(-tmp_214*tmp_60 - tmp_47*tmp_57) + tmp_69*(-tmp_214*tmp_68 - tmp_47*tmp_65) + tmp_77*(-tmp_214*tmp_76 - tmp_47*tmp_73) + tmp_85*(-tmp_214*tmp_84 - tmp_47*tmp_81) + tmp_93*(-tmp_214*tmp_92 - tmp_47*tmp_89);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_215 - tmp_47*tmp_98) + tmp_109*(-tmp_106*tmp_47 - tmp_108*tmp_215) + tmp_117*(-tmp_114*tmp_47 - tmp_116*tmp_215) + tmp_125*(-tmp_122*tmp_47 - tmp_124*tmp_215) + tmp_133*(-tmp_130*tmp_47 - tmp_132*tmp_215) + tmp_141*(-tmp_138*tmp_47 - tmp_140*tmp_215) + tmp_149*(-tmp_146*tmp_47 - tmp_148*tmp_215) + tmp_157*(-tmp_154*tmp_47 - tmp_156*tmp_215) + tmp_165*(-tmp_162*tmp_47 - tmp_164*tmp_215) + tmp_173*(-tmp_170*tmp_47 - tmp_172*tmp_215) + tmp_181*(-tmp_178*tmp_47 - tmp_180*tmp_215) + tmp_189*(-tmp_186*tmp_47 - tmp_188*tmp_215) + tmp_197*(-tmp_194*tmp_47 - tmp_196*tmp_215) + tmp_205*(-tmp_202*tmp_47 - tmp_204*tmp_215) + tmp_213*(-tmp_210*tmp_47 - tmp_212*tmp_215) + tmp_53*(-tmp_215*tmp_42 - tmp_37*tmp_47) + tmp_61*(-tmp_215*tmp_60 - tmp_47*tmp_58) + tmp_69*(-tmp_215*tmp_68 - tmp_47*tmp_66) + tmp_77*(-tmp_215*tmp_76 - tmp_47*tmp_74) + tmp_85*(-tmp_215*tmp_84 - tmp_47*tmp_82) + tmp_93*(-tmp_215*tmp_92 - tmp_47*tmp_90);
      real_t a_0_3 = tmp_101*(-tmp_100*tmp_216 - tmp_47*tmp_99) + tmp_109*(-tmp_107*tmp_47 - tmp_108*tmp_216) + tmp_117*(-tmp_115*tmp_47 - tmp_116*tmp_216) + tmp_125*(-tmp_123*tmp_47 - tmp_124*tmp_216) + tmp_133*(-tmp_131*tmp_47 - tmp_132*tmp_216) + tmp_141*(-tmp_139*tmp_47 - tmp_140*tmp_216) + tmp_149*(-tmp_147*tmp_47 - tmp_148*tmp_216) + tmp_157*(-tmp_155*tmp_47 - tmp_156*tmp_216) + tmp_165*(-tmp_163*tmp_47 - tmp_164*tmp_216) + tmp_173*(-tmp_171*tmp_47 - tmp_172*tmp_216) + tmp_181*(-tmp_179*tmp_47 - tmp_180*tmp_216) + tmp_189*(-tmp_187*tmp_47 - tmp_188*tmp_216) + tmp_197*(-tmp_195*tmp_47 - tmp_196*tmp_216) + tmp_205*(-tmp_203*tmp_47 - tmp_204*tmp_216) + tmp_213*(-tmp_211*tmp_47 - tmp_212*tmp_216) + tmp_53*(-tmp_216*tmp_42 - tmp_41*tmp_47) + tmp_61*(-tmp_216*tmp_60 - tmp_47*tmp_59) + tmp_69*(-tmp_216*tmp_68 - tmp_47*tmp_67) + tmp_77*(-tmp_216*tmp_76 - tmp_47*tmp_75) + tmp_85*(-tmp_216*tmp_84 - tmp_47*tmp_83) + tmp_93*(-tmp_216*tmp_92 - tmp_47*tmp_91);
      real_t a_1_0 = tmp_101*(-tmp_100*tmp_217 - tmp_51*tmp_97) + tmp_109*(-tmp_105*tmp_51 - tmp_108*tmp_217) + tmp_117*(-tmp_113*tmp_51 - tmp_116*tmp_217) + tmp_125*(-tmp_121*tmp_51 - tmp_124*tmp_217) + tmp_133*(-tmp_129*tmp_51 - tmp_132*tmp_217) + tmp_141*(-tmp_137*tmp_51 - tmp_140*tmp_217) + tmp_149*(-tmp_145*tmp_51 - tmp_148*tmp_217) + tmp_157*(-tmp_153*tmp_51 - tmp_156*tmp_217) + tmp_165*(-tmp_161*tmp_51 - tmp_164*tmp_217) + tmp_173*(-tmp_169*tmp_51 - tmp_172*tmp_217) + tmp_181*(-tmp_177*tmp_51 - tmp_180*tmp_217) + tmp_189*(-tmp_185*tmp_51 - tmp_188*tmp_217) + tmp_197*(-tmp_193*tmp_51 - tmp_196*tmp_217) + tmp_205*(-tmp_201*tmp_51 - tmp_204*tmp_217) + tmp_213*(-tmp_209*tmp_51 - tmp_212*tmp_217) + tmp_53*(-tmp_217*tmp_42 - tmp_33*tmp_51) + tmp_61*(-tmp_217*tmp_60 - tmp_51*tmp_57) + tmp_69*(-tmp_217*tmp_68 - tmp_51*tmp_65) + tmp_77*(-tmp_217*tmp_76 - tmp_51*tmp_73) + tmp_85*(-tmp_217*tmp_84 - tmp_51*tmp_81) + tmp_93*(-tmp_217*tmp_92 - tmp_51*tmp_89);
      real_t a_1_1 = tmp_101*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_109*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_117*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_125*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_133*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_141*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_149*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_157*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_165*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_173*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_181*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_189*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_197*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_205*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_213*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_53*(-tmp_214*tmp_33 - tmp_217*tmp_33) + tmp_61*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_69*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_77*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_85*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_93*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_1_2 = tmp_101*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_109*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_117*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_125*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_133*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_141*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_149*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_157*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_165*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_173*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_181*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_189*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_197*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_205*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_213*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_53*(-tmp_215*tmp_33 - tmp_217*tmp_37) + tmp_61*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_69*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_77*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_85*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_93*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_1_3 = tmp_101*(-tmp_216*tmp_97 - tmp_217*tmp_99) + tmp_109*(-tmp_105*tmp_216 - tmp_107*tmp_217) + tmp_117*(-tmp_113*tmp_216 - tmp_115*tmp_217) + tmp_125*(-tmp_121*tmp_216 - tmp_123*tmp_217) + tmp_133*(-tmp_129*tmp_216 - tmp_131*tmp_217) + tmp_141*(-tmp_137*tmp_216 - tmp_139*tmp_217) + tmp_149*(-tmp_145*tmp_216 - tmp_147*tmp_217) + tmp_157*(-tmp_153*tmp_216 - tmp_155*tmp_217) + tmp_165*(-tmp_161*tmp_216 - tmp_163*tmp_217) + tmp_173*(-tmp_169*tmp_216 - tmp_171*tmp_217) + tmp_181*(-tmp_177*tmp_216 - tmp_179*tmp_217) + tmp_189*(-tmp_185*tmp_216 - tmp_187*tmp_217) + tmp_197*(-tmp_193*tmp_216 - tmp_195*tmp_217) + tmp_205*(-tmp_201*tmp_216 - tmp_203*tmp_217) + tmp_213*(-tmp_209*tmp_216 - tmp_211*tmp_217) + tmp_53*(-tmp_216*tmp_33 - tmp_217*tmp_41) + tmp_61*(-tmp_216*tmp_57 - tmp_217*tmp_59) + tmp_69*(-tmp_216*tmp_65 - tmp_217*tmp_67) + tmp_77*(-tmp_216*tmp_73 - tmp_217*tmp_75) + tmp_85*(-tmp_216*tmp_81 - tmp_217*tmp_83) + tmp_93*(-tmp_216*tmp_89 - tmp_217*tmp_91);
      real_t a_2_0 = tmp_101*(-tmp_100*tmp_218 - tmp_51*tmp_98) + tmp_109*(-tmp_106*tmp_51 - tmp_108*tmp_218) + tmp_117*(-tmp_114*tmp_51 - tmp_116*tmp_218) + tmp_125*(-tmp_122*tmp_51 - tmp_124*tmp_218) + tmp_133*(-tmp_130*tmp_51 - tmp_132*tmp_218) + tmp_141*(-tmp_138*tmp_51 - tmp_140*tmp_218) + tmp_149*(-tmp_146*tmp_51 - tmp_148*tmp_218) + tmp_157*(-tmp_154*tmp_51 - tmp_156*tmp_218) + tmp_165*(-tmp_162*tmp_51 - tmp_164*tmp_218) + tmp_173*(-tmp_170*tmp_51 - tmp_172*tmp_218) + tmp_181*(-tmp_178*tmp_51 - tmp_180*tmp_218) + tmp_189*(-tmp_186*tmp_51 - tmp_188*tmp_218) + tmp_197*(-tmp_194*tmp_51 - tmp_196*tmp_218) + tmp_205*(-tmp_202*tmp_51 - tmp_204*tmp_218) + tmp_213*(-tmp_210*tmp_51 - tmp_212*tmp_218) + tmp_53*(-tmp_218*tmp_42 - tmp_37*tmp_51) + tmp_61*(-tmp_218*tmp_60 - tmp_51*tmp_58) + tmp_69*(-tmp_218*tmp_68 - tmp_51*tmp_66) + tmp_77*(-tmp_218*tmp_76 - tmp_51*tmp_74) + tmp_85*(-tmp_218*tmp_84 - tmp_51*tmp_82) + tmp_93*(-tmp_218*tmp_92 - tmp_51*tmp_90);
      real_t a_2_1 = tmp_101*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_109*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_117*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_125*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_133*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_141*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_149*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_157*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_165*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_173*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_181*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_189*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_197*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_205*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_213*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_53*(-tmp_214*tmp_37 - tmp_218*tmp_33) + tmp_61*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_69*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_77*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_85*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_93*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_2_2 = tmp_101*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_109*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_117*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_125*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_133*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_141*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_149*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_157*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_165*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_173*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_181*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_189*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_197*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_205*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_213*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_53*(-tmp_215*tmp_37 - tmp_218*tmp_37) + tmp_61*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_69*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_77*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_85*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_93*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      real_t a_2_3 = tmp_101*(-tmp_216*tmp_98 - tmp_218*tmp_99) + tmp_109*(-tmp_106*tmp_216 - tmp_107*tmp_218) + tmp_117*(-tmp_114*tmp_216 - tmp_115*tmp_218) + tmp_125*(-tmp_122*tmp_216 - tmp_123*tmp_218) + tmp_133*(-tmp_130*tmp_216 - tmp_131*tmp_218) + tmp_141*(-tmp_138*tmp_216 - tmp_139*tmp_218) + tmp_149*(-tmp_146*tmp_216 - tmp_147*tmp_218) + tmp_157*(-tmp_154*tmp_216 - tmp_155*tmp_218) + tmp_165*(-tmp_162*tmp_216 - tmp_163*tmp_218) + tmp_173*(-tmp_170*tmp_216 - tmp_171*tmp_218) + tmp_181*(-tmp_178*tmp_216 - tmp_179*tmp_218) + tmp_189*(-tmp_186*tmp_216 - tmp_187*tmp_218) + tmp_197*(-tmp_194*tmp_216 - tmp_195*tmp_218) + tmp_205*(-tmp_202*tmp_216 - tmp_203*tmp_218) + tmp_213*(-tmp_210*tmp_216 - tmp_211*tmp_218) + tmp_53*(-tmp_216*tmp_37 - tmp_218*tmp_41) + tmp_61*(-tmp_216*tmp_58 - tmp_218*tmp_59) + tmp_69*(-tmp_216*tmp_66 - tmp_218*tmp_67) + tmp_77*(-tmp_216*tmp_74 - tmp_218*tmp_75) + tmp_85*(-tmp_216*tmp_82 - tmp_218*tmp_83) + tmp_93*(-tmp_216*tmp_90 - tmp_218*tmp_91);
      real_t a_3_0 = tmp_101*(-tmp_100*tmp_219 - tmp_51*tmp_99) + tmp_109*(-tmp_107*tmp_51 - tmp_108*tmp_219) + tmp_117*(-tmp_115*tmp_51 - tmp_116*tmp_219) + tmp_125*(-tmp_123*tmp_51 - tmp_124*tmp_219) + tmp_133*(-tmp_131*tmp_51 - tmp_132*tmp_219) + tmp_141*(-tmp_139*tmp_51 - tmp_140*tmp_219) + tmp_149*(-tmp_147*tmp_51 - tmp_148*tmp_219) + tmp_157*(-tmp_155*tmp_51 - tmp_156*tmp_219) + tmp_165*(-tmp_163*tmp_51 - tmp_164*tmp_219) + tmp_173*(-tmp_171*tmp_51 - tmp_172*tmp_219) + tmp_181*(-tmp_179*tmp_51 - tmp_180*tmp_219) + tmp_189*(-tmp_187*tmp_51 - tmp_188*tmp_219) + tmp_197*(-tmp_195*tmp_51 - tmp_196*tmp_219) + tmp_205*(-tmp_203*tmp_51 - tmp_204*tmp_219) + tmp_213*(-tmp_211*tmp_51 - tmp_212*tmp_219) + tmp_53*(-tmp_219*tmp_42 - tmp_41*tmp_51) + tmp_61*(-tmp_219*tmp_60 - tmp_51*tmp_59) + tmp_69*(-tmp_219*tmp_68 - tmp_51*tmp_67) + tmp_77*(-tmp_219*tmp_76 - tmp_51*tmp_75) + tmp_85*(-tmp_219*tmp_84 - tmp_51*tmp_83) + tmp_93*(-tmp_219*tmp_92 - tmp_51*tmp_91);
      real_t a_3_1 = tmp_101*(-tmp_214*tmp_99 - tmp_219*tmp_97) + tmp_109*(-tmp_105*tmp_219 - tmp_107*tmp_214) + tmp_117*(-tmp_113*tmp_219 - tmp_115*tmp_214) + tmp_125*(-tmp_121*tmp_219 - tmp_123*tmp_214) + tmp_133*(-tmp_129*tmp_219 - tmp_131*tmp_214) + tmp_141*(-tmp_137*tmp_219 - tmp_139*tmp_214) + tmp_149*(-tmp_145*tmp_219 - tmp_147*tmp_214) + tmp_157*(-tmp_153*tmp_219 - tmp_155*tmp_214) + tmp_165*(-tmp_161*tmp_219 - tmp_163*tmp_214) + tmp_173*(-tmp_169*tmp_219 - tmp_171*tmp_214) + tmp_181*(-tmp_177*tmp_219 - tmp_179*tmp_214) + tmp_189*(-tmp_185*tmp_219 - tmp_187*tmp_214) + tmp_197*(-tmp_193*tmp_219 - tmp_195*tmp_214) + tmp_205*(-tmp_201*tmp_219 - tmp_203*tmp_214) + tmp_213*(-tmp_209*tmp_219 - tmp_211*tmp_214) + tmp_53*(-tmp_214*tmp_41 - tmp_219*tmp_33) + tmp_61*(-tmp_214*tmp_59 - tmp_219*tmp_57) + tmp_69*(-tmp_214*tmp_67 - tmp_219*tmp_65) + tmp_77*(-tmp_214*tmp_75 - tmp_219*tmp_73) + tmp_85*(-tmp_214*tmp_83 - tmp_219*tmp_81) + tmp_93*(-tmp_214*tmp_91 - tmp_219*tmp_89);
      real_t a_3_2 = tmp_101*(-tmp_215*tmp_99 - tmp_219*tmp_98) + tmp_109*(-tmp_106*tmp_219 - tmp_107*tmp_215) + tmp_117*(-tmp_114*tmp_219 - tmp_115*tmp_215) + tmp_125*(-tmp_122*tmp_219 - tmp_123*tmp_215) + tmp_133*(-tmp_130*tmp_219 - tmp_131*tmp_215) + tmp_141*(-tmp_138*tmp_219 - tmp_139*tmp_215) + tmp_149*(-tmp_146*tmp_219 - tmp_147*tmp_215) + tmp_157*(-tmp_154*tmp_219 - tmp_155*tmp_215) + tmp_165*(-tmp_162*tmp_219 - tmp_163*tmp_215) + tmp_173*(-tmp_170*tmp_219 - tmp_171*tmp_215) + tmp_181*(-tmp_178*tmp_219 - tmp_179*tmp_215) + tmp_189*(-tmp_186*tmp_219 - tmp_187*tmp_215) + tmp_197*(-tmp_194*tmp_219 - tmp_195*tmp_215) + tmp_205*(-tmp_202*tmp_219 - tmp_203*tmp_215) + tmp_213*(-tmp_210*tmp_219 - tmp_211*tmp_215) + tmp_53*(-tmp_215*tmp_41 - tmp_219*tmp_37) + tmp_61*(-tmp_215*tmp_59 - tmp_219*tmp_58) + tmp_69*(-tmp_215*tmp_67 - tmp_219*tmp_66) + tmp_77*(-tmp_215*tmp_75 - tmp_219*tmp_74) + tmp_85*(-tmp_215*tmp_83 - tmp_219*tmp_82) + tmp_93*(-tmp_215*tmp_91 - tmp_219*tmp_90);
      real_t a_3_3 = tmp_101*(-tmp_216*tmp_99 - tmp_219*tmp_99) + tmp_109*(-tmp_107*tmp_216 - tmp_107*tmp_219) + tmp_117*(-tmp_115*tmp_216 - tmp_115*tmp_219) + tmp_125*(-tmp_123*tmp_216 - tmp_123*tmp_219) + tmp_133*(-tmp_131*tmp_216 - tmp_131*tmp_219) + tmp_141*(-tmp_139*tmp_216 - tmp_139*tmp_219) + tmp_149*(-tmp_147*tmp_216 - tmp_147*tmp_219) + tmp_157*(-tmp_155*tmp_216 - tmp_155*tmp_219) + tmp_165*(-tmp_163*tmp_216 - tmp_163*tmp_219) + tmp_173*(-tmp_171*tmp_216 - tmp_171*tmp_219) + tmp_181*(-tmp_179*tmp_216 - tmp_179*tmp_219) + tmp_189*(-tmp_187*tmp_216 - tmp_187*tmp_219) + tmp_197*(-tmp_195*tmp_216 - tmp_195*tmp_219) + tmp_205*(-tmp_203*tmp_216 - tmp_203*tmp_219) + tmp_213*(-tmp_211*tmp_216 - tmp_211*tmp_219) + tmp_53*(-tmp_216*tmp_41 - tmp_219*tmp_41) + tmp_61*(-tmp_216*tmp_59 - tmp_219*tmp_59) + tmp_69*(-tmp_216*tmp_67 - tmp_219*tmp_67) + tmp_77*(-tmp_216*tmp_75 - tmp_219*tmp_75) + tmp_85*(-tmp_216*tmp_83 - tmp_219*tmp_83) + tmp_93*(-tmp_216*tmp_91 - tmp_219*tmp_91);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_12 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_12()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 0.5*tmp_16;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_10 - tmp_14;
      real_t tmp_20 = p_affine_0_0*p_affine_1_1;
      real_t tmp_21 = p_affine_0_0*p_affine_1_2;
      real_t tmp_22 = p_affine_2_1*p_affine_3_2;
      real_t tmp_23 = p_affine_0_1*p_affine_1_0;
      real_t tmp_24 = p_affine_0_1*p_affine_1_2;
      real_t tmp_25 = p_affine_2_2*p_affine_3_0;
      real_t tmp_26 = p_affine_0_2*p_affine_1_0;
      real_t tmp_27 = p_affine_0_2*p_affine_1_1;
      real_t tmp_28 = p_affine_2_0*p_affine_3_1;
      real_t tmp_29 = p_affine_2_2*p_affine_3_1;
      real_t tmp_30 = p_affine_2_0*p_affine_3_2;
      real_t tmp_31 = p_affine_2_1*p_affine_3_0;
      real_t tmp_32 = std::abs(p_affine_0_0*tmp_22 - p_affine_0_0*tmp_29 + p_affine_0_1*tmp_25 - p_affine_0_1*tmp_30 + p_affine_0_2*tmp_28 - p_affine_0_2*tmp_31 - p_affine_1_0*tmp_22 + p_affine_1_0*tmp_29 - p_affine_1_1*tmp_25 + p_affine_1_1*tmp_30 - p_affine_1_2*tmp_28 + p_affine_1_2*tmp_31 + p_affine_2_0*tmp_24 - p_affine_2_0*tmp_27 - p_affine_2_1*tmp_21 + p_affine_2_1*tmp_26 + p_affine_2_2*tmp_20 - p_affine_2_2*tmp_23 - p_affine_3_0*tmp_24 + p_affine_3_0*tmp_27 + p_affine_3_1*tmp_21 - p_affine_3_1*tmp_26 - p_affine_3_2*tmp_20 + p_affine_3_2*tmp_23);
      real_t tmp_33 = tmp_32*(-tmp_17*tmp_18 - tmp_17*tmp_19 - tmp_17*tmp_6);
      real_t tmp_34 = 0.0044044418180681378*tmp_33;
      real_t tmp_35 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_36 = 1.0*tmp_16;
      real_t tmp_37 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_38 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_39 = -tmp_35*tmp_36 - tmp_36*tmp_37 - tmp_36*tmp_38;
      real_t tmp_40 = 2*tmp_39;
      real_t tmp_41 = tmp_33*tmp_40;
      real_t tmp_42 = 2.0*tmp_16;
      real_t tmp_43 = tmp_38*tmp_42;
      real_t tmp_44 = tmp_33*tmp_43;
      real_t tmp_45 = tmp_37*tmp_42;
      real_t tmp_46 = tmp_33*tmp_45;
      real_t tmp_47 = tmp_35*tmp_42;
      real_t tmp_48 = tmp_33*tmp_47;
      real_t tmp_49 = tmp_19*tmp_32;
      real_t tmp_50 = 0.0044044418180681378*tmp_49;
      real_t tmp_51 = tmp_36*tmp_39;
      real_t tmp_52 = tmp_49*tmp_51;
      real_t tmp_53 = 1.0/(tmp_15*tmp_15);
      real_t tmp_54 = tmp_38*tmp_53;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = tmp_37*tmp_53;
      real_t tmp_57 = tmp_49*tmp_56;
      real_t tmp_58 = tmp_35*tmp_53;
      real_t tmp_59 = tmp_49*tmp_58;
      real_t tmp_60 = tmp_18*tmp_32;
      real_t tmp_61 = tmp_51*tmp_60;
      real_t tmp_62 = tmp_54*tmp_60;
      real_t tmp_63 = tmp_56*tmp_60;
      real_t tmp_64 = tmp_58*tmp_60;
      real_t tmp_65 = tmp_32*tmp_6;
      real_t tmp_66 = tmp_51*tmp_65;
      real_t tmp_67 = tmp_54*tmp_65;
      real_t tmp_68 = tmp_56*tmp_65;
      real_t tmp_69 = tmp_58*tmp_65;
      real_t a_0_0 = tmp_34*tmp_40 + 0.16226222484859867*tmp_41;
      real_t a_0_1 = tmp_34*tmp_43 + 0.16226222484859867*tmp_44;
      real_t a_0_2 = tmp_34*tmp_45 + 0.16226222484859867*tmp_46;
      real_t a_0_3 = tmp_34*tmp_47 + 0.16226222484859867*tmp_48;
      real_t a_1_0 = tmp_50*tmp_51 + 0.16226222484859867*tmp_52;
      real_t a_1_1 = tmp_50*tmp_54 + 0.16226222484859867*tmp_55;
      real_t a_1_2 = tmp_50*tmp_56 + 0.16226222484859867*tmp_57;
      real_t a_1_3 = tmp_50*tmp_58 + 0.16226222484859867*tmp_59;
      real_t a_2_0 = 0.1666666666666668*tmp_61;
      real_t a_2_1 = 0.1666666666666668*tmp_62;
      real_t a_2_2 = 0.1666666666666668*tmp_63;
      real_t a_2_3 = 0.1666666666666668*tmp_64;
      real_t a_3_0 = 0.1666666666666668*tmp_66;
      real_t a_3_1 = 0.1666666666666668*tmp_67;
      real_t a_3_2 = 0.1666666666666668*tmp_68;
      real_t a_3_3 = 0.1666666666666668*tmp_69;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 1.0*tmp_42;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_38*tmp_44;
      real_t tmp_46 = tmp_34*tmp_44;
      real_t tmp_47 = tmp_44*tmp_6;
      real_t tmp_48 = p_affine_13_1*(-tmp_45 - tmp_46 - tmp_47);
      real_t tmp_49 = tmp_39*tmp_44;
      real_t tmp_50 = tmp_35*tmp_44;
      real_t tmp_51 = tmp_21*tmp_44;
      real_t tmp_52 = p_affine_13_2*(-tmp_49 - tmp_50 - tmp_51);
      real_t tmp_53 = 1.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_54 = 0.0068572537431980923*tmp_53;
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_57 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_58 = tmp_21*tmp_56 + tmp_27*tmp_57 + tmp_55*tmp_6;
      real_t tmp_59 = tmp_34*tmp_55 + tmp_35*tmp_56 + tmp_36*tmp_57;
      real_t tmp_60 = tmp_38*tmp_55 + tmp_39*tmp_56 + tmp_40*tmp_57;
      real_t tmp_61 = -tmp_58 - tmp_59 - tmp_60 + 1;
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = 0.037198804536718075*tmp_53;
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_65 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_66 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_67 = tmp_21*tmp_65 + tmp_27*tmp_66 + tmp_6*tmp_64;
      real_t tmp_68 = tmp_34*tmp_64 + tmp_35*tmp_65 + tmp_36*tmp_66;
      real_t tmp_69 = tmp_38*tmp_64 + tmp_39*tmp_65 + tmp_40*tmp_66;
      real_t tmp_70 = -tmp_67 - tmp_68 - tmp_69 + 1;
      real_t tmp_71 = 1.0*tmp_70;
      real_t tmp_72 = 0.020848748529055869*tmp_53;
      real_t tmp_73 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_6*tmp_73;
      real_t tmp_77 = tmp_34*tmp_73 + tmp_35*tmp_74 + tmp_36*tmp_75;
      real_t tmp_78 = tmp_38*tmp_73 + tmp_39*tmp_74 + tmp_40*tmp_75;
      real_t tmp_79 = -tmp_76 - tmp_77 - tmp_78 + 1;
      real_t tmp_80 = 1.0*tmp_79;
      real_t tmp_81 = 0.019202922745021479*tmp_53;
      real_t tmp_82 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_83 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_84 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_85 = tmp_21*tmp_83 + tmp_27*tmp_84 + tmp_6*tmp_82;
      real_t tmp_86 = tmp_34*tmp_82 + tmp_35*tmp_83 + tmp_36*tmp_84;
      real_t tmp_87 = tmp_38*tmp_82 + tmp_39*tmp_83 + tmp_40*tmp_84;
      real_t tmp_88 = -tmp_85 - tmp_86 - tmp_87 + 1;
      real_t tmp_89 = 1.0*tmp_88;
      real_t tmp_90 = 0.020848748529055869*tmp_53;
      real_t tmp_91 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_92 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_93 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_94 = tmp_21*tmp_92 + tmp_27*tmp_93 + tmp_6*tmp_91;
      real_t tmp_95 = tmp_34*tmp_91 + tmp_35*tmp_92 + tmp_36*tmp_93;
      real_t tmp_96 = tmp_38*tmp_91 + tmp_39*tmp_92 + tmp_40*tmp_93;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = 1.0*tmp_97;
      real_t tmp_99 = 0.019202922745021479*tmp_53;
      real_t tmp_100 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_101 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_102 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_103 = tmp_100*tmp_6 + tmp_101*tmp_21 + tmp_102*tmp_27;
      real_t tmp_104 = tmp_100*tmp_34 + tmp_101*tmp_35 + tmp_102*tmp_36;
      real_t tmp_105 = tmp_100*tmp_38 + tmp_101*tmp_39 + tmp_102*tmp_40;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 1.0*tmp_106;
      real_t tmp_108 = 0.020848748529055869*tmp_53;
      real_t tmp_109 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_110 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_111 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_112 = tmp_109*tmp_6 + tmp_110*tmp_21 + tmp_111*tmp_27;
      real_t tmp_113 = tmp_109*tmp_34 + tmp_110*tmp_35 + tmp_111*tmp_36;
      real_t tmp_114 = tmp_109*tmp_38 + tmp_110*tmp_39 + tmp_111*tmp_40;
      real_t tmp_115 = -tmp_112 - tmp_113 - tmp_114 + 1;
      real_t tmp_116 = 1.0*tmp_115;
      real_t tmp_117 = 0.019202922745021479*tmp_53;
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 1.0*tmp_124;
      real_t tmp_126 = 0.020848748529055869*tmp_53;
      real_t tmp_127 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_128 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_129 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_130 = tmp_127*tmp_6 + tmp_128*tmp_21 + tmp_129*tmp_27;
      real_t tmp_131 = tmp_127*tmp_34 + tmp_128*tmp_35 + tmp_129*tmp_36;
      real_t tmp_132 = tmp_127*tmp_38 + tmp_128*tmp_39 + tmp_129*tmp_40;
      real_t tmp_133 = -tmp_130 - tmp_131 - tmp_132 + 1;
      real_t tmp_134 = 1.0*tmp_133;
      real_t tmp_135 = 0.019202922745021479*tmp_53;
      real_t tmp_136 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_137 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_138 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_139 = tmp_136*tmp_6 + tmp_137*tmp_21 + tmp_138*tmp_27;
      real_t tmp_140 = tmp_136*tmp_34 + tmp_137*tmp_35 + tmp_138*tmp_36;
      real_t tmp_141 = tmp_136*tmp_38 + tmp_137*tmp_39 + tmp_138*tmp_40;
      real_t tmp_142 = -tmp_139 - tmp_140 - tmp_141 + 1;
      real_t tmp_143 = 1.0*tmp_142;
      real_t tmp_144 = 0.020848748529055869*tmp_53;
      real_t tmp_145 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_146 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_147 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_148 = tmp_145*tmp_6 + tmp_146*tmp_21 + tmp_147*tmp_27;
      real_t tmp_149 = tmp_145*tmp_34 + tmp_146*tmp_35 + tmp_147*tmp_36;
      real_t tmp_150 = tmp_145*tmp_38 + tmp_146*tmp_39 + tmp_147*tmp_40;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = 1.0*tmp_151;
      real_t tmp_153 = 0.019202922745021479*tmp_53;
      real_t tmp_154 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_155 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_156 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_157 = tmp_154*tmp_6 + tmp_155*tmp_21 + tmp_156*tmp_27;
      real_t tmp_158 = tmp_154*tmp_34 + tmp_155*tmp_35 + tmp_156*tmp_36;
      real_t tmp_159 = tmp_154*tmp_38 + tmp_155*tmp_39 + tmp_156*tmp_40;
      real_t tmp_160 = -tmp_157 - tmp_158 - tmp_159 + 1;
      real_t tmp_161 = 1.0*tmp_160;
      real_t tmp_162 = 0.042507265838595799*tmp_53;
      real_t tmp_163 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_164 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_165 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_166 = tmp_163*tmp_6 + tmp_164*tmp_21 + tmp_165*tmp_27;
      real_t tmp_167 = tmp_163*tmp_34 + tmp_164*tmp_35 + tmp_165*tmp_36;
      real_t tmp_168 = tmp_163*tmp_38 + tmp_164*tmp_39 + tmp_165*tmp_40;
      real_t tmp_169 = -tmp_166 - tmp_167 - tmp_168 + 1;
      real_t tmp_170 = 1.0*tmp_169;
      real_t tmp_171 = 0.020848748529055869*tmp_53;
      real_t tmp_172 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_6 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_172*tmp_34 + tmp_173*tmp_35 + tmp_174*tmp_36;
      real_t tmp_177 = tmp_172*tmp_38 + tmp_173*tmp_39 + tmp_174*tmp_40;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 1.0*tmp_178;
      real_t tmp_180 = 0.0068572537431980923*tmp_53;
      real_t tmp_181 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_182 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_183 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_184 = tmp_181*tmp_6 + tmp_182*tmp_21 + tmp_183*tmp_27;
      real_t tmp_185 = tmp_181*tmp_34 + tmp_182*tmp_35 + tmp_183*tmp_36;
      real_t tmp_186 = tmp_181*tmp_38 + tmp_182*tmp_39 + tmp_183*tmp_40;
      real_t tmp_187 = -tmp_184 - tmp_185 - tmp_186 + 1;
      real_t tmp_188 = 1.0*tmp_187;
      real_t tmp_189 = 0.037198804536718075*tmp_53;
      real_t tmp_190 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 1.0*tmp_196;
      real_t tmp_198 = 0.042507265838595799*tmp_53;
      real_t tmp_199 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_6 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_199*tmp_34 + tmp_200*tmp_35 + tmp_201*tmp_36;
      real_t tmp_204 = tmp_199*tmp_38 + tmp_200*tmp_39 + tmp_201*tmp_40;
      real_t tmp_205 = -tmp_202 - tmp_203 - tmp_204 + 1;
      real_t tmp_206 = 1.0*tmp_205;
      real_t tmp_207 = 0.0068572537431980923*tmp_53;
      real_t tmp_208 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_209 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_210 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_211 = tmp_208*tmp_6 + tmp_209*tmp_21 + tmp_210*tmp_27;
      real_t tmp_212 = tmp_208*tmp_34 + tmp_209*tmp_35 + tmp_210*tmp_36;
      real_t tmp_213 = tmp_208*tmp_38 + tmp_209*tmp_39 + tmp_210*tmp_40;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = 1.0*tmp_214;
      real_t tmp_216 = 0.037198804536718075*tmp_53;
      real_t tmp_217 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_218 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_219 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_220 = tmp_21*tmp_218 + tmp_217*tmp_6 + tmp_219*tmp_27;
      real_t tmp_221 = tmp_217*tmp_34 + tmp_218*tmp_35 + tmp_219*tmp_36;
      real_t tmp_222 = tmp_217*tmp_38 + tmp_218*tmp_39 + tmp_219*tmp_40;
      real_t tmp_223 = -tmp_220 - tmp_221 - tmp_222 + 1;
      real_t tmp_224 = 1.0*tmp_223;
      real_t tmp_225 = 0.042507265838595799*tmp_53;
      real_t tmp_226 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_227 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_228 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_229 = tmp_21*tmp_227 + tmp_226*tmp_6 + tmp_228*tmp_27;
      real_t tmp_230 = tmp_226*tmp_34 + tmp_227*tmp_35 + tmp_228*tmp_36;
      real_t tmp_231 = tmp_226*tmp_38 + tmp_227*tmp_39 + tmp_228*tmp_40;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = 1.0*tmp_232;
      real_t tmp_234 = 0.019202922745021479*tmp_53;
      real_t tmp_235 = 1.0*tmp_48;
      real_t tmp_236 = p_affine_13_2*tmp_51;
      real_t tmp_237 = p_affine_13_2*tmp_50;
      real_t tmp_238 = p_affine_13_2*tmp_49;
      real_t tmp_239 = 1.0*tmp_52;
      real_t tmp_240 = p_affine_13_1*tmp_47;
      real_t tmp_241 = p_affine_13_1*tmp_46;
      real_t tmp_242 = p_affine_13_1*tmp_45;
      real_t a_0_0 = tmp_108*(-tmp_107*tmp_48 - tmp_107*tmp_52) + tmp_117*(-tmp_116*tmp_48 - tmp_116*tmp_52) + tmp_126*(-tmp_125*tmp_48 - tmp_125*tmp_52) + tmp_135*(-tmp_134*tmp_48 - tmp_134*tmp_52) + tmp_144*(-tmp_143*tmp_48 - tmp_143*tmp_52) + tmp_153*(-tmp_152*tmp_48 - tmp_152*tmp_52) + tmp_162*(-tmp_161*tmp_48 - tmp_161*tmp_52) + tmp_171*(-tmp_170*tmp_48 - tmp_170*tmp_52) + tmp_180*(-tmp_179*tmp_48 - tmp_179*tmp_52) + tmp_189*(-tmp_188*tmp_48 - tmp_188*tmp_52) + tmp_198*(-tmp_197*tmp_48 - tmp_197*tmp_52) + tmp_207*(-tmp_206*tmp_48 - tmp_206*tmp_52) + tmp_216*(-tmp_215*tmp_48 - tmp_215*tmp_52) + tmp_225*(-tmp_224*tmp_48 - tmp_224*tmp_52) + tmp_234*(-tmp_233*tmp_48 - tmp_233*tmp_52) + tmp_54*(-tmp_43*tmp_48 - tmp_43*tmp_52) + tmp_63*(-tmp_48*tmp_62 - tmp_52*tmp_62) + tmp_72*(-tmp_48*tmp_71 - tmp_52*tmp_71) + tmp_81*(-tmp_48*tmp_80 - tmp_52*tmp_80) + tmp_90*(-tmp_48*tmp_89 - tmp_52*tmp_89) + tmp_99*(-tmp_48*tmp_98 - tmp_52*tmp_98);
      real_t a_0_1 = tmp_108*(-tmp_103*tmp_235 - tmp_106*tmp_236) + tmp_117*(-tmp_112*tmp_235 - tmp_115*tmp_236) + tmp_126*(-tmp_121*tmp_235 - tmp_124*tmp_236) + tmp_135*(-tmp_130*tmp_235 - tmp_133*tmp_236) + tmp_144*(-tmp_139*tmp_235 - tmp_142*tmp_236) + tmp_153*(-tmp_148*tmp_235 - tmp_151*tmp_236) + tmp_162*(-tmp_157*tmp_235 - tmp_160*tmp_236) + tmp_171*(-tmp_166*tmp_235 - tmp_169*tmp_236) + tmp_180*(-tmp_175*tmp_235 - tmp_178*tmp_236) + tmp_189*(-tmp_184*tmp_235 - tmp_187*tmp_236) + tmp_198*(-tmp_193*tmp_235 - tmp_196*tmp_236) + tmp_207*(-tmp_202*tmp_235 - tmp_205*tmp_236) + tmp_216*(-tmp_211*tmp_235 - tmp_214*tmp_236) + tmp_225*(-tmp_220*tmp_235 - tmp_223*tmp_236) + tmp_234*(-tmp_229*tmp_235 - tmp_232*tmp_236) + tmp_54*(-tmp_235*tmp_33 - tmp_236*tmp_42) + tmp_63*(-tmp_235*tmp_58 - tmp_236*tmp_61) + tmp_72*(-tmp_235*tmp_67 - tmp_236*tmp_70) + tmp_81*(-tmp_235*tmp_76 - tmp_236*tmp_79) + tmp_90*(-tmp_235*tmp_85 - tmp_236*tmp_88) + tmp_99*(-tmp_235*tmp_94 - tmp_236*tmp_97);
      real_t a_0_2 = tmp_108*(-tmp_104*tmp_235 - tmp_106*tmp_237) + tmp_117*(-tmp_113*tmp_235 - tmp_115*tmp_237) + tmp_126*(-tmp_122*tmp_235 - tmp_124*tmp_237) + tmp_135*(-tmp_131*tmp_235 - tmp_133*tmp_237) + tmp_144*(-tmp_140*tmp_235 - tmp_142*tmp_237) + tmp_153*(-tmp_149*tmp_235 - tmp_151*tmp_237) + tmp_162*(-tmp_158*tmp_235 - tmp_160*tmp_237) + tmp_171*(-tmp_167*tmp_235 - tmp_169*tmp_237) + tmp_180*(-tmp_176*tmp_235 - tmp_178*tmp_237) + tmp_189*(-tmp_185*tmp_235 - tmp_187*tmp_237) + tmp_198*(-tmp_194*tmp_235 - tmp_196*tmp_237) + tmp_207*(-tmp_203*tmp_235 - tmp_205*tmp_237) + tmp_216*(-tmp_212*tmp_235 - tmp_214*tmp_237) + tmp_225*(-tmp_221*tmp_235 - tmp_223*tmp_237) + tmp_234*(-tmp_230*tmp_235 - tmp_232*tmp_237) + tmp_54*(-tmp_235*tmp_37 - tmp_237*tmp_42) + tmp_63*(-tmp_235*tmp_59 - tmp_237*tmp_61) + tmp_72*(-tmp_235*tmp_68 - tmp_237*tmp_70) + tmp_81*(-tmp_235*tmp_77 - tmp_237*tmp_79) + tmp_90*(-tmp_235*tmp_86 - tmp_237*tmp_88) + tmp_99*(-tmp_235*tmp_95 - tmp_237*tmp_97);
      real_t a_0_3 = tmp_108*(-tmp_105*tmp_235 - tmp_106*tmp_238) + tmp_117*(-tmp_114*tmp_235 - tmp_115*tmp_238) + tmp_126*(-tmp_123*tmp_235 - tmp_124*tmp_238) + tmp_135*(-tmp_132*tmp_235 - tmp_133*tmp_238) + tmp_144*(-tmp_141*tmp_235 - tmp_142*tmp_238) + tmp_153*(-tmp_150*tmp_235 - tmp_151*tmp_238) + tmp_162*(-tmp_159*tmp_235 - tmp_160*tmp_238) + tmp_171*(-tmp_168*tmp_235 - tmp_169*tmp_238) + tmp_180*(-tmp_177*tmp_235 - tmp_178*tmp_238) + tmp_189*(-tmp_186*tmp_235 - tmp_187*tmp_238) + tmp_198*(-tmp_195*tmp_235 - tmp_196*tmp_238) + tmp_207*(-tmp_204*tmp_235 - tmp_205*tmp_238) + tmp_216*(-tmp_213*tmp_235 - tmp_214*tmp_238) + tmp_225*(-tmp_222*tmp_235 - tmp_223*tmp_238) + tmp_234*(-tmp_231*tmp_235 - tmp_232*tmp_238) + tmp_54*(-tmp_235*tmp_41 - tmp_238*tmp_42) + tmp_63*(-tmp_235*tmp_60 - tmp_238*tmp_61) + tmp_72*(-tmp_235*tmp_69 - tmp_238*tmp_70) + tmp_81*(-tmp_235*tmp_78 - tmp_238*tmp_79) + tmp_90*(-tmp_235*tmp_87 - tmp_238*tmp_88) + tmp_99*(-tmp_235*tmp_96 - tmp_238*tmp_97);
      real_t a_1_0 = tmp_108*(-tmp_103*tmp_239 - tmp_106*tmp_240) + tmp_117*(-tmp_112*tmp_239 - tmp_115*tmp_240) + tmp_126*(-tmp_121*tmp_239 - tmp_124*tmp_240) + tmp_135*(-tmp_130*tmp_239 - tmp_133*tmp_240) + tmp_144*(-tmp_139*tmp_239 - tmp_142*tmp_240) + tmp_153*(-tmp_148*tmp_239 - tmp_151*tmp_240) + tmp_162*(-tmp_157*tmp_239 - tmp_160*tmp_240) + tmp_171*(-tmp_166*tmp_239 - tmp_169*tmp_240) + tmp_180*(-tmp_175*tmp_239 - tmp_178*tmp_240) + tmp_189*(-tmp_184*tmp_239 - tmp_187*tmp_240) + tmp_198*(-tmp_193*tmp_239 - tmp_196*tmp_240) + tmp_207*(-tmp_202*tmp_239 - tmp_205*tmp_240) + tmp_216*(-tmp_211*tmp_239 - tmp_214*tmp_240) + tmp_225*(-tmp_220*tmp_239 - tmp_223*tmp_240) + tmp_234*(-tmp_229*tmp_239 - tmp_232*tmp_240) + tmp_54*(-tmp_239*tmp_33 - tmp_240*tmp_42) + tmp_63*(-tmp_239*tmp_58 - tmp_240*tmp_61) + tmp_72*(-tmp_239*tmp_67 - tmp_240*tmp_70) + tmp_81*(-tmp_239*tmp_76 - tmp_240*tmp_79) + tmp_90*(-tmp_239*tmp_85 - tmp_240*tmp_88) + tmp_99*(-tmp_239*tmp_94 - tmp_240*tmp_97);
      real_t a_1_1 = tmp_108*(-tmp_103*tmp_236 - tmp_103*tmp_240) + tmp_117*(-tmp_112*tmp_236 - tmp_112*tmp_240) + tmp_126*(-tmp_121*tmp_236 - tmp_121*tmp_240) + tmp_135*(-tmp_130*tmp_236 - tmp_130*tmp_240) + tmp_144*(-tmp_139*tmp_236 - tmp_139*tmp_240) + tmp_153*(-tmp_148*tmp_236 - tmp_148*tmp_240) + tmp_162*(-tmp_157*tmp_236 - tmp_157*tmp_240) + tmp_171*(-tmp_166*tmp_236 - tmp_166*tmp_240) + tmp_180*(-tmp_175*tmp_236 - tmp_175*tmp_240) + tmp_189*(-tmp_184*tmp_236 - tmp_184*tmp_240) + tmp_198*(-tmp_193*tmp_236 - tmp_193*tmp_240) + tmp_207*(-tmp_202*tmp_236 - tmp_202*tmp_240) + tmp_216*(-tmp_211*tmp_236 - tmp_211*tmp_240) + tmp_225*(-tmp_220*tmp_236 - tmp_220*tmp_240) + tmp_234*(-tmp_229*tmp_236 - tmp_229*tmp_240) + tmp_54*(-tmp_236*tmp_33 - tmp_240*tmp_33) + tmp_63*(-tmp_236*tmp_58 - tmp_240*tmp_58) + tmp_72*(-tmp_236*tmp_67 - tmp_240*tmp_67) + tmp_81*(-tmp_236*tmp_76 - tmp_240*tmp_76) + tmp_90*(-tmp_236*tmp_85 - tmp_240*tmp_85) + tmp_99*(-tmp_236*tmp_94 - tmp_240*tmp_94);
      real_t a_1_2 = tmp_108*(-tmp_103*tmp_237 - tmp_104*tmp_240) + tmp_117*(-tmp_112*tmp_237 - tmp_113*tmp_240) + tmp_126*(-tmp_121*tmp_237 - tmp_122*tmp_240) + tmp_135*(-tmp_130*tmp_237 - tmp_131*tmp_240) + tmp_144*(-tmp_139*tmp_237 - tmp_140*tmp_240) + tmp_153*(-tmp_148*tmp_237 - tmp_149*tmp_240) + tmp_162*(-tmp_157*tmp_237 - tmp_158*tmp_240) + tmp_171*(-tmp_166*tmp_237 - tmp_167*tmp_240) + tmp_180*(-tmp_175*tmp_237 - tmp_176*tmp_240) + tmp_189*(-tmp_184*tmp_237 - tmp_185*tmp_240) + tmp_198*(-tmp_193*tmp_237 - tmp_194*tmp_240) + tmp_207*(-tmp_202*tmp_237 - tmp_203*tmp_240) + tmp_216*(-tmp_211*tmp_237 - tmp_212*tmp_240) + tmp_225*(-tmp_220*tmp_237 - tmp_221*tmp_240) + tmp_234*(-tmp_229*tmp_237 - tmp_230*tmp_240) + tmp_54*(-tmp_237*tmp_33 - tmp_240*tmp_37) + tmp_63*(-tmp_237*tmp_58 - tmp_240*tmp_59) + tmp_72*(-tmp_237*tmp_67 - tmp_240*tmp_68) + tmp_81*(-tmp_237*tmp_76 - tmp_240*tmp_77) + tmp_90*(-tmp_237*tmp_85 - tmp_240*tmp_86) + tmp_99*(-tmp_237*tmp_94 - tmp_240*tmp_95);
      real_t a_1_3 = tmp_108*(-tmp_103*tmp_238 - tmp_105*tmp_240) + tmp_117*(-tmp_112*tmp_238 - tmp_114*tmp_240) + tmp_126*(-tmp_121*tmp_238 - tmp_123*tmp_240) + tmp_135*(-tmp_130*tmp_238 - tmp_132*tmp_240) + tmp_144*(-tmp_139*tmp_238 - tmp_141*tmp_240) + tmp_153*(-tmp_148*tmp_238 - tmp_150*tmp_240) + tmp_162*(-tmp_157*tmp_238 - tmp_159*tmp_240) + tmp_171*(-tmp_166*tmp_238 - tmp_168*tmp_240) + tmp_180*(-tmp_175*tmp_238 - tmp_177*tmp_240) + tmp_189*(-tmp_184*tmp_238 - tmp_186*tmp_240) + tmp_198*(-tmp_193*tmp_238 - tmp_195*tmp_240) + tmp_207*(-tmp_202*tmp_238 - tmp_204*tmp_240) + tmp_216*(-tmp_211*tmp_238 - tmp_213*tmp_240) + tmp_225*(-tmp_220*tmp_238 - tmp_222*tmp_240) + tmp_234*(-tmp_229*tmp_238 - tmp_231*tmp_240) + tmp_54*(-tmp_238*tmp_33 - tmp_240*tmp_41) + tmp_63*(-tmp_238*tmp_58 - tmp_240*tmp_60) + tmp_72*(-tmp_238*tmp_67 - tmp_240*tmp_69) + tmp_81*(-tmp_238*tmp_76 - tmp_240*tmp_78) + tmp_90*(-tmp_238*tmp_85 - tmp_240*tmp_87) + tmp_99*(-tmp_238*tmp_94 - tmp_240*tmp_96);
      real_t a_2_0 = tmp_108*(-tmp_104*tmp_239 - tmp_106*tmp_241) + tmp_117*(-tmp_113*tmp_239 - tmp_115*tmp_241) + tmp_126*(-tmp_122*tmp_239 - tmp_124*tmp_241) + tmp_135*(-tmp_131*tmp_239 - tmp_133*tmp_241) + tmp_144*(-tmp_140*tmp_239 - tmp_142*tmp_241) + tmp_153*(-tmp_149*tmp_239 - tmp_151*tmp_241) + tmp_162*(-tmp_158*tmp_239 - tmp_160*tmp_241) + tmp_171*(-tmp_167*tmp_239 - tmp_169*tmp_241) + tmp_180*(-tmp_176*tmp_239 - tmp_178*tmp_241) + tmp_189*(-tmp_185*tmp_239 - tmp_187*tmp_241) + tmp_198*(-tmp_194*tmp_239 - tmp_196*tmp_241) + tmp_207*(-tmp_203*tmp_239 - tmp_205*tmp_241) + tmp_216*(-tmp_212*tmp_239 - tmp_214*tmp_241) + tmp_225*(-tmp_221*tmp_239 - tmp_223*tmp_241) + tmp_234*(-tmp_230*tmp_239 - tmp_232*tmp_241) + tmp_54*(-tmp_239*tmp_37 - tmp_241*tmp_42) + tmp_63*(-tmp_239*tmp_59 - tmp_241*tmp_61) + tmp_72*(-tmp_239*tmp_68 - tmp_241*tmp_70) + tmp_81*(-tmp_239*tmp_77 - tmp_241*tmp_79) + tmp_90*(-tmp_239*tmp_86 - tmp_241*tmp_88) + tmp_99*(-tmp_239*tmp_95 - tmp_241*tmp_97);
      real_t a_2_1 = tmp_108*(-tmp_103*tmp_241 - tmp_104*tmp_236) + tmp_117*(-tmp_112*tmp_241 - tmp_113*tmp_236) + tmp_126*(-tmp_121*tmp_241 - tmp_122*tmp_236) + tmp_135*(-tmp_130*tmp_241 - tmp_131*tmp_236) + tmp_144*(-tmp_139*tmp_241 - tmp_140*tmp_236) + tmp_153*(-tmp_148*tmp_241 - tmp_149*tmp_236) + tmp_162*(-tmp_157*tmp_241 - tmp_158*tmp_236) + tmp_171*(-tmp_166*tmp_241 - tmp_167*tmp_236) + tmp_180*(-tmp_175*tmp_241 - tmp_176*tmp_236) + tmp_189*(-tmp_184*tmp_241 - tmp_185*tmp_236) + tmp_198*(-tmp_193*tmp_241 - tmp_194*tmp_236) + tmp_207*(-tmp_202*tmp_241 - tmp_203*tmp_236) + tmp_216*(-tmp_211*tmp_241 - tmp_212*tmp_236) + tmp_225*(-tmp_220*tmp_241 - tmp_221*tmp_236) + tmp_234*(-tmp_229*tmp_241 - tmp_230*tmp_236) + tmp_54*(-tmp_236*tmp_37 - tmp_241*tmp_33) + tmp_63*(-tmp_236*tmp_59 - tmp_241*tmp_58) + tmp_72*(-tmp_236*tmp_68 - tmp_241*tmp_67) + tmp_81*(-tmp_236*tmp_77 - tmp_241*tmp_76) + tmp_90*(-tmp_236*tmp_86 - tmp_241*tmp_85) + tmp_99*(-tmp_236*tmp_95 - tmp_241*tmp_94);
      real_t a_2_2 = tmp_108*(-tmp_104*tmp_237 - tmp_104*tmp_241) + tmp_117*(-tmp_113*tmp_237 - tmp_113*tmp_241) + tmp_126*(-tmp_122*tmp_237 - tmp_122*tmp_241) + tmp_135*(-tmp_131*tmp_237 - tmp_131*tmp_241) + tmp_144*(-tmp_140*tmp_237 - tmp_140*tmp_241) + tmp_153*(-tmp_149*tmp_237 - tmp_149*tmp_241) + tmp_162*(-tmp_158*tmp_237 - tmp_158*tmp_241) + tmp_171*(-tmp_167*tmp_237 - tmp_167*tmp_241) + tmp_180*(-tmp_176*tmp_237 - tmp_176*tmp_241) + tmp_189*(-tmp_185*tmp_237 - tmp_185*tmp_241) + tmp_198*(-tmp_194*tmp_237 - tmp_194*tmp_241) + tmp_207*(-tmp_203*tmp_237 - tmp_203*tmp_241) + tmp_216*(-tmp_212*tmp_237 - tmp_212*tmp_241) + tmp_225*(-tmp_221*tmp_237 - tmp_221*tmp_241) + tmp_234*(-tmp_230*tmp_237 - tmp_230*tmp_241) + tmp_54*(-tmp_237*tmp_37 - tmp_241*tmp_37) + tmp_63*(-tmp_237*tmp_59 - tmp_241*tmp_59) + tmp_72*(-tmp_237*tmp_68 - tmp_241*tmp_68) + tmp_81*(-tmp_237*tmp_77 - tmp_241*tmp_77) + tmp_90*(-tmp_237*tmp_86 - tmp_241*tmp_86) + tmp_99*(-tmp_237*tmp_95 - tmp_241*tmp_95);
      real_t a_2_3 = tmp_108*(-tmp_104*tmp_238 - tmp_105*tmp_241) + tmp_117*(-tmp_113*tmp_238 - tmp_114*tmp_241) + tmp_126*(-tmp_122*tmp_238 - tmp_123*tmp_241) + tmp_135*(-tmp_131*tmp_238 - tmp_132*tmp_241) + tmp_144*(-tmp_140*tmp_238 - tmp_141*tmp_241) + tmp_153*(-tmp_149*tmp_238 - tmp_150*tmp_241) + tmp_162*(-tmp_158*tmp_238 - tmp_159*tmp_241) + tmp_171*(-tmp_167*tmp_238 - tmp_168*tmp_241) + tmp_180*(-tmp_176*tmp_238 - tmp_177*tmp_241) + tmp_189*(-tmp_185*tmp_238 - tmp_186*tmp_241) + tmp_198*(-tmp_194*tmp_238 - tmp_195*tmp_241) + tmp_207*(-tmp_203*tmp_238 - tmp_204*tmp_241) + tmp_216*(-tmp_212*tmp_238 - tmp_213*tmp_241) + tmp_225*(-tmp_221*tmp_238 - tmp_222*tmp_241) + tmp_234*(-tmp_230*tmp_238 - tmp_231*tmp_241) + tmp_54*(-tmp_238*tmp_37 - tmp_241*tmp_41) + tmp_63*(-tmp_238*tmp_59 - tmp_241*tmp_60) + tmp_72*(-tmp_238*tmp_68 - tmp_241*tmp_69) + tmp_81*(-tmp_238*tmp_77 - tmp_241*tmp_78) + tmp_90*(-tmp_238*tmp_86 - tmp_241*tmp_87) + tmp_99*(-tmp_238*tmp_95 - tmp_241*tmp_96);
      real_t a_3_0 = tmp_108*(-tmp_105*tmp_239 - tmp_106*tmp_242) + tmp_117*(-tmp_114*tmp_239 - tmp_115*tmp_242) + tmp_126*(-tmp_123*tmp_239 - tmp_124*tmp_242) + tmp_135*(-tmp_132*tmp_239 - tmp_133*tmp_242) + tmp_144*(-tmp_141*tmp_239 - tmp_142*tmp_242) + tmp_153*(-tmp_150*tmp_239 - tmp_151*tmp_242) + tmp_162*(-tmp_159*tmp_239 - tmp_160*tmp_242) + tmp_171*(-tmp_168*tmp_239 - tmp_169*tmp_242) + tmp_180*(-tmp_177*tmp_239 - tmp_178*tmp_242) + tmp_189*(-tmp_186*tmp_239 - tmp_187*tmp_242) + tmp_198*(-tmp_195*tmp_239 - tmp_196*tmp_242) + tmp_207*(-tmp_204*tmp_239 - tmp_205*tmp_242) + tmp_216*(-tmp_213*tmp_239 - tmp_214*tmp_242) + tmp_225*(-tmp_222*tmp_239 - tmp_223*tmp_242) + tmp_234*(-tmp_231*tmp_239 - tmp_232*tmp_242) + tmp_54*(-tmp_239*tmp_41 - tmp_242*tmp_42) + tmp_63*(-tmp_239*tmp_60 - tmp_242*tmp_61) + tmp_72*(-tmp_239*tmp_69 - tmp_242*tmp_70) + tmp_81*(-tmp_239*tmp_78 - tmp_242*tmp_79) + tmp_90*(-tmp_239*tmp_87 - tmp_242*tmp_88) + tmp_99*(-tmp_239*tmp_96 - tmp_242*tmp_97);
      real_t a_3_1 = tmp_108*(-tmp_103*tmp_242 - tmp_105*tmp_236) + tmp_117*(-tmp_112*tmp_242 - tmp_114*tmp_236) + tmp_126*(-tmp_121*tmp_242 - tmp_123*tmp_236) + tmp_135*(-tmp_130*tmp_242 - tmp_132*tmp_236) + tmp_144*(-tmp_139*tmp_242 - tmp_141*tmp_236) + tmp_153*(-tmp_148*tmp_242 - tmp_150*tmp_236) + tmp_162*(-tmp_157*tmp_242 - tmp_159*tmp_236) + tmp_171*(-tmp_166*tmp_242 - tmp_168*tmp_236) + tmp_180*(-tmp_175*tmp_242 - tmp_177*tmp_236) + tmp_189*(-tmp_184*tmp_242 - tmp_186*tmp_236) + tmp_198*(-tmp_193*tmp_242 - tmp_195*tmp_236) + tmp_207*(-tmp_202*tmp_242 - tmp_204*tmp_236) + tmp_216*(-tmp_211*tmp_242 - tmp_213*tmp_236) + tmp_225*(-tmp_220*tmp_242 - tmp_222*tmp_236) + tmp_234*(-tmp_229*tmp_242 - tmp_231*tmp_236) + tmp_54*(-tmp_236*tmp_41 - tmp_242*tmp_33) + tmp_63*(-tmp_236*tmp_60 - tmp_242*tmp_58) + tmp_72*(-tmp_236*tmp_69 - tmp_242*tmp_67) + tmp_81*(-tmp_236*tmp_78 - tmp_242*tmp_76) + tmp_90*(-tmp_236*tmp_87 - tmp_242*tmp_85) + tmp_99*(-tmp_236*tmp_96 - tmp_242*tmp_94);
      real_t a_3_2 = tmp_108*(-tmp_104*tmp_242 - tmp_105*tmp_237) + tmp_117*(-tmp_113*tmp_242 - tmp_114*tmp_237) + tmp_126*(-tmp_122*tmp_242 - tmp_123*tmp_237) + tmp_135*(-tmp_131*tmp_242 - tmp_132*tmp_237) + tmp_144*(-tmp_140*tmp_242 - tmp_141*tmp_237) + tmp_153*(-tmp_149*tmp_242 - tmp_150*tmp_237) + tmp_162*(-tmp_158*tmp_242 - tmp_159*tmp_237) + tmp_171*(-tmp_167*tmp_242 - tmp_168*tmp_237) + tmp_180*(-tmp_176*tmp_242 - tmp_177*tmp_237) + tmp_189*(-tmp_185*tmp_242 - tmp_186*tmp_237) + tmp_198*(-tmp_194*tmp_242 - tmp_195*tmp_237) + tmp_207*(-tmp_203*tmp_242 - tmp_204*tmp_237) + tmp_216*(-tmp_212*tmp_242 - tmp_213*tmp_237) + tmp_225*(-tmp_221*tmp_242 - tmp_222*tmp_237) + tmp_234*(-tmp_230*tmp_242 - tmp_231*tmp_237) + tmp_54*(-tmp_237*tmp_41 - tmp_242*tmp_37) + tmp_63*(-tmp_237*tmp_60 - tmp_242*tmp_59) + tmp_72*(-tmp_237*tmp_69 - tmp_242*tmp_68) + tmp_81*(-tmp_237*tmp_78 - tmp_242*tmp_77) + tmp_90*(-tmp_237*tmp_87 - tmp_242*tmp_86) + tmp_99*(-tmp_237*tmp_96 - tmp_242*tmp_95);
      real_t a_3_3 = tmp_108*(-tmp_105*tmp_238 - tmp_105*tmp_242) + tmp_117*(-tmp_114*tmp_238 - tmp_114*tmp_242) + tmp_126*(-tmp_123*tmp_238 - tmp_123*tmp_242) + tmp_135*(-tmp_132*tmp_238 - tmp_132*tmp_242) + tmp_144*(-tmp_141*tmp_238 - tmp_141*tmp_242) + tmp_153*(-tmp_150*tmp_238 - tmp_150*tmp_242) + tmp_162*(-tmp_159*tmp_238 - tmp_159*tmp_242) + tmp_171*(-tmp_168*tmp_238 - tmp_168*tmp_242) + tmp_180*(-tmp_177*tmp_238 - tmp_177*tmp_242) + tmp_189*(-tmp_186*tmp_238 - tmp_186*tmp_242) + tmp_198*(-tmp_195*tmp_238 - tmp_195*tmp_242) + tmp_207*(-tmp_204*tmp_238 - tmp_204*tmp_242) + tmp_216*(-tmp_213*tmp_238 - tmp_213*tmp_242) + tmp_225*(-tmp_222*tmp_238 - tmp_222*tmp_242) + tmp_234*(-tmp_231*tmp_238 - tmp_231*tmp_242) + tmp_54*(-tmp_238*tmp_41 - tmp_242*tmp_41) + tmp_63*(-tmp_238*tmp_60 - tmp_242*tmp_60) + tmp_72*(-tmp_238*tmp_69 - tmp_242*tmp_69) + tmp_81*(-tmp_238*tmp_78 - tmp_242*tmp_78) + tmp_90*(-tmp_238*tmp_87 - tmp_242*tmp_87) + tmp_99*(-tmp_238*tmp_96 - tmp_242*tmp_96);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_1 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_2 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_3 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_6 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_9 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_10 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_6;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_2*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_10*tmp_12 + tmp_11*tmp_2 - tmp_13*tmp_5 - tmp_14*tmp_3 + tmp_5*tmp_7);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_5 + tmp_10*tmp_2;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = -tmp_1*tmp_10 + tmp_3*tmp_5;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_12 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_14 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_5*tmp_9;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_13 + tmp_7;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_6;
      real_t tmp_43 = tmp_11 - tmp_3*tmp_8;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_47 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_50 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_51 = tmp_49*tmp_50;
      real_t tmp_52 = tmp_48 - tmp_51;
      real_t tmp_53 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_54 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_55 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_56 = tmp_49*tmp_55;
      real_t tmp_57 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_58 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_59 = tmp_46*tmp_55;
      real_t tmp_60 = tmp_47*tmp_58;
      real_t tmp_61 = 1.0 / (tmp_48*tmp_53 + tmp_50*tmp_57*tmp_58 - tmp_51*tmp_53 + tmp_54*tmp_56 - tmp_54*tmp_60 - tmp_57*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_52*tmp_62;
      real_t tmp_64 = tmp_50*tmp_58 - tmp_59;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_56 - tmp_60;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = p_affine_13_1*(-tmp_63 - tmp_65 - tmp_67);
      real_t tmp_69 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_70 = tmp_61*(tmp_20 + tmp_69);
      real_t tmp_71 = -tmp_49*tmp_53 + tmp_57*tmp_58;
      real_t tmp_72 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_73 = tmp_61*(tmp_27 + tmp_72);
      real_t tmp_74 = tmp_47*tmp_53 - tmp_55*tmp_57;
      real_t tmp_75 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_76 = tmp_61*(tmp_34 + tmp_75);
      real_t tmp_77 = tmp_66*tmp_70 + tmp_71*tmp_73 + tmp_74*tmp_76;
      real_t tmp_78 = tmp_46*tmp_53 - tmp_54*tmp_58;
      real_t tmp_79 = -tmp_50*tmp_53 + tmp_54*tmp_55;
      real_t tmp_80 = tmp_64*tmp_70 + tmp_73*tmp_78 + tmp_76*tmp_79;
      real_t tmp_81 = -tmp_46*tmp_57 + tmp_49*tmp_54;
      real_t tmp_82 = -tmp_47*tmp_54 + tmp_50*tmp_57;
      real_t tmp_83 = tmp_52*tmp_70 + tmp_73*tmp_81 + tmp_76*tmp_82;
      real_t tmp_84 = p_affine_13_2*(-tmp_77 - tmp_80 - tmp_83 + 1);
      real_t tmp_85 = 0.5*tmp_15;
      real_t tmp_86 = tmp_42*tmp_85;
      real_t tmp_87 = tmp_38*tmp_85;
      real_t tmp_88 = tmp_22*tmp_85;
      real_t tmp_89 = -1.0*tmp_86 - 1.0*tmp_87 - 1.0*tmp_88;
      real_t tmp_90 = 1.0*std::pow((std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)), 1.0/2.0);
      real_t tmp_91 = 0.0068572537431980923*tmp_90;
      real_t tmp_92 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_93 = tmp_15*(tmp_16 + tmp_92);
      real_t tmp_94 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_95 = tmp_15*(tmp_23 + tmp_94);
      real_t tmp_96 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_97 = tmp_15*(tmp_30 + tmp_96);
      real_t tmp_98 = tmp_22*tmp_95 + tmp_29*tmp_97 + tmp_4*tmp_93;
      real_t tmp_99 = tmp_37*tmp_93 + tmp_38*tmp_95 + tmp_39*tmp_97;
      real_t tmp_100 = tmp_41*tmp_93 + tmp_42*tmp_95 + tmp_43*tmp_97;
      real_t tmp_101 = -tmp_100 - tmp_98 - tmp_99 + 1;
      real_t tmp_102 = tmp_61*(tmp_69 + tmp_92);
      real_t tmp_103 = tmp_61*(tmp_72 + tmp_94);
      real_t tmp_104 = tmp_61*(tmp_75 + tmp_96);
      real_t tmp_105 = tmp_102*tmp_66 + tmp_103*tmp_71 + tmp_104*tmp_74;
      real_t tmp_106 = tmp_102*tmp_64 + tmp_103*tmp_78 + tmp_104*tmp_79;
      real_t tmp_107 = tmp_102*tmp_52 + tmp_103*tmp_81 + tmp_104*tmp_82;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = p_affine_13_2*tmp_89;
      real_t tmp_110 = 0.037198804536718075*tmp_90;
      real_t tmp_111 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_112 = tmp_15*(tmp_111 + tmp_16);
      real_t tmp_113 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_23);
      real_t tmp_115 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_116 = tmp_15*(tmp_115 + tmp_30);
      real_t tmp_117 = tmp_112*tmp_4 + tmp_114*tmp_22 + tmp_116*tmp_29;
      real_t tmp_118 = tmp_112*tmp_37 + tmp_114*tmp_38 + tmp_116*tmp_39;
      real_t tmp_119 = tmp_112*tmp_41 + tmp_114*tmp_42 + tmp_116*tmp_43;
      real_t tmp_120 = -tmp_117 - tmp_118 - tmp_119 + 1;
      real_t tmp_121 = tmp_61*(tmp_111 + tmp_69);
      real_t tmp_122 = tmp_61*(tmp_113 + tmp_72);
      real_t tmp_123 = tmp_61*(tmp_115 + tmp_75);
      real_t tmp_124 = tmp_121*tmp_66 + tmp_122*tmp_71 + tmp_123*tmp_74;
      real_t tmp_125 = tmp_121*tmp_64 + tmp_122*tmp_78 + tmp_123*tmp_79;
      real_t tmp_126 = tmp_121*tmp_52 + tmp_122*tmp_81 + tmp_123*tmp_82;
      real_t tmp_127 = -tmp_124 - tmp_125 - tmp_126 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_90;
      real_t tmp_129 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_130 = tmp_15*(tmp_129 + tmp_16);
      real_t tmp_131 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_132 = tmp_15*(tmp_131 + tmp_23);
      real_t tmp_133 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_134 = tmp_15*(tmp_133 + tmp_30);
      real_t tmp_135 = tmp_130*tmp_4 + tmp_132*tmp_22 + tmp_134*tmp_29;
      real_t tmp_136 = tmp_130*tmp_37 + tmp_132*tmp_38 + tmp_134*tmp_39;
      real_t tmp_137 = tmp_130*tmp_41 + tmp_132*tmp_42 + tmp_134*tmp_43;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = tmp_61*(tmp_129 + tmp_69);
      real_t tmp_140 = tmp_61*(tmp_131 + tmp_72);
      real_t tmp_141 = tmp_61*(tmp_133 + tmp_75);
      real_t tmp_142 = tmp_139*tmp_66 + tmp_140*tmp_71 + tmp_141*tmp_74;
      real_t tmp_143 = tmp_139*tmp_64 + tmp_140*tmp_78 + tmp_141*tmp_79;
      real_t tmp_144 = tmp_139*tmp_52 + tmp_140*tmp_81 + tmp_141*tmp_82;
      real_t tmp_145 = -tmp_142 - tmp_143 - tmp_144 + 1;
      real_t tmp_146 = 0.019202922745021479*tmp_90;
      real_t tmp_147 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_148 = tmp_15*(tmp_147 + tmp_16);
      real_t tmp_149 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_150 = tmp_15*(tmp_149 + tmp_23);
      real_t tmp_151 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_30);
      real_t tmp_153 = tmp_148*tmp_4 + tmp_150*tmp_22 + tmp_152*tmp_29;
      real_t tmp_154 = tmp_148*tmp_37 + tmp_150*tmp_38 + tmp_152*tmp_39;
      real_t tmp_155 = tmp_148*tmp_41 + tmp_150*tmp_42 + tmp_152*tmp_43;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = tmp_61*(tmp_147 + tmp_69);
      real_t tmp_158 = tmp_61*(tmp_149 + tmp_72);
      real_t tmp_159 = tmp_61*(tmp_151 + tmp_75);
      real_t tmp_160 = tmp_157*tmp_66 + tmp_158*tmp_71 + tmp_159*tmp_74;
      real_t tmp_161 = tmp_157*tmp_64 + tmp_158*tmp_78 + tmp_159*tmp_79;
      real_t tmp_162 = tmp_157*tmp_52 + tmp_158*tmp_81 + tmp_159*tmp_82;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = 0.020848748529055869*tmp_90;
      real_t tmp_165 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_166 = tmp_15*(tmp_16 + tmp_165);
      real_t tmp_167 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_168 = tmp_15*(tmp_167 + tmp_23);
      real_t tmp_169 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_170 = tmp_15*(tmp_169 + tmp_30);
      real_t tmp_171 = tmp_166*tmp_4 + tmp_168*tmp_22 + tmp_170*tmp_29;
      real_t tmp_172 = tmp_166*tmp_37 + tmp_168*tmp_38 + tmp_170*tmp_39;
      real_t tmp_173 = tmp_166*tmp_41 + tmp_168*tmp_42 + tmp_170*tmp_43;
      real_t tmp_174 = -tmp_171 - tmp_172 - tmp_173 + 1;
      real_t tmp_175 = tmp_61*(tmp_165 + tmp_69);
      real_t tmp_176 = tmp_61*(tmp_167 + tmp_72);
      real_t tmp_177 = tmp_61*(tmp_169 + tmp_75);
      real_t tmp_178 = tmp_175*tmp_66 + tmp_176*tmp_71 + tmp_177*tmp_74;
      real_t tmp_179 = tmp_175*tmp_64 + tmp_176*tmp_78 + tmp_177*tmp_79;
      real_t tmp_180 = tmp_175*tmp_52 + tmp_176*tmp_81 + tmp_177*tmp_82;
      real_t tmp_181 = -tmp_178 - tmp_179 - tmp_180 + 1;
      real_t tmp_182 = 0.019202922745021479*tmp_90;
      real_t tmp_183 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_184 = tmp_15*(tmp_16 + tmp_183);
      real_t tmp_185 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_23);
      real_t tmp_187 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_30);
      real_t tmp_189 = tmp_184*tmp_4 + tmp_186*tmp_22 + tmp_188*tmp_29;
      real_t tmp_190 = tmp_184*tmp_37 + tmp_186*tmp_38 + tmp_188*tmp_39;
      real_t tmp_191 = tmp_184*tmp_41 + tmp_186*tmp_42 + tmp_188*tmp_43;
      real_t tmp_192 = -tmp_189 - tmp_190 - tmp_191 + 1;
      real_t tmp_193 = tmp_61*(tmp_183 + tmp_69);
      real_t tmp_194 = tmp_61*(tmp_185 + tmp_72);
      real_t tmp_195 = tmp_61*(tmp_187 + tmp_75);
      real_t tmp_196 = tmp_193*tmp_66 + tmp_194*tmp_71 + tmp_195*tmp_74;
      real_t tmp_197 = tmp_193*tmp_64 + tmp_194*tmp_78 + tmp_195*tmp_79;
      real_t tmp_198 = tmp_193*tmp_52 + tmp_194*tmp_81 + tmp_195*tmp_82;
      real_t tmp_199 = -tmp_196 - tmp_197 - tmp_198 + 1;
      real_t tmp_200 = 0.020848748529055869*tmp_90;
      real_t tmp_201 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_202 = tmp_15*(tmp_16 + tmp_201);
      real_t tmp_203 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_23);
      real_t tmp_205 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_206 = tmp_15*(tmp_205 + tmp_30);
      real_t tmp_207 = tmp_202*tmp_4 + tmp_204*tmp_22 + tmp_206*tmp_29;
      real_t tmp_208 = tmp_202*tmp_37 + tmp_204*tmp_38 + tmp_206*tmp_39;
      real_t tmp_209 = tmp_202*tmp_41 + tmp_204*tmp_42 + tmp_206*tmp_43;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = tmp_61*(tmp_201 + tmp_69);
      real_t tmp_212 = tmp_61*(tmp_203 + tmp_72);
      real_t tmp_213 = tmp_61*(tmp_205 + tmp_75);
      real_t tmp_214 = tmp_211*tmp_66 + tmp_212*tmp_71 + tmp_213*tmp_74;
      real_t tmp_215 = tmp_211*tmp_64 + tmp_212*tmp_78 + tmp_213*tmp_79;
      real_t tmp_216 = tmp_211*tmp_52 + tmp_212*tmp_81 + tmp_213*tmp_82;
      real_t tmp_217 = -tmp_214 - tmp_215 - tmp_216 + 1;
      real_t tmp_218 = 0.019202922745021479*tmp_90;
      real_t tmp_219 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_220 = tmp_15*(tmp_16 + tmp_219);
      real_t tmp_221 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_222 = tmp_15*(tmp_221 + tmp_23);
      real_t tmp_223 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_224 = tmp_15*(tmp_223 + tmp_30);
      real_t tmp_225 = tmp_22*tmp_222 + tmp_220*tmp_4 + tmp_224*tmp_29;
      real_t tmp_226 = tmp_220*tmp_37 + tmp_222*tmp_38 + tmp_224*tmp_39;
      real_t tmp_227 = tmp_220*tmp_41 + tmp_222*tmp_42 + tmp_224*tmp_43;
      real_t tmp_228 = -tmp_225 - tmp_226 - tmp_227 + 1;
      real_t tmp_229 = tmp_61*(tmp_219 + tmp_69);
      real_t tmp_230 = tmp_61*(tmp_221 + tmp_72);
      real_t tmp_231 = tmp_61*(tmp_223 + tmp_75);
      real_t tmp_232 = tmp_229*tmp_66 + tmp_230*tmp_71 + tmp_231*tmp_74;
      real_t tmp_233 = tmp_229*tmp_64 + tmp_230*tmp_78 + tmp_231*tmp_79;
      real_t tmp_234 = tmp_229*tmp_52 + tmp_230*tmp_81 + tmp_231*tmp_82;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = 0.020848748529055869*tmp_90;
      real_t tmp_237 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_238 = tmp_15*(tmp_16 + tmp_237);
      real_t tmp_239 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_240 = tmp_15*(tmp_23 + tmp_239);
      real_t tmp_241 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_242 = tmp_15*(tmp_241 + tmp_30);
      real_t tmp_243 = tmp_22*tmp_240 + tmp_238*tmp_4 + tmp_242*tmp_29;
      real_t tmp_244 = tmp_238*tmp_37 + tmp_240*tmp_38 + tmp_242*tmp_39;
      real_t tmp_245 = tmp_238*tmp_41 + tmp_240*tmp_42 + tmp_242*tmp_43;
      real_t tmp_246 = -tmp_243 - tmp_244 - tmp_245 + 1;
      real_t tmp_247 = tmp_61*(tmp_237 + tmp_69);
      real_t tmp_248 = tmp_61*(tmp_239 + tmp_72);
      real_t tmp_249 = tmp_61*(tmp_241 + tmp_75);
      real_t tmp_250 = tmp_247*tmp_66 + tmp_248*tmp_71 + tmp_249*tmp_74;
      real_t tmp_251 = tmp_247*tmp_64 + tmp_248*tmp_78 + tmp_249*tmp_79;
      real_t tmp_252 = tmp_247*tmp_52 + tmp_248*tmp_81 + tmp_249*tmp_82;
      real_t tmp_253 = -tmp_250 - tmp_251 - tmp_252 + 1;
      real_t tmp_254 = 0.019202922745021479*tmp_90;
      real_t tmp_255 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_256 = tmp_15*(tmp_16 + tmp_255);
      real_t tmp_257 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_258 = tmp_15*(tmp_23 + tmp_257);
      real_t tmp_259 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_260 = tmp_15*(tmp_259 + tmp_30);
      real_t tmp_261 = tmp_22*tmp_258 + tmp_256*tmp_4 + tmp_260*tmp_29;
      real_t tmp_262 = tmp_256*tmp_37 + tmp_258*tmp_38 + tmp_260*tmp_39;
      real_t tmp_263 = tmp_256*tmp_41 + tmp_258*tmp_42 + tmp_260*tmp_43;
      real_t tmp_264 = -tmp_261 - tmp_262 - tmp_263 + 1;
      real_t tmp_265 = tmp_61*(tmp_255 + tmp_69);
      real_t tmp_266 = tmp_61*(tmp_257 + tmp_72);
      real_t tmp_267 = tmp_61*(tmp_259 + tmp_75);
      real_t tmp_268 = tmp_265*tmp_66 + tmp_266*tmp_71 + tmp_267*tmp_74;
      real_t tmp_269 = tmp_265*tmp_64 + tmp_266*tmp_78 + tmp_267*tmp_79;
      real_t tmp_270 = tmp_265*tmp_52 + tmp_266*tmp_81 + tmp_267*tmp_82;
      real_t tmp_271 = -tmp_268 - tmp_269 - tmp_270 + 1;
      real_t tmp_272 = 0.020848748529055869*tmp_90;
      real_t tmp_273 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_274 = tmp_15*(tmp_16 + tmp_273);
      real_t tmp_275 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_276 = tmp_15*(tmp_23 + tmp_275);
      real_t tmp_277 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_278 = tmp_15*(tmp_277 + tmp_30);
      real_t tmp_279 = tmp_22*tmp_276 + tmp_274*tmp_4 + tmp_278*tmp_29;
      real_t tmp_280 = tmp_274*tmp_37 + tmp_276*tmp_38 + tmp_278*tmp_39;
      real_t tmp_281 = tmp_274*tmp_41 + tmp_276*tmp_42 + tmp_278*tmp_43;
      real_t tmp_282 = -tmp_279 - tmp_280 - tmp_281 + 1;
      real_t tmp_283 = tmp_61*(tmp_273 + tmp_69);
      real_t tmp_284 = tmp_61*(tmp_275 + tmp_72);
      real_t tmp_285 = tmp_61*(tmp_277 + tmp_75);
      real_t tmp_286 = tmp_283*tmp_66 + tmp_284*tmp_71 + tmp_285*tmp_74;
      real_t tmp_287 = tmp_283*tmp_64 + tmp_284*tmp_78 + tmp_285*tmp_79;
      real_t tmp_288 = tmp_283*tmp_52 + tmp_284*tmp_81 + tmp_285*tmp_82;
      real_t tmp_289 = -tmp_286 - tmp_287 - tmp_288 + 1;
      real_t tmp_290 = 0.019202922745021479*tmp_90;
      real_t tmp_291 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_292 = tmp_15*(tmp_16 + tmp_291);
      real_t tmp_293 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_294 = tmp_15*(tmp_23 + tmp_293);
      real_t tmp_295 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_296 = tmp_15*(tmp_295 + tmp_30);
      real_t tmp_297 = tmp_22*tmp_294 + tmp_29*tmp_296 + tmp_292*tmp_4;
      real_t tmp_298 = tmp_292*tmp_37 + tmp_294*tmp_38 + tmp_296*tmp_39;
      real_t tmp_299 = tmp_292*tmp_41 + tmp_294*tmp_42 + tmp_296*tmp_43;
      real_t tmp_300 = -tmp_297 - tmp_298 - tmp_299 + 1;
      real_t tmp_301 = tmp_61*(tmp_291 + tmp_69);
      real_t tmp_302 = tmp_61*(tmp_293 + tmp_72);
      real_t tmp_303 = tmp_61*(tmp_295 + tmp_75);
      real_t tmp_304 = tmp_301*tmp_66 + tmp_302*tmp_71 + tmp_303*tmp_74;
      real_t tmp_305 = tmp_301*tmp_64 + tmp_302*tmp_78 + tmp_303*tmp_79;
      real_t tmp_306 = tmp_301*tmp_52 + tmp_302*tmp_81 + tmp_303*tmp_82;
      real_t tmp_307 = -tmp_304 - tmp_305 - tmp_306 + 1;
      real_t tmp_308 = 0.042507265838595799*tmp_90;
      real_t tmp_309 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_310 = tmp_15*(tmp_16 + tmp_309);
      real_t tmp_311 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_312 = tmp_15*(tmp_23 + tmp_311);
      real_t tmp_313 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_314 = tmp_15*(tmp_30 + tmp_313);
      real_t tmp_315 = tmp_22*tmp_312 + tmp_29*tmp_314 + tmp_310*tmp_4;
      real_t tmp_316 = tmp_310*tmp_37 + tmp_312*tmp_38 + tmp_314*tmp_39;
      real_t tmp_317 = tmp_310*tmp_41 + tmp_312*tmp_42 + tmp_314*tmp_43;
      real_t tmp_318 = -tmp_315 - tmp_316 - tmp_317 + 1;
      real_t tmp_319 = tmp_61*(tmp_309 + tmp_69);
      real_t tmp_320 = tmp_61*(tmp_311 + tmp_72);
      real_t tmp_321 = tmp_61*(tmp_313 + tmp_75);
      real_t tmp_322 = tmp_319*tmp_66 + tmp_320*tmp_71 + tmp_321*tmp_74;
      real_t tmp_323 = tmp_319*tmp_64 + tmp_320*tmp_78 + tmp_321*tmp_79;
      real_t tmp_324 = tmp_319*tmp_52 + tmp_320*tmp_81 + tmp_321*tmp_82;
      real_t tmp_325 = -tmp_322 - tmp_323 - tmp_324 + 1;
      real_t tmp_326 = 0.020848748529055869*tmp_90;
      real_t tmp_327 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_328 = tmp_15*(tmp_16 + tmp_327);
      real_t tmp_329 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_330 = tmp_15*(tmp_23 + tmp_329);
      real_t tmp_331 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_332 = tmp_15*(tmp_30 + tmp_331);
      real_t tmp_333 = tmp_22*tmp_330 + tmp_29*tmp_332 + tmp_328*tmp_4;
      real_t tmp_334 = tmp_328*tmp_37 + tmp_330*tmp_38 + tmp_332*tmp_39;
      real_t tmp_335 = tmp_328*tmp_41 + tmp_330*tmp_42 + tmp_332*tmp_43;
      real_t tmp_336 = -tmp_333 - tmp_334 - tmp_335 + 1;
      real_t tmp_337 = tmp_61*(tmp_327 + tmp_69);
      real_t tmp_338 = tmp_61*(tmp_329 + tmp_72);
      real_t tmp_339 = tmp_61*(tmp_331 + tmp_75);
      real_t tmp_340 = tmp_337*tmp_66 + tmp_338*tmp_71 + tmp_339*tmp_74;
      real_t tmp_341 = tmp_337*tmp_64 + tmp_338*tmp_78 + tmp_339*tmp_79;
      real_t tmp_342 = tmp_337*tmp_52 + tmp_338*tmp_81 + tmp_339*tmp_82;
      real_t tmp_343 = -tmp_340 - tmp_341 - tmp_342 + 1;
      real_t tmp_344 = 0.0068572537431980923*tmp_90;
      real_t tmp_345 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_346 = tmp_15*(tmp_16 + tmp_345);
      real_t tmp_347 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_348 = tmp_15*(tmp_23 + tmp_347);
      real_t tmp_349 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_350 = tmp_15*(tmp_30 + tmp_349);
      real_t tmp_351 = tmp_22*tmp_348 + tmp_29*tmp_350 + tmp_346*tmp_4;
      real_t tmp_352 = tmp_346*tmp_37 + tmp_348*tmp_38 + tmp_350*tmp_39;
      real_t tmp_353 = tmp_346*tmp_41 + tmp_348*tmp_42 + tmp_350*tmp_43;
      real_t tmp_354 = -tmp_351 - tmp_352 - tmp_353 + 1;
      real_t tmp_355 = tmp_61*(tmp_345 + tmp_69);
      real_t tmp_356 = tmp_61*(tmp_347 + tmp_72);
      real_t tmp_357 = tmp_61*(tmp_349 + tmp_75);
      real_t tmp_358 = tmp_355*tmp_66 + tmp_356*tmp_71 + tmp_357*tmp_74;
      real_t tmp_359 = tmp_355*tmp_64 + tmp_356*tmp_78 + tmp_357*tmp_79;
      real_t tmp_360 = tmp_355*tmp_52 + tmp_356*tmp_81 + tmp_357*tmp_82;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = 0.037198804536718075*tmp_90;
      real_t tmp_363 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_364 = tmp_15*(tmp_16 + tmp_363);
      real_t tmp_365 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_366 = tmp_15*(tmp_23 + tmp_365);
      real_t tmp_367 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_368 = tmp_15*(tmp_30 + tmp_367);
      real_t tmp_369 = tmp_22*tmp_366 + tmp_29*tmp_368 + tmp_364*tmp_4;
      real_t tmp_370 = tmp_364*tmp_37 + tmp_366*tmp_38 + tmp_368*tmp_39;
      real_t tmp_371 = tmp_364*tmp_41 + tmp_366*tmp_42 + tmp_368*tmp_43;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_61*(tmp_363 + tmp_69);
      real_t tmp_374 = tmp_61*(tmp_365 + tmp_72);
      real_t tmp_375 = tmp_61*(tmp_367 + tmp_75);
      real_t tmp_376 = tmp_373*tmp_66 + tmp_374*tmp_71 + tmp_375*tmp_74;
      real_t tmp_377 = tmp_373*tmp_64 + tmp_374*tmp_78 + tmp_375*tmp_79;
      real_t tmp_378 = tmp_373*tmp_52 + tmp_374*tmp_81 + tmp_375*tmp_82;
      real_t tmp_379 = -tmp_376 - tmp_377 - tmp_378 + 1;
      real_t tmp_380 = 0.042507265838595799*tmp_90;
      real_t tmp_381 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_382 = tmp_15*(tmp_16 + tmp_381);
      real_t tmp_383 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_384 = tmp_15*(tmp_23 + tmp_383);
      real_t tmp_385 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_386 = tmp_15*(tmp_30 + tmp_385);
      real_t tmp_387 = tmp_22*tmp_384 + tmp_29*tmp_386 + tmp_382*tmp_4;
      real_t tmp_388 = tmp_37*tmp_382 + tmp_38*tmp_384 + tmp_386*tmp_39;
      real_t tmp_389 = tmp_382*tmp_41 + tmp_384*tmp_42 + tmp_386*tmp_43;
      real_t tmp_390 = -tmp_387 - tmp_388 - tmp_389 + 1;
      real_t tmp_391 = tmp_61*(tmp_381 + tmp_69);
      real_t tmp_392 = tmp_61*(tmp_383 + tmp_72);
      real_t tmp_393 = tmp_61*(tmp_385 + tmp_75);
      real_t tmp_394 = tmp_391*tmp_66 + tmp_392*tmp_71 + tmp_393*tmp_74;
      real_t tmp_395 = tmp_391*tmp_64 + tmp_392*tmp_78 + tmp_393*tmp_79;
      real_t tmp_396 = tmp_391*tmp_52 + tmp_392*tmp_81 + tmp_393*tmp_82;
      real_t tmp_397 = -tmp_394 - tmp_395 - tmp_396 + 1;
      real_t tmp_398 = 0.0068572537431980923*tmp_90;
      real_t tmp_399 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_400 = tmp_15*(tmp_16 + tmp_399);
      real_t tmp_401 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_402 = tmp_15*(tmp_23 + tmp_401);
      real_t tmp_403 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_404 = tmp_15*(tmp_30 + tmp_403);
      real_t tmp_405 = tmp_22*tmp_402 + tmp_29*tmp_404 + tmp_4*tmp_400;
      real_t tmp_406 = tmp_37*tmp_400 + tmp_38*tmp_402 + tmp_39*tmp_404;
      real_t tmp_407 = tmp_400*tmp_41 + tmp_402*tmp_42 + tmp_404*tmp_43;
      real_t tmp_408 = -tmp_405 - tmp_406 - tmp_407 + 1;
      real_t tmp_409 = tmp_61*(tmp_399 + tmp_69);
      real_t tmp_410 = tmp_61*(tmp_401 + tmp_72);
      real_t tmp_411 = tmp_61*(tmp_403 + tmp_75);
      real_t tmp_412 = tmp_409*tmp_66 + tmp_410*tmp_71 + tmp_411*tmp_74;
      real_t tmp_413 = tmp_409*tmp_64 + tmp_410*tmp_78 + tmp_411*tmp_79;
      real_t tmp_414 = tmp_409*tmp_52 + tmp_410*tmp_81 + tmp_411*tmp_82;
      real_t tmp_415 = -tmp_412 - tmp_413 - tmp_414 + 1;
      real_t tmp_416 = 0.037198804536718075*tmp_90;
      real_t tmp_417 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_418 = tmp_15*(tmp_16 + tmp_417);
      real_t tmp_419 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_420 = tmp_15*(tmp_23 + tmp_419);
      real_t tmp_421 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_422 = tmp_15*(tmp_30 + tmp_421);
      real_t tmp_423 = tmp_22*tmp_420 + tmp_29*tmp_422 + tmp_4*tmp_418;
      real_t tmp_424 = tmp_37*tmp_418 + tmp_38*tmp_420 + tmp_39*tmp_422;
      real_t tmp_425 = tmp_41*tmp_418 + tmp_42*tmp_420 + tmp_422*tmp_43;
      real_t tmp_426 = -tmp_423 - tmp_424 - tmp_425 + 1;
      real_t tmp_427 = tmp_61*(tmp_417 + tmp_69);
      real_t tmp_428 = tmp_61*(tmp_419 + tmp_72);
      real_t tmp_429 = tmp_61*(tmp_421 + tmp_75);
      real_t tmp_430 = tmp_427*tmp_66 + tmp_428*tmp_71 + tmp_429*tmp_74;
      real_t tmp_431 = tmp_427*tmp_64 + tmp_428*tmp_78 + tmp_429*tmp_79;
      real_t tmp_432 = tmp_427*tmp_52 + tmp_428*tmp_81 + tmp_429*tmp_82;
      real_t tmp_433 = -tmp_430 - tmp_431 - tmp_432 + 1;
      real_t tmp_434 = 0.042507265838595799*tmp_90;
      real_t tmp_435 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_436 = tmp_15*(tmp_16 + tmp_435);
      real_t tmp_437 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_438 = tmp_15*(tmp_23 + tmp_437);
      real_t tmp_439 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_440 = tmp_15*(tmp_30 + tmp_439);
      real_t tmp_441 = tmp_22*tmp_438 + tmp_29*tmp_440 + tmp_4*tmp_436;
      real_t tmp_442 = tmp_37*tmp_436 + tmp_38*tmp_438 + tmp_39*tmp_440;
      real_t tmp_443 = tmp_41*tmp_436 + tmp_42*tmp_438 + tmp_43*tmp_440;
      real_t tmp_444 = -tmp_441 - tmp_442 - tmp_443 + 1;
      real_t tmp_445 = tmp_61*(tmp_435 + tmp_69);
      real_t tmp_446 = tmp_61*(tmp_437 + tmp_72);
      real_t tmp_447 = tmp_61*(tmp_439 + tmp_75);
      real_t tmp_448 = tmp_445*tmp_66 + tmp_446*tmp_71 + tmp_447*tmp_74;
      real_t tmp_449 = tmp_445*tmp_64 + tmp_446*tmp_78 + tmp_447*tmp_79;
      real_t tmp_450 = tmp_445*tmp_52 + tmp_446*tmp_81 + tmp_447*tmp_82;
      real_t tmp_451 = -tmp_448 - tmp_449 - tmp_450 + 1;
      real_t tmp_452 = 0.019202922745021479*tmp_90;
      real_t tmp_453 = p_affine_13_2*tmp_88;
      real_t tmp_454 = p_affine_13_2*tmp_87;
      real_t tmp_455 = p_affine_13_2*tmp_86;
      real_t tmp_456 = p_affine_13_1*tmp_67;
      real_t tmp_457 = p_affine_13_1*tmp_65;
      real_t tmp_458 = p_affine_13_1*tmp_63;
      real_t a_0_0 = tmp_110*(tmp_101*tmp_68 - tmp_108*tmp_109) + tmp_128*(-tmp_109*tmp_127 + tmp_120*tmp_68) + tmp_146*(-tmp_109*tmp_145 + tmp_138*tmp_68) + tmp_164*(-tmp_109*tmp_163 + tmp_156*tmp_68) + tmp_182*(-tmp_109*tmp_181 + tmp_174*tmp_68) + tmp_200*(-tmp_109*tmp_199 + tmp_192*tmp_68) + tmp_218*(-tmp_109*tmp_217 + tmp_210*tmp_68) + tmp_236*(-tmp_109*tmp_235 + tmp_228*tmp_68) + tmp_254*(-tmp_109*tmp_253 + tmp_246*tmp_68) + tmp_272*(-tmp_109*tmp_271 + tmp_264*tmp_68) + tmp_290*(-tmp_109*tmp_289 + tmp_282*tmp_68) + tmp_308*(-tmp_109*tmp_307 + tmp_300*tmp_68) + tmp_326*(-tmp_109*tmp_325 + tmp_318*tmp_68) + tmp_344*(-tmp_109*tmp_343 + tmp_336*tmp_68) + tmp_362*(-tmp_109*tmp_361 + tmp_354*tmp_68) + tmp_380*(-tmp_109*tmp_379 + tmp_372*tmp_68) + tmp_398*(-tmp_109*tmp_397 + tmp_390*tmp_68) + tmp_416*(-tmp_109*tmp_415 + tmp_408*tmp_68) + tmp_434*(-tmp_109*tmp_433 + tmp_426*tmp_68) + tmp_452*(-tmp_109*tmp_451 + tmp_444*tmp_68) + tmp_91*(tmp_45*tmp_68 - tmp_84*tmp_89);
      real_t a_0_1 = tmp_110*(-tmp_108*tmp_453 + tmp_68*tmp_98) + tmp_128*(tmp_117*tmp_68 - tmp_127*tmp_453) + tmp_146*(tmp_135*tmp_68 - tmp_145*tmp_453) + tmp_164*(tmp_153*tmp_68 - tmp_163*tmp_453) + tmp_182*(tmp_171*tmp_68 - tmp_181*tmp_453) + tmp_200*(tmp_189*tmp_68 - tmp_199*tmp_453) + tmp_218*(tmp_207*tmp_68 - tmp_217*tmp_453) + tmp_236*(tmp_225*tmp_68 - tmp_235*tmp_453) + tmp_254*(tmp_243*tmp_68 - tmp_253*tmp_453) + tmp_272*(tmp_261*tmp_68 - tmp_271*tmp_453) + tmp_290*(tmp_279*tmp_68 - tmp_289*tmp_453) + tmp_308*(tmp_297*tmp_68 - tmp_307*tmp_453) + tmp_326*(tmp_315*tmp_68 - tmp_325*tmp_453) + tmp_344*(tmp_333*tmp_68 - tmp_343*tmp_453) + tmp_362*(tmp_351*tmp_68 - tmp_361*tmp_453) + tmp_380*(tmp_369*tmp_68 - tmp_379*tmp_453) + tmp_398*(tmp_387*tmp_68 - tmp_397*tmp_453) + tmp_416*(tmp_405*tmp_68 - tmp_415*tmp_453) + tmp_434*(tmp_423*tmp_68 - tmp_433*tmp_453) + tmp_452*(tmp_441*tmp_68 - tmp_451*tmp_453) + tmp_91*(tmp_36*tmp_68 - tmp_84*tmp_88);
      real_t a_0_2 = tmp_110*(-tmp_108*tmp_454 + tmp_68*tmp_99) + tmp_128*(tmp_118*tmp_68 - tmp_127*tmp_454) + tmp_146*(tmp_136*tmp_68 - tmp_145*tmp_454) + tmp_164*(tmp_154*tmp_68 - tmp_163*tmp_454) + tmp_182*(tmp_172*tmp_68 - tmp_181*tmp_454) + tmp_200*(tmp_190*tmp_68 - tmp_199*tmp_454) + tmp_218*(tmp_208*tmp_68 - tmp_217*tmp_454) + tmp_236*(tmp_226*tmp_68 - tmp_235*tmp_454) + tmp_254*(tmp_244*tmp_68 - tmp_253*tmp_454) + tmp_272*(tmp_262*tmp_68 - tmp_271*tmp_454) + tmp_290*(tmp_280*tmp_68 - tmp_289*tmp_454) + tmp_308*(tmp_298*tmp_68 - tmp_307*tmp_454) + tmp_326*(tmp_316*tmp_68 - tmp_325*tmp_454) + tmp_344*(tmp_334*tmp_68 - tmp_343*tmp_454) + tmp_362*(tmp_352*tmp_68 - tmp_361*tmp_454) + tmp_380*(tmp_370*tmp_68 - tmp_379*tmp_454) + tmp_398*(tmp_388*tmp_68 - tmp_397*tmp_454) + tmp_416*(tmp_406*tmp_68 - tmp_415*tmp_454) + tmp_434*(tmp_424*tmp_68 - tmp_433*tmp_454) + tmp_452*(tmp_442*tmp_68 - tmp_451*tmp_454) + tmp_91*(tmp_40*tmp_68 - tmp_84*tmp_87);
      real_t a_0_3 = tmp_110*(tmp_100*tmp_68 - tmp_108*tmp_455) + tmp_128*(tmp_119*tmp_68 - tmp_127*tmp_455) + tmp_146*(tmp_137*tmp_68 - tmp_145*tmp_455) + tmp_164*(tmp_155*tmp_68 - tmp_163*tmp_455) + tmp_182*(tmp_173*tmp_68 - tmp_181*tmp_455) + tmp_200*(tmp_191*tmp_68 - tmp_199*tmp_455) + tmp_218*(tmp_209*tmp_68 - tmp_217*tmp_455) + tmp_236*(tmp_227*tmp_68 - tmp_235*tmp_455) + tmp_254*(tmp_245*tmp_68 - tmp_253*tmp_455) + tmp_272*(tmp_263*tmp_68 - tmp_271*tmp_455) + tmp_290*(tmp_281*tmp_68 - tmp_289*tmp_455) + tmp_308*(tmp_299*tmp_68 - tmp_307*tmp_455) + tmp_326*(tmp_317*tmp_68 - tmp_325*tmp_455) + tmp_344*(tmp_335*tmp_68 - tmp_343*tmp_455) + tmp_362*(tmp_353*tmp_68 - tmp_361*tmp_455) + tmp_380*(tmp_371*tmp_68 - tmp_379*tmp_455) + tmp_398*(tmp_389*tmp_68 - tmp_397*tmp_455) + tmp_416*(tmp_407*tmp_68 - tmp_415*tmp_455) + tmp_434*(tmp_425*tmp_68 - tmp_433*tmp_455) + tmp_452*(tmp_443*tmp_68 - tmp_451*tmp_455) + tmp_91*(tmp_44*tmp_68 - tmp_84*tmp_86);
      real_t a_1_0 = tmp_110*(tmp_101*tmp_456 - tmp_105*tmp_109) + tmp_128*(-tmp_109*tmp_124 + tmp_120*tmp_456) + tmp_146*(-tmp_109*tmp_142 + tmp_138*tmp_456) + tmp_164*(-tmp_109*tmp_160 + tmp_156*tmp_456) + tmp_182*(-tmp_109*tmp_178 + tmp_174*tmp_456) + tmp_200*(-tmp_109*tmp_196 + tmp_192*tmp_456) + tmp_218*(-tmp_109*tmp_214 + tmp_210*tmp_456) + tmp_236*(-tmp_109*tmp_232 + tmp_228*tmp_456) + tmp_254*(-tmp_109*tmp_250 + tmp_246*tmp_456) + tmp_272*(-tmp_109*tmp_268 + tmp_264*tmp_456) + tmp_290*(-tmp_109*tmp_286 + tmp_282*tmp_456) + tmp_308*(-tmp_109*tmp_304 + tmp_300*tmp_456) + tmp_326*(-tmp_109*tmp_322 + tmp_318*tmp_456) + tmp_344*(-tmp_109*tmp_340 + tmp_336*tmp_456) + tmp_362*(-tmp_109*tmp_358 + tmp_354*tmp_456) + tmp_380*(-tmp_109*tmp_376 + tmp_372*tmp_456) + tmp_398*(-tmp_109*tmp_394 + tmp_390*tmp_456) + tmp_416*(-tmp_109*tmp_412 + tmp_408*tmp_456) + tmp_434*(-tmp_109*tmp_430 + tmp_426*tmp_456) + tmp_452*(-tmp_109*tmp_448 + tmp_444*tmp_456) + tmp_91*(-tmp_109*tmp_77 + tmp_45*tmp_456);
      real_t a_1_1 = tmp_110*(-tmp_105*tmp_453 + tmp_456*tmp_98) + tmp_128*(tmp_117*tmp_456 - tmp_124*tmp_453) + tmp_146*(tmp_135*tmp_456 - tmp_142*tmp_453) + tmp_164*(tmp_153*tmp_456 - tmp_160*tmp_453) + tmp_182*(tmp_171*tmp_456 - tmp_178*tmp_453) + tmp_200*(tmp_189*tmp_456 - tmp_196*tmp_453) + tmp_218*(tmp_207*tmp_456 - tmp_214*tmp_453) + tmp_236*(tmp_225*tmp_456 - tmp_232*tmp_453) + tmp_254*(tmp_243*tmp_456 - tmp_250*tmp_453) + tmp_272*(tmp_261*tmp_456 - tmp_268*tmp_453) + tmp_290*(tmp_279*tmp_456 - tmp_286*tmp_453) + tmp_308*(tmp_297*tmp_456 - tmp_304*tmp_453) + tmp_326*(tmp_315*tmp_456 - tmp_322*tmp_453) + tmp_344*(tmp_333*tmp_456 - tmp_340*tmp_453) + tmp_362*(tmp_351*tmp_456 - tmp_358*tmp_453) + tmp_380*(tmp_369*tmp_456 - tmp_376*tmp_453) + tmp_398*(tmp_387*tmp_456 - tmp_394*tmp_453) + tmp_416*(tmp_405*tmp_456 - tmp_412*tmp_453) + tmp_434*(tmp_423*tmp_456 - tmp_430*tmp_453) + tmp_452*(tmp_441*tmp_456 - tmp_448*tmp_453) + tmp_91*(tmp_36*tmp_456 - tmp_453*tmp_77);
      real_t a_1_2 = tmp_110*(-tmp_105*tmp_454 + tmp_456*tmp_99) + tmp_128*(tmp_118*tmp_456 - tmp_124*tmp_454) + tmp_146*(tmp_136*tmp_456 - tmp_142*tmp_454) + tmp_164*(tmp_154*tmp_456 - tmp_160*tmp_454) + tmp_182*(tmp_172*tmp_456 - tmp_178*tmp_454) + tmp_200*(tmp_190*tmp_456 - tmp_196*tmp_454) + tmp_218*(tmp_208*tmp_456 - tmp_214*tmp_454) + tmp_236*(tmp_226*tmp_456 - tmp_232*tmp_454) + tmp_254*(tmp_244*tmp_456 - tmp_250*tmp_454) + tmp_272*(tmp_262*tmp_456 - tmp_268*tmp_454) + tmp_290*(tmp_280*tmp_456 - tmp_286*tmp_454) + tmp_308*(tmp_298*tmp_456 - tmp_304*tmp_454) + tmp_326*(tmp_316*tmp_456 - tmp_322*tmp_454) + tmp_344*(tmp_334*tmp_456 - tmp_340*tmp_454) + tmp_362*(tmp_352*tmp_456 - tmp_358*tmp_454) + tmp_380*(tmp_370*tmp_456 - tmp_376*tmp_454) + tmp_398*(tmp_388*tmp_456 - tmp_394*tmp_454) + tmp_416*(tmp_406*tmp_456 - tmp_412*tmp_454) + tmp_434*(tmp_424*tmp_456 - tmp_430*tmp_454) + tmp_452*(tmp_442*tmp_456 - tmp_448*tmp_454) + tmp_91*(tmp_40*tmp_456 - tmp_454*tmp_77);
      real_t a_1_3 = tmp_110*(tmp_100*tmp_456 - tmp_105*tmp_455) + tmp_128*(tmp_119*tmp_456 - tmp_124*tmp_455) + tmp_146*(tmp_137*tmp_456 - tmp_142*tmp_455) + tmp_164*(tmp_155*tmp_456 - tmp_160*tmp_455) + tmp_182*(tmp_173*tmp_456 - tmp_178*tmp_455) + tmp_200*(tmp_191*tmp_456 - tmp_196*tmp_455) + tmp_218*(tmp_209*tmp_456 - tmp_214*tmp_455) + tmp_236*(tmp_227*tmp_456 - tmp_232*tmp_455) + tmp_254*(tmp_245*tmp_456 - tmp_250*tmp_455) + tmp_272*(tmp_263*tmp_456 - tmp_268*tmp_455) + tmp_290*(tmp_281*tmp_456 - tmp_286*tmp_455) + tmp_308*(tmp_299*tmp_456 - tmp_304*tmp_455) + tmp_326*(tmp_317*tmp_456 - tmp_322*tmp_455) + tmp_344*(tmp_335*tmp_456 - tmp_340*tmp_455) + tmp_362*(tmp_353*tmp_456 - tmp_358*tmp_455) + tmp_380*(tmp_371*tmp_456 - tmp_376*tmp_455) + tmp_398*(tmp_389*tmp_456 - tmp_394*tmp_455) + tmp_416*(tmp_407*tmp_456 - tmp_412*tmp_455) + tmp_434*(tmp_425*tmp_456 - tmp_430*tmp_455) + tmp_452*(tmp_443*tmp_456 - tmp_448*tmp_455) + tmp_91*(tmp_44*tmp_456 - tmp_455*tmp_77);
      real_t a_2_0 = tmp_110*(tmp_101*tmp_457 - tmp_106*tmp_109) + tmp_128*(-tmp_109*tmp_125 + tmp_120*tmp_457) + tmp_146*(-tmp_109*tmp_143 + tmp_138*tmp_457) + tmp_164*(-tmp_109*tmp_161 + tmp_156*tmp_457) + tmp_182*(-tmp_109*tmp_179 + tmp_174*tmp_457) + tmp_200*(-tmp_109*tmp_197 + tmp_192*tmp_457) + tmp_218*(-tmp_109*tmp_215 + tmp_210*tmp_457) + tmp_236*(-tmp_109*tmp_233 + tmp_228*tmp_457) + tmp_254*(-tmp_109*tmp_251 + tmp_246*tmp_457) + tmp_272*(-tmp_109*tmp_269 + tmp_264*tmp_457) + tmp_290*(-tmp_109*tmp_287 + tmp_282*tmp_457) + tmp_308*(-tmp_109*tmp_305 + tmp_300*tmp_457) + tmp_326*(-tmp_109*tmp_323 + tmp_318*tmp_457) + tmp_344*(-tmp_109*tmp_341 + tmp_336*tmp_457) + tmp_362*(-tmp_109*tmp_359 + tmp_354*tmp_457) + tmp_380*(-tmp_109*tmp_377 + tmp_372*tmp_457) + tmp_398*(-tmp_109*tmp_395 + tmp_390*tmp_457) + tmp_416*(-tmp_109*tmp_413 + tmp_408*tmp_457) + tmp_434*(-tmp_109*tmp_431 + tmp_426*tmp_457) + tmp_452*(-tmp_109*tmp_449 + tmp_444*tmp_457) + tmp_91*(-tmp_109*tmp_80 + tmp_45*tmp_457);
      real_t a_2_1 = tmp_110*(-tmp_106*tmp_453 + tmp_457*tmp_98) + tmp_128*(tmp_117*tmp_457 - tmp_125*tmp_453) + tmp_146*(tmp_135*tmp_457 - tmp_143*tmp_453) + tmp_164*(tmp_153*tmp_457 - tmp_161*tmp_453) + tmp_182*(tmp_171*tmp_457 - tmp_179*tmp_453) + tmp_200*(tmp_189*tmp_457 - tmp_197*tmp_453) + tmp_218*(tmp_207*tmp_457 - tmp_215*tmp_453) + tmp_236*(tmp_225*tmp_457 - tmp_233*tmp_453) + tmp_254*(tmp_243*tmp_457 - tmp_251*tmp_453) + tmp_272*(tmp_261*tmp_457 - tmp_269*tmp_453) + tmp_290*(tmp_279*tmp_457 - tmp_287*tmp_453) + tmp_308*(tmp_297*tmp_457 - tmp_305*tmp_453) + tmp_326*(tmp_315*tmp_457 - tmp_323*tmp_453) + tmp_344*(tmp_333*tmp_457 - tmp_341*tmp_453) + tmp_362*(tmp_351*tmp_457 - tmp_359*tmp_453) + tmp_380*(tmp_369*tmp_457 - tmp_377*tmp_453) + tmp_398*(tmp_387*tmp_457 - tmp_395*tmp_453) + tmp_416*(tmp_405*tmp_457 - tmp_413*tmp_453) + tmp_434*(tmp_423*tmp_457 - tmp_431*tmp_453) + tmp_452*(tmp_441*tmp_457 - tmp_449*tmp_453) + tmp_91*(tmp_36*tmp_457 - tmp_453*tmp_80);
      real_t a_2_2 = tmp_110*(-tmp_106*tmp_454 + tmp_457*tmp_99) + tmp_128*(tmp_118*tmp_457 - tmp_125*tmp_454) + tmp_146*(tmp_136*tmp_457 - tmp_143*tmp_454) + tmp_164*(tmp_154*tmp_457 - tmp_161*tmp_454) + tmp_182*(tmp_172*tmp_457 - tmp_179*tmp_454) + tmp_200*(tmp_190*tmp_457 - tmp_197*tmp_454) + tmp_218*(tmp_208*tmp_457 - tmp_215*tmp_454) + tmp_236*(tmp_226*tmp_457 - tmp_233*tmp_454) + tmp_254*(tmp_244*tmp_457 - tmp_251*tmp_454) + tmp_272*(tmp_262*tmp_457 - tmp_269*tmp_454) + tmp_290*(tmp_280*tmp_457 - tmp_287*tmp_454) + tmp_308*(tmp_298*tmp_457 - tmp_305*tmp_454) + tmp_326*(tmp_316*tmp_457 - tmp_323*tmp_454) + tmp_344*(tmp_334*tmp_457 - tmp_341*tmp_454) + tmp_362*(tmp_352*tmp_457 - tmp_359*tmp_454) + tmp_380*(tmp_370*tmp_457 - tmp_377*tmp_454) + tmp_398*(tmp_388*tmp_457 - tmp_395*tmp_454) + tmp_416*(tmp_406*tmp_457 - tmp_413*tmp_454) + tmp_434*(tmp_424*tmp_457 - tmp_431*tmp_454) + tmp_452*(tmp_442*tmp_457 - tmp_449*tmp_454) + tmp_91*(tmp_40*tmp_457 - tmp_454*tmp_80);
      real_t a_2_3 = tmp_110*(tmp_100*tmp_457 - tmp_106*tmp_455) + tmp_128*(tmp_119*tmp_457 - tmp_125*tmp_455) + tmp_146*(tmp_137*tmp_457 - tmp_143*tmp_455) + tmp_164*(tmp_155*tmp_457 - tmp_161*tmp_455) + tmp_182*(tmp_173*tmp_457 - tmp_179*tmp_455) + tmp_200*(tmp_191*tmp_457 - tmp_197*tmp_455) + tmp_218*(tmp_209*tmp_457 - tmp_215*tmp_455) + tmp_236*(tmp_227*tmp_457 - tmp_233*tmp_455) + tmp_254*(tmp_245*tmp_457 - tmp_251*tmp_455) + tmp_272*(tmp_263*tmp_457 - tmp_269*tmp_455) + tmp_290*(tmp_281*tmp_457 - tmp_287*tmp_455) + tmp_308*(tmp_299*tmp_457 - tmp_305*tmp_455) + tmp_326*(tmp_317*tmp_457 - tmp_323*tmp_455) + tmp_344*(tmp_335*tmp_457 - tmp_341*tmp_455) + tmp_362*(tmp_353*tmp_457 - tmp_359*tmp_455) + tmp_380*(tmp_371*tmp_457 - tmp_377*tmp_455) + tmp_398*(tmp_389*tmp_457 - tmp_395*tmp_455) + tmp_416*(tmp_407*tmp_457 - tmp_413*tmp_455) + tmp_434*(tmp_425*tmp_457 - tmp_431*tmp_455) + tmp_452*(tmp_443*tmp_457 - tmp_449*tmp_455) + tmp_91*(tmp_44*tmp_457 - tmp_455*tmp_80);
      real_t a_3_0 = tmp_110*(tmp_101*tmp_458 - tmp_107*tmp_109) + tmp_128*(-tmp_109*tmp_126 + tmp_120*tmp_458) + tmp_146*(-tmp_109*tmp_144 + tmp_138*tmp_458) + tmp_164*(-tmp_109*tmp_162 + tmp_156*tmp_458) + tmp_182*(-tmp_109*tmp_180 + tmp_174*tmp_458) + tmp_200*(-tmp_109*tmp_198 + tmp_192*tmp_458) + tmp_218*(-tmp_109*tmp_216 + tmp_210*tmp_458) + tmp_236*(-tmp_109*tmp_234 + tmp_228*tmp_458) + tmp_254*(-tmp_109*tmp_252 + tmp_246*tmp_458) + tmp_272*(-tmp_109*tmp_270 + tmp_264*tmp_458) + tmp_290*(-tmp_109*tmp_288 + tmp_282*tmp_458) + tmp_308*(-tmp_109*tmp_306 + tmp_300*tmp_458) + tmp_326*(-tmp_109*tmp_324 + tmp_318*tmp_458) + tmp_344*(-tmp_109*tmp_342 + tmp_336*tmp_458) + tmp_362*(-tmp_109*tmp_360 + tmp_354*tmp_458) + tmp_380*(-tmp_109*tmp_378 + tmp_372*tmp_458) + tmp_398*(-tmp_109*tmp_396 + tmp_390*tmp_458) + tmp_416*(-tmp_109*tmp_414 + tmp_408*tmp_458) + tmp_434*(-tmp_109*tmp_432 + tmp_426*tmp_458) + tmp_452*(-tmp_109*tmp_450 + tmp_444*tmp_458) + tmp_91*(-tmp_109*tmp_83 + tmp_45*tmp_458);
      real_t a_3_1 = tmp_110*(-tmp_107*tmp_453 + tmp_458*tmp_98) + tmp_128*(tmp_117*tmp_458 - tmp_126*tmp_453) + tmp_146*(tmp_135*tmp_458 - tmp_144*tmp_453) + tmp_164*(tmp_153*tmp_458 - tmp_162*tmp_453) + tmp_182*(tmp_171*tmp_458 - tmp_180*tmp_453) + tmp_200*(tmp_189*tmp_458 - tmp_198*tmp_453) + tmp_218*(tmp_207*tmp_458 - tmp_216*tmp_453) + tmp_236*(tmp_225*tmp_458 - tmp_234*tmp_453) + tmp_254*(tmp_243*tmp_458 - tmp_252*tmp_453) + tmp_272*(tmp_261*tmp_458 - tmp_270*tmp_453) + tmp_290*(tmp_279*tmp_458 - tmp_288*tmp_453) + tmp_308*(tmp_297*tmp_458 - tmp_306*tmp_453) + tmp_326*(tmp_315*tmp_458 - tmp_324*tmp_453) + tmp_344*(tmp_333*tmp_458 - tmp_342*tmp_453) + tmp_362*(tmp_351*tmp_458 - tmp_360*tmp_453) + tmp_380*(tmp_369*tmp_458 - tmp_378*tmp_453) + tmp_398*(tmp_387*tmp_458 - tmp_396*tmp_453) + tmp_416*(tmp_405*tmp_458 - tmp_414*tmp_453) + tmp_434*(tmp_423*tmp_458 - tmp_432*tmp_453) + tmp_452*(tmp_441*tmp_458 - tmp_450*tmp_453) + tmp_91*(tmp_36*tmp_458 - tmp_453*tmp_83);
      real_t a_3_2 = tmp_110*(-tmp_107*tmp_454 + tmp_458*tmp_99) + tmp_128*(tmp_118*tmp_458 - tmp_126*tmp_454) + tmp_146*(tmp_136*tmp_458 - tmp_144*tmp_454) + tmp_164*(tmp_154*tmp_458 - tmp_162*tmp_454) + tmp_182*(tmp_172*tmp_458 - tmp_180*tmp_454) + tmp_200*(tmp_190*tmp_458 - tmp_198*tmp_454) + tmp_218*(tmp_208*tmp_458 - tmp_216*tmp_454) + tmp_236*(tmp_226*tmp_458 - tmp_234*tmp_454) + tmp_254*(tmp_244*tmp_458 - tmp_252*tmp_454) + tmp_272*(tmp_262*tmp_458 - tmp_270*tmp_454) + tmp_290*(tmp_280*tmp_458 - tmp_288*tmp_454) + tmp_308*(tmp_298*tmp_458 - tmp_306*tmp_454) + tmp_326*(tmp_316*tmp_458 - tmp_324*tmp_454) + tmp_344*(tmp_334*tmp_458 - tmp_342*tmp_454) + tmp_362*(tmp_352*tmp_458 - tmp_360*tmp_454) + tmp_380*(tmp_370*tmp_458 - tmp_378*tmp_454) + tmp_398*(tmp_388*tmp_458 - tmp_396*tmp_454) + tmp_416*(tmp_406*tmp_458 - tmp_414*tmp_454) + tmp_434*(tmp_424*tmp_458 - tmp_432*tmp_454) + tmp_452*(tmp_442*tmp_458 - tmp_450*tmp_454) + tmp_91*(tmp_40*tmp_458 - tmp_454*tmp_83);
      real_t a_3_3 = tmp_110*(tmp_100*tmp_458 - tmp_107*tmp_455) + tmp_128*(tmp_119*tmp_458 - tmp_126*tmp_455) + tmp_146*(tmp_137*tmp_458 - tmp_144*tmp_455) + tmp_164*(tmp_155*tmp_458 - tmp_162*tmp_455) + tmp_182*(tmp_173*tmp_458 - tmp_180*tmp_455) + tmp_200*(tmp_191*tmp_458 - tmp_198*tmp_455) + tmp_218*(tmp_209*tmp_458 - tmp_216*tmp_455) + tmp_236*(tmp_227*tmp_458 - tmp_234*tmp_455) + tmp_254*(tmp_245*tmp_458 - tmp_252*tmp_455) + tmp_272*(tmp_263*tmp_458 - tmp_270*tmp_455) + tmp_290*(tmp_281*tmp_458 - tmp_288*tmp_455) + tmp_308*(tmp_299*tmp_458 - tmp_306*tmp_455) + tmp_326*(tmp_317*tmp_458 - tmp_324*tmp_455) + tmp_344*(tmp_335*tmp_458 - tmp_342*tmp_455) + tmp_362*(tmp_353*tmp_458 - tmp_360*tmp_455) + tmp_380*(tmp_371*tmp_458 - tmp_378*tmp_455) + tmp_398*(tmp_389*tmp_458 - tmp_396*tmp_455) + tmp_416*(tmp_407*tmp_458 - tmp_414*tmp_455) + tmp_434*(tmp_425*tmp_458 - tmp_432*tmp_455) + tmp_452*(tmp_443*tmp_458 - tmp_450*tmp_455) + tmp_91*(tmp_44*tmp_458 - tmp_455*tmp_83);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = tmp_4*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_1*tmp_8;
      real_t tmp_14 = tmp_0*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_2 - tmp_10*tmp_5 + tmp_11*tmp_12*tmp_3 - tmp_11*tmp_13 - tmp_14*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_0*tmp_7 + tmp_11*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_1*tmp_11 + tmp_4*tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_6 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_12*tmp_3 - tmp_13;
      real_t tmp_35 = -tmp_10*tmp_3 + tmp_7*tmp_8;
      real_t tmp_36 = tmp_1*tmp_10 - tmp_12*tmp_7;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36;
      real_t tmp_38 = -tmp_14 + tmp_9;
      real_t tmp_39 = tmp_0*tmp_10 - tmp_11*tmp_8;
      real_t tmp_40 = -tmp_10*tmp_4 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40;
      real_t tmp_42 = -tmp_33 - tmp_37 - tmp_41 + 1;
      real_t tmp_43 = 0.5*tmp_15;
      real_t tmp_44 = tmp_38*tmp_43;
      real_t tmp_45 = tmp_34*tmp_43;
      real_t tmp_46 = tmp_43*tmp_6;
      real_t tmp_47 = p_affine_13_1*(-tmp_44 - tmp_45 - tmp_46);
      real_t tmp_48 = tmp_39*tmp_43;
      real_t tmp_49 = tmp_35*tmp_43;
      real_t tmp_50 = tmp_21*tmp_43;
      real_t tmp_51 = p_affine_13_2*(-tmp_48 - tmp_49 - tmp_50);
      real_t tmp_52 = 2.0*std::pow((std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)), 1.0/2.0);
      real_t tmp_53 = 0.0068572537431980923*tmp_52;
      real_t tmp_54 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_55 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_56 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_57 = tmp_21*tmp_55 + tmp_27*tmp_56 + tmp_54*tmp_6;
      real_t tmp_58 = tmp_34*tmp_54 + tmp_35*tmp_55 + tmp_36*tmp_56;
      real_t tmp_59 = tmp_38*tmp_54 + tmp_39*tmp_55 + tmp_40*tmp_56;
      real_t tmp_60 = -tmp_57 - tmp_58 - tmp_59 + 1;
      real_t tmp_61 = 0.037198804536718075*tmp_52;
      real_t tmp_62 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_6*tmp_62;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64;
      real_t tmp_68 = -tmp_65 - tmp_66 - tmp_67 + 1;
      real_t tmp_69 = 0.020848748529055869*tmp_52;
      real_t tmp_70 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_71 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_72 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_73 = tmp_21*tmp_71 + tmp_27*tmp_72 + tmp_6*tmp_70;
      real_t tmp_74 = tmp_34*tmp_70 + tmp_35*tmp_71 + tmp_36*tmp_72;
      real_t tmp_75 = tmp_38*tmp_70 + tmp_39*tmp_71 + tmp_40*tmp_72;
      real_t tmp_76 = -tmp_73 - tmp_74 - tmp_75 + 1;
      real_t tmp_77 = 0.019202922745021479*tmp_52;
      real_t tmp_78 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_79 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_80 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_81 = tmp_21*tmp_79 + tmp_27*tmp_80 + tmp_6*tmp_78;
      real_t tmp_82 = tmp_34*tmp_78 + tmp_35*tmp_79 + tmp_36*tmp_80;
      real_t tmp_83 = tmp_38*tmp_78 + tmp_39*tmp_79 + tmp_40*tmp_80;
      real_t tmp_84 = -tmp_81 - tmp_82 - tmp_83 + 1;
      real_t tmp_85 = 0.020848748529055869*tmp_52;
      real_t tmp_86 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_87 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_88 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_89 = tmp_21*tmp_87 + tmp_27*tmp_88 + tmp_6*tmp_86;
      real_t tmp_90 = tmp_34*tmp_86 + tmp_35*tmp_87 + tmp_36*tmp_88;
      real_t tmp_91 = tmp_38*tmp_86 + tmp_39*tmp_87 + tmp_40*tmp_88;
      real_t tmp_92 = -tmp_89 - tmp_90 - tmp_91 + 1;
      real_t tmp_93 = 0.019202922745021479*tmp_52;
      real_t tmp_94 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_95 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_96 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_97 = tmp_21*tmp_95 + tmp_27*tmp_96 + tmp_6*tmp_94;
      real_t tmp_98 = tmp_34*tmp_94 + tmp_35*tmp_95 + tmp_36*tmp_96;
      real_t tmp_99 = tmp_38*tmp_94 + tmp_39*tmp_95 + tmp_40*tmp_96;
      real_t tmp_100 = -tmp_97 - tmp_98 - tmp_99 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_52;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_6 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_102*tmp_34 + tmp_103*tmp_35 + tmp_104*tmp_36;
      real_t tmp_107 = tmp_102*tmp_38 + tmp_103*tmp_39 + tmp_104*tmp_40;
      real_t tmp_108 = -tmp_105 - tmp_106 - tmp_107 + 1;
      real_t tmp_109 = 0.019202922745021479*tmp_52;
      real_t tmp_110 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_111 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_112 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_113 = tmp_110*tmp_6 + tmp_111*tmp_21 + tmp_112*tmp_27;
      real_t tmp_114 = tmp_110*tmp_34 + tmp_111*tmp_35 + tmp_112*tmp_36;
      real_t tmp_115 = tmp_110*tmp_38 + tmp_111*tmp_39 + tmp_112*tmp_40;
      real_t tmp_116 = -tmp_113 - tmp_114 - tmp_115 + 1;
      real_t tmp_117 = 0.020848748529055869*tmp_52;
      real_t tmp_118 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_119 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_120 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_121 = tmp_118*tmp_6 + tmp_119*tmp_21 + tmp_120*tmp_27;
      real_t tmp_122 = tmp_118*tmp_34 + tmp_119*tmp_35 + tmp_120*tmp_36;
      real_t tmp_123 = tmp_118*tmp_38 + tmp_119*tmp_39 + tmp_120*tmp_40;
      real_t tmp_124 = -tmp_121 - tmp_122 - tmp_123 + 1;
      real_t tmp_125 = 0.019202922745021479*tmp_52;
      real_t tmp_126 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_127 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_128 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_129 = tmp_126*tmp_6 + tmp_127*tmp_21 + tmp_128*tmp_27;
      real_t tmp_130 = tmp_126*tmp_34 + tmp_127*tmp_35 + tmp_128*tmp_36;
      real_t tmp_131 = tmp_126*tmp_38 + tmp_127*tmp_39 + tmp_128*tmp_40;
      real_t tmp_132 = -tmp_129 - tmp_130 - tmp_131 + 1;
      real_t tmp_133 = 0.020848748529055869*tmp_52;
      real_t tmp_134 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_6 + tmp_135*tmp_21 + tmp_136*tmp_27;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40;
      real_t tmp_140 = -tmp_137 - tmp_138 - tmp_139 + 1;
      real_t tmp_141 = 0.019202922745021479*tmp_52;
      real_t tmp_142 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_143 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_144 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_145 = tmp_142*tmp_6 + tmp_143*tmp_21 + tmp_144*tmp_27;
      real_t tmp_146 = tmp_142*tmp_34 + tmp_143*tmp_35 + tmp_144*tmp_36;
      real_t tmp_147 = tmp_142*tmp_38 + tmp_143*tmp_39 + tmp_144*tmp_40;
      real_t tmp_148 = -tmp_145 - tmp_146 - tmp_147 + 1;
      real_t tmp_149 = 0.042507265838595799*tmp_52;
      real_t tmp_150 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_151 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_152 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_153 = tmp_150*tmp_6 + tmp_151*tmp_21 + tmp_152*tmp_27;
      real_t tmp_154 = tmp_150*tmp_34 + tmp_151*tmp_35 + tmp_152*tmp_36;
      real_t tmp_155 = tmp_150*tmp_38 + tmp_151*tmp_39 + tmp_152*tmp_40;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_52;
      real_t tmp_158 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_6 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_158*tmp_34 + tmp_159*tmp_35 + tmp_160*tmp_36;
      real_t tmp_163 = tmp_158*tmp_38 + tmp_159*tmp_39 + tmp_160*tmp_40;
      real_t tmp_164 = -tmp_161 - tmp_162 - tmp_163 + 1;
      real_t tmp_165 = 0.0068572537431980923*tmp_52;
      real_t tmp_166 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_167 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_168 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_169 = tmp_166*tmp_6 + tmp_167*tmp_21 + tmp_168*tmp_27;
      real_t tmp_170 = tmp_166*tmp_34 + tmp_167*tmp_35 + tmp_168*tmp_36;
      real_t tmp_171 = tmp_166*tmp_38 + tmp_167*tmp_39 + tmp_168*tmp_40;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = 0.037198804536718075*tmp_52;
      real_t tmp_174 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_175 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_176 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_177 = tmp_174*tmp_6 + tmp_175*tmp_21 + tmp_176*tmp_27;
      real_t tmp_178 = tmp_174*tmp_34 + tmp_175*tmp_35 + tmp_176*tmp_36;
      real_t tmp_179 = tmp_174*tmp_38 + tmp_175*tmp_39 + tmp_176*tmp_40;
      real_t tmp_180 = -tmp_177 - tmp_178 - tmp_179 + 1;
      real_t tmp_181 = 0.042507265838595799*tmp_52;
      real_t tmp_182 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_183 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_184 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_185 = tmp_182*tmp_6 + tmp_183*tmp_21 + tmp_184*tmp_27;
      real_t tmp_186 = tmp_182*tmp_34 + tmp_183*tmp_35 + tmp_184*tmp_36;
      real_t tmp_187 = tmp_182*tmp_38 + tmp_183*tmp_39 + tmp_184*tmp_40;
      real_t tmp_188 = -tmp_185 - tmp_186 - tmp_187 + 1;
      real_t tmp_189 = 0.0068572537431980923*tmp_52;
      real_t tmp_190 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_191 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_192 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_193 = tmp_190*tmp_6 + tmp_191*tmp_21 + tmp_192*tmp_27;
      real_t tmp_194 = tmp_190*tmp_34 + tmp_191*tmp_35 + tmp_192*tmp_36;
      real_t tmp_195 = tmp_190*tmp_38 + tmp_191*tmp_39 + tmp_192*tmp_40;
      real_t tmp_196 = -tmp_193 - tmp_194 - tmp_195 + 1;
      real_t tmp_197 = 0.037198804536718075*tmp_52;
      real_t tmp_198 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_199 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_200 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_201 = tmp_198*tmp_6 + tmp_199*tmp_21 + tmp_200*tmp_27;
      real_t tmp_202 = tmp_198*tmp_34 + tmp_199*tmp_35 + tmp_200*tmp_36;
      real_t tmp_203 = tmp_198*tmp_38 + tmp_199*tmp_39 + tmp_200*tmp_40;
      real_t tmp_204 = -tmp_201 - tmp_202 - tmp_203 + 1;
      real_t tmp_205 = 0.042507265838595799*tmp_52;
      real_t tmp_206 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_6 + tmp_207*tmp_21 + tmp_208*tmp_27;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40;
      real_t tmp_212 = -tmp_209 - tmp_210 - tmp_211 + 1;
      real_t tmp_213 = 0.019202922745021479*tmp_52;
      real_t tmp_214 = p_affine_13_2*tmp_50;
      real_t tmp_215 = p_affine_13_2*tmp_49;
      real_t tmp_216 = p_affine_13_2*tmp_48;
      real_t tmp_217 = p_affine_13_1*tmp_46;
      real_t tmp_218 = p_affine_13_1*tmp_45;
      real_t tmp_219 = p_affine_13_1*tmp_44;
      real_t a_0_0 = tmp_101*(-tmp_100*tmp_47 - tmp_100*tmp_51) + tmp_109*(-tmp_108*tmp_47 - tmp_108*tmp_51) + tmp_117*(-tmp_116*tmp_47 - tmp_116*tmp_51) + tmp_125*(-tmp_124*tmp_47 - tmp_124*tmp_51) + tmp_133*(-tmp_132*tmp_47 - tmp_132*tmp_51) + tmp_141*(-tmp_140*tmp_47 - tmp_140*tmp_51) + tmp_149*(-tmp_148*tmp_47 - tmp_148*tmp_51) + tmp_157*(-tmp_156*tmp_47 - tmp_156*tmp_51) + tmp_165*(-tmp_164*tmp_47 - tmp_164*tmp_51) + tmp_173*(-tmp_172*tmp_47 - tmp_172*tmp_51) + tmp_181*(-tmp_180*tmp_47 - tmp_180*tmp_51) + tmp_189*(-tmp_188*tmp_47 - tmp_188*tmp_51) + tmp_197*(-tmp_196*tmp_47 - tmp_196*tmp_51) + tmp_205*(-tmp_204*tmp_47 - tmp_204*tmp_51) + tmp_213*(-tmp_212*tmp_47 - tmp_212*tmp_51) + tmp_53*(-tmp_42*tmp_47 - tmp_42*tmp_51) + tmp_61*(-tmp_47*tmp_60 - tmp_51*tmp_60) + tmp_69*(-tmp_47*tmp_68 - tmp_51*tmp_68) + tmp_77*(-tmp_47*tmp_76 - tmp_51*tmp_76) + tmp_85*(-tmp_47*tmp_84 - tmp_51*tmp_84) + tmp_93*(-tmp_47*tmp_92 - tmp_51*tmp_92);
      real_t a_0_1 = tmp_101*(-tmp_100*tmp_214 - tmp_47*tmp_97) + tmp_109*(-tmp_105*tmp_47 - tmp_108*tmp_214) + tmp_117*(-tmp_113*tmp_47 - tmp_116*tmp_214) + tmp_125*(-tmp_121*tmp_47 - tmp_124*tmp_214) + tmp_133*(-tmp_129*tmp_47 - tmp_132*tmp_214) + tmp_141*(-tmp_137*tmp_47 - tmp_140*tmp_214) + tmp_149*(-tmp_145*tmp_47 - tmp_148*tmp_214) + tmp_157*(-tmp_153*tmp_47 - tmp_156*tmp_214) + tmp_165*(-tmp_161*tmp_47 - tmp_164*tmp_214) + tmp_173*(-tmp_169*tmp_47 - tmp_172*tmp_214) + tmp_181*(-tmp_177*tmp_47 - tmp_180*tmp_214) + tmp_189*(-tmp_185*tmp_47 - tmp_188*tmp_214) + tmp_197*(-tmp_193*tmp_47 - tmp_196*tmp_214) + tmp_205*(-tmp_201*tmp_47 - tmp_204*tmp_214) + tmp_213*(-tmp_209*tmp_47 - tmp_212*tmp_214) + tmp_53*(-tmp_214*tmp_42 - tmp_33*tmp_47) + tmp_61*(-tmp_214*tmp_60 - tmp_47*tmp_57) + tmp_69*(-tmp_214*tmp_68 - tmp_47*tmp_65) + tmp_77*(-tmp_214*tmp_76 - tmp_47*tmp_73) + tmp_85*(-tmp_214*tmp_84 - tmp_47*tmp_81) + tmp_93*(-tmp_214*tmp_92 - tmp_47*tmp_89);
      real_t a_0_2 = tmp_101*(-tmp_100*tmp_215 - tmp_47*tmp_98) + tmp_109*(-tmp_106*tmp_47 - tmp_108*tmp_215) + tmp_117*(-tmp_114*tmp_47 - tmp_116*tmp_215) + tmp_125*(-tmp_122*tmp_47 - tmp_124*tmp_215) + tmp_133*(-tmp_130*tmp_47 - tmp_132*tmp_215) + tmp_141*(-tmp_138*tmp_47 - tmp_140*tmp_215) + tmp_149*(-tmp_146*tmp_47 - tmp_148*tmp_215) + tmp_157*(-tmp_154*tmp_47 - tmp_156*tmp_215) + tmp_165*(-tmp_162*tmp_47 - tmp_164*tmp_215) + tmp_173*(-tmp_170*tmp_47 - tmp_172*tmp_215) + tmp_181*(-tmp_178*tmp_47 - tmp_180*tmp_215) + tmp_189*(-tmp_186*tmp_47 - tmp_188*tmp_215) + tmp_197*(-tmp_194*tmp_47 - tmp_196*tmp_215) + tmp_205*(-tmp_202*tmp_47 - tmp_204*tmp_215) + tmp_213*(-tmp_210*tmp_47 - tmp_212*tmp_215) + tmp_53*(-tmp_215*tmp_42 - tmp_37*tmp_47) + tmp_61*(-tmp_215*tmp_60 - tmp_47*tmp_58) + tmp_69*(-tmp_215*tmp_68 - tmp_47*tmp_66) + tmp_77*(-tmp_215*tmp_76 - tmp_47*tmp_74) + tmp_85*(-tmp_215*tmp_84 - tmp_47*tmp_82) + tmp_93*(-tmp_215*tmp_92 - tmp_47*tmp_90);
      real_t a_0_3 = tmp_101*(-tmp_100*tmp_216 - tmp_47*tmp_99) + tmp_109*(-tmp_107*tmp_47 - tmp_108*tmp_216) + tmp_117*(-tmp_115*tmp_47 - tmp_116*tmp_216) + tmp_125*(-tmp_123*tmp_47 - tmp_124*tmp_216) + tmp_133*(-tmp_131*tmp_47 - tmp_132*tmp_216) + tmp_141*(-tmp_139*tmp_47 - tmp_140*tmp_216) + tmp_149*(-tmp_147*tmp_47 - tmp_148*tmp_216) + tmp_157*(-tmp_155*tmp_47 - tmp_156*tmp_216) + tmp_165*(-tmp_163*tmp_47 - tmp_164*tmp_216) + tmp_173*(-tmp_171*tmp_47 - tmp_172*tmp_216) + tmp_181*(-tmp_179*tmp_47 - tmp_180*tmp_216) + tmp_189*(-tmp_187*tmp_47 - tmp_188*tmp_216) + tmp_197*(-tmp_195*tmp_47 - tmp_196*tmp_216) + tmp_205*(-tmp_203*tmp_47 - tmp_204*tmp_216) + tmp_213*(-tmp_211*tmp_47 - tmp_212*tmp_216) + tmp_53*(-tmp_216*tmp_42 - tmp_41*tmp_47) + tmp_61*(-tmp_216*tmp_60 - tmp_47*tmp_59) + tmp_69*(-tmp_216*tmp_68 - tmp_47*tmp_67) + tmp_77*(-tmp_216*tmp_76 - tmp_47*tmp_75) + tmp_85*(-tmp_216*tmp_84 - tmp_47*tmp_83) + tmp_93*(-tmp_216*tmp_92 - tmp_47*tmp_91);
      real_t a_1_0 = tmp_101*(-tmp_100*tmp_217 - tmp_51*tmp_97) + tmp_109*(-tmp_105*tmp_51 - tmp_108*tmp_217) + tmp_117*(-tmp_113*tmp_51 - tmp_116*tmp_217) + tmp_125*(-tmp_121*tmp_51 - tmp_124*tmp_217) + tmp_133*(-tmp_129*tmp_51 - tmp_132*tmp_217) + tmp_141*(-tmp_137*tmp_51 - tmp_140*tmp_217) + tmp_149*(-tmp_145*tmp_51 - tmp_148*tmp_217) + tmp_157*(-tmp_153*tmp_51 - tmp_156*tmp_217) + tmp_165*(-tmp_161*tmp_51 - tmp_164*tmp_217) + tmp_173*(-tmp_169*tmp_51 - tmp_172*tmp_217) + tmp_181*(-tmp_177*tmp_51 - tmp_180*tmp_217) + tmp_189*(-tmp_185*tmp_51 - tmp_188*tmp_217) + tmp_197*(-tmp_193*tmp_51 - tmp_196*tmp_217) + tmp_205*(-tmp_201*tmp_51 - tmp_204*tmp_217) + tmp_213*(-tmp_209*tmp_51 - tmp_212*tmp_217) + tmp_53*(-tmp_217*tmp_42 - tmp_33*tmp_51) + tmp_61*(-tmp_217*tmp_60 - tmp_51*tmp_57) + tmp_69*(-tmp_217*tmp_68 - tmp_51*tmp_65) + tmp_77*(-tmp_217*tmp_76 - tmp_51*tmp_73) + tmp_85*(-tmp_217*tmp_84 - tmp_51*tmp_81) + tmp_93*(-tmp_217*tmp_92 - tmp_51*tmp_89);
      real_t a_1_1 = tmp_101*(-tmp_214*tmp_97 - tmp_217*tmp_97) + tmp_109*(-tmp_105*tmp_214 - tmp_105*tmp_217) + tmp_117*(-tmp_113*tmp_214 - tmp_113*tmp_217) + tmp_125*(-tmp_121*tmp_214 - tmp_121*tmp_217) + tmp_133*(-tmp_129*tmp_214 - tmp_129*tmp_217) + tmp_141*(-tmp_137*tmp_214 - tmp_137*tmp_217) + tmp_149*(-tmp_145*tmp_214 - tmp_145*tmp_217) + tmp_157*(-tmp_153*tmp_214 - tmp_153*tmp_217) + tmp_165*(-tmp_161*tmp_214 - tmp_161*tmp_217) + tmp_173*(-tmp_169*tmp_214 - tmp_169*tmp_217) + tmp_181*(-tmp_177*tmp_214 - tmp_177*tmp_217) + tmp_189*(-tmp_185*tmp_214 - tmp_185*tmp_217) + tmp_197*(-tmp_193*tmp_214 - tmp_193*tmp_217) + tmp_205*(-tmp_201*tmp_214 - tmp_201*tmp_217) + tmp_213*(-tmp_209*tmp_214 - tmp_209*tmp_217) + tmp_53*(-tmp_214*tmp_33 - tmp_217*tmp_33) + tmp_61*(-tmp_214*tmp_57 - tmp_217*tmp_57) + tmp_69*(-tmp_214*tmp_65 - tmp_217*tmp_65) + tmp_77*(-tmp_214*tmp_73 - tmp_217*tmp_73) + tmp_85*(-tmp_214*tmp_81 - tmp_217*tmp_81) + tmp_93*(-tmp_214*tmp_89 - tmp_217*tmp_89);
      real_t a_1_2 = tmp_101*(-tmp_215*tmp_97 - tmp_217*tmp_98) + tmp_109*(-tmp_105*tmp_215 - tmp_106*tmp_217) + tmp_117*(-tmp_113*tmp_215 - tmp_114*tmp_217) + tmp_125*(-tmp_121*tmp_215 - tmp_122*tmp_217) + tmp_133*(-tmp_129*tmp_215 - tmp_130*tmp_217) + tmp_141*(-tmp_137*tmp_215 - tmp_138*tmp_217) + tmp_149*(-tmp_145*tmp_215 - tmp_146*tmp_217) + tmp_157*(-tmp_153*tmp_215 - tmp_154*tmp_217) + tmp_165*(-tmp_161*tmp_215 - tmp_162*tmp_217) + tmp_173*(-tmp_169*tmp_215 - tmp_170*tmp_217) + tmp_181*(-tmp_177*tmp_215 - tmp_178*tmp_217) + tmp_189*(-tmp_185*tmp_215 - tmp_186*tmp_217) + tmp_197*(-tmp_193*tmp_215 - tmp_194*tmp_217) + tmp_205*(-tmp_201*tmp_215 - tmp_202*tmp_217) + tmp_213*(-tmp_209*tmp_215 - tmp_210*tmp_217) + tmp_53*(-tmp_215*tmp_33 - tmp_217*tmp_37) + tmp_61*(-tmp_215*tmp_57 - tmp_217*tmp_58) + tmp_69*(-tmp_215*tmp_65 - tmp_217*tmp_66) + tmp_77*(-tmp_215*tmp_73 - tmp_217*tmp_74) + tmp_85*(-tmp_215*tmp_81 - tmp_217*tmp_82) + tmp_93*(-tmp_215*tmp_89 - tmp_217*tmp_90);
      real_t a_1_3 = tmp_101*(-tmp_216*tmp_97 - tmp_217*tmp_99) + tmp_109*(-tmp_105*tmp_216 - tmp_107*tmp_217) + tmp_117*(-tmp_113*tmp_216 - tmp_115*tmp_217) + tmp_125*(-tmp_121*tmp_216 - tmp_123*tmp_217) + tmp_133*(-tmp_129*tmp_216 - tmp_131*tmp_217) + tmp_141*(-tmp_137*tmp_216 - tmp_139*tmp_217) + tmp_149*(-tmp_145*tmp_216 - tmp_147*tmp_217) + tmp_157*(-tmp_153*tmp_216 - tmp_155*tmp_217) + tmp_165*(-tmp_161*tmp_216 - tmp_163*tmp_217) + tmp_173*(-tmp_169*tmp_216 - tmp_171*tmp_217) + tmp_181*(-tmp_177*tmp_216 - tmp_179*tmp_217) + tmp_189*(-tmp_185*tmp_216 - tmp_187*tmp_217) + tmp_197*(-tmp_193*tmp_216 - tmp_195*tmp_217) + tmp_205*(-tmp_201*tmp_216 - tmp_203*tmp_217) + tmp_213*(-tmp_209*tmp_216 - tmp_211*tmp_217) + tmp_53*(-tmp_216*tmp_33 - tmp_217*tmp_41) + tmp_61*(-tmp_216*tmp_57 - tmp_217*tmp_59) + tmp_69*(-tmp_216*tmp_65 - tmp_217*tmp_67) + tmp_77*(-tmp_216*tmp_73 - tmp_217*tmp_75) + tmp_85*(-tmp_216*tmp_81 - tmp_217*tmp_83) + tmp_93*(-tmp_216*tmp_89 - tmp_217*tmp_91);
      real_t a_2_0 = tmp_101*(-tmp_100*tmp_218 - tmp_51*tmp_98) + tmp_109*(-tmp_106*tmp_51 - tmp_108*tmp_218) + tmp_117*(-tmp_114*tmp_51 - tmp_116*tmp_218) + tmp_125*(-tmp_122*tmp_51 - tmp_124*tmp_218) + tmp_133*(-tmp_130*tmp_51 - tmp_132*tmp_218) + tmp_141*(-tmp_138*tmp_51 - tmp_140*tmp_218) + tmp_149*(-tmp_146*tmp_51 - tmp_148*tmp_218) + tmp_157*(-tmp_154*tmp_51 - tmp_156*tmp_218) + tmp_165*(-tmp_162*tmp_51 - tmp_164*tmp_218) + tmp_173*(-tmp_170*tmp_51 - tmp_172*tmp_218) + tmp_181*(-tmp_178*tmp_51 - tmp_180*tmp_218) + tmp_189*(-tmp_186*tmp_51 - tmp_188*tmp_218) + tmp_197*(-tmp_194*tmp_51 - tmp_196*tmp_218) + tmp_205*(-tmp_202*tmp_51 - tmp_204*tmp_218) + tmp_213*(-tmp_210*tmp_51 - tmp_212*tmp_218) + tmp_53*(-tmp_218*tmp_42 - tmp_37*tmp_51) + tmp_61*(-tmp_218*tmp_60 - tmp_51*tmp_58) + tmp_69*(-tmp_218*tmp_68 - tmp_51*tmp_66) + tmp_77*(-tmp_218*tmp_76 - tmp_51*tmp_74) + tmp_85*(-tmp_218*tmp_84 - tmp_51*tmp_82) + tmp_93*(-tmp_218*tmp_92 - tmp_51*tmp_90);
      real_t a_2_1 = tmp_101*(-tmp_214*tmp_98 - tmp_218*tmp_97) + tmp_109*(-tmp_105*tmp_218 - tmp_106*tmp_214) + tmp_117*(-tmp_113*tmp_218 - tmp_114*tmp_214) + tmp_125*(-tmp_121*tmp_218 - tmp_122*tmp_214) + tmp_133*(-tmp_129*tmp_218 - tmp_130*tmp_214) + tmp_141*(-tmp_137*tmp_218 - tmp_138*tmp_214) + tmp_149*(-tmp_145*tmp_218 - tmp_146*tmp_214) + tmp_157*(-tmp_153*tmp_218 - tmp_154*tmp_214) + tmp_165*(-tmp_161*tmp_218 - tmp_162*tmp_214) + tmp_173*(-tmp_169*tmp_218 - tmp_170*tmp_214) + tmp_181*(-tmp_177*tmp_218 - tmp_178*tmp_214) + tmp_189*(-tmp_185*tmp_218 - tmp_186*tmp_214) + tmp_197*(-tmp_193*tmp_218 - tmp_194*tmp_214) + tmp_205*(-tmp_201*tmp_218 - tmp_202*tmp_214) + tmp_213*(-tmp_209*tmp_218 - tmp_210*tmp_214) + tmp_53*(-tmp_214*tmp_37 - tmp_218*tmp_33) + tmp_61*(-tmp_214*tmp_58 - tmp_218*tmp_57) + tmp_69*(-tmp_214*tmp_66 - tmp_218*tmp_65) + tmp_77*(-tmp_214*tmp_74 - tmp_218*tmp_73) + tmp_85*(-tmp_214*tmp_82 - tmp_218*tmp_81) + tmp_93*(-tmp_214*tmp_90 - tmp_218*tmp_89);
      real_t a_2_2 = tmp_101*(-tmp_215*tmp_98 - tmp_218*tmp_98) + tmp_109*(-tmp_106*tmp_215 - tmp_106*tmp_218) + tmp_117*(-tmp_114*tmp_215 - tmp_114*tmp_218) + tmp_125*(-tmp_122*tmp_215 - tmp_122*tmp_218) + tmp_133*(-tmp_130*tmp_215 - tmp_130*tmp_218) + tmp_141*(-tmp_138*tmp_215 - tmp_138*tmp_218) + tmp_149*(-tmp_146*tmp_215 - tmp_146*tmp_218) + tmp_157*(-tmp_154*tmp_215 - tmp_154*tmp_218) + tmp_165*(-tmp_162*tmp_215 - tmp_162*tmp_218) + tmp_173*(-tmp_170*tmp_215 - tmp_170*tmp_218) + tmp_181*(-tmp_178*tmp_215 - tmp_178*tmp_218) + tmp_189*(-tmp_186*tmp_215 - tmp_186*tmp_218) + tmp_197*(-tmp_194*tmp_215 - tmp_194*tmp_218) + tmp_205*(-tmp_202*tmp_215 - tmp_202*tmp_218) + tmp_213*(-tmp_210*tmp_215 - tmp_210*tmp_218) + tmp_53*(-tmp_215*tmp_37 - tmp_218*tmp_37) + tmp_61*(-tmp_215*tmp_58 - tmp_218*tmp_58) + tmp_69*(-tmp_215*tmp_66 - tmp_218*tmp_66) + tmp_77*(-tmp_215*tmp_74 - tmp_218*tmp_74) + tmp_85*(-tmp_215*tmp_82 - tmp_218*tmp_82) + tmp_93*(-tmp_215*tmp_90 - tmp_218*tmp_90);
      real_t a_2_3 = tmp_101*(-tmp_216*tmp_98 - tmp_218*tmp_99) + tmp_109*(-tmp_106*tmp_216 - tmp_107*tmp_218) + tmp_117*(-tmp_114*tmp_216 - tmp_115*tmp_218) + tmp_125*(-tmp_122*tmp_216 - tmp_123*tmp_218) + tmp_133*(-tmp_130*tmp_216 - tmp_131*tmp_218) + tmp_141*(-tmp_138*tmp_216 - tmp_139*tmp_218) + tmp_149*(-tmp_146*tmp_216 - tmp_147*tmp_218) + tmp_157*(-tmp_154*tmp_216 - tmp_155*tmp_218) + tmp_165*(-tmp_162*tmp_216 - tmp_163*tmp_218) + tmp_173*(-tmp_170*tmp_216 - tmp_171*tmp_218) + tmp_181*(-tmp_178*tmp_216 - tmp_179*tmp_218) + tmp_189*(-tmp_186*tmp_216 - tmp_187*tmp_218) + tmp_197*(-tmp_194*tmp_216 - tmp_195*tmp_218) + tmp_205*(-tmp_202*tmp_216 - tmp_203*tmp_218) + tmp_213*(-tmp_210*tmp_216 - tmp_211*tmp_218) + tmp_53*(-tmp_216*tmp_37 - tmp_218*tmp_41) + tmp_61*(-tmp_216*tmp_58 - tmp_218*tmp_59) + tmp_69*(-tmp_216*tmp_66 - tmp_218*tmp_67) + tmp_77*(-tmp_216*tmp_74 - tmp_218*tmp_75) + tmp_85*(-tmp_216*tmp_82 - tmp_218*tmp_83) + tmp_93*(-tmp_216*tmp_90 - tmp_218*tmp_91);
      real_t a_3_0 = tmp_101*(-tmp_100*tmp_219 - tmp_51*tmp_99) + tmp_109*(-tmp_107*tmp_51 - tmp_108*tmp_219) + tmp_117*(-tmp_115*tmp_51 - tmp_116*tmp_219) + tmp_125*(-tmp_123*tmp_51 - tmp_124*tmp_219) + tmp_133*(-tmp_131*tmp_51 - tmp_132*tmp_219) + tmp_141*(-tmp_139*tmp_51 - tmp_140*tmp_219) + tmp_149*(-tmp_147*tmp_51 - tmp_148*tmp_219) + tmp_157*(-tmp_155*tmp_51 - tmp_156*tmp_219) + tmp_165*(-tmp_163*tmp_51 - tmp_164*tmp_219) + tmp_173*(-tmp_171*tmp_51 - tmp_172*tmp_219) + tmp_181*(-tmp_179*tmp_51 - tmp_180*tmp_219) + tmp_189*(-tmp_187*tmp_51 - tmp_188*tmp_219) + tmp_197*(-tmp_195*tmp_51 - tmp_196*tmp_219) + tmp_205*(-tmp_203*tmp_51 - tmp_204*tmp_219) + tmp_213*(-tmp_211*tmp_51 - tmp_212*tmp_219) + tmp_53*(-tmp_219*tmp_42 - tmp_41*tmp_51) + tmp_61*(-tmp_219*tmp_60 - tmp_51*tmp_59) + tmp_69*(-tmp_219*tmp_68 - tmp_51*tmp_67) + tmp_77*(-tmp_219*tmp_76 - tmp_51*tmp_75) + tmp_85*(-tmp_219*tmp_84 - tmp_51*tmp_83) + tmp_93*(-tmp_219*tmp_92 - tmp_51*tmp_91);
      real_t a_3_1 = tmp_101*(-tmp_214*tmp_99 - tmp_219*tmp_97) + tmp_109*(-tmp_105*tmp_219 - tmp_107*tmp_214) + tmp_117*(-tmp_113*tmp_219 - tmp_115*tmp_214) + tmp_125*(-tmp_121*tmp_219 - tmp_123*tmp_214) + tmp_133*(-tmp_129*tmp_219 - tmp_131*tmp_214) + tmp_141*(-tmp_137*tmp_219 - tmp_139*tmp_214) + tmp_149*(-tmp_145*tmp_219 - tmp_147*tmp_214) + tmp_157*(-tmp_153*tmp_219 - tmp_155*tmp_214) + tmp_165*(-tmp_161*tmp_219 - tmp_163*tmp_214) + tmp_173*(-tmp_169*tmp_219 - tmp_171*tmp_214) + tmp_181*(-tmp_177*tmp_219 - tmp_179*tmp_214) + tmp_189*(-tmp_185*tmp_219 - tmp_187*tmp_214) + tmp_197*(-tmp_193*tmp_219 - tmp_195*tmp_214) + tmp_205*(-tmp_201*tmp_219 - tmp_203*tmp_214) + tmp_213*(-tmp_209*tmp_219 - tmp_211*tmp_214) + tmp_53*(-tmp_214*tmp_41 - tmp_219*tmp_33) + tmp_61*(-tmp_214*tmp_59 - tmp_219*tmp_57) + tmp_69*(-tmp_214*tmp_67 - tmp_219*tmp_65) + tmp_77*(-tmp_214*tmp_75 - tmp_219*tmp_73) + tmp_85*(-tmp_214*tmp_83 - tmp_219*tmp_81) + tmp_93*(-tmp_214*tmp_91 - tmp_219*tmp_89);
      real_t a_3_2 = tmp_101*(-tmp_215*tmp_99 - tmp_219*tmp_98) + tmp_109*(-tmp_106*tmp_219 - tmp_107*tmp_215) + tmp_117*(-tmp_114*tmp_219 - tmp_115*tmp_215) + tmp_125*(-tmp_122*tmp_219 - tmp_123*tmp_215) + tmp_133*(-tmp_130*tmp_219 - tmp_131*tmp_215) + tmp_141*(-tmp_138*tmp_219 - tmp_139*tmp_215) + tmp_149*(-tmp_146*tmp_219 - tmp_147*tmp_215) + tmp_157*(-tmp_154*tmp_219 - tmp_155*tmp_215) + tmp_165*(-tmp_162*tmp_219 - tmp_163*tmp_215) + tmp_173*(-tmp_170*tmp_219 - tmp_171*tmp_215) + tmp_181*(-tmp_178*tmp_219 - tmp_179*tmp_215) + tmp_189*(-tmp_186*tmp_219 - tmp_187*tmp_215) + tmp_197*(-tmp_194*tmp_219 - tmp_195*tmp_215) + tmp_205*(-tmp_202*tmp_219 - tmp_203*tmp_215) + tmp_213*(-tmp_210*tmp_219 - tmp_211*tmp_215) + tmp_53*(-tmp_215*tmp_41 - tmp_219*tmp_37) + tmp_61*(-tmp_215*tmp_59 - tmp_219*tmp_58) + tmp_69*(-tmp_215*tmp_67 - tmp_219*tmp_66) + tmp_77*(-tmp_215*tmp_75 - tmp_219*tmp_74) + tmp_85*(-tmp_215*tmp_83 - tmp_219*tmp_82) + tmp_93*(-tmp_215*tmp_91 - tmp_219*tmp_90);
      real_t a_3_3 = tmp_101*(-tmp_216*tmp_99 - tmp_219*tmp_99) + tmp_109*(-tmp_107*tmp_216 - tmp_107*tmp_219) + tmp_117*(-tmp_115*tmp_216 - tmp_115*tmp_219) + tmp_125*(-tmp_123*tmp_216 - tmp_123*tmp_219) + tmp_133*(-tmp_131*tmp_216 - tmp_131*tmp_219) + tmp_141*(-tmp_139*tmp_216 - tmp_139*tmp_219) + tmp_149*(-tmp_147*tmp_216 - tmp_147*tmp_219) + tmp_157*(-tmp_155*tmp_216 - tmp_155*tmp_219) + tmp_165*(-tmp_163*tmp_216 - tmp_163*tmp_219) + tmp_173*(-tmp_171*tmp_216 - tmp_171*tmp_219) + tmp_181*(-tmp_179*tmp_216 - tmp_179*tmp_219) + tmp_189*(-tmp_187*tmp_216 - tmp_187*tmp_219) + tmp_197*(-tmp_195*tmp_216 - tmp_195*tmp_219) + tmp_205*(-tmp_203*tmp_216 - tmp_203*tmp_219) + tmp_213*(-tmp_211*tmp_216 - tmp_211*tmp_219) + tmp_53*(-tmp_216*tmp_41 - tmp_219*tmp_41) + tmp_61*(-tmp_216*tmp_59 - tmp_219*tmp_59) + tmp_69*(-tmp_216*tmp_67 - tmp_219*tmp_67) + tmp_77*(-tmp_216*tmp_75 - tmp_219*tmp_75) + tmp_85*(-tmp_216*tmp_83 - tmp_219*tmp_83) + tmp_93*(-tmp_216*tmp_91 - tmp_219*tmp_91);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1P1_22 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1P1_22()
: callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}



void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      real_t a_1_0 = 0;
      real_t a_1_1 = 0;
      real_t a_1_2 = 0;
      real_t a_2_0 = 0;
      real_t a_2_1 = 0;
      real_t a_2_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g2_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id20 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id21 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id22 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id23 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id24 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id25 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id26 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id27 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id28 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id29 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id30 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id31 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id32 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id33 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id34 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id35 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id36 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id37 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id38 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id39 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id40 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id41 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id42 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id43 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id44 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id45 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id46 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id47 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id48 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id49 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id50 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id51 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id52 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id53 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id54 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id55 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id56 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id57 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id58 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id59 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id60 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id61 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id62 = 0;
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id0 );
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id1 );
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id2 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id3 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id4 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id5 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id6 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id7 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id8 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id9 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id10 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id11 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id12 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id13 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id14 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id15 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id16 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id17 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id18 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id19 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id20 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id21 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id22 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id23 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id24 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id25 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id26 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id27 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id28 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id29 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id30 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id31 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id32 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id33 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id34 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id35 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id36 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id37 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id38 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id39 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id40 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id41 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id42 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id43 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id44 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id45 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id46 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id47 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id48 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id49 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id50 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id51 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id52 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id53 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id54 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id55 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id56 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id57 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id58 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id59 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id60 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id61 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id62 );
      real_t tmp_0 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_3*tmp_8;
      real_t tmp_10 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_11*tmp_4 - tmp_10*tmp_14 + tmp_12*tmp_2 - tmp_12*tmp_5 - tmp_13*tmp_7 + tmp_7*tmp_9);
      real_t tmp_16 = 0.5*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_11*tmp_4 - tmp_14;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = -tmp_13 + tmp_9;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = -tmp_17 - tmp_19 - tmp_21;
      real_t tmp_23 = 2*p_affine_13_2;
      real_t tmp_24 = tmp_22*tmp_23;
      real_t tmp_25 = -tmp_1*tmp_7 + tmp_10*tmp_4;
      real_t tmp_26 = tmp_16*tmp_25;
      real_t tmp_27 = -tmp_12*tmp_4 + tmp_7*tmp_8;
      real_t tmp_28 = tmp_16*tmp_27;
      real_t tmp_29 = tmp_1*tmp_12 - tmp_10*tmp_8;
      real_t tmp_30 = tmp_16*tmp_29;
      real_t tmp_31 = -tmp_26 - tmp_28 - tmp_30;
      real_t tmp_32 = tmp_23*tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_35 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_36 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_37 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_38 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_39 = (std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)*std::abs(tmp_33*tmp_34 - tmp_35*tmp_36)) + (std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)*std::abs(tmp_33*tmp_37 - tmp_36*tmp_38)) + (std::abs(tmp_34*tmp_38 - tmp_35*tmp_37)*std::abs(tmp_34*tmp_38 - tmp_35*tmp_37));
      real_t tmp_40 = std::pow(tmp_39, -0.25);
      real_t tmp_41 = tmp_10*tmp_11 - tmp_12*tmp_3;
      real_t tmp_42 = -tmp_37;
      real_t tmp_43 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_44 = tmp_15*(0.93718850182767688*tmp_38 + 0.031405749086161582*tmp_42 + tmp_43);
      real_t tmp_45 = -tmp_34;
      real_t tmp_46 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_47 = tmp_15*(0.93718850182767688*tmp_35 + 0.031405749086161582*tmp_45 + tmp_46);
      real_t tmp_48 = -tmp_36;
      real_t tmp_49 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_50 = tmp_15*(0.93718850182767688*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_51 = tmp_20*tmp_50 + tmp_29*tmp_47 + tmp_41*tmp_44;
      real_t tmp_52 = tmp_0*tmp_12 - tmp_11*tmp_7;
      real_t tmp_53 = tmp_18*tmp_50 + tmp_27*tmp_47 + tmp_44*tmp_52;
      real_t tmp_54 = -tmp_0*tmp_10 + tmp_3*tmp_7;
      real_t tmp_55 = tmp_25*tmp_47 + tmp_44*tmp_54 + tmp_50*tmp_6;
      real_t tmp_56 = 1.0*tmp_15;
      real_t tmp_57 = tmp_54*tmp_56;
      real_t tmp_58 = tmp_52*tmp_56;
      real_t tmp_59 = tmp_41*tmp_56;
      real_t tmp_60 = p_affine_13_0*tmp_22 + p_affine_13_1*tmp_31 + p_affine_13_2*(-tmp_57 - tmp_58 - tmp_59);
      real_t tmp_61 = 1.0*std::pow(tmp_39, 1.0/2.0);
      real_t tmp_62 = 0.0068572537431980923*tmp_61;
      real_t tmp_63 = tmp_15*(0.60796128279561268*tmp_38 + 0.19601935860219369*tmp_42 + tmp_43);
      real_t tmp_64 = tmp_15*(0.60796128279561268*tmp_35 + 0.19601935860219369*tmp_45 + tmp_46);
      real_t tmp_65 = tmp_15*(0.60796128279561268*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_66 = tmp_20*tmp_65 + tmp_29*tmp_64 + tmp_41*tmp_63;
      real_t tmp_67 = tmp_18*tmp_65 + tmp_27*tmp_64 + tmp_52*tmp_63;
      real_t tmp_68 = tmp_25*tmp_64 + tmp_54*tmp_63 + tmp_6*tmp_65;
      real_t tmp_69 = 0.037198804536718075*tmp_61;
      real_t tmp_70 = tmp_15*(0.039308471900058539*tmp_38 + 0.37605877282253791*tmp_42 + tmp_43);
      real_t tmp_71 = tmp_15*(0.039308471900058539*tmp_35 + 0.37605877282253791*tmp_45 + tmp_46);
      real_t tmp_72 = tmp_15*(0.039308471900058539*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_73 = tmp_20*tmp_72 + tmp_29*tmp_71 + tmp_41*tmp_70;
      real_t tmp_74 = tmp_18*tmp_72 + tmp_27*tmp_71 + tmp_52*tmp_70;
      real_t tmp_75 = tmp_25*tmp_71 + tmp_54*tmp_70 + tmp_6*tmp_72;
      real_t tmp_76 = 0.020848748529055869*tmp_61;
      real_t tmp_77 = tmp_15*(0.1711304259088916*tmp_38 + 0.78764240869137092*tmp_42 + tmp_43);
      real_t tmp_78 = tmp_15*(0.1711304259088916*tmp_35 + 0.78764240869137092*tmp_45 + tmp_46);
      real_t tmp_79 = tmp_15*(0.1711304259088916*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_80 = tmp_20*tmp_79 + tmp_29*tmp_78 + tmp_41*tmp_77;
      real_t tmp_81 = tmp_18*tmp_79 + tmp_27*tmp_78 + tmp_52*tmp_77;
      real_t tmp_82 = tmp_25*tmp_78 + tmp_54*tmp_77 + tmp_6*tmp_79;
      real_t tmp_83 = 0.019202922745021479*tmp_61;
      real_t tmp_84 = tmp_15*(0.37605877282253791*tmp_38 + 0.58463275527740355*tmp_42 + tmp_43);
      real_t tmp_85 = tmp_15*(0.37605877282253791*tmp_35 + 0.58463275527740355*tmp_45 + tmp_46);
      real_t tmp_86 = tmp_15*(0.37605877282253791*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_87 = tmp_20*tmp_86 + tmp_29*tmp_85 + tmp_41*tmp_84;
      real_t tmp_88 = tmp_18*tmp_86 + tmp_27*tmp_85 + tmp_52*tmp_84;
      real_t tmp_89 = tmp_25*tmp_85 + tmp_54*tmp_84 + tmp_6*tmp_86;
      real_t tmp_90 = 0.020848748529055869*tmp_61;
      real_t tmp_91 = tmp_15*(0.78764240869137092*tmp_38 + 0.041227165399737475*tmp_42 + tmp_43);
      real_t tmp_92 = tmp_15*(0.78764240869137092*tmp_35 + 0.041227165399737475*tmp_45 + tmp_46);
      real_t tmp_93 = tmp_15*(0.78764240869137092*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_94 = tmp_20*tmp_93 + tmp_29*tmp_92 + tmp_41*tmp_91;
      real_t tmp_95 = tmp_18*tmp_93 + tmp_27*tmp_92 + tmp_52*tmp_91;
      real_t tmp_96 = tmp_25*tmp_92 + tmp_54*tmp_91 + tmp_6*tmp_93;
      real_t tmp_97 = 0.019202922745021479*tmp_61;
      real_t tmp_98 = tmp_15*(0.58463275527740355*tmp_38 + 0.039308471900058539*tmp_42 + tmp_43);
      real_t tmp_99 = tmp_15*(0.58463275527740355*tmp_35 + 0.039308471900058539*tmp_45 + tmp_46);
      real_t tmp_100 = tmp_15*(0.58463275527740355*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_101 = tmp_100*tmp_20 + tmp_29*tmp_99 + tmp_41*tmp_98;
      real_t tmp_102 = tmp_100*tmp_18 + tmp_27*tmp_99 + tmp_52*tmp_98;
      real_t tmp_103 = tmp_100*tmp_6 + tmp_25*tmp_99 + tmp_54*tmp_98;
      real_t tmp_104 = 0.020848748529055869*tmp_61;
      real_t tmp_105 = tmp_15*(0.041227165399737475*tmp_38 + 0.78764240869137092*tmp_42 + tmp_43);
      real_t tmp_106 = tmp_15*(0.041227165399737475*tmp_35 + 0.78764240869137092*tmp_45 + tmp_46);
      real_t tmp_107 = tmp_15*(0.041227165399737475*tmp_33 + 0.78764240869137092*tmp_48 + tmp_49);
      real_t tmp_108 = tmp_105*tmp_41 + tmp_106*tmp_29 + tmp_107*tmp_20;
      real_t tmp_109 = tmp_105*tmp_52 + tmp_106*tmp_27 + tmp_107*tmp_18;
      real_t tmp_110 = tmp_105*tmp_54 + tmp_106*tmp_25 + tmp_107*tmp_6;
      real_t tmp_111 = 0.019202922745021479*tmp_61;
      real_t tmp_112 = tmp_15*(0.039308471900058539*tmp_38 + 0.58463275527740355*tmp_42 + tmp_43);
      real_t tmp_113 = tmp_15*(0.039308471900058539*tmp_35 + 0.58463275527740355*tmp_45 + tmp_46);
      real_t tmp_114 = tmp_15*(0.039308471900058539*tmp_33 + 0.58463275527740355*tmp_48 + tmp_49);
      real_t tmp_115 = tmp_112*tmp_41 + tmp_113*tmp_29 + tmp_114*tmp_20;
      real_t tmp_116 = tmp_112*tmp_52 + tmp_113*tmp_27 + tmp_114*tmp_18;
      real_t tmp_117 = tmp_112*tmp_54 + tmp_113*tmp_25 + tmp_114*tmp_6;
      real_t tmp_118 = 0.020848748529055869*tmp_61;
      real_t tmp_119 = tmp_15*(0.78764240869137092*tmp_38 + 0.1711304259088916*tmp_42 + tmp_43);
      real_t tmp_120 = tmp_15*(0.78764240869137092*tmp_35 + 0.1711304259088916*tmp_45 + tmp_46);
      real_t tmp_121 = tmp_15*(0.78764240869137092*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_122 = tmp_119*tmp_41 + tmp_120*tmp_29 + tmp_121*tmp_20;
      real_t tmp_123 = tmp_119*tmp_52 + tmp_120*tmp_27 + tmp_121*tmp_18;
      real_t tmp_124 = tmp_119*tmp_54 + tmp_120*tmp_25 + tmp_121*tmp_6;
      real_t tmp_125 = 0.019202922745021479*tmp_61;
      real_t tmp_126 = tmp_15*(0.58463275527740355*tmp_38 + 0.37605877282253791*tmp_42 + tmp_43);
      real_t tmp_127 = tmp_15*(0.58463275527740355*tmp_35 + 0.37605877282253791*tmp_45 + tmp_46);
      real_t tmp_128 = tmp_15*(0.58463275527740355*tmp_33 + 0.37605877282253791*tmp_48 + tmp_49);
      real_t tmp_129 = tmp_126*tmp_41 + tmp_127*tmp_29 + tmp_128*tmp_20;
      real_t tmp_130 = tmp_126*tmp_52 + tmp_127*tmp_27 + tmp_128*tmp_18;
      real_t tmp_131 = tmp_126*tmp_54 + tmp_127*tmp_25 + tmp_128*tmp_6;
      real_t tmp_132 = 0.020848748529055869*tmp_61;
      real_t tmp_133 = tmp_15*(0.1711304259088916*tmp_38 + 0.041227165399737475*tmp_42 + tmp_43);
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_35 + 0.041227165399737475*tmp_45 + tmp_46);
      real_t tmp_135 = tmp_15*(0.1711304259088916*tmp_33 + 0.041227165399737475*tmp_48 + tmp_49);
      real_t tmp_136 = tmp_133*tmp_41 + tmp_134*tmp_29 + tmp_135*tmp_20;
      real_t tmp_137 = tmp_133*tmp_52 + tmp_134*tmp_27 + tmp_135*tmp_18;
      real_t tmp_138 = tmp_133*tmp_54 + tmp_134*tmp_25 + tmp_135*tmp_6;
      real_t tmp_139 = 0.019202922745021479*tmp_61;
      real_t tmp_140 = tmp_15*(0.19107600050469298*tmp_38 + 0.40446199974765351*tmp_42 + tmp_43);
      real_t tmp_141 = tmp_15*(0.19107600050469298*tmp_35 + 0.40446199974765351*tmp_45 + tmp_46);
      real_t tmp_142 = tmp_15*(0.19107600050469298*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_143 = tmp_140*tmp_41 + tmp_141*tmp_29 + tmp_142*tmp_20;
      real_t tmp_144 = tmp_140*tmp_52 + tmp_141*tmp_27 + tmp_142*tmp_18;
      real_t tmp_145 = tmp_140*tmp_54 + tmp_141*tmp_25 + tmp_142*tmp_6;
      real_t tmp_146 = 0.042507265838595799*tmp_61;
      real_t tmp_147 = tmp_15*(0.37605877282253791*tmp_38 + 0.039308471900058539*tmp_42 + tmp_43);
      real_t tmp_148 = tmp_15*(0.37605877282253791*tmp_35 + 0.039308471900058539*tmp_45 + tmp_46);
      real_t tmp_149 = tmp_15*(0.37605877282253791*tmp_33 + 0.039308471900058539*tmp_48 + tmp_49);
      real_t tmp_150 = tmp_147*tmp_41 + tmp_148*tmp_29 + tmp_149*tmp_20;
      real_t tmp_151 = tmp_147*tmp_52 + tmp_148*tmp_27 + tmp_149*tmp_18;
      real_t tmp_152 = tmp_147*tmp_54 + tmp_148*tmp_25 + tmp_149*tmp_6;
      real_t tmp_153 = 0.020848748529055869*tmp_61;
      real_t tmp_154 = tmp_15*(0.031405749086161582*tmp_38 + 0.93718850182767688*tmp_42 + tmp_43);
      real_t tmp_155 = tmp_15*(0.031405749086161582*tmp_35 + 0.93718850182767688*tmp_45 + tmp_46);
      real_t tmp_156 = tmp_15*(0.031405749086161582*tmp_33 + 0.93718850182767688*tmp_48 + tmp_49);
      real_t tmp_157 = tmp_154*tmp_41 + tmp_155*tmp_29 + tmp_156*tmp_20;
      real_t tmp_158 = tmp_154*tmp_52 + tmp_155*tmp_27 + tmp_156*tmp_18;
      real_t tmp_159 = tmp_154*tmp_54 + tmp_155*tmp_25 + tmp_156*tmp_6;
      real_t tmp_160 = 0.0068572537431980923*tmp_61;
      real_t tmp_161 = tmp_15*(0.19601935860219369*tmp_38 + 0.60796128279561268*tmp_42 + tmp_43);
      real_t tmp_162 = tmp_15*(0.19601935860219369*tmp_35 + 0.60796128279561268*tmp_45 + tmp_46);
      real_t tmp_163 = tmp_15*(0.19601935860219369*tmp_33 + 0.60796128279561268*tmp_48 + tmp_49);
      real_t tmp_164 = tmp_161*tmp_41 + tmp_162*tmp_29 + tmp_163*tmp_20;
      real_t tmp_165 = tmp_161*tmp_52 + tmp_162*tmp_27 + tmp_163*tmp_18;
      real_t tmp_166 = tmp_161*tmp_54 + tmp_162*tmp_25 + tmp_163*tmp_6;
      real_t tmp_167 = 0.037198804536718075*tmp_61;
      real_t tmp_168 = tmp_15*(0.40446199974765351*tmp_38 + 0.19107600050469298*tmp_42 + tmp_43);
      real_t tmp_169 = tmp_15*(0.40446199974765351*tmp_35 + 0.19107600050469298*tmp_45 + tmp_46);
      real_t tmp_170 = tmp_15*(0.40446199974765351*tmp_33 + 0.19107600050469298*tmp_48 + tmp_49);
      real_t tmp_171 = tmp_168*tmp_41 + tmp_169*tmp_29 + tmp_170*tmp_20;
      real_t tmp_172 = tmp_168*tmp_52 + tmp_169*tmp_27 + tmp_170*tmp_18;
      real_t tmp_173 = tmp_168*tmp_54 + tmp_169*tmp_25 + tmp_170*tmp_6;
      real_t tmp_174 = 0.042507265838595799*tmp_61;
      real_t tmp_175 = tmp_15*(0.031405749086161582*tmp_38 + 0.031405749086161582*tmp_42 + tmp_43);
      real_t tmp_176 = tmp_15*(0.031405749086161582*tmp_35 + 0.031405749086161582*tmp_45 + tmp_46);
      real_t tmp_177 = tmp_15*(0.031405749086161582*tmp_33 + 0.031405749086161582*tmp_48 + tmp_49);
      real_t tmp_178 = tmp_175*tmp_41 + tmp_176*tmp_29 + tmp_177*tmp_20;
      real_t tmp_179 = tmp_175*tmp_52 + tmp_176*tmp_27 + tmp_177*tmp_18;
      real_t tmp_180 = tmp_175*tmp_54 + tmp_176*tmp_25 + tmp_177*tmp_6;
      real_t tmp_181 = 0.0068572537431980923*tmp_61;
      real_t tmp_182 = tmp_15*(0.19601935860219369*tmp_38 + 0.19601935860219369*tmp_42 + tmp_43);
      real_t tmp_183 = tmp_15*(0.19601935860219369*tmp_35 + 0.19601935860219369*tmp_45 + tmp_46);
      real_t tmp_184 = tmp_15*(0.19601935860219369*tmp_33 + 0.19601935860219369*tmp_48 + tmp_49);
      real_t tmp_185 = tmp_182*tmp_41 + tmp_183*tmp_29 + tmp_184*tmp_20;
      real_t tmp_186 = tmp_18*tmp_184 + tmp_182*tmp_52 + tmp_183*tmp_27;
      real_t tmp_187 = tmp_182*tmp_54 + tmp_183*tmp_25 + tmp_184*tmp_6;
      real_t tmp_188 = 0.037198804536718075*tmp_61;
      real_t tmp_189 = tmp_15*(0.40446199974765351*tmp_38 + 0.40446199974765351*tmp_42 + tmp_43);
      real_t tmp_190 = tmp_15*(0.40446199974765351*tmp_35 + 0.40446199974765351*tmp_45 + tmp_46);
      real_t tmp_191 = tmp_15*(0.40446199974765351*tmp_33 + 0.40446199974765351*tmp_48 + tmp_49);
      real_t tmp_192 = tmp_189*tmp_41 + tmp_190*tmp_29 + tmp_191*tmp_20;
      real_t tmp_193 = tmp_18*tmp_191 + tmp_189*tmp_52 + tmp_190*tmp_27;
      real_t tmp_194 = tmp_189*tmp_54 + tmp_190*tmp_25 + tmp_191*tmp_6;
      real_t tmp_195 = 0.042507265838595799*tmp_61;
      real_t tmp_196 = tmp_15*(0.041227165399737475*tmp_38 + 0.1711304259088916*tmp_42 + tmp_43);
      real_t tmp_197 = tmp_15*(0.041227165399737475*tmp_35 + 0.1711304259088916*tmp_45 + tmp_46);
      real_t tmp_198 = tmp_15*(0.041227165399737475*tmp_33 + 0.1711304259088916*tmp_48 + tmp_49);
      real_t tmp_199 = tmp_196*tmp_41 + tmp_197*tmp_29 + tmp_198*tmp_20;
      real_t tmp_200 = tmp_18*tmp_198 + tmp_196*tmp_52 + tmp_197*tmp_27;
      real_t tmp_201 = tmp_196*tmp_54 + tmp_197*tmp_25 + tmp_198*tmp_6;
      real_t tmp_202 = 0.019202922745021479*tmp_61;
      real_t tmp_203 = p_affine_13_2*tmp_56;
      real_t tmp_204 = tmp_20*tmp_203;
      real_t tmp_205 = tmp_203*tmp_29;
      real_t tmp_206 = p_affine_13_0*tmp_21 + p_affine_13_1*tmp_30 + p_affine_13_2*tmp_59;
      real_t tmp_207 = tmp_18*tmp_203;
      real_t tmp_208 = tmp_203*tmp_27;
      real_t tmp_209 = p_affine_13_0*tmp_19 + p_affine_13_1*tmp_28 + p_affine_13_2*tmp_58;
      real_t tmp_210 = tmp_203*tmp_6;
      real_t tmp_211 = tmp_203*tmp_25;
      real_t tmp_212 = p_affine_13_0*tmp_17 + p_affine_13_1*tmp_26 + p_affine_13_2*tmp_57;
      real_t a_0_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id19*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id18*(7.0*tmp_40*(-tmp_101 - tmp_102 - tmp_103 + 1) - tmp_60)) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id22*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id21*(7.0*tmp_40*(-tmp_108 - tmp_109 - tmp_110 + 1) - tmp_60)) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id25*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id24*(7.0*tmp_40*(-tmp_115 - tmp_116 - tmp_117 + 1) - tmp_60)) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id28*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id27*(7.0*tmp_40*(-tmp_122 - tmp_123 - tmp_124 + 1) - tmp_60)) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id31*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id30*(7.0*tmp_40*(-tmp_129 - tmp_130 - tmp_131 + 1) - tmp_60)) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id34*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id33*(7.0*tmp_40*(-tmp_136 - tmp_137 - tmp_138 + 1) - tmp_60)) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id37*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id36*(7.0*tmp_40*(-tmp_143 - tmp_144 - tmp_145 + 1) - tmp_60)) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id40*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id39*(7.0*tmp_40*(-tmp_150 - tmp_151 - tmp_152 + 1) - tmp_60)) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id43*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id42*(7.0*tmp_40*(-tmp_157 - tmp_158 - tmp_159 + 1) - tmp_60)) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id46*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id45*(7.0*tmp_40*(-tmp_164 - tmp_165 - tmp_166 + 1) - tmp_60)) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id49*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id48*(7.0*tmp_40*(-tmp_171 - tmp_172 - tmp_173 + 1) - tmp_60)) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id52*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id51*(7.0*tmp_40*(-tmp_178 - tmp_179 - tmp_180 + 1) - tmp_60)) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id55*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id54*(7.0*tmp_40*(-tmp_185 - tmp_186 - tmp_187 + 1) - tmp_60)) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id58*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id57*(7.0*tmp_40*(-tmp_192 - tmp_193 - tmp_194 + 1) - tmp_60)) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id61*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id60*(7.0*tmp_40*(-tmp_199 - tmp_200 - tmp_201 + 1) - tmp_60)) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id1*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id0*(7.0*tmp_40*(-tmp_51 - tmp_53 - tmp_55 + 1) - tmp_60)) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id4*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id3*(7.0*tmp_40*(-tmp_66 - tmp_67 - tmp_68 + 1) - tmp_60)) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id7*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id6*(7.0*tmp_40*(-tmp_73 - tmp_74 - tmp_75 + 1) - tmp_60)) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id10*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id9*(7.0*tmp_40*(-tmp_80 - tmp_81 - tmp_82 + 1) - tmp_60)) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id13*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id12*(7.0*tmp_40*(-tmp_87 - tmp_88 - tmp_89 + 1) - tmp_60)) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_24 - Scalar_Variable_Coefficient_3D_g1_out0_id16*tmp_32 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id15*(7.0*tmp_40*(-tmp_94 - tmp_95 - tmp_96 + 1) - tmp_60));
      real_t a_1_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id19*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id18*(7.0*tmp_101*tmp_40 - tmp_206)) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id22*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id21*(7.0*tmp_108*tmp_40 - tmp_206)) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id25*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id24*(7.0*tmp_115*tmp_40 - tmp_206)) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id28*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id27*(7.0*tmp_122*tmp_40 - tmp_206)) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id31*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id30*(7.0*tmp_129*tmp_40 - tmp_206)) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id34*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id33*(7.0*tmp_136*tmp_40 - tmp_206)) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id37*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id36*(7.0*tmp_143*tmp_40 - tmp_206)) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id40*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id39*(7.0*tmp_150*tmp_40 - tmp_206)) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id43*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id42*(7.0*tmp_157*tmp_40 - tmp_206)) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id46*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id45*(7.0*tmp_164*tmp_40 - tmp_206)) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id49*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id48*(7.0*tmp_171*tmp_40 - tmp_206)) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id52*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id51*(7.0*tmp_178*tmp_40 - tmp_206)) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id55*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id54*(7.0*tmp_185*tmp_40 - tmp_206)) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id58*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id57*(7.0*tmp_192*tmp_40 - tmp_206)) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id61*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id60*(7.0*tmp_199*tmp_40 - tmp_206)) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id1*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id0*(-tmp_206 + 7.0*tmp_40*tmp_51)) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id4*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id3*(-tmp_206 + 7.0*tmp_40*tmp_66)) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id7*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id6*(-tmp_206 + 7.0*tmp_40*tmp_73)) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id10*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id9*(-tmp_206 + 7.0*tmp_40*tmp_80)) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id13*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id12*(-tmp_206 + 7.0*tmp_40*tmp_87)) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_204 - Scalar_Variable_Coefficient_3D_g1_out0_id16*tmp_205 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id15*(-tmp_206 + 7.0*tmp_40*tmp_94));
      real_t a_2_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id19*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id18*(7.0*tmp_102*tmp_40 - tmp_209)) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id22*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id21*(7.0*tmp_109*tmp_40 - tmp_209)) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id25*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id24*(7.0*tmp_116*tmp_40 - tmp_209)) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id28*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id27*(7.0*tmp_123*tmp_40 - tmp_209)) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id31*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id30*(7.0*tmp_130*tmp_40 - tmp_209)) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id34*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id33*(7.0*tmp_137*tmp_40 - tmp_209)) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id37*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id36*(7.0*tmp_144*tmp_40 - tmp_209)) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id40*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id39*(7.0*tmp_151*tmp_40 - tmp_209)) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id43*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id42*(7.0*tmp_158*tmp_40 - tmp_209)) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id46*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id45*(7.0*tmp_165*tmp_40 - tmp_209)) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id49*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id48*(7.0*tmp_172*tmp_40 - tmp_209)) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id52*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id51*(7.0*tmp_179*tmp_40 - tmp_209)) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id55*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id54*(7.0*tmp_186*tmp_40 - tmp_209)) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id58*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id57*(7.0*tmp_193*tmp_40 - tmp_209)) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id61*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id60*(7.0*tmp_200*tmp_40 - tmp_209)) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id1*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id0*(-tmp_209 + 7.0*tmp_40*tmp_53)) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id4*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id3*(-tmp_209 + 7.0*tmp_40*tmp_67)) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id7*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id6*(-tmp_209 + 7.0*tmp_40*tmp_74)) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id10*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id9*(-tmp_209 + 7.0*tmp_40*tmp_81)) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id13*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id12*(-tmp_209 + 7.0*tmp_40*tmp_88)) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_207 - Scalar_Variable_Coefficient_3D_g1_out0_id16*tmp_208 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id15*(-tmp_209 + 7.0*tmp_40*tmp_95));
      real_t a_3_0 = tmp_104*(-Scalar_Variable_Coefficient_3D_g0_out0_id20*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id19*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id18*(7.0*tmp_103*tmp_40 - tmp_212)) + tmp_111*(-Scalar_Variable_Coefficient_3D_g0_out0_id23*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id22*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id21*(7.0*tmp_110*tmp_40 - tmp_212)) + tmp_118*(-Scalar_Variable_Coefficient_3D_g0_out0_id26*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id25*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id24*(7.0*tmp_117*tmp_40 - tmp_212)) + tmp_125*(-Scalar_Variable_Coefficient_3D_g0_out0_id29*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id28*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id27*(7.0*tmp_124*tmp_40 - tmp_212)) + tmp_132*(-Scalar_Variable_Coefficient_3D_g0_out0_id32*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id31*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id30*(7.0*tmp_131*tmp_40 - tmp_212)) + tmp_139*(-Scalar_Variable_Coefficient_3D_g0_out0_id35*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id34*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id33*(7.0*tmp_138*tmp_40 - tmp_212)) + tmp_146*(-Scalar_Variable_Coefficient_3D_g0_out0_id38*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id37*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id36*(7.0*tmp_145*tmp_40 - tmp_212)) + tmp_153*(-Scalar_Variable_Coefficient_3D_g0_out0_id41*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id40*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id39*(7.0*tmp_152*tmp_40 - tmp_212)) + tmp_160*(-Scalar_Variable_Coefficient_3D_g0_out0_id44*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id43*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id42*(7.0*tmp_159*tmp_40 - tmp_212)) + tmp_167*(-Scalar_Variable_Coefficient_3D_g0_out0_id47*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id46*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id45*(7.0*tmp_166*tmp_40 - tmp_212)) + tmp_174*(-Scalar_Variable_Coefficient_3D_g0_out0_id50*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id49*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id48*(7.0*tmp_173*tmp_40 - tmp_212)) + tmp_181*(-Scalar_Variable_Coefficient_3D_g0_out0_id53*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id52*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id51*(7.0*tmp_180*tmp_40 - tmp_212)) + tmp_188*(-Scalar_Variable_Coefficient_3D_g0_out0_id56*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id55*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id54*(7.0*tmp_187*tmp_40 - tmp_212)) + tmp_195*(-Scalar_Variable_Coefficient_3D_g0_out0_id59*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id58*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id57*(7.0*tmp_194*tmp_40 - tmp_212)) + tmp_202*(-Scalar_Variable_Coefficient_3D_g0_out0_id62*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id61*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id60*(7.0*tmp_201*tmp_40 - tmp_212)) + tmp_62*(-Scalar_Variable_Coefficient_3D_g0_out0_id2*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id1*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id0*(-tmp_212 + 7.0*tmp_40*tmp_55)) + tmp_69*(-Scalar_Variable_Coefficient_3D_g0_out0_id5*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id4*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id3*(-tmp_212 + 7.0*tmp_40*tmp_68)) + tmp_76*(-Scalar_Variable_Coefficient_3D_g0_out0_id8*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id7*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id6*(-tmp_212 + 7.0*tmp_40*tmp_75)) + tmp_83*(-Scalar_Variable_Coefficient_3D_g0_out0_id11*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id10*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id9*(-tmp_212 + 7.0*tmp_40*tmp_82)) + tmp_90*(-Scalar_Variable_Coefficient_3D_g0_out0_id14*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id13*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id12*(-tmp_212 + 7.0*tmp_40*tmp_89)) + tmp_97*(-Scalar_Variable_Coefficient_3D_g0_out0_id17*tmp_210 - Scalar_Variable_Coefficient_3D_g1_out0_id16*tmp_211 + 2*Scalar_Variable_Coefficient_3D_g2_out0_id15*(-tmp_212 + 7.0*tmp_40*tmp_96));
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7;
      real_t tmp_16 = 1.0 / (tmp_15);
      real_t tmp_17 = 2.0*tmp_16;
      real_t tmp_18 = tmp_17*tmp_6;
      real_t tmp_19 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_20 = tmp_17*tmp_19;
      real_t tmp_21 = tmp_10 - tmp_14;
      real_t tmp_22 = tmp_17*tmp_21;
      real_t tmp_23 = -tmp_18 - tmp_20 - tmp_22;
      real_t tmp_24 = 1.0*tmp_16;
      real_t tmp_25 = tmp_24*tmp_6;
      real_t tmp_26 = tmp_19*tmp_24;
      real_t tmp_27 = tmp_21*tmp_24;
      real_t tmp_28 = -tmp_25 - tmp_26 - tmp_27;
      real_t tmp_29 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_30 = tmp_24*tmp_29;
      real_t tmp_31 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_32 = tmp_24*tmp_31;
      real_t tmp_33 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_34 = tmp_24*tmp_33;
      real_t tmp_35 = -tmp_30 - tmp_32 - tmp_34;
      real_t tmp_36 = 0.5*tmp_16;
      real_t tmp_37 = -tmp_29*tmp_36 - tmp_31*tmp_36 - tmp_33*tmp_36;
      real_t tmp_38 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_39 = tmp_24*tmp_38;
      real_t tmp_40 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_41 = tmp_24*tmp_40;
      real_t tmp_42 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_43 = tmp_24*tmp_42;
      real_t tmp_44 = -tmp_39 - tmp_41 - tmp_43;
      real_t tmp_45 = -tmp_36*tmp_38 - tmp_36*tmp_40 - tmp_36*tmp_42;
      real_t tmp_46 = p_affine_0_0*p_affine_1_1;
      real_t tmp_47 = p_affine_0_0*p_affine_1_2;
      real_t tmp_48 = p_affine_2_1*p_affine_3_2;
      real_t tmp_49 = p_affine_0_1*p_affine_1_0;
      real_t tmp_50 = p_affine_0_1*p_affine_1_2;
      real_t tmp_51 = p_affine_2_2*p_affine_3_0;
      real_t tmp_52 = p_affine_0_2*p_affine_1_0;
      real_t tmp_53 = p_affine_0_2*p_affine_1_1;
      real_t tmp_54 = p_affine_2_0*p_affine_3_1;
      real_t tmp_55 = p_affine_2_2*p_affine_3_1;
      real_t tmp_56 = p_affine_2_0*p_affine_3_2;
      real_t tmp_57 = p_affine_2_1*p_affine_3_0;
      real_t tmp_58 = std::abs(p_affine_0_0*tmp_48 - p_affine_0_0*tmp_55 + p_affine_0_1*tmp_51 - p_affine_0_1*tmp_56 + p_affine_0_2*tmp_54 - p_affine_0_2*tmp_57 - p_affine_1_0*tmp_48 + p_affine_1_0*tmp_55 - p_affine_1_1*tmp_51 + p_affine_1_1*tmp_56 - p_affine_1_2*tmp_54 + p_affine_1_2*tmp_57 + p_affine_2_0*tmp_50 - p_affine_2_0*tmp_53 - p_affine_2_1*tmp_47 + p_affine_2_1*tmp_52 + p_affine_2_2*tmp_46 - p_affine_2_2*tmp_49 - p_affine_3_0*tmp_50 + p_affine_3_0*tmp_53 + p_affine_3_1*tmp_47 - p_affine_3_1*tmp_52 - p_affine_3_2*tmp_46 + p_affine_3_2*tmp_49);
      real_t tmp_59 = tmp_58*(tmp_23*tmp_28 + 2*tmp_35*tmp_37 + 2*tmp_44*tmp_45);
      real_t tmp_60 = tmp_17*tmp_37;
      real_t tmp_61 = tmp_17*tmp_45;
      real_t tmp_62 = tmp_58*(tmp_22*tmp_28 + tmp_33*tmp_60 + tmp_42*tmp_61);
      real_t tmp_63 = tmp_58*(tmp_20*tmp_28 + tmp_31*tmp_60 + tmp_40*tmp_61);
      real_t tmp_64 = tmp_58*(tmp_18*tmp_28 + tmp_29*tmp_60 + tmp_38*tmp_61);
      real_t tmp_65 = tmp_58*(tmp_23*tmp_27 + tmp_34*tmp_35 + tmp_43*tmp_44);
      real_t tmp_66 = 1.0 / (tmp_15*tmp_15);
      real_t tmp_67 = 2.0*tmp_66;
      real_t tmp_68 = 1.0*tmp_66;
      real_t tmp_69 = tmp_58*((tmp_21*tmp_21)*tmp_67 + (tmp_33*tmp_33)*tmp_68 + (tmp_42*tmp_42)*tmp_68);
      real_t tmp_70 = tmp_21*tmp_67;
      real_t tmp_71 = tmp_33*tmp_68;
      real_t tmp_72 = tmp_42*tmp_68;
      real_t tmp_73 = tmp_58*(tmp_19*tmp_70 + tmp_31*tmp_71 + tmp_40*tmp_72);
      real_t tmp_74 = 0.1666666666666668*tmp_73;
      real_t tmp_75 = tmp_58*(tmp_29*tmp_71 + tmp_38*tmp_72 + tmp_6*tmp_70);
      real_t tmp_76 = 0.1666666666666668*tmp_75;
      real_t tmp_77 = tmp_58*(tmp_23*tmp_26 + tmp_32*tmp_35 + tmp_41*tmp_44);
      real_t tmp_78 = tmp_58*((tmp_19*tmp_19)*tmp_67 + (tmp_31*tmp_31)*tmp_68 + (tmp_40*tmp_40)*tmp_68);
      real_t tmp_79 = tmp_58*(tmp_19*tmp_6*tmp_67 + tmp_29*tmp_31*tmp_68 + tmp_38*tmp_40*tmp_68);
      real_t tmp_80 = 0.1666666666666668*tmp_79;
      real_t tmp_81 = tmp_58*(tmp_23*tmp_25 + tmp_30*tmp_35 + tmp_39*tmp_44);
      real_t tmp_82 = tmp_58*((tmp_29*tmp_29)*tmp_68 + (tmp_38*tmp_38)*tmp_68 + (tmp_6*tmp_6)*tmp_67);
      real_t a_0_0 = 0.1666666666666668*tmp_59;
      real_t a_0_1 = 0.1666666666666668*tmp_62;
      real_t a_0_2 = 0.1666666666666668*tmp_63;
      real_t a_0_3 = 0.1666666666666668*tmp_64;
      real_t a_1_0 = 0.1666666666666668*tmp_65;
      real_t a_1_1 = 0.1666666666666668*tmp_69;
      real_t a_1_2 = tmp_74;
      real_t a_1_3 = tmp_76;
      real_t a_2_0 = 0.1666666666666668*tmp_77;
      real_t a_2_1 = tmp_74;
      real_t a_2_2 = 0.1666666666666668*tmp_78;
      real_t a_2_3 = tmp_80;
      real_t a_3_0 = 0.1666666666666668*tmp_81;
      real_t a_3_1 = tmp_76;
      real_t a_3_2 = tmp_80;
      real_t a_3_3 = 0.1666666666666668*tmp_82;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_14 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_14*tmp_9;
      real_t tmp_21 = tmp_17*tmp_8;
      real_t tmp_22 = tmp_10*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_11*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_21 + tmp_16*tmp_8*tmp_9 - tmp_18*tmp_20);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_13*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_11*tmp_13 - tmp_18*tmp_9;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_20;
      real_t tmp_37 = tmp_13*tmp_14 - tmp_22;
      real_t tmp_38 = -tmp_13*tmp_17 + tmp_16*tmp_9;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_15 - tmp_21;
      real_t tmp_41 = -tmp_14*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = -tmp_11*tmp_16 + tmp_19;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 0.5*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = tmp_41*tmp_45;
      real_t tmp_50 = tmp_37*tmp_45;
      real_t tmp_51 = tmp_27*tmp_45;
      real_t tmp_52 = 1.0*tmp_23;
      real_t tmp_53 = tmp_40*tmp_52;
      real_t tmp_54 = tmp_36*tmp_52;
      real_t tmp_55 = tmp_12*tmp_52;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_49 - tmp_50 - tmp_51) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2.0*tmp_56;
      real_t tmp_58 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = 1.0*tmp_56;
      real_t tmp_221 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_55;
      real_t tmp_222 = 1.0*tmp_221;
      real_t tmp_223 = tmp_107*(14.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_220 - tmp_106*tmp_222) + tmp_115*(14.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_220 - tmp_114*tmp_222) + tmp_123*(14.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_220 - tmp_122*tmp_222) + tmp_131*(14.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_220 - tmp_130*tmp_222) + tmp_139*(14.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_220 - tmp_138*tmp_222) + tmp_147*(14.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_220 - tmp_146*tmp_222) + tmp_155*(14.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_220 - tmp_154*tmp_222) + tmp_163*(14.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_220 - tmp_162*tmp_222) + tmp_171*(14.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_220 - tmp_170*tmp_222) + tmp_179*(14.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_220 - tmp_178*tmp_222) + tmp_187*(14.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_220 - tmp_186*tmp_222) + tmp_195*(14.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_220 - tmp_194*tmp_222) + tmp_203*(14.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_220 - tmp_202*tmp_222) + tmp_211*(14.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_220 - tmp_210*tmp_222) + tmp_219*(14.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_220 - tmp_218*tmp_222) + tmp_59*(-tmp_220*tmp_35 - tmp_222*tmp_44 + 14.0*tmp_35*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_63 - tmp_222*tmp_66 + 14.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_71 - tmp_222*tmp_74 + 14.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_79 - tmp_222*tmp_82 + 14.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_87 - tmp_222*tmp_90 + 14.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_95 - tmp_222*tmp_98 + 14.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_54;
      real_t tmp_225 = 1.0*tmp_224;
      real_t tmp_226 = tmp_107*(14.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_220 - tmp_106*tmp_225) + tmp_115*(14.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_220 - tmp_114*tmp_225) + tmp_123*(14.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_220 - tmp_122*tmp_225) + tmp_131*(14.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_220 - tmp_130*tmp_225) + tmp_139*(14.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_220 - tmp_138*tmp_225) + tmp_147*(14.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_220 - tmp_146*tmp_225) + tmp_155*(14.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_220 - tmp_154*tmp_225) + tmp_163*(14.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_220 - tmp_162*tmp_225) + tmp_171*(14.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_220 - tmp_170*tmp_225) + tmp_179*(14.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_220 - tmp_178*tmp_225) + tmp_187*(14.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_220 - tmp_186*tmp_225) + tmp_195*(14.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_220 - tmp_194*tmp_225) + tmp_203*(14.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_220 - tmp_202*tmp_225) + tmp_211*(14.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_220 - tmp_210*tmp_225) + tmp_219*(14.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_220 - tmp_218*tmp_225) + tmp_59*(-tmp_220*tmp_39 - tmp_225*tmp_44 + 14.0*tmp_39*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_225*tmp_66 + 14.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_225*tmp_74 + 14.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_220*tmp_80 - tmp_225*tmp_82 + 14.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_220*tmp_88 - tmp_225*tmp_90 + 14.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_220*tmp_96 - tmp_225*tmp_98 + 14.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_227 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_49 + p_affine_13_2*tmp_53;
      real_t tmp_228 = 1.0*tmp_227;
      real_t tmp_229 = tmp_107*(14.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_220 - tmp_106*tmp_228) + tmp_115*(14.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_220 - tmp_114*tmp_228) + tmp_123*(14.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_220 - tmp_122*tmp_228) + tmp_131*(14.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_220 - tmp_130*tmp_228) + tmp_139*(14.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_220 - tmp_138*tmp_228) + tmp_147*(14.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_220 - tmp_146*tmp_228) + tmp_155*(14.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_220 - tmp_154*tmp_228) + tmp_163*(14.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_220 - tmp_162*tmp_228) + tmp_171*(14.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_220 - tmp_170*tmp_228) + tmp_179*(14.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_220 - tmp_178*tmp_228) + tmp_187*(14.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_220 - tmp_186*tmp_228) + tmp_195*(14.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_220 - tmp_194*tmp_228) + tmp_203*(14.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_220 - tmp_202*tmp_228) + tmp_211*(14.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_220 - tmp_210*tmp_228) + tmp_219*(14.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_220 - tmp_218*tmp_228) + tmp_59*(-tmp_220*tmp_43 - tmp_228*tmp_44 + 14.0*tmp_43*tmp_44*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_228*tmp_66 + 14.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_228*tmp_74 + 14.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_220*tmp_81 - tmp_228*tmp_82 + 14.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_220*tmp_89 - tmp_228*tmp_90 + 14.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_220*tmp_97 - tmp_228*tmp_98 + 14.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_230 = 2.0*tmp_221;
      real_t tmp_231 = tmp_107*(14.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_225 - tmp_104*tmp_222) + tmp_115*(14.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_225 - tmp_112*tmp_222) + tmp_123*(14.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_225 - tmp_120*tmp_222) + tmp_131*(14.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_225 - tmp_128*tmp_222) + tmp_139*(14.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_225 - tmp_136*tmp_222) + tmp_147*(14.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_225 - tmp_144*tmp_222) + tmp_155*(14.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_225 - tmp_152*tmp_222) + tmp_163*(14.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_225 - tmp_160*tmp_222) + tmp_171*(14.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_225 - tmp_168*tmp_222) + tmp_179*(14.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_225 - tmp_176*tmp_222) + tmp_187*(14.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_225 - tmp_184*tmp_222) + tmp_195*(14.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_225 - tmp_192*tmp_222) + tmp_203*(14.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_225 - tmp_200*tmp_222) + tmp_211*(14.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_225 - tmp_208*tmp_222) + tmp_219*(14.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_225 - tmp_216*tmp_222) + tmp_59*(-tmp_222*tmp_39 - tmp_225*tmp_35 + 14.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_222*tmp_64 - tmp_225*tmp_63 + 14.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_222*tmp_72 - tmp_225*tmp_71 + 14.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_222*tmp_80 - tmp_225*tmp_79 + 14.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_222*tmp_88 - tmp_225*tmp_87 + 14.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_222*tmp_96 - tmp_225*tmp_95 + 14.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_232 = tmp_107*(14.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_228 - tmp_105*tmp_222) + tmp_115*(14.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_228 - tmp_113*tmp_222) + tmp_123*(14.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_228 - tmp_121*tmp_222) + tmp_131*(14.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_228 - tmp_129*tmp_222) + tmp_139*(14.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_228 - tmp_137*tmp_222) + tmp_147*(14.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_228 - tmp_145*tmp_222) + tmp_155*(14.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_228 - tmp_153*tmp_222) + tmp_163*(14.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_228 - tmp_161*tmp_222) + tmp_171*(14.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_228 - tmp_169*tmp_222) + tmp_179*(14.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_228 - tmp_177*tmp_222) + tmp_187*(14.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_228 - tmp_185*tmp_222) + tmp_195*(14.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_228 - tmp_193*tmp_222) + tmp_203*(14.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_228 - tmp_201*tmp_222) + tmp_211*(14.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_228 - tmp_209*tmp_222) + tmp_219*(14.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_228 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_228*tmp_35 + 14.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_228*tmp_63 + 14.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_228*tmp_71 + 14.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_228*tmp_79 + 14.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_228*tmp_87 + 14.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_228*tmp_95 + 14.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_233 = 2.0*tmp_224;
      real_t tmp_234 = tmp_107*(14.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_228 - tmp_105*tmp_225) + tmp_115*(14.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_228 - tmp_113*tmp_225) + tmp_123*(14.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_228 - tmp_121*tmp_225) + tmp_131*(14.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_228 - tmp_129*tmp_225) + tmp_139*(14.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_228 - tmp_137*tmp_225) + tmp_147*(14.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_228 - tmp_145*tmp_225) + tmp_155*(14.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_228 - tmp_153*tmp_225) + tmp_163*(14.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_228 - tmp_161*tmp_225) + tmp_171*(14.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_228 - tmp_169*tmp_225) + tmp_179*(14.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_228 - tmp_177*tmp_225) + tmp_187*(14.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_228 - tmp_185*tmp_225) + tmp_195*(14.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_228 - tmp_193*tmp_225) + tmp_203*(14.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_228 - tmp_201*tmp_225) + tmp_211*(14.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_228 - tmp_209*tmp_225) + tmp_219*(14.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_228 - tmp_217*tmp_225) + tmp_59*(-tmp_225*tmp_43 - tmp_228*tmp_39 + 14.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_225*tmp_65 - tmp_228*tmp_64 + 14.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_225*tmp_73 - tmp_228*tmp_72 + 14.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_225*tmp_81 - tmp_228*tmp_80 + 14.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_225*tmp_89 - tmp_228*tmp_88 + 14.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_225*tmp_97 - tmp_228*tmp_96 + 14.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_235 = 2.0*tmp_227;
      real_t a_0_0 = tmp_107*(14.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(14.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(14.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(14.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(14.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(14.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(14.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(14.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(14.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(14.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(14.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(14.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(14.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(14.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(14.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(14.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 14.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 14.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 14.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 14.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 14.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_223;
      real_t a_0_2 = tmp_226;
      real_t a_0_3 = tmp_229;
      real_t a_1_0 = tmp_223;
      real_t a_1_1 = tmp_107*(14.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_230) + tmp_115*(14.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_230) + tmp_123*(14.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_230) + tmp_131*(14.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_230) + tmp_139*(14.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_230) + tmp_147*(14.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_230) + tmp_155*(14.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_230) + tmp_163*(14.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_230) + tmp_171*(14.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_230) + tmp_179*(14.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_230) + tmp_187*(14.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_230) + tmp_195*(14.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_230) + tmp_203*(14.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_230) + tmp_211*(14.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_230) + tmp_219*(14.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_230) + tmp_59*(-tmp_230*tmp_35 + 14.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_230*tmp_63 + 14.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_230*tmp_71 + 14.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_230*tmp_79 + 14.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_230*tmp_87 + 14.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_230*tmp_95 + 14.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_231;
      real_t a_1_3 = tmp_232;
      real_t a_2_0 = tmp_226;
      real_t a_2_1 = tmp_231;
      real_t a_2_2 = tmp_107*(14.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_233) + tmp_115*(14.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_233) + tmp_123*(14.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_233) + tmp_131*(14.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_233) + tmp_139*(14.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_233) + tmp_147*(14.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_233) + tmp_155*(14.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_233) + tmp_163*(14.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_233) + tmp_171*(14.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_233) + tmp_179*(14.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_233) + tmp_187*(14.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_233) + tmp_195*(14.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_233) + tmp_203*(14.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_233) + tmp_211*(14.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_233) + tmp_219*(14.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_233) + tmp_59*(-tmp_233*tmp_39 + 14.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_233*tmp_64 + 14.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_233*tmp_72 + 14.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_233*tmp_80 + 14.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_233*tmp_88 + 14.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_233*tmp_96 + 14.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_234;
      real_t a_3_0 = tmp_229;
      real_t a_3_1 = tmp_232;
      real_t a_3_2 = tmp_234;
      real_t a_3_3 = tmp_107*(14.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_235) + tmp_115*(14.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_235) + tmp_123*(14.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_235) + tmp_131*(14.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_235) + tmp_139*(14.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_235) + tmp_147*(14.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_235) + tmp_155*(14.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_235) + tmp_163*(14.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_235) + tmp_171*(14.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_235) + tmp_179*(14.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_235) + tmp_187*(14.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_235) + tmp_195*(14.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_235) + tmp_203*(14.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_235) + tmp_211*(14.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_235) + tmp_219*(14.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_235) + tmp_59*(-tmp_235*tmp_43 + 14.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_235*tmp_65 + 14.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_235*tmp_73 + 14.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_235*tmp_81 + 14.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_235*tmp_89 + 14.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_235*tmp_97 + 14.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_2 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_3 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_4 = tmp_0*tmp_1 - tmp_2*tmp_3;
      real_t tmp_5 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_3*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_1*tmp_10;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_3*tmp_8;
      real_t tmp_15 = 1.0 / (tmp_0*tmp_1*tmp_8 - tmp_0*tmp_13 + tmp_11*tmp_2 - tmp_12*tmp_5 - tmp_14*tmp_2 + tmp_5*tmp_7);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_0*tmp_6 + tmp_10*tmp_2;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_4 + tmp_22*tmp_28 + tmp_29*tmp_35;
      real_t tmp_37 = -tmp_1*tmp_5 + tmp_2*tmp_9;
      real_t tmp_38 = -tmp_2*tmp_8 + tmp_5*tmp_6;
      real_t tmp_39 = tmp_1*tmp_8 - tmp_13;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39;
      real_t tmp_41 = -tmp_0*tmp_9 + tmp_3*tmp_5;
      real_t tmp_42 = tmp_0*tmp_8 - tmp_10*tmp_5;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43;
      real_t tmp_45 = -tmp_36 - tmp_40 - tmp_44 + 1;
      real_t tmp_46 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_50 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_51 = tmp_48 - tmp_49*tmp_50;
      real_t tmp_52 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_53 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_54 = tmp_49*tmp_53;
      real_t tmp_55 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_56 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_57 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_58 = tmp_53*tmp_55;
      real_t tmp_59 = tmp_46*tmp_56;
      real_t tmp_60 = tmp_50*tmp_57;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_57 - tmp_49*tmp_60 + tmp_50*tmp_55*tmp_56 + tmp_52*tmp_54 - tmp_52*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_51*tmp_62;
      real_t tmp_64 = -tmp_46*tmp_52 + tmp_50*tmp_55;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = -tmp_47*tmp_55 + tmp_49*tmp_52;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_69 = tmp_62*tmp_68;
      real_t tmp_70 = tmp_52*tmp_53 - tmp_60;
      real_t tmp_71 = tmp_62*tmp_70;
      real_t tmp_72 = tmp_47*tmp_57 - tmp_52*tmp_56;
      real_t tmp_73 = tmp_62*tmp_72;
      real_t tmp_74 = tmp_54 - tmp_59;
      real_t tmp_75 = 1.0*tmp_61;
      real_t tmp_76 = tmp_74*tmp_75;
      real_t tmp_77 = tmp_46*tmp_57 - tmp_58;
      real_t tmp_78 = tmp_75*tmp_77;
      real_t tmp_79 = -tmp_49*tmp_57 + tmp_55*tmp_56;
      real_t tmp_80 = tmp_75*tmp_79;
      real_t tmp_81 = 1.0*p_affine_13_0*(-tmp_63 - tmp_65 - tmp_67) + 1.0*p_affine_13_1*(-tmp_69 - tmp_71 - tmp_73) + 1.0*p_affine_13_2*(-tmp_76 - tmp_78 - tmp_80);
      real_t tmp_82 = 0.5*tmp_15;
      real_t tmp_83 = tmp_43*tmp_82;
      real_t tmp_84 = tmp_39*tmp_82;
      real_t tmp_85 = tmp_29*tmp_82;
      real_t tmp_86 = tmp_42*tmp_82;
      real_t tmp_87 = tmp_38*tmp_82;
      real_t tmp_88 = tmp_22*tmp_82;
      real_t tmp_89 = 1.0*tmp_15;
      real_t tmp_90 = tmp_41*tmp_89;
      real_t tmp_91 = tmp_37*tmp_89;
      real_t tmp_92 = tmp_4*tmp_89;
      real_t tmp_93 = p_affine_13_0*(-tmp_83 - tmp_84 - tmp_85) + p_affine_13_1*(-tmp_86 - tmp_87 - tmp_88) + p_affine_13_2*(-tmp_90 - tmp_91 - tmp_92);
      real_t tmp_94 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_95 = tmp_61*(tmp_19 + tmp_94);
      real_t tmp_96 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_97 = tmp_61*(tmp_26 + tmp_96);
      real_t tmp_98 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_99 = tmp_61*(tmp_33 + tmp_98);
      real_t tmp_100 = tmp_66*tmp_99 + tmp_72*tmp_97 + tmp_79*tmp_95;
      real_t tmp_101 = tmp_64*tmp_99 + tmp_70*tmp_97 + tmp_77*tmp_95;
      real_t tmp_102 = tmp_51*tmp_99 + tmp_68*tmp_97 + tmp_74*tmp_95;
      real_t tmp_103 = -tmp_100 - tmp_101 - tmp_102 + 1;
      real_t tmp_104 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_105 = 14.0*std::pow(tmp_104, -0.25);
      real_t tmp_106 = tmp_105*tmp_45;
      real_t tmp_107 = 1.0*std::pow(tmp_104, 1.0/2.0);
      real_t tmp_108 = 0.0068572537431980923*tmp_107;
      real_t tmp_109 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_110 = tmp_15*(tmp_109 + tmp_20);
      real_t tmp_111 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_112 = tmp_15*(tmp_111 + tmp_27);
      real_t tmp_113 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_34);
      real_t tmp_115 = tmp_110*tmp_4 + tmp_112*tmp_22 + tmp_114*tmp_29;
      real_t tmp_116 = tmp_110*tmp_37 + tmp_112*tmp_38 + tmp_114*tmp_39;
      real_t tmp_117 = tmp_110*tmp_41 + tmp_112*tmp_42 + tmp_114*tmp_43;
      real_t tmp_118 = -tmp_115 - tmp_116 - tmp_117 + 1;
      real_t tmp_119 = tmp_61*(tmp_109 + tmp_94);
      real_t tmp_120 = tmp_61*(tmp_111 + tmp_96);
      real_t tmp_121 = tmp_61*(tmp_113 + tmp_98);
      real_t tmp_122 = tmp_119*tmp_79 + tmp_120*tmp_72 + tmp_121*tmp_66;
      real_t tmp_123 = tmp_119*tmp_77 + tmp_120*tmp_70 + tmp_121*tmp_64;
      real_t tmp_124 = tmp_119*tmp_74 + tmp_120*tmp_68 + tmp_121*tmp_51;
      real_t tmp_125 = -tmp_122 - tmp_123 - tmp_124 + 1;
      real_t tmp_126 = tmp_105*tmp_118;
      real_t tmp_127 = 0.037198804536718075*tmp_107;
      real_t tmp_128 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_129 = tmp_15*(tmp_128 + tmp_20);
      real_t tmp_130 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_131 = tmp_15*(tmp_130 + tmp_27);
      real_t tmp_132 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_133 = tmp_15*(tmp_132 + tmp_34);
      real_t tmp_134 = tmp_129*tmp_4 + tmp_131*tmp_22 + tmp_133*tmp_29;
      real_t tmp_135 = tmp_129*tmp_37 + tmp_131*tmp_38 + tmp_133*tmp_39;
      real_t tmp_136 = tmp_129*tmp_41 + tmp_131*tmp_42 + tmp_133*tmp_43;
      real_t tmp_137 = -tmp_134 - tmp_135 - tmp_136 + 1;
      real_t tmp_138 = tmp_61*(tmp_128 + tmp_94);
      real_t tmp_139 = tmp_61*(tmp_130 + tmp_96);
      real_t tmp_140 = tmp_61*(tmp_132 + tmp_98);
      real_t tmp_141 = tmp_138*tmp_79 + tmp_139*tmp_72 + tmp_140*tmp_66;
      real_t tmp_142 = tmp_138*tmp_77 + tmp_139*tmp_70 + tmp_140*tmp_64;
      real_t tmp_143 = tmp_138*tmp_74 + tmp_139*tmp_68 + tmp_140*tmp_51;
      real_t tmp_144 = -tmp_141 - tmp_142 - tmp_143 + 1;
      real_t tmp_145 = tmp_105*tmp_137;
      real_t tmp_146 = 0.020848748529055869*tmp_107;
      real_t tmp_147 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_148 = tmp_15*(tmp_147 + tmp_20);
      real_t tmp_149 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_150 = tmp_15*(tmp_149 + tmp_27);
      real_t tmp_151 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_152 = tmp_15*(tmp_151 + tmp_34);
      real_t tmp_153 = tmp_148*tmp_4 + tmp_150*tmp_22 + tmp_152*tmp_29;
      real_t tmp_154 = tmp_148*tmp_37 + tmp_150*tmp_38 + tmp_152*tmp_39;
      real_t tmp_155 = tmp_148*tmp_41 + tmp_150*tmp_42 + tmp_152*tmp_43;
      real_t tmp_156 = -tmp_153 - tmp_154 - tmp_155 + 1;
      real_t tmp_157 = tmp_61*(tmp_147 + tmp_94);
      real_t tmp_158 = tmp_61*(tmp_149 + tmp_96);
      real_t tmp_159 = tmp_61*(tmp_151 + tmp_98);
      real_t tmp_160 = tmp_157*tmp_79 + tmp_158*tmp_72 + tmp_159*tmp_66;
      real_t tmp_161 = tmp_157*tmp_77 + tmp_158*tmp_70 + tmp_159*tmp_64;
      real_t tmp_162 = tmp_157*tmp_74 + tmp_158*tmp_68 + tmp_159*tmp_51;
      real_t tmp_163 = -tmp_160 - tmp_161 - tmp_162 + 1;
      real_t tmp_164 = tmp_105*tmp_156;
      real_t tmp_165 = 0.019202922745021479*tmp_107;
      real_t tmp_166 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_167 = tmp_15*(tmp_166 + tmp_20);
      real_t tmp_168 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_169 = tmp_15*(tmp_168 + tmp_27);
      real_t tmp_170 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_171 = tmp_15*(tmp_170 + tmp_34);
      real_t tmp_172 = tmp_167*tmp_4 + tmp_169*tmp_22 + tmp_171*tmp_29;
      real_t tmp_173 = tmp_167*tmp_37 + tmp_169*tmp_38 + tmp_171*tmp_39;
      real_t tmp_174 = tmp_167*tmp_41 + tmp_169*tmp_42 + tmp_171*tmp_43;
      real_t tmp_175 = -tmp_172 - tmp_173 - tmp_174 + 1;
      real_t tmp_176 = tmp_61*(tmp_166 + tmp_94);
      real_t tmp_177 = tmp_61*(tmp_168 + tmp_96);
      real_t tmp_178 = tmp_61*(tmp_170 + tmp_98);
      real_t tmp_179 = tmp_176*tmp_79 + tmp_177*tmp_72 + tmp_178*tmp_66;
      real_t tmp_180 = tmp_176*tmp_77 + tmp_177*tmp_70 + tmp_178*tmp_64;
      real_t tmp_181 = tmp_176*tmp_74 + tmp_177*tmp_68 + tmp_178*tmp_51;
      real_t tmp_182 = -tmp_179 - tmp_180 - tmp_181 + 1;
      real_t tmp_183 = tmp_105*tmp_175;
      real_t tmp_184 = 0.020848748529055869*tmp_107;
      real_t tmp_185 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_186 = tmp_15*(tmp_185 + tmp_20);
      real_t tmp_187 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_188 = tmp_15*(tmp_187 + tmp_27);
      real_t tmp_189 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_190 = tmp_15*(tmp_189 + tmp_34);
      real_t tmp_191 = tmp_186*tmp_4 + tmp_188*tmp_22 + tmp_190*tmp_29;
      real_t tmp_192 = tmp_186*tmp_37 + tmp_188*tmp_38 + tmp_190*tmp_39;
      real_t tmp_193 = tmp_186*tmp_41 + tmp_188*tmp_42 + tmp_190*tmp_43;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = tmp_61*(tmp_185 + tmp_94);
      real_t tmp_196 = tmp_61*(tmp_187 + tmp_96);
      real_t tmp_197 = tmp_61*(tmp_189 + tmp_98);
      real_t tmp_198 = tmp_195*tmp_79 + tmp_196*tmp_72 + tmp_197*tmp_66;
      real_t tmp_199 = tmp_195*tmp_77 + tmp_196*tmp_70 + tmp_197*tmp_64;
      real_t tmp_200 = tmp_195*tmp_74 + tmp_196*tmp_68 + tmp_197*tmp_51;
      real_t tmp_201 = -tmp_198 - tmp_199 - tmp_200 + 1;
      real_t tmp_202 = tmp_105*tmp_194;
      real_t tmp_203 = 0.019202922745021479*tmp_107;
      real_t tmp_204 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_205 = tmp_15*(tmp_20 + tmp_204);
      real_t tmp_206 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_207 = tmp_15*(tmp_206 + tmp_27);
      real_t tmp_208 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_209 = tmp_15*(tmp_208 + tmp_34);
      real_t tmp_210 = tmp_205*tmp_4 + tmp_207*tmp_22 + tmp_209*tmp_29;
      real_t tmp_211 = tmp_205*tmp_37 + tmp_207*tmp_38 + tmp_209*tmp_39;
      real_t tmp_212 = tmp_205*tmp_41 + tmp_207*tmp_42 + tmp_209*tmp_43;
      real_t tmp_213 = -tmp_210 - tmp_211 - tmp_212 + 1;
      real_t tmp_214 = tmp_61*(tmp_204 + tmp_94);
      real_t tmp_215 = tmp_61*(tmp_206 + tmp_96);
      real_t tmp_216 = tmp_61*(tmp_208 + tmp_98);
      real_t tmp_217 = tmp_214*tmp_79 + tmp_215*tmp_72 + tmp_216*tmp_66;
      real_t tmp_218 = tmp_214*tmp_77 + tmp_215*tmp_70 + tmp_216*tmp_64;
      real_t tmp_219 = tmp_214*tmp_74 + tmp_215*tmp_68 + tmp_216*tmp_51;
      real_t tmp_220 = -tmp_217 - tmp_218 - tmp_219 + 1;
      real_t tmp_221 = tmp_105*tmp_213;
      real_t tmp_222 = 0.020848748529055869*tmp_107;
      real_t tmp_223 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_224 = tmp_15*(tmp_20 + tmp_223);
      real_t tmp_225 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_226 = tmp_15*(tmp_225 + tmp_27);
      real_t tmp_227 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_228 = tmp_15*(tmp_227 + tmp_34);
      real_t tmp_229 = tmp_22*tmp_226 + tmp_224*tmp_4 + tmp_228*tmp_29;
      real_t tmp_230 = tmp_224*tmp_37 + tmp_226*tmp_38 + tmp_228*tmp_39;
      real_t tmp_231 = tmp_224*tmp_41 + tmp_226*tmp_42 + tmp_228*tmp_43;
      real_t tmp_232 = -tmp_229 - tmp_230 - tmp_231 + 1;
      real_t tmp_233 = tmp_61*(tmp_223 + tmp_94);
      real_t tmp_234 = tmp_61*(tmp_225 + tmp_96);
      real_t tmp_235 = tmp_61*(tmp_227 + tmp_98);
      real_t tmp_236 = tmp_233*tmp_79 + tmp_234*tmp_72 + tmp_235*tmp_66;
      real_t tmp_237 = tmp_233*tmp_77 + tmp_234*tmp_70 + tmp_235*tmp_64;
      real_t tmp_238 = tmp_233*tmp_74 + tmp_234*tmp_68 + tmp_235*tmp_51;
      real_t tmp_239 = -tmp_236 - tmp_237 - tmp_238 + 1;
      real_t tmp_240 = tmp_105*tmp_232;
      real_t tmp_241 = 0.019202922745021479*tmp_107;
      real_t tmp_242 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_243 = tmp_15*(tmp_20 + tmp_242);
      real_t tmp_244 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_245 = tmp_15*(tmp_244 + tmp_27);
      real_t tmp_246 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_247 = tmp_15*(tmp_246 + tmp_34);
      real_t tmp_248 = tmp_22*tmp_245 + tmp_243*tmp_4 + tmp_247*tmp_29;
      real_t tmp_249 = tmp_243*tmp_37 + tmp_245*tmp_38 + tmp_247*tmp_39;
      real_t tmp_250 = tmp_243*tmp_41 + tmp_245*tmp_42 + tmp_247*tmp_43;
      real_t tmp_251 = -tmp_248 - tmp_249 - tmp_250 + 1;
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_94);
      real_t tmp_253 = tmp_61*(tmp_244 + tmp_96);
      real_t tmp_254 = tmp_61*(tmp_246 + tmp_98);
      real_t tmp_255 = tmp_252*tmp_79 + tmp_253*tmp_72 + tmp_254*tmp_66;
      real_t tmp_256 = tmp_252*tmp_77 + tmp_253*tmp_70 + tmp_254*tmp_64;
      real_t tmp_257 = tmp_252*tmp_74 + tmp_253*tmp_68 + tmp_254*tmp_51;
      real_t tmp_258 = -tmp_255 - tmp_256 - tmp_257 + 1;
      real_t tmp_259 = tmp_105*tmp_251;
      real_t tmp_260 = 0.020848748529055869*tmp_107;
      real_t tmp_261 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_262 = tmp_15*(tmp_20 + tmp_261);
      real_t tmp_263 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_27);
      real_t tmp_265 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_266 = tmp_15*(tmp_265 + tmp_34);
      real_t tmp_267 = tmp_22*tmp_264 + tmp_262*tmp_4 + tmp_266*tmp_29;
      real_t tmp_268 = tmp_262*tmp_37 + tmp_264*tmp_38 + tmp_266*tmp_39;
      real_t tmp_269 = tmp_262*tmp_41 + tmp_264*tmp_42 + tmp_266*tmp_43;
      real_t tmp_270 = -tmp_267 - tmp_268 - tmp_269 + 1;
      real_t tmp_271 = tmp_61*(tmp_261 + tmp_94);
      real_t tmp_272 = tmp_61*(tmp_263 + tmp_96);
      real_t tmp_273 = tmp_61*(tmp_265 + tmp_98);
      real_t tmp_274 = tmp_271*tmp_79 + tmp_272*tmp_72 + tmp_273*tmp_66;
      real_t tmp_275 = tmp_271*tmp_77 + tmp_272*tmp_70 + tmp_273*tmp_64;
      real_t tmp_276 = tmp_271*tmp_74 + tmp_272*tmp_68 + tmp_273*tmp_51;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_105*tmp_270;
      real_t tmp_279 = 0.019202922745021479*tmp_107;
      real_t tmp_280 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_281 = tmp_15*(tmp_20 + tmp_280);
      real_t tmp_282 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_283 = tmp_15*(tmp_27 + tmp_282);
      real_t tmp_284 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_34);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_4 + tmp_285*tmp_29;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43;
      real_t tmp_289 = -tmp_286 - tmp_287 - tmp_288 + 1;
      real_t tmp_290 = tmp_61*(tmp_280 + tmp_94);
      real_t tmp_291 = tmp_61*(tmp_282 + tmp_96);
      real_t tmp_292 = tmp_61*(tmp_284 + tmp_98);
      real_t tmp_293 = tmp_290*tmp_79 + tmp_291*tmp_72 + tmp_292*tmp_66;
      real_t tmp_294 = tmp_290*tmp_77 + tmp_291*tmp_70 + tmp_292*tmp_64;
      real_t tmp_295 = tmp_290*tmp_74 + tmp_291*tmp_68 + tmp_292*tmp_51;
      real_t tmp_296 = -tmp_293 - tmp_294 - tmp_295 + 1;
      real_t tmp_297 = tmp_105*tmp_289;
      real_t tmp_298 = 0.020848748529055869*tmp_107;
      real_t tmp_299 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_300 = tmp_15*(tmp_20 + tmp_299);
      real_t tmp_301 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_302 = tmp_15*(tmp_27 + tmp_301);
      real_t tmp_303 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_304 = tmp_15*(tmp_303 + tmp_34);
      real_t tmp_305 = tmp_22*tmp_302 + tmp_29*tmp_304 + tmp_300*tmp_4;
      real_t tmp_306 = tmp_300*tmp_37 + tmp_302*tmp_38 + tmp_304*tmp_39;
      real_t tmp_307 = tmp_300*tmp_41 + tmp_302*tmp_42 + tmp_304*tmp_43;
      real_t tmp_308 = -tmp_305 - tmp_306 - tmp_307 + 1;
      real_t tmp_309 = tmp_61*(tmp_299 + tmp_94);
      real_t tmp_310 = tmp_61*(tmp_301 + tmp_96);
      real_t tmp_311 = tmp_61*(tmp_303 + tmp_98);
      real_t tmp_312 = tmp_309*tmp_79 + tmp_310*tmp_72 + tmp_311*tmp_66;
      real_t tmp_313 = tmp_309*tmp_77 + tmp_310*tmp_70 + tmp_311*tmp_64;
      real_t tmp_314 = tmp_309*tmp_74 + tmp_310*tmp_68 + tmp_311*tmp_51;
      real_t tmp_315 = -tmp_312 - tmp_313 - tmp_314 + 1;
      real_t tmp_316 = tmp_105*tmp_308;
      real_t tmp_317 = 0.019202922745021479*tmp_107;
      real_t tmp_318 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_319 = tmp_15*(tmp_20 + tmp_318);
      real_t tmp_320 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_321 = tmp_15*(tmp_27 + tmp_320);
      real_t tmp_322 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_323 = tmp_15*(tmp_322 + tmp_34);
      real_t tmp_324 = tmp_22*tmp_321 + tmp_29*tmp_323 + tmp_319*tmp_4;
      real_t tmp_325 = tmp_319*tmp_37 + tmp_321*tmp_38 + tmp_323*tmp_39;
      real_t tmp_326 = tmp_319*tmp_41 + tmp_321*tmp_42 + tmp_323*tmp_43;
      real_t tmp_327 = -tmp_324 - tmp_325 - tmp_326 + 1;
      real_t tmp_328 = tmp_61*(tmp_318 + tmp_94);
      real_t tmp_329 = tmp_61*(tmp_320 + tmp_96);
      real_t tmp_330 = tmp_61*(tmp_322 + tmp_98);
      real_t tmp_331 = tmp_328*tmp_79 + tmp_329*tmp_72 + tmp_330*tmp_66;
      real_t tmp_332 = tmp_328*tmp_77 + tmp_329*tmp_70 + tmp_330*tmp_64;
      real_t tmp_333 = tmp_328*tmp_74 + tmp_329*tmp_68 + tmp_330*tmp_51;
      real_t tmp_334 = -tmp_331 - tmp_332 - tmp_333 + 1;
      real_t tmp_335 = tmp_105*tmp_327;
      real_t tmp_336 = 0.042507265838595799*tmp_107;
      real_t tmp_337 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_338 = tmp_15*(tmp_20 + tmp_337);
      real_t tmp_339 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_340 = tmp_15*(tmp_27 + tmp_339);
      real_t tmp_341 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_342 = tmp_15*(tmp_34 + tmp_341);
      real_t tmp_343 = tmp_22*tmp_340 + tmp_29*tmp_342 + tmp_338*tmp_4;
      real_t tmp_344 = tmp_338*tmp_37 + tmp_340*tmp_38 + tmp_342*tmp_39;
      real_t tmp_345 = tmp_338*tmp_41 + tmp_340*tmp_42 + tmp_342*tmp_43;
      real_t tmp_346 = -tmp_343 - tmp_344 - tmp_345 + 1;
      real_t tmp_347 = tmp_61*(tmp_337 + tmp_94);
      real_t tmp_348 = tmp_61*(tmp_339 + tmp_96);
      real_t tmp_349 = tmp_61*(tmp_341 + tmp_98);
      real_t tmp_350 = tmp_347*tmp_79 + tmp_348*tmp_72 + tmp_349*tmp_66;
      real_t tmp_351 = tmp_347*tmp_77 + tmp_348*tmp_70 + tmp_349*tmp_64;
      real_t tmp_352 = tmp_347*tmp_74 + tmp_348*tmp_68 + tmp_349*tmp_51;
      real_t tmp_353 = -tmp_350 - tmp_351 - tmp_352 + 1;
      real_t tmp_354 = tmp_105*tmp_346;
      real_t tmp_355 = 0.020848748529055869*tmp_107;
      real_t tmp_356 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_357 = tmp_15*(tmp_20 + tmp_356);
      real_t tmp_358 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_359 = tmp_15*(tmp_27 + tmp_358);
      real_t tmp_360 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_361 = tmp_15*(tmp_34 + tmp_360);
      real_t tmp_362 = tmp_22*tmp_359 + tmp_29*tmp_361 + tmp_357*tmp_4;
      real_t tmp_363 = tmp_357*tmp_37 + tmp_359*tmp_38 + tmp_361*tmp_39;
      real_t tmp_364 = tmp_357*tmp_41 + tmp_359*tmp_42 + tmp_361*tmp_43;
      real_t tmp_365 = -tmp_362 - tmp_363 - tmp_364 + 1;
      real_t tmp_366 = tmp_61*(tmp_356 + tmp_94);
      real_t tmp_367 = tmp_61*(tmp_358 + tmp_96);
      real_t tmp_368 = tmp_61*(tmp_360 + tmp_98);
      real_t tmp_369 = tmp_366*tmp_79 + tmp_367*tmp_72 + tmp_368*tmp_66;
      real_t tmp_370 = tmp_366*tmp_77 + tmp_367*tmp_70 + tmp_368*tmp_64;
      real_t tmp_371 = tmp_366*tmp_74 + tmp_367*tmp_68 + tmp_368*tmp_51;
      real_t tmp_372 = -tmp_369 - tmp_370 - tmp_371 + 1;
      real_t tmp_373 = tmp_105*tmp_365;
      real_t tmp_374 = 0.0068572537431980923*tmp_107;
      real_t tmp_375 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_376 = tmp_15*(tmp_20 + tmp_375);
      real_t tmp_377 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_378 = tmp_15*(tmp_27 + tmp_377);
      real_t tmp_379 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_380 = tmp_15*(tmp_34 + tmp_379);
      real_t tmp_381 = tmp_22*tmp_378 + tmp_29*tmp_380 + tmp_376*tmp_4;
      real_t tmp_382 = tmp_37*tmp_376 + tmp_378*tmp_38 + tmp_380*tmp_39;
      real_t tmp_383 = tmp_376*tmp_41 + tmp_378*tmp_42 + tmp_380*tmp_43;
      real_t tmp_384 = -tmp_381 - tmp_382 - tmp_383 + 1;
      real_t tmp_385 = tmp_61*(tmp_375 + tmp_94);
      real_t tmp_386 = tmp_61*(tmp_377 + tmp_96);
      real_t tmp_387 = tmp_61*(tmp_379 + tmp_98);
      real_t tmp_388 = tmp_385*tmp_79 + tmp_386*tmp_72 + tmp_387*tmp_66;
      real_t tmp_389 = tmp_385*tmp_77 + tmp_386*tmp_70 + tmp_387*tmp_64;
      real_t tmp_390 = tmp_385*tmp_74 + tmp_386*tmp_68 + tmp_387*tmp_51;
      real_t tmp_391 = -tmp_388 - tmp_389 - tmp_390 + 1;
      real_t tmp_392 = tmp_105*tmp_384;
      real_t tmp_393 = 0.037198804536718075*tmp_107;
      real_t tmp_394 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_395 = tmp_15*(tmp_20 + tmp_394);
      real_t tmp_396 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_397 = tmp_15*(tmp_27 + tmp_396);
      real_t tmp_398 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_399 = tmp_15*(tmp_34 + tmp_398);
      real_t tmp_400 = tmp_22*tmp_397 + tmp_29*tmp_399 + tmp_395*tmp_4;
      real_t tmp_401 = tmp_37*tmp_395 + tmp_38*tmp_397 + tmp_39*tmp_399;
      real_t tmp_402 = tmp_395*tmp_41 + tmp_397*tmp_42 + tmp_399*tmp_43;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_61*(tmp_394 + tmp_94);
      real_t tmp_405 = tmp_61*(tmp_396 + tmp_96);
      real_t tmp_406 = tmp_61*(tmp_398 + tmp_98);
      real_t tmp_407 = tmp_404*tmp_79 + tmp_405*tmp_72 + tmp_406*tmp_66;
      real_t tmp_408 = tmp_404*tmp_77 + tmp_405*tmp_70 + tmp_406*tmp_64;
      real_t tmp_409 = tmp_404*tmp_74 + tmp_405*tmp_68 + tmp_406*tmp_51;
      real_t tmp_410 = -tmp_407 - tmp_408 - tmp_409 + 1;
      real_t tmp_411 = tmp_105*tmp_403;
      real_t tmp_412 = 0.042507265838595799*tmp_107;
      real_t tmp_413 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_414 = tmp_15*(tmp_20 + tmp_413);
      real_t tmp_415 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_416 = tmp_15*(tmp_27 + tmp_415);
      real_t tmp_417 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_418 = tmp_15*(tmp_34 + tmp_417);
      real_t tmp_419 = tmp_22*tmp_416 + tmp_29*tmp_418 + tmp_4*tmp_414;
      real_t tmp_420 = tmp_37*tmp_414 + tmp_38*tmp_416 + tmp_39*tmp_418;
      real_t tmp_421 = tmp_41*tmp_414 + tmp_416*tmp_42 + tmp_418*tmp_43;
      real_t tmp_422 = -tmp_419 - tmp_420 - tmp_421 + 1;
      real_t tmp_423 = tmp_61*(tmp_413 + tmp_94);
      real_t tmp_424 = tmp_61*(tmp_415 + tmp_96);
      real_t tmp_425 = tmp_61*(tmp_417 + tmp_98);
      real_t tmp_426 = tmp_423*tmp_79 + tmp_424*tmp_72 + tmp_425*tmp_66;
      real_t tmp_427 = tmp_423*tmp_77 + tmp_424*tmp_70 + tmp_425*tmp_64;
      real_t tmp_428 = tmp_423*tmp_74 + tmp_424*tmp_68 + tmp_425*tmp_51;
      real_t tmp_429 = -tmp_426 - tmp_427 - tmp_428 + 1;
      real_t tmp_430 = tmp_105*tmp_422;
      real_t tmp_431 = 0.0068572537431980923*tmp_107;
      real_t tmp_432 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_433 = tmp_15*(tmp_20 + tmp_432);
      real_t tmp_434 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_435 = tmp_15*(tmp_27 + tmp_434);
      real_t tmp_436 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_437 = tmp_15*(tmp_34 + tmp_436);
      real_t tmp_438 = tmp_22*tmp_435 + tmp_29*tmp_437 + tmp_4*tmp_433;
      real_t tmp_439 = tmp_37*tmp_433 + tmp_38*tmp_435 + tmp_39*tmp_437;
      real_t tmp_440 = tmp_41*tmp_433 + tmp_42*tmp_435 + tmp_43*tmp_437;
      real_t tmp_441 = -tmp_438 - tmp_439 - tmp_440 + 1;
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_94);
      real_t tmp_443 = tmp_61*(tmp_434 + tmp_96);
      real_t tmp_444 = tmp_61*(tmp_436 + tmp_98);
      real_t tmp_445 = tmp_442*tmp_79 + tmp_443*tmp_72 + tmp_444*tmp_66;
      real_t tmp_446 = tmp_442*tmp_77 + tmp_443*tmp_70 + tmp_444*tmp_64;
      real_t tmp_447 = tmp_442*tmp_74 + tmp_443*tmp_68 + tmp_444*tmp_51;
      real_t tmp_448 = -tmp_445 - tmp_446 - tmp_447 + 1;
      real_t tmp_449 = tmp_105*tmp_441;
      real_t tmp_450 = 0.037198804536718075*tmp_107;
      real_t tmp_451 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_452 = tmp_15*(tmp_20 + tmp_451);
      real_t tmp_453 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_454 = tmp_15*(tmp_27 + tmp_453);
      real_t tmp_455 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_456 = tmp_15*(tmp_34 + tmp_455);
      real_t tmp_457 = tmp_22*tmp_454 + tmp_29*tmp_456 + tmp_4*tmp_452;
      real_t tmp_458 = tmp_37*tmp_452 + tmp_38*tmp_454 + tmp_39*tmp_456;
      real_t tmp_459 = tmp_41*tmp_452 + tmp_42*tmp_454 + tmp_43*tmp_456;
      real_t tmp_460 = -tmp_457 - tmp_458 - tmp_459 + 1;
      real_t tmp_461 = tmp_61*(tmp_451 + tmp_94);
      real_t tmp_462 = tmp_61*(tmp_453 + tmp_96);
      real_t tmp_463 = tmp_61*(tmp_455 + tmp_98);
      real_t tmp_464 = tmp_461*tmp_79 + tmp_462*tmp_72 + tmp_463*tmp_66;
      real_t tmp_465 = tmp_461*tmp_77 + tmp_462*tmp_70 + tmp_463*tmp_64;
      real_t tmp_466 = tmp_461*tmp_74 + tmp_462*tmp_68 + tmp_463*tmp_51;
      real_t tmp_467 = -tmp_464 - tmp_465 - tmp_466 + 1;
      real_t tmp_468 = tmp_105*tmp_460;
      real_t tmp_469 = 0.042507265838595799*tmp_107;
      real_t tmp_470 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_471 = tmp_15*(tmp_20 + tmp_470);
      real_t tmp_472 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_473 = tmp_15*(tmp_27 + tmp_472);
      real_t tmp_474 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_475 = tmp_15*(tmp_34 + tmp_474);
      real_t tmp_476 = tmp_22*tmp_473 + tmp_29*tmp_475 + tmp_4*tmp_471;
      real_t tmp_477 = tmp_37*tmp_471 + tmp_38*tmp_473 + tmp_39*tmp_475;
      real_t tmp_478 = tmp_41*tmp_471 + tmp_42*tmp_473 + tmp_43*tmp_475;
      real_t tmp_479 = -tmp_476 - tmp_477 - tmp_478 + 1;
      real_t tmp_480 = tmp_61*(tmp_470 + tmp_94);
      real_t tmp_481 = tmp_61*(tmp_472 + tmp_96);
      real_t tmp_482 = tmp_61*(tmp_474 + tmp_98);
      real_t tmp_483 = tmp_480*tmp_79 + tmp_481*tmp_72 + tmp_482*tmp_66;
      real_t tmp_484 = tmp_480*tmp_77 + tmp_481*tmp_70 + tmp_482*tmp_64;
      real_t tmp_485 = tmp_480*tmp_74 + tmp_481*tmp_68 + tmp_482*tmp_51;
      real_t tmp_486 = -tmp_483 - tmp_484 - tmp_485 + 1;
      real_t tmp_487 = tmp_105*tmp_479;
      real_t tmp_488 = 0.019202922745021479*tmp_107;
      real_t tmp_489 = 1.0*p_affine_13_0*tmp_67 + 1.0*p_affine_13_1*tmp_73 + 1.0*p_affine_13_2*tmp_80;
      real_t tmp_490 = 1.0*p_affine_13_0*tmp_65 + 1.0*p_affine_13_1*tmp_71 + 1.0*p_affine_13_2*tmp_78;
      real_t tmp_491 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_69 + 1.0*p_affine_13_2*tmp_76;
      real_t tmp_492 = p_affine_13_0*tmp_85 + p_affine_13_1*tmp_88 + p_affine_13_2*tmp_92;
      real_t tmp_493 = tmp_105*tmp_36;
      real_t tmp_494 = tmp_105*tmp_115;
      real_t tmp_495 = tmp_105*tmp_134;
      real_t tmp_496 = tmp_105*tmp_153;
      real_t tmp_497 = tmp_105*tmp_172;
      real_t tmp_498 = tmp_105*tmp_191;
      real_t tmp_499 = tmp_105*tmp_210;
      real_t tmp_500 = tmp_105*tmp_229;
      real_t tmp_501 = tmp_105*tmp_248;
      real_t tmp_502 = tmp_105*tmp_267;
      real_t tmp_503 = tmp_105*tmp_286;
      real_t tmp_504 = tmp_105*tmp_305;
      real_t tmp_505 = tmp_105*tmp_324;
      real_t tmp_506 = tmp_105*tmp_343;
      real_t tmp_507 = tmp_105*tmp_362;
      real_t tmp_508 = tmp_105*tmp_381;
      real_t tmp_509 = tmp_105*tmp_400;
      real_t tmp_510 = tmp_105*tmp_419;
      real_t tmp_511 = tmp_105*tmp_438;
      real_t tmp_512 = tmp_105*tmp_457;
      real_t tmp_513 = tmp_105*tmp_476;
      real_t tmp_514 = p_affine_13_0*tmp_84 + p_affine_13_1*tmp_87 + p_affine_13_2*tmp_91;
      real_t tmp_515 = tmp_105*tmp_40;
      real_t tmp_516 = tmp_105*tmp_116;
      real_t tmp_517 = tmp_105*tmp_135;
      real_t tmp_518 = tmp_105*tmp_154;
      real_t tmp_519 = tmp_105*tmp_173;
      real_t tmp_520 = tmp_105*tmp_192;
      real_t tmp_521 = tmp_105*tmp_211;
      real_t tmp_522 = tmp_105*tmp_230;
      real_t tmp_523 = tmp_105*tmp_249;
      real_t tmp_524 = tmp_105*tmp_268;
      real_t tmp_525 = tmp_105*tmp_287;
      real_t tmp_526 = tmp_105*tmp_306;
      real_t tmp_527 = tmp_105*tmp_325;
      real_t tmp_528 = tmp_105*tmp_344;
      real_t tmp_529 = tmp_105*tmp_363;
      real_t tmp_530 = tmp_105*tmp_382;
      real_t tmp_531 = tmp_105*tmp_401;
      real_t tmp_532 = tmp_105*tmp_420;
      real_t tmp_533 = tmp_105*tmp_439;
      real_t tmp_534 = tmp_105*tmp_458;
      real_t tmp_535 = tmp_105*tmp_477;
      real_t tmp_536 = p_affine_13_0*tmp_83 + p_affine_13_1*tmp_86 + p_affine_13_2*tmp_90;
      real_t tmp_537 = tmp_105*tmp_44;
      real_t tmp_538 = tmp_105*tmp_117;
      real_t tmp_539 = tmp_105*tmp_136;
      real_t tmp_540 = tmp_105*tmp_155;
      real_t tmp_541 = tmp_105*tmp_174;
      real_t tmp_542 = tmp_105*tmp_193;
      real_t tmp_543 = tmp_105*tmp_212;
      real_t tmp_544 = tmp_105*tmp_231;
      real_t tmp_545 = tmp_105*tmp_250;
      real_t tmp_546 = tmp_105*tmp_269;
      real_t tmp_547 = tmp_105*tmp_288;
      real_t tmp_548 = tmp_105*tmp_307;
      real_t tmp_549 = tmp_105*tmp_326;
      real_t tmp_550 = tmp_105*tmp_345;
      real_t tmp_551 = tmp_105*tmp_364;
      real_t tmp_552 = tmp_105*tmp_383;
      real_t tmp_553 = tmp_105*tmp_402;
      real_t tmp_554 = tmp_105*tmp_421;
      real_t tmp_555 = tmp_105*tmp_440;
      real_t tmp_556 = tmp_105*tmp_459;
      real_t tmp_557 = tmp_105*tmp_478;
      real_t a_0_0 = tmp_108*(-tmp_103*tmp_106 + tmp_103*tmp_93 - tmp_45*tmp_81) + tmp_127*(-tmp_118*tmp_81 - tmp_125*tmp_126 + tmp_125*tmp_93) + tmp_146*(-tmp_137*tmp_81 - tmp_144*tmp_145 + tmp_144*tmp_93) + tmp_165*(-tmp_156*tmp_81 - tmp_163*tmp_164 + tmp_163*tmp_93) + tmp_184*(-tmp_175*tmp_81 - tmp_182*tmp_183 + tmp_182*tmp_93) + tmp_203*(-tmp_194*tmp_81 - tmp_201*tmp_202 + tmp_201*tmp_93) + tmp_222*(-tmp_213*tmp_81 - tmp_220*tmp_221 + tmp_220*tmp_93) + tmp_241*(-tmp_232*tmp_81 - tmp_239*tmp_240 + tmp_239*tmp_93) + tmp_260*(-tmp_251*tmp_81 - tmp_258*tmp_259 + tmp_258*tmp_93) + tmp_279*(-tmp_270*tmp_81 - tmp_277*tmp_278 + tmp_277*tmp_93) + tmp_298*(-tmp_289*tmp_81 - tmp_296*tmp_297 + tmp_296*tmp_93) + tmp_317*(-tmp_308*tmp_81 - tmp_315*tmp_316 + tmp_315*tmp_93) + tmp_336*(-tmp_327*tmp_81 - tmp_334*tmp_335 + tmp_334*tmp_93) + tmp_355*(-tmp_346*tmp_81 - tmp_353*tmp_354 + tmp_353*tmp_93) + tmp_374*(-tmp_365*tmp_81 - tmp_372*tmp_373 + tmp_372*tmp_93) + tmp_393*(-tmp_384*tmp_81 - tmp_391*tmp_392 + tmp_391*tmp_93) + tmp_412*(-tmp_403*tmp_81 - tmp_410*tmp_411 + tmp_410*tmp_93) + tmp_431*(-tmp_422*tmp_81 - tmp_429*tmp_430 + tmp_429*tmp_93) + tmp_450*(-tmp_441*tmp_81 - tmp_448*tmp_449 + tmp_448*tmp_93) + tmp_469*(-tmp_460*tmp_81 - tmp_467*tmp_468 + tmp_467*tmp_93) + tmp_488*(-tmp_479*tmp_81 - tmp_486*tmp_487 + tmp_486*tmp_93);
      real_t a_0_1 = tmp_108*(-tmp_100*tmp_106 + tmp_100*tmp_93 - tmp_45*tmp_489) + tmp_127*(-tmp_118*tmp_489 - tmp_122*tmp_126 + tmp_122*tmp_93) + tmp_146*(-tmp_137*tmp_489 - tmp_141*tmp_145 + tmp_141*tmp_93) + tmp_165*(-tmp_156*tmp_489 - tmp_160*tmp_164 + tmp_160*tmp_93) + tmp_184*(-tmp_175*tmp_489 - tmp_179*tmp_183 + tmp_179*tmp_93) + tmp_203*(-tmp_194*tmp_489 - tmp_198*tmp_202 + tmp_198*tmp_93) + tmp_222*(-tmp_213*tmp_489 - tmp_217*tmp_221 + tmp_217*tmp_93) + tmp_241*(-tmp_232*tmp_489 - tmp_236*tmp_240 + tmp_236*tmp_93) + tmp_260*(-tmp_251*tmp_489 - tmp_255*tmp_259 + tmp_255*tmp_93) + tmp_279*(-tmp_270*tmp_489 - tmp_274*tmp_278 + tmp_274*tmp_93) + tmp_298*(-tmp_289*tmp_489 - tmp_293*tmp_297 + tmp_293*tmp_93) + tmp_317*(-tmp_308*tmp_489 - tmp_312*tmp_316 + tmp_312*tmp_93) + tmp_336*(-tmp_327*tmp_489 - tmp_331*tmp_335 + tmp_331*tmp_93) + tmp_355*(-tmp_346*tmp_489 - tmp_350*tmp_354 + tmp_350*tmp_93) + tmp_374*(-tmp_365*tmp_489 - tmp_369*tmp_373 + tmp_369*tmp_93) + tmp_393*(-tmp_384*tmp_489 - tmp_388*tmp_392 + tmp_388*tmp_93) + tmp_412*(-tmp_403*tmp_489 - tmp_407*tmp_411 + tmp_407*tmp_93) + tmp_431*(-tmp_422*tmp_489 - tmp_426*tmp_430 + tmp_426*tmp_93) + tmp_450*(-tmp_441*tmp_489 - tmp_445*tmp_449 + tmp_445*tmp_93) + tmp_469*(-tmp_460*tmp_489 - tmp_464*tmp_468 + tmp_464*tmp_93) + tmp_488*(-tmp_479*tmp_489 - tmp_483*tmp_487 + tmp_483*tmp_93);
      real_t a_0_2 = tmp_108*(-tmp_101*tmp_106 + tmp_101*tmp_93 - tmp_45*tmp_490) + tmp_127*(-tmp_118*tmp_490 - tmp_123*tmp_126 + tmp_123*tmp_93) + tmp_146*(-tmp_137*tmp_490 - tmp_142*tmp_145 + tmp_142*tmp_93) + tmp_165*(-tmp_156*tmp_490 - tmp_161*tmp_164 + tmp_161*tmp_93) + tmp_184*(-tmp_175*tmp_490 - tmp_180*tmp_183 + tmp_180*tmp_93) + tmp_203*(-tmp_194*tmp_490 - tmp_199*tmp_202 + tmp_199*tmp_93) + tmp_222*(-tmp_213*tmp_490 - tmp_218*tmp_221 + tmp_218*tmp_93) + tmp_241*(-tmp_232*tmp_490 - tmp_237*tmp_240 + tmp_237*tmp_93) + tmp_260*(-tmp_251*tmp_490 - tmp_256*tmp_259 + tmp_256*tmp_93) + tmp_279*(-tmp_270*tmp_490 - tmp_275*tmp_278 + tmp_275*tmp_93) + tmp_298*(-tmp_289*tmp_490 - tmp_294*tmp_297 + tmp_294*tmp_93) + tmp_317*(-tmp_308*tmp_490 - tmp_313*tmp_316 + tmp_313*tmp_93) + tmp_336*(-tmp_327*tmp_490 - tmp_332*tmp_335 + tmp_332*tmp_93) + tmp_355*(-tmp_346*tmp_490 - tmp_351*tmp_354 + tmp_351*tmp_93) + tmp_374*(-tmp_365*tmp_490 - tmp_370*tmp_373 + tmp_370*tmp_93) + tmp_393*(-tmp_384*tmp_490 - tmp_389*tmp_392 + tmp_389*tmp_93) + tmp_412*(-tmp_403*tmp_490 - tmp_408*tmp_411 + tmp_408*tmp_93) + tmp_431*(-tmp_422*tmp_490 - tmp_427*tmp_430 + tmp_427*tmp_93) + tmp_450*(-tmp_441*tmp_490 - tmp_446*tmp_449 + tmp_446*tmp_93) + tmp_469*(-tmp_460*tmp_490 - tmp_465*tmp_468 + tmp_465*tmp_93) + tmp_488*(-tmp_479*tmp_490 - tmp_484*tmp_487 + tmp_484*tmp_93);
      real_t a_0_3 = tmp_108*(-tmp_102*tmp_106 + tmp_102*tmp_93 - tmp_45*tmp_491) + tmp_127*(-tmp_118*tmp_491 - tmp_124*tmp_126 + tmp_124*tmp_93) + tmp_146*(-tmp_137*tmp_491 - tmp_143*tmp_145 + tmp_143*tmp_93) + tmp_165*(-tmp_156*tmp_491 - tmp_162*tmp_164 + tmp_162*tmp_93) + tmp_184*(-tmp_175*tmp_491 - tmp_181*tmp_183 + tmp_181*tmp_93) + tmp_203*(-tmp_194*tmp_491 - tmp_200*tmp_202 + tmp_200*tmp_93) + tmp_222*(-tmp_213*tmp_491 - tmp_219*tmp_221 + tmp_219*tmp_93) + tmp_241*(-tmp_232*tmp_491 - tmp_238*tmp_240 + tmp_238*tmp_93) + tmp_260*(-tmp_251*tmp_491 - tmp_257*tmp_259 + tmp_257*tmp_93) + tmp_279*(-tmp_270*tmp_491 - tmp_276*tmp_278 + tmp_276*tmp_93) + tmp_298*(-tmp_289*tmp_491 - tmp_295*tmp_297 + tmp_295*tmp_93) + tmp_317*(-tmp_308*tmp_491 - tmp_314*tmp_316 + tmp_314*tmp_93) + tmp_336*(-tmp_327*tmp_491 - tmp_333*tmp_335 + tmp_333*tmp_93) + tmp_355*(-tmp_346*tmp_491 - tmp_352*tmp_354 + tmp_352*tmp_93) + tmp_374*(-tmp_365*tmp_491 - tmp_371*tmp_373 + tmp_371*tmp_93) + tmp_393*(-tmp_384*tmp_491 - tmp_390*tmp_392 + tmp_390*tmp_93) + tmp_412*(-tmp_403*tmp_491 - tmp_409*tmp_411 + tmp_409*tmp_93) + tmp_431*(-tmp_422*tmp_491 - tmp_428*tmp_430 + tmp_428*tmp_93) + tmp_450*(-tmp_441*tmp_491 - tmp_447*tmp_449 + tmp_447*tmp_93) + tmp_469*(-tmp_460*tmp_491 - tmp_466*tmp_468 + tmp_466*tmp_93) + tmp_488*(-tmp_479*tmp_491 - tmp_485*tmp_487 + tmp_485*tmp_93);
      real_t a_1_0 = tmp_108*(tmp_103*tmp_492 - tmp_103*tmp_493 - tmp_36*tmp_81) + tmp_127*(-tmp_115*tmp_81 + tmp_125*tmp_492 - tmp_125*tmp_494) + tmp_146*(-tmp_134*tmp_81 + tmp_144*tmp_492 - tmp_144*tmp_495) + tmp_165*(-tmp_153*tmp_81 + tmp_163*tmp_492 - tmp_163*tmp_496) + tmp_184*(-tmp_172*tmp_81 + tmp_182*tmp_492 - tmp_182*tmp_497) + tmp_203*(-tmp_191*tmp_81 + tmp_201*tmp_492 - tmp_201*tmp_498) + tmp_222*(-tmp_210*tmp_81 + tmp_220*tmp_492 - tmp_220*tmp_499) + tmp_241*(-tmp_229*tmp_81 + tmp_239*tmp_492 - tmp_239*tmp_500) + tmp_260*(-tmp_248*tmp_81 + tmp_258*tmp_492 - tmp_258*tmp_501) + tmp_279*(-tmp_267*tmp_81 + tmp_277*tmp_492 - tmp_277*tmp_502) + tmp_298*(-tmp_286*tmp_81 + tmp_296*tmp_492 - tmp_296*tmp_503) + tmp_317*(-tmp_305*tmp_81 + tmp_315*tmp_492 - tmp_315*tmp_504) + tmp_336*(-tmp_324*tmp_81 + tmp_334*tmp_492 - tmp_334*tmp_505) + tmp_355*(-tmp_343*tmp_81 + tmp_353*tmp_492 - tmp_353*tmp_506) + tmp_374*(-tmp_362*tmp_81 + tmp_372*tmp_492 - tmp_372*tmp_507) + tmp_393*(-tmp_381*tmp_81 + tmp_391*tmp_492 - tmp_391*tmp_508) + tmp_412*(-tmp_400*tmp_81 + tmp_410*tmp_492 - tmp_410*tmp_509) + tmp_431*(-tmp_419*tmp_81 + tmp_429*tmp_492 - tmp_429*tmp_510) + tmp_450*(-tmp_438*tmp_81 + tmp_448*tmp_492 - tmp_448*tmp_511) + tmp_469*(-tmp_457*tmp_81 + tmp_467*tmp_492 - tmp_467*tmp_512) + tmp_488*(-tmp_476*tmp_81 + tmp_486*tmp_492 - tmp_486*tmp_513);
      real_t a_1_1 = tmp_108*(tmp_100*tmp_492 - tmp_100*tmp_493 - tmp_36*tmp_489) + tmp_127*(-tmp_115*tmp_489 + tmp_122*tmp_492 - tmp_122*tmp_494) + tmp_146*(-tmp_134*tmp_489 + tmp_141*tmp_492 - tmp_141*tmp_495) + tmp_165*(-tmp_153*tmp_489 + tmp_160*tmp_492 - tmp_160*tmp_496) + tmp_184*(-tmp_172*tmp_489 + tmp_179*tmp_492 - tmp_179*tmp_497) + tmp_203*(-tmp_191*tmp_489 + tmp_198*tmp_492 - tmp_198*tmp_498) + tmp_222*(-tmp_210*tmp_489 + tmp_217*tmp_492 - tmp_217*tmp_499) + tmp_241*(-tmp_229*tmp_489 + tmp_236*tmp_492 - tmp_236*tmp_500) + tmp_260*(-tmp_248*tmp_489 + tmp_255*tmp_492 - tmp_255*tmp_501) + tmp_279*(-tmp_267*tmp_489 + tmp_274*tmp_492 - tmp_274*tmp_502) + tmp_298*(-tmp_286*tmp_489 + tmp_293*tmp_492 - tmp_293*tmp_503) + tmp_317*(-tmp_305*tmp_489 + tmp_312*tmp_492 - tmp_312*tmp_504) + tmp_336*(-tmp_324*tmp_489 + tmp_331*tmp_492 - tmp_331*tmp_505) + tmp_355*(-tmp_343*tmp_489 + tmp_350*tmp_492 - tmp_350*tmp_506) + tmp_374*(-tmp_362*tmp_489 + tmp_369*tmp_492 - tmp_369*tmp_507) + tmp_393*(-tmp_381*tmp_489 + tmp_388*tmp_492 - tmp_388*tmp_508) + tmp_412*(-tmp_400*tmp_489 + tmp_407*tmp_492 - tmp_407*tmp_509) + tmp_431*(-tmp_419*tmp_489 + tmp_426*tmp_492 - tmp_426*tmp_510) + tmp_450*(-tmp_438*tmp_489 + tmp_445*tmp_492 - tmp_445*tmp_511) + tmp_469*(-tmp_457*tmp_489 + tmp_464*tmp_492 - tmp_464*tmp_512) + tmp_488*(-tmp_476*tmp_489 + tmp_483*tmp_492 - tmp_483*tmp_513);
      real_t a_1_2 = tmp_108*(tmp_101*tmp_492 - tmp_101*tmp_493 - tmp_36*tmp_490) + tmp_127*(-tmp_115*tmp_490 + tmp_123*tmp_492 - tmp_123*tmp_494) + tmp_146*(-tmp_134*tmp_490 + tmp_142*tmp_492 - tmp_142*tmp_495) + tmp_165*(-tmp_153*tmp_490 + tmp_161*tmp_492 - tmp_161*tmp_496) + tmp_184*(-tmp_172*tmp_490 + tmp_180*tmp_492 - tmp_180*tmp_497) + tmp_203*(-tmp_191*tmp_490 + tmp_199*tmp_492 - tmp_199*tmp_498) + tmp_222*(-tmp_210*tmp_490 + tmp_218*tmp_492 - tmp_218*tmp_499) + tmp_241*(-tmp_229*tmp_490 + tmp_237*tmp_492 - tmp_237*tmp_500) + tmp_260*(-tmp_248*tmp_490 + tmp_256*tmp_492 - tmp_256*tmp_501) + tmp_279*(-tmp_267*tmp_490 + tmp_275*tmp_492 - tmp_275*tmp_502) + tmp_298*(-tmp_286*tmp_490 + tmp_294*tmp_492 - tmp_294*tmp_503) + tmp_317*(-tmp_305*tmp_490 + tmp_313*tmp_492 - tmp_313*tmp_504) + tmp_336*(-tmp_324*tmp_490 + tmp_332*tmp_492 - tmp_332*tmp_505) + tmp_355*(-tmp_343*tmp_490 + tmp_351*tmp_492 - tmp_351*tmp_506) + tmp_374*(-tmp_362*tmp_490 + tmp_370*tmp_492 - tmp_370*tmp_507) + tmp_393*(-tmp_381*tmp_490 + tmp_389*tmp_492 - tmp_389*tmp_508) + tmp_412*(-tmp_400*tmp_490 + tmp_408*tmp_492 - tmp_408*tmp_509) + tmp_431*(-tmp_419*tmp_490 + tmp_427*tmp_492 - tmp_427*tmp_510) + tmp_450*(-tmp_438*tmp_490 + tmp_446*tmp_492 - tmp_446*tmp_511) + tmp_469*(-tmp_457*tmp_490 + tmp_465*tmp_492 - tmp_465*tmp_512) + tmp_488*(-tmp_476*tmp_490 + tmp_484*tmp_492 - tmp_484*tmp_513);
      real_t a_1_3 = tmp_108*(tmp_102*tmp_492 - tmp_102*tmp_493 - tmp_36*tmp_491) + tmp_127*(-tmp_115*tmp_491 + tmp_124*tmp_492 - tmp_124*tmp_494) + tmp_146*(-tmp_134*tmp_491 + tmp_143*tmp_492 - tmp_143*tmp_495) + tmp_165*(-tmp_153*tmp_491 + tmp_162*tmp_492 - tmp_162*tmp_496) + tmp_184*(-tmp_172*tmp_491 + tmp_181*tmp_492 - tmp_181*tmp_497) + tmp_203*(-tmp_191*tmp_491 + tmp_200*tmp_492 - tmp_200*tmp_498) + tmp_222*(-tmp_210*tmp_491 + tmp_219*tmp_492 - tmp_219*tmp_499) + tmp_241*(-tmp_229*tmp_491 + tmp_238*tmp_492 - tmp_238*tmp_500) + tmp_260*(-tmp_248*tmp_491 + tmp_257*tmp_492 - tmp_257*tmp_501) + tmp_279*(-tmp_267*tmp_491 + tmp_276*tmp_492 - tmp_276*tmp_502) + tmp_298*(-tmp_286*tmp_491 + tmp_295*tmp_492 - tmp_295*tmp_503) + tmp_317*(-tmp_305*tmp_491 + tmp_314*tmp_492 - tmp_314*tmp_504) + tmp_336*(-tmp_324*tmp_491 + tmp_333*tmp_492 - tmp_333*tmp_505) + tmp_355*(-tmp_343*tmp_491 + tmp_352*tmp_492 - tmp_352*tmp_506) + tmp_374*(-tmp_362*tmp_491 + tmp_371*tmp_492 - tmp_371*tmp_507) + tmp_393*(-tmp_381*tmp_491 + tmp_390*tmp_492 - tmp_390*tmp_508) + tmp_412*(-tmp_400*tmp_491 + tmp_409*tmp_492 - tmp_409*tmp_509) + tmp_431*(-tmp_419*tmp_491 + tmp_428*tmp_492 - tmp_428*tmp_510) + tmp_450*(-tmp_438*tmp_491 + tmp_447*tmp_492 - tmp_447*tmp_511) + tmp_469*(-tmp_457*tmp_491 + tmp_466*tmp_492 - tmp_466*tmp_512) + tmp_488*(-tmp_476*tmp_491 + tmp_485*tmp_492 - tmp_485*tmp_513);
      real_t a_2_0 = tmp_108*(tmp_103*tmp_514 - tmp_103*tmp_515 - tmp_40*tmp_81) + tmp_127*(-tmp_116*tmp_81 + tmp_125*tmp_514 - tmp_125*tmp_516) + tmp_146*(-tmp_135*tmp_81 + tmp_144*tmp_514 - tmp_144*tmp_517) + tmp_165*(-tmp_154*tmp_81 + tmp_163*tmp_514 - tmp_163*tmp_518) + tmp_184*(-tmp_173*tmp_81 + tmp_182*tmp_514 - tmp_182*tmp_519) + tmp_203*(-tmp_192*tmp_81 + tmp_201*tmp_514 - tmp_201*tmp_520) + tmp_222*(-tmp_211*tmp_81 + tmp_220*tmp_514 - tmp_220*tmp_521) + tmp_241*(-tmp_230*tmp_81 + tmp_239*tmp_514 - tmp_239*tmp_522) + tmp_260*(-tmp_249*tmp_81 + tmp_258*tmp_514 - tmp_258*tmp_523) + tmp_279*(-tmp_268*tmp_81 + tmp_277*tmp_514 - tmp_277*tmp_524) + tmp_298*(-tmp_287*tmp_81 + tmp_296*tmp_514 - tmp_296*tmp_525) + tmp_317*(-tmp_306*tmp_81 + tmp_315*tmp_514 - tmp_315*tmp_526) + tmp_336*(-tmp_325*tmp_81 + tmp_334*tmp_514 - tmp_334*tmp_527) + tmp_355*(-tmp_344*tmp_81 + tmp_353*tmp_514 - tmp_353*tmp_528) + tmp_374*(-tmp_363*tmp_81 + tmp_372*tmp_514 - tmp_372*tmp_529) + tmp_393*(-tmp_382*tmp_81 + tmp_391*tmp_514 - tmp_391*tmp_530) + tmp_412*(-tmp_401*tmp_81 + tmp_410*tmp_514 - tmp_410*tmp_531) + tmp_431*(-tmp_420*tmp_81 + tmp_429*tmp_514 - tmp_429*tmp_532) + tmp_450*(-tmp_439*tmp_81 + tmp_448*tmp_514 - tmp_448*tmp_533) + tmp_469*(-tmp_458*tmp_81 + tmp_467*tmp_514 - tmp_467*tmp_534) + tmp_488*(-tmp_477*tmp_81 + tmp_486*tmp_514 - tmp_486*tmp_535);
      real_t a_2_1 = tmp_108*(tmp_100*tmp_514 - tmp_100*tmp_515 - tmp_40*tmp_489) + tmp_127*(-tmp_116*tmp_489 + tmp_122*tmp_514 - tmp_122*tmp_516) + tmp_146*(-tmp_135*tmp_489 + tmp_141*tmp_514 - tmp_141*tmp_517) + tmp_165*(-tmp_154*tmp_489 + tmp_160*tmp_514 - tmp_160*tmp_518) + tmp_184*(-tmp_173*tmp_489 + tmp_179*tmp_514 - tmp_179*tmp_519) + tmp_203*(-tmp_192*tmp_489 + tmp_198*tmp_514 - tmp_198*tmp_520) + tmp_222*(-tmp_211*tmp_489 + tmp_217*tmp_514 - tmp_217*tmp_521) + tmp_241*(-tmp_230*tmp_489 + tmp_236*tmp_514 - tmp_236*tmp_522) + tmp_260*(-tmp_249*tmp_489 + tmp_255*tmp_514 - tmp_255*tmp_523) + tmp_279*(-tmp_268*tmp_489 + tmp_274*tmp_514 - tmp_274*tmp_524) + tmp_298*(-tmp_287*tmp_489 + tmp_293*tmp_514 - tmp_293*tmp_525) + tmp_317*(-tmp_306*tmp_489 + tmp_312*tmp_514 - tmp_312*tmp_526) + tmp_336*(-tmp_325*tmp_489 + tmp_331*tmp_514 - tmp_331*tmp_527) + tmp_355*(-tmp_344*tmp_489 + tmp_350*tmp_514 - tmp_350*tmp_528) + tmp_374*(-tmp_363*tmp_489 + tmp_369*tmp_514 - tmp_369*tmp_529) + tmp_393*(-tmp_382*tmp_489 + tmp_388*tmp_514 - tmp_388*tmp_530) + tmp_412*(-tmp_401*tmp_489 + tmp_407*tmp_514 - tmp_407*tmp_531) + tmp_431*(-tmp_420*tmp_489 + tmp_426*tmp_514 - tmp_426*tmp_532) + tmp_450*(-tmp_439*tmp_489 + tmp_445*tmp_514 - tmp_445*tmp_533) + tmp_469*(-tmp_458*tmp_489 + tmp_464*tmp_514 - tmp_464*tmp_534) + tmp_488*(-tmp_477*tmp_489 + tmp_483*tmp_514 - tmp_483*tmp_535);
      real_t a_2_2 = tmp_108*(tmp_101*tmp_514 - tmp_101*tmp_515 - tmp_40*tmp_490) + tmp_127*(-tmp_116*tmp_490 + tmp_123*tmp_514 - tmp_123*tmp_516) + tmp_146*(-tmp_135*tmp_490 + tmp_142*tmp_514 - tmp_142*tmp_517) + tmp_165*(-tmp_154*tmp_490 + tmp_161*tmp_514 - tmp_161*tmp_518) + tmp_184*(-tmp_173*tmp_490 + tmp_180*tmp_514 - tmp_180*tmp_519) + tmp_203*(-tmp_192*tmp_490 + tmp_199*tmp_514 - tmp_199*tmp_520) + tmp_222*(-tmp_211*tmp_490 + tmp_218*tmp_514 - tmp_218*tmp_521) + tmp_241*(-tmp_230*tmp_490 + tmp_237*tmp_514 - tmp_237*tmp_522) + tmp_260*(-tmp_249*tmp_490 + tmp_256*tmp_514 - tmp_256*tmp_523) + tmp_279*(-tmp_268*tmp_490 + tmp_275*tmp_514 - tmp_275*tmp_524) + tmp_298*(-tmp_287*tmp_490 + tmp_294*tmp_514 - tmp_294*tmp_525) + tmp_317*(-tmp_306*tmp_490 + tmp_313*tmp_514 - tmp_313*tmp_526) + tmp_336*(-tmp_325*tmp_490 + tmp_332*tmp_514 - tmp_332*tmp_527) + tmp_355*(-tmp_344*tmp_490 + tmp_351*tmp_514 - tmp_351*tmp_528) + tmp_374*(-tmp_363*tmp_490 + tmp_370*tmp_514 - tmp_370*tmp_529) + tmp_393*(-tmp_382*tmp_490 + tmp_389*tmp_514 - tmp_389*tmp_530) + tmp_412*(-tmp_401*tmp_490 + tmp_408*tmp_514 - tmp_408*tmp_531) + tmp_431*(-tmp_420*tmp_490 + tmp_427*tmp_514 - tmp_427*tmp_532) + tmp_450*(-tmp_439*tmp_490 + tmp_446*tmp_514 - tmp_446*tmp_533) + tmp_469*(-tmp_458*tmp_490 + tmp_465*tmp_514 - tmp_465*tmp_534) + tmp_488*(-tmp_477*tmp_490 + tmp_484*tmp_514 - tmp_484*tmp_535);
      real_t a_2_3 = tmp_108*(tmp_102*tmp_514 - tmp_102*tmp_515 - tmp_40*tmp_491) + tmp_127*(-tmp_116*tmp_491 + tmp_124*tmp_514 - tmp_124*tmp_516) + tmp_146*(-tmp_135*tmp_491 + tmp_143*tmp_514 - tmp_143*tmp_517) + tmp_165*(-tmp_154*tmp_491 + tmp_162*tmp_514 - tmp_162*tmp_518) + tmp_184*(-tmp_173*tmp_491 + tmp_181*tmp_514 - tmp_181*tmp_519) + tmp_203*(-tmp_192*tmp_491 + tmp_200*tmp_514 - tmp_200*tmp_520) + tmp_222*(-tmp_211*tmp_491 + tmp_219*tmp_514 - tmp_219*tmp_521) + tmp_241*(-tmp_230*tmp_491 + tmp_238*tmp_514 - tmp_238*tmp_522) + tmp_260*(-tmp_249*tmp_491 + tmp_257*tmp_514 - tmp_257*tmp_523) + tmp_279*(-tmp_268*tmp_491 + tmp_276*tmp_514 - tmp_276*tmp_524) + tmp_298*(-tmp_287*tmp_491 + tmp_295*tmp_514 - tmp_295*tmp_525) + tmp_317*(-tmp_306*tmp_491 + tmp_314*tmp_514 - tmp_314*tmp_526) + tmp_336*(-tmp_325*tmp_491 + tmp_333*tmp_514 - tmp_333*tmp_527) + tmp_355*(-tmp_344*tmp_491 + tmp_352*tmp_514 - tmp_352*tmp_528) + tmp_374*(-tmp_363*tmp_491 + tmp_371*tmp_514 - tmp_371*tmp_529) + tmp_393*(-tmp_382*tmp_491 + tmp_390*tmp_514 - tmp_390*tmp_530) + tmp_412*(-tmp_401*tmp_491 + tmp_409*tmp_514 - tmp_409*tmp_531) + tmp_431*(-tmp_420*tmp_491 + tmp_428*tmp_514 - tmp_428*tmp_532) + tmp_450*(-tmp_439*tmp_491 + tmp_447*tmp_514 - tmp_447*tmp_533) + tmp_469*(-tmp_458*tmp_491 + tmp_466*tmp_514 - tmp_466*tmp_534) + tmp_488*(-tmp_477*tmp_491 + tmp_485*tmp_514 - tmp_485*tmp_535);
      real_t a_3_0 = tmp_108*(tmp_103*tmp_536 - tmp_103*tmp_537 - tmp_44*tmp_81) + tmp_127*(-tmp_117*tmp_81 + tmp_125*tmp_536 - tmp_125*tmp_538) + tmp_146*(-tmp_136*tmp_81 + tmp_144*tmp_536 - tmp_144*tmp_539) + tmp_165*(-tmp_155*tmp_81 + tmp_163*tmp_536 - tmp_163*tmp_540) + tmp_184*(-tmp_174*tmp_81 + tmp_182*tmp_536 - tmp_182*tmp_541) + tmp_203*(-tmp_193*tmp_81 + tmp_201*tmp_536 - tmp_201*tmp_542) + tmp_222*(-tmp_212*tmp_81 + tmp_220*tmp_536 - tmp_220*tmp_543) + tmp_241*(-tmp_231*tmp_81 + tmp_239*tmp_536 - tmp_239*tmp_544) + tmp_260*(-tmp_250*tmp_81 + tmp_258*tmp_536 - tmp_258*tmp_545) + tmp_279*(-tmp_269*tmp_81 + tmp_277*tmp_536 - tmp_277*tmp_546) + tmp_298*(-tmp_288*tmp_81 + tmp_296*tmp_536 - tmp_296*tmp_547) + tmp_317*(-tmp_307*tmp_81 + tmp_315*tmp_536 - tmp_315*tmp_548) + tmp_336*(-tmp_326*tmp_81 + tmp_334*tmp_536 - tmp_334*tmp_549) + tmp_355*(-tmp_345*tmp_81 + tmp_353*tmp_536 - tmp_353*tmp_550) + tmp_374*(-tmp_364*tmp_81 + tmp_372*tmp_536 - tmp_372*tmp_551) + tmp_393*(-tmp_383*tmp_81 + tmp_391*tmp_536 - tmp_391*tmp_552) + tmp_412*(-tmp_402*tmp_81 + tmp_410*tmp_536 - tmp_410*tmp_553) + tmp_431*(-tmp_421*tmp_81 + tmp_429*tmp_536 - tmp_429*tmp_554) + tmp_450*(-tmp_440*tmp_81 + tmp_448*tmp_536 - tmp_448*tmp_555) + tmp_469*(-tmp_459*tmp_81 + tmp_467*tmp_536 - tmp_467*tmp_556) + tmp_488*(-tmp_478*tmp_81 + tmp_486*tmp_536 - tmp_486*tmp_557);
      real_t a_3_1 = tmp_108*(tmp_100*tmp_536 - tmp_100*tmp_537 - tmp_44*tmp_489) + tmp_127*(-tmp_117*tmp_489 + tmp_122*tmp_536 - tmp_122*tmp_538) + tmp_146*(-tmp_136*tmp_489 + tmp_141*tmp_536 - tmp_141*tmp_539) + tmp_165*(-tmp_155*tmp_489 + tmp_160*tmp_536 - tmp_160*tmp_540) + tmp_184*(-tmp_174*tmp_489 + tmp_179*tmp_536 - tmp_179*tmp_541) + tmp_203*(-tmp_193*tmp_489 + tmp_198*tmp_536 - tmp_198*tmp_542) + tmp_222*(-tmp_212*tmp_489 + tmp_217*tmp_536 - tmp_217*tmp_543) + tmp_241*(-tmp_231*tmp_489 + tmp_236*tmp_536 - tmp_236*tmp_544) + tmp_260*(-tmp_250*tmp_489 + tmp_255*tmp_536 - tmp_255*tmp_545) + tmp_279*(-tmp_269*tmp_489 + tmp_274*tmp_536 - tmp_274*tmp_546) + tmp_298*(-tmp_288*tmp_489 + tmp_293*tmp_536 - tmp_293*tmp_547) + tmp_317*(-tmp_307*tmp_489 + tmp_312*tmp_536 - tmp_312*tmp_548) + tmp_336*(-tmp_326*tmp_489 + tmp_331*tmp_536 - tmp_331*tmp_549) + tmp_355*(-tmp_345*tmp_489 + tmp_350*tmp_536 - tmp_350*tmp_550) + tmp_374*(-tmp_364*tmp_489 + tmp_369*tmp_536 - tmp_369*tmp_551) + tmp_393*(-tmp_383*tmp_489 + tmp_388*tmp_536 - tmp_388*tmp_552) + tmp_412*(-tmp_402*tmp_489 + tmp_407*tmp_536 - tmp_407*tmp_553) + tmp_431*(-tmp_421*tmp_489 + tmp_426*tmp_536 - tmp_426*tmp_554) + tmp_450*(-tmp_440*tmp_489 + tmp_445*tmp_536 - tmp_445*tmp_555) + tmp_469*(-tmp_459*tmp_489 + tmp_464*tmp_536 - tmp_464*tmp_556) + tmp_488*(-tmp_478*tmp_489 + tmp_483*tmp_536 - tmp_483*tmp_557);
      real_t a_3_2 = tmp_108*(tmp_101*tmp_536 - tmp_101*tmp_537 - tmp_44*tmp_490) + tmp_127*(-tmp_117*tmp_490 + tmp_123*tmp_536 - tmp_123*tmp_538) + tmp_146*(-tmp_136*tmp_490 + tmp_142*tmp_536 - tmp_142*tmp_539) + tmp_165*(-tmp_155*tmp_490 + tmp_161*tmp_536 - tmp_161*tmp_540) + tmp_184*(-tmp_174*tmp_490 + tmp_180*tmp_536 - tmp_180*tmp_541) + tmp_203*(-tmp_193*tmp_490 + tmp_199*tmp_536 - tmp_199*tmp_542) + tmp_222*(-tmp_212*tmp_490 + tmp_218*tmp_536 - tmp_218*tmp_543) + tmp_241*(-tmp_231*tmp_490 + tmp_237*tmp_536 - tmp_237*tmp_544) + tmp_260*(-tmp_250*tmp_490 + tmp_256*tmp_536 - tmp_256*tmp_545) + tmp_279*(-tmp_269*tmp_490 + tmp_275*tmp_536 - tmp_275*tmp_546) + tmp_298*(-tmp_288*tmp_490 + tmp_294*tmp_536 - tmp_294*tmp_547) + tmp_317*(-tmp_307*tmp_490 + tmp_313*tmp_536 - tmp_313*tmp_548) + tmp_336*(-tmp_326*tmp_490 + tmp_332*tmp_536 - tmp_332*tmp_549) + tmp_355*(-tmp_345*tmp_490 + tmp_351*tmp_536 - tmp_351*tmp_550) + tmp_374*(-tmp_364*tmp_490 + tmp_370*tmp_536 - tmp_370*tmp_551) + tmp_393*(-tmp_383*tmp_490 + tmp_389*tmp_536 - tmp_389*tmp_552) + tmp_412*(-tmp_402*tmp_490 + tmp_408*tmp_536 - tmp_408*tmp_553) + tmp_431*(-tmp_421*tmp_490 + tmp_427*tmp_536 - tmp_427*tmp_554) + tmp_450*(-tmp_440*tmp_490 + tmp_446*tmp_536 - tmp_446*tmp_555) + tmp_469*(-tmp_459*tmp_490 + tmp_465*tmp_536 - tmp_465*tmp_556) + tmp_488*(-tmp_478*tmp_490 + tmp_484*tmp_536 - tmp_484*tmp_557);
      real_t a_3_3 = tmp_108*(tmp_102*tmp_536 - tmp_102*tmp_537 - tmp_44*tmp_491) + tmp_127*(-tmp_117*tmp_491 + tmp_124*tmp_536 - tmp_124*tmp_538) + tmp_146*(-tmp_136*tmp_491 + tmp_143*tmp_536 - tmp_143*tmp_539) + tmp_165*(-tmp_155*tmp_491 + tmp_162*tmp_536 - tmp_162*tmp_540) + tmp_184*(-tmp_174*tmp_491 + tmp_181*tmp_536 - tmp_181*tmp_541) + tmp_203*(-tmp_193*tmp_491 + tmp_200*tmp_536 - tmp_200*tmp_542) + tmp_222*(-tmp_212*tmp_491 + tmp_219*tmp_536 - tmp_219*tmp_543) + tmp_241*(-tmp_231*tmp_491 + tmp_238*tmp_536 - tmp_238*tmp_544) + tmp_260*(-tmp_250*tmp_491 + tmp_257*tmp_536 - tmp_257*tmp_545) + tmp_279*(-tmp_269*tmp_491 + tmp_276*tmp_536 - tmp_276*tmp_546) + tmp_298*(-tmp_288*tmp_491 + tmp_295*tmp_536 - tmp_295*tmp_547) + tmp_317*(-tmp_307*tmp_491 + tmp_314*tmp_536 - tmp_314*tmp_548) + tmp_336*(-tmp_326*tmp_491 + tmp_333*tmp_536 - tmp_333*tmp_549) + tmp_355*(-tmp_345*tmp_491 + tmp_352*tmp_536 - tmp_352*tmp_550) + tmp_374*(-tmp_364*tmp_491 + tmp_371*tmp_536 - tmp_371*tmp_551) + tmp_393*(-tmp_383*tmp_491 + tmp_390*tmp_536 - tmp_390*tmp_552) + tmp_412*(-tmp_402*tmp_491 + tmp_409*tmp_536 - tmp_409*tmp_553) + tmp_431*(-tmp_421*tmp_491 + tmp_428*tmp_536 - tmp_428*tmp_554) + tmp_450*(-tmp_440*tmp_491 + tmp_447*tmp_536 - tmp_447*tmp_555) + tmp_469*(-tmp_459*tmp_491 + tmp_466*tmp_536 - tmp_466*tmp_556) + tmp_488*(-tmp_478*tmp_491 + tmp_485*tmp_536 - tmp_485*tmp_557);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_12 = -tmp_10*tmp_11 + tmp_8*tmp_9;
      real_t tmp_13 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_14 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_15 = tmp_11*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_18*tmp_9;
      real_t tmp_21 = tmp_14*tmp_17;
      real_t tmp_22 = tmp_11*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_19 - tmp_10*tmp_22 + tmp_13*tmp_15 - tmp_13*tmp_20 + tmp_16*tmp_8*tmp_9 - tmp_21*tmp_8);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_10*tmp_18 - tmp_14*tmp_8;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_15 - tmp_20;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_12*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34;
      real_t tmp_36 = tmp_10*tmp_17 - tmp_13*tmp_9;
      real_t tmp_37 = -tmp_10*tmp_16 + tmp_13*tmp_14;
      real_t tmp_38 = tmp_16*tmp_9 - tmp_21;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38;
      real_t tmp_40 = tmp_11*tmp_13 - tmp_17*tmp_8;
      real_t tmp_41 = -tmp_13*tmp_18 + tmp_16*tmp_8;
      real_t tmp_42 = tmp_19 - tmp_22;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42;
      real_t tmp_44 = -tmp_35 - tmp_39 - tmp_43 + 1;
      real_t tmp_45 = 0.5*tmp_23;
      real_t tmp_46 = tmp_42*tmp_45;
      real_t tmp_47 = tmp_38*tmp_45;
      real_t tmp_48 = tmp_31*tmp_45;
      real_t tmp_49 = tmp_41*tmp_45;
      real_t tmp_50 = tmp_37*tmp_45;
      real_t tmp_51 = tmp_27*tmp_45;
      real_t tmp_52 = 1.0*tmp_23;
      real_t tmp_53 = tmp_40*tmp_52;
      real_t tmp_54 = tmp_36*tmp_52;
      real_t tmp_55 = tmp_12*tmp_52;
      real_t tmp_56 = p_affine_13_0*(-tmp_46 - tmp_47 - tmp_48) + p_affine_13_1*(-tmp_49 - tmp_50 - tmp_51) + p_affine_13_2*(-tmp_53 - tmp_54 - tmp_55);
      real_t tmp_57 = 2*tmp_56;
      real_t tmp_58 = 2.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = 0.0068572537431980923*tmp_58;
      real_t tmp_60 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_62 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_63 = tmp_12*tmp_60 + tmp_27*tmp_61 + tmp_31*tmp_62;
      real_t tmp_64 = tmp_36*tmp_60 + tmp_37*tmp_61 + tmp_38*tmp_62;
      real_t tmp_65 = tmp_40*tmp_60 + tmp_41*tmp_61 + tmp_42*tmp_62;
      real_t tmp_66 = -tmp_63 - tmp_64 - tmp_65 + 1;
      real_t tmp_67 = 0.037198804536718075*tmp_58;
      real_t tmp_68 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_69 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_70 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_71 = tmp_12*tmp_68 + tmp_27*tmp_69 + tmp_31*tmp_70;
      real_t tmp_72 = tmp_36*tmp_68 + tmp_37*tmp_69 + tmp_38*tmp_70;
      real_t tmp_73 = tmp_40*tmp_68 + tmp_41*tmp_69 + tmp_42*tmp_70;
      real_t tmp_74 = -tmp_71 - tmp_72 - tmp_73 + 1;
      real_t tmp_75 = 0.020848748529055869*tmp_58;
      real_t tmp_76 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_77 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_78 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_79 = tmp_12*tmp_76 + tmp_27*tmp_77 + tmp_31*tmp_78;
      real_t tmp_80 = tmp_36*tmp_76 + tmp_37*tmp_77 + tmp_38*tmp_78;
      real_t tmp_81 = tmp_40*tmp_76 + tmp_41*tmp_77 + tmp_42*tmp_78;
      real_t tmp_82 = -tmp_79 - tmp_80 - tmp_81 + 1;
      real_t tmp_83 = 0.019202922745021479*tmp_58;
      real_t tmp_84 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_85 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_86 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_87 = tmp_12*tmp_84 + tmp_27*tmp_85 + tmp_31*tmp_86;
      real_t tmp_88 = tmp_36*tmp_84 + tmp_37*tmp_85 + tmp_38*tmp_86;
      real_t tmp_89 = tmp_40*tmp_84 + tmp_41*tmp_85 + tmp_42*tmp_86;
      real_t tmp_90 = -tmp_87 - tmp_88 - tmp_89 + 1;
      real_t tmp_91 = 0.020848748529055869*tmp_58;
      real_t tmp_92 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_93 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_94 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_95 = tmp_12*tmp_92 + tmp_27*tmp_93 + tmp_31*tmp_94;
      real_t tmp_96 = tmp_36*tmp_92 + tmp_37*tmp_93 + tmp_38*tmp_94;
      real_t tmp_97 = tmp_40*tmp_92 + tmp_41*tmp_93 + tmp_42*tmp_94;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = 0.019202922745021479*tmp_58;
      real_t tmp_100 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_102 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_103 = tmp_100*tmp_12 + tmp_101*tmp_27 + tmp_102*tmp_31;
      real_t tmp_104 = tmp_100*tmp_36 + tmp_101*tmp_37 + tmp_102*tmp_38;
      real_t tmp_105 = tmp_100*tmp_40 + tmp_101*tmp_41 + tmp_102*tmp_42;
      real_t tmp_106 = -tmp_103 - tmp_104 - tmp_105 + 1;
      real_t tmp_107 = 0.020848748529055869*tmp_58;
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_109 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_110 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_111 = tmp_108*tmp_12 + tmp_109*tmp_27 + tmp_110*tmp_31;
      real_t tmp_112 = tmp_108*tmp_36 + tmp_109*tmp_37 + tmp_110*tmp_38;
      real_t tmp_113 = tmp_108*tmp_40 + tmp_109*tmp_41 + tmp_110*tmp_42;
      real_t tmp_114 = -tmp_111 - tmp_112 - tmp_113 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_58;
      real_t tmp_116 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_117 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_118 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_119 = tmp_116*tmp_12 + tmp_117*tmp_27 + tmp_118*tmp_31;
      real_t tmp_120 = tmp_116*tmp_36 + tmp_117*tmp_37 + tmp_118*tmp_38;
      real_t tmp_121 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_122 = -tmp_119 - tmp_120 - tmp_121 + 1;
      real_t tmp_123 = 0.020848748529055869*tmp_58;
      real_t tmp_124 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_125 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_126 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_127 = tmp_12*tmp_124 + tmp_125*tmp_27 + tmp_126*tmp_31;
      real_t tmp_128 = tmp_124*tmp_36 + tmp_125*tmp_37 + tmp_126*tmp_38;
      real_t tmp_129 = tmp_124*tmp_40 + tmp_125*tmp_41 + tmp_126*tmp_42;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = 0.019202922745021479*tmp_58;
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_133 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_134 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_135 = tmp_12*tmp_132 + tmp_133*tmp_27 + tmp_134*tmp_31;
      real_t tmp_136 = tmp_132*tmp_36 + tmp_133*tmp_37 + tmp_134*tmp_38;
      real_t tmp_137 = tmp_132*tmp_40 + tmp_133*tmp_41 + tmp_134*tmp_42;
      real_t tmp_138 = -tmp_135 - tmp_136 - tmp_137 + 1;
      real_t tmp_139 = 0.020848748529055869*tmp_58;
      real_t tmp_140 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_141 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_142 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_143 = tmp_12*tmp_140 + tmp_141*tmp_27 + tmp_142*tmp_31;
      real_t tmp_144 = tmp_140*tmp_36 + tmp_141*tmp_37 + tmp_142*tmp_38;
      real_t tmp_145 = tmp_140*tmp_40 + tmp_141*tmp_41 + tmp_142*tmp_42;
      real_t tmp_146 = -tmp_143 - tmp_144 - tmp_145 + 1;
      real_t tmp_147 = 0.019202922745021479*tmp_58;
      real_t tmp_148 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_150 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_151 = tmp_12*tmp_148 + tmp_149*tmp_27 + tmp_150*tmp_31;
      real_t tmp_152 = tmp_148*tmp_36 + tmp_149*tmp_37 + tmp_150*tmp_38;
      real_t tmp_153 = tmp_148*tmp_40 + tmp_149*tmp_41 + tmp_150*tmp_42;
      real_t tmp_154 = -tmp_151 - tmp_152 - tmp_153 + 1;
      real_t tmp_155 = 0.042507265838595799*tmp_58;
      real_t tmp_156 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_157 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_158 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_159 = tmp_12*tmp_156 + tmp_157*tmp_27 + tmp_158*tmp_31;
      real_t tmp_160 = tmp_156*tmp_36 + tmp_157*tmp_37 + tmp_158*tmp_38;
      real_t tmp_161 = tmp_156*tmp_40 + tmp_157*tmp_41 + tmp_158*tmp_42;
      real_t tmp_162 = -tmp_159 - tmp_160 - tmp_161 + 1;
      real_t tmp_163 = 0.020848748529055869*tmp_58;
      real_t tmp_164 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_165 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_166 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_167 = tmp_12*tmp_164 + tmp_165*tmp_27 + tmp_166*tmp_31;
      real_t tmp_168 = tmp_164*tmp_36 + tmp_165*tmp_37 + tmp_166*tmp_38;
      real_t tmp_169 = tmp_164*tmp_40 + tmp_165*tmp_41 + tmp_166*tmp_42;
      real_t tmp_170 = -tmp_167 - tmp_168 - tmp_169 + 1;
      real_t tmp_171 = 0.0068572537431980923*tmp_58;
      real_t tmp_172 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_173 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_174 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_175 = tmp_12*tmp_172 + tmp_173*tmp_27 + tmp_174*tmp_31;
      real_t tmp_176 = tmp_172*tmp_36 + tmp_173*tmp_37 + tmp_174*tmp_38;
      real_t tmp_177 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_178 = -tmp_175 - tmp_176 - tmp_177 + 1;
      real_t tmp_179 = 0.037198804536718075*tmp_58;
      real_t tmp_180 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_181 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_182 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_183 = tmp_12*tmp_180 + tmp_181*tmp_27 + tmp_182*tmp_31;
      real_t tmp_184 = tmp_180*tmp_36 + tmp_181*tmp_37 + tmp_182*tmp_38;
      real_t tmp_185 = tmp_180*tmp_40 + tmp_181*tmp_41 + tmp_182*tmp_42;
      real_t tmp_186 = -tmp_183 - tmp_184 - tmp_185 + 1;
      real_t tmp_187 = 0.042507265838595799*tmp_58;
      real_t tmp_188 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_189 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_190 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_191 = tmp_12*tmp_188 + tmp_189*tmp_27 + tmp_190*tmp_31;
      real_t tmp_192 = tmp_188*tmp_36 + tmp_189*tmp_37 + tmp_190*tmp_38;
      real_t tmp_193 = tmp_188*tmp_40 + tmp_189*tmp_41 + tmp_190*tmp_42;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = 0.0068572537431980923*tmp_58;
      real_t tmp_196 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_197 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_198 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_199 = tmp_12*tmp_196 + tmp_197*tmp_27 + tmp_198*tmp_31;
      real_t tmp_200 = tmp_196*tmp_36 + tmp_197*tmp_37 + tmp_198*tmp_38;
      real_t tmp_201 = tmp_196*tmp_40 + tmp_197*tmp_41 + tmp_198*tmp_42;
      real_t tmp_202 = -tmp_199 - tmp_200 - tmp_201 + 1;
      real_t tmp_203 = 0.037198804536718075*tmp_58;
      real_t tmp_204 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_205 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_206 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_207 = tmp_12*tmp_204 + tmp_205*tmp_27 + tmp_206*tmp_31;
      real_t tmp_208 = tmp_204*tmp_36 + tmp_205*tmp_37 + tmp_206*tmp_38;
      real_t tmp_209 = tmp_204*tmp_40 + tmp_205*tmp_41 + tmp_206*tmp_42;
      real_t tmp_210 = -tmp_207 - tmp_208 - tmp_209 + 1;
      real_t tmp_211 = 0.042507265838595799*tmp_58;
      real_t tmp_212 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_213 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_214 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_215 = tmp_12*tmp_212 + tmp_213*tmp_27 + tmp_214*tmp_31;
      real_t tmp_216 = tmp_212*tmp_36 + tmp_213*tmp_37 + tmp_214*tmp_38;
      real_t tmp_217 = tmp_212*tmp_40 + tmp_213*tmp_41 + tmp_214*tmp_42;
      real_t tmp_218 = -tmp_215 - tmp_216 - tmp_217 + 1;
      real_t tmp_219 = 0.019202922745021479*tmp_58;
      real_t tmp_220 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_51 + p_affine_13_2*tmp_55;
      real_t tmp_221 = tmp_107*(7.0*tmp_103*tmp_106*tmp_7 - tmp_103*tmp_56 - tmp_106*tmp_220) + tmp_115*(7.0*tmp_111*tmp_114*tmp_7 - tmp_111*tmp_56 - tmp_114*tmp_220) + tmp_123*(7.0*tmp_119*tmp_122*tmp_7 - tmp_119*tmp_56 - tmp_122*tmp_220) + tmp_131*(7.0*tmp_127*tmp_130*tmp_7 - tmp_127*tmp_56 - tmp_130*tmp_220) + tmp_139*(7.0*tmp_135*tmp_138*tmp_7 - tmp_135*tmp_56 - tmp_138*tmp_220) + tmp_147*(7.0*tmp_143*tmp_146*tmp_7 - tmp_143*tmp_56 - tmp_146*tmp_220) + tmp_155*(7.0*tmp_151*tmp_154*tmp_7 - tmp_151*tmp_56 - tmp_154*tmp_220) + tmp_163*(7.0*tmp_159*tmp_162*tmp_7 - tmp_159*tmp_56 - tmp_162*tmp_220) + tmp_171*(7.0*tmp_167*tmp_170*tmp_7 - tmp_167*tmp_56 - tmp_170*tmp_220) + tmp_179*(7.0*tmp_175*tmp_178*tmp_7 - tmp_175*tmp_56 - tmp_178*tmp_220) + tmp_187*(7.0*tmp_183*tmp_186*tmp_7 - tmp_183*tmp_56 - tmp_186*tmp_220) + tmp_195*(7.0*tmp_191*tmp_194*tmp_7 - tmp_191*tmp_56 - tmp_194*tmp_220) + tmp_203*(7.0*tmp_199*tmp_202*tmp_7 - tmp_199*tmp_56 - tmp_202*tmp_220) + tmp_211*(7.0*tmp_207*tmp_210*tmp_7 - tmp_207*tmp_56 - tmp_210*tmp_220) + tmp_219*(7.0*tmp_215*tmp_218*tmp_7 - tmp_215*tmp_56 - tmp_218*tmp_220) + tmp_59*(-tmp_220*tmp_44 + 7.0*tmp_35*tmp_44*tmp_7 - tmp_35*tmp_56) + tmp_67*(-tmp_220*tmp_66 - tmp_56*tmp_63 + 7.0*tmp_63*tmp_66*tmp_7) + tmp_75*(-tmp_220*tmp_74 - tmp_56*tmp_71 + 7.0*tmp_7*tmp_71*tmp_74) + tmp_83*(-tmp_220*tmp_82 - tmp_56*tmp_79 + 7.0*tmp_7*tmp_79*tmp_82) + tmp_91*(-tmp_220*tmp_90 - tmp_56*tmp_87 + 7.0*tmp_7*tmp_87*tmp_90) + tmp_99*(-tmp_220*tmp_98 - tmp_56*tmp_95 + 7.0*tmp_7*tmp_95*tmp_98);
      real_t tmp_222 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_50 + p_affine_13_2*tmp_54;
      real_t tmp_223 = tmp_107*(7.0*tmp_104*tmp_106*tmp_7 - tmp_104*tmp_56 - tmp_106*tmp_222) + tmp_115*(7.0*tmp_112*tmp_114*tmp_7 - tmp_112*tmp_56 - tmp_114*tmp_222) + tmp_123*(7.0*tmp_120*tmp_122*tmp_7 - tmp_120*tmp_56 - tmp_122*tmp_222) + tmp_131*(7.0*tmp_128*tmp_130*tmp_7 - tmp_128*tmp_56 - tmp_130*tmp_222) + tmp_139*(7.0*tmp_136*tmp_138*tmp_7 - tmp_136*tmp_56 - tmp_138*tmp_222) + tmp_147*(7.0*tmp_144*tmp_146*tmp_7 - tmp_144*tmp_56 - tmp_146*tmp_222) + tmp_155*(7.0*tmp_152*tmp_154*tmp_7 - tmp_152*tmp_56 - tmp_154*tmp_222) + tmp_163*(7.0*tmp_160*tmp_162*tmp_7 - tmp_160*tmp_56 - tmp_162*tmp_222) + tmp_171*(7.0*tmp_168*tmp_170*tmp_7 - tmp_168*tmp_56 - tmp_170*tmp_222) + tmp_179*(7.0*tmp_176*tmp_178*tmp_7 - tmp_176*tmp_56 - tmp_178*tmp_222) + tmp_187*(7.0*tmp_184*tmp_186*tmp_7 - tmp_184*tmp_56 - tmp_186*tmp_222) + tmp_195*(7.0*tmp_192*tmp_194*tmp_7 - tmp_192*tmp_56 - tmp_194*tmp_222) + tmp_203*(7.0*tmp_200*tmp_202*tmp_7 - tmp_200*tmp_56 - tmp_202*tmp_222) + tmp_211*(7.0*tmp_208*tmp_210*tmp_7 - tmp_208*tmp_56 - tmp_210*tmp_222) + tmp_219*(7.0*tmp_216*tmp_218*tmp_7 - tmp_216*tmp_56 - tmp_218*tmp_222) + tmp_59*(-tmp_222*tmp_44 + 7.0*tmp_39*tmp_44*tmp_7 - tmp_39*tmp_56) + tmp_67*(-tmp_222*tmp_66 - tmp_56*tmp_64 + 7.0*tmp_64*tmp_66*tmp_7) + tmp_75*(-tmp_222*tmp_74 - tmp_56*tmp_72 + 7.0*tmp_7*tmp_72*tmp_74) + tmp_83*(-tmp_222*tmp_82 - tmp_56*tmp_80 + 7.0*tmp_7*tmp_80*tmp_82) + tmp_91*(-tmp_222*tmp_90 - tmp_56*tmp_88 + 7.0*tmp_7*tmp_88*tmp_90) + tmp_99*(-tmp_222*tmp_98 - tmp_56*tmp_96 + 7.0*tmp_7*tmp_96*tmp_98);
      real_t tmp_224 = p_affine_13_0*tmp_46 + p_affine_13_1*tmp_49 + p_affine_13_2*tmp_53;
      real_t tmp_225 = tmp_107*(7.0*tmp_105*tmp_106*tmp_7 - tmp_105*tmp_56 - tmp_106*tmp_224) + tmp_115*(7.0*tmp_113*tmp_114*tmp_7 - tmp_113*tmp_56 - tmp_114*tmp_224) + tmp_123*(7.0*tmp_121*tmp_122*tmp_7 - tmp_121*tmp_56 - tmp_122*tmp_224) + tmp_131*(7.0*tmp_129*tmp_130*tmp_7 - tmp_129*tmp_56 - tmp_130*tmp_224) + tmp_139*(7.0*tmp_137*tmp_138*tmp_7 - tmp_137*tmp_56 - tmp_138*tmp_224) + tmp_147*(7.0*tmp_145*tmp_146*tmp_7 - tmp_145*tmp_56 - tmp_146*tmp_224) + tmp_155*(7.0*tmp_153*tmp_154*tmp_7 - tmp_153*tmp_56 - tmp_154*tmp_224) + tmp_163*(7.0*tmp_161*tmp_162*tmp_7 - tmp_161*tmp_56 - tmp_162*tmp_224) + tmp_171*(7.0*tmp_169*tmp_170*tmp_7 - tmp_169*tmp_56 - tmp_170*tmp_224) + tmp_179*(7.0*tmp_177*tmp_178*tmp_7 - tmp_177*tmp_56 - tmp_178*tmp_224) + tmp_187*(7.0*tmp_185*tmp_186*tmp_7 - tmp_185*tmp_56 - tmp_186*tmp_224) + tmp_195*(7.0*tmp_193*tmp_194*tmp_7 - tmp_193*tmp_56 - tmp_194*tmp_224) + tmp_203*(7.0*tmp_201*tmp_202*tmp_7 - tmp_201*tmp_56 - tmp_202*tmp_224) + tmp_211*(7.0*tmp_209*tmp_210*tmp_7 - tmp_209*tmp_56 - tmp_210*tmp_224) + tmp_219*(7.0*tmp_217*tmp_218*tmp_7 - tmp_217*tmp_56 - tmp_218*tmp_224) + tmp_59*(-tmp_224*tmp_44 + 7.0*tmp_43*tmp_44*tmp_7 - tmp_43*tmp_56) + tmp_67*(-tmp_224*tmp_66 - tmp_56*tmp_65 + 7.0*tmp_65*tmp_66*tmp_7) + tmp_75*(-tmp_224*tmp_74 - tmp_56*tmp_73 + 7.0*tmp_7*tmp_73*tmp_74) + tmp_83*(-tmp_224*tmp_82 - tmp_56*tmp_81 + 7.0*tmp_7*tmp_81*tmp_82) + tmp_91*(-tmp_224*tmp_90 - tmp_56*tmp_89 + 7.0*tmp_7*tmp_89*tmp_90) + tmp_99*(-tmp_224*tmp_98 - tmp_56*tmp_97 + 7.0*tmp_7*tmp_97*tmp_98);
      real_t tmp_226 = 2*tmp_220;
      real_t tmp_227 = tmp_107*(7.0*tmp_103*tmp_104*tmp_7 - tmp_103*tmp_222 - tmp_104*tmp_220) + tmp_115*(7.0*tmp_111*tmp_112*tmp_7 - tmp_111*tmp_222 - tmp_112*tmp_220) + tmp_123*(7.0*tmp_119*tmp_120*tmp_7 - tmp_119*tmp_222 - tmp_120*tmp_220) + tmp_131*(7.0*tmp_127*tmp_128*tmp_7 - tmp_127*tmp_222 - tmp_128*tmp_220) + tmp_139*(7.0*tmp_135*tmp_136*tmp_7 - tmp_135*tmp_222 - tmp_136*tmp_220) + tmp_147*(7.0*tmp_143*tmp_144*tmp_7 - tmp_143*tmp_222 - tmp_144*tmp_220) + tmp_155*(7.0*tmp_151*tmp_152*tmp_7 - tmp_151*tmp_222 - tmp_152*tmp_220) + tmp_163*(7.0*tmp_159*tmp_160*tmp_7 - tmp_159*tmp_222 - tmp_160*tmp_220) + tmp_171*(7.0*tmp_167*tmp_168*tmp_7 - tmp_167*tmp_222 - tmp_168*tmp_220) + tmp_179*(7.0*tmp_175*tmp_176*tmp_7 - tmp_175*tmp_222 - tmp_176*tmp_220) + tmp_187*(7.0*tmp_183*tmp_184*tmp_7 - tmp_183*tmp_222 - tmp_184*tmp_220) + tmp_195*(7.0*tmp_191*tmp_192*tmp_7 - tmp_191*tmp_222 - tmp_192*tmp_220) + tmp_203*(7.0*tmp_199*tmp_200*tmp_7 - tmp_199*tmp_222 - tmp_200*tmp_220) + tmp_211*(7.0*tmp_207*tmp_208*tmp_7 - tmp_207*tmp_222 - tmp_208*tmp_220) + tmp_219*(7.0*tmp_215*tmp_216*tmp_7 - tmp_215*tmp_222 - tmp_216*tmp_220) + tmp_59*(-tmp_220*tmp_39 - tmp_222*tmp_35 + 7.0*tmp_35*tmp_39*tmp_7) + tmp_67*(-tmp_220*tmp_64 - tmp_222*tmp_63 + 7.0*tmp_63*tmp_64*tmp_7) + tmp_75*(-tmp_220*tmp_72 - tmp_222*tmp_71 + 7.0*tmp_7*tmp_71*tmp_72) + tmp_83*(-tmp_220*tmp_80 - tmp_222*tmp_79 + 7.0*tmp_7*tmp_79*tmp_80) + tmp_91*(-tmp_220*tmp_88 - tmp_222*tmp_87 + 7.0*tmp_7*tmp_87*tmp_88) + tmp_99*(-tmp_220*tmp_96 - tmp_222*tmp_95 + 7.0*tmp_7*tmp_95*tmp_96);
      real_t tmp_228 = tmp_107*(7.0*tmp_103*tmp_105*tmp_7 - tmp_103*tmp_224 - tmp_105*tmp_220) + tmp_115*(7.0*tmp_111*tmp_113*tmp_7 - tmp_111*tmp_224 - tmp_113*tmp_220) + tmp_123*(7.0*tmp_119*tmp_121*tmp_7 - tmp_119*tmp_224 - tmp_121*tmp_220) + tmp_131*(7.0*tmp_127*tmp_129*tmp_7 - tmp_127*tmp_224 - tmp_129*tmp_220) + tmp_139*(7.0*tmp_135*tmp_137*tmp_7 - tmp_135*tmp_224 - tmp_137*tmp_220) + tmp_147*(7.0*tmp_143*tmp_145*tmp_7 - tmp_143*tmp_224 - tmp_145*tmp_220) + tmp_155*(7.0*tmp_151*tmp_153*tmp_7 - tmp_151*tmp_224 - tmp_153*tmp_220) + tmp_163*(7.0*tmp_159*tmp_161*tmp_7 - tmp_159*tmp_224 - tmp_161*tmp_220) + tmp_171*(7.0*tmp_167*tmp_169*tmp_7 - tmp_167*tmp_224 - tmp_169*tmp_220) + tmp_179*(7.0*tmp_175*tmp_177*tmp_7 - tmp_175*tmp_224 - tmp_177*tmp_220) + tmp_187*(7.0*tmp_183*tmp_185*tmp_7 - tmp_183*tmp_224 - tmp_185*tmp_220) + tmp_195*(7.0*tmp_191*tmp_193*tmp_7 - tmp_191*tmp_224 - tmp_193*tmp_220) + tmp_203*(7.0*tmp_199*tmp_201*tmp_7 - tmp_199*tmp_224 - tmp_201*tmp_220) + tmp_211*(7.0*tmp_207*tmp_209*tmp_7 - tmp_207*tmp_224 - tmp_209*tmp_220) + tmp_219*(7.0*tmp_215*tmp_217*tmp_7 - tmp_215*tmp_224 - tmp_217*tmp_220) + tmp_59*(-tmp_220*tmp_43 - tmp_224*tmp_35 + 7.0*tmp_35*tmp_43*tmp_7) + tmp_67*(-tmp_220*tmp_65 - tmp_224*tmp_63 + 7.0*tmp_63*tmp_65*tmp_7) + tmp_75*(-tmp_220*tmp_73 - tmp_224*tmp_71 + 7.0*tmp_7*tmp_71*tmp_73) + tmp_83*(-tmp_220*tmp_81 - tmp_224*tmp_79 + 7.0*tmp_7*tmp_79*tmp_81) + tmp_91*(-tmp_220*tmp_89 - tmp_224*tmp_87 + 7.0*tmp_7*tmp_87*tmp_89) + tmp_99*(-tmp_220*tmp_97 - tmp_224*tmp_95 + 7.0*tmp_7*tmp_95*tmp_97);
      real_t tmp_229 = 2*tmp_222;
      real_t tmp_230 = tmp_107*(7.0*tmp_104*tmp_105*tmp_7 - tmp_104*tmp_224 - tmp_105*tmp_222) + tmp_115*(7.0*tmp_112*tmp_113*tmp_7 - tmp_112*tmp_224 - tmp_113*tmp_222) + tmp_123*(7.0*tmp_120*tmp_121*tmp_7 - tmp_120*tmp_224 - tmp_121*tmp_222) + tmp_131*(7.0*tmp_128*tmp_129*tmp_7 - tmp_128*tmp_224 - tmp_129*tmp_222) + tmp_139*(7.0*tmp_136*tmp_137*tmp_7 - tmp_136*tmp_224 - tmp_137*tmp_222) + tmp_147*(7.0*tmp_144*tmp_145*tmp_7 - tmp_144*tmp_224 - tmp_145*tmp_222) + tmp_155*(7.0*tmp_152*tmp_153*tmp_7 - tmp_152*tmp_224 - tmp_153*tmp_222) + tmp_163*(7.0*tmp_160*tmp_161*tmp_7 - tmp_160*tmp_224 - tmp_161*tmp_222) + tmp_171*(7.0*tmp_168*tmp_169*tmp_7 - tmp_168*tmp_224 - tmp_169*tmp_222) + tmp_179*(7.0*tmp_176*tmp_177*tmp_7 - tmp_176*tmp_224 - tmp_177*tmp_222) + tmp_187*(7.0*tmp_184*tmp_185*tmp_7 - tmp_184*tmp_224 - tmp_185*tmp_222) + tmp_195*(7.0*tmp_192*tmp_193*tmp_7 - tmp_192*tmp_224 - tmp_193*tmp_222) + tmp_203*(7.0*tmp_200*tmp_201*tmp_7 - tmp_200*tmp_224 - tmp_201*tmp_222) + tmp_211*(7.0*tmp_208*tmp_209*tmp_7 - tmp_208*tmp_224 - tmp_209*tmp_222) + tmp_219*(7.0*tmp_216*tmp_217*tmp_7 - tmp_216*tmp_224 - tmp_217*tmp_222) + tmp_59*(-tmp_222*tmp_43 - tmp_224*tmp_39 + 7.0*tmp_39*tmp_43*tmp_7) + tmp_67*(-tmp_222*tmp_65 - tmp_224*tmp_64 + 7.0*tmp_64*tmp_65*tmp_7) + tmp_75*(-tmp_222*tmp_73 - tmp_224*tmp_72 + 7.0*tmp_7*tmp_72*tmp_73) + tmp_83*(-tmp_222*tmp_81 - tmp_224*tmp_80 + 7.0*tmp_7*tmp_80*tmp_81) + tmp_91*(-tmp_222*tmp_89 - tmp_224*tmp_88 + 7.0*tmp_7*tmp_88*tmp_89) + tmp_99*(-tmp_222*tmp_97 - tmp_224*tmp_96 + 7.0*tmp_7*tmp_96*tmp_97);
      real_t tmp_231 = 2*tmp_224;
      real_t a_0_0 = tmp_107*(7.0*(tmp_106*tmp_106)*tmp_7 - tmp_106*tmp_57) + tmp_115*(7.0*(tmp_114*tmp_114)*tmp_7 - tmp_114*tmp_57) + tmp_123*(7.0*(tmp_122*tmp_122)*tmp_7 - tmp_122*tmp_57) + tmp_131*(7.0*(tmp_130*tmp_130)*tmp_7 - tmp_130*tmp_57) + tmp_139*(7.0*(tmp_138*tmp_138)*tmp_7 - tmp_138*tmp_57) + tmp_147*(7.0*(tmp_146*tmp_146)*tmp_7 - tmp_146*tmp_57) + tmp_155*(7.0*(tmp_154*tmp_154)*tmp_7 - tmp_154*tmp_57) + tmp_163*(7.0*(tmp_162*tmp_162)*tmp_7 - tmp_162*tmp_57) + tmp_171*(7.0*(tmp_170*tmp_170)*tmp_7 - tmp_170*tmp_57) + tmp_179*(7.0*(tmp_178*tmp_178)*tmp_7 - tmp_178*tmp_57) + tmp_187*(7.0*(tmp_186*tmp_186)*tmp_7 - tmp_186*tmp_57) + tmp_195*(7.0*(tmp_194*tmp_194)*tmp_7 - tmp_194*tmp_57) + tmp_203*(7.0*(tmp_202*tmp_202)*tmp_7 - tmp_202*tmp_57) + tmp_211*(7.0*(tmp_210*tmp_210)*tmp_7 - tmp_210*tmp_57) + tmp_219*(7.0*(tmp_218*tmp_218)*tmp_7 - tmp_218*tmp_57) + tmp_59*(7.0*(tmp_44*tmp_44)*tmp_7 - tmp_44*tmp_57) + tmp_67*(-tmp_57*tmp_66 + 7.0*(tmp_66*tmp_66)*tmp_7) + tmp_75*(-tmp_57*tmp_74 + 7.0*tmp_7*(tmp_74*tmp_74)) + tmp_83*(-tmp_57*tmp_82 + 7.0*tmp_7*(tmp_82*tmp_82)) + tmp_91*(-tmp_57*tmp_90 + 7.0*tmp_7*(tmp_90*tmp_90)) + tmp_99*(-tmp_57*tmp_98 + 7.0*tmp_7*(tmp_98*tmp_98));
      real_t a_0_1 = tmp_221;
      real_t a_0_2 = tmp_223;
      real_t a_0_3 = tmp_225;
      real_t a_1_0 = tmp_221;
      real_t a_1_1 = tmp_107*(7.0*(tmp_103*tmp_103)*tmp_7 - tmp_103*tmp_226) + tmp_115*(7.0*(tmp_111*tmp_111)*tmp_7 - tmp_111*tmp_226) + tmp_123*(7.0*(tmp_119*tmp_119)*tmp_7 - tmp_119*tmp_226) + tmp_131*(7.0*(tmp_127*tmp_127)*tmp_7 - tmp_127*tmp_226) + tmp_139*(7.0*(tmp_135*tmp_135)*tmp_7 - tmp_135*tmp_226) + tmp_147*(7.0*(tmp_143*tmp_143)*tmp_7 - tmp_143*tmp_226) + tmp_155*(7.0*(tmp_151*tmp_151)*tmp_7 - tmp_151*tmp_226) + tmp_163*(7.0*(tmp_159*tmp_159)*tmp_7 - tmp_159*tmp_226) + tmp_171*(7.0*(tmp_167*tmp_167)*tmp_7 - tmp_167*tmp_226) + tmp_179*(7.0*(tmp_175*tmp_175)*tmp_7 - tmp_175*tmp_226) + tmp_187*(7.0*(tmp_183*tmp_183)*tmp_7 - tmp_183*tmp_226) + tmp_195*(7.0*(tmp_191*tmp_191)*tmp_7 - tmp_191*tmp_226) + tmp_203*(7.0*(tmp_199*tmp_199)*tmp_7 - tmp_199*tmp_226) + tmp_211*(7.0*(tmp_207*tmp_207)*tmp_7 - tmp_207*tmp_226) + tmp_219*(7.0*(tmp_215*tmp_215)*tmp_7 - tmp_215*tmp_226) + tmp_59*(-tmp_226*tmp_35 + 7.0*(tmp_35*tmp_35)*tmp_7) + tmp_67*(-tmp_226*tmp_63 + 7.0*(tmp_63*tmp_63)*tmp_7) + tmp_75*(-tmp_226*tmp_71 + 7.0*tmp_7*(tmp_71*tmp_71)) + tmp_83*(-tmp_226*tmp_79 + 7.0*tmp_7*(tmp_79*tmp_79)) + tmp_91*(-tmp_226*tmp_87 + 7.0*tmp_7*(tmp_87*tmp_87)) + tmp_99*(-tmp_226*tmp_95 + 7.0*tmp_7*(tmp_95*tmp_95));
      real_t a_1_2 = tmp_227;
      real_t a_1_3 = tmp_228;
      real_t a_2_0 = tmp_223;
      real_t a_2_1 = tmp_227;
      real_t a_2_2 = tmp_107*(7.0*(tmp_104*tmp_104)*tmp_7 - tmp_104*tmp_229) + tmp_115*(7.0*(tmp_112*tmp_112)*tmp_7 - tmp_112*tmp_229) + tmp_123*(7.0*(tmp_120*tmp_120)*tmp_7 - tmp_120*tmp_229) + tmp_131*(7.0*(tmp_128*tmp_128)*tmp_7 - tmp_128*tmp_229) + tmp_139*(7.0*(tmp_136*tmp_136)*tmp_7 - tmp_136*tmp_229) + tmp_147*(7.0*(tmp_144*tmp_144)*tmp_7 - tmp_144*tmp_229) + tmp_155*(7.0*(tmp_152*tmp_152)*tmp_7 - tmp_152*tmp_229) + tmp_163*(7.0*(tmp_160*tmp_160)*tmp_7 - tmp_160*tmp_229) + tmp_171*(7.0*(tmp_168*tmp_168)*tmp_7 - tmp_168*tmp_229) + tmp_179*(7.0*(tmp_176*tmp_176)*tmp_7 - tmp_176*tmp_229) + tmp_187*(7.0*(tmp_184*tmp_184)*tmp_7 - tmp_184*tmp_229) + tmp_195*(7.0*(tmp_192*tmp_192)*tmp_7 - tmp_192*tmp_229) + tmp_203*(7.0*(tmp_200*tmp_200)*tmp_7 - tmp_200*tmp_229) + tmp_211*(7.0*(tmp_208*tmp_208)*tmp_7 - tmp_208*tmp_229) + tmp_219*(7.0*(tmp_216*tmp_216)*tmp_7 - tmp_216*tmp_229) + tmp_59*(-tmp_229*tmp_39 + 7.0*(tmp_39*tmp_39)*tmp_7) + tmp_67*(-tmp_229*tmp_64 + 7.0*(tmp_64*tmp_64)*tmp_7) + tmp_75*(-tmp_229*tmp_72 + 7.0*tmp_7*(tmp_72*tmp_72)) + tmp_83*(-tmp_229*tmp_80 + 7.0*tmp_7*(tmp_80*tmp_80)) + tmp_91*(-tmp_229*tmp_88 + 7.0*tmp_7*(tmp_88*tmp_88)) + tmp_99*(-tmp_229*tmp_96 + 7.0*tmp_7*(tmp_96*tmp_96));
      real_t a_2_3 = tmp_230;
      real_t a_3_0 = tmp_225;
      real_t a_3_1 = tmp_228;
      real_t a_3_2 = tmp_230;
      real_t a_3_3 = tmp_107*(7.0*(tmp_105*tmp_105)*tmp_7 - tmp_105*tmp_231) + tmp_115*(7.0*(tmp_113*tmp_113)*tmp_7 - tmp_113*tmp_231) + tmp_123*(7.0*(tmp_121*tmp_121)*tmp_7 - tmp_121*tmp_231) + tmp_131*(7.0*(tmp_129*tmp_129)*tmp_7 - tmp_129*tmp_231) + tmp_139*(7.0*(tmp_137*tmp_137)*tmp_7 - tmp_137*tmp_231) + tmp_147*(7.0*(tmp_145*tmp_145)*tmp_7 - tmp_145*tmp_231) + tmp_155*(7.0*(tmp_153*tmp_153)*tmp_7 - tmp_153*tmp_231) + tmp_163*(7.0*(tmp_161*tmp_161)*tmp_7 - tmp_161*tmp_231) + tmp_171*(7.0*(tmp_169*tmp_169)*tmp_7 - tmp_169*tmp_231) + tmp_179*(7.0*(tmp_177*tmp_177)*tmp_7 - tmp_177*tmp_231) + tmp_187*(7.0*(tmp_185*tmp_185)*tmp_7 - tmp_185*tmp_231) + tmp_195*(7.0*(tmp_193*tmp_193)*tmp_7 - tmp_193*tmp_231) + tmp_203*(7.0*(tmp_201*tmp_201)*tmp_7 - tmp_201*tmp_231) + tmp_211*(7.0*(tmp_209*tmp_209)*tmp_7 - tmp_209*tmp_231) + tmp_219*(7.0*(tmp_217*tmp_217)*tmp_7 - tmp_217*tmp_231) + tmp_59*(-tmp_231*tmp_43 + 7.0*(tmp_43*tmp_43)*tmp_7) + tmp_67*(-tmp_231*tmp_65 + 7.0*(tmp_65*tmp_65)*tmp_7) + tmp_75*(-tmp_231*tmp_73 + 7.0*tmp_7*(tmp_73*tmp_73)) + tmp_83*(-tmp_231*tmp_81 + 7.0*tmp_7*(tmp_81*tmp_81)) + tmp_91*(-tmp_231*tmp_89 + 7.0*tmp_7*(tmp_89*tmp_89)) + tmp_99*(-tmp_231*tmp_97 + 7.0*tmp_7*(tmp_97*tmp_97));
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
      elMat( 1, 0) = a_1_0;
      elMat( 1, 1) = a_1_1;
      elMat( 1, 2) = a_1_2;
      elMat( 1, 3) = a_1_3;
      elMat( 2, 0) = a_2_0;
      elMat( 2, 1) = a_2_1;
      elMat( 2, 2) = a_2_2;
      elMat( 2, 3) = a_2_3;
      elMat( 3, 0) = a_3_0;
      elMat( 3, 1) = a_3_1;
      elMat( 3, 2) = a_3_2;
      elMat( 3, 3) = a_3_3;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;


private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_EP1_2 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_EP1_2()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_0_1 = 0;
      real_t a_0_2 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7);
      real_t tmp_16 = 2.0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_10 - tmp_14;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = 1.0*tmp_15;
      real_t tmp_23 = tmp_11*tmp_18*tmp_22 + tmp_20*tmp_22*tmp_8 + tmp_22*tmp_6*tmp_7;
      real_t tmp_24 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_25 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_26 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_27 = 0.5*tmp_15;
      real_t tmp_28 = tmp_20*tmp_27;
      real_t tmp_29 = tmp_18*tmp_27;
      real_t tmp_30 = tmp_27*tmp_6;
      real_t tmp_31 = tmp_27*tmp_8;
      real_t tmp_32 = tmp_11*tmp_27;
      real_t tmp_33 = tmp_27*tmp_7;
      real_t tmp_34 = tmp_1*tmp_29 + tmp_24*tmp_33 + tmp_25*tmp_32 + tmp_26*tmp_31 + tmp_28*tmp_4 + tmp_30*tmp_9;
      real_t tmp_35 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_36 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_37 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_38 = tmp_0*tmp_28 + tmp_12*tmp_30 + tmp_29*tmp_3 + tmp_31*tmp_37 + tmp_32*tmp_36 + tmp_33*tmp_35;
      real_t tmp_39 = p_affine_0_0*p_affine_1_1;
      real_t tmp_40 = p_affine_0_0*p_affine_1_2;
      real_t tmp_41 = p_affine_2_1*p_affine_3_2;
      real_t tmp_42 = p_affine_0_1*p_affine_1_0;
      real_t tmp_43 = p_affine_0_1*p_affine_1_2;
      real_t tmp_44 = p_affine_2_2*p_affine_3_0;
      real_t tmp_45 = p_affine_0_2*p_affine_1_0;
      real_t tmp_46 = p_affine_0_2*p_affine_1_1;
      real_t tmp_47 = p_affine_2_0*p_affine_3_1;
      real_t tmp_48 = p_affine_2_2*p_affine_3_1;
      real_t tmp_49 = p_affine_2_0*p_affine_3_2;
      real_t tmp_50 = p_affine_2_1*p_affine_3_0;
      real_t tmp_51 = std::abs(p_affine_0_0*tmp_41 - p_affine_0_0*tmp_48 + p_affine_0_1*tmp_44 - p_affine_0_1*tmp_49 + p_affine_0_2*tmp_47 - p_affine_0_2*tmp_50 - p_affine_1_0*tmp_41 + p_affine_1_0*tmp_48 - p_affine_1_1*tmp_44 + p_affine_1_1*tmp_49 - p_affine_1_2*tmp_47 + p_affine_1_2*tmp_50 + p_affine_2_0*tmp_43 - p_affine_2_0*tmp_46 - p_affine_2_1*tmp_40 + p_affine_2_1*tmp_45 + p_affine_2_2*tmp_39 - p_affine_2_2*tmp_42 - p_affine_3_0*tmp_43 + p_affine_3_0*tmp_46 + p_affine_3_1*tmp_40 - p_affine_3_1*tmp_45 - p_affine_3_2*tmp_39 + p_affine_3_2*tmp_42);
      real_t tmp_52 = tmp_51*(tmp_23*(-tmp_17 - tmp_19 - tmp_21) + 2*tmp_34*(-tmp_22*tmp_24 - tmp_22*tmp_25 - tmp_22*tmp_26) + 2*tmp_38*(-tmp_22*tmp_35 - tmp_22*tmp_36 - tmp_22*tmp_37));
      real_t tmp_53 = tmp_16*tmp_34;
      real_t tmp_54 = tmp_16*tmp_38;
      real_t tmp_55 = tmp_51*(tmp_21*tmp_23 + tmp_26*tmp_53 + tmp_37*tmp_54);
      real_t tmp_56 = tmp_51*(tmp_19*tmp_23 + tmp_25*tmp_53 + tmp_36*tmp_54);
      real_t tmp_57 = tmp_51*(tmp_17*tmp_23 + tmp_24*tmp_53 + tmp_35*tmp_54);
      real_t a_0_0 = 0.1666666666666668*tmp_52;
      real_t a_0_1 = 0.1666666666666668*tmp_55;
      real_t a_0_2 = 0.1666666666666668*tmp_56;
      real_t a_0_3 = 0.1666666666666668*tmp_57;
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_2;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_54 = tmp_41*tmp_46;
      real_t tmp_55 = tmp_36*tmp_46;
      real_t tmp_56 = tmp_21*tmp_46;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_40*tmp_60;
      real_t tmp_62 = tmp_35*tmp_60;
      real_t tmp_63 = tmp_5*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*tmp_50 + 1.0*p_affine_13_1*tmp_57 + 1.0*p_affine_13_2*(-tmp_61 - tmp_62 - tmp_63);
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_46*tmp_5;
      real_t tmp_69 = tmp_35*tmp_46;
      real_t tmp_70 = tmp_40*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_0*tmp_68 + tmp_1*tmp_69 + tmp_10*tmp_48 + tmp_3*tmp_70 + tmp_47*tmp_6 + tmp_49*tmp_8) + 1.0*p_affine_13_1*(tmp_10*tmp_55 + tmp_2*tmp_70 + tmp_4*tmp_69 + tmp_54*tmp_6 + tmp_56*tmp_8 + tmp_68*tmp_9) + 1.0*p_affine_13_2*(tmp_10*tmp_62 + tmp_6*tmp_61 + tmp_63*tmp_8);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_1*tmp_80 + tmp_3*tmp_82;
      real_t tmp_84 = tmp_2*tmp_82 + tmp_4*tmp_80 + tmp_78*tmp_9;
      real_t tmp_85 = tmp_10*tmp_80 + tmp_6*tmp_82 + tmp_78*tmp_8;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_1*tmp_94 + tmp_3*tmp_96;
      real_t tmp_98 = tmp_2*tmp_96 + tmp_4*tmp_94 + tmp_9*tmp_92;
      real_t tmp_99 = tmp_10*tmp_94 + tmp_6*tmp_96 + tmp_8*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_1*tmp_108 + tmp_110*tmp_3;
      real_t tmp_112 = tmp_106*tmp_9 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_113 = tmp_10*tmp_108 + tmp_106*tmp_8 + tmp_110*tmp_6;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_1*tmp_122 + tmp_124*tmp_3;
      real_t tmp_126 = tmp_120*tmp_9 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_127 = tmp_10*tmp_122 + tmp_120*tmp_8 + tmp_124*tmp_6;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_1*tmp_136 + tmp_138*tmp_3;
      real_t tmp_140 = tmp_134*tmp_9 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_141 = tmp_10*tmp_136 + tmp_134*tmp_8 + tmp_138*tmp_6;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_1*tmp_150 + tmp_152*tmp_3;
      real_t tmp_154 = tmp_148*tmp_9 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_155 = tmp_10*tmp_150 + tmp_148*tmp_8 + tmp_152*tmp_6;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_1*tmp_164 + tmp_166*tmp_3;
      real_t tmp_168 = tmp_162*tmp_9 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_169 = tmp_10*tmp_164 + tmp_162*tmp_8 + tmp_166*tmp_6;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_1*tmp_178 + tmp_180*tmp_3;
      real_t tmp_182 = tmp_176*tmp_9 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_183 = tmp_10*tmp_178 + tmp_176*tmp_8 + tmp_180*tmp_6;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_1*tmp_192 + tmp_194*tmp_3;
      real_t tmp_196 = tmp_190*tmp_9 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_197 = tmp_10*tmp_192 + tmp_190*tmp_8 + tmp_194*tmp_6;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_1*tmp_206 + tmp_208*tmp_3;
      real_t tmp_210 = tmp_2*tmp_208 + tmp_204*tmp_9 + tmp_206*tmp_4;
      real_t tmp_211 = tmp_10*tmp_206 + tmp_204*tmp_8 + tmp_208*tmp_6;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_1*tmp_220 + tmp_222*tmp_3;
      real_t tmp_224 = tmp_2*tmp_222 + tmp_218*tmp_9 + tmp_220*tmp_4;
      real_t tmp_225 = tmp_10*tmp_220 + tmp_218*tmp_8 + tmp_222*tmp_6;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_1*tmp_234 + tmp_236*tmp_3;
      real_t tmp_238 = tmp_2*tmp_236 + tmp_232*tmp_9 + tmp_234*tmp_4;
      real_t tmp_239 = tmp_10*tmp_234 + tmp_232*tmp_8 + tmp_236*tmp_6;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_1*tmp_248 + tmp_250*tmp_3;
      real_t tmp_252 = tmp_2*tmp_250 + tmp_246*tmp_9 + tmp_248*tmp_4;
      real_t tmp_253 = tmp_10*tmp_248 + tmp_246*tmp_8 + tmp_250*tmp_6;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_1*tmp_262 + tmp_264*tmp_3;
      real_t tmp_266 = tmp_2*tmp_264 + tmp_260*tmp_9 + tmp_262*tmp_4;
      real_t tmp_267 = tmp_10*tmp_262 + tmp_260*tmp_8 + tmp_264*tmp_6;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_1*tmp_276 + tmp_278*tmp_3;
      real_t tmp_280 = tmp_2*tmp_278 + tmp_274*tmp_9 + tmp_276*tmp_4;
      real_t tmp_281 = tmp_10*tmp_276 + tmp_274*tmp_8 + tmp_278*tmp_6;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_1*tmp_290 + tmp_292*tmp_3;
      real_t tmp_294 = tmp_2*tmp_292 + tmp_288*tmp_9 + tmp_290*tmp_4;
      real_t tmp_295 = tmp_10*tmp_290 + tmp_288*tmp_8 + tmp_292*tmp_6;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_1*tmp_304 + tmp_3*tmp_306;
      real_t tmp_308 = tmp_2*tmp_306 + tmp_302*tmp_9 + tmp_304*tmp_4;
      real_t tmp_309 = tmp_10*tmp_304 + tmp_302*tmp_8 + tmp_306*tmp_6;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_1*tmp_318 + tmp_3*tmp_320;
      real_t tmp_322 = tmp_2*tmp_320 + tmp_316*tmp_9 + tmp_318*tmp_4;
      real_t tmp_323 = tmp_10*tmp_318 + tmp_316*tmp_8 + tmp_320*tmp_6;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_1*tmp_332 + tmp_3*tmp_334;
      real_t tmp_336 = tmp_2*tmp_334 + tmp_330*tmp_9 + tmp_332*tmp_4;
      real_t tmp_337 = tmp_10*tmp_332 + tmp_330*tmp_8 + tmp_334*tmp_6;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_1*tmp_346 + tmp_3*tmp_348;
      real_t tmp_350 = tmp_2*tmp_348 + tmp_344*tmp_9 + tmp_346*tmp_4;
      real_t tmp_351 = tmp_10*tmp_346 + tmp_344*tmp_8 + tmp_348*tmp_6;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_2*tmp_56;
      real_t tmp_355 = p_affine_13_2*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_49 + 1.0*p_affine_13_1*tmp_56 + 1.0*p_affine_13_2*tmp_63;
      real_t tmp_357 = p_affine_13_2*tmp_55;
      real_t tmp_358 = p_affine_13_2*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_48 + 1.0*p_affine_13_1*tmp_55 + 1.0*p_affine_13_2*tmp_62;
      real_t tmp_360 = p_affine_13_2*tmp_54;
      real_t tmp_361 = p_affine_13_2*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_47 + 1.0*p_affine_13_1*tmp_54 + 1.0*p_affine_13_2*tmp_61;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_0_1 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_0_2 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_0_3 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_5*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_13 = tmp_11*tmp_2;
      real_t tmp_14 = tmp_12*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_13 + tmp_0*tmp_9 - tmp_1*tmp_14 + tmp_10*tmp_3 - tmp_10*tmp_6 + tmp_11*tmp_12*tmp_4);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_13 + tmp_9;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_7 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = -tmp_0*tmp_2 + tmp_12*tmp_4;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_10*tmp_4;
      real_t tmp_39 = tmp_10*tmp_2 - tmp_14;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = tmp_0*tmp_5 - tmp_1*tmp_12;
      real_t tmp_42 = -tmp_0*tmp_11 + tmp_1*tmp_10;
      real_t tmp_43 = -tmp_10*tmp_5 + tmp_11*tmp_12;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_1*tmp_40 + tmp_4*tmp_44;
      real_t tmp_46 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_47 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_50 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_51 = tmp_48 - tmp_49*tmp_50;
      real_t tmp_52 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_53 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_54 = tmp_49*tmp_53;
      real_t tmp_55 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_56 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_57 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_58 = tmp_53*tmp_55;
      real_t tmp_59 = tmp_46*tmp_56;
      real_t tmp_60 = tmp_50*tmp_57;
      real_t tmp_61 = 1.0 / (-tmp_47*tmp_58 + tmp_48*tmp_57 - tmp_49*tmp_60 + tmp_50*tmp_55*tmp_56 + tmp_52*tmp_54 - tmp_52*tmp_59);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_51*tmp_62;
      real_t tmp_64 = -tmp_46*tmp_52 + tmp_50*tmp_55;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = -tmp_47*tmp_55 + tmp_49*tmp_52;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_63 - tmp_65 - tmp_67;
      real_t tmp_69 = 1.0*p_affine_13_2;
      real_t tmp_70 = tmp_68*tmp_69;
      real_t tmp_71 = tmp_12*tmp_36 + tmp_2*tmp_44 + tmp_40*tmp_5;
      real_t tmp_72 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_73 = tmp_62*tmp_72;
      real_t tmp_74 = tmp_52*tmp_53 - tmp_60;
      real_t tmp_75 = tmp_62*tmp_74;
      real_t tmp_76 = tmp_47*tmp_57 - tmp_52*tmp_56;
      real_t tmp_77 = tmp_62*tmp_76;
      real_t tmp_78 = -tmp_73 - tmp_75 - tmp_77;
      real_t tmp_79 = tmp_69*tmp_78;
      real_t tmp_80 = tmp_10*tmp_36 + tmp_11*tmp_40 + tmp_44*tmp_8;
      real_t tmp_81 = tmp_54 - tmp_59;
      real_t tmp_82 = 1.0*tmp_61;
      real_t tmp_83 = tmp_81*tmp_82;
      real_t tmp_84 = tmp_46*tmp_57 - tmp_58;
      real_t tmp_85 = tmp_82*tmp_84;
      real_t tmp_86 = -tmp_49*tmp_57 + tmp_55*tmp_56;
      real_t tmp_87 = tmp_82*tmp_86;
      real_t tmp_88 = 1.0*p_affine_13_0*tmp_68 + 1.0*p_affine_13_1*tmp_78 + 1.0*p_affine_13_2*(-tmp_83 - tmp_85 - tmp_87);
      real_t tmp_89 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_90 = tmp_61*(tmp_19 + tmp_89);
      real_t tmp_91 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_92 = tmp_61*(tmp_26 + tmp_91);
      real_t tmp_93 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_94 = tmp_61*(tmp_33 + tmp_93);
      real_t tmp_95 = tmp_66*tmp_94 + tmp_76*tmp_92 + tmp_86*tmp_90;
      real_t tmp_96 = tmp_64*tmp_94 + tmp_74*tmp_92 + tmp_84*tmp_90;
      real_t tmp_97 = tmp_51*tmp_94 + tmp_72*tmp_92 + tmp_81*tmp_90;
      real_t tmp_98 = -tmp_95 - tmp_96 - tmp_97 + 1;
      real_t tmp_99 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_100 = 14.0*std::pow(tmp_99, -0.25);
      real_t tmp_101 = tmp_100*tmp_80;
      real_t tmp_102 = 1.0*tmp_15;
      real_t tmp_103 = 0.5*tmp_15;
      real_t tmp_104 = tmp_103*tmp_7;
      real_t tmp_105 = tmp_103*tmp_37;
      real_t tmp_106 = tmp_103*tmp_41;
      real_t tmp_107 = tmp_10*tmp_103;
      real_t tmp_108 = tmp_103*tmp_11;
      real_t tmp_109 = tmp_103*tmp_8;
      real_t tmp_110 = p_affine_13_0*(tmp_0*tmp_104 + tmp_1*tmp_105 + tmp_106*tmp_4 + tmp_107*tmp_29 + tmp_108*tmp_39 + tmp_109*tmp_43) + p_affine_13_1*(tmp_104*tmp_12 + tmp_105*tmp_5 + tmp_106*tmp_2 + tmp_107*tmp_22 + tmp_108*tmp_38 + tmp_109*tmp_42) + p_affine_13_2*(tmp_10*tmp_102*tmp_7 + tmp_102*tmp_11*tmp_37 + tmp_102*tmp_41*tmp_8);
      real_t tmp_111 = 1.0*std::pow(tmp_99, 1.0/2.0);
      real_t tmp_112 = 0.0068572537431980923*tmp_111;
      real_t tmp_113 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_114 = tmp_15*(tmp_113 + tmp_20);
      real_t tmp_115 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_116 = tmp_15*(tmp_115 + tmp_27);
      real_t tmp_117 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_118 = tmp_15*(tmp_117 + tmp_34);
      real_t tmp_119 = tmp_114*tmp_7 + tmp_116*tmp_22 + tmp_118*tmp_29 - 1.0/4.0;
      real_t tmp_120 = tmp_114*tmp_37 + tmp_116*tmp_38 + tmp_118*tmp_39 - 1.0/4.0;
      real_t tmp_121 = tmp_114*tmp_41 + tmp_116*tmp_42 + tmp_118*tmp_43 - 1.0/4.0;
      real_t tmp_122 = tmp_0*tmp_119 + tmp_1*tmp_120 + tmp_121*tmp_4;
      real_t tmp_123 = tmp_119*tmp_12 + tmp_120*tmp_5 + tmp_121*tmp_2;
      real_t tmp_124 = tmp_10*tmp_119 + tmp_11*tmp_120 + tmp_121*tmp_8;
      real_t tmp_125 = tmp_61*(tmp_113 + tmp_89);
      real_t tmp_126 = tmp_61*(tmp_115 + tmp_91);
      real_t tmp_127 = tmp_61*(tmp_117 + tmp_93);
      real_t tmp_128 = tmp_125*tmp_86 + tmp_126*tmp_76 + tmp_127*tmp_66;
      real_t tmp_129 = tmp_125*tmp_84 + tmp_126*tmp_74 + tmp_127*tmp_64;
      real_t tmp_130 = tmp_125*tmp_81 + tmp_126*tmp_72 + tmp_127*tmp_51;
      real_t tmp_131 = -tmp_128 - tmp_129 - tmp_130 + 1;
      real_t tmp_132 = tmp_100*tmp_124;
      real_t tmp_133 = 0.037198804536718075*tmp_111;
      real_t tmp_134 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_135 = tmp_15*(tmp_134 + tmp_20);
      real_t tmp_136 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_137 = tmp_15*(tmp_136 + tmp_27);
      real_t tmp_138 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_139 = tmp_15*(tmp_138 + tmp_34);
      real_t tmp_140 = tmp_135*tmp_7 + tmp_137*tmp_22 + tmp_139*tmp_29 - 1.0/4.0;
      real_t tmp_141 = tmp_135*tmp_37 + tmp_137*tmp_38 + tmp_139*tmp_39 - 1.0/4.0;
      real_t tmp_142 = tmp_135*tmp_41 + tmp_137*tmp_42 + tmp_139*tmp_43 - 1.0/4.0;
      real_t tmp_143 = tmp_0*tmp_140 + tmp_1*tmp_141 + tmp_142*tmp_4;
      real_t tmp_144 = tmp_12*tmp_140 + tmp_141*tmp_5 + tmp_142*tmp_2;
      real_t tmp_145 = tmp_10*tmp_140 + tmp_11*tmp_141 + tmp_142*tmp_8;
      real_t tmp_146 = tmp_61*(tmp_134 + tmp_89);
      real_t tmp_147 = tmp_61*(tmp_136 + tmp_91);
      real_t tmp_148 = tmp_61*(tmp_138 + tmp_93);
      real_t tmp_149 = tmp_146*tmp_86 + tmp_147*tmp_76 + tmp_148*tmp_66;
      real_t tmp_150 = tmp_146*tmp_84 + tmp_147*tmp_74 + tmp_148*tmp_64;
      real_t tmp_151 = tmp_146*tmp_81 + tmp_147*tmp_72 + tmp_148*tmp_51;
      real_t tmp_152 = -tmp_149 - tmp_150 - tmp_151 + 1;
      real_t tmp_153 = tmp_100*tmp_145;
      real_t tmp_154 = 0.020848748529055869*tmp_111;
      real_t tmp_155 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_156 = tmp_15*(tmp_155 + tmp_20);
      real_t tmp_157 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_158 = tmp_15*(tmp_157 + tmp_27);
      real_t tmp_159 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_160 = tmp_15*(tmp_159 + tmp_34);
      real_t tmp_161 = tmp_156*tmp_7 + tmp_158*tmp_22 + tmp_160*tmp_29 - 1.0/4.0;
      real_t tmp_162 = tmp_156*tmp_37 + tmp_158*tmp_38 + tmp_160*tmp_39 - 1.0/4.0;
      real_t tmp_163 = tmp_156*tmp_41 + tmp_158*tmp_42 + tmp_160*tmp_43 - 1.0/4.0;
      real_t tmp_164 = tmp_0*tmp_161 + tmp_1*tmp_162 + tmp_163*tmp_4;
      real_t tmp_165 = tmp_12*tmp_161 + tmp_162*tmp_5 + tmp_163*tmp_2;
      real_t tmp_166 = tmp_10*tmp_161 + tmp_11*tmp_162 + tmp_163*tmp_8;
      real_t tmp_167 = tmp_61*(tmp_155 + tmp_89);
      real_t tmp_168 = tmp_61*(tmp_157 + tmp_91);
      real_t tmp_169 = tmp_61*(tmp_159 + tmp_93);
      real_t tmp_170 = tmp_167*tmp_86 + tmp_168*tmp_76 + tmp_169*tmp_66;
      real_t tmp_171 = tmp_167*tmp_84 + tmp_168*tmp_74 + tmp_169*tmp_64;
      real_t tmp_172 = tmp_167*tmp_81 + tmp_168*tmp_72 + tmp_169*tmp_51;
      real_t tmp_173 = -tmp_170 - tmp_171 - tmp_172 + 1;
      real_t tmp_174 = tmp_100*tmp_166;
      real_t tmp_175 = 0.019202922745021479*tmp_111;
      real_t tmp_176 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_177 = tmp_15*(tmp_176 + tmp_20);
      real_t tmp_178 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_179 = tmp_15*(tmp_178 + tmp_27);
      real_t tmp_180 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_181 = tmp_15*(tmp_180 + tmp_34);
      real_t tmp_182 = tmp_177*tmp_7 + tmp_179*tmp_22 + tmp_181*tmp_29 - 1.0/4.0;
      real_t tmp_183 = tmp_177*tmp_37 + tmp_179*tmp_38 + tmp_181*tmp_39 - 1.0/4.0;
      real_t tmp_184 = tmp_177*tmp_41 + tmp_179*tmp_42 + tmp_181*tmp_43 - 1.0/4.0;
      real_t tmp_185 = tmp_0*tmp_182 + tmp_1*tmp_183 + tmp_184*tmp_4;
      real_t tmp_186 = tmp_12*tmp_182 + tmp_183*tmp_5 + tmp_184*tmp_2;
      real_t tmp_187 = tmp_10*tmp_182 + tmp_11*tmp_183 + tmp_184*tmp_8;
      real_t tmp_188 = tmp_61*(tmp_176 + tmp_89);
      real_t tmp_189 = tmp_61*(tmp_178 + tmp_91);
      real_t tmp_190 = tmp_61*(tmp_180 + tmp_93);
      real_t tmp_191 = tmp_188*tmp_86 + tmp_189*tmp_76 + tmp_190*tmp_66;
      real_t tmp_192 = tmp_188*tmp_84 + tmp_189*tmp_74 + tmp_190*tmp_64;
      real_t tmp_193 = tmp_188*tmp_81 + tmp_189*tmp_72 + tmp_190*tmp_51;
      real_t tmp_194 = -tmp_191 - tmp_192 - tmp_193 + 1;
      real_t tmp_195 = tmp_100*tmp_187;
      real_t tmp_196 = 0.020848748529055869*tmp_111;
      real_t tmp_197 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_198 = tmp_15*(tmp_197 + tmp_20);
      real_t tmp_199 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_27);
      real_t tmp_201 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_34);
      real_t tmp_203 = tmp_198*tmp_7 + tmp_200*tmp_22 + tmp_202*tmp_29 - 1.0/4.0;
      real_t tmp_204 = tmp_198*tmp_37 + tmp_200*tmp_38 + tmp_202*tmp_39 - 1.0/4.0;
      real_t tmp_205 = tmp_198*tmp_41 + tmp_200*tmp_42 + tmp_202*tmp_43 - 1.0/4.0;
      real_t tmp_206 = tmp_0*tmp_203 + tmp_1*tmp_204 + tmp_205*tmp_4;
      real_t tmp_207 = tmp_12*tmp_203 + tmp_2*tmp_205 + tmp_204*tmp_5;
      real_t tmp_208 = tmp_10*tmp_203 + tmp_11*tmp_204 + tmp_205*tmp_8;
      real_t tmp_209 = tmp_61*(tmp_197 + tmp_89);
      real_t tmp_210 = tmp_61*(tmp_199 + tmp_91);
      real_t tmp_211 = tmp_61*(tmp_201 + tmp_93);
      real_t tmp_212 = tmp_209*tmp_86 + tmp_210*tmp_76 + tmp_211*tmp_66;
      real_t tmp_213 = tmp_209*tmp_84 + tmp_210*tmp_74 + tmp_211*tmp_64;
      real_t tmp_214 = tmp_209*tmp_81 + tmp_210*tmp_72 + tmp_211*tmp_51;
      real_t tmp_215 = -tmp_212 - tmp_213 - tmp_214 + 1;
      real_t tmp_216 = tmp_100*tmp_208;
      real_t tmp_217 = 0.019202922745021479*tmp_111;
      real_t tmp_218 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_219 = tmp_15*(tmp_20 + tmp_218);
      real_t tmp_220 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_221 = tmp_15*(tmp_220 + tmp_27);
      real_t tmp_222 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_223 = tmp_15*(tmp_222 + tmp_34);
      real_t tmp_224 = tmp_219*tmp_7 + tmp_22*tmp_221 + tmp_223*tmp_29 - 1.0/4.0;
      real_t tmp_225 = tmp_219*tmp_37 + tmp_221*tmp_38 + tmp_223*tmp_39 - 1.0/4.0;
      real_t tmp_226 = tmp_219*tmp_41 + tmp_221*tmp_42 + tmp_223*tmp_43 - 1.0/4.0;
      real_t tmp_227 = tmp_0*tmp_224 + tmp_1*tmp_225 + tmp_226*tmp_4;
      real_t tmp_228 = tmp_12*tmp_224 + tmp_2*tmp_226 + tmp_225*tmp_5;
      real_t tmp_229 = tmp_10*tmp_224 + tmp_11*tmp_225 + tmp_226*tmp_8;
      real_t tmp_230 = tmp_61*(tmp_218 + tmp_89);
      real_t tmp_231 = tmp_61*(tmp_220 + tmp_91);
      real_t tmp_232 = tmp_61*(tmp_222 + tmp_93);
      real_t tmp_233 = tmp_230*tmp_86 + tmp_231*tmp_76 + tmp_232*tmp_66;
      real_t tmp_234 = tmp_230*tmp_84 + tmp_231*tmp_74 + tmp_232*tmp_64;
      real_t tmp_235 = tmp_230*tmp_81 + tmp_231*tmp_72 + tmp_232*tmp_51;
      real_t tmp_236 = -tmp_233 - tmp_234 - tmp_235 + 1;
      real_t tmp_237 = tmp_100*tmp_229;
      real_t tmp_238 = 0.020848748529055869*tmp_111;
      real_t tmp_239 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_240 = tmp_15*(tmp_20 + tmp_239);
      real_t tmp_241 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_242 = tmp_15*(tmp_241 + tmp_27);
      real_t tmp_243 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_244 = tmp_15*(tmp_243 + tmp_34);
      real_t tmp_245 = tmp_22*tmp_242 + tmp_240*tmp_7 + tmp_244*tmp_29 - 1.0/4.0;
      real_t tmp_246 = tmp_240*tmp_37 + tmp_242*tmp_38 + tmp_244*tmp_39 - 1.0/4.0;
      real_t tmp_247 = tmp_240*tmp_41 + tmp_242*tmp_42 + tmp_244*tmp_43 - 1.0/4.0;
      real_t tmp_248 = tmp_0*tmp_245 + tmp_1*tmp_246 + tmp_247*tmp_4;
      real_t tmp_249 = tmp_12*tmp_245 + tmp_2*tmp_247 + tmp_246*tmp_5;
      real_t tmp_250 = tmp_10*tmp_245 + tmp_11*tmp_246 + tmp_247*tmp_8;
      real_t tmp_251 = tmp_61*(tmp_239 + tmp_89);
      real_t tmp_252 = tmp_61*(tmp_241 + tmp_91);
      real_t tmp_253 = tmp_61*(tmp_243 + tmp_93);
      real_t tmp_254 = tmp_251*tmp_86 + tmp_252*tmp_76 + tmp_253*tmp_66;
      real_t tmp_255 = tmp_251*tmp_84 + tmp_252*tmp_74 + tmp_253*tmp_64;
      real_t tmp_256 = tmp_251*tmp_81 + tmp_252*tmp_72 + tmp_253*tmp_51;
      real_t tmp_257 = -tmp_254 - tmp_255 - tmp_256 + 1;
      real_t tmp_258 = tmp_100*tmp_250;
      real_t tmp_259 = 0.019202922745021479*tmp_111;
      real_t tmp_260 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_261 = tmp_15*(tmp_20 + tmp_260);
      real_t tmp_262 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_263 = tmp_15*(tmp_262 + tmp_27);
      real_t tmp_264 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_265 = tmp_15*(tmp_264 + tmp_34);
      real_t tmp_266 = tmp_22*tmp_263 + tmp_261*tmp_7 + tmp_265*tmp_29 - 1.0/4.0;
      real_t tmp_267 = tmp_261*tmp_37 + tmp_263*tmp_38 + tmp_265*tmp_39 - 1.0/4.0;
      real_t tmp_268 = tmp_261*tmp_41 + tmp_263*tmp_42 + tmp_265*tmp_43 - 1.0/4.0;
      real_t tmp_269 = tmp_0*tmp_266 + tmp_1*tmp_267 + tmp_268*tmp_4;
      real_t tmp_270 = tmp_12*tmp_266 + tmp_2*tmp_268 + tmp_267*tmp_5;
      real_t tmp_271 = tmp_10*tmp_266 + tmp_11*tmp_267 + tmp_268*tmp_8;
      real_t tmp_272 = tmp_61*(tmp_260 + tmp_89);
      real_t tmp_273 = tmp_61*(tmp_262 + tmp_91);
      real_t tmp_274 = tmp_61*(tmp_264 + tmp_93);
      real_t tmp_275 = tmp_272*tmp_86 + tmp_273*tmp_76 + tmp_274*tmp_66;
      real_t tmp_276 = tmp_272*tmp_84 + tmp_273*tmp_74 + tmp_274*tmp_64;
      real_t tmp_277 = tmp_272*tmp_81 + tmp_273*tmp_72 + tmp_274*tmp_51;
      real_t tmp_278 = -tmp_275 - tmp_276 - tmp_277 + 1;
      real_t tmp_279 = tmp_100*tmp_271;
      real_t tmp_280 = 0.020848748529055869*tmp_111;
      real_t tmp_281 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_282 = tmp_15*(tmp_20 + tmp_281);
      real_t tmp_283 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_284 = tmp_15*(tmp_27 + tmp_283);
      real_t tmp_285 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_286 = tmp_15*(tmp_285 + tmp_34);
      real_t tmp_287 = tmp_22*tmp_284 + tmp_282*tmp_7 + tmp_286*tmp_29 - 1.0/4.0;
      real_t tmp_288 = tmp_282*tmp_37 + tmp_284*tmp_38 + tmp_286*tmp_39 - 1.0/4.0;
      real_t tmp_289 = tmp_282*tmp_41 + tmp_284*tmp_42 + tmp_286*tmp_43 - 1.0/4.0;
      real_t tmp_290 = tmp_0*tmp_287 + tmp_1*tmp_288 + tmp_289*tmp_4;
      real_t tmp_291 = tmp_12*tmp_287 + tmp_2*tmp_289 + tmp_288*tmp_5;
      real_t tmp_292 = tmp_10*tmp_287 + tmp_11*tmp_288 + tmp_289*tmp_8;
      real_t tmp_293 = tmp_61*(tmp_281 + tmp_89);
      real_t tmp_294 = tmp_61*(tmp_283 + tmp_91);
      real_t tmp_295 = tmp_61*(tmp_285 + tmp_93);
      real_t tmp_296 = tmp_293*tmp_86 + tmp_294*tmp_76 + tmp_295*tmp_66;
      real_t tmp_297 = tmp_293*tmp_84 + tmp_294*tmp_74 + tmp_295*tmp_64;
      real_t tmp_298 = tmp_293*tmp_81 + tmp_294*tmp_72 + tmp_295*tmp_51;
      real_t tmp_299 = -tmp_296 - tmp_297 - tmp_298 + 1;
      real_t tmp_300 = tmp_100*tmp_292;
      real_t tmp_301 = 0.019202922745021479*tmp_111;
      real_t tmp_302 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_303 = tmp_15*(tmp_20 + tmp_302);
      real_t tmp_304 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_305 = tmp_15*(tmp_27 + tmp_304);
      real_t tmp_306 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_307 = tmp_15*(tmp_306 + tmp_34);
      real_t tmp_308 = tmp_22*tmp_305 + tmp_29*tmp_307 + tmp_303*tmp_7 - 1.0/4.0;
      real_t tmp_309 = tmp_303*tmp_37 + tmp_305*tmp_38 + tmp_307*tmp_39 - 1.0/4.0;
      real_t tmp_310 = tmp_303*tmp_41 + tmp_305*tmp_42 + tmp_307*tmp_43 - 1.0/4.0;
      real_t tmp_311 = tmp_0*tmp_308 + tmp_1*tmp_309 + tmp_310*tmp_4;
      real_t tmp_312 = tmp_12*tmp_308 + tmp_2*tmp_310 + tmp_309*tmp_5;
      real_t tmp_313 = tmp_10*tmp_308 + tmp_11*tmp_309 + tmp_310*tmp_8;
      real_t tmp_314 = tmp_61*(tmp_302 + tmp_89);
      real_t tmp_315 = tmp_61*(tmp_304 + tmp_91);
      real_t tmp_316 = tmp_61*(tmp_306 + tmp_93);
      real_t tmp_317 = tmp_314*tmp_86 + tmp_315*tmp_76 + tmp_316*tmp_66;
      real_t tmp_318 = tmp_314*tmp_84 + tmp_315*tmp_74 + tmp_316*tmp_64;
      real_t tmp_319 = tmp_314*tmp_81 + tmp_315*tmp_72 + tmp_316*tmp_51;
      real_t tmp_320 = -tmp_317 - tmp_318 - tmp_319 + 1;
      real_t tmp_321 = tmp_100*tmp_313;
      real_t tmp_322 = 0.020848748529055869*tmp_111;
      real_t tmp_323 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_324 = tmp_15*(tmp_20 + tmp_323);
      real_t tmp_325 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_326 = tmp_15*(tmp_27 + tmp_325);
      real_t tmp_327 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_328 = tmp_15*(tmp_327 + tmp_34);
      real_t tmp_329 = tmp_22*tmp_326 + tmp_29*tmp_328 + tmp_324*tmp_7 - 1.0/4.0;
      real_t tmp_330 = tmp_324*tmp_37 + tmp_326*tmp_38 + tmp_328*tmp_39 - 1.0/4.0;
      real_t tmp_331 = tmp_324*tmp_41 + tmp_326*tmp_42 + tmp_328*tmp_43 - 1.0/4.0;
      real_t tmp_332 = tmp_0*tmp_329 + tmp_1*tmp_330 + tmp_331*tmp_4;
      real_t tmp_333 = tmp_12*tmp_329 + tmp_2*tmp_331 + tmp_330*tmp_5;
      real_t tmp_334 = tmp_10*tmp_329 + tmp_11*tmp_330 + tmp_331*tmp_8;
      real_t tmp_335 = tmp_61*(tmp_323 + tmp_89);
      real_t tmp_336 = tmp_61*(tmp_325 + tmp_91);
      real_t tmp_337 = tmp_61*(tmp_327 + tmp_93);
      real_t tmp_338 = tmp_335*tmp_86 + tmp_336*tmp_76 + tmp_337*tmp_66;
      real_t tmp_339 = tmp_335*tmp_84 + tmp_336*tmp_74 + tmp_337*tmp_64;
      real_t tmp_340 = tmp_335*tmp_81 + tmp_336*tmp_72 + tmp_337*tmp_51;
      real_t tmp_341 = -tmp_338 - tmp_339 - tmp_340 + 1;
      real_t tmp_342 = tmp_100*tmp_334;
      real_t tmp_343 = 0.019202922745021479*tmp_111;
      real_t tmp_344 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_345 = tmp_15*(tmp_20 + tmp_344);
      real_t tmp_346 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_347 = tmp_15*(tmp_27 + tmp_346);
      real_t tmp_348 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_349 = tmp_15*(tmp_34 + tmp_348);
      real_t tmp_350 = tmp_22*tmp_347 + tmp_29*tmp_349 + tmp_345*tmp_7 - 1.0/4.0;
      real_t tmp_351 = tmp_345*tmp_37 + tmp_347*tmp_38 + tmp_349*tmp_39 - 1.0/4.0;
      real_t tmp_352 = tmp_345*tmp_41 + tmp_347*tmp_42 + tmp_349*tmp_43 - 1.0/4.0;
      real_t tmp_353 = tmp_0*tmp_350 + tmp_1*tmp_351 + tmp_352*tmp_4;
      real_t tmp_354 = tmp_12*tmp_350 + tmp_2*tmp_352 + tmp_351*tmp_5;
      real_t tmp_355 = tmp_10*tmp_350 + tmp_11*tmp_351 + tmp_352*tmp_8;
      real_t tmp_356 = tmp_61*(tmp_344 + tmp_89);
      real_t tmp_357 = tmp_61*(tmp_346 + tmp_91);
      real_t tmp_358 = tmp_61*(tmp_348 + tmp_93);
      real_t tmp_359 = tmp_356*tmp_86 + tmp_357*tmp_76 + tmp_358*tmp_66;
      real_t tmp_360 = tmp_356*tmp_84 + tmp_357*tmp_74 + tmp_358*tmp_64;
      real_t tmp_361 = tmp_356*tmp_81 + tmp_357*tmp_72 + tmp_358*tmp_51;
      real_t tmp_362 = -tmp_359 - tmp_360 - tmp_361 + 1;
      real_t tmp_363 = tmp_100*tmp_355;
      real_t tmp_364 = 0.042507265838595799*tmp_111;
      real_t tmp_365 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_366 = tmp_15*(tmp_20 + tmp_365);
      real_t tmp_367 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_368 = tmp_15*(tmp_27 + tmp_367);
      real_t tmp_369 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_370 = tmp_15*(tmp_34 + tmp_369);
      real_t tmp_371 = tmp_22*tmp_368 + tmp_29*tmp_370 + tmp_366*tmp_7 - 1.0/4.0;
      real_t tmp_372 = tmp_366*tmp_37 + tmp_368*tmp_38 + tmp_370*tmp_39 - 1.0/4.0;
      real_t tmp_373 = tmp_366*tmp_41 + tmp_368*tmp_42 + tmp_370*tmp_43 - 1.0/4.0;
      real_t tmp_374 = tmp_0*tmp_371 + tmp_1*tmp_372 + tmp_373*tmp_4;
      real_t tmp_375 = tmp_12*tmp_371 + tmp_2*tmp_373 + tmp_372*tmp_5;
      real_t tmp_376 = tmp_10*tmp_371 + tmp_11*tmp_372 + tmp_373*tmp_8;
      real_t tmp_377 = tmp_61*(tmp_365 + tmp_89);
      real_t tmp_378 = tmp_61*(tmp_367 + tmp_91);
      real_t tmp_379 = tmp_61*(tmp_369 + tmp_93);
      real_t tmp_380 = tmp_377*tmp_86 + tmp_378*tmp_76 + tmp_379*tmp_66;
      real_t tmp_381 = tmp_377*tmp_84 + tmp_378*tmp_74 + tmp_379*tmp_64;
      real_t tmp_382 = tmp_377*tmp_81 + tmp_378*tmp_72 + tmp_379*tmp_51;
      real_t tmp_383 = -tmp_380 - tmp_381 - tmp_382 + 1;
      real_t tmp_384 = tmp_100*tmp_376;
      real_t tmp_385 = 0.020848748529055869*tmp_111;
      real_t tmp_386 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_387 = tmp_15*(tmp_20 + tmp_386);
      real_t tmp_388 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_389 = tmp_15*(tmp_27 + tmp_388);
      real_t tmp_390 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_391 = tmp_15*(tmp_34 + tmp_390);
      real_t tmp_392 = tmp_22*tmp_389 + tmp_29*tmp_391 + tmp_387*tmp_7 - 1.0/4.0;
      real_t tmp_393 = tmp_37*tmp_387 + tmp_38*tmp_389 + tmp_39*tmp_391 - 1.0/4.0;
      real_t tmp_394 = tmp_387*tmp_41 + tmp_389*tmp_42 + tmp_391*tmp_43 - 1.0/4.0;
      real_t tmp_395 = tmp_0*tmp_392 + tmp_1*tmp_393 + tmp_394*tmp_4;
      real_t tmp_396 = tmp_12*tmp_392 + tmp_2*tmp_394 + tmp_393*tmp_5;
      real_t tmp_397 = tmp_10*tmp_392 + tmp_11*tmp_393 + tmp_394*tmp_8;
      real_t tmp_398 = tmp_61*(tmp_386 + tmp_89);
      real_t tmp_399 = tmp_61*(tmp_388 + tmp_91);
      real_t tmp_400 = tmp_61*(tmp_390 + tmp_93);
      real_t tmp_401 = tmp_398*tmp_86 + tmp_399*tmp_76 + tmp_400*tmp_66;
      real_t tmp_402 = tmp_398*tmp_84 + tmp_399*tmp_74 + tmp_400*tmp_64;
      real_t tmp_403 = tmp_398*tmp_81 + tmp_399*tmp_72 + tmp_400*tmp_51;
      real_t tmp_404 = -tmp_401 - tmp_402 - tmp_403 + 1;
      real_t tmp_405 = tmp_100*tmp_397;
      real_t tmp_406 = 0.0068572537431980923*tmp_111;
      real_t tmp_407 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_408 = tmp_15*(tmp_20 + tmp_407);
      real_t tmp_409 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_410 = tmp_15*(tmp_27 + tmp_409);
      real_t tmp_411 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_412 = tmp_15*(tmp_34 + tmp_411);
      real_t tmp_413 = tmp_22*tmp_410 + tmp_29*tmp_412 + tmp_408*tmp_7 - 1.0/4.0;
      real_t tmp_414 = tmp_37*tmp_408 + tmp_38*tmp_410 + tmp_39*tmp_412 - 1.0/4.0;
      real_t tmp_415 = tmp_408*tmp_41 + tmp_410*tmp_42 + tmp_412*tmp_43 - 1.0/4.0;
      real_t tmp_416 = tmp_0*tmp_413 + tmp_1*tmp_414 + tmp_4*tmp_415;
      real_t tmp_417 = tmp_12*tmp_413 + tmp_2*tmp_415 + tmp_414*tmp_5;
      real_t tmp_418 = tmp_10*tmp_413 + tmp_11*tmp_414 + tmp_415*tmp_8;
      real_t tmp_419 = tmp_61*(tmp_407 + tmp_89);
      real_t tmp_420 = tmp_61*(tmp_409 + tmp_91);
      real_t tmp_421 = tmp_61*(tmp_411 + tmp_93);
      real_t tmp_422 = tmp_419*tmp_86 + tmp_420*tmp_76 + tmp_421*tmp_66;
      real_t tmp_423 = tmp_419*tmp_84 + tmp_420*tmp_74 + tmp_421*tmp_64;
      real_t tmp_424 = tmp_419*tmp_81 + tmp_420*tmp_72 + tmp_421*tmp_51;
      real_t tmp_425 = -tmp_422 - tmp_423 - tmp_424 + 1;
      real_t tmp_426 = tmp_100*tmp_418;
      real_t tmp_427 = 0.037198804536718075*tmp_111;
      real_t tmp_428 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_429 = tmp_15*(tmp_20 + tmp_428);
      real_t tmp_430 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_431 = tmp_15*(tmp_27 + tmp_430);
      real_t tmp_432 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_433 = tmp_15*(tmp_34 + tmp_432);
      real_t tmp_434 = tmp_22*tmp_431 + tmp_29*tmp_433 + tmp_429*tmp_7 - 1.0/4.0;
      real_t tmp_435 = tmp_37*tmp_429 + tmp_38*tmp_431 + tmp_39*tmp_433 - 1.0/4.0;
      real_t tmp_436 = tmp_41*tmp_429 + tmp_42*tmp_431 + tmp_43*tmp_433 - 1.0/4.0;
      real_t tmp_437 = tmp_0*tmp_434 + tmp_1*tmp_435 + tmp_4*tmp_436;
      real_t tmp_438 = tmp_12*tmp_434 + tmp_2*tmp_436 + tmp_435*tmp_5;
      real_t tmp_439 = tmp_10*tmp_434 + tmp_11*tmp_435 + tmp_436*tmp_8;
      real_t tmp_440 = tmp_61*(tmp_428 + tmp_89);
      real_t tmp_441 = tmp_61*(tmp_430 + tmp_91);
      real_t tmp_442 = tmp_61*(tmp_432 + tmp_93);
      real_t tmp_443 = tmp_440*tmp_86 + tmp_441*tmp_76 + tmp_442*tmp_66;
      real_t tmp_444 = tmp_440*tmp_84 + tmp_441*tmp_74 + tmp_442*tmp_64;
      real_t tmp_445 = tmp_440*tmp_81 + tmp_441*tmp_72 + tmp_442*tmp_51;
      real_t tmp_446 = -tmp_443 - tmp_444 - tmp_445 + 1;
      real_t tmp_447 = tmp_100*tmp_439;
      real_t tmp_448 = 0.042507265838595799*tmp_111;
      real_t tmp_449 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_450 = tmp_15*(tmp_20 + tmp_449);
      real_t tmp_451 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_452 = tmp_15*(tmp_27 + tmp_451);
      real_t tmp_453 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_454 = tmp_15*(tmp_34 + tmp_453);
      real_t tmp_455 = tmp_22*tmp_452 + tmp_29*tmp_454 + tmp_450*tmp_7 - 1.0/4.0;
      real_t tmp_456 = tmp_37*tmp_450 + tmp_38*tmp_452 + tmp_39*tmp_454 - 1.0/4.0;
      real_t tmp_457 = tmp_41*tmp_450 + tmp_42*tmp_452 + tmp_43*tmp_454 - 1.0/4.0;
      real_t tmp_458 = tmp_0*tmp_455 + tmp_1*tmp_456 + tmp_4*tmp_457;
      real_t tmp_459 = tmp_12*tmp_455 + tmp_2*tmp_457 + tmp_456*tmp_5;
      real_t tmp_460 = tmp_10*tmp_455 + tmp_11*tmp_456 + tmp_457*tmp_8;
      real_t tmp_461 = tmp_61*(tmp_449 + tmp_89);
      real_t tmp_462 = tmp_61*(tmp_451 + tmp_91);
      real_t tmp_463 = tmp_61*(tmp_453 + tmp_93);
      real_t tmp_464 = tmp_461*tmp_86 + tmp_462*tmp_76 + tmp_463*tmp_66;
      real_t tmp_465 = tmp_461*tmp_84 + tmp_462*tmp_74 + tmp_463*tmp_64;
      real_t tmp_466 = tmp_461*tmp_81 + tmp_462*tmp_72 + tmp_463*tmp_51;
      real_t tmp_467 = -tmp_464 - tmp_465 - tmp_466 + 1;
      real_t tmp_468 = tmp_100*tmp_460;
      real_t tmp_469 = 0.0068572537431980923*tmp_111;
      real_t tmp_470 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_471 = tmp_15*(tmp_20 + tmp_470);
      real_t tmp_472 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_473 = tmp_15*(tmp_27 + tmp_472);
      real_t tmp_474 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_475 = tmp_15*(tmp_34 + tmp_474);
      real_t tmp_476 = tmp_22*tmp_473 + tmp_29*tmp_475 + tmp_471*tmp_7 - 1.0/4.0;
      real_t tmp_477 = tmp_37*tmp_471 + tmp_38*tmp_473 + tmp_39*tmp_475 - 1.0/4.0;
      real_t tmp_478 = tmp_41*tmp_471 + tmp_42*tmp_473 + tmp_43*tmp_475 - 1.0/4.0;
      real_t tmp_479 = tmp_0*tmp_476 + tmp_1*tmp_477 + tmp_4*tmp_478;
      real_t tmp_480 = tmp_12*tmp_476 + tmp_2*tmp_478 + tmp_477*tmp_5;
      real_t tmp_481 = tmp_10*tmp_476 + tmp_11*tmp_477 + tmp_478*tmp_8;
      real_t tmp_482 = tmp_61*(tmp_470 + tmp_89);
      real_t tmp_483 = tmp_61*(tmp_472 + tmp_91);
      real_t tmp_484 = tmp_61*(tmp_474 + tmp_93);
      real_t tmp_485 = tmp_482*tmp_86 + tmp_483*tmp_76 + tmp_484*tmp_66;
      real_t tmp_486 = tmp_482*tmp_84 + tmp_483*tmp_74 + tmp_484*tmp_64;
      real_t tmp_487 = tmp_482*tmp_81 + tmp_483*tmp_72 + tmp_484*tmp_51;
      real_t tmp_488 = -tmp_485 - tmp_486 - tmp_487 + 1;
      real_t tmp_489 = tmp_100*tmp_481;
      real_t tmp_490 = 0.037198804536718075*tmp_111;
      real_t tmp_491 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_492 = tmp_15*(tmp_20 + tmp_491);
      real_t tmp_493 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_494 = tmp_15*(tmp_27 + tmp_493);
      real_t tmp_495 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_496 = tmp_15*(tmp_34 + tmp_495);
      real_t tmp_497 = tmp_22*tmp_494 + tmp_29*tmp_496 + tmp_492*tmp_7 - 1.0/4.0;
      real_t tmp_498 = tmp_37*tmp_492 + tmp_38*tmp_494 + tmp_39*tmp_496 - 1.0/4.0;
      real_t tmp_499 = tmp_41*tmp_492 + tmp_42*tmp_494 + tmp_43*tmp_496 - 1.0/4.0;
      real_t tmp_500 = tmp_0*tmp_497 + tmp_1*tmp_498 + tmp_4*tmp_499;
      real_t tmp_501 = tmp_12*tmp_497 + tmp_2*tmp_499 + tmp_498*tmp_5;
      real_t tmp_502 = tmp_10*tmp_497 + tmp_11*tmp_498 + tmp_499*tmp_8;
      real_t tmp_503 = tmp_61*(tmp_491 + tmp_89);
      real_t tmp_504 = tmp_61*(tmp_493 + tmp_91);
      real_t tmp_505 = tmp_61*(tmp_495 + tmp_93);
      real_t tmp_506 = tmp_503*tmp_86 + tmp_504*tmp_76 + tmp_505*tmp_66;
      real_t tmp_507 = tmp_503*tmp_84 + tmp_504*tmp_74 + tmp_505*tmp_64;
      real_t tmp_508 = tmp_503*tmp_81 + tmp_504*tmp_72 + tmp_505*tmp_51;
      real_t tmp_509 = -tmp_506 - tmp_507 - tmp_508 + 1;
      real_t tmp_510 = tmp_100*tmp_502;
      real_t tmp_511 = 0.042507265838595799*tmp_111;
      real_t tmp_512 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_513 = tmp_15*(tmp_20 + tmp_512);
      real_t tmp_514 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_515 = tmp_15*(tmp_27 + tmp_514);
      real_t tmp_516 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_517 = tmp_15*(tmp_34 + tmp_516);
      real_t tmp_518 = tmp_22*tmp_515 + tmp_29*tmp_517 + tmp_513*tmp_7 - 1.0/4.0;
      real_t tmp_519 = tmp_37*tmp_513 + tmp_38*tmp_515 + tmp_39*tmp_517 - 1.0/4.0;
      real_t tmp_520 = tmp_41*tmp_513 + tmp_42*tmp_515 + tmp_43*tmp_517 - 1.0/4.0;
      real_t tmp_521 = tmp_0*tmp_518 + tmp_1*tmp_519 + tmp_4*tmp_520;
      real_t tmp_522 = tmp_12*tmp_518 + tmp_2*tmp_520 + tmp_5*tmp_519;
      real_t tmp_523 = tmp_10*tmp_518 + tmp_11*tmp_519 + tmp_520*tmp_8;
      real_t tmp_524 = tmp_61*(tmp_512 + tmp_89);
      real_t tmp_525 = tmp_61*(tmp_514 + tmp_91);
      real_t tmp_526 = tmp_61*(tmp_516 + tmp_93);
      real_t tmp_527 = tmp_524*tmp_86 + tmp_525*tmp_76 + tmp_526*tmp_66;
      real_t tmp_528 = tmp_524*tmp_84 + tmp_525*tmp_74 + tmp_526*tmp_64;
      real_t tmp_529 = tmp_51*tmp_526 + tmp_524*tmp_81 + tmp_525*tmp_72;
      real_t tmp_530 = -tmp_527 - tmp_528 - tmp_529 + 1;
      real_t tmp_531 = tmp_100*tmp_523;
      real_t tmp_532 = 0.019202922745021479*tmp_111;
      real_t tmp_533 = p_affine_13_2*tmp_77;
      real_t tmp_534 = p_affine_13_2*tmp_67;
      real_t tmp_535 = 1.0*p_affine_13_0*tmp_67 + 1.0*p_affine_13_1*tmp_77 + 1.0*p_affine_13_2*tmp_87;
      real_t tmp_536 = p_affine_13_2*tmp_75;
      real_t tmp_537 = p_affine_13_2*tmp_65;
      real_t tmp_538 = 1.0*p_affine_13_0*tmp_65 + 1.0*p_affine_13_1*tmp_75 + 1.0*p_affine_13_2*tmp_85;
      real_t tmp_539 = p_affine_13_2*tmp_73;
      real_t tmp_540 = p_affine_13_2*tmp_63;
      real_t tmp_541 = 1.0*p_affine_13_0*tmp_63 + 1.0*p_affine_13_1*tmp_73 + 1.0*p_affine_13_2*tmp_83;
      real_t a_0_0 = tmp_112*(-tmp_101*tmp_98 + tmp_110*tmp_98 - tmp_45*tmp_70 - tmp_71*tmp_79 - tmp_80*tmp_88) + tmp_133*(tmp_110*tmp_131 - tmp_122*tmp_70 - tmp_123*tmp_79 - tmp_124*tmp_88 - tmp_131*tmp_132) + tmp_154*(tmp_110*tmp_152 - tmp_143*tmp_70 - tmp_144*tmp_79 - tmp_145*tmp_88 - tmp_152*tmp_153) + tmp_175*(tmp_110*tmp_173 - tmp_164*tmp_70 - tmp_165*tmp_79 - tmp_166*tmp_88 - tmp_173*tmp_174) + tmp_196*(tmp_110*tmp_194 - tmp_185*tmp_70 - tmp_186*tmp_79 - tmp_187*tmp_88 - tmp_194*tmp_195) + tmp_217*(tmp_110*tmp_215 - tmp_206*tmp_70 - tmp_207*tmp_79 - tmp_208*tmp_88 - tmp_215*tmp_216) + tmp_238*(tmp_110*tmp_236 - tmp_227*tmp_70 - tmp_228*tmp_79 - tmp_229*tmp_88 - tmp_236*tmp_237) + tmp_259*(tmp_110*tmp_257 - tmp_248*tmp_70 - tmp_249*tmp_79 - tmp_250*tmp_88 - tmp_257*tmp_258) + tmp_280*(tmp_110*tmp_278 - tmp_269*tmp_70 - tmp_270*tmp_79 - tmp_271*tmp_88 - tmp_278*tmp_279) + tmp_301*(tmp_110*tmp_299 - tmp_290*tmp_70 - tmp_291*tmp_79 - tmp_292*tmp_88 - tmp_299*tmp_300) + tmp_322*(tmp_110*tmp_320 - tmp_311*tmp_70 - tmp_312*tmp_79 - tmp_313*tmp_88 - tmp_320*tmp_321) + tmp_343*(tmp_110*tmp_341 - tmp_332*tmp_70 - tmp_333*tmp_79 - tmp_334*tmp_88 - tmp_341*tmp_342) + tmp_364*(tmp_110*tmp_362 - tmp_353*tmp_70 - tmp_354*tmp_79 - tmp_355*tmp_88 - tmp_362*tmp_363) + tmp_385*(tmp_110*tmp_383 - tmp_374*tmp_70 - tmp_375*tmp_79 - tmp_376*tmp_88 - tmp_383*tmp_384) + tmp_406*(tmp_110*tmp_404 - tmp_395*tmp_70 - tmp_396*tmp_79 - tmp_397*tmp_88 - tmp_404*tmp_405) + tmp_427*(tmp_110*tmp_425 - tmp_416*tmp_70 - tmp_417*tmp_79 - tmp_418*tmp_88 - tmp_425*tmp_426) + tmp_448*(tmp_110*tmp_446 - tmp_437*tmp_70 - tmp_438*tmp_79 - tmp_439*tmp_88 - tmp_446*tmp_447) + tmp_469*(tmp_110*tmp_467 - tmp_458*tmp_70 - tmp_459*tmp_79 - tmp_460*tmp_88 - tmp_467*tmp_468) + tmp_490*(tmp_110*tmp_488 - tmp_479*tmp_70 - tmp_480*tmp_79 - tmp_481*tmp_88 - tmp_488*tmp_489) + tmp_511*(tmp_110*tmp_509 - tmp_500*tmp_70 - tmp_501*tmp_79 - tmp_502*tmp_88 - tmp_509*tmp_510) + tmp_532*(tmp_110*tmp_530 - tmp_521*tmp_70 - tmp_522*tmp_79 - tmp_523*tmp_88 - tmp_530*tmp_531);
      real_t a_0_1 = tmp_112*(-tmp_101*tmp_95 + tmp_110*tmp_95 - tmp_45*tmp_534 - tmp_533*tmp_71 - tmp_535*tmp_80) + tmp_133*(tmp_110*tmp_128 - tmp_122*tmp_534 - tmp_123*tmp_533 - tmp_124*tmp_535 - tmp_128*tmp_132) + tmp_154*(tmp_110*tmp_149 - tmp_143*tmp_534 - tmp_144*tmp_533 - tmp_145*tmp_535 - tmp_149*tmp_153) + tmp_175*(tmp_110*tmp_170 - tmp_164*tmp_534 - tmp_165*tmp_533 - tmp_166*tmp_535 - tmp_170*tmp_174) + tmp_196*(tmp_110*tmp_191 - tmp_185*tmp_534 - tmp_186*tmp_533 - tmp_187*tmp_535 - tmp_191*tmp_195) + tmp_217*(tmp_110*tmp_212 - tmp_206*tmp_534 - tmp_207*tmp_533 - tmp_208*tmp_535 - tmp_212*tmp_216) + tmp_238*(tmp_110*tmp_233 - tmp_227*tmp_534 - tmp_228*tmp_533 - tmp_229*tmp_535 - tmp_233*tmp_237) + tmp_259*(tmp_110*tmp_254 - tmp_248*tmp_534 - tmp_249*tmp_533 - tmp_250*tmp_535 - tmp_254*tmp_258) + tmp_280*(tmp_110*tmp_275 - tmp_269*tmp_534 - tmp_270*tmp_533 - tmp_271*tmp_535 - tmp_275*tmp_279) + tmp_301*(tmp_110*tmp_296 - tmp_290*tmp_534 - tmp_291*tmp_533 - tmp_292*tmp_535 - tmp_296*tmp_300) + tmp_322*(tmp_110*tmp_317 - tmp_311*tmp_534 - tmp_312*tmp_533 - tmp_313*tmp_535 - tmp_317*tmp_321) + tmp_343*(tmp_110*tmp_338 - tmp_332*tmp_534 - tmp_333*tmp_533 - tmp_334*tmp_535 - tmp_338*tmp_342) + tmp_364*(tmp_110*tmp_359 - tmp_353*tmp_534 - tmp_354*tmp_533 - tmp_355*tmp_535 - tmp_359*tmp_363) + tmp_385*(tmp_110*tmp_380 - tmp_374*tmp_534 - tmp_375*tmp_533 - tmp_376*tmp_535 - tmp_380*tmp_384) + tmp_406*(tmp_110*tmp_401 - tmp_395*tmp_534 - tmp_396*tmp_533 - tmp_397*tmp_535 - tmp_401*tmp_405) + tmp_427*(tmp_110*tmp_422 - tmp_416*tmp_534 - tmp_417*tmp_533 - tmp_418*tmp_535 - tmp_422*tmp_426) + tmp_448*(tmp_110*tmp_443 - tmp_437*tmp_534 - tmp_438*tmp_533 - tmp_439*tmp_535 - tmp_443*tmp_447) + tmp_469*(tmp_110*tmp_464 - tmp_458*tmp_534 - tmp_459*tmp_533 - tmp_460*tmp_535 - tmp_464*tmp_468) + tmp_490*(tmp_110*tmp_485 - tmp_479*tmp_534 - tmp_480*tmp_533 - tmp_481*tmp_535 - tmp_485*tmp_489) + tmp_511*(tmp_110*tmp_506 - tmp_500*tmp_534 - tmp_501*tmp_533 - tmp_502*tmp_535 - tmp_506*tmp_510) + tmp_532*(tmp_110*tmp_527 - tmp_521*tmp_534 - tmp_522*tmp_533 - tmp_523*tmp_535 - tmp_527*tmp_531);
      real_t a_0_2 = tmp_112*(-tmp_101*tmp_96 + tmp_110*tmp_96 - tmp_45*tmp_537 - tmp_536*tmp_71 - tmp_538*tmp_80) + tmp_133*(tmp_110*tmp_129 - tmp_122*tmp_537 - tmp_123*tmp_536 - tmp_124*tmp_538 - tmp_129*tmp_132) + tmp_154*(tmp_110*tmp_150 - tmp_143*tmp_537 - tmp_144*tmp_536 - tmp_145*tmp_538 - tmp_150*tmp_153) + tmp_175*(tmp_110*tmp_171 - tmp_164*tmp_537 - tmp_165*tmp_536 - tmp_166*tmp_538 - tmp_171*tmp_174) + tmp_196*(tmp_110*tmp_192 - tmp_185*tmp_537 - tmp_186*tmp_536 - tmp_187*tmp_538 - tmp_192*tmp_195) + tmp_217*(tmp_110*tmp_213 - tmp_206*tmp_537 - tmp_207*tmp_536 - tmp_208*tmp_538 - tmp_213*tmp_216) + tmp_238*(tmp_110*tmp_234 - tmp_227*tmp_537 - tmp_228*tmp_536 - tmp_229*tmp_538 - tmp_234*tmp_237) + tmp_259*(tmp_110*tmp_255 - tmp_248*tmp_537 - tmp_249*tmp_536 - tmp_250*tmp_538 - tmp_255*tmp_258) + tmp_280*(tmp_110*tmp_276 - tmp_269*tmp_537 - tmp_270*tmp_536 - tmp_271*tmp_538 - tmp_276*tmp_279) + tmp_301*(tmp_110*tmp_297 - tmp_290*tmp_537 - tmp_291*tmp_536 - tmp_292*tmp_538 - tmp_297*tmp_300) + tmp_322*(tmp_110*tmp_318 - tmp_311*tmp_537 - tmp_312*tmp_536 - tmp_313*tmp_538 - tmp_318*tmp_321) + tmp_343*(tmp_110*tmp_339 - tmp_332*tmp_537 - tmp_333*tmp_536 - tmp_334*tmp_538 - tmp_339*tmp_342) + tmp_364*(tmp_110*tmp_360 - tmp_353*tmp_537 - tmp_354*tmp_536 - tmp_355*tmp_538 - tmp_360*tmp_363) + tmp_385*(tmp_110*tmp_381 - tmp_374*tmp_537 - tmp_375*tmp_536 - tmp_376*tmp_538 - tmp_381*tmp_384) + tmp_406*(tmp_110*tmp_402 - tmp_395*tmp_537 - tmp_396*tmp_536 - tmp_397*tmp_538 - tmp_402*tmp_405) + tmp_427*(tmp_110*tmp_423 - tmp_416*tmp_537 - tmp_417*tmp_536 - tmp_418*tmp_538 - tmp_423*tmp_426) + tmp_448*(tmp_110*tmp_444 - tmp_437*tmp_537 - tmp_438*tmp_536 - tmp_439*tmp_538 - tmp_444*tmp_447) + tmp_469*(tmp_110*tmp_465 - tmp_458*tmp_537 - tmp_459*tmp_536 - tmp_460*tmp_538 - tmp_465*tmp_468) + tmp_490*(tmp_110*tmp_486 - tmp_479*tmp_537 - tmp_480*tmp_536 - tmp_481*tmp_538 - tmp_486*tmp_489) + tmp_511*(tmp_110*tmp_507 - tmp_500*tmp_537 - tmp_501*tmp_536 - tmp_502*tmp_538 - tmp_507*tmp_510) + tmp_532*(tmp_110*tmp_528 - tmp_521*tmp_537 - tmp_522*tmp_536 - tmp_523*tmp_538 - tmp_528*tmp_531);
      real_t a_0_3 = tmp_112*(-tmp_101*tmp_97 + tmp_110*tmp_97 - tmp_45*tmp_540 - tmp_539*tmp_71 - tmp_541*tmp_80) + tmp_133*(tmp_110*tmp_130 - tmp_122*tmp_540 - tmp_123*tmp_539 - tmp_124*tmp_541 - tmp_130*tmp_132) + tmp_154*(tmp_110*tmp_151 - tmp_143*tmp_540 - tmp_144*tmp_539 - tmp_145*tmp_541 - tmp_151*tmp_153) + tmp_175*(tmp_110*tmp_172 - tmp_164*tmp_540 - tmp_165*tmp_539 - tmp_166*tmp_541 - tmp_172*tmp_174) + tmp_196*(tmp_110*tmp_193 - tmp_185*tmp_540 - tmp_186*tmp_539 - tmp_187*tmp_541 - tmp_193*tmp_195) + tmp_217*(tmp_110*tmp_214 - tmp_206*tmp_540 - tmp_207*tmp_539 - tmp_208*tmp_541 - tmp_214*tmp_216) + tmp_238*(tmp_110*tmp_235 - tmp_227*tmp_540 - tmp_228*tmp_539 - tmp_229*tmp_541 - tmp_235*tmp_237) + tmp_259*(tmp_110*tmp_256 - tmp_248*tmp_540 - tmp_249*tmp_539 - tmp_250*tmp_541 - tmp_256*tmp_258) + tmp_280*(tmp_110*tmp_277 - tmp_269*tmp_540 - tmp_270*tmp_539 - tmp_271*tmp_541 - tmp_277*tmp_279) + tmp_301*(tmp_110*tmp_298 - tmp_290*tmp_540 - tmp_291*tmp_539 - tmp_292*tmp_541 - tmp_298*tmp_300) + tmp_322*(tmp_110*tmp_319 - tmp_311*tmp_540 - tmp_312*tmp_539 - tmp_313*tmp_541 - tmp_319*tmp_321) + tmp_343*(tmp_110*tmp_340 - tmp_332*tmp_540 - tmp_333*tmp_539 - tmp_334*tmp_541 - tmp_340*tmp_342) + tmp_364*(tmp_110*tmp_361 - tmp_353*tmp_540 - tmp_354*tmp_539 - tmp_355*tmp_541 - tmp_361*tmp_363) + tmp_385*(tmp_110*tmp_382 - tmp_374*tmp_540 - tmp_375*tmp_539 - tmp_376*tmp_541 - tmp_382*tmp_384) + tmp_406*(tmp_110*tmp_403 - tmp_395*tmp_540 - tmp_396*tmp_539 - tmp_397*tmp_541 - tmp_403*tmp_405) + tmp_427*(tmp_110*tmp_424 - tmp_416*tmp_540 - tmp_417*tmp_539 - tmp_418*tmp_541 - tmp_424*tmp_426) + tmp_448*(tmp_110*tmp_445 - tmp_437*tmp_540 - tmp_438*tmp_539 - tmp_439*tmp_541 - tmp_445*tmp_447) + tmp_469*(tmp_110*tmp_466 - tmp_458*tmp_540 - tmp_459*tmp_539 - tmp_460*tmp_541 - tmp_466*tmp_468) + tmp_490*(tmp_110*tmp_487 - tmp_479*tmp_540 - tmp_480*tmp_539 - tmp_481*tmp_541 - tmp_487*tmp_489) + tmp_511*(tmp_110*tmp_508 - tmp_500*tmp_540 - tmp_501*tmp_539 - tmp_502*tmp_541 - tmp_508*tmp_510) + tmp_532*(tmp_110*tmp_529 - tmp_521*tmp_540 - tmp_522*tmp_539 - tmp_523*tmp_541 - tmp_529*tmp_531);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_2*tmp_50;
      real_t tmp_52 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_53 = tmp_41*tmp_46;
      real_t tmp_54 = tmp_36*tmp_46;
      real_t tmp_55 = tmp_21*tmp_46;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_2*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_40*tmp_58;
      real_t tmp_60 = tmp_35*tmp_58;
      real_t tmp_61 = tmp_5*tmp_58;
      real_t tmp_62 = p_affine_13_0*tmp_50 + p_affine_13_1*tmp_56 + p_affine_13_2*(-tmp_59 - tmp_60 - tmp_61);
      real_t tmp_63 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_46*tmp_5;
      real_t tmp_68 = tmp_35*tmp_46;
      real_t tmp_69 = tmp_40*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_0*tmp_67 + tmp_1*tmp_68 + tmp_10*tmp_48 + tmp_3*tmp_69 + tmp_47*tmp_6 + tmp_49*tmp_8) + p_affine_13_1*(tmp_10*tmp_54 + tmp_2*tmp_69 + tmp_4*tmp_68 + tmp_53*tmp_6 + tmp_55*tmp_8 + tmp_67*tmp_9) + p_affine_13_2*(tmp_10*tmp_60 + tmp_59*tmp_6 + tmp_61*tmp_8);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_1*tmp_79 + tmp_3*tmp_81;
      real_t tmp_83 = tmp_2*tmp_81 + tmp_4*tmp_79 + tmp_77*tmp_9;
      real_t tmp_84 = tmp_10*tmp_79 + tmp_6*tmp_81 + tmp_77*tmp_8;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_1*tmp_93 + tmp_3*tmp_95;
      real_t tmp_97 = tmp_2*tmp_95 + tmp_4*tmp_93 + tmp_9*tmp_91;
      real_t tmp_98 = tmp_10*tmp_93 + tmp_6*tmp_95 + tmp_8*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_1*tmp_107 + tmp_109*tmp_3;
      real_t tmp_111 = tmp_105*tmp_9 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_112 = tmp_10*tmp_107 + tmp_105*tmp_8 + tmp_109*tmp_6;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_1*tmp_121 + tmp_123*tmp_3;
      real_t tmp_125 = tmp_119*tmp_9 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_126 = tmp_10*tmp_121 + tmp_119*tmp_8 + tmp_123*tmp_6;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_1*tmp_135 + tmp_137*tmp_3;
      real_t tmp_139 = tmp_133*tmp_9 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_140 = tmp_10*tmp_135 + tmp_133*tmp_8 + tmp_137*tmp_6;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_1*tmp_149 + tmp_151*tmp_3;
      real_t tmp_153 = tmp_147*tmp_9 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_154 = tmp_10*tmp_149 + tmp_147*tmp_8 + tmp_151*tmp_6;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_1*tmp_163 + tmp_165*tmp_3;
      real_t tmp_167 = tmp_161*tmp_9 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_168 = tmp_10*tmp_163 + tmp_161*tmp_8 + tmp_165*tmp_6;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_1*tmp_177 + tmp_179*tmp_3;
      real_t tmp_181 = tmp_175*tmp_9 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_182 = tmp_10*tmp_177 + tmp_175*tmp_8 + tmp_179*tmp_6;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_1*tmp_191 + tmp_193*tmp_3;
      real_t tmp_195 = tmp_189*tmp_9 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_196 = tmp_10*tmp_191 + tmp_189*tmp_8 + tmp_193*tmp_6;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_1*tmp_205 + tmp_207*tmp_3;
      real_t tmp_209 = tmp_2*tmp_207 + tmp_203*tmp_9 + tmp_205*tmp_4;
      real_t tmp_210 = tmp_10*tmp_205 + tmp_203*tmp_8 + tmp_207*tmp_6;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_1*tmp_219 + tmp_221*tmp_3;
      real_t tmp_223 = tmp_2*tmp_221 + tmp_217*tmp_9 + tmp_219*tmp_4;
      real_t tmp_224 = tmp_10*tmp_219 + tmp_217*tmp_8 + tmp_221*tmp_6;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_1*tmp_233 + tmp_235*tmp_3;
      real_t tmp_237 = tmp_2*tmp_235 + tmp_231*tmp_9 + tmp_233*tmp_4;
      real_t tmp_238 = tmp_10*tmp_233 + tmp_231*tmp_8 + tmp_235*tmp_6;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_1*tmp_247 + tmp_249*tmp_3;
      real_t tmp_251 = tmp_2*tmp_249 + tmp_245*tmp_9 + tmp_247*tmp_4;
      real_t tmp_252 = tmp_10*tmp_247 + tmp_245*tmp_8 + tmp_249*tmp_6;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_1*tmp_261 + tmp_263*tmp_3;
      real_t tmp_265 = tmp_2*tmp_263 + tmp_259*tmp_9 + tmp_261*tmp_4;
      real_t tmp_266 = tmp_10*tmp_261 + tmp_259*tmp_8 + tmp_263*tmp_6;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_1*tmp_275 + tmp_277*tmp_3;
      real_t tmp_279 = tmp_2*tmp_277 + tmp_273*tmp_9 + tmp_275*tmp_4;
      real_t tmp_280 = tmp_10*tmp_275 + tmp_273*tmp_8 + tmp_277*tmp_6;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_1*tmp_289 + tmp_291*tmp_3;
      real_t tmp_293 = tmp_2*tmp_291 + tmp_287*tmp_9 + tmp_289*tmp_4;
      real_t tmp_294 = tmp_10*tmp_289 + tmp_287*tmp_8 + tmp_291*tmp_6;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_1*tmp_303 + tmp_3*tmp_305;
      real_t tmp_307 = tmp_2*tmp_305 + tmp_301*tmp_9 + tmp_303*tmp_4;
      real_t tmp_308 = tmp_10*tmp_303 + tmp_301*tmp_8 + tmp_305*tmp_6;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_1*tmp_317 + tmp_3*tmp_319;
      real_t tmp_321 = tmp_2*tmp_319 + tmp_315*tmp_9 + tmp_317*tmp_4;
      real_t tmp_322 = tmp_10*tmp_317 + tmp_315*tmp_8 + tmp_319*tmp_6;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_1*tmp_331 + tmp_3*tmp_333;
      real_t tmp_335 = tmp_2*tmp_333 + tmp_329*tmp_9 + tmp_331*tmp_4;
      real_t tmp_336 = tmp_10*tmp_331 + tmp_329*tmp_8 + tmp_333*tmp_6;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_1*tmp_345 + tmp_3*tmp_347;
      real_t tmp_349 = tmp_2*tmp_347 + tmp_343*tmp_9 + tmp_345*tmp_4;
      real_t tmp_350 = tmp_10*tmp_345 + tmp_343*tmp_8 + tmp_347*tmp_6;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_2*tmp_55;
      real_t tmp_354 = p_affine_13_2*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_49 + p_affine_13_1*tmp_55 + p_affine_13_2*tmp_61;
      real_t tmp_356 = p_affine_13_2*tmp_54;
      real_t tmp_357 = p_affine_13_2*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_54 + p_affine_13_2*tmp_60;
      real_t tmp_359 = p_affine_13_2*tmp_53;
      real_t tmp_360 = p_affine_13_2*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_53 + p_affine_13_2*tmp_59;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_0_1 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_0_2 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_0_3 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 0, 1) = a_0_1;
      elMat( 0, 2) = a_0_2;
      elMat( 0, 3) = a_0_3;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_P1E_2 : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_P1E_2()

    {}





 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t a_0_0 = 0;
      real_t a_1_0 = 0;
      real_t a_2_0 = 0;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      elMat( 0, 0) = 0;
      elMat( 1, 0) = 0;
      elMat( 2, 0) = 0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_10 = tmp_3*tmp_9;
      real_t tmp_11 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_12 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_13 = tmp_0*tmp_9;
      real_t tmp_14 = tmp_1*tmp_12;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_8 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_13 - tmp_14*tmp_8 + tmp_2*tmp_7 - tmp_5*tmp_7);
      real_t tmp_16 = 1.0*tmp_15;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = tmp_12*tmp_4 - tmp_13;
      real_t tmp_19 = tmp_16*tmp_18;
      real_t tmp_20 = tmp_10 - tmp_14;
      real_t tmp_21 = tmp_16*tmp_20;
      real_t tmp_22 = tmp_15*tmp_20;
      real_t tmp_23 = tmp_15*tmp_18;
      real_t tmp_24 = tmp_15*tmp_6;
      real_t tmp_25 = 2.0*tmp_11*tmp_23 + 2.0*tmp_22*tmp_8 + 2.0*tmp_24*tmp_7;
      real_t tmp_26 = -tmp_0*tmp_11 + tmp_3*tmp_8;
      real_t tmp_27 = 0.5*tmp_15;
      real_t tmp_28 = tmp_0*tmp_7 - tmp_12*tmp_8;
      real_t tmp_29 = tmp_11*tmp_12 - tmp_3*tmp_7;
      real_t tmp_30 = tmp_15*tmp_8;
      real_t tmp_31 = tmp_11*tmp_15;
      real_t tmp_32 = tmp_15*tmp_7;
      real_t tmp_33 = tmp_1*tmp_23 + tmp_22*tmp_4 + tmp_24*tmp_9 + tmp_26*tmp_32 + tmp_28*tmp_31 + tmp_29*tmp_30;
      real_t tmp_34 = -tmp_1*tmp_8 + tmp_11*tmp_4;
      real_t tmp_35 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_36 = tmp_1*tmp_7 - tmp_11*tmp_9;
      real_t tmp_37 = tmp_0*tmp_22 + tmp_12*tmp_24 + tmp_23*tmp_3 + tmp_30*tmp_36 + tmp_31*tmp_35 + tmp_32*tmp_34;
      real_t tmp_38 = p_affine_0_0*p_affine_1_1;
      real_t tmp_39 = p_affine_0_0*p_affine_1_2;
      real_t tmp_40 = p_affine_2_1*p_affine_3_2;
      real_t tmp_41 = p_affine_0_1*p_affine_1_0;
      real_t tmp_42 = p_affine_0_1*p_affine_1_2;
      real_t tmp_43 = p_affine_2_2*p_affine_3_0;
      real_t tmp_44 = p_affine_0_2*p_affine_1_0;
      real_t tmp_45 = p_affine_0_2*p_affine_1_1;
      real_t tmp_46 = p_affine_2_0*p_affine_3_1;
      real_t tmp_47 = p_affine_2_2*p_affine_3_1;
      real_t tmp_48 = p_affine_2_0*p_affine_3_2;
      real_t tmp_49 = p_affine_2_1*p_affine_3_0;
      real_t tmp_50 = std::abs(p_affine_0_0*tmp_40 - p_affine_0_0*tmp_47 + p_affine_0_1*tmp_43 - p_affine_0_1*tmp_48 + p_affine_0_2*tmp_46 - p_affine_0_2*tmp_49 - p_affine_1_0*tmp_40 + p_affine_1_0*tmp_47 - p_affine_1_1*tmp_43 + p_affine_1_1*tmp_48 - p_affine_1_2*tmp_46 + p_affine_1_2*tmp_49 + p_affine_2_0*tmp_42 - p_affine_2_0*tmp_45 - p_affine_2_1*tmp_39 + p_affine_2_1*tmp_44 + p_affine_2_2*tmp_38 - p_affine_2_2*tmp_41 - p_affine_3_0*tmp_42 + p_affine_3_0*tmp_45 + p_affine_3_1*tmp_39 - p_affine_3_1*tmp_44 - p_affine_3_2*tmp_38 + p_affine_3_2*tmp_41);
      real_t tmp_51 = tmp_50*(tmp_25*(-tmp_17 - tmp_19 - tmp_21) + 2*tmp_33*(-tmp_26*tmp_27 - tmp_27*tmp_28 - tmp_27*tmp_29) + 2*tmp_37*(-tmp_27*tmp_34 - tmp_27*tmp_35 - tmp_27*tmp_36));
      real_t tmp_52 = tmp_16*tmp_33;
      real_t tmp_53 = tmp_16*tmp_37;
      real_t tmp_54 = tmp_50*(tmp_21*tmp_25 + tmp_29*tmp_52 + tmp_36*tmp_53);
      real_t tmp_55 = tmp_50*(tmp_19*tmp_25 + tmp_28*tmp_52 + tmp_35*tmp_53);
      real_t tmp_56 = tmp_50*(tmp_17*tmp_25 + tmp_26*tmp_52 + tmp_34*tmp_53);
      real_t a_0_0 = 0.1666666666666668*tmp_51;
      real_t a_1_0 = 0.1666666666666668*tmp_54;
      real_t a_2_0 = 0.1666666666666668*tmp_55;
      real_t a_3_0 = 0.1666666666666668*tmp_56;
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = 1.0*p_affine_13_2;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_54 = tmp_41*tmp_46;
      real_t tmp_55 = tmp_36*tmp_46;
      real_t tmp_56 = tmp_21*tmp_46;
      real_t tmp_57 = -tmp_54 - tmp_55 - tmp_56;
      real_t tmp_58 = tmp_51*tmp_57;
      real_t tmp_59 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_60 = 1.0*tmp_15;
      real_t tmp_61 = tmp_40*tmp_60;
      real_t tmp_62 = tmp_35*tmp_60;
      real_t tmp_63 = tmp_5*tmp_60;
      real_t tmp_64 = 1.0*p_affine_13_0*tmp_50 + 1.0*p_affine_13_1*tmp_57 + 1.0*p_affine_13_2*(-tmp_61 - tmp_62 - tmp_63);
      real_t tmp_65 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_66 = std::pow(tmp_65, -0.25);
      real_t tmp_67 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_68 = tmp_46*tmp_5;
      real_t tmp_69 = tmp_35*tmp_46;
      real_t tmp_70 = tmp_40*tmp_46;
      real_t tmp_71 = 1.0*p_affine_13_0*(tmp_0*tmp_68 + tmp_1*tmp_69 + tmp_10*tmp_48 + tmp_3*tmp_70 + tmp_47*tmp_6 + tmp_49*tmp_8) + 1.0*p_affine_13_1*(tmp_10*tmp_55 + tmp_2*tmp_70 + tmp_4*tmp_69 + tmp_54*tmp_6 + tmp_56*tmp_8 + tmp_68*tmp_9) + 1.0*p_affine_13_2*(tmp_10*tmp_62 + tmp_6*tmp_61 + tmp_63*tmp_8);
      real_t tmp_72 = 1.0*std::pow(tmp_65, 1.0/2.0);
      real_t tmp_73 = 0.0068572537431980923*tmp_72;
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_76 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_77 = tmp_21*tmp_75 + tmp_27*tmp_76 + tmp_5*tmp_74;
      real_t tmp_78 = tmp_77 - 1.0/4.0;
      real_t tmp_79 = tmp_35*tmp_74 + tmp_36*tmp_75 + tmp_37*tmp_76;
      real_t tmp_80 = tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_40*tmp_74 + tmp_41*tmp_75 + tmp_42*tmp_76;
      real_t tmp_82 = tmp_81 - 1.0/4.0;
      real_t tmp_83 = tmp_0*tmp_78 + tmp_1*tmp_80 + tmp_3*tmp_82;
      real_t tmp_84 = tmp_2*tmp_82 + tmp_4*tmp_80 + tmp_78*tmp_9;
      real_t tmp_85 = tmp_10*tmp_80 + tmp_6*tmp_82 + tmp_78*tmp_8;
      real_t tmp_86 = -tmp_77 - tmp_79 - tmp_81 + 1;
      real_t tmp_87 = 0.037198804536718075*tmp_72;
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_90 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_91 = tmp_21*tmp_89 + tmp_27*tmp_90 + tmp_5*tmp_88;
      real_t tmp_92 = tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_35*tmp_88 + tmp_36*tmp_89 + tmp_37*tmp_90;
      real_t tmp_94 = tmp_93 - 1.0/4.0;
      real_t tmp_95 = tmp_40*tmp_88 + tmp_41*tmp_89 + tmp_42*tmp_90;
      real_t tmp_96 = tmp_95 - 1.0/4.0;
      real_t tmp_97 = tmp_0*tmp_92 + tmp_1*tmp_94 + tmp_3*tmp_96;
      real_t tmp_98 = tmp_2*tmp_96 + tmp_4*tmp_94 + tmp_9*tmp_92;
      real_t tmp_99 = tmp_10*tmp_94 + tmp_6*tmp_96 + tmp_8*tmp_92;
      real_t tmp_100 = -tmp_91 - tmp_93 - tmp_95 + 1;
      real_t tmp_101 = 0.020848748529055869*tmp_72;
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_104 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_105 = tmp_102*tmp_5 + tmp_103*tmp_21 + tmp_104*tmp_27;
      real_t tmp_106 = tmp_105 - 1.0/4.0;
      real_t tmp_107 = tmp_102*tmp_35 + tmp_103*tmp_36 + tmp_104*tmp_37;
      real_t tmp_108 = tmp_107 - 1.0/4.0;
      real_t tmp_109 = tmp_102*tmp_40 + tmp_103*tmp_41 + tmp_104*tmp_42;
      real_t tmp_110 = tmp_109 - 1.0/4.0;
      real_t tmp_111 = tmp_0*tmp_106 + tmp_1*tmp_108 + tmp_110*tmp_3;
      real_t tmp_112 = tmp_106*tmp_9 + tmp_108*tmp_4 + tmp_110*tmp_2;
      real_t tmp_113 = tmp_10*tmp_108 + tmp_106*tmp_8 + tmp_110*tmp_6;
      real_t tmp_114 = -tmp_105 - tmp_107 - tmp_109 + 1;
      real_t tmp_115 = 0.019202922745021479*tmp_72;
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27;
      real_t tmp_120 = tmp_119 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_35 + tmp_117*tmp_36 + tmp_118*tmp_37;
      real_t tmp_122 = tmp_121 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_40 + tmp_117*tmp_41 + tmp_118*tmp_42;
      real_t tmp_124 = tmp_123 - 1.0/4.0;
      real_t tmp_125 = tmp_0*tmp_120 + tmp_1*tmp_122 + tmp_124*tmp_3;
      real_t tmp_126 = tmp_120*tmp_9 + tmp_122*tmp_4 + tmp_124*tmp_2;
      real_t tmp_127 = tmp_10*tmp_122 + tmp_120*tmp_8 + tmp_124*tmp_6;
      real_t tmp_128 = -tmp_119 - tmp_121 - tmp_123 + 1;
      real_t tmp_129 = 0.020848748529055869*tmp_72;
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_132 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_133 = tmp_130*tmp_5 + tmp_131*tmp_21 + tmp_132*tmp_27;
      real_t tmp_134 = tmp_133 - 1.0/4.0;
      real_t tmp_135 = tmp_130*tmp_35 + tmp_131*tmp_36 + tmp_132*tmp_37;
      real_t tmp_136 = tmp_135 - 1.0/4.0;
      real_t tmp_137 = tmp_130*tmp_40 + tmp_131*tmp_41 + tmp_132*tmp_42;
      real_t tmp_138 = tmp_137 - 1.0/4.0;
      real_t tmp_139 = tmp_0*tmp_134 + tmp_1*tmp_136 + tmp_138*tmp_3;
      real_t tmp_140 = tmp_134*tmp_9 + tmp_136*tmp_4 + tmp_138*tmp_2;
      real_t tmp_141 = tmp_10*tmp_136 + tmp_134*tmp_8 + tmp_138*tmp_6;
      real_t tmp_142 = -tmp_133 - tmp_135 - tmp_137 + 1;
      real_t tmp_143 = 0.019202922745021479*tmp_72;
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_146 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_147 = tmp_144*tmp_5 + tmp_145*tmp_21 + tmp_146*tmp_27;
      real_t tmp_148 = tmp_147 - 1.0/4.0;
      real_t tmp_149 = tmp_144*tmp_35 + tmp_145*tmp_36 + tmp_146*tmp_37;
      real_t tmp_150 = tmp_149 - 1.0/4.0;
      real_t tmp_151 = tmp_144*tmp_40 + tmp_145*tmp_41 + tmp_146*tmp_42;
      real_t tmp_152 = tmp_151 - 1.0/4.0;
      real_t tmp_153 = tmp_0*tmp_148 + tmp_1*tmp_150 + tmp_152*tmp_3;
      real_t tmp_154 = tmp_148*tmp_9 + tmp_150*tmp_4 + tmp_152*tmp_2;
      real_t tmp_155 = tmp_10*tmp_150 + tmp_148*tmp_8 + tmp_152*tmp_6;
      real_t tmp_156 = -tmp_147 - tmp_149 - tmp_151 + 1;
      real_t tmp_157 = 0.020848748529055869*tmp_72;
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_160 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_161 = tmp_158*tmp_5 + tmp_159*tmp_21 + tmp_160*tmp_27;
      real_t tmp_162 = tmp_161 - 1.0/4.0;
      real_t tmp_163 = tmp_158*tmp_35 + tmp_159*tmp_36 + tmp_160*tmp_37;
      real_t tmp_164 = tmp_163 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_40 + tmp_159*tmp_41 + tmp_160*tmp_42;
      real_t tmp_166 = tmp_165 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_162 + tmp_1*tmp_164 + tmp_166*tmp_3;
      real_t tmp_168 = tmp_162*tmp_9 + tmp_164*tmp_4 + tmp_166*tmp_2;
      real_t tmp_169 = tmp_10*tmp_164 + tmp_162*tmp_8 + tmp_166*tmp_6;
      real_t tmp_170 = -tmp_161 - tmp_163 - tmp_165 + 1;
      real_t tmp_171 = 0.019202922745021479*tmp_72;
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_174 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_175 = tmp_172*tmp_5 + tmp_173*tmp_21 + tmp_174*tmp_27;
      real_t tmp_176 = tmp_175 - 1.0/4.0;
      real_t tmp_177 = tmp_172*tmp_35 + tmp_173*tmp_36 + tmp_174*tmp_37;
      real_t tmp_178 = tmp_177 - 1.0/4.0;
      real_t tmp_179 = tmp_172*tmp_40 + tmp_173*tmp_41 + tmp_174*tmp_42;
      real_t tmp_180 = tmp_179 - 1.0/4.0;
      real_t tmp_181 = tmp_0*tmp_176 + tmp_1*tmp_178 + tmp_180*tmp_3;
      real_t tmp_182 = tmp_176*tmp_9 + tmp_178*tmp_4 + tmp_180*tmp_2;
      real_t tmp_183 = tmp_10*tmp_178 + tmp_176*tmp_8 + tmp_180*tmp_6;
      real_t tmp_184 = -tmp_175 - tmp_177 - tmp_179 + 1;
      real_t tmp_185 = 0.020848748529055869*tmp_72;
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_188 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_189 = tmp_186*tmp_5 + tmp_187*tmp_21 + tmp_188*tmp_27;
      real_t tmp_190 = tmp_189 - 1.0/4.0;
      real_t tmp_191 = tmp_186*tmp_35 + tmp_187*tmp_36 + tmp_188*tmp_37;
      real_t tmp_192 = tmp_191 - 1.0/4.0;
      real_t tmp_193 = tmp_186*tmp_40 + tmp_187*tmp_41 + tmp_188*tmp_42;
      real_t tmp_194 = tmp_193 - 1.0/4.0;
      real_t tmp_195 = tmp_0*tmp_190 + tmp_1*tmp_192 + tmp_194*tmp_3;
      real_t tmp_196 = tmp_190*tmp_9 + tmp_192*tmp_4 + tmp_194*tmp_2;
      real_t tmp_197 = tmp_10*tmp_192 + tmp_190*tmp_8 + tmp_194*tmp_6;
      real_t tmp_198 = -tmp_189 - tmp_191 - tmp_193 + 1;
      real_t tmp_199 = 0.019202922745021479*tmp_72;
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_202 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_203 = tmp_200*tmp_5 + tmp_201*tmp_21 + tmp_202*tmp_27;
      real_t tmp_204 = tmp_203 - 1.0/4.0;
      real_t tmp_205 = tmp_200*tmp_35 + tmp_201*tmp_36 + tmp_202*tmp_37;
      real_t tmp_206 = tmp_205 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_40 + tmp_201*tmp_41 + tmp_202*tmp_42;
      real_t tmp_208 = tmp_207 - 1.0/4.0;
      real_t tmp_209 = tmp_0*tmp_204 + tmp_1*tmp_206 + tmp_208*tmp_3;
      real_t tmp_210 = tmp_2*tmp_208 + tmp_204*tmp_9 + tmp_206*tmp_4;
      real_t tmp_211 = tmp_10*tmp_206 + tmp_204*tmp_8 + tmp_208*tmp_6;
      real_t tmp_212 = -tmp_203 - tmp_205 - tmp_207 + 1;
      real_t tmp_213 = 0.020848748529055869*tmp_72;
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_216 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_217 = tmp_21*tmp_215 + tmp_214*tmp_5 + tmp_216*tmp_27;
      real_t tmp_218 = tmp_217 - 1.0/4.0;
      real_t tmp_219 = tmp_214*tmp_35 + tmp_215*tmp_36 + tmp_216*tmp_37;
      real_t tmp_220 = tmp_219 - 1.0/4.0;
      real_t tmp_221 = tmp_214*tmp_40 + tmp_215*tmp_41 + tmp_216*tmp_42;
      real_t tmp_222 = tmp_221 - 1.0/4.0;
      real_t tmp_223 = tmp_0*tmp_218 + tmp_1*tmp_220 + tmp_222*tmp_3;
      real_t tmp_224 = tmp_2*tmp_222 + tmp_218*tmp_9 + tmp_220*tmp_4;
      real_t tmp_225 = tmp_10*tmp_220 + tmp_218*tmp_8 + tmp_222*tmp_6;
      real_t tmp_226 = -tmp_217 - tmp_219 - tmp_221 + 1;
      real_t tmp_227 = 0.019202922745021479*tmp_72;
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_230 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_231 = tmp_21*tmp_229 + tmp_228*tmp_5 + tmp_230*tmp_27;
      real_t tmp_232 = tmp_231 - 1.0/4.0;
      real_t tmp_233 = tmp_228*tmp_35 + tmp_229*tmp_36 + tmp_230*tmp_37;
      real_t tmp_234 = tmp_233 - 1.0/4.0;
      real_t tmp_235 = tmp_228*tmp_40 + tmp_229*tmp_41 + tmp_230*tmp_42;
      real_t tmp_236 = tmp_235 - 1.0/4.0;
      real_t tmp_237 = tmp_0*tmp_232 + tmp_1*tmp_234 + tmp_236*tmp_3;
      real_t tmp_238 = tmp_2*tmp_236 + tmp_232*tmp_9 + tmp_234*tmp_4;
      real_t tmp_239 = tmp_10*tmp_234 + tmp_232*tmp_8 + tmp_236*tmp_6;
      real_t tmp_240 = -tmp_231 - tmp_233 - tmp_235 + 1;
      real_t tmp_241 = 0.042507265838595799*tmp_72;
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_244 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_245 = tmp_21*tmp_243 + tmp_242*tmp_5 + tmp_244*tmp_27;
      real_t tmp_246 = tmp_245 - 1.0/4.0;
      real_t tmp_247 = tmp_242*tmp_35 + tmp_243*tmp_36 + tmp_244*tmp_37;
      real_t tmp_248 = tmp_247 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_40 + tmp_243*tmp_41 + tmp_244*tmp_42;
      real_t tmp_250 = tmp_249 - 1.0/4.0;
      real_t tmp_251 = tmp_0*tmp_246 + tmp_1*tmp_248 + tmp_250*tmp_3;
      real_t tmp_252 = tmp_2*tmp_250 + tmp_246*tmp_9 + tmp_248*tmp_4;
      real_t tmp_253 = tmp_10*tmp_248 + tmp_246*tmp_8 + tmp_250*tmp_6;
      real_t tmp_254 = -tmp_245 - tmp_247 - tmp_249 + 1;
      real_t tmp_255 = 0.020848748529055869*tmp_72;
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_258 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_259 = tmp_21*tmp_257 + tmp_256*tmp_5 + tmp_258*tmp_27;
      real_t tmp_260 = tmp_259 - 1.0/4.0;
      real_t tmp_261 = tmp_256*tmp_35 + tmp_257*tmp_36 + tmp_258*tmp_37;
      real_t tmp_262 = tmp_261 - 1.0/4.0;
      real_t tmp_263 = tmp_256*tmp_40 + tmp_257*tmp_41 + tmp_258*tmp_42;
      real_t tmp_264 = tmp_263 - 1.0/4.0;
      real_t tmp_265 = tmp_0*tmp_260 + tmp_1*tmp_262 + tmp_264*tmp_3;
      real_t tmp_266 = tmp_2*tmp_264 + tmp_260*tmp_9 + tmp_262*tmp_4;
      real_t tmp_267 = tmp_10*tmp_262 + tmp_260*tmp_8 + tmp_264*tmp_6;
      real_t tmp_268 = -tmp_259 - tmp_261 - tmp_263 + 1;
      real_t tmp_269 = 0.0068572537431980923*tmp_72;
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_272 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_273 = tmp_21*tmp_271 + tmp_27*tmp_272 + tmp_270*tmp_5;
      real_t tmp_274 = tmp_273 - 1.0/4.0;
      real_t tmp_275 = tmp_270*tmp_35 + tmp_271*tmp_36 + tmp_272*tmp_37;
      real_t tmp_276 = tmp_275 - 1.0/4.0;
      real_t tmp_277 = tmp_270*tmp_40 + tmp_271*tmp_41 + tmp_272*tmp_42;
      real_t tmp_278 = tmp_277 - 1.0/4.0;
      real_t tmp_279 = tmp_0*tmp_274 + tmp_1*tmp_276 + tmp_278*tmp_3;
      real_t tmp_280 = tmp_2*tmp_278 + tmp_274*tmp_9 + tmp_276*tmp_4;
      real_t tmp_281 = tmp_10*tmp_276 + tmp_274*tmp_8 + tmp_278*tmp_6;
      real_t tmp_282 = -tmp_273 - tmp_275 - tmp_277 + 1;
      real_t tmp_283 = 0.037198804536718075*tmp_72;
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_286 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_287 = tmp_21*tmp_285 + tmp_27*tmp_286 + tmp_284*tmp_5;
      real_t tmp_288 = tmp_287 - 1.0/4.0;
      real_t tmp_289 = tmp_284*tmp_35 + tmp_285*tmp_36 + tmp_286*tmp_37;
      real_t tmp_290 = tmp_289 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_40 + tmp_285*tmp_41 + tmp_286*tmp_42;
      real_t tmp_292 = tmp_291 - 1.0/4.0;
      real_t tmp_293 = tmp_0*tmp_288 + tmp_1*tmp_290 + tmp_292*tmp_3;
      real_t tmp_294 = tmp_2*tmp_292 + tmp_288*tmp_9 + tmp_290*tmp_4;
      real_t tmp_295 = tmp_10*tmp_290 + tmp_288*tmp_8 + tmp_292*tmp_6;
      real_t tmp_296 = -tmp_287 - tmp_289 - tmp_291 + 1;
      real_t tmp_297 = 0.042507265838595799*tmp_72;
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_300 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_301 = tmp_21*tmp_299 + tmp_27*tmp_300 + tmp_298*tmp_5;
      real_t tmp_302 = tmp_301 - 1.0/4.0;
      real_t tmp_303 = tmp_298*tmp_35 + tmp_299*tmp_36 + tmp_300*tmp_37;
      real_t tmp_304 = tmp_303 - 1.0/4.0;
      real_t tmp_305 = tmp_298*tmp_40 + tmp_299*tmp_41 + tmp_300*tmp_42;
      real_t tmp_306 = tmp_305 - 1.0/4.0;
      real_t tmp_307 = tmp_0*tmp_302 + tmp_1*tmp_304 + tmp_3*tmp_306;
      real_t tmp_308 = tmp_2*tmp_306 + tmp_302*tmp_9 + tmp_304*tmp_4;
      real_t tmp_309 = tmp_10*tmp_304 + tmp_302*tmp_8 + tmp_306*tmp_6;
      real_t tmp_310 = -tmp_301 - tmp_303 - tmp_305 + 1;
      real_t tmp_311 = 0.0068572537431980923*tmp_72;
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_314 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_315 = tmp_21*tmp_313 + tmp_27*tmp_314 + tmp_312*tmp_5;
      real_t tmp_316 = tmp_315 - 1.0/4.0;
      real_t tmp_317 = tmp_312*tmp_35 + tmp_313*tmp_36 + tmp_314*tmp_37;
      real_t tmp_318 = tmp_317 - 1.0/4.0;
      real_t tmp_319 = tmp_312*tmp_40 + tmp_313*tmp_41 + tmp_314*tmp_42;
      real_t tmp_320 = tmp_319 - 1.0/4.0;
      real_t tmp_321 = tmp_0*tmp_316 + tmp_1*tmp_318 + tmp_3*tmp_320;
      real_t tmp_322 = tmp_2*tmp_320 + tmp_316*tmp_9 + tmp_318*tmp_4;
      real_t tmp_323 = tmp_10*tmp_318 + tmp_316*tmp_8 + tmp_320*tmp_6;
      real_t tmp_324 = -tmp_315 - tmp_317 - tmp_319 + 1;
      real_t tmp_325 = 0.037198804536718075*tmp_72;
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_328 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_329 = tmp_21*tmp_327 + tmp_27*tmp_328 + tmp_326*tmp_5;
      real_t tmp_330 = tmp_329 - 1.0/4.0;
      real_t tmp_331 = tmp_326*tmp_35 + tmp_327*tmp_36 + tmp_328*tmp_37;
      real_t tmp_332 = tmp_331 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_40 + tmp_327*tmp_41 + tmp_328*tmp_42;
      real_t tmp_334 = tmp_333 - 1.0/4.0;
      real_t tmp_335 = tmp_0*tmp_330 + tmp_1*tmp_332 + tmp_3*tmp_334;
      real_t tmp_336 = tmp_2*tmp_334 + tmp_330*tmp_9 + tmp_332*tmp_4;
      real_t tmp_337 = tmp_10*tmp_332 + tmp_330*tmp_8 + tmp_334*tmp_6;
      real_t tmp_338 = -tmp_329 - tmp_331 - tmp_333 + 1;
      real_t tmp_339 = 0.042507265838595799*tmp_72;
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_342 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_343 = tmp_21*tmp_341 + tmp_27*tmp_342 + tmp_340*tmp_5;
      real_t tmp_344 = tmp_343 - 1.0/4.0;
      real_t tmp_345 = tmp_340*tmp_35 + tmp_341*tmp_36 + tmp_342*tmp_37;
      real_t tmp_346 = tmp_345 - 1.0/4.0;
      real_t tmp_347 = tmp_340*tmp_40 + tmp_341*tmp_41 + tmp_342*tmp_42;
      real_t tmp_348 = tmp_347 - 1.0/4.0;
      real_t tmp_349 = tmp_0*tmp_344 + tmp_1*tmp_346 + tmp_3*tmp_348;
      real_t tmp_350 = tmp_2*tmp_348 + tmp_344*tmp_9 + tmp_346*tmp_4;
      real_t tmp_351 = tmp_10*tmp_346 + tmp_344*tmp_8 + tmp_348*tmp_6;
      real_t tmp_352 = -tmp_343 - tmp_345 - tmp_347 + 1;
      real_t tmp_353 = 0.019202922745021479*tmp_72;
      real_t tmp_354 = p_affine_13_2*tmp_56;
      real_t tmp_355 = p_affine_13_2*tmp_49;
      real_t tmp_356 = 1.0*p_affine_13_0*tmp_49 + 1.0*p_affine_13_1*tmp_56 + 1.0*p_affine_13_2*tmp_63;
      real_t tmp_357 = p_affine_13_2*tmp_55;
      real_t tmp_358 = p_affine_13_2*tmp_48;
      real_t tmp_359 = 1.0*p_affine_13_0*tmp_48 + 1.0*p_affine_13_1*tmp_55 + 1.0*p_affine_13_2*tmp_62;
      real_t tmp_360 = p_affine_13_2*tmp_54;
      real_t tmp_361 = p_affine_13_2*tmp_47;
      real_t tmp_362 = 1.0*p_affine_13_0*tmp_47 + 1.0*p_affine_13_1*tmp_54 + 1.0*p_affine_13_2*tmp_61;
      real_t a_0_0 = tmp_101*(14.0*tmp_100*tmp_66*tmp_99 - tmp_100*tmp_71 - tmp_52*tmp_97 - tmp_58*tmp_98 - tmp_64*tmp_99) + tmp_115*(-tmp_111*tmp_52 - tmp_112*tmp_58 + 14.0*tmp_113*tmp_114*tmp_66 - tmp_113*tmp_64 - tmp_114*tmp_71) + tmp_129*(-tmp_125*tmp_52 - tmp_126*tmp_58 + 14.0*tmp_127*tmp_128*tmp_66 - tmp_127*tmp_64 - tmp_128*tmp_71) + tmp_143*(-tmp_139*tmp_52 - tmp_140*tmp_58 + 14.0*tmp_141*tmp_142*tmp_66 - tmp_141*tmp_64 - tmp_142*tmp_71) + tmp_157*(-tmp_153*tmp_52 - tmp_154*tmp_58 + 14.0*tmp_155*tmp_156*tmp_66 - tmp_155*tmp_64 - tmp_156*tmp_71) + tmp_171*(-tmp_167*tmp_52 - tmp_168*tmp_58 + 14.0*tmp_169*tmp_170*tmp_66 - tmp_169*tmp_64 - tmp_170*tmp_71) + tmp_185*(-tmp_181*tmp_52 - tmp_182*tmp_58 + 14.0*tmp_183*tmp_184*tmp_66 - tmp_183*tmp_64 - tmp_184*tmp_71) + tmp_199*(-tmp_195*tmp_52 - tmp_196*tmp_58 + 14.0*tmp_197*tmp_198*tmp_66 - tmp_197*tmp_64 - tmp_198*tmp_71) + tmp_213*(-tmp_209*tmp_52 - tmp_210*tmp_58 + 14.0*tmp_211*tmp_212*tmp_66 - tmp_211*tmp_64 - tmp_212*tmp_71) + tmp_227*(-tmp_223*tmp_52 - tmp_224*tmp_58 + 14.0*tmp_225*tmp_226*tmp_66 - tmp_225*tmp_64 - tmp_226*tmp_71) + tmp_241*(-tmp_237*tmp_52 - tmp_238*tmp_58 + 14.0*tmp_239*tmp_240*tmp_66 - tmp_239*tmp_64 - tmp_240*tmp_71) + tmp_255*(-tmp_251*tmp_52 - tmp_252*tmp_58 + 14.0*tmp_253*tmp_254*tmp_66 - tmp_253*tmp_64 - tmp_254*tmp_71) + tmp_269*(-tmp_265*tmp_52 - tmp_266*tmp_58 + 14.0*tmp_267*tmp_268*tmp_66 - tmp_267*tmp_64 - tmp_268*tmp_71) + tmp_283*(-tmp_279*tmp_52 - tmp_280*tmp_58 + 14.0*tmp_281*tmp_282*tmp_66 - tmp_281*tmp_64 - tmp_282*tmp_71) + tmp_297*(-tmp_293*tmp_52 - tmp_294*tmp_58 + 14.0*tmp_295*tmp_296*tmp_66 - tmp_295*tmp_64 - tmp_296*tmp_71) + tmp_311*(-tmp_307*tmp_52 - tmp_308*tmp_58 + 14.0*tmp_309*tmp_310*tmp_66 - tmp_309*tmp_64 - tmp_310*tmp_71) + tmp_325*(-tmp_321*tmp_52 - tmp_322*tmp_58 + 14.0*tmp_323*tmp_324*tmp_66 - tmp_323*tmp_64 - tmp_324*tmp_71) + tmp_339*(-tmp_335*tmp_52 - tmp_336*tmp_58 + 14.0*tmp_337*tmp_338*tmp_66 - tmp_337*tmp_64 - tmp_338*tmp_71) + tmp_353*(-tmp_349*tmp_52 - tmp_350*tmp_58 + 14.0*tmp_351*tmp_352*tmp_66 - tmp_351*tmp_64 - tmp_352*tmp_71) + tmp_73*(-tmp_45*tmp_52 - tmp_53*tmp_58 - tmp_59*tmp_64 + 14.0*tmp_59*tmp_66*tmp_67 - tmp_67*tmp_71) + tmp_87*(-tmp_52*tmp_83 - tmp_58*tmp_84 - tmp_64*tmp_85 + 14.0*tmp_66*tmp_85*tmp_86 - tmp_71*tmp_86);
      real_t a_1_0 = tmp_101*(-tmp_354*tmp_98 - tmp_355*tmp_97 - tmp_356*tmp_99 + 14.0*tmp_66*tmp_91*tmp_99 - tmp_71*tmp_91) + tmp_115*(14.0*tmp_105*tmp_113*tmp_66 - tmp_105*tmp_71 - tmp_111*tmp_355 - tmp_112*tmp_354 - tmp_113*tmp_356) + tmp_129*(14.0*tmp_119*tmp_127*tmp_66 - tmp_119*tmp_71 - tmp_125*tmp_355 - tmp_126*tmp_354 - tmp_127*tmp_356) + tmp_143*(14.0*tmp_133*tmp_141*tmp_66 - tmp_133*tmp_71 - tmp_139*tmp_355 - tmp_140*tmp_354 - tmp_141*tmp_356) + tmp_157*(14.0*tmp_147*tmp_155*tmp_66 - tmp_147*tmp_71 - tmp_153*tmp_355 - tmp_154*tmp_354 - tmp_155*tmp_356) + tmp_171*(14.0*tmp_161*tmp_169*tmp_66 - tmp_161*tmp_71 - tmp_167*tmp_355 - tmp_168*tmp_354 - tmp_169*tmp_356) + tmp_185*(14.0*tmp_175*tmp_183*tmp_66 - tmp_175*tmp_71 - tmp_181*tmp_355 - tmp_182*tmp_354 - tmp_183*tmp_356) + tmp_199*(14.0*tmp_189*tmp_197*tmp_66 - tmp_189*tmp_71 - tmp_195*tmp_355 - tmp_196*tmp_354 - tmp_197*tmp_356) + tmp_213*(14.0*tmp_203*tmp_211*tmp_66 - tmp_203*tmp_71 - tmp_209*tmp_355 - tmp_210*tmp_354 - tmp_211*tmp_356) + tmp_227*(14.0*tmp_217*tmp_225*tmp_66 - tmp_217*tmp_71 - tmp_223*tmp_355 - tmp_224*tmp_354 - tmp_225*tmp_356) + tmp_241*(14.0*tmp_231*tmp_239*tmp_66 - tmp_231*tmp_71 - tmp_237*tmp_355 - tmp_238*tmp_354 - tmp_239*tmp_356) + tmp_255*(14.0*tmp_245*tmp_253*tmp_66 - tmp_245*tmp_71 - tmp_251*tmp_355 - tmp_252*tmp_354 - tmp_253*tmp_356) + tmp_269*(14.0*tmp_259*tmp_267*tmp_66 - tmp_259*tmp_71 - tmp_265*tmp_355 - tmp_266*tmp_354 - tmp_267*tmp_356) + tmp_283*(14.0*tmp_273*tmp_281*tmp_66 - tmp_273*tmp_71 - tmp_279*tmp_355 - tmp_280*tmp_354 - tmp_281*tmp_356) + tmp_297*(14.0*tmp_287*tmp_295*tmp_66 - tmp_287*tmp_71 - tmp_293*tmp_355 - tmp_294*tmp_354 - tmp_295*tmp_356) + tmp_311*(14.0*tmp_301*tmp_309*tmp_66 - tmp_301*tmp_71 - tmp_307*tmp_355 - tmp_308*tmp_354 - tmp_309*tmp_356) + tmp_325*(14.0*tmp_315*tmp_323*tmp_66 - tmp_315*tmp_71 - tmp_321*tmp_355 - tmp_322*tmp_354 - tmp_323*tmp_356) + tmp_339*(14.0*tmp_329*tmp_337*tmp_66 - tmp_329*tmp_71 - tmp_335*tmp_355 - tmp_336*tmp_354 - tmp_337*tmp_356) + tmp_353*(14.0*tmp_343*tmp_351*tmp_66 - tmp_343*tmp_71 - tmp_349*tmp_355 - tmp_350*tmp_354 - tmp_351*tmp_356) + tmp_73*(14.0*tmp_33*tmp_59*tmp_66 - tmp_33*tmp_71 - tmp_354*tmp_53 - tmp_355*tmp_45 - tmp_356*tmp_59) + tmp_87*(-tmp_354*tmp_84 - tmp_355*tmp_83 - tmp_356*tmp_85 + 14.0*tmp_66*tmp_77*tmp_85 - tmp_71*tmp_77);
      real_t a_2_0 = tmp_101*(-tmp_357*tmp_98 - tmp_358*tmp_97 - tmp_359*tmp_99 + 14.0*tmp_66*tmp_93*tmp_99 - tmp_71*tmp_93) + tmp_115*(14.0*tmp_107*tmp_113*tmp_66 - tmp_107*tmp_71 - tmp_111*tmp_358 - tmp_112*tmp_357 - tmp_113*tmp_359) + tmp_129*(14.0*tmp_121*tmp_127*tmp_66 - tmp_121*tmp_71 - tmp_125*tmp_358 - tmp_126*tmp_357 - tmp_127*tmp_359) + tmp_143*(14.0*tmp_135*tmp_141*tmp_66 - tmp_135*tmp_71 - tmp_139*tmp_358 - tmp_140*tmp_357 - tmp_141*tmp_359) + tmp_157*(14.0*tmp_149*tmp_155*tmp_66 - tmp_149*tmp_71 - tmp_153*tmp_358 - tmp_154*tmp_357 - tmp_155*tmp_359) + tmp_171*(14.0*tmp_163*tmp_169*tmp_66 - tmp_163*tmp_71 - tmp_167*tmp_358 - tmp_168*tmp_357 - tmp_169*tmp_359) + tmp_185*(14.0*tmp_177*tmp_183*tmp_66 - tmp_177*tmp_71 - tmp_181*tmp_358 - tmp_182*tmp_357 - tmp_183*tmp_359) + tmp_199*(14.0*tmp_191*tmp_197*tmp_66 - tmp_191*tmp_71 - tmp_195*tmp_358 - tmp_196*tmp_357 - tmp_197*tmp_359) + tmp_213*(14.0*tmp_205*tmp_211*tmp_66 - tmp_205*tmp_71 - tmp_209*tmp_358 - tmp_210*tmp_357 - tmp_211*tmp_359) + tmp_227*(14.0*tmp_219*tmp_225*tmp_66 - tmp_219*tmp_71 - tmp_223*tmp_358 - tmp_224*tmp_357 - tmp_225*tmp_359) + tmp_241*(14.0*tmp_233*tmp_239*tmp_66 - tmp_233*tmp_71 - tmp_237*tmp_358 - tmp_238*tmp_357 - tmp_239*tmp_359) + tmp_255*(14.0*tmp_247*tmp_253*tmp_66 - tmp_247*tmp_71 - tmp_251*tmp_358 - tmp_252*tmp_357 - tmp_253*tmp_359) + tmp_269*(14.0*tmp_261*tmp_267*tmp_66 - tmp_261*tmp_71 - tmp_265*tmp_358 - tmp_266*tmp_357 - tmp_267*tmp_359) + tmp_283*(14.0*tmp_275*tmp_281*tmp_66 - tmp_275*tmp_71 - tmp_279*tmp_358 - tmp_280*tmp_357 - tmp_281*tmp_359) + tmp_297*(14.0*tmp_289*tmp_295*tmp_66 - tmp_289*tmp_71 - tmp_293*tmp_358 - tmp_294*tmp_357 - tmp_295*tmp_359) + tmp_311*(14.0*tmp_303*tmp_309*tmp_66 - tmp_303*tmp_71 - tmp_307*tmp_358 - tmp_308*tmp_357 - tmp_309*tmp_359) + tmp_325*(14.0*tmp_317*tmp_323*tmp_66 - tmp_317*tmp_71 - tmp_321*tmp_358 - tmp_322*tmp_357 - tmp_323*tmp_359) + tmp_339*(14.0*tmp_331*tmp_337*tmp_66 - tmp_331*tmp_71 - tmp_335*tmp_358 - tmp_336*tmp_357 - tmp_337*tmp_359) + tmp_353*(14.0*tmp_345*tmp_351*tmp_66 - tmp_345*tmp_71 - tmp_349*tmp_358 - tmp_350*tmp_357 - tmp_351*tmp_359) + tmp_73*(-tmp_357*tmp_53 - tmp_358*tmp_45 - tmp_359*tmp_59 + 14.0*tmp_38*tmp_59*tmp_66 - tmp_38*tmp_71) + tmp_87*(-tmp_357*tmp_84 - tmp_358*tmp_83 - tmp_359*tmp_85 + 14.0*tmp_66*tmp_79*tmp_85 - tmp_71*tmp_79);
      real_t a_3_0 = tmp_101*(-tmp_360*tmp_98 - tmp_361*tmp_97 - tmp_362*tmp_99 + 14.0*tmp_66*tmp_95*tmp_99 - tmp_71*tmp_95) + tmp_115*(14.0*tmp_109*tmp_113*tmp_66 - tmp_109*tmp_71 - tmp_111*tmp_361 - tmp_112*tmp_360 - tmp_113*tmp_362) + tmp_129*(14.0*tmp_123*tmp_127*tmp_66 - tmp_123*tmp_71 - tmp_125*tmp_361 - tmp_126*tmp_360 - tmp_127*tmp_362) + tmp_143*(14.0*tmp_137*tmp_141*tmp_66 - tmp_137*tmp_71 - tmp_139*tmp_361 - tmp_140*tmp_360 - tmp_141*tmp_362) + tmp_157*(14.0*tmp_151*tmp_155*tmp_66 - tmp_151*tmp_71 - tmp_153*tmp_361 - tmp_154*tmp_360 - tmp_155*tmp_362) + tmp_171*(14.0*tmp_165*tmp_169*tmp_66 - tmp_165*tmp_71 - tmp_167*tmp_361 - tmp_168*tmp_360 - tmp_169*tmp_362) + tmp_185*(14.0*tmp_179*tmp_183*tmp_66 - tmp_179*tmp_71 - tmp_181*tmp_361 - tmp_182*tmp_360 - tmp_183*tmp_362) + tmp_199*(14.0*tmp_193*tmp_197*tmp_66 - tmp_193*tmp_71 - tmp_195*tmp_361 - tmp_196*tmp_360 - tmp_197*tmp_362) + tmp_213*(14.0*tmp_207*tmp_211*tmp_66 - tmp_207*tmp_71 - tmp_209*tmp_361 - tmp_210*tmp_360 - tmp_211*tmp_362) + tmp_227*(14.0*tmp_221*tmp_225*tmp_66 - tmp_221*tmp_71 - tmp_223*tmp_361 - tmp_224*tmp_360 - tmp_225*tmp_362) + tmp_241*(14.0*tmp_235*tmp_239*tmp_66 - tmp_235*tmp_71 - tmp_237*tmp_361 - tmp_238*tmp_360 - tmp_239*tmp_362) + tmp_255*(14.0*tmp_249*tmp_253*tmp_66 - tmp_249*tmp_71 - tmp_251*tmp_361 - tmp_252*tmp_360 - tmp_253*tmp_362) + tmp_269*(14.0*tmp_263*tmp_267*tmp_66 - tmp_263*tmp_71 - tmp_265*tmp_361 - tmp_266*tmp_360 - tmp_267*tmp_362) + tmp_283*(14.0*tmp_277*tmp_281*tmp_66 - tmp_277*tmp_71 - tmp_279*tmp_361 - tmp_280*tmp_360 - tmp_281*tmp_362) + tmp_297*(14.0*tmp_291*tmp_295*tmp_66 - tmp_291*tmp_71 - tmp_293*tmp_361 - tmp_294*tmp_360 - tmp_295*tmp_362) + tmp_311*(14.0*tmp_305*tmp_309*tmp_66 - tmp_305*tmp_71 - tmp_307*tmp_361 - tmp_308*tmp_360 - tmp_309*tmp_362) + tmp_325*(14.0*tmp_319*tmp_323*tmp_66 - tmp_319*tmp_71 - tmp_321*tmp_361 - tmp_322*tmp_360 - tmp_323*tmp_362) + tmp_339*(14.0*tmp_333*tmp_337*tmp_66 - tmp_333*tmp_71 - tmp_335*tmp_361 - tmp_336*tmp_360 - tmp_337*tmp_362) + tmp_353*(14.0*tmp_347*tmp_351*tmp_66 - tmp_347*tmp_71 - tmp_349*tmp_361 - tmp_350*tmp_360 - tmp_351*tmp_362) + tmp_73*(-tmp_360*tmp_53 - tmp_361*tmp_45 - tmp_362*tmp_59 + 14.0*tmp_43*tmp_59*tmp_66 - tmp_43*tmp_71) + tmp_87*(-tmp_360*tmp_84 - tmp_361*tmp_83 - tmp_362*tmp_85 + 14.0*tmp_66*tmp_81*tmp_85 - tmp_71*tmp_81);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_1 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_2 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_5 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_9 = tmp_5*tmp_8;
      real_t tmp_10 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_11 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_12 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_13 = tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_13 + tmp_0*tmp_9 + tmp_10*tmp_3 - tmp_10*tmp_6 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_14);
      real_t tmp_16 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_17 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_18 = -tmp_17;
      real_t tmp_19 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_20 = 0.031405749086161582*tmp_18 + 0.93718850182767688*tmp_19;
      real_t tmp_21 = tmp_15*(tmp_16 + tmp_20);
      real_t tmp_22 = tmp_12*tmp_4 - tmp_14;
      real_t tmp_23 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_24 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_25 = -tmp_24;
      real_t tmp_26 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_27 = 0.031405749086161582*tmp_25 + 0.93718850182767688*tmp_26;
      real_t tmp_28 = tmp_15*(tmp_23 + tmp_27);
      real_t tmp_29 = -tmp_13 + tmp_9;
      real_t tmp_30 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_31 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_32 = -tmp_31;
      real_t tmp_33 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_34 = 0.031405749086161582*tmp_32 + 0.93718850182767688*tmp_33;
      real_t tmp_35 = tmp_15*(tmp_30 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_7 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = -tmp_0*tmp_2 + tmp_11*tmp_4;
      real_t tmp_38 = tmp_0*tmp_8 - tmp_10*tmp_4;
      real_t tmp_39 = tmp_10*tmp_2 - tmp_11*tmp_8;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = tmp_0*tmp_5 - tmp_1*tmp_11;
      real_t tmp_42 = -tmp_0*tmp_12 + tmp_1*tmp_10;
      real_t tmp_43 = -tmp_10*tmp_5 + tmp_11*tmp_12;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_1*tmp_40 + tmp_4*tmp_44;
      real_t tmp_46 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_47 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_48 = tmp_46*tmp_47;
      real_t tmp_49 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_50 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_51 = tmp_49*tmp_50;
      real_t tmp_52 = tmp_48 - tmp_51;
      real_t tmp_53 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_54 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_55 = tmp_49*tmp_54;
      real_t tmp_56 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_57 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_58 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_59 = tmp_47*tmp_57;
      real_t tmp_60 = tmp_46*tmp_54;
      real_t tmp_61 = 1.0 / (tmp_48*tmp_58 + tmp_50*tmp_56*tmp_57 - tmp_51*tmp_58 + tmp_53*tmp_55 - tmp_53*tmp_59 - tmp_56*tmp_60);
      real_t tmp_62 = 0.5*tmp_61;
      real_t tmp_63 = tmp_52*tmp_62;
      real_t tmp_64 = tmp_50*tmp_57 - tmp_60;
      real_t tmp_65 = tmp_62*tmp_64;
      real_t tmp_66 = tmp_55 - tmp_59;
      real_t tmp_67 = tmp_62*tmp_66;
      real_t tmp_68 = -tmp_63 - tmp_65 - tmp_67;
      real_t tmp_69 = p_affine_13_2*tmp_68;
      real_t tmp_70 = tmp_11*tmp_36 + tmp_2*tmp_44 + tmp_40*tmp_5;
      real_t tmp_71 = -tmp_47*tmp_53 + tmp_50*tmp_56;
      real_t tmp_72 = tmp_62*tmp_71;
      real_t tmp_73 = -tmp_50*tmp_58 + tmp_53*tmp_54;
      real_t tmp_74 = tmp_62*tmp_73;
      real_t tmp_75 = tmp_47*tmp_58 - tmp_54*tmp_56;
      real_t tmp_76 = tmp_62*tmp_75;
      real_t tmp_77 = -tmp_72 - tmp_74 - tmp_76;
      real_t tmp_78 = p_affine_13_2*tmp_77;
      real_t tmp_79 = -tmp_46*tmp_56 + tmp_49*tmp_53;
      real_t tmp_80 = 1.0*tmp_61;
      real_t tmp_81 = tmp_79*tmp_80;
      real_t tmp_82 = tmp_46*tmp_58 - tmp_53*tmp_57;
      real_t tmp_83 = tmp_80*tmp_82;
      real_t tmp_84 = -tmp_49*tmp_58 + tmp_56*tmp_57;
      real_t tmp_85 = tmp_80*tmp_84;
      real_t tmp_86 = p_affine_13_0*tmp_68 + p_affine_13_1*tmp_77 + p_affine_13_2*(-tmp_81 - tmp_83 - tmp_85);
      real_t tmp_87 = tmp_10*tmp_36 + tmp_12*tmp_40 + tmp_44*tmp_8;
      real_t tmp_88 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_89 = tmp_61*(tmp_20 + tmp_88);
      real_t tmp_90 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_91 = tmp_61*(tmp_27 + tmp_90);
      real_t tmp_92 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_93 = tmp_61*(tmp_34 + tmp_92);
      real_t tmp_94 = tmp_66*tmp_93 + tmp_75*tmp_91 + tmp_84*tmp_89;
      real_t tmp_95 = tmp_64*tmp_93 + tmp_73*tmp_91 + tmp_82*tmp_89;
      real_t tmp_96 = tmp_52*tmp_93 + tmp_71*tmp_91 + tmp_79*tmp_89;
      real_t tmp_97 = -tmp_94 - tmp_95 - tmp_96 + 1;
      real_t tmp_98 = (std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)*std::abs(tmp_17*tmp_26 - tmp_19*tmp_24)) + (std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)*std::abs(tmp_17*tmp_33 - tmp_19*tmp_31)) + (std::abs(tmp_24*tmp_33 - tmp_26*tmp_31)*std::abs(tmp_24*tmp_33 - tmp_26*tmp_31));
      real_t tmp_99 = 14.0*std::pow(tmp_98, -0.25);
      real_t tmp_100 = tmp_87*tmp_99;
      real_t tmp_101 = 1.0*tmp_15;
      real_t tmp_102 = 0.5*tmp_15;
      real_t tmp_103 = tmp_102*tmp_7;
      real_t tmp_104 = tmp_102*tmp_37;
      real_t tmp_105 = tmp_102*tmp_41;
      real_t tmp_106 = tmp_10*tmp_102;
      real_t tmp_107 = tmp_102*tmp_12;
      real_t tmp_108 = tmp_102*tmp_8;
      real_t tmp_109 = 1.0*p_affine_13_0*(tmp_0*tmp_103 + tmp_1*tmp_104 + tmp_105*tmp_4 + tmp_106*tmp_29 + tmp_107*tmp_39 + tmp_108*tmp_43) + 1.0*p_affine_13_1*(tmp_103*tmp_11 + tmp_104*tmp_5 + tmp_105*tmp_2 + tmp_106*tmp_22 + tmp_107*tmp_38 + tmp_108*tmp_42) + 1.0*p_affine_13_2*(tmp_10*tmp_101*tmp_7 + tmp_101*tmp_12*tmp_37 + tmp_101*tmp_41*tmp_8);
      real_t tmp_110 = 1.0*std::pow(tmp_98, 1.0/2.0);
      real_t tmp_111 = 0.0068572537431980923*tmp_110;
      real_t tmp_112 = 0.19601935860219369*tmp_18 + 0.60796128279561268*tmp_19;
      real_t tmp_113 = tmp_15*(tmp_112 + tmp_16);
      real_t tmp_114 = 0.19601935860219369*tmp_25 + 0.60796128279561268*tmp_26;
      real_t tmp_115 = tmp_15*(tmp_114 + tmp_23);
      real_t tmp_116 = 0.19601935860219369*tmp_32 + 0.60796128279561268*tmp_33;
      real_t tmp_117 = tmp_15*(tmp_116 + tmp_30);
      real_t tmp_118 = tmp_113*tmp_7 + tmp_115*tmp_22 + tmp_117*tmp_29 - 1.0/4.0;
      real_t tmp_119 = tmp_113*tmp_37 + tmp_115*tmp_38 + tmp_117*tmp_39 - 1.0/4.0;
      real_t tmp_120 = tmp_113*tmp_41 + tmp_115*tmp_42 + tmp_117*tmp_43 - 1.0/4.0;
      real_t tmp_121 = tmp_0*tmp_118 + tmp_1*tmp_119 + tmp_120*tmp_4;
      real_t tmp_122 = tmp_11*tmp_118 + tmp_119*tmp_5 + tmp_120*tmp_2;
      real_t tmp_123 = tmp_10*tmp_118 + tmp_119*tmp_12 + tmp_120*tmp_8;
      real_t tmp_124 = tmp_61*(tmp_112 + tmp_88);
      real_t tmp_125 = tmp_61*(tmp_114 + tmp_90);
      real_t tmp_126 = tmp_61*(tmp_116 + tmp_92);
      real_t tmp_127 = tmp_124*tmp_84 + tmp_125*tmp_75 + tmp_126*tmp_66;
      real_t tmp_128 = tmp_124*tmp_82 + tmp_125*tmp_73 + tmp_126*tmp_64;
      real_t tmp_129 = tmp_124*tmp_79 + tmp_125*tmp_71 + tmp_126*tmp_52;
      real_t tmp_130 = -tmp_127 - tmp_128 - tmp_129 + 1;
      real_t tmp_131 = tmp_123*tmp_99;
      real_t tmp_132 = 0.037198804536718075*tmp_110;
      real_t tmp_133 = 0.37605877282253791*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_134 = tmp_15*(tmp_133 + tmp_16);
      real_t tmp_135 = 0.37605877282253791*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_136 = tmp_15*(tmp_135 + tmp_23);
      real_t tmp_137 = 0.37605877282253791*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_138 = tmp_15*(tmp_137 + tmp_30);
      real_t tmp_139 = tmp_134*tmp_7 + tmp_136*tmp_22 + tmp_138*tmp_29 - 1.0/4.0;
      real_t tmp_140 = tmp_134*tmp_37 + tmp_136*tmp_38 + tmp_138*tmp_39 - 1.0/4.0;
      real_t tmp_141 = tmp_134*tmp_41 + tmp_136*tmp_42 + tmp_138*tmp_43 - 1.0/4.0;
      real_t tmp_142 = tmp_0*tmp_139 + tmp_1*tmp_140 + tmp_141*tmp_4;
      real_t tmp_143 = tmp_11*tmp_139 + tmp_140*tmp_5 + tmp_141*tmp_2;
      real_t tmp_144 = tmp_10*tmp_139 + tmp_12*tmp_140 + tmp_141*tmp_8;
      real_t tmp_145 = tmp_61*(tmp_133 + tmp_88);
      real_t tmp_146 = tmp_61*(tmp_135 + tmp_90);
      real_t tmp_147 = tmp_61*(tmp_137 + tmp_92);
      real_t tmp_148 = tmp_145*tmp_84 + tmp_146*tmp_75 + tmp_147*tmp_66;
      real_t tmp_149 = tmp_145*tmp_82 + tmp_146*tmp_73 + tmp_147*tmp_64;
      real_t tmp_150 = tmp_145*tmp_79 + tmp_146*tmp_71 + tmp_147*tmp_52;
      real_t tmp_151 = -tmp_148 - tmp_149 - tmp_150 + 1;
      real_t tmp_152 = tmp_144*tmp_99;
      real_t tmp_153 = 0.020848748529055869*tmp_110;
      real_t tmp_154 = 0.78764240869137092*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_155 = tmp_15*(tmp_154 + tmp_16);
      real_t tmp_156 = 0.78764240869137092*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_157 = tmp_15*(tmp_156 + tmp_23);
      real_t tmp_158 = 0.78764240869137092*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_159 = tmp_15*(tmp_158 + tmp_30);
      real_t tmp_160 = tmp_155*tmp_7 + tmp_157*tmp_22 + tmp_159*tmp_29 - 1.0/4.0;
      real_t tmp_161 = tmp_155*tmp_37 + tmp_157*tmp_38 + tmp_159*tmp_39 - 1.0/4.0;
      real_t tmp_162 = tmp_155*tmp_41 + tmp_157*tmp_42 + tmp_159*tmp_43 - 1.0/4.0;
      real_t tmp_163 = tmp_0*tmp_160 + tmp_1*tmp_161 + tmp_162*tmp_4;
      real_t tmp_164 = tmp_11*tmp_160 + tmp_161*tmp_5 + tmp_162*tmp_2;
      real_t tmp_165 = tmp_10*tmp_160 + tmp_12*tmp_161 + tmp_162*tmp_8;
      real_t tmp_166 = tmp_61*(tmp_154 + tmp_88);
      real_t tmp_167 = tmp_61*(tmp_156 + tmp_90);
      real_t tmp_168 = tmp_61*(tmp_158 + tmp_92);
      real_t tmp_169 = tmp_166*tmp_84 + tmp_167*tmp_75 + tmp_168*tmp_66;
      real_t tmp_170 = tmp_166*tmp_82 + tmp_167*tmp_73 + tmp_168*tmp_64;
      real_t tmp_171 = tmp_166*tmp_79 + tmp_167*tmp_71 + tmp_168*tmp_52;
      real_t tmp_172 = -tmp_169 - tmp_170 - tmp_171 + 1;
      real_t tmp_173 = tmp_165*tmp_99;
      real_t tmp_174 = 0.019202922745021479*tmp_110;
      real_t tmp_175 = 0.58463275527740355*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_176 = tmp_15*(tmp_16 + tmp_175);
      real_t tmp_177 = 0.58463275527740355*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_178 = tmp_15*(tmp_177 + tmp_23);
      real_t tmp_179 = 0.58463275527740355*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_180 = tmp_15*(tmp_179 + tmp_30);
      real_t tmp_181 = tmp_176*tmp_7 + tmp_178*tmp_22 + tmp_180*tmp_29 - 1.0/4.0;
      real_t tmp_182 = tmp_176*tmp_37 + tmp_178*tmp_38 + tmp_180*tmp_39 - 1.0/4.0;
      real_t tmp_183 = tmp_176*tmp_41 + tmp_178*tmp_42 + tmp_180*tmp_43 - 1.0/4.0;
      real_t tmp_184 = tmp_0*tmp_181 + tmp_1*tmp_182 + tmp_183*tmp_4;
      real_t tmp_185 = tmp_11*tmp_181 + tmp_182*tmp_5 + tmp_183*tmp_2;
      real_t tmp_186 = tmp_10*tmp_181 + tmp_12*tmp_182 + tmp_183*tmp_8;
      real_t tmp_187 = tmp_61*(tmp_175 + tmp_88);
      real_t tmp_188 = tmp_61*(tmp_177 + tmp_90);
      real_t tmp_189 = tmp_61*(tmp_179 + tmp_92);
      real_t tmp_190 = tmp_187*tmp_84 + tmp_188*tmp_75 + tmp_189*tmp_66;
      real_t tmp_191 = tmp_187*tmp_82 + tmp_188*tmp_73 + tmp_189*tmp_64;
      real_t tmp_192 = tmp_187*tmp_79 + tmp_188*tmp_71 + tmp_189*tmp_52;
      real_t tmp_193 = -tmp_190 - tmp_191 - tmp_192 + 1;
      real_t tmp_194 = tmp_186*tmp_99;
      real_t tmp_195 = 0.020848748529055869*tmp_110;
      real_t tmp_196 = 0.041227165399737475*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_197 = tmp_15*(tmp_16 + tmp_196);
      real_t tmp_198 = 0.041227165399737475*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_199 = tmp_15*(tmp_198 + tmp_23);
      real_t tmp_200 = 0.041227165399737475*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_201 = tmp_15*(tmp_200 + tmp_30);
      real_t tmp_202 = tmp_197*tmp_7 + tmp_199*tmp_22 + tmp_201*tmp_29 - 1.0/4.0;
      real_t tmp_203 = tmp_197*tmp_37 + tmp_199*tmp_38 + tmp_201*tmp_39 - 1.0/4.0;
      real_t tmp_204 = tmp_197*tmp_41 + tmp_199*tmp_42 + tmp_201*tmp_43 - 1.0/4.0;
      real_t tmp_205 = tmp_0*tmp_202 + tmp_1*tmp_203 + tmp_204*tmp_4;
      real_t tmp_206 = tmp_11*tmp_202 + tmp_2*tmp_204 + tmp_203*tmp_5;
      real_t tmp_207 = tmp_10*tmp_202 + tmp_12*tmp_203 + tmp_204*tmp_8;
      real_t tmp_208 = tmp_61*(tmp_196 + tmp_88);
      real_t tmp_209 = tmp_61*(tmp_198 + tmp_90);
      real_t tmp_210 = tmp_61*(tmp_200 + tmp_92);
      real_t tmp_211 = tmp_208*tmp_84 + tmp_209*tmp_75 + tmp_210*tmp_66;
      real_t tmp_212 = tmp_208*tmp_82 + tmp_209*tmp_73 + tmp_210*tmp_64;
      real_t tmp_213 = tmp_208*tmp_79 + tmp_209*tmp_71 + tmp_210*tmp_52;
      real_t tmp_214 = -tmp_211 - tmp_212 - tmp_213 + 1;
      real_t tmp_215 = tmp_207*tmp_99;
      real_t tmp_216 = 0.019202922745021479*tmp_110;
      real_t tmp_217 = 0.039308471900058539*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_218 = tmp_15*(tmp_16 + tmp_217);
      real_t tmp_219 = 0.039308471900058539*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_220 = tmp_15*(tmp_219 + tmp_23);
      real_t tmp_221 = 0.039308471900058539*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_222 = tmp_15*(tmp_221 + tmp_30);
      real_t tmp_223 = tmp_218*tmp_7 + tmp_22*tmp_220 + tmp_222*tmp_29 - 1.0/4.0;
      real_t tmp_224 = tmp_218*tmp_37 + tmp_220*tmp_38 + tmp_222*tmp_39 - 1.0/4.0;
      real_t tmp_225 = tmp_218*tmp_41 + tmp_220*tmp_42 + tmp_222*tmp_43 - 1.0/4.0;
      real_t tmp_226 = tmp_0*tmp_223 + tmp_1*tmp_224 + tmp_225*tmp_4;
      real_t tmp_227 = tmp_11*tmp_223 + tmp_2*tmp_225 + tmp_224*tmp_5;
      real_t tmp_228 = tmp_10*tmp_223 + tmp_12*tmp_224 + tmp_225*tmp_8;
      real_t tmp_229 = tmp_61*(tmp_217 + tmp_88);
      real_t tmp_230 = tmp_61*(tmp_219 + tmp_90);
      real_t tmp_231 = tmp_61*(tmp_221 + tmp_92);
      real_t tmp_232 = tmp_229*tmp_84 + tmp_230*tmp_75 + tmp_231*tmp_66;
      real_t tmp_233 = tmp_229*tmp_82 + tmp_230*tmp_73 + tmp_231*tmp_64;
      real_t tmp_234 = tmp_229*tmp_79 + tmp_230*tmp_71 + tmp_231*tmp_52;
      real_t tmp_235 = -tmp_232 - tmp_233 - tmp_234 + 1;
      real_t tmp_236 = tmp_228*tmp_99;
      real_t tmp_237 = 0.020848748529055869*tmp_110;
      real_t tmp_238 = 0.78764240869137092*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_239 = tmp_15*(tmp_16 + tmp_238);
      real_t tmp_240 = 0.78764240869137092*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_241 = tmp_15*(tmp_23 + tmp_240);
      real_t tmp_242 = 0.78764240869137092*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_243 = tmp_15*(tmp_242 + tmp_30);
      real_t tmp_244 = tmp_22*tmp_241 + tmp_239*tmp_7 + tmp_243*tmp_29 - 1.0/4.0;
      real_t tmp_245 = tmp_239*tmp_37 + tmp_241*tmp_38 + tmp_243*tmp_39 - 1.0/4.0;
      real_t tmp_246 = tmp_239*tmp_41 + tmp_241*tmp_42 + tmp_243*tmp_43 - 1.0/4.0;
      real_t tmp_247 = tmp_0*tmp_244 + tmp_1*tmp_245 + tmp_246*tmp_4;
      real_t tmp_248 = tmp_11*tmp_244 + tmp_2*tmp_246 + tmp_245*tmp_5;
      real_t tmp_249 = tmp_10*tmp_244 + tmp_12*tmp_245 + tmp_246*tmp_8;
      real_t tmp_250 = tmp_61*(tmp_238 + tmp_88);
      real_t tmp_251 = tmp_61*(tmp_240 + tmp_90);
      real_t tmp_252 = tmp_61*(tmp_242 + tmp_92);
      real_t tmp_253 = tmp_250*tmp_84 + tmp_251*tmp_75 + tmp_252*tmp_66;
      real_t tmp_254 = tmp_250*tmp_82 + tmp_251*tmp_73 + tmp_252*tmp_64;
      real_t tmp_255 = tmp_250*tmp_79 + tmp_251*tmp_71 + tmp_252*tmp_52;
      real_t tmp_256 = -tmp_253 - tmp_254 - tmp_255 + 1;
      real_t tmp_257 = tmp_249*tmp_99;
      real_t tmp_258 = 0.019202922745021479*tmp_110;
      real_t tmp_259 = 0.58463275527740355*tmp_18 + 0.039308471900058539*tmp_19;
      real_t tmp_260 = tmp_15*(tmp_16 + tmp_259);
      real_t tmp_261 = 0.58463275527740355*tmp_25 + 0.039308471900058539*tmp_26;
      real_t tmp_262 = tmp_15*(tmp_23 + tmp_261);
      real_t tmp_263 = 0.58463275527740355*tmp_32 + 0.039308471900058539*tmp_33;
      real_t tmp_264 = tmp_15*(tmp_263 + tmp_30);
      real_t tmp_265 = tmp_22*tmp_262 + tmp_260*tmp_7 + tmp_264*tmp_29 - 1.0/4.0;
      real_t tmp_266 = tmp_260*tmp_37 + tmp_262*tmp_38 + tmp_264*tmp_39 - 1.0/4.0;
      real_t tmp_267 = tmp_260*tmp_41 + tmp_262*tmp_42 + tmp_264*tmp_43 - 1.0/4.0;
      real_t tmp_268 = tmp_0*tmp_265 + tmp_1*tmp_266 + tmp_267*tmp_4;
      real_t tmp_269 = tmp_11*tmp_265 + tmp_2*tmp_267 + tmp_266*tmp_5;
      real_t tmp_270 = tmp_10*tmp_265 + tmp_12*tmp_266 + tmp_267*tmp_8;
      real_t tmp_271 = tmp_61*(tmp_259 + tmp_88);
      real_t tmp_272 = tmp_61*(tmp_261 + tmp_90);
      real_t tmp_273 = tmp_61*(tmp_263 + tmp_92);
      real_t tmp_274 = tmp_271*tmp_84 + tmp_272*tmp_75 + tmp_273*tmp_66;
      real_t tmp_275 = tmp_271*tmp_82 + tmp_272*tmp_73 + tmp_273*tmp_64;
      real_t tmp_276 = tmp_271*tmp_79 + tmp_272*tmp_71 + tmp_273*tmp_52;
      real_t tmp_277 = -tmp_274 - tmp_275 - tmp_276 + 1;
      real_t tmp_278 = tmp_270*tmp_99;
      real_t tmp_279 = 0.020848748529055869*tmp_110;
      real_t tmp_280 = 0.1711304259088916*tmp_18 + 0.78764240869137092*tmp_19;
      real_t tmp_281 = tmp_15*(tmp_16 + tmp_280);
      real_t tmp_282 = 0.1711304259088916*tmp_25 + 0.78764240869137092*tmp_26;
      real_t tmp_283 = tmp_15*(tmp_23 + tmp_282);
      real_t tmp_284 = 0.1711304259088916*tmp_32 + 0.78764240869137092*tmp_33;
      real_t tmp_285 = tmp_15*(tmp_284 + tmp_30);
      real_t tmp_286 = tmp_22*tmp_283 + tmp_281*tmp_7 + tmp_285*tmp_29 - 1.0/4.0;
      real_t tmp_287 = tmp_281*tmp_37 + tmp_283*tmp_38 + tmp_285*tmp_39 - 1.0/4.0;
      real_t tmp_288 = tmp_281*tmp_41 + tmp_283*tmp_42 + tmp_285*tmp_43 - 1.0/4.0;
      real_t tmp_289 = tmp_0*tmp_286 + tmp_1*tmp_287 + tmp_288*tmp_4;
      real_t tmp_290 = tmp_11*tmp_286 + tmp_2*tmp_288 + tmp_287*tmp_5;
      real_t tmp_291 = tmp_10*tmp_286 + tmp_12*tmp_287 + tmp_288*tmp_8;
      real_t tmp_292 = tmp_61*(tmp_280 + tmp_88);
      real_t tmp_293 = tmp_61*(tmp_282 + tmp_90);
      real_t tmp_294 = tmp_61*(tmp_284 + tmp_92);
      real_t tmp_295 = tmp_292*tmp_84 + tmp_293*tmp_75 + tmp_294*tmp_66;
      real_t tmp_296 = tmp_292*tmp_82 + tmp_293*tmp_73 + tmp_294*tmp_64;
      real_t tmp_297 = tmp_292*tmp_79 + tmp_293*tmp_71 + tmp_294*tmp_52;
      real_t tmp_298 = -tmp_295 - tmp_296 - tmp_297 + 1;
      real_t tmp_299 = tmp_291*tmp_99;
      real_t tmp_300 = 0.019202922745021479*tmp_110;
      real_t tmp_301 = 0.37605877282253791*tmp_18 + 0.58463275527740355*tmp_19;
      real_t tmp_302 = tmp_15*(tmp_16 + tmp_301);
      real_t tmp_303 = 0.37605877282253791*tmp_25 + 0.58463275527740355*tmp_26;
      real_t tmp_304 = tmp_15*(tmp_23 + tmp_303);
      real_t tmp_305 = 0.37605877282253791*tmp_32 + 0.58463275527740355*tmp_33;
      real_t tmp_306 = tmp_15*(tmp_30 + tmp_305);
      real_t tmp_307 = tmp_22*tmp_304 + tmp_29*tmp_306 + tmp_302*tmp_7 - 1.0/4.0;
      real_t tmp_308 = tmp_302*tmp_37 + tmp_304*tmp_38 + tmp_306*tmp_39 - 1.0/4.0;
      real_t tmp_309 = tmp_302*tmp_41 + tmp_304*tmp_42 + tmp_306*tmp_43 - 1.0/4.0;
      real_t tmp_310 = tmp_0*tmp_307 + tmp_1*tmp_308 + tmp_309*tmp_4;
      real_t tmp_311 = tmp_11*tmp_307 + tmp_2*tmp_309 + tmp_308*tmp_5;
      real_t tmp_312 = tmp_10*tmp_307 + tmp_12*tmp_308 + tmp_309*tmp_8;
      real_t tmp_313 = tmp_61*(tmp_301 + tmp_88);
      real_t tmp_314 = tmp_61*(tmp_303 + tmp_90);
      real_t tmp_315 = tmp_61*(tmp_305 + tmp_92);
      real_t tmp_316 = tmp_313*tmp_84 + tmp_314*tmp_75 + tmp_315*tmp_66;
      real_t tmp_317 = tmp_313*tmp_82 + tmp_314*tmp_73 + tmp_315*tmp_64;
      real_t tmp_318 = tmp_313*tmp_79 + tmp_314*tmp_71 + tmp_315*tmp_52;
      real_t tmp_319 = -tmp_316 - tmp_317 - tmp_318 + 1;
      real_t tmp_320 = tmp_312*tmp_99;
      real_t tmp_321 = 0.020848748529055869*tmp_110;
      real_t tmp_322 = 0.041227165399737475*tmp_18 + 0.1711304259088916*tmp_19;
      real_t tmp_323 = tmp_15*(tmp_16 + tmp_322);
      real_t tmp_324 = 0.041227165399737475*tmp_25 + 0.1711304259088916*tmp_26;
      real_t tmp_325 = tmp_15*(tmp_23 + tmp_324);
      real_t tmp_326 = 0.041227165399737475*tmp_32 + 0.1711304259088916*tmp_33;
      real_t tmp_327 = tmp_15*(tmp_30 + tmp_326);
      real_t tmp_328 = tmp_22*tmp_325 + tmp_29*tmp_327 + tmp_323*tmp_7 - 1.0/4.0;
      real_t tmp_329 = tmp_323*tmp_37 + tmp_325*tmp_38 + tmp_327*tmp_39 - 1.0/4.0;
      real_t tmp_330 = tmp_323*tmp_41 + tmp_325*tmp_42 + tmp_327*tmp_43 - 1.0/4.0;
      real_t tmp_331 = tmp_0*tmp_328 + tmp_1*tmp_329 + tmp_330*tmp_4;
      real_t tmp_332 = tmp_11*tmp_328 + tmp_2*tmp_330 + tmp_329*tmp_5;
      real_t tmp_333 = tmp_10*tmp_328 + tmp_12*tmp_329 + tmp_330*tmp_8;
      real_t tmp_334 = tmp_61*(tmp_322 + tmp_88);
      real_t tmp_335 = tmp_61*(tmp_324 + tmp_90);
      real_t tmp_336 = tmp_61*(tmp_326 + tmp_92);
      real_t tmp_337 = tmp_334*tmp_84 + tmp_335*tmp_75 + tmp_336*tmp_66;
      real_t tmp_338 = tmp_334*tmp_82 + tmp_335*tmp_73 + tmp_336*tmp_64;
      real_t tmp_339 = tmp_334*tmp_79 + tmp_335*tmp_71 + tmp_336*tmp_52;
      real_t tmp_340 = -tmp_337 - tmp_338 - tmp_339 + 1;
      real_t tmp_341 = tmp_333*tmp_99;
      real_t tmp_342 = 0.019202922745021479*tmp_110;
      real_t tmp_343 = 0.40446199974765351*tmp_18 + 0.19107600050469298*tmp_19;
      real_t tmp_344 = tmp_15*(tmp_16 + tmp_343);
      real_t tmp_345 = 0.40446199974765351*tmp_25 + 0.19107600050469298*tmp_26;
      real_t tmp_346 = tmp_15*(tmp_23 + tmp_345);
      real_t tmp_347 = 0.40446199974765351*tmp_32 + 0.19107600050469298*tmp_33;
      real_t tmp_348 = tmp_15*(tmp_30 + tmp_347);
      real_t tmp_349 = tmp_22*tmp_346 + tmp_29*tmp_348 + tmp_344*tmp_7 - 1.0/4.0;
      real_t tmp_350 = tmp_344*tmp_37 + tmp_346*tmp_38 + tmp_348*tmp_39 - 1.0/4.0;
      real_t tmp_351 = tmp_344*tmp_41 + tmp_346*tmp_42 + tmp_348*tmp_43 - 1.0/4.0;
      real_t tmp_352 = tmp_0*tmp_349 + tmp_1*tmp_350 + tmp_351*tmp_4;
      real_t tmp_353 = tmp_11*tmp_349 + tmp_2*tmp_351 + tmp_350*tmp_5;
      real_t tmp_354 = tmp_10*tmp_349 + tmp_12*tmp_350 + tmp_351*tmp_8;
      real_t tmp_355 = tmp_61*(tmp_343 + tmp_88);
      real_t tmp_356 = tmp_61*(tmp_345 + tmp_90);
      real_t tmp_357 = tmp_61*(tmp_347 + tmp_92);
      real_t tmp_358 = tmp_355*tmp_84 + tmp_356*tmp_75 + tmp_357*tmp_66;
      real_t tmp_359 = tmp_355*tmp_82 + tmp_356*tmp_73 + tmp_357*tmp_64;
      real_t tmp_360 = tmp_355*tmp_79 + tmp_356*tmp_71 + tmp_357*tmp_52;
      real_t tmp_361 = -tmp_358 - tmp_359 - tmp_360 + 1;
      real_t tmp_362 = tmp_354*tmp_99;
      real_t tmp_363 = 0.042507265838595799*tmp_110;
      real_t tmp_364 = 0.039308471900058539*tmp_18 + 0.37605877282253791*tmp_19;
      real_t tmp_365 = tmp_15*(tmp_16 + tmp_364);
      real_t tmp_366 = 0.039308471900058539*tmp_25 + 0.37605877282253791*tmp_26;
      real_t tmp_367 = tmp_15*(tmp_23 + tmp_366);
      real_t tmp_368 = 0.039308471900058539*tmp_32 + 0.37605877282253791*tmp_33;
      real_t tmp_369 = tmp_15*(tmp_30 + tmp_368);
      real_t tmp_370 = tmp_22*tmp_367 + tmp_29*tmp_369 + tmp_365*tmp_7 - 1.0/4.0;
      real_t tmp_371 = tmp_365*tmp_37 + tmp_367*tmp_38 + tmp_369*tmp_39 - 1.0/4.0;
      real_t tmp_372 = tmp_365*tmp_41 + tmp_367*tmp_42 + tmp_369*tmp_43 - 1.0/4.0;
      real_t tmp_373 = tmp_0*tmp_370 + tmp_1*tmp_371 + tmp_372*tmp_4;
      real_t tmp_374 = tmp_11*tmp_370 + tmp_2*tmp_372 + tmp_371*tmp_5;
      real_t tmp_375 = tmp_10*tmp_370 + tmp_12*tmp_371 + tmp_372*tmp_8;
      real_t tmp_376 = tmp_61*(tmp_364 + tmp_88);
      real_t tmp_377 = tmp_61*(tmp_366 + tmp_90);
      real_t tmp_378 = tmp_61*(tmp_368 + tmp_92);
      real_t tmp_379 = tmp_376*tmp_84 + tmp_377*tmp_75 + tmp_378*tmp_66;
      real_t tmp_380 = tmp_376*tmp_82 + tmp_377*tmp_73 + tmp_378*tmp_64;
      real_t tmp_381 = tmp_376*tmp_79 + tmp_377*tmp_71 + tmp_378*tmp_52;
      real_t tmp_382 = -tmp_379 - tmp_380 - tmp_381 + 1;
      real_t tmp_383 = tmp_375*tmp_99;
      real_t tmp_384 = 0.020848748529055869*tmp_110;
      real_t tmp_385 = 0.93718850182767688*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_386 = tmp_15*(tmp_16 + tmp_385);
      real_t tmp_387 = 0.93718850182767688*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_388 = tmp_15*(tmp_23 + tmp_387);
      real_t tmp_389 = 0.93718850182767688*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_390 = tmp_15*(tmp_30 + tmp_389);
      real_t tmp_391 = tmp_22*tmp_388 + tmp_29*tmp_390 + tmp_386*tmp_7 - 1.0/4.0;
      real_t tmp_392 = tmp_37*tmp_386 + tmp_38*tmp_388 + tmp_39*tmp_390 - 1.0/4.0;
      real_t tmp_393 = tmp_386*tmp_41 + tmp_388*tmp_42 + tmp_390*tmp_43 - 1.0/4.0;
      real_t tmp_394 = tmp_0*tmp_391 + tmp_1*tmp_392 + tmp_393*tmp_4;
      real_t tmp_395 = tmp_11*tmp_391 + tmp_2*tmp_393 + tmp_392*tmp_5;
      real_t tmp_396 = tmp_10*tmp_391 + tmp_12*tmp_392 + tmp_393*tmp_8;
      real_t tmp_397 = tmp_61*(tmp_385 + tmp_88);
      real_t tmp_398 = tmp_61*(tmp_387 + tmp_90);
      real_t tmp_399 = tmp_61*(tmp_389 + tmp_92);
      real_t tmp_400 = tmp_397*tmp_84 + tmp_398*tmp_75 + tmp_399*tmp_66;
      real_t tmp_401 = tmp_397*tmp_82 + tmp_398*tmp_73 + tmp_399*tmp_64;
      real_t tmp_402 = tmp_397*tmp_79 + tmp_398*tmp_71 + tmp_399*tmp_52;
      real_t tmp_403 = -tmp_400 - tmp_401 - tmp_402 + 1;
      real_t tmp_404 = tmp_396*tmp_99;
      real_t tmp_405 = 0.0068572537431980923*tmp_110;
      real_t tmp_406 = 0.60796128279561268*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_407 = tmp_15*(tmp_16 + tmp_406);
      real_t tmp_408 = 0.60796128279561268*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_409 = tmp_15*(tmp_23 + tmp_408);
      real_t tmp_410 = 0.60796128279561268*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_411 = tmp_15*(tmp_30 + tmp_410);
      real_t tmp_412 = tmp_22*tmp_409 + tmp_29*tmp_411 + tmp_407*tmp_7 - 1.0/4.0;
      real_t tmp_413 = tmp_37*tmp_407 + tmp_38*tmp_409 + tmp_39*tmp_411 - 1.0/4.0;
      real_t tmp_414 = tmp_407*tmp_41 + tmp_409*tmp_42 + tmp_411*tmp_43 - 1.0/4.0;
      real_t tmp_415 = tmp_0*tmp_412 + tmp_1*tmp_413 + tmp_4*tmp_414;
      real_t tmp_416 = tmp_11*tmp_412 + tmp_2*tmp_414 + tmp_413*tmp_5;
      real_t tmp_417 = tmp_10*tmp_412 + tmp_12*tmp_413 + tmp_414*tmp_8;
      real_t tmp_418 = tmp_61*(tmp_406 + tmp_88);
      real_t tmp_419 = tmp_61*(tmp_408 + tmp_90);
      real_t tmp_420 = tmp_61*(tmp_410 + tmp_92);
      real_t tmp_421 = tmp_418*tmp_84 + tmp_419*tmp_75 + tmp_420*tmp_66;
      real_t tmp_422 = tmp_418*tmp_82 + tmp_419*tmp_73 + tmp_420*tmp_64;
      real_t tmp_423 = tmp_418*tmp_79 + tmp_419*tmp_71 + tmp_420*tmp_52;
      real_t tmp_424 = -tmp_421 - tmp_422 - tmp_423 + 1;
      real_t tmp_425 = tmp_417*tmp_99;
      real_t tmp_426 = 0.037198804536718075*tmp_110;
      real_t tmp_427 = 0.19107600050469298*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_428 = tmp_15*(tmp_16 + tmp_427);
      real_t tmp_429 = 0.19107600050469298*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_430 = tmp_15*(tmp_23 + tmp_429);
      real_t tmp_431 = 0.19107600050469298*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_432 = tmp_15*(tmp_30 + tmp_431);
      real_t tmp_433 = tmp_22*tmp_430 + tmp_29*tmp_432 + tmp_428*tmp_7 - 1.0/4.0;
      real_t tmp_434 = tmp_37*tmp_428 + tmp_38*tmp_430 + tmp_39*tmp_432 - 1.0/4.0;
      real_t tmp_435 = tmp_41*tmp_428 + tmp_42*tmp_430 + tmp_43*tmp_432 - 1.0/4.0;
      real_t tmp_436 = tmp_0*tmp_433 + tmp_1*tmp_434 + tmp_4*tmp_435;
      real_t tmp_437 = tmp_11*tmp_433 + tmp_2*tmp_435 + tmp_434*tmp_5;
      real_t tmp_438 = tmp_10*tmp_433 + tmp_12*tmp_434 + tmp_435*tmp_8;
      real_t tmp_439 = tmp_61*(tmp_427 + tmp_88);
      real_t tmp_440 = tmp_61*(tmp_429 + tmp_90);
      real_t tmp_441 = tmp_61*(tmp_431 + tmp_92);
      real_t tmp_442 = tmp_439*tmp_84 + tmp_440*tmp_75 + tmp_441*tmp_66;
      real_t tmp_443 = tmp_439*tmp_82 + tmp_440*tmp_73 + tmp_441*tmp_64;
      real_t tmp_444 = tmp_439*tmp_79 + tmp_440*tmp_71 + tmp_441*tmp_52;
      real_t tmp_445 = -tmp_442 - tmp_443 - tmp_444 + 1;
      real_t tmp_446 = tmp_438*tmp_99;
      real_t tmp_447 = 0.042507265838595799*tmp_110;
      real_t tmp_448 = 0.031405749086161582*tmp_18 + 0.031405749086161582*tmp_19;
      real_t tmp_449 = tmp_15*(tmp_16 + tmp_448);
      real_t tmp_450 = 0.031405749086161582*tmp_25 + 0.031405749086161582*tmp_26;
      real_t tmp_451 = tmp_15*(tmp_23 + tmp_450);
      real_t tmp_452 = 0.031405749086161582*tmp_32 + 0.031405749086161582*tmp_33;
      real_t tmp_453 = tmp_15*(tmp_30 + tmp_452);
      real_t tmp_454 = tmp_22*tmp_451 + tmp_29*tmp_453 + tmp_449*tmp_7 - 1.0/4.0;
      real_t tmp_455 = tmp_37*tmp_449 + tmp_38*tmp_451 + tmp_39*tmp_453 - 1.0/4.0;
      real_t tmp_456 = tmp_41*tmp_449 + tmp_42*tmp_451 + tmp_43*tmp_453 - 1.0/4.0;
      real_t tmp_457 = tmp_0*tmp_454 + tmp_1*tmp_455 + tmp_4*tmp_456;
      real_t tmp_458 = tmp_11*tmp_454 + tmp_2*tmp_456 + tmp_455*tmp_5;
      real_t tmp_459 = tmp_10*tmp_454 + tmp_12*tmp_455 + tmp_456*tmp_8;
      real_t tmp_460 = tmp_61*(tmp_448 + tmp_88);
      real_t tmp_461 = tmp_61*(tmp_450 + tmp_90);
      real_t tmp_462 = tmp_61*(tmp_452 + tmp_92);
      real_t tmp_463 = tmp_460*tmp_84 + tmp_461*tmp_75 + tmp_462*tmp_66;
      real_t tmp_464 = tmp_460*tmp_82 + tmp_461*tmp_73 + tmp_462*tmp_64;
      real_t tmp_465 = tmp_460*tmp_79 + tmp_461*tmp_71 + tmp_462*tmp_52;
      real_t tmp_466 = -tmp_463 - tmp_464 - tmp_465 + 1;
      real_t tmp_467 = tmp_459*tmp_99;
      real_t tmp_468 = 0.0068572537431980923*tmp_110;
      real_t tmp_469 = 0.19601935860219369*tmp_18 + 0.19601935860219369*tmp_19;
      real_t tmp_470 = tmp_15*(tmp_16 + tmp_469);
      real_t tmp_471 = 0.19601935860219369*tmp_25 + 0.19601935860219369*tmp_26;
      real_t tmp_472 = tmp_15*(tmp_23 + tmp_471);
      real_t tmp_473 = 0.19601935860219369*tmp_32 + 0.19601935860219369*tmp_33;
      real_t tmp_474 = tmp_15*(tmp_30 + tmp_473);
      real_t tmp_475 = tmp_22*tmp_472 + tmp_29*tmp_474 + tmp_470*tmp_7 - 1.0/4.0;
      real_t tmp_476 = tmp_37*tmp_470 + tmp_38*tmp_472 + tmp_39*tmp_474 - 1.0/4.0;
      real_t tmp_477 = tmp_41*tmp_470 + tmp_42*tmp_472 + tmp_43*tmp_474 - 1.0/4.0;
      real_t tmp_478 = tmp_0*tmp_475 + tmp_1*tmp_476 + tmp_4*tmp_477;
      real_t tmp_479 = tmp_11*tmp_475 + tmp_2*tmp_477 + tmp_476*tmp_5;
      real_t tmp_480 = tmp_10*tmp_475 + tmp_12*tmp_476 + tmp_477*tmp_8;
      real_t tmp_481 = tmp_61*(tmp_469 + tmp_88);
      real_t tmp_482 = tmp_61*(tmp_471 + tmp_90);
      real_t tmp_483 = tmp_61*(tmp_473 + tmp_92);
      real_t tmp_484 = tmp_481*tmp_84 + tmp_482*tmp_75 + tmp_483*tmp_66;
      real_t tmp_485 = tmp_481*tmp_82 + tmp_482*tmp_73 + tmp_483*tmp_64;
      real_t tmp_486 = tmp_481*tmp_79 + tmp_482*tmp_71 + tmp_483*tmp_52;
      real_t tmp_487 = -tmp_484 - tmp_485 - tmp_486 + 1;
      real_t tmp_488 = tmp_480*tmp_99;
      real_t tmp_489 = 0.037198804536718075*tmp_110;
      real_t tmp_490 = 0.40446199974765351*tmp_18 + 0.40446199974765351*tmp_19;
      real_t tmp_491 = tmp_15*(tmp_16 + tmp_490);
      real_t tmp_492 = 0.40446199974765351*tmp_25 + 0.40446199974765351*tmp_26;
      real_t tmp_493 = tmp_15*(tmp_23 + tmp_492);
      real_t tmp_494 = 0.40446199974765351*tmp_32 + 0.40446199974765351*tmp_33;
      real_t tmp_495 = tmp_15*(tmp_30 + tmp_494);
      real_t tmp_496 = tmp_22*tmp_493 + tmp_29*tmp_495 + tmp_491*tmp_7 - 1.0/4.0;
      real_t tmp_497 = tmp_37*tmp_491 + tmp_38*tmp_493 + tmp_39*tmp_495 - 1.0/4.0;
      real_t tmp_498 = tmp_41*tmp_491 + tmp_42*tmp_493 + tmp_43*tmp_495 - 1.0/4.0;
      real_t tmp_499 = tmp_0*tmp_496 + tmp_1*tmp_497 + tmp_4*tmp_498;
      real_t tmp_500 = tmp_11*tmp_496 + tmp_2*tmp_498 + tmp_497*tmp_5;
      real_t tmp_501 = tmp_10*tmp_496 + tmp_12*tmp_497 + tmp_498*tmp_8;
      real_t tmp_502 = tmp_61*(tmp_490 + tmp_88);
      real_t tmp_503 = tmp_61*(tmp_492 + tmp_90);
      real_t tmp_504 = tmp_61*(tmp_494 + tmp_92);
      real_t tmp_505 = tmp_502*tmp_84 + tmp_503*tmp_75 + tmp_504*tmp_66;
      real_t tmp_506 = tmp_502*tmp_82 + tmp_503*tmp_73 + tmp_504*tmp_64;
      real_t tmp_507 = tmp_502*tmp_79 + tmp_503*tmp_71 + tmp_504*tmp_52;
      real_t tmp_508 = -tmp_505 - tmp_506 - tmp_507 + 1;
      real_t tmp_509 = tmp_501*tmp_99;
      real_t tmp_510 = 0.042507265838595799*tmp_110;
      real_t tmp_511 = 0.1711304259088916*tmp_18 + 0.041227165399737475*tmp_19;
      real_t tmp_512 = tmp_15*(tmp_16 + tmp_511);
      real_t tmp_513 = 0.1711304259088916*tmp_25 + 0.041227165399737475*tmp_26;
      real_t tmp_514 = tmp_15*(tmp_23 + tmp_513);
      real_t tmp_515 = 0.1711304259088916*tmp_32 + 0.041227165399737475*tmp_33;
      real_t tmp_516 = tmp_15*(tmp_30 + tmp_515);
      real_t tmp_517 = tmp_22*tmp_514 + tmp_29*tmp_516 + tmp_512*tmp_7 - 1.0/4.0;
      real_t tmp_518 = tmp_37*tmp_512 + tmp_38*tmp_514 + tmp_39*tmp_516 - 1.0/4.0;
      real_t tmp_519 = tmp_41*tmp_512 + tmp_42*tmp_514 + tmp_43*tmp_516 - 1.0/4.0;
      real_t tmp_520 = tmp_0*tmp_517 + tmp_1*tmp_518 + tmp_4*tmp_519;
      real_t tmp_521 = tmp_11*tmp_517 + tmp_2*tmp_519 + tmp_5*tmp_518;
      real_t tmp_522 = tmp_10*tmp_517 + tmp_12*tmp_518 + tmp_519*tmp_8;
      real_t tmp_523 = tmp_61*(tmp_511 + tmp_88);
      real_t tmp_524 = tmp_61*(tmp_513 + tmp_90);
      real_t tmp_525 = tmp_61*(tmp_515 + tmp_92);
      real_t tmp_526 = tmp_523*tmp_84 + tmp_524*tmp_75 + tmp_525*tmp_66;
      real_t tmp_527 = tmp_523*tmp_82 + tmp_524*tmp_73 + tmp_525*tmp_64;
      real_t tmp_528 = tmp_52*tmp_525 + tmp_523*tmp_79 + tmp_524*tmp_71;
      real_t tmp_529 = -tmp_526 - tmp_527 - tmp_528 + 1;
      real_t tmp_530 = tmp_522*tmp_99;
      real_t tmp_531 = 0.019202922745021479*tmp_110;
      real_t tmp_532 = p_affine_13_2*tmp_76;
      real_t tmp_533 = p_affine_13_2*tmp_67;
      real_t tmp_534 = p_affine_13_0*tmp_67 + p_affine_13_1*tmp_76 + p_affine_13_2*tmp_85;
      real_t tmp_535 = p_affine_13_2*tmp_74;
      real_t tmp_536 = p_affine_13_2*tmp_65;
      real_t tmp_537 = p_affine_13_0*tmp_65 + p_affine_13_1*tmp_74 + p_affine_13_2*tmp_83;
      real_t tmp_538 = p_affine_13_2*tmp_72;
      real_t tmp_539 = p_affine_13_2*tmp_63;
      real_t tmp_540 = p_affine_13_0*tmp_63 + p_affine_13_1*tmp_72 + p_affine_13_2*tmp_81;
      real_t a_0_0 = tmp_111*(-tmp_100*tmp_97 - tmp_109*tmp_97 + tmp_45*tmp_69 + tmp_70*tmp_78 + tmp_86*tmp_87) + tmp_132*(-tmp_109*tmp_130 + tmp_121*tmp_69 + tmp_122*tmp_78 + tmp_123*tmp_86 - tmp_130*tmp_131) + tmp_153*(-tmp_109*tmp_151 + tmp_142*tmp_69 + tmp_143*tmp_78 + tmp_144*tmp_86 - tmp_151*tmp_152) + tmp_174*(-tmp_109*tmp_172 + tmp_163*tmp_69 + tmp_164*tmp_78 + tmp_165*tmp_86 - tmp_172*tmp_173) + tmp_195*(-tmp_109*tmp_193 + tmp_184*tmp_69 + tmp_185*tmp_78 + tmp_186*tmp_86 - tmp_193*tmp_194) + tmp_216*(-tmp_109*tmp_214 + tmp_205*tmp_69 + tmp_206*tmp_78 + tmp_207*tmp_86 - tmp_214*tmp_215) + tmp_237*(-tmp_109*tmp_235 + tmp_226*tmp_69 + tmp_227*tmp_78 + tmp_228*tmp_86 - tmp_235*tmp_236) + tmp_258*(-tmp_109*tmp_256 + tmp_247*tmp_69 + tmp_248*tmp_78 + tmp_249*tmp_86 - tmp_256*tmp_257) + tmp_279*(-tmp_109*tmp_277 + tmp_268*tmp_69 + tmp_269*tmp_78 + tmp_270*tmp_86 - tmp_277*tmp_278) + tmp_300*(-tmp_109*tmp_298 + tmp_289*tmp_69 + tmp_290*tmp_78 + tmp_291*tmp_86 - tmp_298*tmp_299) + tmp_321*(-tmp_109*tmp_319 + tmp_310*tmp_69 + tmp_311*tmp_78 + tmp_312*tmp_86 - tmp_319*tmp_320) + tmp_342*(-tmp_109*tmp_340 + tmp_331*tmp_69 + tmp_332*tmp_78 + tmp_333*tmp_86 - tmp_340*tmp_341) + tmp_363*(-tmp_109*tmp_361 + tmp_352*tmp_69 + tmp_353*tmp_78 + tmp_354*tmp_86 - tmp_361*tmp_362) + tmp_384*(-tmp_109*tmp_382 + tmp_373*tmp_69 + tmp_374*tmp_78 + tmp_375*tmp_86 - tmp_382*tmp_383) + tmp_405*(-tmp_109*tmp_403 + tmp_394*tmp_69 + tmp_395*tmp_78 + tmp_396*tmp_86 - tmp_403*tmp_404) + tmp_426*(-tmp_109*tmp_424 + tmp_415*tmp_69 + tmp_416*tmp_78 + tmp_417*tmp_86 - tmp_424*tmp_425) + tmp_447*(-tmp_109*tmp_445 + tmp_436*tmp_69 + tmp_437*tmp_78 + tmp_438*tmp_86 - tmp_445*tmp_446) + tmp_468*(-tmp_109*tmp_466 + tmp_457*tmp_69 + tmp_458*tmp_78 + tmp_459*tmp_86 - tmp_466*tmp_467) + tmp_489*(-tmp_109*tmp_487 + tmp_478*tmp_69 + tmp_479*tmp_78 + tmp_480*tmp_86 - tmp_487*tmp_488) + tmp_510*(-tmp_109*tmp_508 + tmp_499*tmp_69 + tmp_500*tmp_78 + tmp_501*tmp_86 - tmp_508*tmp_509) + tmp_531*(-tmp_109*tmp_529 + tmp_520*tmp_69 + tmp_521*tmp_78 + tmp_522*tmp_86 - tmp_529*tmp_530);
      real_t a_1_0 = tmp_111*(-tmp_100*tmp_94 - tmp_109*tmp_94 + tmp_45*tmp_533 + tmp_532*tmp_70 + tmp_534*tmp_87) + tmp_132*(-tmp_109*tmp_127 + tmp_121*tmp_533 + tmp_122*tmp_532 + tmp_123*tmp_534 - tmp_127*tmp_131) + tmp_153*(-tmp_109*tmp_148 + tmp_142*tmp_533 + tmp_143*tmp_532 + tmp_144*tmp_534 - tmp_148*tmp_152) + tmp_174*(-tmp_109*tmp_169 + tmp_163*tmp_533 + tmp_164*tmp_532 + tmp_165*tmp_534 - tmp_169*tmp_173) + tmp_195*(-tmp_109*tmp_190 + tmp_184*tmp_533 + tmp_185*tmp_532 + tmp_186*tmp_534 - tmp_190*tmp_194) + tmp_216*(-tmp_109*tmp_211 + tmp_205*tmp_533 + tmp_206*tmp_532 + tmp_207*tmp_534 - tmp_211*tmp_215) + tmp_237*(-tmp_109*tmp_232 + tmp_226*tmp_533 + tmp_227*tmp_532 + tmp_228*tmp_534 - tmp_232*tmp_236) + tmp_258*(-tmp_109*tmp_253 + tmp_247*tmp_533 + tmp_248*tmp_532 + tmp_249*tmp_534 - tmp_253*tmp_257) + tmp_279*(-tmp_109*tmp_274 + tmp_268*tmp_533 + tmp_269*tmp_532 + tmp_270*tmp_534 - tmp_274*tmp_278) + tmp_300*(-tmp_109*tmp_295 + tmp_289*tmp_533 + tmp_290*tmp_532 + tmp_291*tmp_534 - tmp_295*tmp_299) + tmp_321*(-tmp_109*tmp_316 + tmp_310*tmp_533 + tmp_311*tmp_532 + tmp_312*tmp_534 - tmp_316*tmp_320) + tmp_342*(-tmp_109*tmp_337 + tmp_331*tmp_533 + tmp_332*tmp_532 + tmp_333*tmp_534 - tmp_337*tmp_341) + tmp_363*(-tmp_109*tmp_358 + tmp_352*tmp_533 + tmp_353*tmp_532 + tmp_354*tmp_534 - tmp_358*tmp_362) + tmp_384*(-tmp_109*tmp_379 + tmp_373*tmp_533 + tmp_374*tmp_532 + tmp_375*tmp_534 - tmp_379*tmp_383) + tmp_405*(-tmp_109*tmp_400 + tmp_394*tmp_533 + tmp_395*tmp_532 + tmp_396*tmp_534 - tmp_400*tmp_404) + tmp_426*(-tmp_109*tmp_421 + tmp_415*tmp_533 + tmp_416*tmp_532 + tmp_417*tmp_534 - tmp_421*tmp_425) + tmp_447*(-tmp_109*tmp_442 + tmp_436*tmp_533 + tmp_437*tmp_532 + tmp_438*tmp_534 - tmp_442*tmp_446) + tmp_468*(-tmp_109*tmp_463 + tmp_457*tmp_533 + tmp_458*tmp_532 + tmp_459*tmp_534 - tmp_463*tmp_467) + tmp_489*(-tmp_109*tmp_484 + tmp_478*tmp_533 + tmp_479*tmp_532 + tmp_480*tmp_534 - tmp_484*tmp_488) + tmp_510*(-tmp_109*tmp_505 + tmp_499*tmp_533 + tmp_500*tmp_532 + tmp_501*tmp_534 - tmp_505*tmp_509) + tmp_531*(-tmp_109*tmp_526 + tmp_520*tmp_533 + tmp_521*tmp_532 + tmp_522*tmp_534 - tmp_526*tmp_530);
      real_t a_2_0 = tmp_111*(-tmp_100*tmp_95 - tmp_109*tmp_95 + tmp_45*tmp_536 + tmp_535*tmp_70 + tmp_537*tmp_87) + tmp_132*(-tmp_109*tmp_128 + tmp_121*tmp_536 + tmp_122*tmp_535 + tmp_123*tmp_537 - tmp_128*tmp_131) + tmp_153*(-tmp_109*tmp_149 + tmp_142*tmp_536 + tmp_143*tmp_535 + tmp_144*tmp_537 - tmp_149*tmp_152) + tmp_174*(-tmp_109*tmp_170 + tmp_163*tmp_536 + tmp_164*tmp_535 + tmp_165*tmp_537 - tmp_170*tmp_173) + tmp_195*(-tmp_109*tmp_191 + tmp_184*tmp_536 + tmp_185*tmp_535 + tmp_186*tmp_537 - tmp_191*tmp_194) + tmp_216*(-tmp_109*tmp_212 + tmp_205*tmp_536 + tmp_206*tmp_535 + tmp_207*tmp_537 - tmp_212*tmp_215) + tmp_237*(-tmp_109*tmp_233 + tmp_226*tmp_536 + tmp_227*tmp_535 + tmp_228*tmp_537 - tmp_233*tmp_236) + tmp_258*(-tmp_109*tmp_254 + tmp_247*tmp_536 + tmp_248*tmp_535 + tmp_249*tmp_537 - tmp_254*tmp_257) + tmp_279*(-tmp_109*tmp_275 + tmp_268*tmp_536 + tmp_269*tmp_535 + tmp_270*tmp_537 - tmp_275*tmp_278) + tmp_300*(-tmp_109*tmp_296 + tmp_289*tmp_536 + tmp_290*tmp_535 + tmp_291*tmp_537 - tmp_296*tmp_299) + tmp_321*(-tmp_109*tmp_317 + tmp_310*tmp_536 + tmp_311*tmp_535 + tmp_312*tmp_537 - tmp_317*tmp_320) + tmp_342*(-tmp_109*tmp_338 + tmp_331*tmp_536 + tmp_332*tmp_535 + tmp_333*tmp_537 - tmp_338*tmp_341) + tmp_363*(-tmp_109*tmp_359 + tmp_352*tmp_536 + tmp_353*tmp_535 + tmp_354*tmp_537 - tmp_359*tmp_362) + tmp_384*(-tmp_109*tmp_380 + tmp_373*tmp_536 + tmp_374*tmp_535 + tmp_375*tmp_537 - tmp_380*tmp_383) + tmp_405*(-tmp_109*tmp_401 + tmp_394*tmp_536 + tmp_395*tmp_535 + tmp_396*tmp_537 - tmp_401*tmp_404) + tmp_426*(-tmp_109*tmp_422 + tmp_415*tmp_536 + tmp_416*tmp_535 + tmp_417*tmp_537 - tmp_422*tmp_425) + tmp_447*(-tmp_109*tmp_443 + tmp_436*tmp_536 + tmp_437*tmp_535 + tmp_438*tmp_537 - tmp_443*tmp_446) + tmp_468*(-tmp_109*tmp_464 + tmp_457*tmp_536 + tmp_458*tmp_535 + tmp_459*tmp_537 - tmp_464*tmp_467) + tmp_489*(-tmp_109*tmp_485 + tmp_478*tmp_536 + tmp_479*tmp_535 + tmp_480*tmp_537 - tmp_485*tmp_488) + tmp_510*(-tmp_109*tmp_506 + tmp_499*tmp_536 + tmp_500*tmp_535 + tmp_501*tmp_537 - tmp_506*tmp_509) + tmp_531*(-tmp_109*tmp_527 + tmp_520*tmp_536 + tmp_521*tmp_535 + tmp_522*tmp_537 - tmp_527*tmp_530);
      real_t a_3_0 = tmp_111*(-tmp_100*tmp_96 - tmp_109*tmp_96 + tmp_45*tmp_539 + tmp_538*tmp_70 + tmp_540*tmp_87) + tmp_132*(-tmp_109*tmp_129 + tmp_121*tmp_539 + tmp_122*tmp_538 + tmp_123*tmp_540 - tmp_129*tmp_131) + tmp_153*(-tmp_109*tmp_150 + tmp_142*tmp_539 + tmp_143*tmp_538 + tmp_144*tmp_540 - tmp_150*tmp_152) + tmp_174*(-tmp_109*tmp_171 + tmp_163*tmp_539 + tmp_164*tmp_538 + tmp_165*tmp_540 - tmp_171*tmp_173) + tmp_195*(-tmp_109*tmp_192 + tmp_184*tmp_539 + tmp_185*tmp_538 + tmp_186*tmp_540 - tmp_192*tmp_194) + tmp_216*(-tmp_109*tmp_213 + tmp_205*tmp_539 + tmp_206*tmp_538 + tmp_207*tmp_540 - tmp_213*tmp_215) + tmp_237*(-tmp_109*tmp_234 + tmp_226*tmp_539 + tmp_227*tmp_538 + tmp_228*tmp_540 - tmp_234*tmp_236) + tmp_258*(-tmp_109*tmp_255 + tmp_247*tmp_539 + tmp_248*tmp_538 + tmp_249*tmp_540 - tmp_255*tmp_257) + tmp_279*(-tmp_109*tmp_276 + tmp_268*tmp_539 + tmp_269*tmp_538 + tmp_270*tmp_540 - tmp_276*tmp_278) + tmp_300*(-tmp_109*tmp_297 + tmp_289*tmp_539 + tmp_290*tmp_538 + tmp_291*tmp_540 - tmp_297*tmp_299) + tmp_321*(-tmp_109*tmp_318 + tmp_310*tmp_539 + tmp_311*tmp_538 + tmp_312*tmp_540 - tmp_318*tmp_320) + tmp_342*(-tmp_109*tmp_339 + tmp_331*tmp_539 + tmp_332*tmp_538 + tmp_333*tmp_540 - tmp_339*tmp_341) + tmp_363*(-tmp_109*tmp_360 + tmp_352*tmp_539 + tmp_353*tmp_538 + tmp_354*tmp_540 - tmp_360*tmp_362) + tmp_384*(-tmp_109*tmp_381 + tmp_373*tmp_539 + tmp_374*tmp_538 + tmp_375*tmp_540 - tmp_381*tmp_383) + tmp_405*(-tmp_109*tmp_402 + tmp_394*tmp_539 + tmp_395*tmp_538 + tmp_396*tmp_540 - tmp_402*tmp_404) + tmp_426*(-tmp_109*tmp_423 + tmp_415*tmp_539 + tmp_416*tmp_538 + tmp_417*tmp_540 - tmp_423*tmp_425) + tmp_447*(-tmp_109*tmp_444 + tmp_436*tmp_539 + tmp_437*tmp_538 + tmp_438*tmp_540 - tmp_444*tmp_446) + tmp_468*(-tmp_109*tmp_465 + tmp_457*tmp_539 + tmp_458*tmp_538 + tmp_459*tmp_540 - tmp_465*tmp_467) + tmp_489*(-tmp_109*tmp_486 + tmp_478*tmp_539 + tmp_479*tmp_538 + tmp_480*tmp_540 - tmp_486*tmp_488) + tmp_510*(-tmp_109*tmp_507 + tmp_499*tmp_539 + tmp_500*tmp_538 + tmp_501*tmp_540 - tmp_507*tmp_509) + tmp_531*(-tmp_109*tmp_528 + tmp_520*tmp_539 + tmp_521*tmp_538 + tmp_522*tmp_540 - tmp_528*tmp_530);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32;
      real_t tmp_34 = tmp_33 - 1.0/4.0;
      real_t tmp_35 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_36 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_37 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_38 = tmp_20*tmp_35 + tmp_26*tmp_36 + tmp_32*tmp_37;
      real_t tmp_39 = tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_41 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_42 = tmp_11 - tmp_14;
      real_t tmp_43 = tmp_20*tmp_40 + tmp_26*tmp_41 + tmp_32*tmp_42;
      real_t tmp_44 = tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_34 + tmp_1*tmp_39 + tmp_3*tmp_44;
      real_t tmp_46 = 0.5*tmp_15;
      real_t tmp_47 = tmp_42*tmp_46;
      real_t tmp_48 = tmp_37*tmp_46;
      real_t tmp_49 = tmp_27*tmp_46;
      real_t tmp_50 = -tmp_47 - tmp_48 - tmp_49;
      real_t tmp_51 = p_affine_13_2*tmp_50;
      real_t tmp_52 = tmp_2*tmp_44 + tmp_34*tmp_9 + tmp_39*tmp_4;
      real_t tmp_53 = tmp_41*tmp_46;
      real_t tmp_54 = tmp_36*tmp_46;
      real_t tmp_55 = tmp_21*tmp_46;
      real_t tmp_56 = -tmp_53 - tmp_54 - tmp_55;
      real_t tmp_57 = p_affine_13_2*tmp_56;
      real_t tmp_58 = 1.0*tmp_15;
      real_t tmp_59 = tmp_40*tmp_58;
      real_t tmp_60 = tmp_35*tmp_58;
      real_t tmp_61 = tmp_5*tmp_58;
      real_t tmp_62 = p_affine_13_0*tmp_50 + p_affine_13_1*tmp_56 + p_affine_13_2*(-tmp_59 - tmp_60 - tmp_61);
      real_t tmp_63 = tmp_10*tmp_39 + tmp_34*tmp_8 + tmp_44*tmp_6;
      real_t tmp_64 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_65 = std::pow(tmp_64, -0.25);
      real_t tmp_66 = -tmp_33 - tmp_38 - tmp_43 + 1;
      real_t tmp_67 = tmp_46*tmp_5;
      real_t tmp_68 = tmp_35*tmp_46;
      real_t tmp_69 = tmp_40*tmp_46;
      real_t tmp_70 = p_affine_13_0*(tmp_0*tmp_67 + tmp_1*tmp_68 + tmp_10*tmp_48 + tmp_3*tmp_69 + tmp_47*tmp_6 + tmp_49*tmp_8) + p_affine_13_1*(tmp_10*tmp_54 + tmp_2*tmp_69 + tmp_4*tmp_68 + tmp_53*tmp_6 + tmp_55*tmp_8 + tmp_67*tmp_9) + p_affine_13_2*(tmp_10*tmp_60 + tmp_59*tmp_6 + tmp_61*tmp_8);
      real_t tmp_71 = 2.0*std::pow(tmp_64, 1.0/2.0);
      real_t tmp_72 = 0.0068572537431980923*tmp_71;
      real_t tmp_73 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_74 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_75 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_76 = tmp_21*tmp_74 + tmp_27*tmp_75 + tmp_5*tmp_73;
      real_t tmp_77 = tmp_76 - 1.0/4.0;
      real_t tmp_78 = tmp_35*tmp_73 + tmp_36*tmp_74 + tmp_37*tmp_75;
      real_t tmp_79 = tmp_78 - 1.0/4.0;
      real_t tmp_80 = tmp_40*tmp_73 + tmp_41*tmp_74 + tmp_42*tmp_75;
      real_t tmp_81 = tmp_80 - 1.0/4.0;
      real_t tmp_82 = tmp_0*tmp_77 + tmp_1*tmp_79 + tmp_3*tmp_81;
      real_t tmp_83 = tmp_2*tmp_81 + tmp_4*tmp_79 + tmp_77*tmp_9;
      real_t tmp_84 = tmp_10*tmp_79 + tmp_6*tmp_81 + tmp_77*tmp_8;
      real_t tmp_85 = -tmp_76 - tmp_78 - tmp_80 + 1;
      real_t tmp_86 = 0.037198804536718075*tmp_71;
      real_t tmp_87 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_88 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_89 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_90 = tmp_21*tmp_88 + tmp_27*tmp_89 + tmp_5*tmp_87;
      real_t tmp_91 = tmp_90 - 1.0/4.0;
      real_t tmp_92 = tmp_35*tmp_87 + tmp_36*tmp_88 + tmp_37*tmp_89;
      real_t tmp_93 = tmp_92 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_87 + tmp_41*tmp_88 + tmp_42*tmp_89;
      real_t tmp_95 = tmp_94 - 1.0/4.0;
      real_t tmp_96 = tmp_0*tmp_91 + tmp_1*tmp_93 + tmp_3*tmp_95;
      real_t tmp_97 = tmp_2*tmp_95 + tmp_4*tmp_93 + tmp_9*tmp_91;
      real_t tmp_98 = tmp_10*tmp_93 + tmp_6*tmp_95 + tmp_8*tmp_91;
      real_t tmp_99 = -tmp_90 - tmp_92 - tmp_94 + 1;
      real_t tmp_100 = 0.020848748529055869*tmp_71;
      real_t tmp_101 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_102 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_103 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_104 = tmp_101*tmp_5 + tmp_102*tmp_21 + tmp_103*tmp_27;
      real_t tmp_105 = tmp_104 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_35 + tmp_102*tmp_36 + tmp_103*tmp_37;
      real_t tmp_107 = tmp_106 - 1.0/4.0;
      real_t tmp_108 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42;
      real_t tmp_109 = tmp_108 - 1.0/4.0;
      real_t tmp_110 = tmp_0*tmp_105 + tmp_1*tmp_107 + tmp_109*tmp_3;
      real_t tmp_111 = tmp_105*tmp_9 + tmp_107*tmp_4 + tmp_109*tmp_2;
      real_t tmp_112 = tmp_10*tmp_107 + tmp_105*tmp_8 + tmp_109*tmp_6;
      real_t tmp_113 = -tmp_104 - tmp_106 - tmp_108 + 1;
      real_t tmp_114 = 0.019202922745021479*tmp_71;
      real_t tmp_115 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_116 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_117 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_118 = tmp_115*tmp_5 + tmp_116*tmp_21 + tmp_117*tmp_27;
      real_t tmp_119 = tmp_118 - 1.0/4.0;
      real_t tmp_120 = tmp_115*tmp_35 + tmp_116*tmp_36 + tmp_117*tmp_37;
      real_t tmp_121 = tmp_120 - 1.0/4.0;
      real_t tmp_122 = tmp_115*tmp_40 + tmp_116*tmp_41 + tmp_117*tmp_42;
      real_t tmp_123 = tmp_122 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_119 + tmp_1*tmp_121 + tmp_123*tmp_3;
      real_t tmp_125 = tmp_119*tmp_9 + tmp_121*tmp_4 + tmp_123*tmp_2;
      real_t tmp_126 = tmp_10*tmp_121 + tmp_119*tmp_8 + tmp_123*tmp_6;
      real_t tmp_127 = -tmp_118 - tmp_120 - tmp_122 + 1;
      real_t tmp_128 = 0.020848748529055869*tmp_71;
      real_t tmp_129 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_130 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_131 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_132 = tmp_129*tmp_5 + tmp_130*tmp_21 + tmp_131*tmp_27;
      real_t tmp_133 = tmp_132 - 1.0/4.0;
      real_t tmp_134 = tmp_129*tmp_35 + tmp_130*tmp_36 + tmp_131*tmp_37;
      real_t tmp_135 = tmp_134 - 1.0/4.0;
      real_t tmp_136 = tmp_129*tmp_40 + tmp_130*tmp_41 + tmp_131*tmp_42;
      real_t tmp_137 = tmp_136 - 1.0/4.0;
      real_t tmp_138 = tmp_0*tmp_133 + tmp_1*tmp_135 + tmp_137*tmp_3;
      real_t tmp_139 = tmp_133*tmp_9 + tmp_135*tmp_4 + tmp_137*tmp_2;
      real_t tmp_140 = tmp_10*tmp_135 + tmp_133*tmp_8 + tmp_137*tmp_6;
      real_t tmp_141 = -tmp_132 - tmp_134 - tmp_136 + 1;
      real_t tmp_142 = 0.019202922745021479*tmp_71;
      real_t tmp_143 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27;
      real_t tmp_147 = tmp_146 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_35 + tmp_144*tmp_36 + tmp_145*tmp_37;
      real_t tmp_149 = tmp_148 - 1.0/4.0;
      real_t tmp_150 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42;
      real_t tmp_151 = tmp_150 - 1.0/4.0;
      real_t tmp_152 = tmp_0*tmp_147 + tmp_1*tmp_149 + tmp_151*tmp_3;
      real_t tmp_153 = tmp_147*tmp_9 + tmp_149*tmp_4 + tmp_151*tmp_2;
      real_t tmp_154 = tmp_10*tmp_149 + tmp_147*tmp_8 + tmp_151*tmp_6;
      real_t tmp_155 = -tmp_146 - tmp_148 - tmp_150 + 1;
      real_t tmp_156 = 0.020848748529055869*tmp_71;
      real_t tmp_157 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_158 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_159 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_160 = tmp_157*tmp_5 + tmp_158*tmp_21 + tmp_159*tmp_27;
      real_t tmp_161 = tmp_160 - 1.0/4.0;
      real_t tmp_162 = tmp_157*tmp_35 + tmp_158*tmp_36 + tmp_159*tmp_37;
      real_t tmp_163 = tmp_162 - 1.0/4.0;
      real_t tmp_164 = tmp_157*tmp_40 + tmp_158*tmp_41 + tmp_159*tmp_42;
      real_t tmp_165 = tmp_164 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_161 + tmp_1*tmp_163 + tmp_165*tmp_3;
      real_t tmp_167 = tmp_161*tmp_9 + tmp_163*tmp_4 + tmp_165*tmp_2;
      real_t tmp_168 = tmp_10*tmp_163 + tmp_161*tmp_8 + tmp_165*tmp_6;
      real_t tmp_169 = -tmp_160 - tmp_162 - tmp_164 + 1;
      real_t tmp_170 = 0.019202922745021479*tmp_71;
      real_t tmp_171 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_172 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_173 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_174 = tmp_171*tmp_5 + tmp_172*tmp_21 + tmp_173*tmp_27;
      real_t tmp_175 = tmp_174 - 1.0/4.0;
      real_t tmp_176 = tmp_171*tmp_35 + tmp_172*tmp_36 + tmp_173*tmp_37;
      real_t tmp_177 = tmp_176 - 1.0/4.0;
      real_t tmp_178 = tmp_171*tmp_40 + tmp_172*tmp_41 + tmp_173*tmp_42;
      real_t tmp_179 = tmp_178 - 1.0/4.0;
      real_t tmp_180 = tmp_0*tmp_175 + tmp_1*tmp_177 + tmp_179*tmp_3;
      real_t tmp_181 = tmp_175*tmp_9 + tmp_177*tmp_4 + tmp_179*tmp_2;
      real_t tmp_182 = tmp_10*tmp_177 + tmp_175*tmp_8 + tmp_179*tmp_6;
      real_t tmp_183 = -tmp_174 - tmp_176 - tmp_178 + 1;
      real_t tmp_184 = 0.020848748529055869*tmp_71;
      real_t tmp_185 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_186 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_187 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_188 = tmp_185*tmp_5 + tmp_186*tmp_21 + tmp_187*tmp_27;
      real_t tmp_189 = tmp_188 - 1.0/4.0;
      real_t tmp_190 = tmp_185*tmp_35 + tmp_186*tmp_36 + tmp_187*tmp_37;
      real_t tmp_191 = tmp_190 - 1.0/4.0;
      real_t tmp_192 = tmp_185*tmp_40 + tmp_186*tmp_41 + tmp_187*tmp_42;
      real_t tmp_193 = tmp_192 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_189 + tmp_1*tmp_191 + tmp_193*tmp_3;
      real_t tmp_195 = tmp_189*tmp_9 + tmp_191*tmp_4 + tmp_193*tmp_2;
      real_t tmp_196 = tmp_10*tmp_191 + tmp_189*tmp_8 + tmp_193*tmp_6;
      real_t tmp_197 = -tmp_188 - tmp_190 - tmp_192 + 1;
      real_t tmp_198 = 0.019202922745021479*tmp_71;
      real_t tmp_199 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_200 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_201 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_202 = tmp_199*tmp_5 + tmp_200*tmp_21 + tmp_201*tmp_27;
      real_t tmp_203 = tmp_202 - 1.0/4.0;
      real_t tmp_204 = tmp_199*tmp_35 + tmp_200*tmp_36 + tmp_201*tmp_37;
      real_t tmp_205 = tmp_204 - 1.0/4.0;
      real_t tmp_206 = tmp_199*tmp_40 + tmp_200*tmp_41 + tmp_201*tmp_42;
      real_t tmp_207 = tmp_206 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_203 + tmp_1*tmp_205 + tmp_207*tmp_3;
      real_t tmp_209 = tmp_2*tmp_207 + tmp_203*tmp_9 + tmp_205*tmp_4;
      real_t tmp_210 = tmp_10*tmp_205 + tmp_203*tmp_8 + tmp_207*tmp_6;
      real_t tmp_211 = -tmp_202 - tmp_204 - tmp_206 + 1;
      real_t tmp_212 = 0.020848748529055869*tmp_71;
      real_t tmp_213 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_214 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_215 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_216 = tmp_21*tmp_214 + tmp_213*tmp_5 + tmp_215*tmp_27;
      real_t tmp_217 = tmp_216 - 1.0/4.0;
      real_t tmp_218 = tmp_213*tmp_35 + tmp_214*tmp_36 + tmp_215*tmp_37;
      real_t tmp_219 = tmp_218 - 1.0/4.0;
      real_t tmp_220 = tmp_213*tmp_40 + tmp_214*tmp_41 + tmp_215*tmp_42;
      real_t tmp_221 = tmp_220 - 1.0/4.0;
      real_t tmp_222 = tmp_0*tmp_217 + tmp_1*tmp_219 + tmp_221*tmp_3;
      real_t tmp_223 = tmp_2*tmp_221 + tmp_217*tmp_9 + tmp_219*tmp_4;
      real_t tmp_224 = tmp_10*tmp_219 + tmp_217*tmp_8 + tmp_221*tmp_6;
      real_t tmp_225 = -tmp_216 - tmp_218 - tmp_220 + 1;
      real_t tmp_226 = 0.019202922745021479*tmp_71;
      real_t tmp_227 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_228 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_229 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_230 = tmp_21*tmp_228 + tmp_227*tmp_5 + tmp_229*tmp_27;
      real_t tmp_231 = tmp_230 - 1.0/4.0;
      real_t tmp_232 = tmp_227*tmp_35 + tmp_228*tmp_36 + tmp_229*tmp_37;
      real_t tmp_233 = tmp_232 - 1.0/4.0;
      real_t tmp_234 = tmp_227*tmp_40 + tmp_228*tmp_41 + tmp_229*tmp_42;
      real_t tmp_235 = tmp_234 - 1.0/4.0;
      real_t tmp_236 = tmp_0*tmp_231 + tmp_1*tmp_233 + tmp_235*tmp_3;
      real_t tmp_237 = tmp_2*tmp_235 + tmp_231*tmp_9 + tmp_233*tmp_4;
      real_t tmp_238 = tmp_10*tmp_233 + tmp_231*tmp_8 + tmp_235*tmp_6;
      real_t tmp_239 = -tmp_230 - tmp_232 - tmp_234 + 1;
      real_t tmp_240 = 0.042507265838595799*tmp_71;
      real_t tmp_241 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_242 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_243 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_244 = tmp_21*tmp_242 + tmp_241*tmp_5 + tmp_243*tmp_27;
      real_t tmp_245 = tmp_244 - 1.0/4.0;
      real_t tmp_246 = tmp_241*tmp_35 + tmp_242*tmp_36 + tmp_243*tmp_37;
      real_t tmp_247 = tmp_246 - 1.0/4.0;
      real_t tmp_248 = tmp_241*tmp_40 + tmp_242*tmp_41 + tmp_243*tmp_42;
      real_t tmp_249 = tmp_248 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_245 + tmp_1*tmp_247 + tmp_249*tmp_3;
      real_t tmp_251 = tmp_2*tmp_249 + tmp_245*tmp_9 + tmp_247*tmp_4;
      real_t tmp_252 = tmp_10*tmp_247 + tmp_245*tmp_8 + tmp_249*tmp_6;
      real_t tmp_253 = -tmp_244 - tmp_246 - tmp_248 + 1;
      real_t tmp_254 = 0.020848748529055869*tmp_71;
      real_t tmp_255 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_256 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_257 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_258 = tmp_21*tmp_256 + tmp_255*tmp_5 + tmp_257*tmp_27;
      real_t tmp_259 = tmp_258 - 1.0/4.0;
      real_t tmp_260 = tmp_255*tmp_35 + tmp_256*tmp_36 + tmp_257*tmp_37;
      real_t tmp_261 = tmp_260 - 1.0/4.0;
      real_t tmp_262 = tmp_255*tmp_40 + tmp_256*tmp_41 + tmp_257*tmp_42;
      real_t tmp_263 = tmp_262 - 1.0/4.0;
      real_t tmp_264 = tmp_0*tmp_259 + tmp_1*tmp_261 + tmp_263*tmp_3;
      real_t tmp_265 = tmp_2*tmp_263 + tmp_259*tmp_9 + tmp_261*tmp_4;
      real_t tmp_266 = tmp_10*tmp_261 + tmp_259*tmp_8 + tmp_263*tmp_6;
      real_t tmp_267 = -tmp_258 - tmp_260 - tmp_262 + 1;
      real_t tmp_268 = 0.0068572537431980923*tmp_71;
      real_t tmp_269 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_270 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_271 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_272 = tmp_21*tmp_270 + tmp_269*tmp_5 + tmp_27*tmp_271;
      real_t tmp_273 = tmp_272 - 1.0/4.0;
      real_t tmp_274 = tmp_269*tmp_35 + tmp_270*tmp_36 + tmp_271*tmp_37;
      real_t tmp_275 = tmp_274 - 1.0/4.0;
      real_t tmp_276 = tmp_269*tmp_40 + tmp_270*tmp_41 + tmp_271*tmp_42;
      real_t tmp_277 = tmp_276 - 1.0/4.0;
      real_t tmp_278 = tmp_0*tmp_273 + tmp_1*tmp_275 + tmp_277*tmp_3;
      real_t tmp_279 = tmp_2*tmp_277 + tmp_273*tmp_9 + tmp_275*tmp_4;
      real_t tmp_280 = tmp_10*tmp_275 + tmp_273*tmp_8 + tmp_277*tmp_6;
      real_t tmp_281 = -tmp_272 - tmp_274 - tmp_276 + 1;
      real_t tmp_282 = 0.037198804536718075*tmp_71;
      real_t tmp_283 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_284 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_285 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_286 = tmp_21*tmp_284 + tmp_27*tmp_285 + tmp_283*tmp_5;
      real_t tmp_287 = tmp_286 - 1.0/4.0;
      real_t tmp_288 = tmp_283*tmp_35 + tmp_284*tmp_36 + tmp_285*tmp_37;
      real_t tmp_289 = tmp_288 - 1.0/4.0;
      real_t tmp_290 = tmp_283*tmp_40 + tmp_284*tmp_41 + tmp_285*tmp_42;
      real_t tmp_291 = tmp_290 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_287 + tmp_1*tmp_289 + tmp_291*tmp_3;
      real_t tmp_293 = tmp_2*tmp_291 + tmp_287*tmp_9 + tmp_289*tmp_4;
      real_t tmp_294 = tmp_10*tmp_289 + tmp_287*tmp_8 + tmp_291*tmp_6;
      real_t tmp_295 = -tmp_286 - tmp_288 - tmp_290 + 1;
      real_t tmp_296 = 0.042507265838595799*tmp_71;
      real_t tmp_297 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_298 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_299 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_300 = tmp_21*tmp_298 + tmp_27*tmp_299 + tmp_297*tmp_5;
      real_t tmp_301 = tmp_300 - 1.0/4.0;
      real_t tmp_302 = tmp_297*tmp_35 + tmp_298*tmp_36 + tmp_299*tmp_37;
      real_t tmp_303 = tmp_302 - 1.0/4.0;
      real_t tmp_304 = tmp_297*tmp_40 + tmp_298*tmp_41 + tmp_299*tmp_42;
      real_t tmp_305 = tmp_304 - 1.0/4.0;
      real_t tmp_306 = tmp_0*tmp_301 + tmp_1*tmp_303 + tmp_3*tmp_305;
      real_t tmp_307 = tmp_2*tmp_305 + tmp_301*tmp_9 + tmp_303*tmp_4;
      real_t tmp_308 = tmp_10*tmp_303 + tmp_301*tmp_8 + tmp_305*tmp_6;
      real_t tmp_309 = -tmp_300 - tmp_302 - tmp_304 + 1;
      real_t tmp_310 = 0.0068572537431980923*tmp_71;
      real_t tmp_311 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_312 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_313 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_314 = tmp_21*tmp_312 + tmp_27*tmp_313 + tmp_311*tmp_5;
      real_t tmp_315 = tmp_314 - 1.0/4.0;
      real_t tmp_316 = tmp_311*tmp_35 + tmp_312*tmp_36 + tmp_313*tmp_37;
      real_t tmp_317 = tmp_316 - 1.0/4.0;
      real_t tmp_318 = tmp_311*tmp_40 + tmp_312*tmp_41 + tmp_313*tmp_42;
      real_t tmp_319 = tmp_318 - 1.0/4.0;
      real_t tmp_320 = tmp_0*tmp_315 + tmp_1*tmp_317 + tmp_3*tmp_319;
      real_t tmp_321 = tmp_2*tmp_319 + tmp_315*tmp_9 + tmp_317*tmp_4;
      real_t tmp_322 = tmp_10*tmp_317 + tmp_315*tmp_8 + tmp_319*tmp_6;
      real_t tmp_323 = -tmp_314 - tmp_316 - tmp_318 + 1;
      real_t tmp_324 = 0.037198804536718075*tmp_71;
      real_t tmp_325 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_326 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_327 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_328 = tmp_21*tmp_326 + tmp_27*tmp_327 + tmp_325*tmp_5;
      real_t tmp_329 = tmp_328 - 1.0/4.0;
      real_t tmp_330 = tmp_325*tmp_35 + tmp_326*tmp_36 + tmp_327*tmp_37;
      real_t tmp_331 = tmp_330 - 1.0/4.0;
      real_t tmp_332 = tmp_325*tmp_40 + tmp_326*tmp_41 + tmp_327*tmp_42;
      real_t tmp_333 = tmp_332 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_329 + tmp_1*tmp_331 + tmp_3*tmp_333;
      real_t tmp_335 = tmp_2*tmp_333 + tmp_329*tmp_9 + tmp_331*tmp_4;
      real_t tmp_336 = tmp_10*tmp_331 + tmp_329*tmp_8 + tmp_333*tmp_6;
      real_t tmp_337 = -tmp_328 - tmp_330 - tmp_332 + 1;
      real_t tmp_338 = 0.042507265838595799*tmp_71;
      real_t tmp_339 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_340 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_341 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_342 = tmp_21*tmp_340 + tmp_27*tmp_341 + tmp_339*tmp_5;
      real_t tmp_343 = tmp_342 - 1.0/4.0;
      real_t tmp_344 = tmp_339*tmp_35 + tmp_340*tmp_36 + tmp_341*tmp_37;
      real_t tmp_345 = tmp_344 - 1.0/4.0;
      real_t tmp_346 = tmp_339*tmp_40 + tmp_340*tmp_41 + tmp_341*tmp_42;
      real_t tmp_347 = tmp_346 - 1.0/4.0;
      real_t tmp_348 = tmp_0*tmp_343 + tmp_1*tmp_345 + tmp_3*tmp_347;
      real_t tmp_349 = tmp_2*tmp_347 + tmp_343*tmp_9 + tmp_345*tmp_4;
      real_t tmp_350 = tmp_10*tmp_345 + tmp_343*tmp_8 + tmp_347*tmp_6;
      real_t tmp_351 = -tmp_342 - tmp_344 - tmp_346 + 1;
      real_t tmp_352 = 0.019202922745021479*tmp_71;
      real_t tmp_353 = p_affine_13_2*tmp_55;
      real_t tmp_354 = p_affine_13_2*tmp_49;
      real_t tmp_355 = p_affine_13_0*tmp_49 + p_affine_13_1*tmp_55 + p_affine_13_2*tmp_61;
      real_t tmp_356 = p_affine_13_2*tmp_54;
      real_t tmp_357 = p_affine_13_2*tmp_48;
      real_t tmp_358 = p_affine_13_0*tmp_48 + p_affine_13_1*tmp_54 + p_affine_13_2*tmp_60;
      real_t tmp_359 = p_affine_13_2*tmp_53;
      real_t tmp_360 = p_affine_13_2*tmp_47;
      real_t tmp_361 = p_affine_13_0*tmp_47 + p_affine_13_1*tmp_53 + p_affine_13_2*tmp_59;
      real_t a_0_0 = tmp_100*(-tmp_51*tmp_96 - tmp_57*tmp_97 - tmp_62*tmp_98 + 7.0*tmp_65*tmp_98*tmp_99 - tmp_70*tmp_99) + tmp_114*(-tmp_110*tmp_51 - tmp_111*tmp_57 + 7.0*tmp_112*tmp_113*tmp_65 - tmp_112*tmp_62 - tmp_113*tmp_70) + tmp_128*(-tmp_124*tmp_51 - tmp_125*tmp_57 + 7.0*tmp_126*tmp_127*tmp_65 - tmp_126*tmp_62 - tmp_127*tmp_70) + tmp_142*(-tmp_138*tmp_51 - tmp_139*tmp_57 + 7.0*tmp_140*tmp_141*tmp_65 - tmp_140*tmp_62 - tmp_141*tmp_70) + tmp_156*(-tmp_152*tmp_51 - tmp_153*tmp_57 + 7.0*tmp_154*tmp_155*tmp_65 - tmp_154*tmp_62 - tmp_155*tmp_70) + tmp_170*(-tmp_166*tmp_51 - tmp_167*tmp_57 + 7.0*tmp_168*tmp_169*tmp_65 - tmp_168*tmp_62 - tmp_169*tmp_70) + tmp_184*(-tmp_180*tmp_51 - tmp_181*tmp_57 + 7.0*tmp_182*tmp_183*tmp_65 - tmp_182*tmp_62 - tmp_183*tmp_70) + tmp_198*(-tmp_194*tmp_51 - tmp_195*tmp_57 + 7.0*tmp_196*tmp_197*tmp_65 - tmp_196*tmp_62 - tmp_197*tmp_70) + tmp_212*(-tmp_208*tmp_51 - tmp_209*tmp_57 + 7.0*tmp_210*tmp_211*tmp_65 - tmp_210*tmp_62 - tmp_211*tmp_70) + tmp_226*(-tmp_222*tmp_51 - tmp_223*tmp_57 + 7.0*tmp_224*tmp_225*tmp_65 - tmp_224*tmp_62 - tmp_225*tmp_70) + tmp_240*(-tmp_236*tmp_51 - tmp_237*tmp_57 + 7.0*tmp_238*tmp_239*tmp_65 - tmp_238*tmp_62 - tmp_239*tmp_70) + tmp_254*(-tmp_250*tmp_51 - tmp_251*tmp_57 + 7.0*tmp_252*tmp_253*tmp_65 - tmp_252*tmp_62 - tmp_253*tmp_70) + tmp_268*(-tmp_264*tmp_51 - tmp_265*tmp_57 + 7.0*tmp_266*tmp_267*tmp_65 - tmp_266*tmp_62 - tmp_267*tmp_70) + tmp_282*(-tmp_278*tmp_51 - tmp_279*tmp_57 + 7.0*tmp_280*tmp_281*tmp_65 - tmp_280*tmp_62 - tmp_281*tmp_70) + tmp_296*(-tmp_292*tmp_51 - tmp_293*tmp_57 + 7.0*tmp_294*tmp_295*tmp_65 - tmp_294*tmp_62 - tmp_295*tmp_70) + tmp_310*(-tmp_306*tmp_51 - tmp_307*tmp_57 + 7.0*tmp_308*tmp_309*tmp_65 - tmp_308*tmp_62 - tmp_309*tmp_70) + tmp_324*(-tmp_320*tmp_51 - tmp_321*tmp_57 + 7.0*tmp_322*tmp_323*tmp_65 - tmp_322*tmp_62 - tmp_323*tmp_70) + tmp_338*(-tmp_334*tmp_51 - tmp_335*tmp_57 + 7.0*tmp_336*tmp_337*tmp_65 - tmp_336*tmp_62 - tmp_337*tmp_70) + tmp_352*(-tmp_348*tmp_51 - tmp_349*tmp_57 + 7.0*tmp_350*tmp_351*tmp_65 - tmp_350*tmp_62 - tmp_351*tmp_70) + tmp_72*(-tmp_45*tmp_51 - tmp_52*tmp_57 - tmp_62*tmp_63 + 7.0*tmp_63*tmp_65*tmp_66 - tmp_66*tmp_70) + tmp_86*(-tmp_51*tmp_82 - tmp_57*tmp_83 - tmp_62*tmp_84 + 7.0*tmp_65*tmp_84*tmp_85 - tmp_70*tmp_85);
      real_t a_1_0 = tmp_100*(-tmp_353*tmp_97 - tmp_354*tmp_96 - tmp_355*tmp_98 + 7.0*tmp_65*tmp_90*tmp_98 - tmp_70*tmp_90) + tmp_114*(7.0*tmp_104*tmp_112*tmp_65 - tmp_104*tmp_70 - tmp_110*tmp_354 - tmp_111*tmp_353 - tmp_112*tmp_355) + tmp_128*(7.0*tmp_118*tmp_126*tmp_65 - tmp_118*tmp_70 - tmp_124*tmp_354 - tmp_125*tmp_353 - tmp_126*tmp_355) + tmp_142*(7.0*tmp_132*tmp_140*tmp_65 - tmp_132*tmp_70 - tmp_138*tmp_354 - tmp_139*tmp_353 - tmp_140*tmp_355) + tmp_156*(7.0*tmp_146*tmp_154*tmp_65 - tmp_146*tmp_70 - tmp_152*tmp_354 - tmp_153*tmp_353 - tmp_154*tmp_355) + tmp_170*(7.0*tmp_160*tmp_168*tmp_65 - tmp_160*tmp_70 - tmp_166*tmp_354 - tmp_167*tmp_353 - tmp_168*tmp_355) + tmp_184*(7.0*tmp_174*tmp_182*tmp_65 - tmp_174*tmp_70 - tmp_180*tmp_354 - tmp_181*tmp_353 - tmp_182*tmp_355) + tmp_198*(7.0*tmp_188*tmp_196*tmp_65 - tmp_188*tmp_70 - tmp_194*tmp_354 - tmp_195*tmp_353 - tmp_196*tmp_355) + tmp_212*(7.0*tmp_202*tmp_210*tmp_65 - tmp_202*tmp_70 - tmp_208*tmp_354 - tmp_209*tmp_353 - tmp_210*tmp_355) + tmp_226*(7.0*tmp_216*tmp_224*tmp_65 - tmp_216*tmp_70 - tmp_222*tmp_354 - tmp_223*tmp_353 - tmp_224*tmp_355) + tmp_240*(7.0*tmp_230*tmp_238*tmp_65 - tmp_230*tmp_70 - tmp_236*tmp_354 - tmp_237*tmp_353 - tmp_238*tmp_355) + tmp_254*(7.0*tmp_244*tmp_252*tmp_65 - tmp_244*tmp_70 - tmp_250*tmp_354 - tmp_251*tmp_353 - tmp_252*tmp_355) + tmp_268*(7.0*tmp_258*tmp_266*tmp_65 - tmp_258*tmp_70 - tmp_264*tmp_354 - tmp_265*tmp_353 - tmp_266*tmp_355) + tmp_282*(7.0*tmp_272*tmp_280*tmp_65 - tmp_272*tmp_70 - tmp_278*tmp_354 - tmp_279*tmp_353 - tmp_280*tmp_355) + tmp_296*(7.0*tmp_286*tmp_294*tmp_65 - tmp_286*tmp_70 - tmp_292*tmp_354 - tmp_293*tmp_353 - tmp_294*tmp_355) + tmp_310*(7.0*tmp_300*tmp_308*tmp_65 - tmp_300*tmp_70 - tmp_306*tmp_354 - tmp_307*tmp_353 - tmp_308*tmp_355) + tmp_324*(7.0*tmp_314*tmp_322*tmp_65 - tmp_314*tmp_70 - tmp_320*tmp_354 - tmp_321*tmp_353 - tmp_322*tmp_355) + tmp_338*(7.0*tmp_328*tmp_336*tmp_65 - tmp_328*tmp_70 - tmp_334*tmp_354 - tmp_335*tmp_353 - tmp_336*tmp_355) + tmp_352*(7.0*tmp_342*tmp_350*tmp_65 - tmp_342*tmp_70 - tmp_348*tmp_354 - tmp_349*tmp_353 - tmp_350*tmp_355) + tmp_72*(7.0*tmp_33*tmp_63*tmp_65 - tmp_33*tmp_70 - tmp_353*tmp_52 - tmp_354*tmp_45 - tmp_355*tmp_63) + tmp_86*(-tmp_353*tmp_83 - tmp_354*tmp_82 - tmp_355*tmp_84 + 7.0*tmp_65*tmp_76*tmp_84 - tmp_70*tmp_76);
      real_t a_2_0 = tmp_100*(-tmp_356*tmp_97 - tmp_357*tmp_96 - tmp_358*tmp_98 + 7.0*tmp_65*tmp_92*tmp_98 - tmp_70*tmp_92) + tmp_114*(7.0*tmp_106*tmp_112*tmp_65 - tmp_106*tmp_70 - tmp_110*tmp_357 - tmp_111*tmp_356 - tmp_112*tmp_358) + tmp_128*(7.0*tmp_120*tmp_126*tmp_65 - tmp_120*tmp_70 - tmp_124*tmp_357 - tmp_125*tmp_356 - tmp_126*tmp_358) + tmp_142*(7.0*tmp_134*tmp_140*tmp_65 - tmp_134*tmp_70 - tmp_138*tmp_357 - tmp_139*tmp_356 - tmp_140*tmp_358) + tmp_156*(7.0*tmp_148*tmp_154*tmp_65 - tmp_148*tmp_70 - tmp_152*tmp_357 - tmp_153*tmp_356 - tmp_154*tmp_358) + tmp_170*(7.0*tmp_162*tmp_168*tmp_65 - tmp_162*tmp_70 - tmp_166*tmp_357 - tmp_167*tmp_356 - tmp_168*tmp_358) + tmp_184*(7.0*tmp_176*tmp_182*tmp_65 - tmp_176*tmp_70 - tmp_180*tmp_357 - tmp_181*tmp_356 - tmp_182*tmp_358) + tmp_198*(7.0*tmp_190*tmp_196*tmp_65 - tmp_190*tmp_70 - tmp_194*tmp_357 - tmp_195*tmp_356 - tmp_196*tmp_358) + tmp_212*(7.0*tmp_204*tmp_210*tmp_65 - tmp_204*tmp_70 - tmp_208*tmp_357 - tmp_209*tmp_356 - tmp_210*tmp_358) + tmp_226*(7.0*tmp_218*tmp_224*tmp_65 - tmp_218*tmp_70 - tmp_222*tmp_357 - tmp_223*tmp_356 - tmp_224*tmp_358) + tmp_240*(7.0*tmp_232*tmp_238*tmp_65 - tmp_232*tmp_70 - tmp_236*tmp_357 - tmp_237*tmp_356 - tmp_238*tmp_358) + tmp_254*(7.0*tmp_246*tmp_252*tmp_65 - tmp_246*tmp_70 - tmp_250*tmp_357 - tmp_251*tmp_356 - tmp_252*tmp_358) + tmp_268*(7.0*tmp_260*tmp_266*tmp_65 - tmp_260*tmp_70 - tmp_264*tmp_357 - tmp_265*tmp_356 - tmp_266*tmp_358) + tmp_282*(7.0*tmp_274*tmp_280*tmp_65 - tmp_274*tmp_70 - tmp_278*tmp_357 - tmp_279*tmp_356 - tmp_280*tmp_358) + tmp_296*(7.0*tmp_288*tmp_294*tmp_65 - tmp_288*tmp_70 - tmp_292*tmp_357 - tmp_293*tmp_356 - tmp_294*tmp_358) + tmp_310*(7.0*tmp_302*tmp_308*tmp_65 - tmp_302*tmp_70 - tmp_306*tmp_357 - tmp_307*tmp_356 - tmp_308*tmp_358) + tmp_324*(7.0*tmp_316*tmp_322*tmp_65 - tmp_316*tmp_70 - tmp_320*tmp_357 - tmp_321*tmp_356 - tmp_322*tmp_358) + tmp_338*(7.0*tmp_330*tmp_336*tmp_65 - tmp_330*tmp_70 - tmp_334*tmp_357 - tmp_335*tmp_356 - tmp_336*tmp_358) + tmp_352*(7.0*tmp_344*tmp_350*tmp_65 - tmp_344*tmp_70 - tmp_348*tmp_357 - tmp_349*tmp_356 - tmp_350*tmp_358) + tmp_72*(-tmp_356*tmp_52 - tmp_357*tmp_45 - tmp_358*tmp_63 + 7.0*tmp_38*tmp_63*tmp_65 - tmp_38*tmp_70) + tmp_86*(-tmp_356*tmp_83 - tmp_357*tmp_82 - tmp_358*tmp_84 + 7.0*tmp_65*tmp_78*tmp_84 - tmp_70*tmp_78);
      real_t a_3_0 = tmp_100*(-tmp_359*tmp_97 - tmp_360*tmp_96 - tmp_361*tmp_98 + 7.0*tmp_65*tmp_94*tmp_98 - tmp_70*tmp_94) + tmp_114*(7.0*tmp_108*tmp_112*tmp_65 - tmp_108*tmp_70 - tmp_110*tmp_360 - tmp_111*tmp_359 - tmp_112*tmp_361) + tmp_128*(7.0*tmp_122*tmp_126*tmp_65 - tmp_122*tmp_70 - tmp_124*tmp_360 - tmp_125*tmp_359 - tmp_126*tmp_361) + tmp_142*(7.0*tmp_136*tmp_140*tmp_65 - tmp_136*tmp_70 - tmp_138*tmp_360 - tmp_139*tmp_359 - tmp_140*tmp_361) + tmp_156*(7.0*tmp_150*tmp_154*tmp_65 - tmp_150*tmp_70 - tmp_152*tmp_360 - tmp_153*tmp_359 - tmp_154*tmp_361) + tmp_170*(7.0*tmp_164*tmp_168*tmp_65 - tmp_164*tmp_70 - tmp_166*tmp_360 - tmp_167*tmp_359 - tmp_168*tmp_361) + tmp_184*(7.0*tmp_178*tmp_182*tmp_65 - tmp_178*tmp_70 - tmp_180*tmp_360 - tmp_181*tmp_359 - tmp_182*tmp_361) + tmp_198*(7.0*tmp_192*tmp_196*tmp_65 - tmp_192*tmp_70 - tmp_194*tmp_360 - tmp_195*tmp_359 - tmp_196*tmp_361) + tmp_212*(7.0*tmp_206*tmp_210*tmp_65 - tmp_206*tmp_70 - tmp_208*tmp_360 - tmp_209*tmp_359 - tmp_210*tmp_361) + tmp_226*(7.0*tmp_220*tmp_224*tmp_65 - tmp_220*tmp_70 - tmp_222*tmp_360 - tmp_223*tmp_359 - tmp_224*tmp_361) + tmp_240*(7.0*tmp_234*tmp_238*tmp_65 - tmp_234*tmp_70 - tmp_236*tmp_360 - tmp_237*tmp_359 - tmp_238*tmp_361) + tmp_254*(7.0*tmp_248*tmp_252*tmp_65 - tmp_248*tmp_70 - tmp_250*tmp_360 - tmp_251*tmp_359 - tmp_252*tmp_361) + tmp_268*(7.0*tmp_262*tmp_266*tmp_65 - tmp_262*tmp_70 - tmp_264*tmp_360 - tmp_265*tmp_359 - tmp_266*tmp_361) + tmp_282*(7.0*tmp_276*tmp_280*tmp_65 - tmp_276*tmp_70 - tmp_278*tmp_360 - tmp_279*tmp_359 - tmp_280*tmp_361) + tmp_296*(7.0*tmp_290*tmp_294*tmp_65 - tmp_290*tmp_70 - tmp_292*tmp_360 - tmp_293*tmp_359 - tmp_294*tmp_361) + tmp_310*(7.0*tmp_304*tmp_308*tmp_65 - tmp_304*tmp_70 - tmp_306*tmp_360 - tmp_307*tmp_359 - tmp_308*tmp_361) + tmp_324*(7.0*tmp_318*tmp_322*tmp_65 - tmp_318*tmp_70 - tmp_320*tmp_360 - tmp_321*tmp_359 - tmp_322*tmp_361) + tmp_338*(7.0*tmp_332*tmp_336*tmp_65 - tmp_332*tmp_70 - tmp_334*tmp_360 - tmp_335*tmp_359 - tmp_336*tmp_361) + tmp_352*(7.0*tmp_346*tmp_350*tmp_65 - tmp_346*tmp_70 - tmp_348*tmp_360 - tmp_349*tmp_359 - tmp_350*tmp_361) + tmp_72*(-tmp_359*tmp_52 - tmp_360*tmp_45 - tmp_361*tmp_63 + 7.0*tmp_43*tmp_63*tmp_65 - tmp_43*tmp_70) + tmp_86*(-tmp_359*tmp_83 - tmp_360*tmp_82 - tmp_361*tmp_84 + 7.0*tmp_65*tmp_80*tmp_84 - tmp_70*tmp_80);
      elMat( 0, 0) = a_0_0;
      elMat( 1, 0) = a_1_0;
      elMat( 2, 0) = a_2_0;
      elMat( 3, 0) = a_3_0;
   }

public:




private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};




class EGEpsilonFormNitscheBC_EE : public hyteg::dg::DGForm
{

 public:
    EGEpsilonFormNitscheBC_EE()
: callback_Scalar_Variable_Coefficient_3D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g0 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_2D_g1 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g2 ([](const Point3D & p) -> real_t { return 0.; })
, callback_Scalar_Variable_Coefficient_3D_g0 ([](const Point3D & p) -> real_t { return 0.; })
    {}

void Scalar_Variable_Coefficient_2D_g0( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g0( Point3D( {in_0, in_1, 0} ) );
}
void Scalar_Variable_Coefficient_2D_g1( real_t in_0, real_t in_1, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_2D_g1( Point3D( {in_0, in_1, 0} ) );
}

void Scalar_Variable_Coefficient_3D_g0( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g0( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g2( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g2( Point3D( {in_0, in_1, in_2} ) );
}
void Scalar_Variable_Coefficient_3D_g1( real_t in_0, real_t in_1, real_t in_2, real_t * out_0 ) const
{
   *out_0 = callback_Scalar_Variable_Coefficient_3D_g1( Point3D( {in_0, in_1, in_2} ) );
}

 protected:
  void integrateVolume2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                           const DGBasisInfo&                                       trialBasis,
                           const DGBasisInfo&                                       testBasis,
                           int                                                      trialDegree,
                           int                                                      testDegree,
                           Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coords[0]( 0 );
      const auto p_affine_0_1 = coords[0]( 1 );

      const auto p_affine_1_0 = coords[1]( 0 );
      const auto p_affine_1_1 = coords[1]( 1 );

      const auto p_affine_2_0 = coords[2]( 0 );
      const auto p_affine_2_1 = coords[2]( 1 );

      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_4 = -tmp_3;
      real_t tmp_5 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_6 = -tmp_5;
      real_t tmp_7 = 1.0 / (tmp_2 - tmp_4*tmp_6);
      real_t tmp_8 = 1.0*tmp_7;
      real_t tmp_9 = tmp_2*tmp_8;
      real_t tmp_10 = tmp_4*tmp_5;
      real_t tmp_11 = 2.0*tmp_7;
      real_t tmp_12 = tmp_11*tmp_2;
      real_t tmp_13 = tmp_3*tmp_6;
      real_t tmp_14 = tmp_0*tmp_7;
      real_t tmp_15 = tmp_14*tmp_4;
      real_t tmp_16 = tmp_14*tmp_3;
      real_t tmp_17 = tmp_1*tmp_7;
      real_t tmp_18 = tmp_17*tmp_6;
      real_t tmp_19 = tmp_17*tmp_5;
      real_t tmp_20 = ((tmp_10*tmp_11 + tmp_12)*(tmp_10*tmp_8 + tmp_9) + (tmp_11*tmp_13 + tmp_12)*(tmp_13*tmp_8 + tmp_9) + 2*(0.5*tmp_15 + 0.5*tmp_16 + 0.5*tmp_18 + 0.5*tmp_19)*(tmp_15 + tmp_16 + tmp_18 + tmp_19))*std::abs(p_affine_0_0*p_affine_1_1 - p_affine_0_0*p_affine_2_1 - p_affine_0_1*p_affine_1_0 + p_affine_0_1*p_affine_2_0 + p_affine_1_0*p_affine_2_1 - p_affine_1_1*p_affine_2_0);
      real_t a_0_0 = 0.5*tmp_20;
      elMat( 0, 0) = a_0_0;
   }

   virtual void integrateFacetInner2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                       const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                       const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                       const DGBasisInfo&                                       trialBasis,
                                       const DGBasisInfo&                                       testBasis,
                                       int                                                      trialDegree,
                                       int                                                      testDegree,
                                       Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_5 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -tmp_5;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = -tmp_9;
      real_t tmp_11 = 1.0 / (-tmp_10*tmp_8 + tmp_7);
      real_t tmp_12 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_13 = tmp_11*(0.046910077030668018*tmp_1 + tmp_12);
      real_t tmp_14 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_15 = tmp_11*(0.046910077030668018*tmp_0 + tmp_14);
      real_t tmp_16 = tmp_13*tmp_5 + tmp_15*tmp_6 - 1.0/3.0;
      real_t tmp_17 = tmp_13*tmp_4 + tmp_15*tmp_9 - 1.0/3.0;
      real_t tmp_18 = tmp_16*tmp_4 + tmp_17*tmp_8;
      real_t tmp_19 = tmp_10*tmp_16 + tmp_17*tmp_6;
      real_t tmp_20 = 1.0*tmp_11;
      real_t tmp_21 = tmp_20*tmp_7;
      real_t tmp_22 = 0.5*tmp_11;
      real_t tmp_23 = tmp_22*tmp_4;
      real_t tmp_24 = tmp_22*tmp_6;
      real_t tmp_25 = tmp_10*tmp_24 + tmp_23*tmp_5 + tmp_23*tmp_8 + tmp_24*tmp_9;
      real_t tmp_26 = 2.0*p_affine_10_0*(tmp_20*tmp_8*tmp_9 + tmp_21) + 2.0*p_affine_10_1*tmp_25;
      real_t tmp_27 = 2.0*p_affine_10_0*tmp_25 + 2.0*p_affine_10_1*(tmp_10*tmp_20*tmp_5 + tmp_21);
      real_t tmp_28 = tmp_11*(0.23076534494715845*tmp_1 + tmp_12);
      real_t tmp_29 = tmp_11*(0.23076534494715845*tmp_0 + tmp_14);
      real_t tmp_30 = tmp_28*tmp_5 + tmp_29*tmp_6 - 1.0/3.0;
      real_t tmp_31 = tmp_28*tmp_4 + tmp_29*tmp_9 - 1.0/3.0;
      real_t tmp_32 = tmp_30*tmp_4 + tmp_31*tmp_8;
      real_t tmp_33 = tmp_10*tmp_30 + tmp_31*tmp_6;
      real_t tmp_34 = tmp_11*(0.5*tmp_1 + tmp_12);
      real_t tmp_35 = tmp_11*(0.5*tmp_0 + tmp_14);
      real_t tmp_36 = tmp_34*tmp_5 + tmp_35*tmp_6 - 1.0/3.0;
      real_t tmp_37 = tmp_34*tmp_4 + tmp_35*tmp_9 - 1.0/3.0;
      real_t tmp_38 = tmp_36*tmp_4 + tmp_37*tmp_8;
      real_t tmp_39 = tmp_10*tmp_36 + tmp_37*tmp_6;
      real_t tmp_40 = tmp_11*(0.7692346550528415*tmp_1 + tmp_12);
      real_t tmp_41 = tmp_11*(0.7692346550528415*tmp_0 + tmp_14);
      real_t tmp_42 = tmp_40*tmp_5 + tmp_41*tmp_6 - 1.0/3.0;
      real_t tmp_43 = tmp_4*tmp_40 + tmp_41*tmp_9 - 1.0/3.0;
      real_t tmp_44 = tmp_4*tmp_42 + tmp_43*tmp_8;
      real_t tmp_45 = tmp_10*tmp_42 + tmp_43*tmp_6;
      real_t tmp_46 = tmp_11*(0.95308992296933193*tmp_1 + tmp_12);
      real_t tmp_47 = tmp_11*(0.95308992296933193*tmp_0 + tmp_14);
      real_t tmp_48 = tmp_46*tmp_5 + tmp_47*tmp_6 - 1.0/3.0;
      real_t tmp_49 = tmp_4*tmp_46 + tmp_47*tmp_9 - 1.0/3.0;
      real_t tmp_50 = tmp_4*tmp_48 + tmp_49*tmp_8;
      real_t tmp_51 = tmp_10*tmp_48 + tmp_49*tmp_6;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(-tmp_18*tmp_26 - tmp_19*tmp_27 + 14*tmp_3*((tmp_18*tmp_18) + (tmp_19*tmp_19))) + 0.2393143352496831*tmp_2*(-tmp_26*tmp_32 - tmp_27*tmp_33 + 14*tmp_3*((tmp_32*tmp_32) + (tmp_33*tmp_33))) + 0.2844444444444445*tmp_2*(-tmp_26*tmp_38 - tmp_27*tmp_39 + 14*tmp_3*((tmp_38*tmp_38) + (tmp_39*tmp_39))) + 0.2393143352496831*tmp_2*(-tmp_26*tmp_44 - tmp_27*tmp_45 + 14*tmp_3*((tmp_44*tmp_44) + (tmp_45*tmp_45))) + 0.11846344252809471*tmp_2*(-tmp_26*tmp_50 - tmp_27*tmp_51 + 14*tmp_3*((tmp_50*tmp_50) + (tmp_51*tmp_51)));
      elMat( 0, 0) = a_0_0;
   }

   virtual void integrateFacetCoupling2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementInner,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElementOuter,
                                          const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexInnerElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertexOuterElement,
                                          const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                          const DGBasisInfo&                                       trialBasis,
                                          const DGBasisInfo&                                       testBasis,
                                          int                                                      trialDegree,
                                          int                                                      testDegree,
                                          Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElementInner[0]( 0 );
      const auto p_affine_0_1 = coordsElementInner[0]( 1 );

      const auto p_affine_1_0 = coordsElementInner[1]( 0 );
      const auto p_affine_1_1 = coordsElementInner[1]( 1 );

      const auto p_affine_2_0 = coordsElementInner[2]( 0 );
      const auto p_affine_2_1 = coordsElementInner[2]( 1 );

      const auto p_affine_3_0 = coordsElementOuter[0]( 0 );
      const auto p_affine_3_1 = coordsElementOuter[0]( 1 );

      const auto p_affine_4_0 = coordsElementOuter[1]( 0 );
      const auto p_affine_4_1 = coordsElementOuter[1]( 1 );

      const auto p_affine_5_0 = coordsElementOuter[2]( 0 );
      const auto p_affine_5_1 = coordsElementOuter[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertexInnerElement( 0 );
      const auto p_affine_8_1 = oppositeVertexInnerElement( 1 );

      const auto p_affine_9_0 = oppositeVertexOuterElement( 0 );
      const auto p_affine_9_1 = oppositeVertexOuterElement( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_4 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_3*tmp_5;
      real_t tmp_7 = -tmp_4;
      real_t tmp_8 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_9 = -tmp_8;
      real_t tmp_10 = 1.0 / (tmp_6 - tmp_7*tmp_9);
      real_t tmp_11 = -p_affine_0_1;
      real_t tmp_12 = p_affine_6_1 + 0.046910077030668018*tmp_1;
      real_t tmp_13 = tmp_10*(tmp_11 + tmp_12);
      real_t tmp_14 = -p_affine_0_0;
      real_t tmp_15 = p_affine_6_0 + 0.046910077030668018*tmp_0;
      real_t tmp_16 = tmp_10*(tmp_14 + tmp_15);
      real_t tmp_17 = tmp_13*tmp_4 + tmp_16*tmp_5 - 1.0/3.0;
      real_t tmp_18 = tmp_13*tmp_3 + tmp_16*tmp_8 - 1.0/3.0;
      real_t tmp_19 = tmp_17*tmp_3 + tmp_18*tmp_7;
      real_t tmp_20 = -p_affine_3_0 + p_affine_4_0;
      real_t tmp_21 = -p_affine_3_1 + p_affine_5_1;
      real_t tmp_22 = tmp_20*tmp_21;
      real_t tmp_23 = p_affine_3_0 - p_affine_5_0;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_3_1 - p_affine_4_1;
      real_t tmp_26 = -tmp_25;
      real_t tmp_27 = 1.0 / (tmp_22 - tmp_24*tmp_26);
      real_t tmp_28 = 1.0*tmp_27;
      real_t tmp_29 = tmp_22*tmp_28;
      real_t tmp_30 = 0.5*tmp_27;
      real_t tmp_31 = tmp_20*tmp_30;
      real_t tmp_32 = tmp_21*tmp_30;
      real_t tmp_33 = tmp_23*tmp_31 + tmp_24*tmp_31 + tmp_25*tmp_32 + tmp_26*tmp_32;
      real_t tmp_34 = 1.0*p_affine_10_0*(tmp_24*tmp_25*tmp_28 + tmp_29) + 1.0*p_affine_10_1*tmp_33;
      real_t tmp_35 = tmp_17*tmp_9 + tmp_18*tmp_5;
      real_t tmp_36 = 1.0*p_affine_10_0*tmp_33 + 1.0*p_affine_10_1*(tmp_23*tmp_26*tmp_28 + tmp_29);
      real_t tmp_37 = -p_affine_3_1;
      real_t tmp_38 = tmp_27*(tmp_12 + tmp_37);
      real_t tmp_39 = -p_affine_3_0;
      real_t tmp_40 = tmp_27*(tmp_15 + tmp_39);
      real_t tmp_41 = tmp_21*tmp_40 + tmp_23*tmp_38 - 1.0/3.0;
      real_t tmp_42 = tmp_20*tmp_38 + tmp_25*tmp_40 - 1.0/3.0;
      real_t tmp_43 = tmp_20*tmp_41 + tmp_24*tmp_42;
      real_t tmp_44 = 1.0*tmp_10;
      real_t tmp_45 = tmp_44*tmp_6;
      real_t tmp_46 = 0.5*tmp_10;
      real_t tmp_47 = tmp_3*tmp_46;
      real_t tmp_48 = tmp_46*tmp_5;
      real_t tmp_49 = tmp_4*tmp_47 + tmp_47*tmp_7 + tmp_48*tmp_8 + tmp_48*tmp_9;
      real_t tmp_50 = p_affine_10_0*(tmp_44*tmp_7*tmp_8 + tmp_45) + p_affine_10_1*tmp_49;
      real_t tmp_51 = tmp_21*tmp_42 + tmp_26*tmp_41;
      real_t tmp_52 = p_affine_10_0*tmp_49 + p_affine_10_1*(tmp_4*tmp_44*tmp_9 + tmp_45);
      real_t tmp_53 = 14/tmp_2;
      real_t tmp_54 = p_affine_6_1 + 0.23076534494715845*tmp_1;
      real_t tmp_55 = tmp_10*(tmp_11 + tmp_54);
      real_t tmp_56 = p_affine_6_0 + 0.23076534494715845*tmp_0;
      real_t tmp_57 = tmp_10*(tmp_14 + tmp_56);
      real_t tmp_58 = tmp_4*tmp_55 + tmp_5*tmp_57 - 1.0/3.0;
      real_t tmp_59 = tmp_3*tmp_55 + tmp_57*tmp_8 - 1.0/3.0;
      real_t tmp_60 = tmp_3*tmp_58 + tmp_59*tmp_7;
      real_t tmp_61 = tmp_5*tmp_59 + tmp_58*tmp_9;
      real_t tmp_62 = tmp_27*(tmp_37 + tmp_54);
      real_t tmp_63 = tmp_27*(tmp_39 + tmp_56);
      real_t tmp_64 = tmp_21*tmp_63 + tmp_23*tmp_62 - 1.0/3.0;
      real_t tmp_65 = tmp_20*tmp_62 + tmp_25*tmp_63 - 1.0/3.0;
      real_t tmp_66 = tmp_20*tmp_64 + tmp_24*tmp_65;
      real_t tmp_67 = tmp_21*tmp_65 + tmp_26*tmp_64;
      real_t tmp_68 = p_affine_6_1 + 0.5*tmp_1;
      real_t tmp_69 = tmp_10*(tmp_11 + tmp_68);
      real_t tmp_70 = p_affine_6_0 + 0.5*tmp_0;
      real_t tmp_71 = tmp_10*(tmp_14 + tmp_70);
      real_t tmp_72 = tmp_4*tmp_69 + tmp_5*tmp_71 - 1.0/3.0;
      real_t tmp_73 = tmp_3*tmp_69 + tmp_71*tmp_8 - 1.0/3.0;
      real_t tmp_74 = tmp_3*tmp_72 + tmp_7*tmp_73;
      real_t tmp_75 = tmp_5*tmp_73 + tmp_72*tmp_9;
      real_t tmp_76 = tmp_27*(tmp_37 + tmp_68);
      real_t tmp_77 = tmp_27*(tmp_39 + tmp_70);
      real_t tmp_78 = tmp_21*tmp_77 + tmp_23*tmp_76 - 1.0/3.0;
      real_t tmp_79 = tmp_20*tmp_76 + tmp_25*tmp_77 - 1.0/3.0;
      real_t tmp_80 = tmp_20*tmp_78 + tmp_24*tmp_79;
      real_t tmp_81 = tmp_21*tmp_79 + tmp_26*tmp_78;
      real_t tmp_82 = p_affine_6_1 + 0.7692346550528415*tmp_1;
      real_t tmp_83 = tmp_10*(tmp_11 + tmp_82);
      real_t tmp_84 = p_affine_6_0 + 0.7692346550528415*tmp_0;
      real_t tmp_85 = tmp_10*(tmp_14 + tmp_84);
      real_t tmp_86 = tmp_4*tmp_83 + tmp_5*tmp_85 - 1.0/3.0;
      real_t tmp_87 = tmp_3*tmp_83 + tmp_8*tmp_85 - 1.0/3.0;
      real_t tmp_88 = tmp_3*tmp_86 + tmp_7*tmp_87;
      real_t tmp_89 = tmp_5*tmp_87 + tmp_86*tmp_9;
      real_t tmp_90 = tmp_27*(tmp_37 + tmp_82);
      real_t tmp_91 = tmp_27*(tmp_39 + tmp_84);
      real_t tmp_92 = tmp_21*tmp_91 + tmp_23*tmp_90 - 1.0/3.0;
      real_t tmp_93 = tmp_20*tmp_90 + tmp_25*tmp_91 - 1.0/3.0;
      real_t tmp_94 = tmp_20*tmp_92 + tmp_24*tmp_93;
      real_t tmp_95 = tmp_21*tmp_93 + tmp_26*tmp_92;
      real_t tmp_96 = p_affine_6_1 + 0.95308992296933193*tmp_1;
      real_t tmp_97 = tmp_10*(tmp_11 + tmp_96);
      real_t tmp_98 = p_affine_6_0 + 0.95308992296933193*tmp_0;
      real_t tmp_99 = tmp_10*(tmp_14 + tmp_98);
      real_t tmp_100 = tmp_4*tmp_97 + tmp_5*tmp_99 - 1.0/3.0;
      real_t tmp_101 = tmp_3*tmp_97 + tmp_8*tmp_99 - 1.0/3.0;
      real_t tmp_102 = tmp_100*tmp_3 + tmp_101*tmp_7;
      real_t tmp_103 = tmp_100*tmp_9 + tmp_101*tmp_5;
      real_t tmp_104 = tmp_27*(tmp_37 + tmp_96);
      real_t tmp_105 = tmp_27*(tmp_39 + tmp_98);
      real_t tmp_106 = tmp_104*tmp_23 + tmp_105*tmp_21 - 1.0/3.0;
      real_t tmp_107 = tmp_104*tmp_20 + tmp_105*tmp_25 - 1.0/3.0;
      real_t tmp_108 = tmp_106*tmp_20 + tmp_107*tmp_24;
      real_t tmp_109 = tmp_106*tmp_26 + tmp_107*tmp_21;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(-tmp_102*tmp_34 - tmp_103*tmp_36 + tmp_108*tmp_50 + tmp_109*tmp_52 - tmp_53*(tmp_102*tmp_108 + tmp_103*tmp_109)) + 0.11846344252809471*tmp_2*(-tmp_19*tmp_34 - tmp_35*tmp_36 + tmp_43*tmp_50 + tmp_51*tmp_52 - tmp_53*(tmp_19*tmp_43 + tmp_35*tmp_51)) + 0.2393143352496831*tmp_2*(-tmp_34*tmp_60 - tmp_36*tmp_61 + tmp_50*tmp_66 + tmp_52*tmp_67 - tmp_53*(tmp_60*tmp_66 + tmp_61*tmp_67)) + 0.2844444444444445*tmp_2*(-tmp_34*tmp_74 - tmp_36*tmp_75 + tmp_50*tmp_80 + tmp_52*tmp_81 - tmp_53*(tmp_74*tmp_80 + tmp_75*tmp_81)) + 0.2393143352496831*tmp_2*(-tmp_34*tmp_88 - tmp_36*tmp_89 + tmp_50*tmp_94 + tmp_52*tmp_95 - tmp_53*(tmp_88*tmp_94 + tmp_89*tmp_95));
      elMat( 0, 0) = a_0_0;
   };

   virtual void integrateFacetDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                   const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                   const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                   const DGBasisInfo&                                       trialBasis,
                                                   const DGBasisInfo&                                       testBasis,
                                                   int                                                      trialDegree,
                                                   int                                                      testDegree,
                                                   Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
   {
      elMat.resize( testBasis.numDoFsPerElement( 2, testDegree ),
                   trialBasis.numDoFsPerElement( 2, trialDegree ) );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_8_0 = oppositeVertex( 0 );
      const auto p_affine_8_1 = oppositeVertex( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_5 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -tmp_5;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = -tmp_9;
      real_t tmp_11 = 1.0 / (-tmp_10*tmp_8 + tmp_7);
      real_t tmp_12 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_13 = tmp_11*(0.046910077030668018*tmp_1 + tmp_12);
      real_t tmp_14 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_15 = tmp_11*(0.046910077030668018*tmp_0 + tmp_14);
      real_t tmp_16 = tmp_13*tmp_5 + tmp_15*tmp_6 - 1.0/3.0;
      real_t tmp_17 = tmp_13*tmp_4 + tmp_15*tmp_9 - 1.0/3.0;
      real_t tmp_18 = tmp_16*tmp_4 + tmp_17*tmp_8;
      real_t tmp_19 = tmp_10*tmp_16 + tmp_17*tmp_6;
      real_t tmp_20 = 1.0*tmp_11;
      real_t tmp_21 = tmp_20*tmp_7;
      real_t tmp_22 = 0.5*tmp_11;
      real_t tmp_23 = tmp_22*tmp_4;
      real_t tmp_24 = tmp_22*tmp_6;
      real_t tmp_25 = tmp_10*tmp_24 + tmp_23*tmp_5 + tmp_23*tmp_8 + tmp_24*tmp_9;
      real_t tmp_26 = 2*p_affine_10_0*(tmp_20*tmp_8*tmp_9 + tmp_21) + 2*p_affine_10_1*tmp_25;
      real_t tmp_27 = 2*p_affine_10_0*tmp_25 + 2*p_affine_10_1*(tmp_10*tmp_20*tmp_5 + tmp_21);
      real_t tmp_28 = 2*tmp_2;
      real_t tmp_29 = tmp_11*(0.23076534494715845*tmp_1 + tmp_12);
      real_t tmp_30 = tmp_11*(0.23076534494715845*tmp_0 + tmp_14);
      real_t tmp_31 = tmp_29*tmp_5 + tmp_30*tmp_6 - 1.0/3.0;
      real_t tmp_32 = tmp_29*tmp_4 + tmp_30*tmp_9 - 1.0/3.0;
      real_t tmp_33 = tmp_31*tmp_4 + tmp_32*tmp_8;
      real_t tmp_34 = tmp_10*tmp_31 + tmp_32*tmp_6;
      real_t tmp_35 = tmp_11*(0.5*tmp_1 + tmp_12);
      real_t tmp_36 = tmp_11*(0.5*tmp_0 + tmp_14);
      real_t tmp_37 = tmp_35*tmp_5 + tmp_36*tmp_6 - 1.0/3.0;
      real_t tmp_38 = tmp_35*tmp_4 + tmp_36*tmp_9 - 1.0/3.0;
      real_t tmp_39 = tmp_37*tmp_4 + tmp_38*tmp_8;
      real_t tmp_40 = tmp_10*tmp_37 + tmp_38*tmp_6;
      real_t tmp_41 = tmp_11*(0.7692346550528415*tmp_1 + tmp_12);
      real_t tmp_42 = tmp_11*(0.7692346550528415*tmp_0 + tmp_14);
      real_t tmp_43 = tmp_41*tmp_5 + tmp_42*tmp_6 - 1.0/3.0;
      real_t tmp_44 = tmp_4*tmp_41 + tmp_42*tmp_9 - 1.0/3.0;
      real_t tmp_45 = tmp_4*tmp_43 + tmp_44*tmp_8;
      real_t tmp_46 = tmp_10*tmp_43 + tmp_44*tmp_6;
      real_t tmp_47 = tmp_11*(0.95308992296933193*tmp_1 + tmp_12);
      real_t tmp_48 = tmp_11*(0.95308992296933193*tmp_0 + tmp_14);
      real_t tmp_49 = tmp_47*tmp_5 + tmp_48*tmp_6 - 1.0/3.0;
      real_t tmp_50 = tmp_4*tmp_47 + tmp_48*tmp_9 - 1.0/3.0;
      real_t tmp_51 = tmp_4*tmp_49 + tmp_50*tmp_8;
      real_t tmp_52 = tmp_10*tmp_49 + tmp_50*tmp_6;
      real_t a_0_0 = 0.11846344252809471*tmp_28*(-tmp_18*tmp_26 - tmp_19*tmp_27 + 7*tmp_3*((tmp_18*tmp_18) + (tmp_19*tmp_19))) + 0.2393143352496831*tmp_28*(-tmp_26*tmp_33 - tmp_27*tmp_34 + 7*tmp_3*((tmp_33*tmp_33) + (tmp_34*tmp_34))) + 0.2844444444444445*tmp_28*(-tmp_26*tmp_39 - tmp_27*tmp_40 + 7*tmp_3*((tmp_39*tmp_39) + (tmp_40*tmp_40))) + 0.2393143352496831*tmp_28*(-tmp_26*tmp_45 - tmp_27*tmp_46 + 7*tmp_3*((tmp_45*tmp_45) + (tmp_46*tmp_46))) + 0.11846344252809471*tmp_28*(-tmp_26*tmp_51 - tmp_27*tmp_52 + 7*tmp_3*((tmp_51*tmp_51) + (tmp_52*tmp_52)));
      elMat( 0, 0) = a_0_0;
   }

  void integrateRHSDirichletBoundary2D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

      const auto p_affine_0_0 = coordsElement[0]( 0 );
      const auto p_affine_0_1 = coordsElement[0]( 1 );

      const auto p_affine_1_0 = coordsElement[1]( 0 );
      const auto p_affine_1_1 = coordsElement[1]( 1 );

      const auto p_affine_2_0 = coordsElement[2]( 0 );
      const auto p_affine_2_1 = coordsElement[2]( 1 );

      const auto p_affine_6_0 = coordsFacet[0]( 0 );
      const auto p_affine_6_1 = coordsFacet[0]( 1 );

      const auto p_affine_7_0 = coordsFacet[1]( 0 );
      const auto p_affine_7_1 = coordsFacet[1]( 1 );

      const auto p_affine_10_0 = outwardNormal( 0 );
      const auto p_affine_10_1 = outwardNormal( 1 );

      real_t Scalar_Variable_Coefficient_2D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_2D_g0_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_2D_g1_out0_id9 = 0;
      Scalar_Variable_Coefficient_2D_g0( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id0 );
      Scalar_Variable_Coefficient_2D_g1( 0.95308992296933193*p_affine_6_0 + 0.046910077030668018*p_affine_7_0, 0.95308992296933193*p_affine_6_1 + 0.046910077030668018*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id1 );
      Scalar_Variable_Coefficient_2D_g0( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id2 );
      Scalar_Variable_Coefficient_2D_g1( 0.7692346550528415*p_affine_6_0 + 0.23076534494715845*p_affine_7_0, 0.7692346550528415*p_affine_6_1 + 0.23076534494715845*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id3 );
      Scalar_Variable_Coefficient_2D_g0( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id4 );
      Scalar_Variable_Coefficient_2D_g1( 0.5*p_affine_6_0 + 0.5*p_affine_7_0, 0.5*p_affine_6_1 + 0.5*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id5 );
      Scalar_Variable_Coefficient_2D_g0( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id6 );
      Scalar_Variable_Coefficient_2D_g1( 0.2307653449471585*p_affine_6_0 + 0.7692346550528415*p_affine_7_0, 0.2307653449471585*p_affine_6_1 + 0.7692346550528415*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id7 );
      Scalar_Variable_Coefficient_2D_g0( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g0_out0_id8 );
      Scalar_Variable_Coefficient_2D_g1( 0.046910077030668074*p_affine_6_0 + 0.95308992296933193*p_affine_7_0, 0.046910077030668074*p_affine_6_1 + 0.95308992296933193*p_affine_7_1, &Scalar_Variable_Coefficient_2D_g1_out0_id9 );
      real_t tmp_0 = -p_affine_6_0 + p_affine_7_0;
      real_t tmp_1 = -p_affine_6_1 + p_affine_7_1;
      real_t tmp_2 = std::abs(std::pow((tmp_0*tmp_0) + (tmp_1*tmp_1), 1.0/2.0));
      real_t tmp_3 = 1.0 / (tmp_2);
      real_t tmp_4 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_5 = p_affine_0_0 - p_affine_2_0;
      real_t tmp_6 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -tmp_5;
      real_t tmp_9 = p_affine_0_1 - p_affine_1_1;
      real_t tmp_10 = -tmp_9;
      real_t tmp_11 = 1.0 / (-tmp_10*tmp_8 + tmp_7);
      real_t tmp_12 = -p_affine_0_1 + p_affine_6_1;
      real_t tmp_13 = tmp_11*(0.046910077030668018*tmp_1 + tmp_12);
      real_t tmp_14 = -p_affine_0_0 + p_affine_6_0;
      real_t tmp_15 = tmp_11*(0.046910077030668018*tmp_0 + tmp_14);
      real_t tmp_16 = tmp_13*tmp_5 + tmp_15*tmp_6 - 1.0/3.0;
      real_t tmp_17 = tmp_13*tmp_4 + tmp_15*tmp_9 - 1.0/3.0;
      real_t tmp_18 = 1.0*tmp_11;
      real_t tmp_19 = tmp_18*tmp_7;
      real_t tmp_20 = 0.5*tmp_11;
      real_t tmp_21 = tmp_20*tmp_4;
      real_t tmp_22 = tmp_20*tmp_6;
      real_t tmp_23 = tmp_10*tmp_22 + tmp_21*tmp_5 + tmp_21*tmp_8 + tmp_22*tmp_9;
      real_t tmp_24 = p_affine_10_0*(tmp_18*tmp_8*tmp_9 + tmp_19) + p_affine_10_1*tmp_23;
      real_t tmp_25 = p_affine_10_0*tmp_23 + p_affine_10_1*(tmp_10*tmp_18*tmp_5 + tmp_19);
      real_t tmp_26 = tmp_11*(0.23076534494715845*tmp_1 + tmp_12);
      real_t tmp_27 = tmp_11*(0.23076534494715845*tmp_0 + tmp_14);
      real_t tmp_28 = tmp_26*tmp_5 + tmp_27*tmp_6 - 1.0/3.0;
      real_t tmp_29 = tmp_26*tmp_4 + tmp_27*tmp_9 - 1.0/3.0;
      real_t tmp_30 = tmp_11*(0.5*tmp_1 + tmp_12);
      real_t tmp_31 = tmp_11*(0.5*tmp_0 + tmp_14);
      real_t tmp_32 = tmp_30*tmp_5 + tmp_31*tmp_6 - 1.0/3.0;
      real_t tmp_33 = tmp_30*tmp_4 + tmp_31*tmp_9 - 1.0/3.0;
      real_t tmp_34 = tmp_11*(0.7692346550528415*tmp_1 + tmp_12);
      real_t tmp_35 = tmp_11*(0.7692346550528415*tmp_0 + tmp_14);
      real_t tmp_36 = tmp_34*tmp_5 + tmp_35*tmp_6 - 1.0/3.0;
      real_t tmp_37 = tmp_34*tmp_4 + tmp_35*tmp_9 - 1.0/3.0;
      real_t tmp_38 = tmp_11*(0.95308992296933193*tmp_1 + tmp_12);
      real_t tmp_39 = tmp_11*(0.95308992296933193*tmp_0 + tmp_14);
      real_t tmp_40 = tmp_38*tmp_5 + tmp_39*tmp_6 - 1.0/3.0;
      real_t tmp_41 = tmp_38*tmp_4 + tmp_39*tmp_9 - 1.0/3.0;
      real_t a_0_0 = 0.11846344252809471*tmp_2*(2*Scalar_Variable_Coefficient_2D_g0_out0_id0*(-tmp_24 + 7*tmp_3*(tmp_16*tmp_4 + tmp_17*tmp_8)) + 2*Scalar_Variable_Coefficient_2D_g1_out0_id1*(-tmp_25 + 7*tmp_3*(tmp_10*tmp_16 + tmp_17*tmp_6))) + 0.2393143352496831*tmp_2*(2*Scalar_Variable_Coefficient_2D_g0_out0_id2*(-tmp_24 + 7*tmp_3*(tmp_28*tmp_4 + tmp_29*tmp_8)) + 2*Scalar_Variable_Coefficient_2D_g1_out0_id3*(-tmp_25 + 7*tmp_3*(tmp_10*tmp_28 + tmp_29*tmp_6))) + 0.2844444444444445*tmp_2*(2*Scalar_Variable_Coefficient_2D_g0_out0_id4*(-tmp_24 + 7*tmp_3*(tmp_32*tmp_4 + tmp_33*tmp_8)) + 2*Scalar_Variable_Coefficient_2D_g1_out0_id5*(-tmp_25 + 7*tmp_3*(tmp_10*tmp_32 + tmp_33*tmp_6))) + 0.2393143352496831*tmp_2*(2*Scalar_Variable_Coefficient_2D_g0_out0_id6*(-tmp_24 + 7*tmp_3*(tmp_36*tmp_4 + tmp_37*tmp_8)) + 2*Scalar_Variable_Coefficient_2D_g1_out0_id7*(-tmp_25 + 7*tmp_3*(tmp_10*tmp_36 + tmp_37*tmp_6))) + 0.11846344252809471*tmp_2*(2*Scalar_Variable_Coefficient_2D_g0_out0_id8*(-tmp_24 + 7*tmp_3*(tmp_4*tmp_40 + tmp_41*tmp_8)) + 2*Scalar_Variable_Coefficient_2D_g1_out0_id9*(-tmp_25 + 7*tmp_3*(tmp_10*tmp_40 + tmp_41*tmp_6)));
      elMat( 0, 0) = a_0_0;
   }
   void integrateRHSDirichletBoundary3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsElement,
                                                 const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coordsFacet,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     oppositeVertex,
                                                 const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                 const DGBasisInfo&                                       basis,
                                                 int                                                      degree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const override
   {
     elMat.resize( Eigen::Index( basis.numDoFsPerElement( 3, walberla::uint_c( degree ) ) ), 1 );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

      real_t Scalar_Variable_Coefficient_3D_g0_out0_id0 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id1 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id2 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id3 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id4 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id5 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id6 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id7 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id8 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id9 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id10 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id11 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id12 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id13 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id14 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id15 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id16 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id17 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id18 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id19 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id20 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id21 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id22 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id23 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id24 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id25 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id26 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id27 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id28 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id29 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id30 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id31 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id32 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id33 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id34 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id35 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id36 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id37 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id38 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id39 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id40 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id41 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id42 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id43 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id44 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id45 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id46 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id47 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id48 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id49 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id50 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id51 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id52 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id53 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id54 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id55 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id56 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id57 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id58 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id59 = 0;
      real_t Scalar_Variable_Coefficient_3D_g0_out0_id60 = 0;
      real_t Scalar_Variable_Coefficient_3D_g2_out0_id61 = 0;
      real_t Scalar_Variable_Coefficient_3D_g1_out0_id62 = 0;
      Scalar_Variable_Coefficient_3D_g0( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id0 );
      Scalar_Variable_Coefficient_3D_g2( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id1 );
      Scalar_Variable_Coefficient_3D_g1( 0.93718850182767688*p_affine_10_0 + 0.031405749086161561*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.93718850182767688*p_affine_10_1 + 0.031405749086161561*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.93718850182767688*p_affine_10_2 + 0.031405749086161561*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id2 );
      Scalar_Variable_Coefficient_3D_g0( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id3 );
      Scalar_Variable_Coefficient_3D_g2( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id4 );
      Scalar_Variable_Coefficient_3D_g1( 0.60796128279561268*p_affine_10_0 + 0.19601935860219366*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.60796128279561268*p_affine_10_1 + 0.19601935860219366*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.60796128279561268*p_affine_10_2 + 0.19601935860219366*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id5 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id6 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id7 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id8 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id9 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id10 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id11 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id12 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id13 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.039308471900058539*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.039308471900058539*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.039308471900058539*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id14 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id15 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id16 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id17 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id18 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id19 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.37605877282253797*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.37605877282253797*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.37605877282253797*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id20 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id21 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id22 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.1711304259088916*p_affine_8_0 + 0.78764240869137092*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.1711304259088916*p_affine_8_1 + 0.78764240869137092*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.1711304259088916*p_affine_8_2 + 0.78764240869137092*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id23 );
      Scalar_Variable_Coefficient_3D_g0( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id24 );
      Scalar_Variable_Coefficient_3D_g2( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id25 );
      Scalar_Variable_Coefficient_3D_g1( 0.039308471900058539*p_affine_10_0 + 0.37605877282253791*p_affine_8_0 + 0.58463275527740355*p_affine_9_0, 0.039308471900058539*p_affine_10_1 + 0.37605877282253791*p_affine_8_1 + 0.58463275527740355*p_affine_9_1, 0.039308471900058539*p_affine_10_2 + 0.37605877282253791*p_affine_8_2 + 0.58463275527740355*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id26 );
      Scalar_Variable_Coefficient_3D_g0( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id27 );
      Scalar_Variable_Coefficient_3D_g2( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id28 );
      Scalar_Variable_Coefficient_3D_g1( 0.78764240869137092*p_affine_10_0 + 0.041227165399737475*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.78764240869137092*p_affine_10_1 + 0.041227165399737475*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.78764240869137092*p_affine_10_2 + 0.041227165399737475*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id29 );
      Scalar_Variable_Coefficient_3D_g0( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id30 );
      Scalar_Variable_Coefficient_3D_g2( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id31 );
      Scalar_Variable_Coefficient_3D_g1( 0.58463275527740355*p_affine_10_0 + 0.039308471900058484*p_affine_8_0 + 0.37605877282253791*p_affine_9_0, 0.58463275527740355*p_affine_10_1 + 0.039308471900058484*p_affine_8_1 + 0.37605877282253791*p_affine_9_1, 0.58463275527740355*p_affine_10_2 + 0.039308471900058484*p_affine_8_2 + 0.37605877282253791*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id32 );
      Scalar_Variable_Coefficient_3D_g0( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id33 );
      Scalar_Variable_Coefficient_3D_g2( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id34 );
      Scalar_Variable_Coefficient_3D_g1( 0.1711304259088916*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.041227165399737475*p_affine_9_0, 0.1711304259088916*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.041227165399737475*p_affine_9_1, 0.1711304259088916*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.041227165399737475*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id35 );
      Scalar_Variable_Coefficient_3D_g0( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id36 );
      Scalar_Variable_Coefficient_3D_g2( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id37 );
      Scalar_Variable_Coefficient_3D_g1( 0.19107600050469298*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.19107600050469298*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.19107600050469298*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id38 );
      Scalar_Variable_Coefficient_3D_g0( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id39 );
      Scalar_Variable_Coefficient_3D_g2( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id40 );
      Scalar_Variable_Coefficient_3D_g1( 0.37605877282253791*p_affine_10_0 + 0.58463275527740355*p_affine_8_0 + 0.039308471900058539*p_affine_9_0, 0.37605877282253791*p_affine_10_1 + 0.58463275527740355*p_affine_8_1 + 0.039308471900058539*p_affine_9_1, 0.37605877282253791*p_affine_10_2 + 0.58463275527740355*p_affine_8_2 + 0.039308471900058539*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id41 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id42 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id43 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.03140574908616154*p_affine_8_0 + 0.93718850182767688*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.03140574908616154*p_affine_8_1 + 0.93718850182767688*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.03140574908616154*p_affine_8_2 + 0.93718850182767688*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id44 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id45 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id46 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.19601935860219363*p_affine_8_0 + 0.60796128279561268*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.19601935860219363*p_affine_8_1 + 0.60796128279561268*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.19601935860219363*p_affine_8_2 + 0.60796128279561268*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id47 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id48 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id49 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.40446199974765351*p_affine_8_0 + 0.19107600050469298*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.40446199974765351*p_affine_8_1 + 0.19107600050469298*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.40446199974765351*p_affine_8_2 + 0.19107600050469298*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id50 );
      Scalar_Variable_Coefficient_3D_g0( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id51 );
      Scalar_Variable_Coefficient_3D_g2( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id52 );
      Scalar_Variable_Coefficient_3D_g1( 0.031405749086161582*p_affine_10_0 + 0.93718850182767688*p_affine_8_0 + 0.031405749086161582*p_affine_9_0, 0.031405749086161582*p_affine_10_1 + 0.93718850182767688*p_affine_8_1 + 0.031405749086161582*p_affine_9_1, 0.031405749086161582*p_affine_10_2 + 0.93718850182767688*p_affine_8_2 + 0.031405749086161582*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id53 );
      Scalar_Variable_Coefficient_3D_g0( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id54 );
      Scalar_Variable_Coefficient_3D_g2( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id55 );
      Scalar_Variable_Coefficient_3D_g1( 0.19601935860219369*p_affine_10_0 + 0.60796128279561268*p_affine_8_0 + 0.19601935860219369*p_affine_9_0, 0.19601935860219369*p_affine_10_1 + 0.60796128279561268*p_affine_8_1 + 0.19601935860219369*p_affine_9_1, 0.19601935860219369*p_affine_10_2 + 0.60796128279561268*p_affine_8_2 + 0.19601935860219369*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id56 );
      Scalar_Variable_Coefficient_3D_g0( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id57 );
      Scalar_Variable_Coefficient_3D_g2( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id58 );
      Scalar_Variable_Coefficient_3D_g1( 0.40446199974765351*p_affine_10_0 + 0.19107600050469298*p_affine_8_0 + 0.40446199974765351*p_affine_9_0, 0.40446199974765351*p_affine_10_1 + 0.19107600050469298*p_affine_8_1 + 0.40446199974765351*p_affine_9_1, 0.40446199974765351*p_affine_10_2 + 0.19107600050469298*p_affine_8_2 + 0.40446199974765351*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id59 );
      Scalar_Variable_Coefficient_3D_g0( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g0_out0_id60 );
      Scalar_Variable_Coefficient_3D_g2( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g2_out0_id61 );
      Scalar_Variable_Coefficient_3D_g1( 0.041227165399737475*p_affine_10_0 + 0.78764240869137092*p_affine_8_0 + 0.1711304259088916*p_affine_9_0, 0.041227165399737475*p_affine_10_1 + 0.78764240869137092*p_affine_8_1 + 0.1711304259088916*p_affine_9_1, 0.041227165399737475*p_affine_10_2 + 0.78764240869137092*p_affine_8_2 + 0.1711304259088916*p_affine_9_2, &Scalar_Variable_Coefficient_3D_g1_out0_id62 );
      real_t tmp_0 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_1 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_2 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_3 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_4 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_5 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_6 = (std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)*std::abs(tmp_0*tmp_1 - tmp_2*tmp_3)) + (std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)*std::abs(tmp_0*tmp_4 - tmp_3*tmp_5)) + (std::abs(tmp_1*tmp_5 - tmp_2*tmp_4)*std::abs(tmp_1*tmp_5 - tmp_2*tmp_4));
      real_t tmp_7 = std::pow(tmp_6, -0.25);
      real_t tmp_8 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_9 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_10 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_11 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_12 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_13 = tmp_10*tmp_9 - tmp_11*tmp_12;
      real_t tmp_14 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_15 = tmp_12*tmp_14;
      real_t tmp_16 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_17 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_18 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_19 = tmp_17*tmp_18;
      real_t tmp_20 = tmp_10*tmp_18;
      real_t tmp_21 = tmp_14*tmp_17;
      real_t tmp_22 = tmp_12*tmp_16;
      real_t tmp_23 = 1.0 / (tmp_10*tmp_16*tmp_9 + tmp_11*tmp_19 - tmp_11*tmp_22 + tmp_15*tmp_8 - tmp_20*tmp_8 - tmp_21*tmp_9);
      real_t tmp_24 = -tmp_4;
      real_t tmp_25 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_26 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.93718850182767688*tmp_5);
      real_t tmp_27 = tmp_11*tmp_18 - tmp_14*tmp_9;
      real_t tmp_28 = -tmp_1;
      real_t tmp_29 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_30 = tmp_23*(0.93718850182767688*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_31 = tmp_15 - tmp_20;
      real_t tmp_32 = -tmp_3;
      real_t tmp_33 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_34 = tmp_23*(0.93718850182767688*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_35 = tmp_13*tmp_26 + tmp_27*tmp_30 + tmp_31*tmp_34 - 1.0/4.0;
      real_t tmp_36 = -tmp_10*tmp_8 + tmp_11*tmp_17;
      real_t tmp_37 = -tmp_11*tmp_16 + tmp_14*tmp_8;
      real_t tmp_38 = tmp_10*tmp_16 - tmp_21;
      real_t tmp_39 = tmp_26*tmp_36 + tmp_30*tmp_37 + tmp_34*tmp_38 - 1.0/4.0;
      real_t tmp_40 = tmp_12*tmp_8 - tmp_17*tmp_9;
      real_t tmp_41 = tmp_16*tmp_9 - tmp_18*tmp_8;
      real_t tmp_42 = tmp_19 - tmp_22;
      real_t tmp_43 = tmp_26*tmp_40 + tmp_30*tmp_41 + tmp_34*tmp_42 - 1.0/4.0;
      real_t tmp_44 = 1.0*tmp_23;
      real_t tmp_45 = 0.5*tmp_23;
      real_t tmp_46 = tmp_45*tmp_8;
      real_t tmp_47 = tmp_45*tmp_9;
      real_t tmp_48 = tmp_11*tmp_45;
      real_t tmp_49 = tmp_31*tmp_45;
      real_t tmp_50 = tmp_38*tmp_45;
      real_t tmp_51 = tmp_42*tmp_45;
      real_t tmp_52 = tmp_10*tmp_51 + tmp_12*tmp_50 + tmp_17*tmp_49 + tmp_27*tmp_46 + tmp_37*tmp_47 + tmp_41*tmp_48;
      real_t tmp_53 = tmp_13*tmp_46 + tmp_14*tmp_51 + tmp_16*tmp_49 + tmp_18*tmp_50 + tmp_36*tmp_47 + tmp_40*tmp_48;
      real_t tmp_54 = p_affine_13_0*(tmp_11*tmp_42*tmp_44 + tmp_31*tmp_44*tmp_8 + tmp_38*tmp_44*tmp_9) + p_affine_13_1*tmp_52 + p_affine_13_2*tmp_53;
      real_t tmp_55 = tmp_10*tmp_40*tmp_45 + tmp_12*tmp_36*tmp_45 + tmp_13*tmp_17*tmp_45 + tmp_14*tmp_41*tmp_45 + tmp_16*tmp_27*tmp_45 + tmp_18*tmp_37*tmp_45;
      real_t tmp_56 = p_affine_13_0*tmp_52 + p_affine_13_1*(tmp_10*tmp_41*tmp_44 + tmp_12*tmp_37*tmp_44 + tmp_17*tmp_27*tmp_44) + p_affine_13_2*tmp_55;
      real_t tmp_57 = p_affine_13_0*tmp_53 + p_affine_13_1*tmp_55 + p_affine_13_2*(tmp_13*tmp_16*tmp_44 + tmp_14*tmp_40*tmp_44 + tmp_18*tmp_36*tmp_44);
      real_t tmp_58 = 1.0*std::pow(tmp_6, 1.0/2.0);
      real_t tmp_59 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.60796128279561268*tmp_5);
      real_t tmp_60 = tmp_23*(0.60796128279561268*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_61 = tmp_23*(0.60796128279561268*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_62 = tmp_13*tmp_59 + tmp_27*tmp_60 + tmp_31*tmp_61 - 1.0/4.0;
      real_t tmp_63 = tmp_36*tmp_59 + tmp_37*tmp_60 + tmp_38*tmp_61 - 1.0/4.0;
      real_t tmp_64 = tmp_40*tmp_59 + tmp_41*tmp_60 + tmp_42*tmp_61 - 1.0/4.0;
      real_t tmp_65 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_66 = tmp_23*(0.039308471900058539*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_67 = tmp_23*(0.039308471900058539*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_68 = tmp_13*tmp_65 + tmp_27*tmp_66 + tmp_31*tmp_67 - 1.0/4.0;
      real_t tmp_69 = tmp_36*tmp_65 + tmp_37*tmp_66 + tmp_38*tmp_67 - 1.0/4.0;
      real_t tmp_70 = tmp_40*tmp_65 + tmp_41*tmp_66 + tmp_42*tmp_67 - 1.0/4.0;
      real_t tmp_71 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_72 = tmp_23*(0.1711304259088916*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_73 = tmp_23*(0.1711304259088916*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_74 = tmp_13*tmp_71 + tmp_27*tmp_72 + tmp_31*tmp_73 - 1.0/4.0;
      real_t tmp_75 = tmp_36*tmp_71 + tmp_37*tmp_72 + tmp_38*tmp_73 - 1.0/4.0;
      real_t tmp_76 = tmp_40*tmp_71 + tmp_41*tmp_72 + tmp_42*tmp_73 - 1.0/4.0;
      real_t tmp_77 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_78 = tmp_23*(0.37605877282253791*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_79 = tmp_23*(0.37605877282253791*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_80 = tmp_13*tmp_77 + tmp_27*tmp_78 + tmp_31*tmp_79 - 1.0/4.0;
      real_t tmp_81 = tmp_36*tmp_77 + tmp_37*tmp_78 + tmp_38*tmp_79 - 1.0/4.0;
      real_t tmp_82 = tmp_40*tmp_77 + tmp_41*tmp_78 + tmp_42*tmp_79 - 1.0/4.0;
      real_t tmp_83 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_84 = tmp_23*(0.78764240869137092*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_85 = tmp_23*(0.78764240869137092*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_86 = tmp_13*tmp_83 + tmp_27*tmp_84 + tmp_31*tmp_85 - 1.0/4.0;
      real_t tmp_87 = tmp_36*tmp_83 + tmp_37*tmp_84 + tmp_38*tmp_85 - 1.0/4.0;
      real_t tmp_88 = tmp_40*tmp_83 + tmp_41*tmp_84 + tmp_42*tmp_85 - 1.0/4.0;
      real_t tmp_89 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_90 = tmp_23*(0.58463275527740355*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_91 = tmp_23*(0.58463275527740355*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_92 = tmp_13*tmp_89 + tmp_27*tmp_90 + tmp_31*tmp_91 - 1.0/4.0;
      real_t tmp_93 = tmp_36*tmp_89 + tmp_37*tmp_90 + tmp_38*tmp_91 - 1.0/4.0;
      real_t tmp_94 = tmp_40*tmp_89 + tmp_41*tmp_90 + tmp_42*tmp_91 - 1.0/4.0;
      real_t tmp_95 = tmp_23*(0.78764240869137092*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_96 = tmp_23*(0.041227165399737475*tmp_2 + 0.78764240869137092*tmp_28 + tmp_29);
      real_t tmp_97 = tmp_23*(0.041227165399737475*tmp_0 + 0.78764240869137092*tmp_32 + tmp_33);
      real_t tmp_98 = tmp_13*tmp_95 + tmp_27*tmp_96 + tmp_31*tmp_97 - 1.0/4.0;
      real_t tmp_99 = tmp_36*tmp_95 + tmp_37*tmp_96 + tmp_38*tmp_97 - 1.0/4.0;
      real_t tmp_100 = tmp_40*tmp_95 + tmp_41*tmp_96 + tmp_42*tmp_97 - 1.0/4.0;
      real_t tmp_101 = tmp_23*(0.58463275527740355*tmp_24 + tmp_25 + 0.039308471900058539*tmp_5);
      real_t tmp_102 = tmp_23*(0.039308471900058539*tmp_2 + 0.58463275527740355*tmp_28 + tmp_29);
      real_t tmp_103 = tmp_23*(0.039308471900058539*tmp_0 + 0.58463275527740355*tmp_32 + tmp_33);
      real_t tmp_104 = tmp_101*tmp_13 + tmp_102*tmp_27 + tmp_103*tmp_31 - 1.0/4.0;
      real_t tmp_105 = tmp_101*tmp_36 + tmp_102*tmp_37 + tmp_103*tmp_38 - 1.0/4.0;
      real_t tmp_106 = tmp_101*tmp_40 + tmp_102*tmp_41 + tmp_103*tmp_42 - 1.0/4.0;
      real_t tmp_107 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.78764240869137092*tmp_5);
      real_t tmp_108 = tmp_23*(0.78764240869137092*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_109 = tmp_23*(0.78764240869137092*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_110 = tmp_107*tmp_13 + tmp_108*tmp_27 + tmp_109*tmp_31 - 1.0/4.0;
      real_t tmp_111 = tmp_107*tmp_36 + tmp_108*tmp_37 + tmp_109*tmp_38 - 1.0/4.0;
      real_t tmp_112 = tmp_107*tmp_40 + tmp_108*tmp_41 + tmp_109*tmp_42 - 1.0/4.0;
      real_t tmp_113 = tmp_23*(0.37605877282253791*tmp_24 + tmp_25 + 0.58463275527740355*tmp_5);
      real_t tmp_114 = tmp_23*(0.58463275527740355*tmp_2 + 0.37605877282253791*tmp_28 + tmp_29);
      real_t tmp_115 = tmp_23*(0.58463275527740355*tmp_0 + 0.37605877282253791*tmp_32 + tmp_33);
      real_t tmp_116 = tmp_113*tmp_13 + tmp_114*tmp_27 + tmp_115*tmp_31 - 1.0/4.0;
      real_t tmp_117 = tmp_113*tmp_36 + tmp_114*tmp_37 + tmp_115*tmp_38 - 1.0/4.0;
      real_t tmp_118 = tmp_113*tmp_40 + tmp_114*tmp_41 + tmp_115*tmp_42 - 1.0/4.0;
      real_t tmp_119 = tmp_23*(0.041227165399737475*tmp_24 + tmp_25 + 0.1711304259088916*tmp_5);
      real_t tmp_120 = tmp_23*(0.1711304259088916*tmp_2 + 0.041227165399737475*tmp_28 + tmp_29);
      real_t tmp_121 = tmp_23*(0.1711304259088916*tmp_0 + 0.041227165399737475*tmp_32 + tmp_33);
      real_t tmp_122 = tmp_119*tmp_13 + tmp_120*tmp_27 + tmp_121*tmp_31 - 1.0/4.0;
      real_t tmp_123 = tmp_119*tmp_36 + tmp_120*tmp_37 + tmp_121*tmp_38 - 1.0/4.0;
      real_t tmp_124 = tmp_119*tmp_40 + tmp_120*tmp_41 + tmp_121*tmp_42 - 1.0/4.0;
      real_t tmp_125 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.19107600050469298*tmp_5);
      real_t tmp_126 = tmp_23*(0.19107600050469298*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_127 = tmp_23*(0.19107600050469298*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_128 = tmp_125*tmp_13 + tmp_126*tmp_27 + tmp_127*tmp_31 - 1.0/4.0;
      real_t tmp_129 = tmp_125*tmp_36 + tmp_126*tmp_37 + tmp_127*tmp_38 - 1.0/4.0;
      real_t tmp_130 = tmp_125*tmp_40 + tmp_126*tmp_41 + tmp_127*tmp_42 - 1.0/4.0;
      real_t tmp_131 = tmp_23*(0.039308471900058539*tmp_24 + tmp_25 + 0.37605877282253791*tmp_5);
      real_t tmp_132 = tmp_23*(0.37605877282253791*tmp_2 + 0.039308471900058539*tmp_28 + tmp_29);
      real_t tmp_133 = tmp_23*(0.37605877282253791*tmp_0 + 0.039308471900058539*tmp_32 + tmp_33);
      real_t tmp_134 = tmp_13*tmp_131 + tmp_132*tmp_27 + tmp_133*tmp_31 - 1.0/4.0;
      real_t tmp_135 = tmp_131*tmp_36 + tmp_132*tmp_37 + tmp_133*tmp_38 - 1.0/4.0;
      real_t tmp_136 = tmp_131*tmp_40 + tmp_132*tmp_41 + tmp_133*tmp_42 - 1.0/4.0;
      real_t tmp_137 = tmp_23*(0.93718850182767688*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_138 = tmp_23*(0.031405749086161582*tmp_2 + 0.93718850182767688*tmp_28 + tmp_29);
      real_t tmp_139 = tmp_23*(0.031405749086161582*tmp_0 + 0.93718850182767688*tmp_32 + tmp_33);
      real_t tmp_140 = tmp_13*tmp_137 + tmp_138*tmp_27 + tmp_139*tmp_31 - 1.0/4.0;
      real_t tmp_141 = tmp_137*tmp_36 + tmp_138*tmp_37 + tmp_139*tmp_38 - 1.0/4.0;
      real_t tmp_142 = tmp_137*tmp_40 + tmp_138*tmp_41 + tmp_139*tmp_42 - 1.0/4.0;
      real_t tmp_143 = tmp_23*(0.60796128279561268*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_144 = tmp_23*(0.19601935860219369*tmp_2 + 0.60796128279561268*tmp_28 + tmp_29);
      real_t tmp_145 = tmp_23*(0.19601935860219369*tmp_0 + 0.60796128279561268*tmp_32 + tmp_33);
      real_t tmp_146 = tmp_13*tmp_143 + tmp_144*tmp_27 + tmp_145*tmp_31 - 1.0/4.0;
      real_t tmp_147 = tmp_143*tmp_36 + tmp_144*tmp_37 + tmp_145*tmp_38 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_40 + tmp_144*tmp_41 + tmp_145*tmp_42 - 1.0/4.0;
      real_t tmp_149 = tmp_23*(0.19107600050469298*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_150 = tmp_23*(0.40446199974765351*tmp_2 + 0.19107600050469298*tmp_28 + tmp_29);
      real_t tmp_151 = tmp_23*(0.40446199974765351*tmp_0 + 0.19107600050469298*tmp_32 + tmp_33);
      real_t tmp_152 = tmp_13*tmp_149 + tmp_150*tmp_27 + tmp_151*tmp_31 - 1.0/4.0;
      real_t tmp_153 = tmp_149*tmp_36 + tmp_150*tmp_37 + tmp_151*tmp_38 - 1.0/4.0;
      real_t tmp_154 = tmp_149*tmp_40 + tmp_150*tmp_41 + tmp_151*tmp_42 - 1.0/4.0;
      real_t tmp_155 = tmp_23*(0.031405749086161582*tmp_24 + tmp_25 + 0.031405749086161582*tmp_5);
      real_t tmp_156 = tmp_23*(0.031405749086161582*tmp_2 + 0.031405749086161582*tmp_28 + tmp_29);
      real_t tmp_157 = tmp_23*(0.031405749086161582*tmp_0 + 0.031405749086161582*tmp_32 + tmp_33);
      real_t tmp_158 = tmp_13*tmp_155 + tmp_156*tmp_27 + tmp_157*tmp_31 - 1.0/4.0;
      real_t tmp_159 = tmp_155*tmp_36 + tmp_156*tmp_37 + tmp_157*tmp_38 - 1.0/4.0;
      real_t tmp_160 = tmp_155*tmp_40 + tmp_156*tmp_41 + tmp_157*tmp_42 - 1.0/4.0;
      real_t tmp_161 = tmp_23*(0.19601935860219369*tmp_24 + tmp_25 + 0.19601935860219369*tmp_5);
      real_t tmp_162 = tmp_23*(0.19601935860219369*tmp_2 + 0.19601935860219369*tmp_28 + tmp_29);
      real_t tmp_163 = tmp_23*(0.19601935860219369*tmp_0 + 0.19601935860219369*tmp_32 + tmp_33);
      real_t tmp_164 = tmp_13*tmp_161 + tmp_162*tmp_27 + tmp_163*tmp_31 - 1.0/4.0;
      real_t tmp_165 = tmp_161*tmp_36 + tmp_162*tmp_37 + tmp_163*tmp_38 - 1.0/4.0;
      real_t tmp_166 = tmp_161*tmp_40 + tmp_162*tmp_41 + tmp_163*tmp_42 - 1.0/4.0;
      real_t tmp_167 = tmp_23*(0.40446199974765351*tmp_24 + tmp_25 + 0.40446199974765351*tmp_5);
      real_t tmp_168 = tmp_23*(0.40446199974765351*tmp_2 + 0.40446199974765351*tmp_28 + tmp_29);
      real_t tmp_169 = tmp_23*(0.40446199974765351*tmp_0 + 0.40446199974765351*tmp_32 + tmp_33);
      real_t tmp_170 = tmp_13*tmp_167 + tmp_168*tmp_27 + tmp_169*tmp_31 - 1.0/4.0;
      real_t tmp_171 = tmp_167*tmp_36 + tmp_168*tmp_37 + tmp_169*tmp_38 - 1.0/4.0;
      real_t tmp_172 = tmp_167*tmp_40 + tmp_168*tmp_41 + tmp_169*tmp_42 - 1.0/4.0;
      real_t tmp_173 = tmp_23*(0.1711304259088916*tmp_24 + tmp_25 + 0.041227165399737475*tmp_5);
      real_t tmp_174 = tmp_23*(0.041227165399737475*tmp_2 + 0.1711304259088916*tmp_28 + tmp_29);
      real_t tmp_175 = tmp_23*(0.041227165399737475*tmp_0 + 0.1711304259088916*tmp_32 + tmp_33);
      real_t tmp_176 = tmp_13*tmp_173 + tmp_174*tmp_27 + tmp_175*tmp_31 - 1.0/4.0;
      real_t tmp_177 = tmp_173*tmp_36 + tmp_174*tmp_37 + tmp_175*tmp_38 - 1.0/4.0;
      real_t tmp_178 = tmp_173*tmp_40 + tmp_174*tmp_41 + tmp_175*tmp_42 - 1.0/4.0;
      real_t a_0_0 = 0.0068572537431980923*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id0*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_43 + tmp_35*tmp_8 + tmp_39*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id2*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_43 + tmp_12*tmp_39 + tmp_17*tmp_35)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id1*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_43 + tmp_16*tmp_35 + tmp_18*tmp_39))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id12*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_82 + tmp_8*tmp_80 + tmp_81*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id14*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_82 + tmp_12*tmp_81 + tmp_17*tmp_80)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id13*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_82 + tmp_16*tmp_80 + tmp_18*tmp_81))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id15*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_88 + tmp_8*tmp_86 + tmp_87*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id17*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_88 + tmp_12*tmp_87 + tmp_17*tmp_86)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id16*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_88 + tmp_16*tmp_86 + tmp_18*tmp_87))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id18*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_94 + tmp_8*tmp_92 + tmp_9*tmp_93)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id20*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_94 + tmp_12*tmp_93 + tmp_17*tmp_92)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id19*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_94 + tmp_16*tmp_92 + tmp_18*tmp_93))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id21*(-tmp_54 + 7.0*tmp_7*(tmp_100*tmp_11 + tmp_8*tmp_98 + tmp_9*tmp_99)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id23*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_100 + tmp_12*tmp_99 + tmp_17*tmp_98)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id22*(-tmp_57 + 7.0*tmp_7*(tmp_100*tmp_14 + tmp_16*tmp_98 + tmp_18*tmp_99))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id24*(-tmp_54 + 7.0*tmp_7*(tmp_104*tmp_8 + tmp_105*tmp_9 + tmp_106*tmp_11)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id26*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_106 + tmp_104*tmp_17 + tmp_105*tmp_12)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id25*(-tmp_57 + 7.0*tmp_7*(tmp_104*tmp_16 + tmp_105*tmp_18 + tmp_106*tmp_14))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id27*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_112 + tmp_110*tmp_8 + tmp_111*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id29*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_112 + tmp_110*tmp_17 + tmp_111*tmp_12)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id28*(-tmp_57 + 7.0*tmp_7*(tmp_110*tmp_16 + tmp_111*tmp_18 + tmp_112*tmp_14))) + 0.037198804536718075*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id3*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_64 + tmp_62*tmp_8 + tmp_63*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id5*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_64 + tmp_12*tmp_63 + tmp_17*tmp_62)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id4*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_64 + tmp_16*tmp_62 + tmp_18*tmp_63))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id30*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_118 + tmp_116*tmp_8 + tmp_117*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id32*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_118 + tmp_116*tmp_17 + tmp_117*tmp_12)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id31*(-tmp_57 + 7.0*tmp_7*(tmp_116*tmp_16 + tmp_117*tmp_18 + tmp_118*tmp_14))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id33*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_124 + tmp_122*tmp_8 + tmp_123*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id35*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_124 + tmp_12*tmp_123 + tmp_122*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id34*(-tmp_57 + 7.0*tmp_7*(tmp_122*tmp_16 + tmp_123*tmp_18 + tmp_124*tmp_14))) + 0.042507265838595799*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id36*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_130 + tmp_128*tmp_8 + tmp_129*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id38*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_130 + tmp_12*tmp_129 + tmp_128*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id37*(-tmp_57 + 7.0*tmp_7*(tmp_128*tmp_16 + tmp_129*tmp_18 + tmp_130*tmp_14))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id39*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_136 + tmp_134*tmp_8 + tmp_135*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id41*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_136 + tmp_12*tmp_135 + tmp_134*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id40*(-tmp_57 + 7.0*tmp_7*(tmp_134*tmp_16 + tmp_135*tmp_18 + tmp_136*tmp_14))) + 0.0068572537431980923*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id42*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_142 + tmp_140*tmp_8 + tmp_141*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id44*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_142 + tmp_12*tmp_141 + tmp_140*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id43*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_142 + tmp_140*tmp_16 + tmp_141*tmp_18))) + 0.037198804536718075*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id45*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_148 + tmp_146*tmp_8 + tmp_147*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id47*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_148 + tmp_12*tmp_147 + tmp_146*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id46*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_148 + tmp_146*tmp_16 + tmp_147*tmp_18))) + 0.042507265838595799*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id48*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_154 + tmp_152*tmp_8 + tmp_153*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id50*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_154 + tmp_12*tmp_153 + tmp_152*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id49*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_154 + tmp_152*tmp_16 + tmp_153*tmp_18))) + 0.0068572537431980923*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id51*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_160 + tmp_158*tmp_8 + tmp_159*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id53*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_160 + tmp_12*tmp_159 + tmp_158*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id52*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_160 + tmp_158*tmp_16 + tmp_159*tmp_18))) + 0.037198804536718075*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id54*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_166 + tmp_164*tmp_8 + tmp_165*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id56*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_166 + tmp_12*tmp_165 + tmp_164*tmp_17)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id55*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_166 + tmp_16*tmp_164 + tmp_165*tmp_18))) + 0.042507265838595799*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id57*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_172 + tmp_170*tmp_8 + tmp_171*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id59*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_172 + tmp_12*tmp_171 + tmp_17*tmp_170)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id58*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_172 + tmp_16*tmp_170 + tmp_171*tmp_18))) + 0.020848748529055869*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id6*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_70 + tmp_68*tmp_8 + tmp_69*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id8*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_70 + tmp_12*tmp_69 + tmp_17*tmp_68)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id7*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_70 + tmp_16*tmp_68 + tmp_18*tmp_69))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id60*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_178 + tmp_176*tmp_8 + tmp_177*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id62*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_178 + tmp_12*tmp_177 + tmp_17*tmp_176)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id61*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_178 + tmp_16*tmp_176 + tmp_177*tmp_18))) + 0.019202922745021479*tmp_58*(2*Scalar_Variable_Coefficient_3D_g0_out0_id9*(-tmp_54 + 7.0*tmp_7*(tmp_11*tmp_76 + tmp_74*tmp_8 + tmp_75*tmp_9)) + 2*Scalar_Variable_Coefficient_3D_g1_out0_id11*(-tmp_56 + 7.0*tmp_7*(tmp_10*tmp_76 + tmp_12*tmp_75 + tmp_17*tmp_74)) + 2*Scalar_Variable_Coefficient_3D_g2_out0_id10*(-tmp_57 + 7.0*tmp_7*(tmp_14*tmp_76 + tmp_16*tmp_74 + tmp_18*tmp_75)));
      elMat( 0, 0) = a_0_0;
   }
   void integrateVolume3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >&      coords,
                                                 const DGBasisInfo&                                       trialBasis,
                                                 const DGBasisInfo&                                       testBasis,
                                                 int                                                      trialDegree,
                                                 int                                                      testDegree,
                                                 Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coords[0]( 0 );
   const auto p_affine_0_1 = coords[0]( 1 );
   const auto p_affine_0_2 = coords[0]( 2 );

   const auto p_affine_1_0 = coords[1]( 0 );
   const auto p_affine_1_1 = coords[1]( 1 );
   const auto p_affine_1_2 = coords[1]( 2 );

   const auto p_affine_2_0 = coords[2]( 0 );
   const auto p_affine_2_1 = coords[2]( 1 );
   const auto p_affine_2_2 = coords[2]( 2 );

   const auto p_affine_3_0 = coords[3]( 0 );
   const auto p_affine_3_1 = coords[3]( 1 );
   const auto p_affine_3_2 = coords[3]( 2 );

      real_t tmp_0 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_1 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_2 = tmp_0*tmp_1;
      real_t tmp_3 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_4 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_5 = tmp_3*tmp_4;
      real_t tmp_6 = tmp_2 - tmp_5;
      real_t tmp_7 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_8 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_9 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_10 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_11 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_12 = tmp_11*tmp_4;
      real_t tmp_13 = tmp_1*tmp_11;
      real_t tmp_14 = tmp_0*tmp_9;
      real_t tmp_15 = 1.0 / (tmp_10*tmp_12 - tmp_10*tmp_14 - tmp_13*tmp_8 + tmp_2*tmp_7 + tmp_3*tmp_8*tmp_9 - tmp_5*tmp_7);
      real_t tmp_16 = tmp_15*tmp_7;
      real_t tmp_17 = tmp_16*tmp_6;
      real_t tmp_18 = -tmp_13 + tmp_3*tmp_9;
      real_t tmp_19 = tmp_15*tmp_8;
      real_t tmp_20 = tmp_18*tmp_19;
      real_t tmp_21 = tmp_12 - tmp_14;
      real_t tmp_22 = tmp_10*tmp_15;
      real_t tmp_23 = tmp_21*tmp_22;
      real_t tmp_24 = -tmp_1*tmp_8 + tmp_10*tmp_4;
      real_t tmp_25 = tmp_11*tmp_15;
      real_t tmp_26 = tmp_24*tmp_25;
      real_t tmp_27 = tmp_1*tmp_7 - tmp_10*tmp_9;
      real_t tmp_28 = tmp_0*tmp_15;
      real_t tmp_29 = tmp_27*tmp_28;
      real_t tmp_30 = -tmp_4*tmp_7 + tmp_8*tmp_9;
      real_t tmp_31 = tmp_15*tmp_3;
      real_t tmp_32 = tmp_30*tmp_31;
      real_t tmp_33 = -tmp_0*tmp_10 + tmp_3*tmp_8;
      real_t tmp_34 = tmp_15*tmp_9;
      real_t tmp_35 = tmp_33*tmp_34;
      real_t tmp_36 = tmp_10*tmp_11 - tmp_3*tmp_7;
      real_t tmp_37 = tmp_15*tmp_4;
      real_t tmp_38 = tmp_36*tmp_37;
      real_t tmp_39 = tmp_0*tmp_7 - tmp_11*tmp_8;
      real_t tmp_40 = tmp_1*tmp_15;
      real_t tmp_41 = tmp_39*tmp_40;
      real_t tmp_42 = tmp_16*tmp_33;
      real_t tmp_43 = tmp_19*tmp_36;
      real_t tmp_44 = tmp_22*tmp_39;
      real_t tmp_45 = tmp_15*tmp_6;
      real_t tmp_46 = tmp_45*tmp_9;
      real_t tmp_47 = tmp_15*tmp_18;
      real_t tmp_48 = tmp_4*tmp_47;
      real_t tmp_49 = tmp_15*tmp_21;
      real_t tmp_50 = tmp_1*tmp_49;
      real_t tmp_51 = tmp_16*tmp_24;
      real_t tmp_52 = tmp_19*tmp_27;
      real_t tmp_53 = tmp_22*tmp_30;
      real_t tmp_54 = tmp_11*tmp_45;
      real_t tmp_55 = tmp_0*tmp_47;
      real_t tmp_56 = tmp_3*tmp_49;
      real_t tmp_57 = tmp_25*tmp_33;
      real_t tmp_58 = tmp_28*tmp_36;
      real_t tmp_59 = tmp_31*tmp_39;
      real_t tmp_60 = tmp_24*tmp_34;
      real_t tmp_61 = tmp_27*tmp_37;
      real_t tmp_62 = tmp_30*tmp_40;
      real_t tmp_63 = p_affine_0_0*p_affine_1_1;
      real_t tmp_64 = p_affine_0_0*p_affine_1_2;
      real_t tmp_65 = p_affine_2_1*p_affine_3_2;
      real_t tmp_66 = p_affine_0_1*p_affine_1_0;
      real_t tmp_67 = p_affine_0_1*p_affine_1_2;
      real_t tmp_68 = p_affine_2_2*p_affine_3_0;
      real_t tmp_69 = p_affine_0_2*p_affine_1_0;
      real_t tmp_70 = p_affine_0_2*p_affine_1_1;
      real_t tmp_71 = p_affine_2_0*p_affine_3_1;
      real_t tmp_72 = p_affine_2_2*p_affine_3_1;
      real_t tmp_73 = p_affine_2_0*p_affine_3_2;
      real_t tmp_74 = p_affine_2_1*p_affine_3_0;
      real_t tmp_75 = ((1.0*tmp_17 + 1.0*tmp_20 + 1.0*tmp_23)*(2.0*tmp_17 + 2.0*tmp_20 + 2.0*tmp_23) + (1.0*tmp_26 + 1.0*tmp_29 + 1.0*tmp_32)*(2.0*tmp_26 + 2.0*tmp_29 + 2.0*tmp_32) + (1.0*tmp_35 + 1.0*tmp_38 + 1.0*tmp_41)*(2.0*tmp_35 + 2.0*tmp_38 + 2.0*tmp_41) + 2*(0.5*tmp_42 + 0.5*tmp_43 + 0.5*tmp_44 + 0.5*tmp_46 + 0.5*tmp_48 + 0.5*tmp_50)*(tmp_42 + tmp_43 + tmp_44 + tmp_46 + tmp_48 + tmp_50) + 2*(0.5*tmp_51 + 0.5*tmp_52 + 0.5*tmp_53 + 0.5*tmp_54 + 0.5*tmp_55 + 0.5*tmp_56)*(tmp_51 + tmp_52 + tmp_53 + tmp_54 + tmp_55 + tmp_56) + 2*(0.5*tmp_57 + 0.5*tmp_58 + 0.5*tmp_59 + 0.5*tmp_60 + 0.5*tmp_61 + 0.5*tmp_62)*(tmp_57 + tmp_58 + tmp_59 + tmp_60 + tmp_61 + tmp_62))*std::abs(p_affine_0_0*tmp_65 - p_affine_0_0*tmp_72 + p_affine_0_1*tmp_68 - p_affine_0_1*tmp_73 + p_affine_0_2*tmp_71 - p_affine_0_2*tmp_74 - p_affine_1_0*tmp_65 + p_affine_1_0*tmp_72 - p_affine_1_1*tmp_68 + p_affine_1_1*tmp_73 - p_affine_1_2*tmp_71 + p_affine_1_2*tmp_74 + p_affine_2_0*tmp_67 - p_affine_2_0*tmp_70 - p_affine_2_1*tmp_64 + p_affine_2_1*tmp_69 + p_affine_2_2*tmp_63 - p_affine_2_2*tmp_66 - p_affine_3_0*tmp_67 + p_affine_3_0*tmp_70 + p_affine_3_1*tmp_64 - p_affine_3_1*tmp_69 - p_affine_3_2*tmp_63 + p_affine_3_2*tmp_66);
      real_t a_0_0 = 0.1666666666666668*tmp_75;
      elMat( 0, 0) = a_0_0;
   }



   void integrateFacetInner3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
                                                     const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                     const Eigen::Matrix< real_t, 3, 1 >&,
                                                     const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                     const DGBasisInfo&                                       trialBasis,
                                                     const DGBasisInfo&                                       testBasis,
                                                     int                                                      trialDegree,
                                                     int                                                      testDegree,
                                                     Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );

         real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = tmp_1*tmp_2;
      real_t tmp_4 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_5 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_6 = tmp_4*tmp_5;
      real_t tmp_7 = tmp_3 - tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_9 = tmp_5*tmp_8;
      real_t tmp_10 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_11 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_12 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_13 = tmp_12*tmp_2;
      real_t tmp_14 = tmp_1*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_13 + tmp_0*tmp_9 + tmp_10*tmp_3 - tmp_10*tmp_6 + tmp_11*tmp_12*tmp_4 - tmp_11*tmp_14);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = tmp_12*tmp_4 - tmp_14;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_13 + tmp_9;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_7 + tmp_21*tmp_26 + tmp_27*tmp_32 - 1.0/4.0;
      real_t tmp_34 = -tmp_0*tmp_2 + tmp_11*tmp_4;
      real_t tmp_35 = tmp_0*tmp_8 - tmp_10*tmp_4;
      real_t tmp_36 = tmp_10*tmp_2 - tmp_11*tmp_8;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36 - 1.0/4.0;
      real_t tmp_38 = tmp_0*tmp_5 - tmp_1*tmp_11;
      real_t tmp_39 = -tmp_0*tmp_12 + tmp_1*tmp_10;
      real_t tmp_40 = -tmp_10*tmp_5 + tmp_11*tmp_12;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40 - 1.0/4.0;
      real_t tmp_42 = tmp_0*tmp_33 + tmp_1*tmp_37 + tmp_4*tmp_41;
      real_t tmp_43 = 1.0*tmp_15;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_0*tmp_44;
      real_t tmp_46 = tmp_1*tmp_44;
      real_t tmp_47 = tmp_4*tmp_44;
      real_t tmp_48 = tmp_27*tmp_44;
      real_t tmp_49 = tmp_36*tmp_44;
      real_t tmp_50 = tmp_40*tmp_44;
      real_t tmp_51 = tmp_11*tmp_48 + tmp_2*tmp_50 + tmp_21*tmp_45 + tmp_35*tmp_46 + tmp_39*tmp_47 + tmp_49*tmp_5;
      real_t tmp_52 = tmp_10*tmp_48 + tmp_12*tmp_49 + tmp_34*tmp_46 + tmp_38*tmp_47 + tmp_45*tmp_7 + tmp_50*tmp_8;
      real_t tmp_53 = 2.0*p_affine_13_0*(tmp_0*tmp_27*tmp_43 + tmp_1*tmp_36*tmp_43 + tmp_4*tmp_40*tmp_43) + 2.0*p_affine_13_1*tmp_51 + 2.0*p_affine_13_2*tmp_52;
      real_t tmp_54 = tmp_10*tmp_33 + tmp_12*tmp_37 + tmp_41*tmp_8;
      real_t tmp_55 = tmp_10*tmp_21*tmp_44 + tmp_11*tmp_44*tmp_7 + tmp_12*tmp_35*tmp_44 + tmp_2*tmp_38*tmp_44 + tmp_34*tmp_44*tmp_5 + tmp_39*tmp_44*tmp_8;
      real_t tmp_56 = 2.0*p_affine_13_0*tmp_52 + 2.0*p_affine_13_1*tmp_55 + 2.0*p_affine_13_2*(tmp_10*tmp_43*tmp_7 + tmp_12*tmp_34*tmp_43 + tmp_38*tmp_43*tmp_8);
      real_t tmp_57 = tmp_11*tmp_33 + tmp_2*tmp_41 + tmp_37*tmp_5;
      real_t tmp_58 = 2.0*p_affine_13_0*tmp_51 + 2.0*p_affine_13_1*(tmp_11*tmp_21*tmp_43 + tmp_2*tmp_39*tmp_43 + tmp_35*tmp_43*tmp_5) + 2.0*p_affine_13_2*tmp_55;
      real_t tmp_59 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_60 = std::pow(tmp_59, -0.25);
      real_t tmp_61 = 1.0*std::pow(tmp_59, 1.0/2.0);
      real_t tmp_62 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_62*tmp_7 - 1.0/4.0;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64 - 1.0/4.0;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64 - 1.0/4.0;
      real_t tmp_68 = tmp_0*tmp_65 + tmp_1*tmp_66 + tmp_4*tmp_67;
      real_t tmp_69 = tmp_10*tmp_65 + tmp_12*tmp_66 + tmp_67*tmp_8;
      real_t tmp_70 = tmp_11*tmp_65 + tmp_2*tmp_67 + tmp_5*tmp_66;
      real_t tmp_71 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_72 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_73 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_74 = tmp_21*tmp_72 + tmp_27*tmp_73 + tmp_7*tmp_71 - 1.0/4.0;
      real_t tmp_75 = tmp_34*tmp_71 + tmp_35*tmp_72 + tmp_36*tmp_73 - 1.0/4.0;
      real_t tmp_76 = tmp_38*tmp_71 + tmp_39*tmp_72 + tmp_40*tmp_73 - 1.0/4.0;
      real_t tmp_77 = tmp_0*tmp_74 + tmp_1*tmp_75 + tmp_4*tmp_76;
      real_t tmp_78 = tmp_10*tmp_74 + tmp_12*tmp_75 + tmp_76*tmp_8;
      real_t tmp_79 = tmp_11*tmp_74 + tmp_2*tmp_76 + tmp_5*tmp_75;
      real_t tmp_80 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_81 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_82 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_83 = tmp_21*tmp_81 + tmp_27*tmp_82 + tmp_7*tmp_80 - 1.0/4.0;
      real_t tmp_84 = tmp_34*tmp_80 + tmp_35*tmp_81 + tmp_36*tmp_82 - 1.0/4.0;
      real_t tmp_85 = tmp_38*tmp_80 + tmp_39*tmp_81 + tmp_40*tmp_82 - 1.0/4.0;
      real_t tmp_86 = tmp_0*tmp_83 + tmp_1*tmp_84 + tmp_4*tmp_85;
      real_t tmp_87 = tmp_10*tmp_83 + tmp_12*tmp_84 + tmp_8*tmp_85;
      real_t tmp_88 = tmp_11*tmp_83 + tmp_2*tmp_85 + tmp_5*tmp_84;
      real_t tmp_89 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_90 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_91 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_92 = tmp_21*tmp_90 + tmp_27*tmp_91 + tmp_7*tmp_89 - 1.0/4.0;
      real_t tmp_93 = tmp_34*tmp_89 + tmp_35*tmp_90 + tmp_36*tmp_91 - 1.0/4.0;
      real_t tmp_94 = tmp_38*tmp_89 + tmp_39*tmp_90 + tmp_40*tmp_91 - 1.0/4.0;
      real_t tmp_95 = tmp_0*tmp_92 + tmp_1*tmp_93 + tmp_4*tmp_94;
      real_t tmp_96 = tmp_10*tmp_92 + tmp_12*tmp_93 + tmp_8*tmp_94;
      real_t tmp_97 = tmp_11*tmp_92 + tmp_2*tmp_94 + tmp_5*tmp_93;
      real_t tmp_98 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_99 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_100 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_101 = tmp_100*tmp_27 + tmp_21*tmp_99 + tmp_7*tmp_98 - 1.0/4.0;
      real_t tmp_102 = tmp_100*tmp_36 + tmp_34*tmp_98 + tmp_35*tmp_99 - 1.0/4.0;
      real_t tmp_103 = tmp_100*tmp_40 + tmp_38*tmp_98 + tmp_39*tmp_99 - 1.0/4.0;
      real_t tmp_104 = tmp_0*tmp_101 + tmp_1*tmp_102 + tmp_103*tmp_4;
      real_t tmp_105 = tmp_10*tmp_101 + tmp_102*tmp_12 + tmp_103*tmp_8;
      real_t tmp_106 = tmp_101*tmp_11 + tmp_102*tmp_5 + tmp_103*tmp_2;
      real_t tmp_107 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_108 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_109 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_110 = tmp_107*tmp_7 + tmp_108*tmp_21 + tmp_109*tmp_27 - 1.0/4.0;
      real_t tmp_111 = tmp_107*tmp_34 + tmp_108*tmp_35 + tmp_109*tmp_36 - 1.0/4.0;
      real_t tmp_112 = tmp_107*tmp_38 + tmp_108*tmp_39 + tmp_109*tmp_40 - 1.0/4.0;
      real_t tmp_113 = tmp_0*tmp_110 + tmp_1*tmp_111 + tmp_112*tmp_4;
      real_t tmp_114 = tmp_10*tmp_110 + tmp_111*tmp_12 + tmp_112*tmp_8;
      real_t tmp_115 = tmp_11*tmp_110 + tmp_111*tmp_5 + tmp_112*tmp_2;
      real_t tmp_116 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_7 + tmp_117*tmp_21 + tmp_118*tmp_27 - 1.0/4.0;
      real_t tmp_120 = tmp_116*tmp_34 + tmp_117*tmp_35 + tmp_118*tmp_36 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_38 + tmp_117*tmp_39 + tmp_118*tmp_40 - 1.0/4.0;
      real_t tmp_122 = tmp_0*tmp_119 + tmp_1*tmp_120 + tmp_121*tmp_4;
      real_t tmp_123 = tmp_10*tmp_119 + tmp_12*tmp_120 + tmp_121*tmp_8;
      real_t tmp_124 = tmp_11*tmp_119 + tmp_120*tmp_5 + tmp_121*tmp_2;
      real_t tmp_125 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_126 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_127 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_128 = tmp_125*tmp_7 + tmp_126*tmp_21 + tmp_127*tmp_27 - 1.0/4.0;
      real_t tmp_129 = tmp_125*tmp_34 + tmp_126*tmp_35 + tmp_127*tmp_36 - 1.0/4.0;
      real_t tmp_130 = tmp_125*tmp_38 + tmp_126*tmp_39 + tmp_127*tmp_40 - 1.0/4.0;
      real_t tmp_131 = tmp_0*tmp_128 + tmp_1*tmp_129 + tmp_130*tmp_4;
      real_t tmp_132 = tmp_10*tmp_128 + tmp_12*tmp_129 + tmp_130*tmp_8;
      real_t tmp_133 = tmp_11*tmp_128 + tmp_129*tmp_5 + tmp_130*tmp_2;
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_7 + tmp_135*tmp_21 + tmp_136*tmp_27 - 1.0/4.0;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36 - 1.0/4.0;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40 - 1.0/4.0;
      real_t tmp_140 = tmp_0*tmp_137 + tmp_1*tmp_138 + tmp_139*tmp_4;
      real_t tmp_141 = tmp_10*tmp_137 + tmp_12*tmp_138 + tmp_139*tmp_8;
      real_t tmp_142 = tmp_11*tmp_137 + tmp_138*tmp_5 + tmp_139*tmp_2;
      real_t tmp_143 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_7 + tmp_144*tmp_21 + tmp_145*tmp_27 - 1.0/4.0;
      real_t tmp_147 = tmp_143*tmp_34 + tmp_144*tmp_35 + tmp_145*tmp_36 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_38 + tmp_144*tmp_39 + tmp_145*tmp_40 - 1.0/4.0;
      real_t tmp_149 = tmp_0*tmp_146 + tmp_1*tmp_147 + tmp_148*tmp_4;
      real_t tmp_150 = tmp_10*tmp_146 + tmp_12*tmp_147 + tmp_148*tmp_8;
      real_t tmp_151 = tmp_11*tmp_146 + tmp_147*tmp_5 + tmp_148*tmp_2;
      real_t tmp_152 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_153 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_154 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_155 = tmp_152*tmp_7 + tmp_153*tmp_21 + tmp_154*tmp_27 - 1.0/4.0;
      real_t tmp_156 = tmp_152*tmp_34 + tmp_153*tmp_35 + tmp_154*tmp_36 - 1.0/4.0;
      real_t tmp_157 = tmp_152*tmp_38 + tmp_153*tmp_39 + tmp_154*tmp_40 - 1.0/4.0;
      real_t tmp_158 = tmp_0*tmp_155 + tmp_1*tmp_156 + tmp_157*tmp_4;
      real_t tmp_159 = tmp_10*tmp_155 + tmp_12*tmp_156 + tmp_157*tmp_8;
      real_t tmp_160 = tmp_11*tmp_155 + tmp_156*tmp_5 + tmp_157*tmp_2;
      real_t tmp_161 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_162 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_163 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_164 = tmp_161*tmp_7 + tmp_162*tmp_21 + tmp_163*tmp_27 - 1.0/4.0;
      real_t tmp_165 = tmp_161*tmp_34 + tmp_162*tmp_35 + tmp_163*tmp_36 - 1.0/4.0;
      real_t tmp_166 = tmp_161*tmp_38 + tmp_162*tmp_39 + tmp_163*tmp_40 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_164 + tmp_1*tmp_165 + tmp_166*tmp_4;
      real_t tmp_168 = tmp_10*tmp_164 + tmp_12*tmp_165 + tmp_166*tmp_8;
      real_t tmp_169 = tmp_11*tmp_164 + tmp_165*tmp_5 + tmp_166*tmp_2;
      real_t tmp_170 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_171 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_172 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_173 = tmp_170*tmp_7 + tmp_171*tmp_21 + tmp_172*tmp_27 - 1.0/4.0;
      real_t tmp_174 = tmp_170*tmp_34 + tmp_171*tmp_35 + tmp_172*tmp_36 - 1.0/4.0;
      real_t tmp_175 = tmp_170*tmp_38 + tmp_171*tmp_39 + tmp_172*tmp_40 - 1.0/4.0;
      real_t tmp_176 = tmp_0*tmp_173 + tmp_1*tmp_174 + tmp_175*tmp_4;
      real_t tmp_177 = tmp_10*tmp_173 + tmp_12*tmp_174 + tmp_175*tmp_8;
      real_t tmp_178 = tmp_11*tmp_173 + tmp_174*tmp_5 + tmp_175*tmp_2;
      real_t tmp_179 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_180 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_181 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_182 = tmp_179*tmp_7 + tmp_180*tmp_21 + tmp_181*tmp_27 - 1.0/4.0;
      real_t tmp_183 = tmp_179*tmp_34 + tmp_180*tmp_35 + tmp_181*tmp_36 - 1.0/4.0;
      real_t tmp_184 = tmp_179*tmp_38 + tmp_180*tmp_39 + tmp_181*tmp_40 - 1.0/4.0;
      real_t tmp_185 = tmp_0*tmp_182 + tmp_1*tmp_183 + tmp_184*tmp_4;
      real_t tmp_186 = tmp_10*tmp_182 + tmp_12*tmp_183 + tmp_184*tmp_8;
      real_t tmp_187 = tmp_11*tmp_182 + tmp_183*tmp_5 + tmp_184*tmp_2;
      real_t tmp_188 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_189 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_190 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_191 = tmp_188*tmp_7 + tmp_189*tmp_21 + tmp_190*tmp_27 - 1.0/4.0;
      real_t tmp_192 = tmp_188*tmp_34 + tmp_189*tmp_35 + tmp_190*tmp_36 - 1.0/4.0;
      real_t tmp_193 = tmp_188*tmp_38 + tmp_189*tmp_39 + tmp_190*tmp_40 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_191 + tmp_1*tmp_192 + tmp_193*tmp_4;
      real_t tmp_195 = tmp_10*tmp_191 + tmp_12*tmp_192 + tmp_193*tmp_8;
      real_t tmp_196 = tmp_11*tmp_191 + tmp_192*tmp_5 + tmp_193*tmp_2;
      real_t tmp_197 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_198 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_199 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_200 = tmp_197*tmp_7 + tmp_198*tmp_21 + tmp_199*tmp_27 - 1.0/4.0;
      real_t tmp_201 = tmp_197*tmp_34 + tmp_198*tmp_35 + tmp_199*tmp_36 - 1.0/4.0;
      real_t tmp_202 = tmp_197*tmp_38 + tmp_198*tmp_39 + tmp_199*tmp_40 - 1.0/4.0;
      real_t tmp_203 = tmp_0*tmp_200 + tmp_1*tmp_201 + tmp_202*tmp_4;
      real_t tmp_204 = tmp_10*tmp_200 + tmp_12*tmp_201 + tmp_202*tmp_8;
      real_t tmp_205 = tmp_11*tmp_200 + tmp_2*tmp_202 + tmp_201*tmp_5;
      real_t tmp_206 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_7 + tmp_207*tmp_21 + tmp_208*tmp_27 - 1.0/4.0;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36 - 1.0/4.0;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40 - 1.0/4.0;
      real_t tmp_212 = tmp_0*tmp_209 + tmp_1*tmp_210 + tmp_211*tmp_4;
      real_t tmp_213 = tmp_10*tmp_209 + tmp_12*tmp_210 + tmp_211*tmp_8;
      real_t tmp_214 = tmp_11*tmp_209 + tmp_2*tmp_211 + tmp_210*tmp_5;
      real_t tmp_215 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_216 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_217 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_218 = tmp_21*tmp_216 + tmp_215*tmp_7 + tmp_217*tmp_27 - 1.0/4.0;
      real_t tmp_219 = tmp_215*tmp_34 + tmp_216*tmp_35 + tmp_217*tmp_36 - 1.0/4.0;
      real_t tmp_220 = tmp_215*tmp_38 + tmp_216*tmp_39 + tmp_217*tmp_40 - 1.0/4.0;
      real_t tmp_221 = tmp_0*tmp_218 + tmp_1*tmp_219 + tmp_220*tmp_4;
      real_t tmp_222 = tmp_10*tmp_218 + tmp_12*tmp_219 + tmp_220*tmp_8;
      real_t tmp_223 = tmp_11*tmp_218 + tmp_2*tmp_220 + tmp_219*tmp_5;
      real_t tmp_224 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_225 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_226 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_227 = tmp_21*tmp_225 + tmp_224*tmp_7 + tmp_226*tmp_27 - 1.0/4.0;
      real_t tmp_228 = tmp_224*tmp_34 + tmp_225*tmp_35 + tmp_226*tmp_36 - 1.0/4.0;
      real_t tmp_229 = tmp_224*tmp_38 + tmp_225*tmp_39 + tmp_226*tmp_40 - 1.0/4.0;
      real_t tmp_230 = tmp_0*tmp_227 + tmp_1*tmp_228 + tmp_229*tmp_4;
      real_t tmp_231 = tmp_10*tmp_227 + tmp_12*tmp_228 + tmp_229*tmp_8;
      real_t tmp_232 = tmp_11*tmp_227 + tmp_2*tmp_229 + tmp_228*tmp_5;
      real_t tmp_233 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_234 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_235 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_236 = tmp_21*tmp_234 + tmp_233*tmp_7 + tmp_235*tmp_27 - 1.0/4.0;
      real_t tmp_237 = tmp_233*tmp_34 + tmp_234*tmp_35 + tmp_235*tmp_36 - 1.0/4.0;
      real_t tmp_238 = tmp_233*tmp_38 + tmp_234*tmp_39 + tmp_235*tmp_40 - 1.0/4.0;
      real_t tmp_239 = tmp_0*tmp_236 + tmp_1*tmp_237 + tmp_238*tmp_4;
      real_t tmp_240 = tmp_10*tmp_236 + tmp_12*tmp_237 + tmp_238*tmp_8;
      real_t tmp_241 = tmp_11*tmp_236 + tmp_2*tmp_238 + tmp_237*tmp_5;
      real_t a_0_0 = 0.019202922745021479*tmp_61*(-tmp_104*tmp_53 - tmp_105*tmp_56 - tmp_106*tmp_58 + 14.0*tmp_60*((tmp_104*tmp_104) + (tmp_105*tmp_105) + (tmp_106*tmp_106))) + 0.020848748529055869*tmp_61*(-tmp_113*tmp_53 - tmp_114*tmp_56 - tmp_115*tmp_58 + 14.0*tmp_60*((tmp_113*tmp_113) + (tmp_114*tmp_114) + (tmp_115*tmp_115))) + 0.019202922745021479*tmp_61*(-tmp_122*tmp_53 - tmp_123*tmp_56 - tmp_124*tmp_58 + 14.0*tmp_60*((tmp_122*tmp_122) + (tmp_123*tmp_123) + (tmp_124*tmp_124))) + 0.020848748529055869*tmp_61*(-tmp_131*tmp_53 - tmp_132*tmp_56 - tmp_133*tmp_58 + 14.0*tmp_60*((tmp_131*tmp_131) + (tmp_132*tmp_132) + (tmp_133*tmp_133))) + 0.019202922745021479*tmp_61*(-tmp_140*tmp_53 - tmp_141*tmp_56 - tmp_142*tmp_58 + 14.0*tmp_60*((tmp_140*tmp_140) + (tmp_141*tmp_141) + (tmp_142*tmp_142))) + 0.020848748529055869*tmp_61*(-tmp_149*tmp_53 - tmp_150*tmp_56 - tmp_151*tmp_58 + 14.0*tmp_60*((tmp_149*tmp_149) + (tmp_150*tmp_150) + (tmp_151*tmp_151))) + 0.019202922745021479*tmp_61*(-tmp_158*tmp_53 - tmp_159*tmp_56 - tmp_160*tmp_58 + 14.0*tmp_60*((tmp_158*tmp_158) + (tmp_159*tmp_159) + (tmp_160*tmp_160))) + 0.042507265838595799*tmp_61*(-tmp_167*tmp_53 - tmp_168*tmp_56 - tmp_169*tmp_58 + 14.0*tmp_60*((tmp_167*tmp_167) + (tmp_168*tmp_168) + (tmp_169*tmp_169))) + 0.020848748529055869*tmp_61*(-tmp_176*tmp_53 - tmp_177*tmp_56 - tmp_178*tmp_58 + 14.0*tmp_60*((tmp_176*tmp_176) + (tmp_177*tmp_177) + (tmp_178*tmp_178))) + 0.0068572537431980923*tmp_61*(-tmp_185*tmp_53 - tmp_186*tmp_56 - tmp_187*tmp_58 + 14.0*tmp_60*((tmp_185*tmp_185) + (tmp_186*tmp_186) + (tmp_187*tmp_187))) + 0.037198804536718075*tmp_61*(-tmp_194*tmp_53 - tmp_195*tmp_56 - tmp_196*tmp_58 + 14.0*tmp_60*((tmp_194*tmp_194) + (tmp_195*tmp_195) + (tmp_196*tmp_196))) + 0.042507265838595799*tmp_61*(-tmp_203*tmp_53 - tmp_204*tmp_56 - tmp_205*tmp_58 + 14.0*tmp_60*((tmp_203*tmp_203) + (tmp_204*tmp_204) + (tmp_205*tmp_205))) + 0.0068572537431980923*tmp_61*(-tmp_212*tmp_53 - tmp_213*tmp_56 - tmp_214*tmp_58 + 14.0*tmp_60*((tmp_212*tmp_212) + (tmp_213*tmp_213) + (tmp_214*tmp_214))) + 0.037198804536718075*tmp_61*(-tmp_221*tmp_53 - tmp_222*tmp_56 - tmp_223*tmp_58 + 14.0*tmp_60*((tmp_221*tmp_221) + (tmp_222*tmp_222) + (tmp_223*tmp_223))) + 0.042507265838595799*tmp_61*(-tmp_230*tmp_53 - tmp_231*tmp_56 - tmp_232*tmp_58 + 14.0*tmp_60*((tmp_230*tmp_230) + (tmp_231*tmp_231) + (tmp_232*tmp_232))) + 0.019202922745021479*tmp_61*(-tmp_239*tmp_53 - tmp_240*tmp_56 - tmp_241*tmp_58 + 14.0*tmp_60*((tmp_239*tmp_239) + (tmp_240*tmp_240) + (tmp_241*tmp_241))) + 0.0068572537431980923*tmp_61*(-tmp_42*tmp_53 - tmp_54*tmp_56 - tmp_57*tmp_58 + 14.0*tmp_60*((tmp_42*tmp_42) + (tmp_54*tmp_54) + (tmp_57*tmp_57))) + 0.037198804536718075*tmp_61*(-tmp_53*tmp_68 - tmp_56*tmp_69 - tmp_58*tmp_70 + 14.0*tmp_60*((tmp_68*tmp_68) + (tmp_69*tmp_69) + (tmp_70*tmp_70))) + 0.020848748529055869*tmp_61*(-tmp_53*tmp_77 - tmp_56*tmp_78 - tmp_58*tmp_79 + 14.0*tmp_60*((tmp_77*tmp_77) + (tmp_78*tmp_78) + (tmp_79*tmp_79))) + 0.019202922745021479*tmp_61*(-tmp_53*tmp_86 - tmp_56*tmp_87 - tmp_58*tmp_88 + 14.0*tmp_60*((tmp_86*tmp_86) + (tmp_87*tmp_87) + (tmp_88*tmp_88))) + 0.020848748529055869*tmp_61*(-tmp_53*tmp_95 - tmp_56*tmp_96 - tmp_58*tmp_97 + 14.0*tmp_60*((tmp_95*tmp_95) + (tmp_96*tmp_96) + (tmp_97*tmp_97)));
      elMat( 0, 0) = a_0_0;
   }




void integrateFacetCoupling3D( const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementInner,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElementOuter,
                                                        const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&,
                                                        const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
                                                        const DGBasisInfo&                                       trialBasis,
                                                        const DGBasisInfo&                                       testBasis,
                                                        int                                                      trialDegree,
                                                        int                                                      testDegree,
                                                        Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElementInner[0]( 0 );
   const auto p_affine_0_1 = coordsElementInner[0]( 1 );
   const auto p_affine_0_2 = coordsElementInner[0]( 2 );

   const auto p_affine_1_0 = coordsElementInner[1]( 0 );
   const auto p_affine_1_1 = coordsElementInner[1]( 1 );
   const auto p_affine_1_2 = coordsElementInner[1]( 2 );

   const auto p_affine_2_0 = coordsElementInner[2]( 0 );
   const auto p_affine_2_1 = coordsElementInner[2]( 1 );
   const auto p_affine_2_2 = coordsElementInner[2]( 2 );

   const auto p_affine_3_0 = coordsElementInner[3]( 0 );
   const auto p_affine_3_1 = coordsElementInner[3]( 1 );
   const auto p_affine_3_2 = coordsElementInner[3]( 2 );

   const auto p_affine_4_0 = coordsElementOuter[0]( 0 );
   const auto p_affine_4_1 = coordsElementOuter[0]( 1 );
   const auto p_affine_4_2 = coordsElementOuter[0]( 2 );

   const auto p_affine_5_0 = coordsElementOuter[1]( 0 );
   const auto p_affine_5_1 = coordsElementOuter[1]( 1 );
   const auto p_affine_5_2 = coordsElementOuter[1]( 2 );

   const auto p_affine_6_0 = coordsElementOuter[2]( 0 );
   const auto p_affine_6_1 = coordsElementOuter[2]( 1 );
   const auto p_affine_6_2 = coordsElementOuter[2]( 2 );

   const auto p_affine_7_0 = coordsElementOuter[3]( 0 );
   const auto p_affine_7_1 = coordsElementOuter[3]( 1 );
   const auto p_affine_7_2 = coordsElementOuter[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = 0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18;
      real_t tmp_20 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_21 = tmp_15*(tmp_19 + tmp_20);
      real_t tmp_22 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_23 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_24 = -tmp_23;
      real_t tmp_25 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_26 = 0.031405749086161582*tmp_24 + 0.93718850182767688*tmp_25;
      real_t tmp_27 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_28 = tmp_15*(tmp_26 + tmp_27);
      real_t tmp_29 = -tmp_12 + tmp_7;
      real_t tmp_30 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_31 = -tmp_30;
      real_t tmp_32 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_33 = 0.031405749086161582*tmp_31 + 0.93718850182767688*tmp_32;
      real_t tmp_34 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_35 = tmp_15*(tmp_33 + tmp_34);
      real_t tmp_36 = tmp_21*tmp_5 + tmp_22*tmp_28 + tmp_29*tmp_35 - 1.0/4.0;
      real_t tmp_37 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_38 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_39 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_40 = tmp_21*tmp_37 + tmp_28*tmp_38 + tmp_35*tmp_39 - 1.0/4.0;
      real_t tmp_41 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_42 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_43 = tmp_11 - tmp_14;
      real_t tmp_44 = tmp_21*tmp_41 + tmp_28*tmp_42 + tmp_35*tmp_43 - 1.0/4.0;
      real_t tmp_45 = tmp_0*tmp_36 + tmp_1*tmp_40 + tmp_3*tmp_44;
      real_t tmp_46 = -p_affine_4_0 + p_affine_5_0;
      real_t tmp_47 = -p_affine_4_1 + p_affine_6_1;
      real_t tmp_48 = -p_affine_4_2 + p_affine_7_2;
      real_t tmp_49 = tmp_47*tmp_48;
      real_t tmp_50 = -p_affine_4_1 + p_affine_7_1;
      real_t tmp_51 = -p_affine_4_2 + p_affine_6_2;
      real_t tmp_52 = tmp_50*tmp_51;
      real_t tmp_53 = tmp_49 - tmp_52;
      real_t tmp_54 = -p_affine_4_2 + p_affine_5_2;
      real_t tmp_55 = -p_affine_4_0 + p_affine_6_0;
      real_t tmp_56 = tmp_50*tmp_55;
      real_t tmp_57 = -p_affine_4_1 + p_affine_5_1;
      real_t tmp_58 = -p_affine_4_0 + p_affine_7_0;
      real_t tmp_59 = tmp_48*tmp_55;
      real_t tmp_60 = tmp_47*tmp_58;
      real_t tmp_61 = 1.0 / (tmp_46*tmp_49 - tmp_46*tmp_52 + tmp_51*tmp_57*tmp_58 + tmp_54*tmp_56 - tmp_54*tmp_60 - tmp_57*tmp_59);
      real_t tmp_62 = 1.0*tmp_61;
      real_t tmp_63 = -tmp_48*tmp_57 + tmp_50*tmp_54;
      real_t tmp_64 = -tmp_47*tmp_54 + tmp_51*tmp_57;
      real_t tmp_65 = tmp_51*tmp_58 - tmp_59;
      real_t tmp_66 = 0.5*tmp_61;
      real_t tmp_67 = tmp_46*tmp_66;
      real_t tmp_68 = tmp_46*tmp_48 - tmp_54*tmp_58;
      real_t tmp_69 = tmp_55*tmp_66;
      real_t tmp_70 = -tmp_46*tmp_51 + tmp_54*tmp_55;
      real_t tmp_71 = tmp_58*tmp_66;
      real_t tmp_72 = tmp_53*tmp_66;
      real_t tmp_73 = tmp_63*tmp_66;
      real_t tmp_74 = tmp_64*tmp_66;
      real_t tmp_75 = tmp_47*tmp_73 + tmp_50*tmp_74 + tmp_57*tmp_72 + tmp_65*tmp_67 + tmp_68*tmp_69 + tmp_70*tmp_71;
      real_t tmp_76 = tmp_56 - tmp_60;
      real_t tmp_77 = -tmp_46*tmp_50 + tmp_57*tmp_58;
      real_t tmp_78 = tmp_46*tmp_47 - tmp_55*tmp_57;
      real_t tmp_79 = tmp_48*tmp_74 + tmp_51*tmp_73 + tmp_54*tmp_72 + tmp_67*tmp_76 + tmp_69*tmp_77 + tmp_71*tmp_78;
      real_t tmp_80 = 1.0*p_affine_13_0*(tmp_46*tmp_53*tmp_62 + tmp_55*tmp_62*tmp_63 + tmp_58*tmp_62*tmp_64) + 1.0*p_affine_13_1*tmp_75 + 1.0*p_affine_13_2*tmp_79;
      real_t tmp_81 = tmp_10*tmp_40 + tmp_36*tmp_8 + tmp_44*tmp_6;
      real_t tmp_82 = tmp_47*tmp_66*tmp_77 + tmp_48*tmp_66*tmp_70 + tmp_50*tmp_66*tmp_78 + tmp_51*tmp_66*tmp_68 + tmp_54*tmp_65*tmp_66 + tmp_57*tmp_66*tmp_76;
      real_t tmp_83 = 1.0*p_affine_13_0*tmp_79 + 1.0*p_affine_13_1*tmp_82 + 1.0*p_affine_13_2*(tmp_48*tmp_62*tmp_78 + tmp_51*tmp_62*tmp_77 + tmp_54*tmp_62*tmp_76);
      real_t tmp_84 = tmp_2*tmp_44 + tmp_36*tmp_9 + tmp_4*tmp_40;
      real_t tmp_85 = 1.0*p_affine_13_0*tmp_75 + 1.0*p_affine_13_1*(tmp_47*tmp_62*tmp_68 + tmp_50*tmp_62*tmp_70 + tmp_57*tmp_62*tmp_65) + 1.0*p_affine_13_2*tmp_82;
      real_t tmp_86 = -p_affine_4_2 + p_affine_8_2;
      real_t tmp_87 = tmp_61*(tmp_19 + tmp_86);
      real_t tmp_88 = -p_affine_4_1 + p_affine_8_1;
      real_t tmp_89 = tmp_61*(tmp_26 + tmp_88);
      real_t tmp_90 = -p_affine_4_0 + p_affine_8_0;
      real_t tmp_91 = tmp_61*(tmp_33 + tmp_90);
      real_t tmp_92 = tmp_53*tmp_91 + tmp_65*tmp_89 + tmp_76*tmp_87 - 1.0/4.0;
      real_t tmp_93 = tmp_63*tmp_91 + tmp_68*tmp_89 + tmp_77*tmp_87 - 1.0/4.0;
      real_t tmp_94 = tmp_64*tmp_91 + tmp_70*tmp_89 + tmp_78*tmp_87 - 1.0/4.0;
      real_t tmp_95 = tmp_46*tmp_92 + tmp_55*tmp_93 + tmp_58*tmp_94;
      real_t tmp_96 = 1.0*tmp_15;
      real_t tmp_97 = 0.5*tmp_15;
      real_t tmp_98 = tmp_0*tmp_97;
      real_t tmp_99 = tmp_1*tmp_97;
      real_t tmp_100 = tmp_3*tmp_97;
      real_t tmp_101 = tmp_29*tmp_97;
      real_t tmp_102 = tmp_39*tmp_97;
      real_t tmp_103 = tmp_43*tmp_97;
      real_t tmp_104 = tmp_100*tmp_42 + tmp_101*tmp_9 + tmp_102*tmp_4 + tmp_103*tmp_2 + tmp_22*tmp_98 + tmp_38*tmp_99;
      real_t tmp_105 = tmp_10*tmp_102 + tmp_100*tmp_41 + tmp_101*tmp_8 + tmp_103*tmp_6 + tmp_37*tmp_99 + tmp_5*tmp_98;
      real_t tmp_106 = p_affine_13_0*(tmp_0*tmp_29*tmp_96 + tmp_1*tmp_39*tmp_96 + tmp_3*tmp_43*tmp_96) + p_affine_13_1*tmp_104 + p_affine_13_2*tmp_105;
      real_t tmp_107 = tmp_48*tmp_94 + tmp_51*tmp_93 + tmp_54*tmp_92;
      real_t tmp_108 = tmp_10*tmp_38*tmp_97 + tmp_2*tmp_41*tmp_97 + tmp_22*tmp_8*tmp_97 + tmp_37*tmp_4*tmp_97 + tmp_42*tmp_6*tmp_97 + tmp_5*tmp_9*tmp_97;
      real_t tmp_109 = p_affine_13_0*tmp_105 + p_affine_13_1*tmp_108 + p_affine_13_2*(tmp_10*tmp_37*tmp_96 + tmp_41*tmp_6*tmp_96 + tmp_5*tmp_8*tmp_96);
      real_t tmp_110 = tmp_47*tmp_93 + tmp_50*tmp_94 + tmp_57*tmp_92;
      real_t tmp_111 = p_affine_13_0*tmp_104 + p_affine_13_1*(tmp_2*tmp_42*tmp_96 + tmp_22*tmp_9*tmp_96 + tmp_38*tmp_4*tmp_96) + p_affine_13_2*tmp_108;
      real_t tmp_112 = (std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)*std::abs(tmp_16*tmp_25 - tmp_18*tmp_23)) + (std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)*std::abs(tmp_16*tmp_32 - tmp_18*tmp_30)) + (std::abs(tmp_23*tmp_32 - tmp_25*tmp_30)*std::abs(tmp_23*tmp_32 - tmp_25*tmp_30));
      real_t tmp_113 = 14.0*std::pow(tmp_112, -0.25);
      real_t tmp_114 = 1.0*std::pow(tmp_112, 1.0/2.0);
      real_t tmp_115 = 0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18;
      real_t tmp_116 = tmp_15*(tmp_115 + tmp_20);
      real_t tmp_117 = 0.19601935860219369*tmp_24 + 0.60796128279561268*tmp_25;
      real_t tmp_118 = tmp_15*(tmp_117 + tmp_27);
      real_t tmp_119 = 0.19601935860219369*tmp_31 + 0.60796128279561268*tmp_32;
      real_t tmp_120 = tmp_15*(tmp_119 + tmp_34);
      real_t tmp_121 = tmp_116*tmp_5 + tmp_118*tmp_22 + tmp_120*tmp_29 - 1.0/4.0;
      real_t tmp_122 = tmp_116*tmp_37 + tmp_118*tmp_38 + tmp_120*tmp_39 - 1.0/4.0;
      real_t tmp_123 = tmp_116*tmp_41 + tmp_118*tmp_42 + tmp_120*tmp_43 - 1.0/4.0;
      real_t tmp_124 = tmp_0*tmp_121 + tmp_1*tmp_122 + tmp_123*tmp_3;
      real_t tmp_125 = tmp_10*tmp_122 + tmp_121*tmp_8 + tmp_123*tmp_6;
      real_t tmp_126 = tmp_121*tmp_9 + tmp_122*tmp_4 + tmp_123*tmp_2;
      real_t tmp_127 = tmp_61*(tmp_115 + tmp_86);
      real_t tmp_128 = tmp_61*(tmp_117 + tmp_88);
      real_t tmp_129 = tmp_61*(tmp_119 + tmp_90);
      real_t tmp_130 = tmp_127*tmp_76 + tmp_128*tmp_65 + tmp_129*tmp_53 - 1.0/4.0;
      real_t tmp_131 = tmp_127*tmp_77 + tmp_128*tmp_68 + tmp_129*tmp_63 - 1.0/4.0;
      real_t tmp_132 = tmp_127*tmp_78 + tmp_128*tmp_70 + tmp_129*tmp_64 - 1.0/4.0;
      real_t tmp_133 = tmp_130*tmp_46 + tmp_131*tmp_55 + tmp_132*tmp_58;
      real_t tmp_134 = tmp_130*tmp_54 + tmp_131*tmp_51 + tmp_132*tmp_48;
      real_t tmp_135 = tmp_130*tmp_57 + tmp_131*tmp_47 + tmp_132*tmp_50;
      real_t tmp_136 = 0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_137 = tmp_15*(tmp_136 + tmp_20);
      real_t tmp_138 = 0.37605877282253791*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_139 = tmp_15*(tmp_138 + tmp_27);
      real_t tmp_140 = 0.37605877282253791*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_141 = tmp_15*(tmp_140 + tmp_34);
      real_t tmp_142 = tmp_137*tmp_5 + tmp_139*tmp_22 + tmp_141*tmp_29 - 1.0/4.0;
      real_t tmp_143 = tmp_137*tmp_37 + tmp_139*tmp_38 + tmp_141*tmp_39 - 1.0/4.0;
      real_t tmp_144 = tmp_137*tmp_41 + tmp_139*tmp_42 + tmp_141*tmp_43 - 1.0/4.0;
      real_t tmp_145 = tmp_0*tmp_142 + tmp_1*tmp_143 + tmp_144*tmp_3;
      real_t tmp_146 = tmp_10*tmp_143 + tmp_142*tmp_8 + tmp_144*tmp_6;
      real_t tmp_147 = tmp_142*tmp_9 + tmp_143*tmp_4 + tmp_144*tmp_2;
      real_t tmp_148 = tmp_61*(tmp_136 + tmp_86);
      real_t tmp_149 = tmp_61*(tmp_138 + tmp_88);
      real_t tmp_150 = tmp_61*(tmp_140 + tmp_90);
      real_t tmp_151 = tmp_148*tmp_76 + tmp_149*tmp_65 + tmp_150*tmp_53 - 1.0/4.0;
      real_t tmp_152 = tmp_148*tmp_77 + tmp_149*tmp_68 + tmp_150*tmp_63 - 1.0/4.0;
      real_t tmp_153 = tmp_148*tmp_78 + tmp_149*tmp_70 + tmp_150*tmp_64 - 1.0/4.0;
      real_t tmp_154 = tmp_151*tmp_46 + tmp_152*tmp_55 + tmp_153*tmp_58;
      real_t tmp_155 = tmp_151*tmp_54 + tmp_152*tmp_51 + tmp_153*tmp_48;
      real_t tmp_156 = tmp_151*tmp_57 + tmp_152*tmp_47 + tmp_153*tmp_50;
      real_t tmp_157 = 0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_158 = tmp_15*(tmp_157 + tmp_20);
      real_t tmp_159 = 0.78764240869137092*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_160 = tmp_15*(tmp_159 + tmp_27);
      real_t tmp_161 = 0.78764240869137092*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_162 = tmp_15*(tmp_161 + tmp_34);
      real_t tmp_163 = tmp_158*tmp_5 + tmp_160*tmp_22 + tmp_162*tmp_29 - 1.0/4.0;
      real_t tmp_164 = tmp_158*tmp_37 + tmp_160*tmp_38 + tmp_162*tmp_39 - 1.0/4.0;
      real_t tmp_165 = tmp_158*tmp_41 + tmp_160*tmp_42 + tmp_162*tmp_43 - 1.0/4.0;
      real_t tmp_166 = tmp_0*tmp_163 + tmp_1*tmp_164 + tmp_165*tmp_3;
      real_t tmp_167 = tmp_10*tmp_164 + tmp_163*tmp_8 + tmp_165*tmp_6;
      real_t tmp_168 = tmp_163*tmp_9 + tmp_164*tmp_4 + tmp_165*tmp_2;
      real_t tmp_169 = tmp_61*(tmp_157 + tmp_86);
      real_t tmp_170 = tmp_61*(tmp_159 + tmp_88);
      real_t tmp_171 = tmp_61*(tmp_161 + tmp_90);
      real_t tmp_172 = tmp_169*tmp_76 + tmp_170*tmp_65 + tmp_171*tmp_53 - 1.0/4.0;
      real_t tmp_173 = tmp_169*tmp_77 + tmp_170*tmp_68 + tmp_171*tmp_63 - 1.0/4.0;
      real_t tmp_174 = tmp_169*tmp_78 + tmp_170*tmp_70 + tmp_171*tmp_64 - 1.0/4.0;
      real_t tmp_175 = tmp_172*tmp_46 + tmp_173*tmp_55 + tmp_174*tmp_58;
      real_t tmp_176 = tmp_172*tmp_54 + tmp_173*tmp_51 + tmp_174*tmp_48;
      real_t tmp_177 = tmp_172*tmp_57 + tmp_173*tmp_47 + tmp_174*tmp_50;
      real_t tmp_178 = 0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_179 = tmp_15*(tmp_178 + tmp_20);
      real_t tmp_180 = 0.58463275527740355*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_181 = tmp_15*(tmp_180 + tmp_27);
      real_t tmp_182 = 0.58463275527740355*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_183 = tmp_15*(tmp_182 + tmp_34);
      real_t tmp_184 = tmp_179*tmp_5 + tmp_181*tmp_22 + tmp_183*tmp_29 - 1.0/4.0;
      real_t tmp_185 = tmp_179*tmp_37 + tmp_181*tmp_38 + tmp_183*tmp_39 - 1.0/4.0;
      real_t tmp_186 = tmp_179*tmp_41 + tmp_181*tmp_42 + tmp_183*tmp_43 - 1.0/4.0;
      real_t tmp_187 = tmp_0*tmp_184 + tmp_1*tmp_185 + tmp_186*tmp_3;
      real_t tmp_188 = tmp_10*tmp_185 + tmp_184*tmp_8 + tmp_186*tmp_6;
      real_t tmp_189 = tmp_184*tmp_9 + tmp_185*tmp_4 + tmp_186*tmp_2;
      real_t tmp_190 = tmp_61*(tmp_178 + tmp_86);
      real_t tmp_191 = tmp_61*(tmp_180 + tmp_88);
      real_t tmp_192 = tmp_61*(tmp_182 + tmp_90);
      real_t tmp_193 = tmp_190*tmp_76 + tmp_191*tmp_65 + tmp_192*tmp_53 - 1.0/4.0;
      real_t tmp_194 = tmp_190*tmp_77 + tmp_191*tmp_68 + tmp_192*tmp_63 - 1.0/4.0;
      real_t tmp_195 = tmp_190*tmp_78 + tmp_191*tmp_70 + tmp_192*tmp_64 - 1.0/4.0;
      real_t tmp_196 = tmp_193*tmp_46 + tmp_194*tmp_55 + tmp_195*tmp_58;
      real_t tmp_197 = tmp_193*tmp_54 + tmp_194*tmp_51 + tmp_195*tmp_48;
      real_t tmp_198 = tmp_193*tmp_57 + tmp_194*tmp_47 + tmp_195*tmp_50;
      real_t tmp_199 = 0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_200 = tmp_15*(tmp_199 + tmp_20);
      real_t tmp_201 = 0.041227165399737475*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_202 = tmp_15*(tmp_201 + tmp_27);
      real_t tmp_203 = 0.041227165399737475*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_204 = tmp_15*(tmp_203 + tmp_34);
      real_t tmp_205 = tmp_200*tmp_5 + tmp_202*tmp_22 + tmp_204*tmp_29 - 1.0/4.0;
      real_t tmp_206 = tmp_200*tmp_37 + tmp_202*tmp_38 + tmp_204*tmp_39 - 1.0/4.0;
      real_t tmp_207 = tmp_200*tmp_41 + tmp_202*tmp_42 + tmp_204*tmp_43 - 1.0/4.0;
      real_t tmp_208 = tmp_0*tmp_205 + tmp_1*tmp_206 + tmp_207*tmp_3;
      real_t tmp_209 = tmp_10*tmp_206 + tmp_205*tmp_8 + tmp_207*tmp_6;
      real_t tmp_210 = tmp_2*tmp_207 + tmp_205*tmp_9 + tmp_206*tmp_4;
      real_t tmp_211 = tmp_61*(tmp_199 + tmp_86);
      real_t tmp_212 = tmp_61*(tmp_201 + tmp_88);
      real_t tmp_213 = tmp_61*(tmp_203 + tmp_90);
      real_t tmp_214 = tmp_211*tmp_76 + tmp_212*tmp_65 + tmp_213*tmp_53 - 1.0/4.0;
      real_t tmp_215 = tmp_211*tmp_77 + tmp_212*tmp_68 + tmp_213*tmp_63 - 1.0/4.0;
      real_t tmp_216 = tmp_211*tmp_78 + tmp_212*tmp_70 + tmp_213*tmp_64 - 1.0/4.0;
      real_t tmp_217 = tmp_214*tmp_46 + tmp_215*tmp_55 + tmp_216*tmp_58;
      real_t tmp_218 = tmp_214*tmp_54 + tmp_215*tmp_51 + tmp_216*tmp_48;
      real_t tmp_219 = tmp_214*tmp_57 + tmp_215*tmp_47 + tmp_216*tmp_50;
      real_t tmp_220 = 0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_221 = tmp_15*(tmp_20 + tmp_220);
      real_t tmp_222 = 0.039308471900058539*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_223 = tmp_15*(tmp_222 + tmp_27);
      real_t tmp_224 = 0.039308471900058539*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_225 = tmp_15*(tmp_224 + tmp_34);
      real_t tmp_226 = tmp_22*tmp_223 + tmp_221*tmp_5 + tmp_225*tmp_29 - 1.0/4.0;
      real_t tmp_227 = tmp_221*tmp_37 + tmp_223*tmp_38 + tmp_225*tmp_39 - 1.0/4.0;
      real_t tmp_228 = tmp_221*tmp_41 + tmp_223*tmp_42 + tmp_225*tmp_43 - 1.0/4.0;
      real_t tmp_229 = tmp_0*tmp_226 + tmp_1*tmp_227 + tmp_228*tmp_3;
      real_t tmp_230 = tmp_10*tmp_227 + tmp_226*tmp_8 + tmp_228*tmp_6;
      real_t tmp_231 = tmp_2*tmp_228 + tmp_226*tmp_9 + tmp_227*tmp_4;
      real_t tmp_232 = tmp_61*(tmp_220 + tmp_86);
      real_t tmp_233 = tmp_61*(tmp_222 + tmp_88);
      real_t tmp_234 = tmp_61*(tmp_224 + tmp_90);
      real_t tmp_235 = tmp_232*tmp_76 + tmp_233*tmp_65 + tmp_234*tmp_53 - 1.0/4.0;
      real_t tmp_236 = tmp_232*tmp_77 + tmp_233*tmp_68 + tmp_234*tmp_63 - 1.0/4.0;
      real_t tmp_237 = tmp_232*tmp_78 + tmp_233*tmp_70 + tmp_234*tmp_64 - 1.0/4.0;
      real_t tmp_238 = tmp_235*tmp_46 + tmp_236*tmp_55 + tmp_237*tmp_58;
      real_t tmp_239 = tmp_235*tmp_54 + tmp_236*tmp_51 + tmp_237*tmp_48;
      real_t tmp_240 = tmp_235*tmp_57 + tmp_236*tmp_47 + tmp_237*tmp_50;
      real_t tmp_241 = 0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_242 = tmp_15*(tmp_20 + tmp_241);
      real_t tmp_243 = 0.78764240869137092*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_244 = tmp_15*(tmp_243 + tmp_27);
      real_t tmp_245 = 0.78764240869137092*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_246 = tmp_15*(tmp_245 + tmp_34);
      real_t tmp_247 = tmp_22*tmp_244 + tmp_242*tmp_5 + tmp_246*tmp_29 - 1.0/4.0;
      real_t tmp_248 = tmp_242*tmp_37 + tmp_244*tmp_38 + tmp_246*tmp_39 - 1.0/4.0;
      real_t tmp_249 = tmp_242*tmp_41 + tmp_244*tmp_42 + tmp_246*tmp_43 - 1.0/4.0;
      real_t tmp_250 = tmp_0*tmp_247 + tmp_1*tmp_248 + tmp_249*tmp_3;
      real_t tmp_251 = tmp_10*tmp_248 + tmp_247*tmp_8 + tmp_249*tmp_6;
      real_t tmp_252 = tmp_2*tmp_249 + tmp_247*tmp_9 + tmp_248*tmp_4;
      real_t tmp_253 = tmp_61*(tmp_241 + tmp_86);
      real_t tmp_254 = tmp_61*(tmp_243 + tmp_88);
      real_t tmp_255 = tmp_61*(tmp_245 + tmp_90);
      real_t tmp_256 = tmp_253*tmp_76 + tmp_254*tmp_65 + tmp_255*tmp_53 - 1.0/4.0;
      real_t tmp_257 = tmp_253*tmp_77 + tmp_254*tmp_68 + tmp_255*tmp_63 - 1.0/4.0;
      real_t tmp_258 = tmp_253*tmp_78 + tmp_254*tmp_70 + tmp_255*tmp_64 - 1.0/4.0;
      real_t tmp_259 = tmp_256*tmp_46 + tmp_257*tmp_55 + tmp_258*tmp_58;
      real_t tmp_260 = tmp_256*tmp_54 + tmp_257*tmp_51 + tmp_258*tmp_48;
      real_t tmp_261 = tmp_256*tmp_57 + tmp_257*tmp_47 + tmp_258*tmp_50;
      real_t tmp_262 = 0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18;
      real_t tmp_263 = tmp_15*(tmp_20 + tmp_262);
      real_t tmp_264 = 0.58463275527740355*tmp_24 + 0.039308471900058539*tmp_25;
      real_t tmp_265 = tmp_15*(tmp_264 + tmp_27);
      real_t tmp_266 = 0.58463275527740355*tmp_31 + 0.039308471900058539*tmp_32;
      real_t tmp_267 = tmp_15*(tmp_266 + tmp_34);
      real_t tmp_268 = tmp_22*tmp_265 + tmp_263*tmp_5 + tmp_267*tmp_29 - 1.0/4.0;
      real_t tmp_269 = tmp_263*tmp_37 + tmp_265*tmp_38 + tmp_267*tmp_39 - 1.0/4.0;
      real_t tmp_270 = tmp_263*tmp_41 + tmp_265*tmp_42 + tmp_267*tmp_43 - 1.0/4.0;
      real_t tmp_271 = tmp_0*tmp_268 + tmp_1*tmp_269 + tmp_270*tmp_3;
      real_t tmp_272 = tmp_10*tmp_269 + tmp_268*tmp_8 + tmp_270*tmp_6;
      real_t tmp_273 = tmp_2*tmp_270 + tmp_268*tmp_9 + tmp_269*tmp_4;
      real_t tmp_274 = tmp_61*(tmp_262 + tmp_86);
      real_t tmp_275 = tmp_61*(tmp_264 + tmp_88);
      real_t tmp_276 = tmp_61*(tmp_266 + tmp_90);
      real_t tmp_277 = tmp_274*tmp_76 + tmp_275*tmp_65 + tmp_276*tmp_53 - 1.0/4.0;
      real_t tmp_278 = tmp_274*tmp_77 + tmp_275*tmp_68 + tmp_276*tmp_63 - 1.0/4.0;
      real_t tmp_279 = tmp_274*tmp_78 + tmp_275*tmp_70 + tmp_276*tmp_64 - 1.0/4.0;
      real_t tmp_280 = tmp_277*tmp_46 + tmp_278*tmp_55 + tmp_279*tmp_58;
      real_t tmp_281 = tmp_277*tmp_54 + tmp_278*tmp_51 + tmp_279*tmp_48;
      real_t tmp_282 = tmp_277*tmp_57 + tmp_278*tmp_47 + tmp_279*tmp_50;
      real_t tmp_283 = 0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18;
      real_t tmp_284 = tmp_15*(tmp_20 + tmp_283);
      real_t tmp_285 = 0.1711304259088916*tmp_24 + 0.78764240869137092*tmp_25;
      real_t tmp_286 = tmp_15*(tmp_27 + tmp_285);
      real_t tmp_287 = 0.1711304259088916*tmp_31 + 0.78764240869137092*tmp_32;
      real_t tmp_288 = tmp_15*(tmp_287 + tmp_34);
      real_t tmp_289 = tmp_22*tmp_286 + tmp_284*tmp_5 + tmp_288*tmp_29 - 1.0/4.0;
      real_t tmp_290 = tmp_284*tmp_37 + tmp_286*tmp_38 + tmp_288*tmp_39 - 1.0/4.0;
      real_t tmp_291 = tmp_284*tmp_41 + tmp_286*tmp_42 + tmp_288*tmp_43 - 1.0/4.0;
      real_t tmp_292 = tmp_0*tmp_289 + tmp_1*tmp_290 + tmp_291*tmp_3;
      real_t tmp_293 = tmp_10*tmp_290 + tmp_289*tmp_8 + tmp_291*tmp_6;
      real_t tmp_294 = tmp_2*tmp_291 + tmp_289*tmp_9 + tmp_290*tmp_4;
      real_t tmp_295 = tmp_61*(tmp_283 + tmp_86);
      real_t tmp_296 = tmp_61*(tmp_285 + tmp_88);
      real_t tmp_297 = tmp_61*(tmp_287 + tmp_90);
      real_t tmp_298 = tmp_295*tmp_76 + tmp_296*tmp_65 + tmp_297*tmp_53 - 1.0/4.0;
      real_t tmp_299 = tmp_295*tmp_77 + tmp_296*tmp_68 + tmp_297*tmp_63 - 1.0/4.0;
      real_t tmp_300 = tmp_295*tmp_78 + tmp_296*tmp_70 + tmp_297*tmp_64 - 1.0/4.0;
      real_t tmp_301 = tmp_298*tmp_46 + tmp_299*tmp_55 + tmp_300*tmp_58;
      real_t tmp_302 = tmp_298*tmp_54 + tmp_299*tmp_51 + tmp_300*tmp_48;
      real_t tmp_303 = tmp_298*tmp_57 + tmp_299*tmp_47 + tmp_300*tmp_50;
      real_t tmp_304 = 0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18;
      real_t tmp_305 = tmp_15*(tmp_20 + tmp_304);
      real_t tmp_306 = 0.37605877282253791*tmp_24 + 0.58463275527740355*tmp_25;
      real_t tmp_307 = tmp_15*(tmp_27 + tmp_306);
      real_t tmp_308 = 0.37605877282253791*tmp_31 + 0.58463275527740355*tmp_32;
      real_t tmp_309 = tmp_15*(tmp_308 + tmp_34);
      real_t tmp_310 = tmp_22*tmp_307 + tmp_29*tmp_309 + tmp_305*tmp_5 - 1.0/4.0;
      real_t tmp_311 = tmp_305*tmp_37 + tmp_307*tmp_38 + tmp_309*tmp_39 - 1.0/4.0;
      real_t tmp_312 = tmp_305*tmp_41 + tmp_307*tmp_42 + tmp_309*tmp_43 - 1.0/4.0;
      real_t tmp_313 = tmp_0*tmp_310 + tmp_1*tmp_311 + tmp_3*tmp_312;
      real_t tmp_314 = tmp_10*tmp_311 + tmp_310*tmp_8 + tmp_312*tmp_6;
      real_t tmp_315 = tmp_2*tmp_312 + tmp_310*tmp_9 + tmp_311*tmp_4;
      real_t tmp_316 = tmp_61*(tmp_304 + tmp_86);
      real_t tmp_317 = tmp_61*(tmp_306 + tmp_88);
      real_t tmp_318 = tmp_61*(tmp_308 + tmp_90);
      real_t tmp_319 = tmp_316*tmp_76 + tmp_317*tmp_65 + tmp_318*tmp_53 - 1.0/4.0;
      real_t tmp_320 = tmp_316*tmp_77 + tmp_317*tmp_68 + tmp_318*tmp_63 - 1.0/4.0;
      real_t tmp_321 = tmp_316*tmp_78 + tmp_317*tmp_70 + tmp_318*tmp_64 - 1.0/4.0;
      real_t tmp_322 = tmp_319*tmp_46 + tmp_320*tmp_55 + tmp_321*tmp_58;
      real_t tmp_323 = tmp_319*tmp_54 + tmp_320*tmp_51 + tmp_321*tmp_48;
      real_t tmp_324 = tmp_319*tmp_57 + tmp_320*tmp_47 + tmp_321*tmp_50;
      real_t tmp_325 = 0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18;
      real_t tmp_326 = tmp_15*(tmp_20 + tmp_325);
      real_t tmp_327 = 0.041227165399737475*tmp_24 + 0.1711304259088916*tmp_25;
      real_t tmp_328 = tmp_15*(tmp_27 + tmp_327);
      real_t tmp_329 = 0.041227165399737475*tmp_31 + 0.1711304259088916*tmp_32;
      real_t tmp_330 = tmp_15*(tmp_329 + tmp_34);
      real_t tmp_331 = tmp_22*tmp_328 + tmp_29*tmp_330 + tmp_326*tmp_5 - 1.0/4.0;
      real_t tmp_332 = tmp_326*tmp_37 + tmp_328*tmp_38 + tmp_330*tmp_39 - 1.0/4.0;
      real_t tmp_333 = tmp_326*tmp_41 + tmp_328*tmp_42 + tmp_330*tmp_43 - 1.0/4.0;
      real_t tmp_334 = tmp_0*tmp_331 + tmp_1*tmp_332 + tmp_3*tmp_333;
      real_t tmp_335 = tmp_10*tmp_332 + tmp_331*tmp_8 + tmp_333*tmp_6;
      real_t tmp_336 = tmp_2*tmp_333 + tmp_331*tmp_9 + tmp_332*tmp_4;
      real_t tmp_337 = tmp_61*(tmp_325 + tmp_86);
      real_t tmp_338 = tmp_61*(tmp_327 + tmp_88);
      real_t tmp_339 = tmp_61*(tmp_329 + tmp_90);
      real_t tmp_340 = tmp_337*tmp_76 + tmp_338*tmp_65 + tmp_339*tmp_53 - 1.0/4.0;
      real_t tmp_341 = tmp_337*tmp_77 + tmp_338*tmp_68 + tmp_339*tmp_63 - 1.0/4.0;
      real_t tmp_342 = tmp_337*tmp_78 + tmp_338*tmp_70 + tmp_339*tmp_64 - 1.0/4.0;
      real_t tmp_343 = tmp_340*tmp_46 + tmp_341*tmp_55 + tmp_342*tmp_58;
      real_t tmp_344 = tmp_340*tmp_54 + tmp_341*tmp_51 + tmp_342*tmp_48;
      real_t tmp_345 = tmp_340*tmp_57 + tmp_341*tmp_47 + tmp_342*tmp_50;
      real_t tmp_346 = 0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18;
      real_t tmp_347 = tmp_15*(tmp_20 + tmp_346);
      real_t tmp_348 = 0.40446199974765351*tmp_24 + 0.19107600050469298*tmp_25;
      real_t tmp_349 = tmp_15*(tmp_27 + tmp_348);
      real_t tmp_350 = 0.40446199974765351*tmp_31 + 0.19107600050469298*tmp_32;
      real_t tmp_351 = tmp_15*(tmp_34 + tmp_350);
      real_t tmp_352 = tmp_22*tmp_349 + tmp_29*tmp_351 + tmp_347*tmp_5 - 1.0/4.0;
      real_t tmp_353 = tmp_347*tmp_37 + tmp_349*tmp_38 + tmp_351*tmp_39 - 1.0/4.0;
      real_t tmp_354 = tmp_347*tmp_41 + tmp_349*tmp_42 + tmp_351*tmp_43 - 1.0/4.0;
      real_t tmp_355 = tmp_0*tmp_352 + tmp_1*tmp_353 + tmp_3*tmp_354;
      real_t tmp_356 = tmp_10*tmp_353 + tmp_352*tmp_8 + tmp_354*tmp_6;
      real_t tmp_357 = tmp_2*tmp_354 + tmp_352*tmp_9 + tmp_353*tmp_4;
      real_t tmp_358 = tmp_61*(tmp_346 + tmp_86);
      real_t tmp_359 = tmp_61*(tmp_348 + tmp_88);
      real_t tmp_360 = tmp_61*(tmp_350 + tmp_90);
      real_t tmp_361 = tmp_358*tmp_76 + tmp_359*tmp_65 + tmp_360*tmp_53 - 1.0/4.0;
      real_t tmp_362 = tmp_358*tmp_77 + tmp_359*tmp_68 + tmp_360*tmp_63 - 1.0/4.0;
      real_t tmp_363 = tmp_358*tmp_78 + tmp_359*tmp_70 + tmp_360*tmp_64 - 1.0/4.0;
      real_t tmp_364 = tmp_361*tmp_46 + tmp_362*tmp_55 + tmp_363*tmp_58;
      real_t tmp_365 = tmp_361*tmp_54 + tmp_362*tmp_51 + tmp_363*tmp_48;
      real_t tmp_366 = tmp_361*tmp_57 + tmp_362*tmp_47 + tmp_363*tmp_50;
      real_t tmp_367 = 0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18;
      real_t tmp_368 = tmp_15*(tmp_20 + tmp_367);
      real_t tmp_369 = 0.039308471900058539*tmp_24 + 0.37605877282253791*tmp_25;
      real_t tmp_370 = tmp_15*(tmp_27 + tmp_369);
      real_t tmp_371 = 0.039308471900058539*tmp_31 + 0.37605877282253791*tmp_32;
      real_t tmp_372 = tmp_15*(tmp_34 + tmp_371);
      real_t tmp_373 = tmp_22*tmp_370 + tmp_29*tmp_372 + tmp_368*tmp_5 - 1.0/4.0;
      real_t tmp_374 = tmp_368*tmp_37 + tmp_370*tmp_38 + tmp_372*tmp_39 - 1.0/4.0;
      real_t tmp_375 = tmp_368*tmp_41 + tmp_370*tmp_42 + tmp_372*tmp_43 - 1.0/4.0;
      real_t tmp_376 = tmp_0*tmp_373 + tmp_1*tmp_374 + tmp_3*tmp_375;
      real_t tmp_377 = tmp_10*tmp_374 + tmp_373*tmp_8 + tmp_375*tmp_6;
      real_t tmp_378 = tmp_2*tmp_375 + tmp_373*tmp_9 + tmp_374*tmp_4;
      real_t tmp_379 = tmp_61*(tmp_367 + tmp_86);
      real_t tmp_380 = tmp_61*(tmp_369 + tmp_88);
      real_t tmp_381 = tmp_61*(tmp_371 + tmp_90);
      real_t tmp_382 = tmp_379*tmp_76 + tmp_380*tmp_65 + tmp_381*tmp_53 - 1.0/4.0;
      real_t tmp_383 = tmp_379*tmp_77 + tmp_380*tmp_68 + tmp_381*tmp_63 - 1.0/4.0;
      real_t tmp_384 = tmp_379*tmp_78 + tmp_380*tmp_70 + tmp_381*tmp_64 - 1.0/4.0;
      real_t tmp_385 = tmp_382*tmp_46 + tmp_383*tmp_55 + tmp_384*tmp_58;
      real_t tmp_386 = tmp_382*tmp_54 + tmp_383*tmp_51 + tmp_384*tmp_48;
      real_t tmp_387 = tmp_382*tmp_57 + tmp_383*tmp_47 + tmp_384*tmp_50;
      real_t tmp_388 = 0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_389 = tmp_15*(tmp_20 + tmp_388);
      real_t tmp_390 = 0.93718850182767688*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_391 = tmp_15*(tmp_27 + tmp_390);
      real_t tmp_392 = 0.93718850182767688*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_393 = tmp_15*(tmp_34 + tmp_392);
      real_t tmp_394 = tmp_22*tmp_391 + tmp_29*tmp_393 + tmp_389*tmp_5 - 1.0/4.0;
      real_t tmp_395 = tmp_37*tmp_389 + tmp_38*tmp_391 + tmp_39*tmp_393 - 1.0/4.0;
      real_t tmp_396 = tmp_389*tmp_41 + tmp_391*tmp_42 + tmp_393*tmp_43 - 1.0/4.0;
      real_t tmp_397 = tmp_0*tmp_394 + tmp_1*tmp_395 + tmp_3*tmp_396;
      real_t tmp_398 = tmp_10*tmp_395 + tmp_394*tmp_8 + tmp_396*tmp_6;
      real_t tmp_399 = tmp_2*tmp_396 + tmp_394*tmp_9 + tmp_395*tmp_4;
      real_t tmp_400 = tmp_61*(tmp_388 + tmp_86);
      real_t tmp_401 = tmp_61*(tmp_390 + tmp_88);
      real_t tmp_402 = tmp_61*(tmp_392 + tmp_90);
      real_t tmp_403 = tmp_400*tmp_76 + tmp_401*tmp_65 + tmp_402*tmp_53 - 1.0/4.0;
      real_t tmp_404 = tmp_400*tmp_77 + tmp_401*tmp_68 + tmp_402*tmp_63 - 1.0/4.0;
      real_t tmp_405 = tmp_400*tmp_78 + tmp_401*tmp_70 + tmp_402*tmp_64 - 1.0/4.0;
      real_t tmp_406 = tmp_403*tmp_46 + tmp_404*tmp_55 + tmp_405*tmp_58;
      real_t tmp_407 = tmp_403*tmp_54 + tmp_404*tmp_51 + tmp_405*tmp_48;
      real_t tmp_408 = tmp_403*tmp_57 + tmp_404*tmp_47 + tmp_405*tmp_50;
      real_t tmp_409 = 0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_410 = tmp_15*(tmp_20 + tmp_409);
      real_t tmp_411 = 0.60796128279561268*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_412 = tmp_15*(tmp_27 + tmp_411);
      real_t tmp_413 = 0.60796128279561268*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_414 = tmp_15*(tmp_34 + tmp_413);
      real_t tmp_415 = tmp_22*tmp_412 + tmp_29*tmp_414 + tmp_410*tmp_5 - 1.0/4.0;
      real_t tmp_416 = tmp_37*tmp_410 + tmp_38*tmp_412 + tmp_39*tmp_414 - 1.0/4.0;
      real_t tmp_417 = tmp_41*tmp_410 + tmp_412*tmp_42 + tmp_414*tmp_43 - 1.0/4.0;
      real_t tmp_418 = tmp_0*tmp_415 + tmp_1*tmp_416 + tmp_3*tmp_417;
      real_t tmp_419 = tmp_10*tmp_416 + tmp_415*tmp_8 + tmp_417*tmp_6;
      real_t tmp_420 = tmp_2*tmp_417 + tmp_4*tmp_416 + tmp_415*tmp_9;
      real_t tmp_421 = tmp_61*(tmp_409 + tmp_86);
      real_t tmp_422 = tmp_61*(tmp_411 + tmp_88);
      real_t tmp_423 = tmp_61*(tmp_413 + tmp_90);
      real_t tmp_424 = tmp_421*tmp_76 + tmp_422*tmp_65 + tmp_423*tmp_53 - 1.0/4.0;
      real_t tmp_425 = tmp_421*tmp_77 + tmp_422*tmp_68 + tmp_423*tmp_63 - 1.0/4.0;
      real_t tmp_426 = tmp_421*tmp_78 + tmp_422*tmp_70 + tmp_423*tmp_64 - 1.0/4.0;
      real_t tmp_427 = tmp_424*tmp_46 + tmp_425*tmp_55 + tmp_426*tmp_58;
      real_t tmp_428 = tmp_424*tmp_54 + tmp_425*tmp_51 + tmp_426*tmp_48;
      real_t tmp_429 = tmp_424*tmp_57 + tmp_425*tmp_47 + tmp_426*tmp_50;
      real_t tmp_430 = 0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_431 = tmp_15*(tmp_20 + tmp_430);
      real_t tmp_432 = 0.19107600050469298*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_433 = tmp_15*(tmp_27 + tmp_432);
      real_t tmp_434 = 0.19107600050469298*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_435 = tmp_15*(tmp_34 + tmp_434);
      real_t tmp_436 = tmp_22*tmp_433 + tmp_29*tmp_435 + tmp_431*tmp_5 - 1.0/4.0;
      real_t tmp_437 = tmp_37*tmp_431 + tmp_38*tmp_433 + tmp_39*tmp_435 - 1.0/4.0;
      real_t tmp_438 = tmp_41*tmp_431 + tmp_42*tmp_433 + tmp_43*tmp_435 - 1.0/4.0;
      real_t tmp_439 = tmp_0*tmp_436 + tmp_1*tmp_437 + tmp_3*tmp_438;
      real_t tmp_440 = tmp_10*tmp_437 + tmp_436*tmp_8 + tmp_438*tmp_6;
      real_t tmp_441 = tmp_2*tmp_438 + tmp_4*tmp_437 + tmp_436*tmp_9;
      real_t tmp_442 = tmp_61*(tmp_430 + tmp_86);
      real_t tmp_443 = tmp_61*(tmp_432 + tmp_88);
      real_t tmp_444 = tmp_61*(tmp_434 + tmp_90);
      real_t tmp_445 = tmp_442*tmp_76 + tmp_443*tmp_65 + tmp_444*tmp_53 - 1.0/4.0;
      real_t tmp_446 = tmp_442*tmp_77 + tmp_443*tmp_68 + tmp_444*tmp_63 - 1.0/4.0;
      real_t tmp_447 = tmp_442*tmp_78 + tmp_443*tmp_70 + tmp_444*tmp_64 - 1.0/4.0;
      real_t tmp_448 = tmp_445*tmp_46 + tmp_446*tmp_55 + tmp_447*tmp_58;
      real_t tmp_449 = tmp_445*tmp_54 + tmp_446*tmp_51 + tmp_447*tmp_48;
      real_t tmp_450 = tmp_445*tmp_57 + tmp_446*tmp_47 + tmp_447*tmp_50;
      real_t tmp_451 = 0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18;
      real_t tmp_452 = tmp_15*(tmp_20 + tmp_451);
      real_t tmp_453 = 0.031405749086161582*tmp_24 + 0.031405749086161582*tmp_25;
      real_t tmp_454 = tmp_15*(tmp_27 + tmp_453);
      real_t tmp_455 = 0.031405749086161582*tmp_31 + 0.031405749086161582*tmp_32;
      real_t tmp_456 = tmp_15*(tmp_34 + tmp_455);
      real_t tmp_457 = tmp_22*tmp_454 + tmp_29*tmp_456 + tmp_452*tmp_5 - 1.0/4.0;
      real_t tmp_458 = tmp_37*tmp_452 + tmp_38*tmp_454 + tmp_39*tmp_456 - 1.0/4.0;
      real_t tmp_459 = tmp_41*tmp_452 + tmp_42*tmp_454 + tmp_43*tmp_456 - 1.0/4.0;
      real_t tmp_460 = tmp_0*tmp_457 + tmp_1*tmp_458 + tmp_3*tmp_459;
      real_t tmp_461 = tmp_10*tmp_458 + tmp_457*tmp_8 + tmp_459*tmp_6;
      real_t tmp_462 = tmp_2*tmp_459 + tmp_4*tmp_458 + tmp_457*tmp_9;
      real_t tmp_463 = tmp_61*(tmp_451 + tmp_86);
      real_t tmp_464 = tmp_61*(tmp_453 + tmp_88);
      real_t tmp_465 = tmp_61*(tmp_455 + tmp_90);
      real_t tmp_466 = tmp_463*tmp_76 + tmp_464*tmp_65 + tmp_465*tmp_53 - 1.0/4.0;
      real_t tmp_467 = tmp_463*tmp_77 + tmp_464*tmp_68 + tmp_465*tmp_63 - 1.0/4.0;
      real_t tmp_468 = tmp_463*tmp_78 + tmp_464*tmp_70 + tmp_465*tmp_64 - 1.0/4.0;
      real_t tmp_469 = tmp_46*tmp_466 + tmp_467*tmp_55 + tmp_468*tmp_58;
      real_t tmp_470 = tmp_466*tmp_54 + tmp_467*tmp_51 + tmp_468*tmp_48;
      real_t tmp_471 = tmp_466*tmp_57 + tmp_467*tmp_47 + tmp_468*tmp_50;
      real_t tmp_472 = 0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18;
      real_t tmp_473 = tmp_15*(tmp_20 + tmp_472);
      real_t tmp_474 = 0.19601935860219369*tmp_24 + 0.19601935860219369*tmp_25;
      real_t tmp_475 = tmp_15*(tmp_27 + tmp_474);
      real_t tmp_476 = 0.19601935860219369*tmp_31 + 0.19601935860219369*tmp_32;
      real_t tmp_477 = tmp_15*(tmp_34 + tmp_476);
      real_t tmp_478 = tmp_22*tmp_475 + tmp_29*tmp_477 + tmp_473*tmp_5 - 1.0/4.0;
      real_t tmp_479 = tmp_37*tmp_473 + tmp_38*tmp_475 + tmp_39*tmp_477 - 1.0/4.0;
      real_t tmp_480 = tmp_41*tmp_473 + tmp_42*tmp_475 + tmp_43*tmp_477 - 1.0/4.0;
      real_t tmp_481 = tmp_0*tmp_478 + tmp_1*tmp_479 + tmp_3*tmp_480;
      real_t tmp_482 = tmp_10*tmp_479 + tmp_478*tmp_8 + tmp_480*tmp_6;
      real_t tmp_483 = tmp_2*tmp_480 + tmp_4*tmp_479 + tmp_478*tmp_9;
      real_t tmp_484 = tmp_61*(tmp_472 + tmp_86);
      real_t tmp_485 = tmp_61*(tmp_474 + tmp_88);
      real_t tmp_486 = tmp_61*(tmp_476 + tmp_90);
      real_t tmp_487 = tmp_484*tmp_76 + tmp_485*tmp_65 + tmp_486*tmp_53 - 1.0/4.0;
      real_t tmp_488 = tmp_484*tmp_77 + tmp_485*tmp_68 + tmp_486*tmp_63 - 1.0/4.0;
      real_t tmp_489 = tmp_484*tmp_78 + tmp_485*tmp_70 + tmp_486*tmp_64 - 1.0/4.0;
      real_t tmp_490 = tmp_46*tmp_487 + tmp_488*tmp_55 + tmp_489*tmp_58;
      real_t tmp_491 = tmp_48*tmp_489 + tmp_487*tmp_54 + tmp_488*tmp_51;
      real_t tmp_492 = tmp_47*tmp_488 + tmp_487*tmp_57 + tmp_489*tmp_50;
      real_t tmp_493 = 0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18;
      real_t tmp_494 = tmp_15*(tmp_20 + tmp_493);
      real_t tmp_495 = 0.40446199974765351*tmp_24 + 0.40446199974765351*tmp_25;
      real_t tmp_496 = tmp_15*(tmp_27 + tmp_495);
      real_t tmp_497 = 0.40446199974765351*tmp_31 + 0.40446199974765351*tmp_32;
      real_t tmp_498 = tmp_15*(tmp_34 + tmp_497);
      real_t tmp_499 = tmp_22*tmp_496 + tmp_29*tmp_498 + tmp_494*tmp_5 - 1.0/4.0;
      real_t tmp_500 = tmp_37*tmp_494 + tmp_38*tmp_496 + tmp_39*tmp_498 - 1.0/4.0;
      real_t tmp_501 = tmp_41*tmp_494 + tmp_42*tmp_496 + tmp_43*tmp_498 - 1.0/4.0;
      real_t tmp_502 = tmp_0*tmp_499 + tmp_1*tmp_500 + tmp_3*tmp_501;
      real_t tmp_503 = tmp_10*tmp_500 + tmp_499*tmp_8 + tmp_501*tmp_6;
      real_t tmp_504 = tmp_2*tmp_501 + tmp_4*tmp_500 + tmp_499*tmp_9;
      real_t tmp_505 = tmp_61*(tmp_493 + tmp_86);
      real_t tmp_506 = tmp_61*(tmp_495 + tmp_88);
      real_t tmp_507 = tmp_61*(tmp_497 + tmp_90);
      real_t tmp_508 = tmp_505*tmp_76 + tmp_506*tmp_65 + tmp_507*tmp_53 - 1.0/4.0;
      real_t tmp_509 = tmp_505*tmp_77 + tmp_506*tmp_68 + tmp_507*tmp_63 - 1.0/4.0;
      real_t tmp_510 = tmp_505*tmp_78 + tmp_506*tmp_70 + tmp_507*tmp_64 - 1.0/4.0;
      real_t tmp_511 = tmp_46*tmp_508 + tmp_509*tmp_55 + tmp_510*tmp_58;
      real_t tmp_512 = tmp_48*tmp_510 + tmp_508*tmp_54 + tmp_509*tmp_51;
      real_t tmp_513 = tmp_47*tmp_509 + tmp_50*tmp_510 + tmp_508*tmp_57;
      real_t tmp_514 = 0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18;
      real_t tmp_515 = tmp_15*(tmp_20 + tmp_514);
      real_t tmp_516 = 0.1711304259088916*tmp_24 + 0.041227165399737475*tmp_25;
      real_t tmp_517 = tmp_15*(tmp_27 + tmp_516);
      real_t tmp_518 = 0.1711304259088916*tmp_31 + 0.041227165399737475*tmp_32;
      real_t tmp_519 = tmp_15*(tmp_34 + tmp_518);
      real_t tmp_520 = tmp_22*tmp_517 + tmp_29*tmp_519 + tmp_5*tmp_515 - 1.0/4.0;
      real_t tmp_521 = tmp_37*tmp_515 + tmp_38*tmp_517 + tmp_39*tmp_519 - 1.0/4.0;
      real_t tmp_522 = tmp_41*tmp_515 + tmp_42*tmp_517 + tmp_43*tmp_519 - 1.0/4.0;
      real_t tmp_523 = tmp_0*tmp_520 + tmp_1*tmp_521 + tmp_3*tmp_522;
      real_t tmp_524 = tmp_10*tmp_521 + tmp_520*tmp_8 + tmp_522*tmp_6;
      real_t tmp_525 = tmp_2*tmp_522 + tmp_4*tmp_521 + tmp_520*tmp_9;
      real_t tmp_526 = tmp_61*(tmp_514 + tmp_86);
      real_t tmp_527 = tmp_61*(tmp_516 + tmp_88);
      real_t tmp_528 = tmp_61*(tmp_518 + tmp_90);
      real_t tmp_529 = tmp_526*tmp_76 + tmp_527*tmp_65 + tmp_528*tmp_53 - 1.0/4.0;
      real_t tmp_530 = tmp_526*tmp_77 + tmp_527*tmp_68 + tmp_528*tmp_63 - 1.0/4.0;
      real_t tmp_531 = tmp_526*tmp_78 + tmp_527*tmp_70 + tmp_528*tmp_64 - 1.0/4.0;
      real_t tmp_532 = tmp_46*tmp_529 + tmp_530*tmp_55 + tmp_531*tmp_58;
      real_t tmp_533 = tmp_48*tmp_531 + tmp_51*tmp_530 + tmp_529*tmp_54;
      real_t tmp_534 = tmp_47*tmp_530 + tmp_50*tmp_531 + tmp_529*tmp_57;
      real_t a_0_0 = 0.037198804536718075*tmp_114*(tmp_106*tmp_133 + tmp_109*tmp_134 + tmp_111*tmp_135 - tmp_113*(tmp_124*tmp_133 + tmp_125*tmp_134 + tmp_126*tmp_135) - tmp_124*tmp_80 - tmp_125*tmp_83 - tmp_126*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_154 + tmp_109*tmp_155 + tmp_111*tmp_156 - tmp_113*(tmp_145*tmp_154 + tmp_146*tmp_155 + tmp_147*tmp_156) - tmp_145*tmp_80 - tmp_146*tmp_83 - tmp_147*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_175 + tmp_109*tmp_176 + tmp_111*tmp_177 - tmp_113*(tmp_166*tmp_175 + tmp_167*tmp_176 + tmp_168*tmp_177) - tmp_166*tmp_80 - tmp_167*tmp_83 - tmp_168*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_196 + tmp_109*tmp_197 + tmp_111*tmp_198 - tmp_113*(tmp_187*tmp_196 + tmp_188*tmp_197 + tmp_189*tmp_198) - tmp_187*tmp_80 - tmp_188*tmp_83 - tmp_189*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_217 + tmp_109*tmp_218 + tmp_111*tmp_219 - tmp_113*(tmp_208*tmp_217 + tmp_209*tmp_218 + tmp_210*tmp_219) - tmp_208*tmp_80 - tmp_209*tmp_83 - tmp_210*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_238 + tmp_109*tmp_239 + tmp_111*tmp_240 - tmp_113*(tmp_229*tmp_238 + tmp_230*tmp_239 + tmp_231*tmp_240) - tmp_229*tmp_80 - tmp_230*tmp_83 - tmp_231*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_259 + tmp_109*tmp_260 + tmp_111*tmp_261 - tmp_113*(tmp_250*tmp_259 + tmp_251*tmp_260 + tmp_252*tmp_261) - tmp_250*tmp_80 - tmp_251*tmp_83 - tmp_252*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_280 + tmp_109*tmp_281 + tmp_111*tmp_282 - tmp_113*(tmp_271*tmp_280 + tmp_272*tmp_281 + tmp_273*tmp_282) - tmp_271*tmp_80 - tmp_272*tmp_83 - tmp_273*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_301 + tmp_109*tmp_302 + tmp_111*tmp_303 - tmp_113*(tmp_292*tmp_301 + tmp_293*tmp_302 + tmp_294*tmp_303) - tmp_292*tmp_80 - tmp_293*tmp_83 - tmp_294*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_322 + tmp_109*tmp_323 + tmp_111*tmp_324 - tmp_113*(tmp_313*tmp_322 + tmp_314*tmp_323 + tmp_315*tmp_324) - tmp_313*tmp_80 - tmp_314*tmp_83 - tmp_315*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_343 + tmp_109*tmp_344 + tmp_111*tmp_345 - tmp_113*(tmp_334*tmp_343 + tmp_335*tmp_344 + tmp_336*tmp_345) - tmp_334*tmp_80 - tmp_335*tmp_83 - tmp_336*tmp_85) + 0.042507265838595799*tmp_114*(tmp_106*tmp_364 + tmp_109*tmp_365 + tmp_111*tmp_366 - tmp_113*(tmp_355*tmp_364 + tmp_356*tmp_365 + tmp_357*tmp_366) - tmp_355*tmp_80 - tmp_356*tmp_83 - tmp_357*tmp_85) + 0.020848748529055869*tmp_114*(tmp_106*tmp_385 + tmp_109*tmp_386 + tmp_111*tmp_387 - tmp_113*(tmp_376*tmp_385 + tmp_377*tmp_386 + tmp_378*tmp_387) - tmp_376*tmp_80 - tmp_377*tmp_83 - tmp_378*tmp_85) + 0.0068572537431980923*tmp_114*(tmp_106*tmp_406 + tmp_109*tmp_407 + tmp_111*tmp_408 - tmp_113*(tmp_397*tmp_406 + tmp_398*tmp_407 + tmp_399*tmp_408) - tmp_397*tmp_80 - tmp_398*tmp_83 - tmp_399*tmp_85) + 0.037198804536718075*tmp_114*(tmp_106*tmp_427 + tmp_109*tmp_428 + tmp_111*tmp_429 - tmp_113*(tmp_418*tmp_427 + tmp_419*tmp_428 + tmp_420*tmp_429) - tmp_418*tmp_80 - tmp_419*tmp_83 - tmp_420*tmp_85) + 0.042507265838595799*tmp_114*(tmp_106*tmp_448 + tmp_109*tmp_449 + tmp_111*tmp_450 - tmp_113*(tmp_439*tmp_448 + tmp_440*tmp_449 + tmp_441*tmp_450) - tmp_439*tmp_80 - tmp_440*tmp_83 - tmp_441*tmp_85) + 0.0068572537431980923*tmp_114*(tmp_106*tmp_469 + tmp_109*tmp_470 + tmp_111*tmp_471 - tmp_113*(tmp_460*tmp_469 + tmp_461*tmp_470 + tmp_462*tmp_471) - tmp_460*tmp_80 - tmp_461*tmp_83 - tmp_462*tmp_85) + 0.037198804536718075*tmp_114*(tmp_106*tmp_490 + tmp_109*tmp_491 + tmp_111*tmp_492 - tmp_113*(tmp_481*tmp_490 + tmp_482*tmp_491 + tmp_483*tmp_492) - tmp_481*tmp_80 - tmp_482*tmp_83 - tmp_483*tmp_85) + 0.042507265838595799*tmp_114*(tmp_106*tmp_511 + tmp_109*tmp_512 + tmp_111*tmp_513 - tmp_113*(tmp_502*tmp_511 + tmp_503*tmp_512 + tmp_504*tmp_513) - tmp_502*tmp_80 - tmp_503*tmp_83 - tmp_504*tmp_85) + 0.019202922745021479*tmp_114*(tmp_106*tmp_532 + tmp_109*tmp_533 + tmp_111*tmp_534 - tmp_113*(tmp_523*tmp_532 + tmp_524*tmp_533 + tmp_525*tmp_534) - tmp_523*tmp_80 - tmp_524*tmp_83 - tmp_525*tmp_85) + 0.0068572537431980923*tmp_114*(tmp_106*tmp_95 + tmp_107*tmp_109 + tmp_110*tmp_111 - tmp_113*(tmp_107*tmp_81 + tmp_110*tmp_84 + tmp_45*tmp_95) - tmp_45*tmp_80 - tmp_81*tmp_83 - tmp_84*tmp_85);
      elMat( 0, 0) = a_0_0;
}



void integrateFacetDirichletBoundary3D(
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsElement,
    const std::vector< Eigen::Matrix< real_t, 3, 1 > >& coordsFacet,
    const Eigen::Matrix< real_t, 3, 1 >&,
    const Eigen::Matrix< real_t, 3, 1 >&                     outwardNormal,
    const DGBasisInfo&                                       trialBasis,
    const DGBasisInfo&                                       testBasis,
    int                                                      trialDegree,
    int                                                      testDegree,
    Eigen::Matrix< real_t, Eigen::Dynamic, Eigen::Dynamic >& elMat ) const
{
   elMat.resize( Eigen::Index( testBasis.numDoFsPerElement( 3, uint_c( testDegree ) ) ),
                 Eigen::Index( trialBasis.numDoFsPerElement( 3, uint_c( trialDegree ) ) ) );

   const auto p_affine_0_0 = coordsElement[0]( 0 );
   const auto p_affine_0_1 = coordsElement[0]( 1 );
   const auto p_affine_0_2 = coordsElement[0]( 2 );

   const auto p_affine_1_0 = coordsElement[1]( 0 );
   const auto p_affine_1_1 = coordsElement[1]( 1 );
   const auto p_affine_1_2 = coordsElement[1]( 2 );

   const auto p_affine_2_0 = coordsElement[2]( 0 );
   const auto p_affine_2_1 = coordsElement[2]( 1 );
   const auto p_affine_2_2 = coordsElement[2]( 2 );

   const auto p_affine_3_0 = coordsElement[3]( 0 );
   const auto p_affine_3_1 = coordsElement[3]( 1 );
   const auto p_affine_3_2 = coordsElement[3]( 2 );

   const auto p_affine_8_0 = coordsFacet[0]( 0 );
   const auto p_affine_8_1 = coordsFacet[0]( 1 );
   const auto p_affine_8_2 = coordsFacet[0]( 2 );

   const auto p_affine_9_0 = coordsFacet[1]( 0 );
   const auto p_affine_9_1 = coordsFacet[1]( 1 );
   const auto p_affine_9_2 = coordsFacet[1]( 2 );

   const auto p_affine_10_0 = coordsFacet[2]( 0 );
   const auto p_affine_10_1 = coordsFacet[2]( 1 );
   const auto p_affine_10_2 = coordsFacet[2]( 2 );

   const auto p_affine_13_0 = outwardNormal( 0 );
   const auto p_affine_13_1 = outwardNormal( 1 );
   const auto p_affine_13_2 = outwardNormal( 2 );


      real_t tmp_0 = -p_affine_0_0 + p_affine_1_0;
      real_t tmp_1 = -p_affine_0_0 + p_affine_2_0;
      real_t tmp_2 = -p_affine_0_1 + p_affine_3_1;
      real_t tmp_3 = -p_affine_0_0 + p_affine_3_0;
      real_t tmp_4 = -p_affine_0_1 + p_affine_2_1;
      real_t tmp_5 = tmp_1*tmp_2 - tmp_3*tmp_4;
      real_t tmp_6 = -p_affine_0_2 + p_affine_3_2;
      real_t tmp_7 = tmp_4*tmp_6;
      real_t tmp_8 = -p_affine_0_2 + p_affine_1_2;
      real_t tmp_9 = -p_affine_0_1 + p_affine_1_1;
      real_t tmp_10 = -p_affine_0_2 + p_affine_2_2;
      real_t tmp_11 = tmp_10*tmp_9;
      real_t tmp_12 = tmp_10*tmp_2;
      real_t tmp_13 = tmp_6*tmp_9;
      real_t tmp_14 = tmp_4*tmp_8;
      real_t tmp_15 = 1.0 / (-tmp_0*tmp_12 + tmp_0*tmp_7 - tmp_1*tmp_13 + tmp_1*tmp_2*tmp_8 + tmp_11*tmp_3 - tmp_14*tmp_3);
      real_t tmp_16 = p_affine_8_2 - p_affine_9_2;
      real_t tmp_17 = -tmp_16;
      real_t tmp_18 = p_affine_10_2 - p_affine_8_2;
      real_t tmp_19 = -p_affine_0_2 + p_affine_8_2;
      real_t tmp_20 = tmp_15*(0.031405749086161582*tmp_17 + 0.93718850182767688*tmp_18 + tmp_19);
      real_t tmp_21 = -tmp_1*tmp_6 + tmp_10*tmp_3;
      real_t tmp_22 = p_affine_8_1 - p_affine_9_1;
      real_t tmp_23 = -tmp_22;
      real_t tmp_24 = p_affine_10_1 - p_affine_8_1;
      real_t tmp_25 = -p_affine_0_1 + p_affine_8_1;
      real_t tmp_26 = tmp_15*(0.031405749086161582*tmp_23 + 0.93718850182767688*tmp_24 + tmp_25);
      real_t tmp_27 = -tmp_12 + tmp_7;
      real_t tmp_28 = p_affine_8_0 - p_affine_9_0;
      real_t tmp_29 = -tmp_28;
      real_t tmp_30 = p_affine_10_0 - p_affine_8_0;
      real_t tmp_31 = -p_affine_0_0 + p_affine_8_0;
      real_t tmp_32 = tmp_15*(0.031405749086161582*tmp_29 + 0.93718850182767688*tmp_30 + tmp_31);
      real_t tmp_33 = tmp_20*tmp_5 + tmp_21*tmp_26 + tmp_27*tmp_32 - 1.0/4.0;
      real_t tmp_34 = -tmp_0*tmp_2 + tmp_3*tmp_9;
      real_t tmp_35 = tmp_0*tmp_6 - tmp_3*tmp_8;
      real_t tmp_36 = -tmp_13 + tmp_2*tmp_8;
      real_t tmp_37 = tmp_20*tmp_34 + tmp_26*tmp_35 + tmp_32*tmp_36 - 1.0/4.0;
      real_t tmp_38 = tmp_0*tmp_4 - tmp_1*tmp_9;
      real_t tmp_39 = -tmp_0*tmp_10 + tmp_1*tmp_8;
      real_t tmp_40 = tmp_11 - tmp_14;
      real_t tmp_41 = tmp_20*tmp_38 + tmp_26*tmp_39 + tmp_32*tmp_40 - 1.0/4.0;
      real_t tmp_42 = tmp_0*tmp_33 + tmp_1*tmp_37 + tmp_3*tmp_41;
      real_t tmp_43 = 1.0*tmp_15;
      real_t tmp_44 = 0.5*tmp_15;
      real_t tmp_45 = tmp_0*tmp_44;
      real_t tmp_46 = tmp_1*tmp_44;
      real_t tmp_47 = tmp_3*tmp_44;
      real_t tmp_48 = tmp_27*tmp_44;
      real_t tmp_49 = tmp_36*tmp_44;
      real_t tmp_50 = tmp_40*tmp_44;
      real_t tmp_51 = tmp_2*tmp_50 + tmp_21*tmp_45 + tmp_35*tmp_46 + tmp_39*tmp_47 + tmp_4*tmp_49 + tmp_48*tmp_9;
      real_t tmp_52 = tmp_10*tmp_49 + tmp_34*tmp_46 + tmp_38*tmp_47 + tmp_45*tmp_5 + tmp_48*tmp_8 + tmp_50*tmp_6;
      real_t tmp_53 = 2*p_affine_13_0*(tmp_0*tmp_27*tmp_43 + tmp_1*tmp_36*tmp_43 + tmp_3*tmp_40*tmp_43) + 2*p_affine_13_1*tmp_51 + 2*p_affine_13_2*tmp_52;
      real_t tmp_54 = tmp_10*tmp_37 + tmp_33*tmp_8 + tmp_41*tmp_6;
      real_t tmp_55 = tmp_10*tmp_35*tmp_44 + tmp_2*tmp_38*tmp_44 + tmp_21*tmp_44*tmp_8 + tmp_34*tmp_4*tmp_44 + tmp_39*tmp_44*tmp_6 + tmp_44*tmp_5*tmp_9;
      real_t tmp_56 = 2*p_affine_13_0*tmp_52 + 2*p_affine_13_1*tmp_55 + 2*p_affine_13_2*(tmp_10*tmp_34*tmp_43 + tmp_38*tmp_43*tmp_6 + tmp_43*tmp_5*tmp_8);
      real_t tmp_57 = tmp_2*tmp_41 + tmp_33*tmp_9 + tmp_37*tmp_4;
      real_t tmp_58 = 2*p_affine_13_0*tmp_51 + 2*p_affine_13_1*(tmp_2*tmp_39*tmp_43 + tmp_21*tmp_43*tmp_9 + tmp_35*tmp_4*tmp_43) + 2*p_affine_13_2*tmp_55;
      real_t tmp_59 = (std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)*std::abs(tmp_16*tmp_24 - tmp_18*tmp_22)) + (std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)*std::abs(tmp_16*tmp_30 - tmp_18*tmp_28)) + (std::abs(tmp_22*tmp_30 - tmp_24*tmp_28)*std::abs(tmp_22*tmp_30 - tmp_24*tmp_28));
      real_t tmp_60 = std::pow(tmp_59, -0.25);
      real_t tmp_61 = 2.0*std::pow(tmp_59, 1.0/2.0);
      real_t tmp_62 = tmp_15*(0.19601935860219369*tmp_17 + 0.60796128279561268*tmp_18 + tmp_19);
      real_t tmp_63 = tmp_15*(0.19601935860219369*tmp_23 + 0.60796128279561268*tmp_24 + tmp_25);
      real_t tmp_64 = tmp_15*(0.19601935860219369*tmp_29 + 0.60796128279561268*tmp_30 + tmp_31);
      real_t tmp_65 = tmp_21*tmp_63 + tmp_27*tmp_64 + tmp_5*tmp_62 - 1.0/4.0;
      real_t tmp_66 = tmp_34*tmp_62 + tmp_35*tmp_63 + tmp_36*tmp_64 - 1.0/4.0;
      real_t tmp_67 = tmp_38*tmp_62 + tmp_39*tmp_63 + tmp_40*tmp_64 - 1.0/4.0;
      real_t tmp_68 = tmp_0*tmp_65 + tmp_1*tmp_66 + tmp_3*tmp_67;
      real_t tmp_69 = tmp_10*tmp_66 + tmp_6*tmp_67 + tmp_65*tmp_8;
      real_t tmp_70 = tmp_2*tmp_67 + tmp_4*tmp_66 + tmp_65*tmp_9;
      real_t tmp_71 = tmp_15*(0.37605877282253791*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_72 = tmp_15*(0.37605877282253791*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_73 = tmp_15*(0.37605877282253791*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_74 = tmp_21*tmp_72 + tmp_27*tmp_73 + tmp_5*tmp_71 - 1.0/4.0;
      real_t tmp_75 = tmp_34*tmp_71 + tmp_35*tmp_72 + tmp_36*tmp_73 - 1.0/4.0;
      real_t tmp_76 = tmp_38*tmp_71 + tmp_39*tmp_72 + tmp_40*tmp_73 - 1.0/4.0;
      real_t tmp_77 = tmp_0*tmp_74 + tmp_1*tmp_75 + tmp_3*tmp_76;
      real_t tmp_78 = tmp_10*tmp_75 + tmp_6*tmp_76 + tmp_74*tmp_8;
      real_t tmp_79 = tmp_2*tmp_76 + tmp_4*tmp_75 + tmp_74*tmp_9;
      real_t tmp_80 = tmp_15*(0.78764240869137092*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_81 = tmp_15*(0.78764240869137092*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_82 = tmp_15*(0.78764240869137092*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_83 = tmp_21*tmp_81 + tmp_27*tmp_82 + tmp_5*tmp_80 - 1.0/4.0;
      real_t tmp_84 = tmp_34*tmp_80 + tmp_35*tmp_81 + tmp_36*tmp_82 - 1.0/4.0;
      real_t tmp_85 = tmp_38*tmp_80 + tmp_39*tmp_81 + tmp_40*tmp_82 - 1.0/4.0;
      real_t tmp_86 = tmp_0*tmp_83 + tmp_1*tmp_84 + tmp_3*tmp_85;
      real_t tmp_87 = tmp_10*tmp_84 + tmp_6*tmp_85 + tmp_8*tmp_83;
      real_t tmp_88 = tmp_2*tmp_85 + tmp_4*tmp_84 + tmp_83*tmp_9;
      real_t tmp_89 = tmp_15*(0.58463275527740355*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_90 = tmp_15*(0.58463275527740355*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_91 = tmp_15*(0.58463275527740355*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_92 = tmp_21*tmp_90 + tmp_27*tmp_91 + tmp_5*tmp_89 - 1.0/4.0;
      real_t tmp_93 = tmp_34*tmp_89 + tmp_35*tmp_90 + tmp_36*tmp_91 - 1.0/4.0;
      real_t tmp_94 = tmp_38*tmp_89 + tmp_39*tmp_90 + tmp_40*tmp_91 - 1.0/4.0;
      real_t tmp_95 = tmp_0*tmp_92 + tmp_1*tmp_93 + tmp_3*tmp_94;
      real_t tmp_96 = tmp_10*tmp_93 + tmp_6*tmp_94 + tmp_8*tmp_92;
      real_t tmp_97 = tmp_2*tmp_94 + tmp_4*tmp_93 + tmp_9*tmp_92;
      real_t tmp_98 = tmp_15*(0.041227165399737475*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_99 = tmp_15*(0.041227165399737475*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_100 = tmp_15*(0.041227165399737475*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_101 = tmp_100*tmp_27 + tmp_21*tmp_99 + tmp_5*tmp_98 - 1.0/4.0;
      real_t tmp_102 = tmp_100*tmp_36 + tmp_34*tmp_98 + tmp_35*tmp_99 - 1.0/4.0;
      real_t tmp_103 = tmp_100*tmp_40 + tmp_38*tmp_98 + tmp_39*tmp_99 - 1.0/4.0;
      real_t tmp_104 = tmp_0*tmp_101 + tmp_1*tmp_102 + tmp_103*tmp_3;
      real_t tmp_105 = tmp_10*tmp_102 + tmp_101*tmp_8 + tmp_103*tmp_6;
      real_t tmp_106 = tmp_101*tmp_9 + tmp_102*tmp_4 + tmp_103*tmp_2;
      real_t tmp_107 = tmp_15*(0.039308471900058539*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_108 = tmp_15*(0.039308471900058539*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_109 = tmp_15*(0.039308471900058539*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_110 = tmp_107*tmp_5 + tmp_108*tmp_21 + tmp_109*tmp_27 - 1.0/4.0;
      real_t tmp_111 = tmp_107*tmp_34 + tmp_108*tmp_35 + tmp_109*tmp_36 - 1.0/4.0;
      real_t tmp_112 = tmp_107*tmp_38 + tmp_108*tmp_39 + tmp_109*tmp_40 - 1.0/4.0;
      real_t tmp_113 = tmp_0*tmp_110 + tmp_1*tmp_111 + tmp_112*tmp_3;
      real_t tmp_114 = tmp_10*tmp_111 + tmp_110*tmp_8 + tmp_112*tmp_6;
      real_t tmp_115 = tmp_110*tmp_9 + tmp_111*tmp_4 + tmp_112*tmp_2;
      real_t tmp_116 = tmp_15*(0.78764240869137092*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_117 = tmp_15*(0.78764240869137092*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_118 = tmp_15*(0.78764240869137092*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_119 = tmp_116*tmp_5 + tmp_117*tmp_21 + tmp_118*tmp_27 - 1.0/4.0;
      real_t tmp_120 = tmp_116*tmp_34 + tmp_117*tmp_35 + tmp_118*tmp_36 - 1.0/4.0;
      real_t tmp_121 = tmp_116*tmp_38 + tmp_117*tmp_39 + tmp_118*tmp_40 - 1.0/4.0;
      real_t tmp_122 = tmp_0*tmp_119 + tmp_1*tmp_120 + tmp_121*tmp_3;
      real_t tmp_123 = tmp_10*tmp_120 + tmp_119*tmp_8 + tmp_121*tmp_6;
      real_t tmp_124 = tmp_119*tmp_9 + tmp_120*tmp_4 + tmp_121*tmp_2;
      real_t tmp_125 = tmp_15*(0.58463275527740355*tmp_17 + 0.039308471900058539*tmp_18 + tmp_19);
      real_t tmp_126 = tmp_15*(0.58463275527740355*tmp_23 + 0.039308471900058539*tmp_24 + tmp_25);
      real_t tmp_127 = tmp_15*(0.58463275527740355*tmp_29 + 0.039308471900058539*tmp_30 + tmp_31);
      real_t tmp_128 = tmp_125*tmp_5 + tmp_126*tmp_21 + tmp_127*tmp_27 - 1.0/4.0;
      real_t tmp_129 = tmp_125*tmp_34 + tmp_126*tmp_35 + tmp_127*tmp_36 - 1.0/4.0;
      real_t tmp_130 = tmp_125*tmp_38 + tmp_126*tmp_39 + tmp_127*tmp_40 - 1.0/4.0;
      real_t tmp_131 = tmp_0*tmp_128 + tmp_1*tmp_129 + tmp_130*tmp_3;
      real_t tmp_132 = tmp_10*tmp_129 + tmp_128*tmp_8 + tmp_130*tmp_6;
      real_t tmp_133 = tmp_128*tmp_9 + tmp_129*tmp_4 + tmp_130*tmp_2;
      real_t tmp_134 = tmp_15*(0.1711304259088916*tmp_17 + 0.78764240869137092*tmp_18 + tmp_19);
      real_t tmp_135 = tmp_15*(0.1711304259088916*tmp_23 + 0.78764240869137092*tmp_24 + tmp_25);
      real_t tmp_136 = tmp_15*(0.1711304259088916*tmp_29 + 0.78764240869137092*tmp_30 + tmp_31);
      real_t tmp_137 = tmp_134*tmp_5 + tmp_135*tmp_21 + tmp_136*tmp_27 - 1.0/4.0;
      real_t tmp_138 = tmp_134*tmp_34 + tmp_135*tmp_35 + tmp_136*tmp_36 - 1.0/4.0;
      real_t tmp_139 = tmp_134*tmp_38 + tmp_135*tmp_39 + tmp_136*tmp_40 - 1.0/4.0;
      real_t tmp_140 = tmp_0*tmp_137 + tmp_1*tmp_138 + tmp_139*tmp_3;
      real_t tmp_141 = tmp_10*tmp_138 + tmp_137*tmp_8 + tmp_139*tmp_6;
      real_t tmp_142 = tmp_137*tmp_9 + tmp_138*tmp_4 + tmp_139*tmp_2;
      real_t tmp_143 = tmp_15*(0.37605877282253791*tmp_17 + 0.58463275527740355*tmp_18 + tmp_19);
      real_t tmp_144 = tmp_15*(0.37605877282253791*tmp_23 + 0.58463275527740355*tmp_24 + tmp_25);
      real_t tmp_145 = tmp_15*(0.37605877282253791*tmp_29 + 0.58463275527740355*tmp_30 + tmp_31);
      real_t tmp_146 = tmp_143*tmp_5 + tmp_144*tmp_21 + tmp_145*tmp_27 - 1.0/4.0;
      real_t tmp_147 = tmp_143*tmp_34 + tmp_144*tmp_35 + tmp_145*tmp_36 - 1.0/4.0;
      real_t tmp_148 = tmp_143*tmp_38 + tmp_144*tmp_39 + tmp_145*tmp_40 - 1.0/4.0;
      real_t tmp_149 = tmp_0*tmp_146 + tmp_1*tmp_147 + tmp_148*tmp_3;
      real_t tmp_150 = tmp_10*tmp_147 + tmp_146*tmp_8 + tmp_148*tmp_6;
      real_t tmp_151 = tmp_146*tmp_9 + tmp_147*tmp_4 + tmp_148*tmp_2;
      real_t tmp_152 = tmp_15*(0.041227165399737475*tmp_17 + 0.1711304259088916*tmp_18 + tmp_19);
      real_t tmp_153 = tmp_15*(0.041227165399737475*tmp_23 + 0.1711304259088916*tmp_24 + tmp_25);
      real_t tmp_154 = tmp_15*(0.041227165399737475*tmp_29 + 0.1711304259088916*tmp_30 + tmp_31);
      real_t tmp_155 = tmp_152*tmp_5 + tmp_153*tmp_21 + tmp_154*tmp_27 - 1.0/4.0;
      real_t tmp_156 = tmp_152*tmp_34 + tmp_153*tmp_35 + tmp_154*tmp_36 - 1.0/4.0;
      real_t tmp_157 = tmp_152*tmp_38 + tmp_153*tmp_39 + tmp_154*tmp_40 - 1.0/4.0;
      real_t tmp_158 = tmp_0*tmp_155 + tmp_1*tmp_156 + tmp_157*tmp_3;
      real_t tmp_159 = tmp_10*tmp_156 + tmp_155*tmp_8 + tmp_157*tmp_6;
      real_t tmp_160 = tmp_155*tmp_9 + tmp_156*tmp_4 + tmp_157*tmp_2;
      real_t tmp_161 = tmp_15*(0.40446199974765351*tmp_17 + 0.19107600050469298*tmp_18 + tmp_19);
      real_t tmp_162 = tmp_15*(0.40446199974765351*tmp_23 + 0.19107600050469298*tmp_24 + tmp_25);
      real_t tmp_163 = tmp_15*(0.40446199974765351*tmp_29 + 0.19107600050469298*tmp_30 + tmp_31);
      real_t tmp_164 = tmp_161*tmp_5 + tmp_162*tmp_21 + tmp_163*tmp_27 - 1.0/4.0;
      real_t tmp_165 = tmp_161*tmp_34 + tmp_162*tmp_35 + tmp_163*tmp_36 - 1.0/4.0;
      real_t tmp_166 = tmp_161*tmp_38 + tmp_162*tmp_39 + tmp_163*tmp_40 - 1.0/4.0;
      real_t tmp_167 = tmp_0*tmp_164 + tmp_1*tmp_165 + tmp_166*tmp_3;
      real_t tmp_168 = tmp_10*tmp_165 + tmp_164*tmp_8 + tmp_166*tmp_6;
      real_t tmp_169 = tmp_164*tmp_9 + tmp_165*tmp_4 + tmp_166*tmp_2;
      real_t tmp_170 = tmp_15*(0.039308471900058539*tmp_17 + 0.37605877282253791*tmp_18 + tmp_19);
      real_t tmp_171 = tmp_15*(0.039308471900058539*tmp_23 + 0.37605877282253791*tmp_24 + tmp_25);
      real_t tmp_172 = tmp_15*(0.039308471900058539*tmp_29 + 0.37605877282253791*tmp_30 + tmp_31);
      real_t tmp_173 = tmp_170*tmp_5 + tmp_171*tmp_21 + tmp_172*tmp_27 - 1.0/4.0;
      real_t tmp_174 = tmp_170*tmp_34 + tmp_171*tmp_35 + tmp_172*tmp_36 - 1.0/4.0;
      real_t tmp_175 = tmp_170*tmp_38 + tmp_171*tmp_39 + tmp_172*tmp_40 - 1.0/4.0;
      real_t tmp_176 = tmp_0*tmp_173 + tmp_1*tmp_174 + tmp_175*tmp_3;
      real_t tmp_177 = tmp_10*tmp_174 + tmp_173*tmp_8 + tmp_175*tmp_6;
      real_t tmp_178 = tmp_173*tmp_9 + tmp_174*tmp_4 + tmp_175*tmp_2;
      real_t tmp_179 = tmp_15*(0.93718850182767688*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_180 = tmp_15*(0.93718850182767688*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_181 = tmp_15*(0.93718850182767688*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_182 = tmp_179*tmp_5 + tmp_180*tmp_21 + tmp_181*tmp_27 - 1.0/4.0;
      real_t tmp_183 = tmp_179*tmp_34 + tmp_180*tmp_35 + tmp_181*tmp_36 - 1.0/4.0;
      real_t tmp_184 = tmp_179*tmp_38 + tmp_180*tmp_39 + tmp_181*tmp_40 - 1.0/4.0;
      real_t tmp_185 = tmp_0*tmp_182 + tmp_1*tmp_183 + tmp_184*tmp_3;
      real_t tmp_186 = tmp_10*tmp_183 + tmp_182*tmp_8 + tmp_184*tmp_6;
      real_t tmp_187 = tmp_182*tmp_9 + tmp_183*tmp_4 + tmp_184*tmp_2;
      real_t tmp_188 = tmp_15*(0.60796128279561268*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_189 = tmp_15*(0.60796128279561268*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_190 = tmp_15*(0.60796128279561268*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_191 = tmp_188*tmp_5 + tmp_189*tmp_21 + tmp_190*tmp_27 - 1.0/4.0;
      real_t tmp_192 = tmp_188*tmp_34 + tmp_189*tmp_35 + tmp_190*tmp_36 - 1.0/4.0;
      real_t tmp_193 = tmp_188*tmp_38 + tmp_189*tmp_39 + tmp_190*tmp_40 - 1.0/4.0;
      real_t tmp_194 = tmp_0*tmp_191 + tmp_1*tmp_192 + tmp_193*tmp_3;
      real_t tmp_195 = tmp_10*tmp_192 + tmp_191*tmp_8 + tmp_193*tmp_6;
      real_t tmp_196 = tmp_191*tmp_9 + tmp_192*tmp_4 + tmp_193*tmp_2;
      real_t tmp_197 = tmp_15*(0.19107600050469298*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_198 = tmp_15*(0.19107600050469298*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_199 = tmp_15*(0.19107600050469298*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_200 = tmp_197*tmp_5 + tmp_198*tmp_21 + tmp_199*tmp_27 - 1.0/4.0;
      real_t tmp_201 = tmp_197*tmp_34 + tmp_198*tmp_35 + tmp_199*tmp_36 - 1.0/4.0;
      real_t tmp_202 = tmp_197*tmp_38 + tmp_198*tmp_39 + tmp_199*tmp_40 - 1.0/4.0;
      real_t tmp_203 = tmp_0*tmp_200 + tmp_1*tmp_201 + tmp_202*tmp_3;
      real_t tmp_204 = tmp_10*tmp_201 + tmp_200*tmp_8 + tmp_202*tmp_6;
      real_t tmp_205 = tmp_2*tmp_202 + tmp_200*tmp_9 + tmp_201*tmp_4;
      real_t tmp_206 = tmp_15*(0.031405749086161582*tmp_17 + 0.031405749086161582*tmp_18 + tmp_19);
      real_t tmp_207 = tmp_15*(0.031405749086161582*tmp_23 + 0.031405749086161582*tmp_24 + tmp_25);
      real_t tmp_208 = tmp_15*(0.031405749086161582*tmp_29 + 0.031405749086161582*tmp_30 + tmp_31);
      real_t tmp_209 = tmp_206*tmp_5 + tmp_207*tmp_21 + tmp_208*tmp_27 - 1.0/4.0;
      real_t tmp_210 = tmp_206*tmp_34 + tmp_207*tmp_35 + tmp_208*tmp_36 - 1.0/4.0;
      real_t tmp_211 = tmp_206*tmp_38 + tmp_207*tmp_39 + tmp_208*tmp_40 - 1.0/4.0;
      real_t tmp_212 = tmp_0*tmp_209 + tmp_1*tmp_210 + tmp_211*tmp_3;
      real_t tmp_213 = tmp_10*tmp_210 + tmp_209*tmp_8 + tmp_211*tmp_6;
      real_t tmp_214 = tmp_2*tmp_211 + tmp_209*tmp_9 + tmp_210*tmp_4;
      real_t tmp_215 = tmp_15*(0.19601935860219369*tmp_17 + 0.19601935860219369*tmp_18 + tmp_19);
      real_t tmp_216 = tmp_15*(0.19601935860219369*tmp_23 + 0.19601935860219369*tmp_24 + tmp_25);
      real_t tmp_217 = tmp_15*(0.19601935860219369*tmp_29 + 0.19601935860219369*tmp_30 + tmp_31);
      real_t tmp_218 = tmp_21*tmp_216 + tmp_215*tmp_5 + tmp_217*tmp_27 - 1.0/4.0;
      real_t tmp_219 = tmp_215*tmp_34 + tmp_216*tmp_35 + tmp_217*tmp_36 - 1.0/4.0;
      real_t tmp_220 = tmp_215*tmp_38 + tmp_216*tmp_39 + tmp_217*tmp_40 - 1.0/4.0;
      real_t tmp_221 = tmp_0*tmp_218 + tmp_1*tmp_219 + tmp_220*tmp_3;
      real_t tmp_222 = tmp_10*tmp_219 + tmp_218*tmp_8 + tmp_220*tmp_6;
      real_t tmp_223 = tmp_2*tmp_220 + tmp_218*tmp_9 + tmp_219*tmp_4;
      real_t tmp_224 = tmp_15*(0.40446199974765351*tmp_17 + 0.40446199974765351*tmp_18 + tmp_19);
      real_t tmp_225 = tmp_15*(0.40446199974765351*tmp_23 + 0.40446199974765351*tmp_24 + tmp_25);
      real_t tmp_226 = tmp_15*(0.40446199974765351*tmp_29 + 0.40446199974765351*tmp_30 + tmp_31);
      real_t tmp_227 = tmp_21*tmp_225 + tmp_224*tmp_5 + tmp_226*tmp_27 - 1.0/4.0;
      real_t tmp_228 = tmp_224*tmp_34 + tmp_225*tmp_35 + tmp_226*tmp_36 - 1.0/4.0;
      real_t tmp_229 = tmp_224*tmp_38 + tmp_225*tmp_39 + tmp_226*tmp_40 - 1.0/4.0;
      real_t tmp_230 = tmp_0*tmp_227 + tmp_1*tmp_228 + tmp_229*tmp_3;
      real_t tmp_231 = tmp_10*tmp_228 + tmp_227*tmp_8 + tmp_229*tmp_6;
      real_t tmp_232 = tmp_2*tmp_229 + tmp_227*tmp_9 + tmp_228*tmp_4;
      real_t tmp_233 = tmp_15*(0.1711304259088916*tmp_17 + 0.041227165399737475*tmp_18 + tmp_19);
      real_t tmp_234 = tmp_15*(0.1711304259088916*tmp_23 + 0.041227165399737475*tmp_24 + tmp_25);
      real_t tmp_235 = tmp_15*(0.1711304259088916*tmp_29 + 0.041227165399737475*tmp_30 + tmp_31);
      real_t tmp_236 = tmp_21*tmp_234 + tmp_233*tmp_5 + tmp_235*tmp_27 - 1.0/4.0;
      real_t tmp_237 = tmp_233*tmp_34 + tmp_234*tmp_35 + tmp_235*tmp_36 - 1.0/4.0;
      real_t tmp_238 = tmp_233*tmp_38 + tmp_234*tmp_39 + tmp_235*tmp_40 - 1.0/4.0;
      real_t tmp_239 = tmp_0*tmp_236 + tmp_1*tmp_237 + tmp_238*tmp_3;
      real_t tmp_240 = tmp_10*tmp_237 + tmp_236*tmp_8 + tmp_238*tmp_6;
      real_t tmp_241 = tmp_2*tmp_238 + tmp_236*tmp_9 + tmp_237*tmp_4;
      real_t a_0_0 = 0.019202922745021479*tmp_61*(-tmp_104*tmp_53 - tmp_105*tmp_56 - tmp_106*tmp_58 + 7.0*tmp_60*((tmp_104*tmp_104) + (tmp_105*tmp_105) + (tmp_106*tmp_106))) + 0.020848748529055869*tmp_61*(-tmp_113*tmp_53 - tmp_114*tmp_56 - tmp_115*tmp_58 + 7.0*tmp_60*((tmp_113*tmp_113) + (tmp_114*tmp_114) + (tmp_115*tmp_115))) + 0.019202922745021479*tmp_61*(-tmp_122*tmp_53 - tmp_123*tmp_56 - tmp_124*tmp_58 + 7.0*tmp_60*((tmp_122*tmp_122) + (tmp_123*tmp_123) + (tmp_124*tmp_124))) + 0.020848748529055869*tmp_61*(-tmp_131*tmp_53 - tmp_132*tmp_56 - tmp_133*tmp_58 + 7.0*tmp_60*((tmp_131*tmp_131) + (tmp_132*tmp_132) + (tmp_133*tmp_133))) + 0.019202922745021479*tmp_61*(-tmp_140*tmp_53 - tmp_141*tmp_56 - tmp_142*tmp_58 + 7.0*tmp_60*((tmp_140*tmp_140) + (tmp_141*tmp_141) + (tmp_142*tmp_142))) + 0.020848748529055869*tmp_61*(-tmp_149*tmp_53 - tmp_150*tmp_56 - tmp_151*tmp_58 + 7.0*tmp_60*((tmp_149*tmp_149) + (tmp_150*tmp_150) + (tmp_151*tmp_151))) + 0.019202922745021479*tmp_61*(-tmp_158*tmp_53 - tmp_159*tmp_56 - tmp_160*tmp_58 + 7.0*tmp_60*((tmp_158*tmp_158) + (tmp_159*tmp_159) + (tmp_160*tmp_160))) + 0.042507265838595799*tmp_61*(-tmp_167*tmp_53 - tmp_168*tmp_56 - tmp_169*tmp_58 + 7.0*tmp_60*((tmp_167*tmp_167) + (tmp_168*tmp_168) + (tmp_169*tmp_169))) + 0.020848748529055869*tmp_61*(-tmp_176*tmp_53 - tmp_177*tmp_56 - tmp_178*tmp_58 + 7.0*tmp_60*((tmp_176*tmp_176) + (tmp_177*tmp_177) + (tmp_178*tmp_178))) + 0.0068572537431980923*tmp_61*(-tmp_185*tmp_53 - tmp_186*tmp_56 - tmp_187*tmp_58 + 7.0*tmp_60*((tmp_185*tmp_185) + (tmp_186*tmp_186) + (tmp_187*tmp_187))) + 0.037198804536718075*tmp_61*(-tmp_194*tmp_53 - tmp_195*tmp_56 - tmp_196*tmp_58 + 7.0*tmp_60*((tmp_194*tmp_194) + (tmp_195*tmp_195) + (tmp_196*tmp_196))) + 0.042507265838595799*tmp_61*(-tmp_203*tmp_53 - tmp_204*tmp_56 - tmp_205*tmp_58 + 7.0*tmp_60*((tmp_203*tmp_203) + (tmp_204*tmp_204) + (tmp_205*tmp_205))) + 0.0068572537431980923*tmp_61*(-tmp_212*tmp_53 - tmp_213*tmp_56 - tmp_214*tmp_58 + 7.0*tmp_60*((tmp_212*tmp_212) + (tmp_213*tmp_213) + (tmp_214*tmp_214))) + 0.037198804536718075*tmp_61*(-tmp_221*tmp_53 - tmp_222*tmp_56 - tmp_223*tmp_58 + 7.0*tmp_60*((tmp_221*tmp_221) + (tmp_222*tmp_222) + (tmp_223*tmp_223))) + 0.042507265838595799*tmp_61*(-tmp_230*tmp_53 - tmp_231*tmp_56 - tmp_232*tmp_58 + 7.0*tmp_60*((tmp_230*tmp_230) + (tmp_231*tmp_231) + (tmp_232*tmp_232))) + 0.019202922745021479*tmp_61*(-tmp_239*tmp_53 - tmp_240*tmp_56 - tmp_241*tmp_58 + 7.0*tmp_60*((tmp_239*tmp_239) + (tmp_240*tmp_240) + (tmp_241*tmp_241))) + 0.0068572537431980923*tmp_61*(-tmp_42*tmp_53 - tmp_54*tmp_56 - tmp_57*tmp_58 + 7.0*tmp_60*((tmp_42*tmp_42) + (tmp_54*tmp_54) + (tmp_57*tmp_57))) + 0.037198804536718075*tmp_61*(-tmp_53*tmp_68 - tmp_56*tmp_69 - tmp_58*tmp_70 + 7.0*tmp_60*((tmp_68*tmp_68) + (tmp_69*tmp_69) + (tmp_70*tmp_70))) + 0.020848748529055869*tmp_61*(-tmp_53*tmp_77 - tmp_56*tmp_78 - tmp_58*tmp_79 + 7.0*tmp_60*((tmp_77*tmp_77) + (tmp_78*tmp_78) + (tmp_79*tmp_79))) + 0.019202922745021479*tmp_61*(-tmp_53*tmp_86 - tmp_56*tmp_87 - tmp_58*tmp_88 + 7.0*tmp_60*((tmp_86*tmp_86) + (tmp_87*tmp_87) + (tmp_88*tmp_88))) + 0.020848748529055869*tmp_61*(-tmp_53*tmp_95 - tmp_56*tmp_96 - tmp_58*tmp_97 + 7.0*tmp_60*((tmp_95*tmp_95) + (tmp_96*tmp_96) + (tmp_97*tmp_97)));
      elMat( 0, 0) = a_0_0;
   }

public:

std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g1;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g2;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_3D_g0;
std::function< real_t ( const Point3D & ) > callback_Scalar_Variable_Coefficient_2D_g1;


private:
   void Scalar_Variable_Coefficient_2D_mu( real_t in_0, real_t in_1, real_t* out_0 ) const
   {
   *out_0 = callback2D( Point3D( { in_0, in_1 } ) );
      }
      void Scalar_Variable_Coefficient_3D_mu( real_t in_0, real_t in_1, real_t in_2, real_t* out_0 ) const
      {
      *out_0 = callback3D( Point3D( { in_0, in_1, in_2 } ) );
      }
      std::function< real_t( const Point3D& ) > callback2D;

      std::function< real_t( const Point3D& ) > callback3D;
};


} //eg
} // dg
} // hyteg
